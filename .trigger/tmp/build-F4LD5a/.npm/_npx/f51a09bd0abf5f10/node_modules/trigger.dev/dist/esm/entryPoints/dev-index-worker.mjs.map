{
  "version": 3,
  "sources": ["../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@sodaru/yup-to-json-schema/dist/converters/common.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@sodaru/yup-to-json-schema/dist/converters/string.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@sodaru/yup-to-json-schema/dist/converters/number.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@sodaru/yup-to-json-schema/dist/converters/boolean.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@sodaru/yup-to-json-schema/dist/converters/date.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@sodaru/yup-to-json-schema/dist/converters/array.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@sodaru/yup-to-json-schema/dist/converters/object.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@sodaru/yup-to-json-schema/dist/converters/tuple.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@sodaru/yup-to-json-schema/dist/converters/mixed.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@sodaru/yup-to-json-schema/dist/converters/lazy.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@sodaru/yup-to-json-schema/dist/converters/index.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@sodaru/yup-to-json-schema/dist/methods/index.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@sodaru/yup-to-json-schema/dist/index.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/src/entryPoints/dev-index-worker.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/src/indexing/registerResources.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@trigger.dev/core/src/v3/build/index.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@trigger.dev/core/src/v3/build/extensions.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@trigger.dev/core/dist/esm/v3/build/resolvedConfig.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@trigger.dev/core/src/v3/build/runtime.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@trigger.dev/core/src/v3/build/flags.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@trigger.dev/core/src/v3/build/externals.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/@trigger.dev/schema-to-json/src/index.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/index.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/Options.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/Refs.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/errorMessages.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/getRelativePath.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parseDef.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/selectParser.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/any.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/array.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/bigint.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/boolean.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/branded.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/catch.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/date.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/default.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/effects.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/enum.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/intersection.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/literal.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/map.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/record.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/string.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/nativeEnum.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/never.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/null.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/nullable.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/union.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/number.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/object.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/optional.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/pipeline.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/promise.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/set.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/tuple.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/undefined.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/unknown.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parsers/readonly.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/parseTypes.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod-to-json-schema/dist/esm/zodToJsonSchema.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod/v4/classic/external.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod/v4/core/core.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod/v4/core/util.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod/v4/locales/en.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod/v4/core/registries.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/zod/v4/core/to-json-schema.js", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/index.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Function.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Array.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Either.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Equivalence.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/either.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Equal.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Hash.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/GlobalValue.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Predicate.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Utils.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/errors.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Inspectable.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/effectable.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Pipeable.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/opCodes/effect.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/version.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/option.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/array.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Option.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Order.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Tuple.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Record.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/schema/errors.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/schema/util.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/schema/schemaId.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/SchemaAST.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Number.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/RegExp.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Context.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/context.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/core.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Chunk.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Duration.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/FiberId.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/fiberId.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/HashSet.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/hashSet.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/hashMap.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/hashMap/bitwise.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/hashMap/config.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/hashMap/node.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/stack.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/hashMap/array.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/MutableRef.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/HashMap.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/List.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/RuntimeFlagsPatch.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/runtimeFlags.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/differ.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/data.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/differ/contextPatch.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/differ/hashSetPatch.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/differ/readonlyArrayPatch.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/runtimeFlagsPatch.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/blockedRequests.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/cause.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/opCodes/cause.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/deferred.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/opCodes/deferred.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/singleShotGen.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Exit.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/MutableHashMap.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/clock.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/defaultServices.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/configProvider.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/configError.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/opCodes/configError.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/configProvider/pathPatch.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/opCodes/config.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/defaultServices/console.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/random.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/tracer.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/FiberRefs.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/fiberRefs.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/LogLevel.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/logSpan.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Effectable.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/fiberRefs/patch.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/metric/label.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/fiberRuntime.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/ExecutionStrategy.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/executionStrategy.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/FiberRefsPatch.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/FiberStatus.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/fiberStatus.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Micro.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Scheduler.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/completedRequestMap.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/concurrency.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/fiber.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/fiberScope.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/fiberMessage.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/logger.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/metric.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/metric/boundaries.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/metric/key.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/metric/keyType.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/metric/registry.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/metric/hook.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/metric/state.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/metric/pair.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/request.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/supervisor.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/SortedSet.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/RedBlackTree.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/redBlackTree.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/redBlackTree/iterator.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/redBlackTree/node.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/supervisor/patch.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Differ.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Cause.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Effect.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Scope.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/internal/runtime.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/Data.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/JSONSchema.ts", "../../../../../../../../../../../../../../../.npm/_npx/f51a09bd0abf5f10/node_modules/effect/src/ParseResult.ts"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar commonConverter = function (description, converters) {\n    var _a, _b;\n    var jsonSchema = {};\n    jsonSchema.type = description.type;\n    if (description.nullable) {\n        jsonSchema.type = [jsonSchema.type, \"null\"];\n    }\n    if (((_a = description.oneOf) === null || _a === void 0 ? void 0 : _a.length) > 0) {\n        jsonSchema.enum = description.oneOf;\n    }\n    if (((_b = description.notOneOf) === null || _b === void 0 ? void 0 : _b.length) > 0) {\n        jsonSchema.not = {\n            enum: description.notOneOf\n        };\n    }\n    if (description.label) {\n        jsonSchema.title = description.label;\n    }\n    if (description.default !== undefined) {\n        // @ts-expect-error default is unknown\n        jsonSchema.default = description.default;\n    }\n    return jsonSchema;\n};\nexports.default = commonConverter;\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uuidRegExPattern = void 0;\nvar common_1 = __importDefault(require(\"./common\"));\nexports.uuidRegExPattern = \"^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$\";\nvar stringConverter = function (description, converters) {\n    var jsonSchema = common_1.default(description, converters);\n    var meta = description.meta || {};\n    description.tests.forEach(function (test) {\n        var _a, _b, _c, _d;\n        switch (test.name) {\n            case \"length\":\n                if (((_a = test.params) === null || _a === void 0 ? void 0 : _a.length) !== undefined) {\n                    jsonSchema.minLength = Number(test.params.length);\n                    jsonSchema.maxLength = Number(test.params.length);\n                }\n                break;\n            case \"min\":\n                if (((_b = test.params) === null || _b === void 0 ? void 0 : _b.min) !== undefined) {\n                    jsonSchema.minLength = Number(test.params.min);\n                }\n                break;\n            case \"max\":\n                if (((_c = test.params) === null || _c === void 0 ? void 0 : _c.max) !== undefined) {\n                    jsonSchema.maxLength = Number(test.params.max);\n                }\n                break;\n            case \"matches\":\n                if ((_d = test.params) === null || _d === void 0 ? void 0 : _d.regex) {\n                    jsonSchema.pattern = test.params.regex\n                        .toString()\n                        .replace(/^\\/(.*)\\/[gimusy]*$/, \"$1\");\n                }\n                break;\n            case \"email\":\n                jsonSchema.format = \"email\";\n                break;\n            case \"url\":\n                jsonSchema.format = \"uri\";\n                break;\n            case \"uuid\":\n                jsonSchema.format = \"uuid\";\n                jsonSchema.pattern = exports.uuidRegExPattern;\n                break;\n        }\n    });\n    return Object.assign(jsonSchema, meta.jsonSchema);\n};\nexports.default = stringConverter;\n", "\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = __importDefault(require(\"./common\"));\nvar numberConverter = function (description, converters) {\n    var jsonSchema = common_1.default(description, converters);\n    var meta = description.meta || {};\n    description.tests.forEach(function (test) {\n        var _a, _b, _c, _d;\n        switch (test.name) {\n            case \"min\":\n                if (((_a = test.params) === null || _a === void 0 ? void 0 : _a.min) !== undefined) {\n                    jsonSchema.minimum = Number(test.params.min);\n                }\n                if (((_b = test.params) === null || _b === void 0 ? void 0 : _b.more) !== undefined) {\n                    jsonSchema.exclusiveMinimum = Number(test.params.more);\n                }\n                break;\n            case \"max\":\n                if (((_c = test.params) === null || _c === void 0 ? void 0 : _c.max) !== undefined) {\n                    jsonSchema.maximum = Number(test.params.max);\n                }\n                if (((_d = test.params) === null || _d === void 0 ? void 0 : _d.less) !== undefined) {\n                    jsonSchema.exclusiveMaximum = Number(test.params.less);\n                }\n                break;\n            case \"integer\":\n                if (jsonSchema.type === \"number\") {\n                    jsonSchema.type = \"integer\";\n                }\n                else {\n                    // @ts-expect-error type is known\n                    jsonSchema.type = __spreadArrays(jsonSchema.type, [\"integer\"]).filter(function (type) { return type !== \"number\"; });\n                }\n        }\n    });\n    return Object.assign(jsonSchema, meta.jsonSchema);\n};\nexports.default = numberConverter;\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = __importDefault(require(\"./common\"));\nvar booleanConverter = function (description, converters) {\n    var jsonSchema = common_1.default(description, converters);\n    var meta = description.meta || {};\n    return Object.assign(jsonSchema, meta.jsonSchema);\n};\nexports.default = booleanConverter;\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = __importDefault(require(\"./common\"));\nvar dateConverter = function (description, converters) {\n    var jsonSchema = common_1.default(description, converters);\n    var meta = description.meta || {};\n    jsonSchema.type = \"string\";\n    jsonSchema.format = \"date-time\";\n    return Object.assign(jsonSchema, meta.jsonSchema);\n};\nexports.default = dateConverter;\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = __importDefault(require(\"./common\"));\nvar arrayConverter = function (description, converters) {\n    var jsonSchema = common_1.default(description, converters);\n    var meta = description.meta || {};\n    var innerType = description.innerType;\n    if (innerType) {\n        var converter = converters[innerType.type];\n        jsonSchema.items = converter(innerType, converters);\n    }\n    description.tests.forEach(function (test) {\n        var _a, _b, _c;\n        switch (test.name) {\n            case \"length\":\n                if (((_a = test.params) === null || _a === void 0 ? void 0 : _a.length) !== undefined) {\n                    jsonSchema.minItems = jsonSchema.maxItems = Number(test.params.length);\n                }\n                break;\n            case \"min\":\n                if (((_b = test.params) === null || _b === void 0 ? void 0 : _b.min) !== undefined) {\n                    jsonSchema.minItems = Number(test.params.min);\n                }\n                break;\n            case \"max\":\n                if (((_c = test.params) === null || _c === void 0 ? void 0 : _c.max) !== undefined) {\n                    jsonSchema.maxItems = Number(test.params.max);\n                }\n                break;\n        }\n    });\n    return Object.assign(jsonSchema, meta.jsonSchema);\n};\nexports.default = arrayConverter;\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = __importDefault(require(\"./common\"));\n// @ts-expect-error description is known\nvar objectConverter = function (description, converters) {\n    /*   Yup automatically adds an object where each key is undefined as the deafault in its description. So objects automatically get a default :(. The developer should use jsonSchema({ default: undefined }) to remedy this */\n    var jsonSchema = common_1.default(description, converters);\n    var meta = description.meta || {};\n    var properties = {};\n    var required = [];\n    Object.keys(description.fields).forEach(function (fieldName) {\n        var fieldDescription = description.fields[fieldName];\n        var converter = converters[fieldDescription.type];\n        properties[fieldName] = converter(fieldDescription, converters);\n        if (!fieldDescription.optional) {\n            required.push(fieldName);\n        }\n    });\n    if (Object.keys(properties).length > 0) {\n        jsonSchema.properties = properties;\n    }\n    if (Object.keys(required).length > 0) {\n        jsonSchema.required = required;\n    }\n    return Object.assign(jsonSchema, meta.jsonSchema);\n};\nexports.default = objectConverter;\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = __importDefault(require(\"./common\"));\n// @ts-expect-error description is known\nvar tupleConverter = function (description, converters) {\n    var jsonSchema = common_1.default(description, converters);\n    var meta = description.meta || {};\n    jsonSchema.type = \"array\";\n    jsonSchema.items = description.innerType.map(function (description) {\n        var converter = converters[description.type];\n        return converter(description, converters);\n    });\n    jsonSchema.minItems = jsonSchema.items.length;\n    jsonSchema.maxItems = jsonSchema.items.length;\n    return Object.assign(jsonSchema, meta.jsonSchema);\n};\nexports.default = tupleConverter;\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = __importDefault(require(\"./common\"));\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar getType = function (item) {\n    switch (typeof item) {\n        case \"string\":\n            return \"string\";\n        case \"number\":\n            return \"number\";\n        case \"boolean\":\n            return \"boolean\";\n        case \"object\":\n            if (Array.isArray(item)) {\n                return \"array\";\n            }\n            else if (item === null) {\n                return \"null\";\n            }\n            else if (item instanceof Date) {\n                return \"string\";\n            }\n            else {\n                return \"object\";\n            }\n        default:\n            return \"null\";\n    }\n};\nvar mixedConverter = function (description, converters) {\n    var _a;\n    var jsonSchema = common_1.default(description, converters);\n    var meta = description.meta || {};\n    var types = Array.isArray(description.type)\n        ? description.type\n        : [description.type];\n    types = types.filter(function (type) { return type !== \"mixed\"; });\n    if (((_a = description.oneOf) === null || _a === void 0 ? void 0 : _a.length) > 0) {\n        description.oneOf.forEach(function (item) {\n            types.push(getType(item));\n        });\n    }\n    if (description.default !== undefined) {\n        types.push(getType(description.default));\n    }\n    types = types.filter(function (type, index, self) { return self.indexOf(type) === index; });\n    jsonSchema.type = types;\n    return Object.assign(jsonSchema, meta.jsonSchema);\n};\nexports.default = mixedConverter;\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = __importDefault(require(\"./common\"));\n/* lazy is kind on an intermediate type. If you call schema.describe() with any argument, even schema.describe({}) which this library does by default, then the lazy functions always try to resolve to their return types. Because we always call schema.describe({}) or schema.describe(ResolveOptions) this is mostly unused but should still be here and return an empty type if it does exist in the schema description for some reason */\nvar lazyConverter = function (description, converters) {\n    var jsonSchema = common_1.default(description, converters);\n    var meta = description.meta || {};\n    return Object.assign(jsonSchema, meta.jsonSchema);\n};\nexports.default = lazyConverter;\n", "\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertSchema = void 0;\nvar string_1 = __importDefault(require(\"./string\"));\nvar number_1 = __importDefault(require(\"./number\"));\nvar boolean_1 = __importDefault(require(\"./boolean\"));\nvar date_1 = __importDefault(require(\"./date\"));\nvar array_1 = __importDefault(require(\"./array\"));\nvar object_1 = __importDefault(require(\"./object\"));\nvar tuple_1 = __importDefault(require(\"./tuple\"));\nvar mixed_1 = __importDefault(require(\"./mixed\"));\nvar lazy_1 = __importDefault(require(\"./lazy\"));\nfunction convertSchema(yupSchema, options) {\n    var _a = options || {}, converters = _a.converters, resolveOptions = __rest(_a, [\"converters\"]);\n    var allConverters = __assign({ string: string_1.default, number: number_1.default, boolean: boolean_1.default, date: date_1.default, array: array_1.default, object: object_1.default, tuple: tuple_1.default, mixed: mixed_1.default, lazy: lazy_1.default }, converters);\n    var description = yupSchema.describe(resolveOptions);\n    var converter = allConverters[description.type];\n    return converter(description, allConverters);\n}\nexports.convertSchema = convertSchema;\n", "\"use strict\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extendSchema = void 0;\nfunction addMethod(yup, name) {\n    yup.addMethod(yup.Schema, name, function (value) {\n        var _a;\n        var meta = this.describe().meta || {};\n        return this.meta(__assign(__assign({}, meta), { jsonSchema: __assign(__assign({}, meta.jsonSchema), (_a = {}, _a[name] = value, _a)) }));\n    });\n}\nfunction extendSchema(yup) {\n    addMethod(yup, \"example\");\n    addMethod(yup, \"examples\");\n    addMethod(yup, \"description\");\n    yup.addMethod(yup.Schema, \"jsonSchema\", function (callback) {\n        var meta = this.describe().meta || {};\n        return this.meta(__assign(__assign({}, meta), { jsonSchema: callback(meta.jsonSchema || {}) }));\n    });\n}\nexports.extendSchema = extendSchema;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extendSchema = exports.convertSchema = void 0;\nvar converters_1 = require(\"./converters\");\nObject.defineProperty(exports, \"convertSchema\", { enumerable: true, get: function () { return converters_1.convertSchema; } });\nvar methods_1 = require(\"./methods\");\nObject.defineProperty(exports, \"extendSchema\", { enumerable: true, get: function () { return methods_1.extendSchema; } });\n", null, null, null, null, "export {};\n//# sourceMappingURL=resolvedConfig.js.map", null, null, null, null, "export * from \"./Options.js\";\nexport * from \"./Refs.js\";\nexport * from \"./errorMessages.js\";\nexport * from \"./getRelativePath.js\";\nexport * from \"./parseDef.js\";\nexport * from \"./parseTypes.js\";\nexport * from \"./parsers/any.js\";\nexport * from \"./parsers/array.js\";\nexport * from \"./parsers/bigint.js\";\nexport * from \"./parsers/boolean.js\";\nexport * from \"./parsers/branded.js\";\nexport * from \"./parsers/catch.js\";\nexport * from \"./parsers/date.js\";\nexport * from \"./parsers/default.js\";\nexport * from \"./parsers/effects.js\";\nexport * from \"./parsers/enum.js\";\nexport * from \"./parsers/intersection.js\";\nexport * from \"./parsers/literal.js\";\nexport * from \"./parsers/map.js\";\nexport * from \"./parsers/nativeEnum.js\";\nexport * from \"./parsers/never.js\";\nexport * from \"./parsers/null.js\";\nexport * from \"./parsers/nullable.js\";\nexport * from \"./parsers/number.js\";\nexport * from \"./parsers/object.js\";\nexport * from \"./parsers/optional.js\";\nexport * from \"./parsers/pipeline.js\";\nexport * from \"./parsers/promise.js\";\nexport * from \"./parsers/readonly.js\";\nexport * from \"./parsers/record.js\";\nexport * from \"./parsers/set.js\";\nexport * from \"./parsers/string.js\";\nexport * from \"./parsers/tuple.js\";\nexport * from \"./parsers/undefined.js\";\nexport * from \"./parsers/union.js\";\nexport * from \"./parsers/unknown.js\";\nexport * from \"./selectParser.js\";\nexport * from \"./zodToJsonSchema.js\";\nimport { zodToJsonSchema } from \"./zodToJsonSchema.js\";\nexport default zodToJsonSchema;\n", "export const ignoreOverride = Symbol(\"Let zodToJsonSchema decide on which parser to use\");\nexport const jsonDescription = (jsonSchema, def) => {\n    if (def.description) {\n        try {\n            return {\n                ...jsonSchema,\n                ...JSON.parse(def.description),\n            };\n        }\n        catch { }\n    }\n    return jsonSchema;\n};\nexport const defaultOptions = {\n    name: undefined,\n    $refStrategy: \"root\",\n    basePath: [\"#\"],\n    effectStrategy: \"input\",\n    pipeStrategy: \"all\",\n    dateStrategy: \"format:date-time\",\n    mapStrategy: \"entries\",\n    removeAdditionalStrategy: \"passthrough\",\n    allowedAdditionalProperties: true,\n    rejectedAdditionalProperties: false,\n    definitionPath: \"definitions\",\n    target: \"jsonSchema7\",\n    strictUnions: false,\n    definitions: {},\n    errorMessages: false,\n    markdownDescription: false,\n    patternStrategy: \"escape\",\n    applyRegexFlags: false,\n    emailStrategy: \"format:email\",\n    base64Strategy: \"contentEncoding:base64\",\n    nameStrategy: \"ref\",\n    openAiAnyTypeName: \"OpenAiAnyType\"\n};\nexport const getDefaultOptions = (options) => (typeof options === \"string\"\n    ? {\n        ...defaultOptions,\n        name: options,\n    }\n    : {\n        ...defaultOptions,\n        ...options,\n    });\n", "import { getDefaultOptions } from \"./Options.js\";\nexport const getRefs = (options) => {\n    const _options = getDefaultOptions(options);\n    const currentPath = _options.name !== undefined\n        ? [..._options.basePath, _options.definitionPath, _options.name]\n        : _options.basePath;\n    return {\n        ..._options,\n        flags: { hasReferencedOpenAiAnyType: false },\n        currentPath: currentPath,\n        propertyPath: undefined,\n        seen: new Map(Object.entries(_options.definitions).map(([name, def]) => [\n            def._def,\n            {\n                def: def._def,\n                path: [..._options.basePath, _options.definitionPath, name],\n                // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.\n                jsonSchema: undefined,\n            },\n        ])),\n    };\n};\n", "export function addErrorMessage(res, key, errorMessage, refs) {\n    if (!refs?.errorMessages)\n        return;\n    if (errorMessage) {\n        res.errorMessage = {\n            ...res.errorMessage,\n            [key]: errorMessage,\n        };\n    }\n}\nexport function setResponseValueAndErrors(res, key, value, errorMessage, refs) {\n    res[key] = value;\n    addErrorMessage(res, key, errorMessage, refs);\n}\n", "export const getRelativePath = (pathA, pathB) => {\n    let i = 0;\n    for (; i < pathA.length && i < pathB.length; i++) {\n        if (pathA[i] !== pathB[i])\n            break;\n    }\n    return [(pathA.length - i).toString(), ...pathB.slice(i)].join(\"/\");\n};\n", "import { ignoreOverride } from \"./Options.js\";\nimport { selectParser } from \"./selectParser.js\";\nimport { getRelativePath } from \"./getRelativePath.js\";\nimport { parseAnyDef } from \"./parsers/any.js\";\nexport function parseDef(def, refs, forceResolution = false) {\n    const seenItem = refs.seen.get(def);\n    if (refs.override) {\n        const overrideResult = refs.override?.(def, refs, seenItem, forceResolution);\n        if (overrideResult !== ignoreOverride) {\n            return overrideResult;\n        }\n    }\n    if (seenItem && !forceResolution) {\n        const seenSchema = get$ref(seenItem, refs);\n        if (seenSchema !== undefined) {\n            return seenSchema;\n        }\n    }\n    const newItem = { def, path: refs.currentPath, jsonSchema: undefined };\n    refs.seen.set(def, newItem);\n    const jsonSchemaOrGetter = selectParser(def, def.typeName, refs);\n    // If the return was a function, then the inner definition needs to be extracted before a call to parseDef (recursive)\n    const jsonSchema = typeof jsonSchemaOrGetter === \"function\"\n        ? parseDef(jsonSchemaOrGetter(), refs)\n        : jsonSchemaOrGetter;\n    if (jsonSchema) {\n        addMeta(def, refs, jsonSchema);\n    }\n    if (refs.postProcess) {\n        const postProcessResult = refs.postProcess(jsonSchema, def, refs);\n        newItem.jsonSchema = jsonSchema;\n        return postProcessResult;\n    }\n    newItem.jsonSchema = jsonSchema;\n    return jsonSchema;\n}\nconst get$ref = (item, refs) => {\n    switch (refs.$refStrategy) {\n        case \"root\":\n            return { $ref: item.path.join(\"/\") };\n        case \"relative\":\n            return { $ref: getRelativePath(refs.currentPath, item.path) };\n        case \"none\":\n        case \"seen\": {\n            if (item.path.length < refs.currentPath.length &&\n                item.path.every((value, index) => refs.currentPath[index] === value)) {\n                console.warn(`Recursive reference detected at ${refs.currentPath.join(\"/\")}! Defaulting to any`);\n                return parseAnyDef(refs);\n            }\n            return refs.$refStrategy === \"seen\" ? parseAnyDef(refs) : undefined;\n        }\n    }\n};\nconst addMeta = (def, refs, jsonSchema) => {\n    if (def.description) {\n        jsonSchema.description = def.description;\n        if (refs.markdownDescription) {\n            jsonSchema.markdownDescription = def.description;\n        }\n    }\n    return jsonSchema;\n};\n", "import { ZodFirstPartyTypeKind } from \"zod\";\nimport { parseAnyDef } from \"./parsers/any.js\";\nimport { parseArrayDef } from \"./parsers/array.js\";\nimport { parseBigintDef } from \"./parsers/bigint.js\";\nimport { parseBooleanDef } from \"./parsers/boolean.js\";\nimport { parseBrandedDef } from \"./parsers/branded.js\";\nimport { parseCatchDef } from \"./parsers/catch.js\";\nimport { parseDateDef } from \"./parsers/date.js\";\nimport { parseDefaultDef } from \"./parsers/default.js\";\nimport { parseEffectsDef } from \"./parsers/effects.js\";\nimport { parseEnumDef } from \"./parsers/enum.js\";\nimport { parseIntersectionDef } from \"./parsers/intersection.js\";\nimport { parseLiteralDef } from \"./parsers/literal.js\";\nimport { parseMapDef } from \"./parsers/map.js\";\nimport { parseNativeEnumDef } from \"./parsers/nativeEnum.js\";\nimport { parseNeverDef } from \"./parsers/never.js\";\nimport { parseNullDef } from \"./parsers/null.js\";\nimport { parseNullableDef } from \"./parsers/nullable.js\";\nimport { parseNumberDef } from \"./parsers/number.js\";\nimport { parseObjectDef } from \"./parsers/object.js\";\nimport { parseOptionalDef } from \"./parsers/optional.js\";\nimport { parsePipelineDef } from \"./parsers/pipeline.js\";\nimport { parsePromiseDef } from \"./parsers/promise.js\";\nimport { parseRecordDef } from \"./parsers/record.js\";\nimport { parseSetDef } from \"./parsers/set.js\";\nimport { parseStringDef } from \"./parsers/string.js\";\nimport { parseTupleDef } from \"./parsers/tuple.js\";\nimport { parseUndefinedDef } from \"./parsers/undefined.js\";\nimport { parseUnionDef } from \"./parsers/union.js\";\nimport { parseUnknownDef } from \"./parsers/unknown.js\";\nimport { parseReadonlyDef } from \"./parsers/readonly.js\";\nexport const selectParser = (def, typeName, refs) => {\n    switch (typeName) {\n        case ZodFirstPartyTypeKind.ZodString:\n            return parseStringDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodNumber:\n            return parseNumberDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodObject:\n            return parseObjectDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodBigInt:\n            return parseBigintDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodBoolean:\n            return parseBooleanDef();\n        case ZodFirstPartyTypeKind.ZodDate:\n            return parseDateDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodUndefined:\n            return parseUndefinedDef(refs);\n        case ZodFirstPartyTypeKind.ZodNull:\n            return parseNullDef(refs);\n        case ZodFirstPartyTypeKind.ZodArray:\n            return parseArrayDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodUnion:\n        case ZodFirstPartyTypeKind.ZodDiscriminatedUnion:\n            return parseUnionDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodIntersection:\n            return parseIntersectionDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodTuple:\n            return parseTupleDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodRecord:\n            return parseRecordDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodLiteral:\n            return parseLiteralDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodEnum:\n            return parseEnumDef(def);\n        case ZodFirstPartyTypeKind.ZodNativeEnum:\n            return parseNativeEnumDef(def);\n        case ZodFirstPartyTypeKind.ZodNullable:\n            return parseNullableDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodOptional:\n            return parseOptionalDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodMap:\n            return parseMapDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodSet:\n            return parseSetDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodLazy:\n            return () => def.getter()._def;\n        case ZodFirstPartyTypeKind.ZodPromise:\n            return parsePromiseDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodNaN:\n        case ZodFirstPartyTypeKind.ZodNever:\n            return parseNeverDef(refs);\n        case ZodFirstPartyTypeKind.ZodEffects:\n            return parseEffectsDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodAny:\n            return parseAnyDef(refs);\n        case ZodFirstPartyTypeKind.ZodUnknown:\n            return parseUnknownDef(refs);\n        case ZodFirstPartyTypeKind.ZodDefault:\n            return parseDefaultDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodBranded:\n            return parseBrandedDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodReadonly:\n            return parseReadonlyDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodCatch:\n            return parseCatchDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodPipeline:\n            return parsePipelineDef(def, refs);\n        case ZodFirstPartyTypeKind.ZodFunction:\n        case ZodFirstPartyTypeKind.ZodVoid:\n        case ZodFirstPartyTypeKind.ZodSymbol:\n            return undefined;\n        default:\n            /* c8 ignore next */\n            return ((_) => undefined)(typeName);\n    }\n};\n", "import { getRelativePath } from \"../getRelativePath.js\";\nexport function parseAnyDef(refs) {\n    if (refs.target !== \"openAi\") {\n        return {};\n    }\n    const anyDefinitionPath = [\n        ...refs.basePath,\n        refs.definitionPath,\n        refs.openAiAnyTypeName,\n    ];\n    refs.flags.hasReferencedOpenAiAnyType = true;\n    return {\n        $ref: refs.$refStrategy === \"relative\"\n            ? getRelativePath(anyDefinitionPath, refs.currentPath)\n            : anyDefinitionPath.join(\"/\"),\n    };\n}\n", "import { ZodFirstPartyTypeKind } from \"zod\";\nimport { setResponseValueAndErrors } from \"../errorMessages.js\";\nimport { parseDef } from \"../parseDef.js\";\nexport function parseArrayDef(def, refs) {\n    const res = {\n        type: \"array\",\n    };\n    if (def.type?._def &&\n        def.type?._def?.typeName !== ZodFirstPartyTypeKind.ZodAny) {\n        res.items = parseDef(def.type._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"items\"],\n        });\n    }\n    if (def.minLength) {\n        setResponseValueAndErrors(res, \"minItems\", def.minLength.value, def.minLength.message, refs);\n    }\n    if (def.maxLength) {\n        setResponseValueAndErrors(res, \"maxItems\", def.maxLength.value, def.maxLength.message, refs);\n    }\n    if (def.exactLength) {\n        setResponseValueAndErrors(res, \"minItems\", def.exactLength.value, def.exactLength.message, refs);\n        setResponseValueAndErrors(res, \"maxItems\", def.exactLength.value, def.exactLength.message, refs);\n    }\n    return res;\n}\n", "import { setResponseValueAndErrors } from \"../errorMessages.js\";\nexport function parseBigintDef(def, refs) {\n    const res = {\n        type: \"integer\",\n        format: \"int64\",\n    };\n    if (!def.checks)\n        return res;\n    for (const check of def.checks) {\n        switch (check.kind) {\n            case \"min\":\n                if (refs.target === \"jsonSchema7\") {\n                    if (check.inclusive) {\n                        setResponseValueAndErrors(res, \"minimum\", check.value, check.message, refs);\n                    }\n                    else {\n                        setResponseValueAndErrors(res, \"exclusiveMinimum\", check.value, check.message, refs);\n                    }\n                }\n                else {\n                    if (!check.inclusive) {\n                        res.exclusiveMinimum = true;\n                    }\n                    setResponseValueAndErrors(res, \"minimum\", check.value, check.message, refs);\n                }\n                break;\n            case \"max\":\n                if (refs.target === \"jsonSchema7\") {\n                    if (check.inclusive) {\n                        setResponseValueAndErrors(res, \"maximum\", check.value, check.message, refs);\n                    }\n                    else {\n                        setResponseValueAndErrors(res, \"exclusiveMaximum\", check.value, check.message, refs);\n                    }\n                }\n                else {\n                    if (!check.inclusive) {\n                        res.exclusiveMaximum = true;\n                    }\n                    setResponseValueAndErrors(res, \"maximum\", check.value, check.message, refs);\n                }\n                break;\n            case \"multipleOf\":\n                setResponseValueAndErrors(res, \"multipleOf\", check.value, check.message, refs);\n                break;\n        }\n    }\n    return res;\n}\n", "export function parseBooleanDef() {\n    return {\n        type: \"boolean\",\n    };\n}\n", "import { parseDef } from \"../parseDef.js\";\nexport function parseBrandedDef(_def, refs) {\n    return parseDef(_def.type._def, refs);\n}\n", "import { parseDef } from \"../parseDef.js\";\nexport const parseCatchDef = (def, refs) => {\n    return parseDef(def.innerType._def, refs);\n};\n", "import { setResponseValueAndErrors } from \"../errorMessages.js\";\nexport function parseDateDef(def, refs, overrideDateStrategy) {\n    const strategy = overrideDateStrategy ?? refs.dateStrategy;\n    if (Array.isArray(strategy)) {\n        return {\n            anyOf: strategy.map((item, i) => parseDateDef(def, refs, item)),\n        };\n    }\n    switch (strategy) {\n        case \"string\":\n        case \"format:date-time\":\n            return {\n                type: \"string\",\n                format: \"date-time\",\n            };\n        case \"format:date\":\n            return {\n                type: \"string\",\n                format: \"date\",\n            };\n        case \"integer\":\n            return integerDateParser(def, refs);\n    }\n}\nconst integerDateParser = (def, refs) => {\n    const res = {\n        type: \"integer\",\n        format: \"unix-time\",\n    };\n    if (refs.target === \"openApi3\") {\n        return res;\n    }\n    for (const check of def.checks) {\n        switch (check.kind) {\n            case \"min\":\n                setResponseValueAndErrors(res, \"minimum\", check.value, // This is in milliseconds\n                check.message, refs);\n                break;\n            case \"max\":\n                setResponseValueAndErrors(res, \"maximum\", check.value, // This is in milliseconds\n                check.message, refs);\n                break;\n        }\n    }\n    return res;\n};\n", "import { parseDef } from \"../parseDef.js\";\nexport function parseDefaultDef(_def, refs) {\n    return {\n        ...parseDef(_def.innerType._def, refs),\n        default: _def.defaultValue(),\n    };\n}\n", "import { parseDef } from \"../parseDef.js\";\nimport { parseAnyDef } from \"./any.js\";\nexport function parseEffectsDef(_def, refs) {\n    return refs.effectStrategy === \"input\"\n        ? parseDef(_def.schema._def, refs)\n        : parseAnyDef(refs);\n}\n", "export function parseEnumDef(def) {\n    return {\n        type: \"string\",\n        enum: Array.from(def.values),\n    };\n}\n", "import { parseDef } from \"../parseDef.js\";\nconst isJsonSchema7AllOfType = (type) => {\n    if (\"type\" in type && type.type === \"string\")\n        return false;\n    return \"allOf\" in type;\n};\nexport function parseIntersectionDef(def, refs) {\n    const allOf = [\n        parseDef(def.left._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"allOf\", \"0\"],\n        }),\n        parseDef(def.right._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"allOf\", \"1\"],\n        }),\n    ].filter((x) => !!x);\n    let unevaluatedProperties = refs.target === \"jsonSchema2019-09\"\n        ? { unevaluatedProperties: false }\n        : undefined;\n    const mergedAllOf = [];\n    // If either of the schemas is an allOf, merge them into a single allOf\n    allOf.forEach((schema) => {\n        if (isJsonSchema7AllOfType(schema)) {\n            mergedAllOf.push(...schema.allOf);\n            if (schema.unevaluatedProperties === undefined) {\n                // If one of the schemas has no unevaluatedProperties set,\n                // the merged schema should also have no unevaluatedProperties set\n                unevaluatedProperties = undefined;\n            }\n        }\n        else {\n            let nestedSchema = schema;\n            if (\"additionalProperties\" in schema &&\n                schema.additionalProperties === false) {\n                const { additionalProperties, ...rest } = schema;\n                nestedSchema = rest;\n            }\n            else {\n                // As soon as one of the schemas has additionalProperties set not to false, we allow unevaluatedProperties\n                unevaluatedProperties = undefined;\n            }\n            mergedAllOf.push(nestedSchema);\n        }\n    });\n    return mergedAllOf.length\n        ? {\n            allOf: mergedAllOf,\n            ...unevaluatedProperties,\n        }\n        : undefined;\n}\n", "export function parseLiteralDef(def, refs) {\n    const parsedType = typeof def.value;\n    if (parsedType !== \"bigint\" &&\n        parsedType !== \"number\" &&\n        parsedType !== \"boolean\" &&\n        parsedType !== \"string\") {\n        return {\n            type: Array.isArray(def.value) ? \"array\" : \"object\",\n        };\n    }\n    if (refs.target === \"openApi3\") {\n        return {\n            type: parsedType === \"bigint\" ? \"integer\" : parsedType,\n            enum: [def.value],\n        };\n    }\n    return {\n        type: parsedType === \"bigint\" ? \"integer\" : parsedType,\n        const: def.value,\n    };\n}\n", "import { parseDef } from \"../parseDef.js\";\nimport { parseRecordDef } from \"./record.js\";\nimport { parseAnyDef } from \"./any.js\";\nexport function parseMapDef(def, refs) {\n    if (refs.mapStrategy === \"record\") {\n        return parseRecordDef(def, refs);\n    }\n    const keys = parseDef(def.keyType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"items\", \"items\", \"0\"],\n    }) || parseAnyDef(refs);\n    const values = parseDef(def.valueType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"items\", \"items\", \"1\"],\n    }) || parseAnyDef(refs);\n    return {\n        type: \"array\",\n        maxItems: 125,\n        items: {\n            type: \"array\",\n            items: [keys, values],\n            minItems: 2,\n            maxItems: 2,\n        },\n    };\n}\n", "import { ZodFirstPartyTypeKind, } from \"zod\";\nimport { parseDef } from \"../parseDef.js\";\nimport { parseStringDef } from \"./string.js\";\nimport { parseBrandedDef } from \"./branded.js\";\nimport { parseAnyDef } from \"./any.js\";\nexport function parseRecordDef(def, refs) {\n    if (refs.target === \"openAi\") {\n        console.warn(\"Warning: OpenAI may not support records in schemas! Try an array of key-value pairs instead.\");\n    }\n    if (refs.target === \"openApi3\" &&\n        def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {\n        return {\n            type: \"object\",\n            required: def.keyType._def.values,\n            properties: def.keyType._def.values.reduce((acc, key) => ({\n                ...acc,\n                [key]: parseDef(def.valueType._def, {\n                    ...refs,\n                    currentPath: [...refs.currentPath, \"properties\", key],\n                }) ?? parseAnyDef(refs),\n            }), {}),\n            additionalProperties: refs.rejectedAdditionalProperties,\n        };\n    }\n    const schema = {\n        type: \"object\",\n        additionalProperties: parseDef(def.valueType._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"additionalProperties\"],\n        }) ?? refs.allowedAdditionalProperties,\n    };\n    if (refs.target === \"openApi3\") {\n        return schema;\n    }\n    if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodString &&\n        def.keyType._def.checks?.length) {\n        const { type, ...keyType } = parseStringDef(def.keyType._def, refs);\n        return {\n            ...schema,\n            propertyNames: keyType,\n        };\n    }\n    else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {\n        return {\n            ...schema,\n            propertyNames: {\n                enum: def.keyType._def.values,\n            },\n        };\n    }\n    else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodBranded &&\n        def.keyType._def.type._def.typeName === ZodFirstPartyTypeKind.ZodString &&\n        def.keyType._def.type._def.checks?.length) {\n        const { type, ...keyType } = parseBrandedDef(def.keyType._def, refs);\n        return {\n            ...schema,\n            propertyNames: keyType,\n        };\n    }\n    return schema;\n}\n", "import { setResponseValueAndErrors } from \"../errorMessages.js\";\nlet emojiRegex = undefined;\n/**\n * Generated from the regular expressions found here as of 2024-05-22:\n * https://github.com/colinhacks/zod/blob/master/src/types.ts.\n *\n * Expressions with /i flag have been changed accordingly.\n */\nexport const zodPatterns = {\n    /**\n     * `c` was changed to `[cC]` to replicate /i flag\n     */\n    cuid: /^[cC][^\\s-]{8,}$/,\n    cuid2: /^[0-9a-z]+$/,\n    ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,\n    /**\n     * `a-z` was added to replicate /i flag\n     */\n    email: /^(?!\\.)(?!.*\\.\\.)([a-zA-Z0-9_'+\\-\\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\\-]*\\.)+[a-zA-Z]{2,}$/,\n    /**\n     * Constructed a valid Unicode RegExp\n     *\n     * Lazily instantiate since this type of regex isn't supported\n     * in all envs (e.g. React Native).\n     *\n     * See:\n     * https://github.com/colinhacks/zod/issues/2433\n     * Fix in Zod:\n     * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b\n     */\n    emoji: () => {\n        if (emojiRegex === undefined) {\n            emojiRegex = RegExp(\"^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$\", \"u\");\n        }\n        return emojiRegex;\n    },\n    /**\n     * Unused\n     */\n    uuid: /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/,\n    /**\n     * Unused\n     */\n    ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,\n    ipv4Cidr: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/,\n    /**\n     * Unused\n     */\n    ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,\n    ipv6Cidr: /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,\n    base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,\n    base64url: /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,\n    nanoid: /^[a-zA-Z0-9_-]{21}$/,\n    jwt: /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/,\n};\nexport function parseStringDef(def, refs) {\n    const res = {\n        type: \"string\",\n    };\n    if (def.checks) {\n        for (const check of def.checks) {\n            switch (check.kind) {\n                case \"min\":\n                    setResponseValueAndErrors(res, \"minLength\", typeof res.minLength === \"number\"\n                        ? Math.max(res.minLength, check.value)\n                        : check.value, check.message, refs);\n                    break;\n                case \"max\":\n                    setResponseValueAndErrors(res, \"maxLength\", typeof res.maxLength === \"number\"\n                        ? Math.min(res.maxLength, check.value)\n                        : check.value, check.message, refs);\n                    break;\n                case \"email\":\n                    switch (refs.emailStrategy) {\n                        case \"format:email\":\n                            addFormat(res, \"email\", check.message, refs);\n                            break;\n                        case \"format:idn-email\":\n                            addFormat(res, \"idn-email\", check.message, refs);\n                            break;\n                        case \"pattern:zod\":\n                            addPattern(res, zodPatterns.email, check.message, refs);\n                            break;\n                    }\n                    break;\n                case \"url\":\n                    addFormat(res, \"uri\", check.message, refs);\n                    break;\n                case \"uuid\":\n                    addFormat(res, \"uuid\", check.message, refs);\n                    break;\n                case \"regex\":\n                    addPattern(res, check.regex, check.message, refs);\n                    break;\n                case \"cuid\":\n                    addPattern(res, zodPatterns.cuid, check.message, refs);\n                    break;\n                case \"cuid2\":\n                    addPattern(res, zodPatterns.cuid2, check.message, refs);\n                    break;\n                case \"startsWith\":\n                    addPattern(res, RegExp(`^${escapeLiteralCheckValue(check.value, refs)}`), check.message, refs);\n                    break;\n                case \"endsWith\":\n                    addPattern(res, RegExp(`${escapeLiteralCheckValue(check.value, refs)}$`), check.message, refs);\n                    break;\n                case \"datetime\":\n                    addFormat(res, \"date-time\", check.message, refs);\n                    break;\n                case \"date\":\n                    addFormat(res, \"date\", check.message, refs);\n                    break;\n                case \"time\":\n                    addFormat(res, \"time\", check.message, refs);\n                    break;\n                case \"duration\":\n                    addFormat(res, \"duration\", check.message, refs);\n                    break;\n                case \"length\":\n                    setResponseValueAndErrors(res, \"minLength\", typeof res.minLength === \"number\"\n                        ? Math.max(res.minLength, check.value)\n                        : check.value, check.message, refs);\n                    setResponseValueAndErrors(res, \"maxLength\", typeof res.maxLength === \"number\"\n                        ? Math.min(res.maxLength, check.value)\n                        : check.value, check.message, refs);\n                    break;\n                case \"includes\": {\n                    addPattern(res, RegExp(escapeLiteralCheckValue(check.value, refs)), check.message, refs);\n                    break;\n                }\n                case \"ip\": {\n                    if (check.version !== \"v6\") {\n                        addFormat(res, \"ipv4\", check.message, refs);\n                    }\n                    if (check.version !== \"v4\") {\n                        addFormat(res, \"ipv6\", check.message, refs);\n                    }\n                    break;\n                }\n                case \"base64url\":\n                    addPattern(res, zodPatterns.base64url, check.message, refs);\n                    break;\n                case \"jwt\":\n                    addPattern(res, zodPatterns.jwt, check.message, refs);\n                    break;\n                case \"cidr\": {\n                    if (check.version !== \"v6\") {\n                        addPattern(res, zodPatterns.ipv4Cidr, check.message, refs);\n                    }\n                    if (check.version !== \"v4\") {\n                        addPattern(res, zodPatterns.ipv6Cidr, check.message, refs);\n                    }\n                    break;\n                }\n                case \"emoji\":\n                    addPattern(res, zodPatterns.emoji(), check.message, refs);\n                    break;\n                case \"ulid\": {\n                    addPattern(res, zodPatterns.ulid, check.message, refs);\n                    break;\n                }\n                case \"base64\": {\n                    switch (refs.base64Strategy) {\n                        case \"format:binary\": {\n                            addFormat(res, \"binary\", check.message, refs);\n                            break;\n                        }\n                        case \"contentEncoding:base64\": {\n                            setResponseValueAndErrors(res, \"contentEncoding\", \"base64\", check.message, refs);\n                            break;\n                        }\n                        case \"pattern:zod\": {\n                            addPattern(res, zodPatterns.base64, check.message, refs);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"nanoid\": {\n                    addPattern(res, zodPatterns.nanoid, check.message, refs);\n                }\n                case \"toLowerCase\":\n                case \"toUpperCase\":\n                case \"trim\":\n                    break;\n                default:\n                    /* c8 ignore next */\n                    ((_) => { })(check);\n            }\n        }\n    }\n    return res;\n}\nfunction escapeLiteralCheckValue(literal, refs) {\n    return refs.patternStrategy === \"escape\"\n        ? escapeNonAlphaNumeric(literal)\n        : literal;\n}\nconst ALPHA_NUMERIC = new Set(\"ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789\");\nfunction escapeNonAlphaNumeric(source) {\n    let result = \"\";\n    for (let i = 0; i < source.length; i++) {\n        if (!ALPHA_NUMERIC.has(source[i])) {\n            result += \"\\\\\";\n        }\n        result += source[i];\n    }\n    return result;\n}\n// Adds a \"format\" keyword to the schema. If a format exists, both formats will be joined in an allOf-node, along with subsequent ones.\nfunction addFormat(schema, value, message, refs) {\n    if (schema.format || schema.anyOf?.some((x) => x.format)) {\n        if (!schema.anyOf) {\n            schema.anyOf = [];\n        }\n        if (schema.format) {\n            schema.anyOf.push({\n                format: schema.format,\n                ...(schema.errorMessage &&\n                    refs.errorMessages && {\n                    errorMessage: { format: schema.errorMessage.format },\n                }),\n            });\n            delete schema.format;\n            if (schema.errorMessage) {\n                delete schema.errorMessage.format;\n                if (Object.keys(schema.errorMessage).length === 0) {\n                    delete schema.errorMessage;\n                }\n            }\n        }\n        schema.anyOf.push({\n            format: value,\n            ...(message &&\n                refs.errorMessages && { errorMessage: { format: message } }),\n        });\n    }\n    else {\n        setResponseValueAndErrors(schema, \"format\", value, message, refs);\n    }\n}\n// Adds a \"pattern\" keyword to the schema. If a pattern exists, both patterns will be joined in an allOf-node, along with subsequent ones.\nfunction addPattern(schema, regex, message, refs) {\n    if (schema.pattern || schema.allOf?.some((x) => x.pattern)) {\n        if (!schema.allOf) {\n            schema.allOf = [];\n        }\n        if (schema.pattern) {\n            schema.allOf.push({\n                pattern: schema.pattern,\n                ...(schema.errorMessage &&\n                    refs.errorMessages && {\n                    errorMessage: { pattern: schema.errorMessage.pattern },\n                }),\n            });\n            delete schema.pattern;\n            if (schema.errorMessage) {\n                delete schema.errorMessage.pattern;\n                if (Object.keys(schema.errorMessage).length === 0) {\n                    delete schema.errorMessage;\n                }\n            }\n        }\n        schema.allOf.push({\n            pattern: stringifyRegExpWithFlags(regex, refs),\n            ...(message &&\n                refs.errorMessages && { errorMessage: { pattern: message } }),\n        });\n    }\n    else {\n        setResponseValueAndErrors(schema, \"pattern\", stringifyRegExpWithFlags(regex, refs), message, refs);\n    }\n}\n// Mutate z.string.regex() in a best attempt to accommodate for regex flags when applyRegexFlags is true\nfunction stringifyRegExpWithFlags(regex, refs) {\n    if (!refs.applyRegexFlags || !regex.flags) {\n        return regex.source;\n    }\n    // Currently handled flags\n    const flags = {\n        i: regex.flags.includes(\"i\"),\n        m: regex.flags.includes(\"m\"),\n        s: regex.flags.includes(\"s\"), // `.` matches newlines\n    };\n    // The general principle here is to step through each character, one at a time, applying mutations as flags require. We keep track when the current character is escaped, and when it's inside a group /like [this]/ or (also) a range like /[a-z]/. The following is fairly brittle imperative code; edit at your peril!\n    const source = flags.i ? regex.source.toLowerCase() : regex.source;\n    let pattern = \"\";\n    let isEscaped = false;\n    let inCharGroup = false;\n    let inCharRange = false;\n    for (let i = 0; i < source.length; i++) {\n        if (isEscaped) {\n            pattern += source[i];\n            isEscaped = false;\n            continue;\n        }\n        if (flags.i) {\n            if (inCharGroup) {\n                if (source[i].match(/[a-z]/)) {\n                    if (inCharRange) {\n                        pattern += source[i];\n                        pattern += `${source[i - 2]}-${source[i]}`.toUpperCase();\n                        inCharRange = false;\n                    }\n                    else if (source[i + 1] === \"-\" && source[i + 2]?.match(/[a-z]/)) {\n                        pattern += source[i];\n                        inCharRange = true;\n                    }\n                    else {\n                        pattern += `${source[i]}${source[i].toUpperCase()}`;\n                    }\n                    continue;\n                }\n            }\n            else if (source[i].match(/[a-z]/)) {\n                pattern += `[${source[i]}${source[i].toUpperCase()}]`;\n                continue;\n            }\n        }\n        if (flags.m) {\n            if (source[i] === \"^\") {\n                pattern += `(^|(?<=[\\r\\n]))`;\n                continue;\n            }\n            else if (source[i] === \"$\") {\n                pattern += `($|(?=[\\r\\n]))`;\n                continue;\n            }\n        }\n        if (flags.s && source[i] === \".\") {\n            pattern += inCharGroup ? `${source[i]}\\r\\n` : `[${source[i]}\\r\\n]`;\n            continue;\n        }\n        pattern += source[i];\n        if (source[i] === \"\\\\\") {\n            isEscaped = true;\n        }\n        else if (inCharGroup && source[i] === \"]\") {\n            inCharGroup = false;\n        }\n        else if (!inCharGroup && source[i] === \"[\") {\n            inCharGroup = true;\n        }\n    }\n    try {\n        new RegExp(pattern);\n    }\n    catch {\n        console.warn(`Could not convert regex pattern at ${refs.currentPath.join(\"/\")} to a flag-independent form! Falling back to the flag-ignorant source`);\n        return regex.source;\n    }\n    return pattern;\n}\n", "export function parseNativeEnumDef(def) {\n    const object = def.values;\n    const actualKeys = Object.keys(def.values).filter((key) => {\n        return typeof object[object[key]] !== \"number\";\n    });\n    const actualValues = actualKeys.map((key) => object[key]);\n    const parsedTypes = Array.from(new Set(actualValues.map((values) => typeof values)));\n    return {\n        type: parsedTypes.length === 1\n            ? parsedTypes[0] === \"string\"\n                ? \"string\"\n                : \"number\"\n            : [\"string\", \"number\"],\n        enum: actualValues,\n    };\n}\n", "import { parseAnyDef } from \"./any.js\";\nexport function parseNeverDef(refs) {\n    return refs.target === \"openAi\"\n        ? undefined\n        : {\n            not: parseAnyDef({\n                ...refs,\n                currentPath: [...refs.currentPath, \"not\"],\n            }),\n        };\n}\n", "export function parseNullDef(refs) {\n    return refs.target === \"openApi3\"\n        ? {\n            enum: [\"null\"],\n            nullable: true,\n        }\n        : {\n            type: \"null\",\n        };\n}\n", "import { parseDef } from \"../parseDef.js\";\nimport { primitiveMappings } from \"./union.js\";\nexport function parseNullableDef(def, refs) {\n    if ([\"ZodString\", \"ZodNumber\", \"ZodBigInt\", \"ZodBoolean\", \"ZodNull\"].includes(def.innerType._def.typeName) &&\n        (!def.innerType._def.checks || !def.innerType._def.checks.length)) {\n        if (refs.target === \"openApi3\") {\n            return {\n                type: primitiveMappings[def.innerType._def.typeName],\n                nullable: true,\n            };\n        }\n        return {\n            type: [\n                primitiveMappings[def.innerType._def.typeName],\n                \"null\",\n            ],\n        };\n    }\n    if (refs.target === \"openApi3\") {\n        const base = parseDef(def.innerType._def, {\n            ...refs,\n            currentPath: [...refs.currentPath],\n        });\n        if (base && \"$ref\" in base)\n            return { allOf: [base], nullable: true };\n        return base && { ...base, nullable: true };\n    }\n    const base = parseDef(def.innerType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"anyOf\", \"0\"],\n    });\n    return base && { anyOf: [base, { type: \"null\" }] };\n}\n", "import { parseDef } from \"../parseDef.js\";\nexport const primitiveMappings = {\n    ZodString: \"string\",\n    ZodNumber: \"number\",\n    ZodBigInt: \"integer\",\n    ZodBoolean: \"boolean\",\n    ZodNull: \"null\",\n};\nexport function parseUnionDef(def, refs) {\n    if (refs.target === \"openApi3\")\n        return asAnyOf(def, refs);\n    const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;\n    // This blocks tries to look ahead a bit to produce nicer looking schemas with type array instead of anyOf.\n    if (options.every((x) => x._def.typeName in primitiveMappings &&\n        (!x._def.checks || !x._def.checks.length))) {\n        // all types in union are primitive and lack checks, so might as well squash into {type: [...]}\n        const types = options.reduce((types, x) => {\n            const type = primitiveMappings[x._def.typeName]; //Can be safely casted due to row 43\n            return type && !types.includes(type) ? [...types, type] : types;\n        }, []);\n        return {\n            type: types.length > 1 ? types : types[0],\n        };\n    }\n    else if (options.every((x) => x._def.typeName === \"ZodLiteral\" && !x.description)) {\n        // all options literals\n        const types = options.reduce((acc, x) => {\n            const type = typeof x._def.value;\n            switch (type) {\n                case \"string\":\n                case \"number\":\n                case \"boolean\":\n                    return [...acc, type];\n                case \"bigint\":\n                    return [...acc, \"integer\"];\n                case \"object\":\n                    if (x._def.value === null)\n                        return [...acc, \"null\"];\n                case \"symbol\":\n                case \"undefined\":\n                case \"function\":\n                default:\n                    return acc;\n            }\n        }, []);\n        if (types.length === options.length) {\n            // all the literals are primitive, as far as null can be considered primitive\n            const uniqueTypes = types.filter((x, i, a) => a.indexOf(x) === i);\n            return {\n                type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],\n                enum: options.reduce((acc, x) => {\n                    return acc.includes(x._def.value) ? acc : [...acc, x._def.value];\n                }, []),\n            };\n        }\n    }\n    else if (options.every((x) => x._def.typeName === \"ZodEnum\")) {\n        return {\n            type: \"string\",\n            enum: options.reduce((acc, x) => [\n                ...acc,\n                ...x._def.values.filter((x) => !acc.includes(x)),\n            ], []),\n        };\n    }\n    return asAnyOf(def, refs);\n}\nconst asAnyOf = (def, refs) => {\n    const anyOf = (def.options instanceof Map\n        ? Array.from(def.options.values())\n        : def.options)\n        .map((x, i) => parseDef(x._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"anyOf\", `${i}`],\n    }))\n        .filter((x) => !!x &&\n        (!refs.strictUnions ||\n            (typeof x === \"object\" && Object.keys(x).length > 0)));\n    return anyOf.length ? { anyOf } : undefined;\n};\n", "import { addErrorMessage, setResponseValueAndErrors, } from \"../errorMessages.js\";\nexport function parseNumberDef(def, refs) {\n    const res = {\n        type: \"number\",\n    };\n    if (!def.checks)\n        return res;\n    for (const check of def.checks) {\n        switch (check.kind) {\n            case \"int\":\n                res.type = \"integer\";\n                addErrorMessage(res, \"type\", check.message, refs);\n                break;\n            case \"min\":\n                if (refs.target === \"jsonSchema7\") {\n                    if (check.inclusive) {\n                        setResponseValueAndErrors(res, \"minimum\", check.value, check.message, refs);\n                    }\n                    else {\n                        setResponseValueAndErrors(res, \"exclusiveMinimum\", check.value, check.message, refs);\n                    }\n                }\n                else {\n                    if (!check.inclusive) {\n                        res.exclusiveMinimum = true;\n                    }\n                    setResponseValueAndErrors(res, \"minimum\", check.value, check.message, refs);\n                }\n                break;\n            case \"max\":\n                if (refs.target === \"jsonSchema7\") {\n                    if (check.inclusive) {\n                        setResponseValueAndErrors(res, \"maximum\", check.value, check.message, refs);\n                    }\n                    else {\n                        setResponseValueAndErrors(res, \"exclusiveMaximum\", check.value, check.message, refs);\n                    }\n                }\n                else {\n                    if (!check.inclusive) {\n                        res.exclusiveMaximum = true;\n                    }\n                    setResponseValueAndErrors(res, \"maximum\", check.value, check.message, refs);\n                }\n                break;\n            case \"multipleOf\":\n                setResponseValueAndErrors(res, \"multipleOf\", check.value, check.message, refs);\n                break;\n        }\n    }\n    return res;\n}\n", "import { parseDef } from \"../parseDef.js\";\nexport function parseObjectDef(def, refs) {\n    const forceOptionalIntoNullable = refs.target === \"openAi\";\n    const result = {\n        type: \"object\",\n        properties: {},\n    };\n    const required = [];\n    const shape = def.shape();\n    for (const propName in shape) {\n        let propDef = shape[propName];\n        if (propDef === undefined || propDef._def === undefined) {\n            continue;\n        }\n        let propOptional = safeIsOptional(propDef);\n        if (propOptional && forceOptionalIntoNullable) {\n            if (propDef._def.typeName === \"ZodOptional\") {\n                propDef = propDef._def.innerType;\n            }\n            if (!propDef.isNullable()) {\n                propDef = propDef.nullable();\n            }\n            propOptional = false;\n        }\n        const parsedDef = parseDef(propDef._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"properties\", propName],\n            propertyPath: [...refs.currentPath, \"properties\", propName],\n        });\n        if (parsedDef === undefined) {\n            continue;\n        }\n        result.properties[propName] = parsedDef;\n        if (!propOptional) {\n            required.push(propName);\n        }\n    }\n    if (required.length) {\n        result.required = required;\n    }\n    const additionalProperties = decideAdditionalProperties(def, refs);\n    if (additionalProperties !== undefined) {\n        result.additionalProperties = additionalProperties;\n    }\n    return result;\n}\nfunction decideAdditionalProperties(def, refs) {\n    if (def.catchall._def.typeName !== \"ZodNever\") {\n        return parseDef(def.catchall._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"additionalProperties\"],\n        });\n    }\n    switch (def.unknownKeys) {\n        case \"passthrough\":\n            return refs.allowedAdditionalProperties;\n        case \"strict\":\n            return refs.rejectedAdditionalProperties;\n        case \"strip\":\n            return refs.removeAdditionalStrategy === \"strict\"\n                ? refs.allowedAdditionalProperties\n                : refs.rejectedAdditionalProperties;\n    }\n}\nfunction safeIsOptional(schema) {\n    try {\n        return schema.isOptional();\n    }\n    catch {\n        return true;\n    }\n}\n", "import { parseDef } from \"../parseDef.js\";\nimport { parseAnyDef } from \"./any.js\";\nexport const parseOptionalDef = (def, refs) => {\n    if (refs.currentPath.toString() === refs.propertyPath?.toString()) {\n        return parseDef(def.innerType._def, refs);\n    }\n    const innerSchema = parseDef(def.innerType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"anyOf\", \"1\"],\n    });\n    return innerSchema\n        ? {\n            anyOf: [\n                {\n                    not: parseAnyDef(refs),\n                },\n                innerSchema,\n            ],\n        }\n        : parseAnyDef(refs);\n};\n", "import { parseDef } from \"../parseDef.js\";\nexport const parsePipelineDef = (def, refs) => {\n    if (refs.pipeStrategy === \"input\") {\n        return parseDef(def.in._def, refs);\n    }\n    else if (refs.pipeStrategy === \"output\") {\n        return parseDef(def.out._def, refs);\n    }\n    const a = parseDef(def.in._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"allOf\", \"0\"],\n    });\n    const b = parseDef(def.out._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"allOf\", a ? \"1\" : \"0\"],\n    });\n    return {\n        allOf: [a, b].filter((x) => x !== undefined),\n    };\n};\n", "import { parseDef } from \"../parseDef.js\";\nexport function parsePromiseDef(def, refs) {\n    return parseDef(def.type._def, refs);\n}\n", "import { setResponseValueAndErrors } from \"../errorMessages.js\";\nimport { parseDef } from \"../parseDef.js\";\nexport function parseSetDef(def, refs) {\n    const items = parseDef(def.valueType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"items\"],\n    });\n    const schema = {\n        type: \"array\",\n        uniqueItems: true,\n        items,\n    };\n    if (def.minSize) {\n        setResponseValueAndErrors(schema, \"minItems\", def.minSize.value, def.minSize.message, refs);\n    }\n    if (def.maxSize) {\n        setResponseValueAndErrors(schema, \"maxItems\", def.maxSize.value, def.maxSize.message, refs);\n    }\n    return schema;\n}\n", "import { parseDef } from \"../parseDef.js\";\nexport function parseTupleDef(def, refs) {\n    if (def.rest) {\n        return {\n            type: \"array\",\n            minItems: def.items.length,\n            items: def.items\n                .map((x, i) => parseDef(x._def, {\n                ...refs,\n                currentPath: [...refs.currentPath, \"items\", `${i}`],\n            }))\n                .reduce((acc, x) => (x === undefined ? acc : [...acc, x]), []),\n            additionalItems: parseDef(def.rest._def, {\n                ...refs,\n                currentPath: [...refs.currentPath, \"additionalItems\"],\n            }),\n        };\n    }\n    else {\n        return {\n            type: \"array\",\n            minItems: def.items.length,\n            maxItems: def.items.length,\n            items: def.items\n                .map((x, i) => parseDef(x._def, {\n                ...refs,\n                currentPath: [...refs.currentPath, \"items\", `${i}`],\n            }))\n                .reduce((acc, x) => (x === undefined ? acc : [...acc, x]), []),\n        };\n    }\n}\n", "import { parseAnyDef } from \"./any.js\";\nexport function parseUndefinedDef(refs) {\n    return {\n        not: parseAnyDef(refs),\n    };\n}\n", "import { parseAnyDef } from \"./any.js\";\nexport function parseUnknownDef(refs) {\n    return parseAnyDef(refs);\n}\n", "import { parseDef } from \"../parseDef.js\";\nexport const parseReadonlyDef = (def, refs) => {\n    return parseDef(def.innerType._def, refs);\n};\n", "export {};\n", "import { parseDef } from \"./parseDef.js\";\nimport { getRefs } from \"./Refs.js\";\nimport { parseAnyDef } from \"./parsers/any.js\";\nconst zodToJsonSchema = (schema, options) => {\n    const refs = getRefs(options);\n    let definitions = typeof options === \"object\" && options.definitions\n        ? Object.entries(options.definitions).reduce((acc, [name, schema]) => ({\n            ...acc,\n            [name]: parseDef(schema._def, {\n                ...refs,\n                currentPath: [...refs.basePath, refs.definitionPath, name],\n            }, true) ?? parseAnyDef(refs),\n        }), {})\n        : undefined;\n    const name = typeof options === \"string\"\n        ? options\n        : options?.nameStrategy === \"title\"\n            ? undefined\n            : options?.name;\n    const main = parseDef(schema._def, name === undefined\n        ? refs\n        : {\n            ...refs,\n            currentPath: [...refs.basePath, refs.definitionPath, name],\n        }, false) ?? parseAnyDef(refs);\n    const title = typeof options === \"object\" &&\n        options.name !== undefined &&\n        options.nameStrategy === \"title\"\n        ? options.name\n        : undefined;\n    if (title !== undefined) {\n        main.title = title;\n    }\n    if (refs.flags.hasReferencedOpenAiAnyType) {\n        if (!definitions) {\n            definitions = {};\n        }\n        if (!definitions[refs.openAiAnyTypeName]) {\n            definitions[refs.openAiAnyTypeName] = {\n                // Skipping \"object\" as no properties can be defined and additionalProperties must be \"false\"\n                type: [\"string\", \"number\", \"integer\", \"boolean\", \"array\", \"null\"],\n                items: {\n                    $ref: refs.$refStrategy === \"relative\"\n                        ? \"1\"\n                        : [\n                            ...refs.basePath,\n                            refs.definitionPath,\n                            refs.openAiAnyTypeName,\n                        ].join(\"/\"),\n                },\n            };\n        }\n    }\n    const combined = name === undefined\n        ? definitions\n            ? {\n                ...main,\n                [refs.definitionPath]: definitions,\n            }\n            : main\n        : {\n            $ref: [\n                ...(refs.$refStrategy === \"relative\" ? [] : refs.basePath),\n                refs.definitionPath,\n                name,\n            ].join(\"/\"),\n            [refs.definitionPath]: {\n                ...definitions,\n                [name]: main,\n            },\n        };\n    if (refs.target === \"jsonSchema7\") {\n        combined.$schema = \"http://json-schema.org/draft-07/schema#\";\n    }\n    else if (refs.target === \"jsonSchema2019-09\" || refs.target === \"openAi\") {\n        combined.$schema = \"https://json-schema.org/draft/2019-09/schema#\";\n    }\n    if (refs.target === \"openAi\" &&\n        (\"anyOf\" in combined ||\n            \"oneOf\" in combined ||\n            \"allOf\" in combined ||\n            (\"type\" in combined && Array.isArray(combined.type)))) {\n        console.warn(\"Warning: OpenAI may not support schemas with unions as roots! Try wrapping it in an object property.\");\n    }\n    return combined;\n};\nexport { zodToJsonSchema };\n", "export * as core from \"../core/index.js\";\nexport * from \"./schemas.js\";\nexport * from \"./checks.js\";\nexport * from \"./errors.js\";\nexport * from \"./parse.js\";\nexport * from \"./compat.js\";\n// zod-specified\nimport { config } from \"../core/index.js\";\nimport en from \"../locales/en.js\";\nconfig(en());\nexport { globalRegistry, registry, config, function, $output, $input, $brand, clone, regexes, treeifyError, prettifyError, formatError, flattenError, toJSONSchema, TimePrecision, NEVER, } from \"../core/index.js\";\nexport * as locales from \"../locales/index.js\";\n// iso\n// must be exported from top-level\n// https://github.com/colinhacks/zod/issues/4491\nexport { ZodISODateTime, ZodISODate, ZodISOTime, ZodISODuration } from \"./iso.js\";\nexport * as iso from \"./iso.js\";\nexport * as coerce from \"./coerce.js\";\n", "/** A special constant with type `never` */\nexport const NEVER = Object.freeze({\n    status: \"aborted\",\n});\nexport /*@__NO_SIDE_EFFECTS__*/ function $constructor(name, initializer, params) {\n    function init(inst, def) {\n        var _a;\n        Object.defineProperty(inst, \"_zod\", {\n            value: inst._zod ?? {},\n            enumerable: false,\n        });\n        (_a = inst._zod).traits ?? (_a.traits = new Set());\n        inst._zod.traits.add(name);\n        initializer(inst, def);\n        // support prototype modifications\n        for (const k in _.prototype) {\n            if (!(k in inst))\n                Object.defineProperty(inst, k, { value: _.prototype[k].bind(inst) });\n        }\n        inst._zod.constr = _;\n        inst._zod.def = def;\n    }\n    // doesn't work if Parent has a constructor with arguments\n    const Parent = params?.Parent ?? Object;\n    class Definition extends Parent {\n    }\n    Object.defineProperty(Definition, \"name\", { value: name });\n    function _(def) {\n        var _a;\n        const inst = params?.Parent ? new Definition() : this;\n        init(inst, def);\n        (_a = inst._zod).deferred ?? (_a.deferred = []);\n        for (const fn of inst._zod.deferred) {\n            fn();\n        }\n        return inst;\n    }\n    Object.defineProperty(_, \"init\", { value: init });\n    Object.defineProperty(_, Symbol.hasInstance, {\n        value: (inst) => {\n            if (params?.Parent && inst instanceof params.Parent)\n                return true;\n            return inst?._zod?.traits?.has(name);\n        },\n    });\n    Object.defineProperty(_, \"name\", { value: name });\n    return _;\n}\n//////////////////////////////   UTILITIES   ///////////////////////////////////////\nexport const $brand = Symbol(\"zod_brand\");\nexport class $ZodAsyncError extends Error {\n    constructor() {\n        super(`Encountered Promise during synchronous parse. Use .parseAsync() instead.`);\n    }\n}\nexport const globalConfig = {};\nexport function config(newConfig) {\n    if (newConfig)\n        Object.assign(globalConfig, newConfig);\n    return globalConfig;\n}\n", "// functions\nexport function assertEqual(val) {\n    return val;\n}\nexport function assertNotEqual(val) {\n    return val;\n}\nexport function assertIs(_arg) { }\nexport function assertNever(_x) {\n    throw new Error();\n}\nexport function assert(_) { }\nexport function getEnumValues(entries) {\n    const numericValues = Object.values(entries).filter((v) => typeof v === \"number\");\n    const values = Object.entries(entries)\n        .filter(([k, _]) => numericValues.indexOf(+k) === -1)\n        .map(([_, v]) => v);\n    return values;\n}\nexport function joinValues(array, separator = \"|\") {\n    return array.map((val) => stringifyPrimitive(val)).join(separator);\n}\nexport function jsonStringifyReplacer(_, value) {\n    if (typeof value === \"bigint\")\n        return value.toString();\n    return value;\n}\nexport function cached(getter) {\n    const set = false;\n    return {\n        get value() {\n            if (!set) {\n                const value = getter();\n                Object.defineProperty(this, \"value\", { value });\n                return value;\n            }\n            throw new Error(\"cached value already set\");\n        },\n    };\n}\nexport function nullish(input) {\n    return input === null || input === undefined;\n}\nexport function cleanRegex(source) {\n    const start = source.startsWith(\"^\") ? 1 : 0;\n    const end = source.endsWith(\"$\") ? source.length - 1 : source.length;\n    return source.slice(start, end);\n}\nexport function floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / 10 ** decCount;\n}\nexport function defineLazy(object, key, getter) {\n    const set = false;\n    Object.defineProperty(object, key, {\n        get() {\n            if (!set) {\n                const value = getter();\n                object[key] = value;\n                return value;\n            }\n            throw new Error(\"cached value already set\");\n        },\n        set(v) {\n            Object.defineProperty(object, key, {\n                value: v,\n                // configurable: true,\n            });\n            // object[key] = v;\n        },\n        configurable: true,\n    });\n}\nexport function assignProp(target, prop, value) {\n    Object.defineProperty(target, prop, {\n        value,\n        writable: true,\n        enumerable: true,\n        configurable: true,\n    });\n}\nexport function getElementAtPath(obj, path) {\n    if (!path)\n        return obj;\n    return path.reduce((acc, key) => acc?.[key], obj);\n}\nexport function promiseAllObject(promisesObj) {\n    const keys = Object.keys(promisesObj);\n    const promises = keys.map((key) => promisesObj[key]);\n    return Promise.all(promises).then((results) => {\n        const resolvedObj = {};\n        for (let i = 0; i < keys.length; i++) {\n            resolvedObj[keys[i]] = results[i];\n        }\n        return resolvedObj;\n    });\n}\nexport function randomString(length = 10) {\n    const chars = \"abcdefghijklmnopqrstuvwxyz\";\n    let str = \"\";\n    for (let i = 0; i < length; i++) {\n        str += chars[Math.floor(Math.random() * chars.length)];\n    }\n    return str;\n}\nexport function esc(str) {\n    return JSON.stringify(str);\n}\nexport const captureStackTrace = Error.captureStackTrace\n    ? Error.captureStackTrace\n    : (..._args) => { };\nexport function isObject(data) {\n    return typeof data === \"object\" && data !== null && !Array.isArray(data);\n}\nexport const allowsEval = cached(() => {\n    if (typeof navigator !== \"undefined\" && navigator?.userAgent?.includes(\"Cloudflare\")) {\n        return false;\n    }\n    try {\n        const F = Function;\n        new F(\"\");\n        return true;\n    }\n    catch (_) {\n        return false;\n    }\n});\nexport function isPlainObject(o) {\n    if (isObject(o) === false)\n        return false;\n    // modified constructor\n    const ctor = o.constructor;\n    if (ctor === undefined)\n        return true;\n    // modified prototype\n    const prot = ctor.prototype;\n    if (isObject(prot) === false)\n        return false;\n    // ctor doesn't have static `isPrototypeOf`\n    if (Object.prototype.hasOwnProperty.call(prot, \"isPrototypeOf\") === false) {\n        return false;\n    }\n    return true;\n}\nexport function numKeys(data) {\n    let keyCount = 0;\n    for (const key in data) {\n        if (Object.prototype.hasOwnProperty.call(data, key)) {\n            keyCount++;\n        }\n    }\n    return keyCount;\n}\nexport const getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return \"undefined\";\n        case \"string\":\n            return \"string\";\n        case \"number\":\n            return Number.isNaN(data) ? \"nan\" : \"number\";\n        case \"boolean\":\n            return \"boolean\";\n        case \"function\":\n            return \"function\";\n        case \"bigint\":\n            return \"bigint\";\n        case \"symbol\":\n            return \"symbol\";\n        case \"object\":\n            if (Array.isArray(data)) {\n                return \"array\";\n            }\n            if (data === null) {\n                return \"null\";\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return \"promise\";\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return \"map\";\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return \"set\";\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return \"date\";\n            }\n            if (typeof File !== \"undefined\" && data instanceof File) {\n                return \"file\";\n            }\n            return \"object\";\n        default:\n            throw new Error(`Unknown data type: ${t}`);\n    }\n};\nexport const propertyKeyTypes = new Set([\"string\", \"number\", \"symbol\"]);\nexport const primitiveTypes = new Set([\"string\", \"number\", \"bigint\", \"boolean\", \"symbol\", \"undefined\"]);\nexport function escapeRegex(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n// zod-specific utils\nexport function clone(inst, def, params) {\n    const cl = new inst._zod.constr(def ?? inst._zod.def);\n    if (!def || params?.parent)\n        cl._zod.parent = inst;\n    return cl;\n}\nexport function normalizeParams(_params) {\n    const params = _params;\n    if (!params)\n        return {};\n    if (typeof params === \"string\")\n        return { error: () => params };\n    if (params?.message !== undefined) {\n        if (params?.error !== undefined)\n            throw new Error(\"Cannot specify both `message` and `error` params\");\n        params.error = params.message;\n    }\n    delete params.message;\n    if (typeof params.error === \"string\")\n        return { ...params, error: () => params.error };\n    return params;\n}\nexport function createTransparentProxy(getter) {\n    let target;\n    return new Proxy({}, {\n        get(_, prop, receiver) {\n            target ?? (target = getter());\n            return Reflect.get(target, prop, receiver);\n        },\n        set(_, prop, value, receiver) {\n            target ?? (target = getter());\n            return Reflect.set(target, prop, value, receiver);\n        },\n        has(_, prop) {\n            target ?? (target = getter());\n            return Reflect.has(target, prop);\n        },\n        deleteProperty(_, prop) {\n            target ?? (target = getter());\n            return Reflect.deleteProperty(target, prop);\n        },\n        ownKeys(_) {\n            target ?? (target = getter());\n            return Reflect.ownKeys(target);\n        },\n        getOwnPropertyDescriptor(_, prop) {\n            target ?? (target = getter());\n            return Reflect.getOwnPropertyDescriptor(target, prop);\n        },\n        defineProperty(_, prop, descriptor) {\n            target ?? (target = getter());\n            return Reflect.defineProperty(target, prop, descriptor);\n        },\n    });\n}\nexport function stringifyPrimitive(value) {\n    if (typeof value === \"bigint\")\n        return value.toString() + \"n\";\n    if (typeof value === \"string\")\n        return `\"${value}\"`;\n    return `${value}`;\n}\nexport function optionalKeys(shape) {\n    return Object.keys(shape).filter((k) => {\n        return shape[k]._zod.optin === \"optional\" && shape[k]._zod.optout === \"optional\";\n    });\n}\nexport const NUMBER_FORMAT_RANGES = {\n    safeint: [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],\n    int32: [-2147483648, 2147483647],\n    uint32: [0, 4294967295],\n    float32: [-3.4028234663852886e38, 3.4028234663852886e38],\n    float64: [-Number.MAX_VALUE, Number.MAX_VALUE],\n};\nexport const BIGINT_FORMAT_RANGES = {\n    int64: [/* @__PURE__*/ BigInt(\"-9223372036854775808\"), /* @__PURE__*/ BigInt(\"9223372036854775807\")],\n    uint64: [/* @__PURE__*/ BigInt(0), /* @__PURE__*/ BigInt(\"18446744073709551615\")],\n};\nexport function pick(schema, mask) {\n    const newShape = {};\n    const currDef = schema._zod.def; //.shape;\n    for (const key in mask) {\n        if (!(key in currDef.shape)) {\n            throw new Error(`Unrecognized key: \"${key}\"`);\n        }\n        if (!mask[key])\n            continue;\n        // pick key\n        newShape[key] = currDef.shape[key];\n    }\n    return clone(schema, {\n        ...schema._zod.def,\n        shape: newShape,\n        checks: [],\n    });\n}\nexport function omit(schema, mask) {\n    const newShape = { ...schema._zod.def.shape };\n    const currDef = schema._zod.def; //.shape;\n    for (const key in mask) {\n        if (!(key in currDef.shape)) {\n            throw new Error(`Unrecognized key: \"${key}\"`);\n        }\n        if (!mask[key])\n            continue;\n        delete newShape[key];\n    }\n    return clone(schema, {\n        ...schema._zod.def,\n        shape: newShape,\n        checks: [],\n    });\n}\nexport function extend(schema, shape) {\n    if (!isPlainObject(shape)) {\n        throw new Error(\"Invalid input to extend: expected a plain object\");\n    }\n    const def = {\n        ...schema._zod.def,\n        get shape() {\n            const _shape = { ...schema._zod.def.shape, ...shape };\n            assignProp(this, \"shape\", _shape); // self-caching\n            return _shape;\n        },\n        checks: [], // delete existing checks\n    };\n    return clone(schema, def);\n}\nexport function merge(a, b) {\n    return clone(a, {\n        ...a._zod.def,\n        get shape() {\n            const _shape = { ...a._zod.def.shape, ...b._zod.def.shape };\n            assignProp(this, \"shape\", _shape); // self-caching\n            return _shape;\n        },\n        catchall: b._zod.def.catchall,\n        checks: [], // delete existing checks\n    });\n}\nexport function partial(Class, schema, mask) {\n    const oldShape = schema._zod.def.shape;\n    const shape = { ...oldShape };\n    if (mask) {\n        for (const key in mask) {\n            if (!(key in oldShape)) {\n                throw new Error(`Unrecognized key: \"${key}\"`);\n            }\n            if (!mask[key])\n                continue;\n            // if (oldShape[key]!._zod.optin === \"optional\") continue;\n            shape[key] = Class\n                ? new Class({\n                    type: \"optional\",\n                    innerType: oldShape[key],\n                })\n                : oldShape[key];\n        }\n    }\n    else {\n        for (const key in oldShape) {\n            // if (oldShape[key]!._zod.optin === \"optional\") continue;\n            shape[key] = Class\n                ? new Class({\n                    type: \"optional\",\n                    innerType: oldShape[key],\n                })\n                : oldShape[key];\n        }\n    }\n    return clone(schema, {\n        ...schema._zod.def,\n        shape,\n        checks: [],\n    });\n}\nexport function required(Class, schema, mask) {\n    const oldShape = schema._zod.def.shape;\n    const shape = { ...oldShape };\n    if (mask) {\n        for (const key in mask) {\n            if (!(key in shape)) {\n                throw new Error(`Unrecognized key: \"${key}\"`);\n            }\n            if (!mask[key])\n                continue;\n            // overwrite with non-optional\n            shape[key] = new Class({\n                type: \"nonoptional\",\n                innerType: oldShape[key],\n            });\n        }\n    }\n    else {\n        for (const key in oldShape) {\n            // overwrite with non-optional\n            shape[key] = new Class({\n                type: \"nonoptional\",\n                innerType: oldShape[key],\n            });\n        }\n    }\n    return clone(schema, {\n        ...schema._zod.def,\n        shape,\n        // optional: [],\n        checks: [],\n    });\n}\nexport function aborted(x, startIndex = 0) {\n    for (let i = startIndex; i < x.issues.length; i++) {\n        if (x.issues[i]?.continue !== true)\n            return true;\n    }\n    return false;\n}\nexport function prefixIssues(path, issues) {\n    return issues.map((iss) => {\n        var _a;\n        (_a = iss).path ?? (_a.path = []);\n        iss.path.unshift(path);\n        return iss;\n    });\n}\nexport function unwrapMessage(message) {\n    return typeof message === \"string\" ? message : message?.message;\n}\nexport function finalizeIssue(iss, ctx, config) {\n    const full = { ...iss, path: iss.path ?? [] };\n    // for backwards compatibility\n    if (!iss.message) {\n        const message = unwrapMessage(iss.inst?._zod.def?.error?.(iss)) ??\n            unwrapMessage(ctx?.error?.(iss)) ??\n            unwrapMessage(config.customError?.(iss)) ??\n            unwrapMessage(config.localeError?.(iss)) ??\n            \"Invalid input\";\n        full.message = message;\n    }\n    // delete (full as any).def;\n    delete full.inst;\n    delete full.continue;\n    if (!ctx?.reportInput) {\n        delete full.input;\n    }\n    return full;\n}\nexport function getSizableOrigin(input) {\n    if (input instanceof Set)\n        return \"set\";\n    if (input instanceof Map)\n        return \"map\";\n    if (input instanceof File)\n        return \"file\";\n    return \"unknown\";\n}\nexport function getLengthableOrigin(input) {\n    if (Array.isArray(input))\n        return \"array\";\n    if (typeof input === \"string\")\n        return \"string\";\n    return \"unknown\";\n}\nexport function issue(...args) {\n    const [iss, input, inst] = args;\n    if (typeof iss === \"string\") {\n        return {\n            message: iss,\n            code: \"custom\",\n            input,\n            inst,\n        };\n    }\n    return { ...iss };\n}\nexport function cleanEnum(obj) {\n    return Object.entries(obj)\n        .filter(([k, _]) => {\n        // return true if NaN, meaning it's not a number, thus a string key\n        return Number.isNaN(Number.parseInt(k, 10));\n    })\n        .map((el) => el[1]);\n}\n// instanceof\nexport class Class {\n    constructor(..._args) { }\n}\n", "import * as util from \"../core/util.js\";\nexport const parsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"number\": {\n            return Number.isNaN(data) ? \"NaN\" : \"number\";\n        }\n        case \"object\": {\n            if (Array.isArray(data)) {\n                return \"array\";\n            }\n            if (data === null) {\n                return \"null\";\n            }\n            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                return data.constructor.name;\n            }\n        }\n    }\n    return t;\n};\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"characters\", verb: \"to have\" },\n        file: { unit: \"bytes\", verb: \"to have\" },\n        array: { unit: \"items\", verb: \"to have\" },\n        set: { unit: \"items\", verb: \"to have\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const Nouns = {\n        regex: \"input\",\n        email: \"email address\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO datetime\",\n        date: \"ISO date\",\n        time: \"ISO time\",\n        duration: \"ISO duration\",\n        ipv4: \"IPv4 address\",\n        ipv6: \"IPv6 address\",\n        cidrv4: \"IPv4 range\",\n        cidrv6: \"IPv6 range\",\n        base64: \"base64-encoded string\",\n        base64url: \"base64url-encoded string\",\n        json_string: \"JSON string\",\n        e164: \"E.164 number\",\n        jwt: \"JWT\",\n        template_literal: \"input\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Invalid input: expected ${issue.expected}, received ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Invalid input: expected ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Invalid option: expected one of ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Too big: expected ${issue.origin ?? \"value\"} to have ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elements\"}`;\n                return `Too big: expected ${issue.origin ?? \"value\"} to be ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Too small: expected ${issue.origin} to have ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Too small: expected ${issue.origin} to be ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `Invalid string: must start with \"${_issue.prefix}\"`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `Invalid string: must end with \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Invalid string: must include \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Invalid string: must match pattern ${_issue.pattern}`;\n                return `Invalid ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Invalid number: must be a multiple of ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Unrecognized key${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Invalid key in ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Invalid input\";\n            case \"invalid_element\":\n                return `Invalid value in ${issue.origin}`;\n            default:\n                return `Invalid input`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n", "export const $output = Symbol(\"ZodOutput\");\nexport const $input = Symbol(\"ZodInput\");\nexport class $ZodRegistry {\n    constructor() {\n        this._map = new Map();\n        this._idmap = new Map();\n    }\n    add(schema, ..._meta) {\n        const meta = _meta[0];\n        this._map.set(schema, meta);\n        if (meta && typeof meta === \"object\" && \"id\" in meta) {\n            if (this._idmap.has(meta.id)) {\n                throw new Error(`ID ${meta.id} already exists in the registry`);\n            }\n            this._idmap.set(meta.id, schema);\n        }\n        return this;\n    }\n    clear() {\n        this._map = new Map();\n        this._idmap = new Map();\n        return this;\n    }\n    remove(schema) {\n        const meta = this._map.get(schema);\n        if (meta && typeof meta === \"object\" && \"id\" in meta) {\n            this._idmap.delete(meta.id);\n        }\n        this._map.delete(schema);\n        return this;\n    }\n    get(schema) {\n        // return this._map.get(schema) as any;\n        // inherit metadata\n        const p = schema._zod.parent;\n        if (p) {\n            const pm = { ...(this.get(p) ?? {}) };\n            delete pm.id; // do not inherit id\n            return { ...pm, ...this._map.get(schema) };\n        }\n        return this._map.get(schema);\n    }\n    has(schema) {\n        return this._map.has(schema);\n    }\n}\n// registries\nexport function registry() {\n    return new $ZodRegistry();\n}\nexport const globalRegistry = /*@__PURE__*/ registry();\n", "import { $ZodRegistry, globalRegistry } from \"./registries.js\";\nimport { getEnumValues } from \"./util.js\";\nexport class JSONSchemaGenerator {\n    constructor(params) {\n        this.counter = 0;\n        this.metadataRegistry = params?.metadata ?? globalRegistry;\n        this.target = params?.target ?? \"draft-2020-12\";\n        this.unrepresentable = params?.unrepresentable ?? \"throw\";\n        this.override = params?.override ?? (() => { });\n        this.io = params?.io ?? \"output\";\n        this.seen = new Map();\n    }\n    process(schema, _params = { path: [], schemaPath: [] }) {\n        var _a;\n        const def = schema._zod.def;\n        const formatMap = {\n            guid: \"uuid\",\n            url: \"uri\",\n            datetime: \"date-time\",\n            json_string: \"json-string\",\n            regex: \"\", // do not set\n        };\n        // check for schema in seens\n        const seen = this.seen.get(schema);\n        if (seen) {\n            seen.count++;\n            // check if cycle\n            const isCycle = _params.schemaPath.includes(schema);\n            if (isCycle) {\n                seen.cycle = _params.path;\n            }\n            return seen.schema;\n        }\n        // initialize\n        const result = { schema: {}, count: 1, cycle: undefined, path: _params.path };\n        this.seen.set(schema, result);\n        // custom method overrides default behavior\n        const overrideSchema = schema._zod.toJSONSchema?.();\n        if (overrideSchema) {\n            result.schema = overrideSchema;\n        }\n        else {\n            const params = {\n                ..._params,\n                schemaPath: [..._params.schemaPath, schema],\n                path: _params.path,\n            };\n            const parent = schema._zod.parent;\n            if (parent) {\n                // schema was cloned from another schema\n                result.ref = parent;\n                this.process(parent, params);\n                this.seen.get(parent).isParent = true;\n            }\n            else {\n                const _json = result.schema;\n                switch (def.type) {\n                    case \"string\": {\n                        const json = _json;\n                        json.type = \"string\";\n                        const { minimum, maximum, format, patterns, contentEncoding } = schema._zod\n                            .bag;\n                        if (typeof minimum === \"number\")\n                            json.minLength = minimum;\n                        if (typeof maximum === \"number\")\n                            json.maxLength = maximum;\n                        // custom pattern overrides format\n                        if (format) {\n                            json.format = formatMap[format] ?? format;\n                            if (json.format === \"\")\n                                delete json.format; // empty format is not valid\n                        }\n                        if (contentEncoding)\n                            json.contentEncoding = contentEncoding;\n                        if (patterns && patterns.size > 0) {\n                            const regexes = [...patterns];\n                            if (regexes.length === 1)\n                                json.pattern = regexes[0].source;\n                            else if (regexes.length > 1) {\n                                result.schema.allOf = [\n                                    ...regexes.map((regex) => ({\n                                        ...(this.target === \"draft-7\" ? { type: \"string\" } : {}),\n                                        pattern: regex.source,\n                                    })),\n                                ];\n                            }\n                        }\n                        break;\n                    }\n                    case \"number\": {\n                        const json = _json;\n                        const { minimum, maximum, format, multipleOf, exclusiveMaximum, exclusiveMinimum } = schema._zod.bag;\n                        if (typeof format === \"string\" && format.includes(\"int\"))\n                            json.type = \"integer\";\n                        else\n                            json.type = \"number\";\n                        if (typeof exclusiveMinimum === \"number\")\n                            json.exclusiveMinimum = exclusiveMinimum;\n                        if (typeof minimum === \"number\") {\n                            json.minimum = minimum;\n                            if (typeof exclusiveMinimum === \"number\") {\n                                if (exclusiveMinimum >= minimum)\n                                    delete json.minimum;\n                                else\n                                    delete json.exclusiveMinimum;\n                            }\n                        }\n                        if (typeof exclusiveMaximum === \"number\")\n                            json.exclusiveMaximum = exclusiveMaximum;\n                        if (typeof maximum === \"number\") {\n                            json.maximum = maximum;\n                            if (typeof exclusiveMaximum === \"number\") {\n                                if (exclusiveMaximum <= maximum)\n                                    delete json.maximum;\n                                else\n                                    delete json.exclusiveMaximum;\n                            }\n                        }\n                        if (typeof multipleOf === \"number\")\n                            json.multipleOf = multipleOf;\n                        break;\n                    }\n                    case \"boolean\": {\n                        const json = _json;\n                        json.type = \"boolean\";\n                        break;\n                    }\n                    case \"bigint\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"BigInt cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"symbol\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Symbols cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"null\": {\n                        _json.type = \"null\";\n                        break;\n                    }\n                    case \"any\": {\n                        break;\n                    }\n                    case \"unknown\": {\n                        break;\n                    }\n                    case \"undefined\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Undefined cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"void\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Void cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"never\": {\n                        _json.not = {};\n                        break;\n                    }\n                    case \"date\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Date cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"array\": {\n                        const json = _json;\n                        const { minimum, maximum } = schema._zod.bag;\n                        if (typeof minimum === \"number\")\n                            json.minItems = minimum;\n                        if (typeof maximum === \"number\")\n                            json.maxItems = maximum;\n                        json.type = \"array\";\n                        json.items = this.process(def.element, { ...params, path: [...params.path, \"items\"] });\n                        break;\n                    }\n                    case \"object\": {\n                        const json = _json;\n                        json.type = \"object\";\n                        json.properties = {};\n                        const shape = def.shape; // params.shapeCache.get(schema)!;\n                        for (const key in shape) {\n                            json.properties[key] = this.process(shape[key], {\n                                ...params,\n                                path: [...params.path, \"properties\", key],\n                            });\n                        }\n                        // required keys\n                        const allKeys = new Set(Object.keys(shape));\n                        // const optionalKeys = new Set(def.optional);\n                        const requiredKeys = new Set([...allKeys].filter((key) => {\n                            const v = def.shape[key]._zod;\n                            if (this.io === \"input\") {\n                                return v.optin === undefined;\n                            }\n                            else {\n                                return v.optout === undefined;\n                            }\n                        }));\n                        if (requiredKeys.size > 0) {\n                            json.required = Array.from(requiredKeys);\n                        }\n                        // catchall\n                        if (def.catchall?._zod.def.type === \"never\") {\n                            // strict\n                            json.additionalProperties = false;\n                        }\n                        else if (!def.catchall) {\n                            // regular\n                            if (this.io === \"output\")\n                                json.additionalProperties = false;\n                        }\n                        else if (def.catchall) {\n                            json.additionalProperties = this.process(def.catchall, {\n                                ...params,\n                                path: [...params.path, \"additionalProperties\"],\n                            });\n                        }\n                        break;\n                    }\n                    case \"union\": {\n                        const json = _json;\n                        json.anyOf = def.options.map((x, i) => this.process(x, {\n                            ...params,\n                            path: [...params.path, \"anyOf\", i],\n                        }));\n                        break;\n                    }\n                    case \"intersection\": {\n                        const json = _json;\n                        const a = this.process(def.left, {\n                            ...params,\n                            path: [...params.path, \"allOf\", 0],\n                        });\n                        const b = this.process(def.right, {\n                            ...params,\n                            path: [...params.path, \"allOf\", 1],\n                        });\n                        const isSimpleIntersection = (val) => \"allOf\" in val && Object.keys(val).length === 1;\n                        const allOf = [\n                            ...(isSimpleIntersection(a) ? a.allOf : [a]),\n                            ...(isSimpleIntersection(b) ? b.allOf : [b]),\n                        ];\n                        json.allOf = allOf;\n                        break;\n                    }\n                    case \"tuple\": {\n                        const json = _json;\n                        json.type = \"array\";\n                        const prefixItems = def.items.map((x, i) => this.process(x, { ...params, path: [...params.path, \"prefixItems\", i] }));\n                        if (this.target === \"draft-2020-12\") {\n                            json.prefixItems = prefixItems;\n                        }\n                        else {\n                            json.items = prefixItems;\n                        }\n                        if (def.rest) {\n                            const rest = this.process(def.rest, {\n                                ...params,\n                                path: [...params.path, \"items\"],\n                            });\n                            if (this.target === \"draft-2020-12\") {\n                                json.items = rest;\n                            }\n                            else {\n                                json.additionalItems = rest;\n                            }\n                        }\n                        // additionalItems\n                        if (def.rest) {\n                            json.items = this.process(def.rest, {\n                                ...params,\n                                path: [...params.path, \"items\"],\n                            });\n                        }\n                        // length\n                        const { minimum, maximum } = schema._zod.bag;\n                        if (typeof minimum === \"number\")\n                            json.minItems = minimum;\n                        if (typeof maximum === \"number\")\n                            json.maxItems = maximum;\n                        break;\n                    }\n                    case \"record\": {\n                        const json = _json;\n                        json.type = \"object\";\n                        json.propertyNames = this.process(def.keyType, { ...params, path: [...params.path, \"propertyNames\"] });\n                        json.additionalProperties = this.process(def.valueType, {\n                            ...params,\n                            path: [...params.path, \"additionalProperties\"],\n                        });\n                        break;\n                    }\n                    case \"map\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Map cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"set\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Set cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"enum\": {\n                        const json = _json;\n                        const values = getEnumValues(def.entries);\n                        // Number enums can have both string and number values\n                        if (values.every((v) => typeof v === \"number\"))\n                            json.type = \"number\";\n                        if (values.every((v) => typeof v === \"string\"))\n                            json.type = \"string\";\n                        json.enum = values;\n                        break;\n                    }\n                    case \"literal\": {\n                        const json = _json;\n                        const vals = [];\n                        for (const val of def.values) {\n                            if (val === undefined) {\n                                if (this.unrepresentable === \"throw\") {\n                                    throw new Error(\"Literal `undefined` cannot be represented in JSON Schema\");\n                                }\n                                else {\n                                    // do not add to vals\n                                }\n                            }\n                            else if (typeof val === \"bigint\") {\n                                if (this.unrepresentable === \"throw\") {\n                                    throw new Error(\"BigInt literals cannot be represented in JSON Schema\");\n                                }\n                                else {\n                                    vals.push(Number(val));\n                                }\n                            }\n                            else {\n                                vals.push(val);\n                            }\n                        }\n                        if (vals.length === 0) {\n                            // do nothing (an undefined literal was stripped)\n                        }\n                        else if (vals.length === 1) {\n                            const val = vals[0];\n                            json.type = val === null ? \"null\" : typeof val;\n                            json.const = val;\n                        }\n                        else {\n                            if (vals.every((v) => typeof v === \"number\"))\n                                json.type = \"number\";\n                            if (vals.every((v) => typeof v === \"string\"))\n                                json.type = \"string\";\n                            if (vals.every((v) => typeof v === \"boolean\"))\n                                json.type = \"string\";\n                            if (vals.every((v) => v === null))\n                                json.type = \"null\";\n                            json.enum = vals;\n                        }\n                        break;\n                    }\n                    case \"file\": {\n                        const json = _json;\n                        const file = {\n                            type: \"string\",\n                            format: \"binary\",\n                            contentEncoding: \"binary\",\n                        };\n                        const { minimum, maximum, mime } = schema._zod.bag;\n                        if (minimum !== undefined)\n                            file.minLength = minimum;\n                        if (maximum !== undefined)\n                            file.maxLength = maximum;\n                        if (mime) {\n                            if (mime.length === 1) {\n                                file.contentMediaType = mime[0];\n                                Object.assign(json, file);\n                            }\n                            else {\n                                json.anyOf = mime.map((m) => {\n                                    const mFile = { ...file, contentMediaType: m };\n                                    return mFile;\n                                });\n                            }\n                        }\n                        else {\n                            Object.assign(json, file);\n                        }\n                        // if (this.unrepresentable === \"throw\") {\n                        //   throw new Error(\"File cannot be represented in JSON Schema\");\n                        // }\n                        break;\n                    }\n                    case \"transform\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Transforms cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"nullable\": {\n                        const inner = this.process(def.innerType, params);\n                        _json.anyOf = [inner, { type: \"null\" }];\n                        break;\n                    }\n                    case \"nonoptional\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        break;\n                    }\n                    case \"success\": {\n                        const json = _json;\n                        json.type = \"boolean\";\n                        break;\n                    }\n                    case \"default\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        _json.default = JSON.parse(JSON.stringify(def.defaultValue));\n                        break;\n                    }\n                    case \"prefault\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        if (this.io === \"input\")\n                            _json._prefault = JSON.parse(JSON.stringify(def.defaultValue));\n                        break;\n                    }\n                    case \"catch\": {\n                        // use conditionals\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        let catchValue;\n                        try {\n                            catchValue = def.catchValue(undefined);\n                        }\n                        catch {\n                            throw new Error(\"Dynamic catch values are not supported in JSON Schema\");\n                        }\n                        _json.default = catchValue;\n                        break;\n                    }\n                    case \"nan\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"NaN cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"template_literal\": {\n                        const json = _json;\n                        const pattern = schema._zod.pattern;\n                        if (!pattern)\n                            throw new Error(\"Pattern not found in template literal\");\n                        json.type = \"string\";\n                        json.pattern = pattern.source;\n                        break;\n                    }\n                    case \"pipe\": {\n                        const innerType = this.io === \"input\" ? (def.in._zod.def.type === \"transform\" ? def.out : def.in) : def.out;\n                        this.process(innerType, params);\n                        result.ref = innerType;\n                        break;\n                    }\n                    case \"readonly\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        _json.readOnly = true;\n                        break;\n                    }\n                    // passthrough types\n                    case \"promise\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        break;\n                    }\n                    case \"optional\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        break;\n                    }\n                    case \"lazy\": {\n                        const innerType = schema._zod.innerType;\n                        this.process(innerType, params);\n                        result.ref = innerType;\n                        break;\n                    }\n                    case \"custom\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Custom types cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    default: {\n                        def;\n                    }\n                }\n            }\n        }\n        // metadata\n        const meta = this.metadataRegistry.get(schema);\n        if (meta)\n            Object.assign(result.schema, meta);\n        if (this.io === \"input\" && isTransforming(schema)) {\n            // examples/defaults only apply to output type of pipe\n            delete result.schema.examples;\n            delete result.schema.default;\n        }\n        // set prefault as default\n        if (this.io === \"input\" && result.schema._prefault)\n            (_a = result.schema).default ?? (_a.default = result.schema._prefault);\n        delete result.schema._prefault;\n        // pulling fresh from this.seen in case it was overwritten\n        const _result = this.seen.get(schema);\n        return _result.schema;\n    }\n    emit(schema, _params) {\n        const params = {\n            cycles: _params?.cycles ?? \"ref\",\n            reused: _params?.reused ?? \"inline\",\n            // unrepresentable: _params?.unrepresentable ?? \"throw\",\n            // uri: _params?.uri ?? ((id) => `${id}`),\n            external: _params?.external ?? undefined,\n        };\n        // iterate over seen map;\n        const root = this.seen.get(schema);\n        if (!root)\n            throw new Error(\"Unprocessed schema. This is a bug in Zod.\");\n        // initialize result with root schema fields\n        // Object.assign(result, seen.cached);\n        // returns a ref to the schema\n        // defId will be empty if the ref points to an external schema (or #)\n        const makeURI = (entry) => {\n            // comparing the seen objects because sometimes\n            // multiple schemas map to the same seen object.\n            // e.g. lazy\n            // external is configured\n            const defsSegment = this.target === \"draft-2020-12\" ? \"$defs\" : \"definitions\";\n            if (params.external) {\n                const externalId = params.external.registry.get(entry[0])?.id; // ?? \"__shared\";// `__schema${this.counter++}`;\n                // check if schema is in the external registry\n                const uriGenerator = params.external.uri ?? ((id) => id);\n                if (externalId) {\n                    return { ref: uriGenerator(externalId) };\n                }\n                // otherwise, add to __shared\n                const id = entry[1].defId ?? entry[1].schema.id ?? `schema${this.counter++}`;\n                entry[1].defId = id; // set defId so it will be reused if needed\n                return { defId: id, ref: `${uriGenerator(\"__shared\")}#/${defsSegment}/${id}` };\n            }\n            if (entry[1] === root) {\n                return { ref: \"#\" };\n            }\n            // self-contained schema\n            const uriPrefix = `#`;\n            const defUriPrefix = `${uriPrefix}/${defsSegment}/`;\n            const defId = entry[1].schema.id ?? `__schema${this.counter++}`;\n            return { defId, ref: defUriPrefix + defId };\n        };\n        // stored cached version in `def` property\n        // remove all properties, set $ref\n        const extractToDef = (entry) => {\n            // if the schema is already a reference, do not extract it\n            if (entry[1].schema.$ref) {\n                return;\n            }\n            const seen = entry[1];\n            const { ref, defId } = makeURI(entry);\n            seen.def = { ...seen.schema };\n            // defId won't be set if the schema is a reference to an external schema\n            if (defId)\n                seen.defId = defId;\n            // wipe away all properties except $ref\n            const schema = seen.schema;\n            for (const key in schema) {\n                delete schema[key];\n            }\n            schema.$ref = ref;\n        };\n        // throw on cycles\n        // break cycles\n        if (params.cycles === \"throw\") {\n            for (const entry of this.seen.entries()) {\n                const seen = entry[1];\n                if (seen.cycle) {\n                    throw new Error(\"Cycle detected: \" +\n                        `#/${seen.cycle?.join(\"/\")}/<root>` +\n                        '\\n\\nSet the `cycles` parameter to `\"ref\"` to resolve cyclical schemas with defs.');\n                }\n            }\n        }\n        // extract schemas into $defs\n        for (const entry of this.seen.entries()) {\n            const seen = entry[1];\n            // convert root schema to # $ref\n            if (schema === entry[0]) {\n                extractToDef(entry); // this has special handling for the root schema\n                continue;\n            }\n            // extract schemas that are in the external registry\n            if (params.external) {\n                const ext = params.external.registry.get(entry[0])?.id;\n                if (schema !== entry[0] && ext) {\n                    extractToDef(entry);\n                    continue;\n                }\n            }\n            // extract schemas with `id` meta\n            const id = this.metadataRegistry.get(entry[0])?.id;\n            if (id) {\n                extractToDef(entry);\n                continue;\n            }\n            // break cycles\n            if (seen.cycle) {\n                // any\n                extractToDef(entry);\n                continue;\n            }\n            // extract reused schemas\n            if (seen.count > 1) {\n                if (params.reused === \"ref\") {\n                    extractToDef(entry);\n                    // biome-ignore lint:\n                    continue;\n                }\n            }\n        }\n        // flatten _refs\n        const flattenRef = (zodSchema, params) => {\n            const seen = this.seen.get(zodSchema);\n            const schema = seen.def ?? seen.schema;\n            const _cached = { ...schema };\n            // already seen\n            if (seen.ref === null) {\n                return;\n            }\n            // flatten ref if defined\n            const ref = seen.ref;\n            seen.ref = null; // prevent recursion\n            if (ref) {\n                flattenRef(ref, params);\n                // merge referenced schema into current\n                const refSchema = this.seen.get(ref).schema;\n                if (refSchema.$ref && params.target === \"draft-7\") {\n                    schema.allOf = schema.allOf ?? [];\n                    schema.allOf.push(refSchema);\n                }\n                else {\n                    Object.assign(schema, refSchema);\n                    Object.assign(schema, _cached); // prevent overwriting any fields in the original schema\n                }\n            }\n            // execute overrides\n            if (!seen.isParent)\n                this.override({\n                    zodSchema: zodSchema,\n                    jsonSchema: schema,\n                    path: seen.path ?? [],\n                });\n        };\n        for (const entry of [...this.seen.entries()].reverse()) {\n            flattenRef(entry[0], { target: this.target });\n        }\n        const result = {};\n        if (this.target === \"draft-2020-12\") {\n            result.$schema = \"https://json-schema.org/draft/2020-12/schema\";\n        }\n        else if (this.target === \"draft-7\") {\n            result.$schema = \"http://json-schema.org/draft-07/schema#\";\n        }\n        else {\n            console.warn(`Invalid target: ${this.target}`);\n        }\n        if (params.external?.uri) {\n            const id = params.external.registry.get(schema)?.id;\n            if (!id)\n                throw new Error(\"Schema is missing an `id` property\");\n            result.$id = params.external.uri(id);\n        }\n        Object.assign(result, root.def);\n        // build defs object\n        const defs = params.external?.defs ?? {};\n        for (const entry of this.seen.entries()) {\n            const seen = entry[1];\n            if (seen.def && seen.defId) {\n                defs[seen.defId] = seen.def;\n            }\n        }\n        // set definitions in result\n        if (params.external) {\n        }\n        else {\n            if (Object.keys(defs).length > 0) {\n                if (this.target === \"draft-2020-12\") {\n                    result.$defs = defs;\n                }\n                else {\n                    result.definitions = defs;\n                }\n            }\n        }\n        try {\n            // this \"finalizes\" this schema and ensures all cycles are removed\n            // each call to .emit() is functionally independent\n            // though the seen map is shared\n            return JSON.parse(JSON.stringify(result));\n        }\n        catch (_err) {\n            throw new Error(\"Error converting schema to JSON.\");\n        }\n    }\n}\nexport function toJSONSchema(input, _params) {\n    if (input instanceof $ZodRegistry) {\n        const gen = new JSONSchemaGenerator(_params);\n        const defs = {};\n        for (const entry of input._idmap.entries()) {\n            const [_, schema] = entry;\n            gen.process(schema);\n        }\n        const schemas = {};\n        const external = {\n            registry: input,\n            uri: _params?.uri,\n            defs,\n        };\n        for (const entry of input._idmap.entries()) {\n            const [key, schema] = entry;\n            schemas[key] = gen.emit(schema, {\n                ..._params,\n                external,\n            });\n        }\n        if (Object.keys(defs).length > 0) {\n            const defsSegment = gen.target === \"draft-2020-12\" ? \"$defs\" : \"definitions\";\n            schemas.__shared = {\n                [defsSegment]: defs,\n            };\n        }\n        return { schemas };\n    }\n    const gen = new JSONSchemaGenerator(_params);\n    gen.process(input);\n    return gen.emit(input, _params);\n}\nfunction isTransforming(_schema, _ctx) {\n    const ctx = _ctx ?? { seen: new Set() };\n    if (ctx.seen.has(_schema))\n        return false;\n    ctx.seen.add(_schema);\n    const schema = _schema;\n    const def = schema._zod.def;\n    switch (def.type) {\n        case \"string\":\n        case \"number\":\n        case \"bigint\":\n        case \"boolean\":\n        case \"date\":\n        case \"symbol\":\n        case \"undefined\":\n        case \"null\":\n        case \"any\":\n        case \"unknown\":\n        case \"never\":\n        case \"void\":\n        case \"literal\":\n        case \"enum\":\n        case \"nan\":\n        case \"file\":\n        case \"template_literal\":\n            return false;\n        case \"array\": {\n            return isTransforming(def.element, ctx);\n        }\n        case \"object\": {\n            for (const key in def.shape) {\n                if (isTransforming(def.shape[key], ctx))\n                    return true;\n            }\n            return false;\n        }\n        case \"union\": {\n            for (const option of def.options) {\n                if (isTransforming(option, ctx))\n                    return true;\n            }\n            return false;\n        }\n        case \"intersection\": {\n            return isTransforming(def.left, ctx) || isTransforming(def.right, ctx);\n        }\n        case \"tuple\": {\n            for (const item of def.items) {\n                if (isTransforming(item, ctx))\n                    return true;\n            }\n            if (def.rest && isTransforming(def.rest, ctx))\n                return true;\n            return false;\n        }\n        case \"record\": {\n            return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);\n        }\n        case \"map\": {\n            return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);\n        }\n        case \"set\": {\n            return isTransforming(def.valueType, ctx);\n        }\n        // inner types\n        case \"promise\":\n        case \"optional\":\n        case \"nonoptional\":\n        case \"nullable\":\n        case \"readonly\":\n            return isTransforming(def.innerType, ctx);\n        case \"lazy\":\n            return isTransforming(def.getter(), ctx);\n        case \"default\": {\n            return isTransforming(def.innerType, ctx);\n        }\n        case \"prefault\": {\n            return isTransforming(def.innerType, ctx);\n        }\n        case \"custom\": {\n            return false;\n        }\n        case \"transform\": {\n            return true;\n        }\n        case \"pipe\": {\n            return isTransforming(def.in, ctx) || isTransforming(def.out, ctx);\n        }\n        case \"success\": {\n            return false;\n        }\n        case \"catch\": {\n            return false;\n        }\n        default:\n            def;\n    }\n    throw new Error(`Unknown schema type: ${def.type}`);\n}\n", "/**\n * @since 2.0.0\n */\n\nexport {\n  /**\n   * @since 2.0.0\n   */\n  absurd,\n  /**\n   * @since 2.0.0\n   */\n  flow,\n  /**\n   * @since 2.0.0\n   */\n  hole,\n  /**\n   * @since 2.0.0\n   */\n  identity,\n  /**\n   * @since 2.0.0\n   */\n  pipe,\n  /**\n   * @since 2.0.0\n   */\n  unsafeCoerce\n} from \"./Function.js\"\n\n/**\n * @since 3.10.0\n */\nexport * as Arbitrary from \"./Arbitrary.js\"\n\n/**\n * This module provides utility functions for working with arrays in TypeScript.\n *\n * @since 2.0.0\n */\nexport * as Array from \"./Array.js\"\n\n/**\n * This module provides utility functions and type class instances for working with the `BigDecimal` type in TypeScript.\n * It includes functions for basic arithmetic operations, as well as type class instances for `Equivalence` and `Order`.\n *\n * A `BigDecimal` allows storing any real number to arbitrary precision; which avoids common floating point errors\n * (such as 0.1 + 0.2 ≠ 0.3) at the cost of complexity.\n *\n * Internally, `BigDecimal` uses a `BigInt` object, paired with a 64-bit integer which determines the position of the\n * decimal point. Therefore, the precision *is not* actually arbitrary, but limited to 2<sup>63</sup> decimal places.\n *\n * It is not recommended to convert a floating point number to a decimal directly, as the floating point representation\n * may be unexpected.\n *\n * @module BigDecimal\n * @since 2.0.0\n * @see {@link module:BigInt} for more similar operations on `bigint` types\n * @see {@link module:Number} for more similar operations on `number` types\n */\nexport * as BigDecimal from \"./BigDecimal.js\"\n\n/**\n * This module provides utility functions and type class instances for working with the `bigint` type in TypeScript.\n * It includes functions for basic arithmetic operations, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @module BigInt\n * @since 2.0.0\n * @see {@link module:BigDecimal} for more similar operations on `BigDecimal` types\n * @see {@link module:Number} for more similar operations on `number` types\n */\nexport * as BigInt from \"./BigInt.js\"\n\n/**\n * This module provides utility functions and type class instances for working with the `boolean` type in TypeScript.\n * It includes functions for basic boolean operations, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @since 2.0.0\n */\nexport * as Boolean from \"./Boolean.js\"\n\n/**\n * This module provides types and utility functions to create and work with branded types,\n * which are TypeScript types with an added type tag to prevent accidental usage of a value in the wrong context.\n *\n * The `refined` and `nominal` functions are both used to create branded types in TypeScript.\n * The main difference between them is that `refined` allows for validation of the data, while `nominal` does not.\n *\n * The `nominal` function is used to create a new branded type that has the same underlying type as the input, but with a different name.\n * This is useful when you want to distinguish between two values of the same type that have different meanings.\n * The `nominal` function does not perform any validation of the input data.\n *\n * On the other hand, the `refined` function is used to create a new branded type that has the same underlying type as the input,\n * but with a different name, and it also allows for validation of the input data.\n * The `refined` function takes a predicate that is used to validate the input data.\n * If the input data fails the validation, a `BrandErrors` is returned, which provides information about the specific validation failure.\n *\n * @since 2.0.0\n */\nexport * as Brand from \"./Brand.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Cache from \"./Cache.js\"\n\n/**\n * The `Effect<A, E, R>` type is polymorphic in values of type `E` and we can\n * work with any error type that we want. However, there is a lot of information\n * that is not inside an arbitrary `E` value. So as a result, an `Effect` needs\n * somewhere to store things like unexpected errors or defects, stack and\n * execution traces, causes of fiber interruptions, and so forth.\n *\n * Effect-TS is very strict about preserving the full information related to a\n * failure. It captures all type of errors into the `Cause` data type. `Effect`\n * uses the `Cause<E>` data type to store the full story of failure. So its\n * error model is lossless. It doesn't throw information related to the failure\n * result. So we can figure out exactly what happened during the operation of\n * our effects.\n *\n * It is important to note that `Cause` is an underlying data type representing\n * errors occuring within an `Effect` workflow. Thus, we don't usually deal with\n * `Cause`s directly. Even though it is not a data type that we deal with very\n * often, the `Cause` of a failing `Effect` workflow can be accessed at any\n * time, which gives us total access to all parallel and sequential errors in\n * occurring within our codebase.\n *\n * @since 2.0.0\n */\nexport * as Cause from \"./Cause.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Channel from \"./Channel.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ChildExecutorDecision from \"./ChildExecutorDecision.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Chunk from \"./Chunk.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Clock from \"./Clock.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Config from \"./Config.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ConfigError from \"./ConfigError.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ConfigProvider from \"./ConfigProvider.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ConfigProviderPathPatch from \"./ConfigProviderPathPatch.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Console from \"./Console.js\"\n\n/**\n * This module provides a data structure called `Context` that can be used for dependency injection in effectful\n * programs. It is essentially a table mapping `Tag`s to their implementations (called `Service`s), and can be used to\n * manage dependencies in a type-safe way. The `Context` data structure is essentially a way of providing access to a set\n * of related services that can be passed around as a single unit. This module provides functions to create, modify, and\n * query the contents of a `Context`, as well as a number of utility types for working with tags and services.\n *\n * @since 2.0.0\n */\nexport * as Context from \"./Context.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Cron from \"./Cron.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Data from \"./Data.js\"\n\n/**\n * @since 3.6.0\n */\nexport * as DateTime from \"./DateTime.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as DefaultServices from \"./DefaultServices.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Deferred from \"./Deferred.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Differ from \"./Differ.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Duration from \"./Duration.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Effect from \"./Effect.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Effectable from \"./Effectable.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Either from \"./Either.js\"\n\n/**\n * This module provides encoding & decoding functionality for:\n *\n * - base64 (RFC4648)\n * - base64 (URL)\n * - hex\n *\n * @since 2.0.0\n */\nexport * as Encoding from \"./Encoding.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Equal from \"./Equal.js\"\n\n/**\n * This module provides an implementation of the `Equivalence` type class, which defines a binary relation\n * that is reflexive, symmetric, and transitive. In other words, it defines a notion of equivalence between values of a certain type.\n * These properties are also known in mathematics as an \"equivalence relation\".\n *\n * @since 2.0.0\n */\nexport * as Equivalence from \"./Equivalence.js\"\n\n/**\n * @since 3.16.0\n * @experimental\n */\nexport * as ExecutionPlan from \"./ExecutionPlan.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ExecutionStrategy from \"./ExecutionStrategy.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Exit from \"./Exit.js\"\n\n/**\n * @since 3.10.0\n */\nexport * as FastCheck from \"./FastCheck.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Fiber from \"./Fiber.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberHandle from \"./FiberHandle.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberId from \"./FiberId.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberMap from \"./FiberMap.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberRef from \"./FiberRef.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberRefs from \"./FiberRefs.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberRefsPatch from \"./FiberRefsPatch.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberSet from \"./FiberSet.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as FiberStatus from \"./FiberStatus.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Function from \"./Function.js\"\n\n/**\n * The `GlobalValue` module ensures that a single instance of a value is created globally,\n * even when modules are imported multiple times (e.g., due to mixing CommonJS and ESM builds)\n * or during hot-reloading in development environments like Next.js or Remix.\n *\n * It achieves this by using a versioned global store, identified by a unique `Symbol` tied to\n * the current version of the `effect` library. The store holds values that are keyed by an identifier,\n * allowing the reuse of previously computed instances across imports or reloads.\n *\n * This pattern is particularly useful in scenarios where frequent reloading can cause services or\n * single-instance objects to be recreated unnecessarily, such as in development environments with hot-reloading.\n *\n * @since 2.0.0\n */\nexport * as GlobalValue from \"./GlobalValue.js\"\n\n/**\n * @experimental\n * @since 3.18.0\n */\nexport * as Graph from \"./Graph.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as GroupBy from \"./GroupBy.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as HKT from \"./HKT.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Hash from \"./Hash.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as HashMap from \"./HashMap.js\"\n\n/**\n * # HashSet\n *\n * An immutable `HashSet` provides a collection of unique values with efficient\n * lookup, insertion and removal. Once created, a `HashSet` cannot be modified;\n * any operation that would alter the set instead returns a new `HashSet` with\n * the changes. This immutability offers benefits like predictable state\n * management and easier reasoning about your code.\n *\n * ## What Problem Does It Solve?\n *\n * `HashSet` solves the problem of maintaining an unsorted collection where each\n * value appears exactly once, with fast operations for checking membership and\n * adding/removing values.\n *\n * ## When to Use\n *\n * Use `HashSet` when you need:\n *\n * - A collection with no duplicate values\n * - Efficient membership testing (**`O(1)`** average complexity)\n * - Set operations like union, intersection, and difference\n * - An immutable data structure that preserves functional programming patterns\n *\n * ## Advanced Features\n *\n * HashSet provides operations for:\n *\n * - Transforming sets with map and flatMap\n * - Filtering elements with filter\n * - Combining sets with union, intersection and difference\n * - Performance optimizations via mutable operations in controlled contexts\n *\n * ## Performance Characteristics\n *\n * - **Lookup** operations ({@link module:HashSet.has}): **`O(1)`** average time\n *   complexity\n * - **Insertion** operations ({@link module:HashSet.add}): **`O(1)`** average time\n *   complexity\n * - **Removal** operations ({@link module:HashSet.remove}): **`O(1)`** average\n *   time complexity\n * - **Set** operations ({@link module:HashSet.union},\n *   {@link module:HashSet.intersection}): **`O(n)`** where n is the size of the\n *   smaller set\n * - **Iteration**: **`O(n)`** where n is the size of the set\n *\n * The HashSet data structure implements the following traits:\n *\n * - {@link Iterable}: allows iterating over the values in the set\n * - {@link Equal}: allows comparing two sets for value-based equality\n * - {@link Pipeable}: allows chaining operations with the pipe operator\n * - {@link Inspectable}: allows inspecting the contents of the set\n *\n * ## Operations Reference\n *\n * | Category     | Operation                           | Description                                 | Complexity |\n * | ------------ | ----------------------------------- | ------------------------------------------- | ---------- |\n * | constructors | {@link module:HashSet.empty}        | Creates an empty HashSet                    | O(1)       |\n * | constructors | {@link module:HashSet.fromIterable} | Creates a HashSet from an iterable          | O(n)       |\n * | constructors | {@link module:HashSet.make}         | Creates a HashSet from multiple values      | O(n)       |\n * |              |                                     |                                             |            |\n * | elements     | {@link module:HashSet.has}          | Checks if a value exists in the set         | O(1) avg   |\n * | elements     | {@link module:HashSet.some}         | Checks if any element satisfies a predicate | O(n)       |\n * | elements     | {@link module:HashSet.every}        | Checks if all elements satisfy a predicate  | O(n)       |\n * | elements     | {@link module:HashSet.isSubset}     | Checks if a set is a subset of another      | O(n)       |\n * |              |                                     |                                             |            |\n * | getters      | {@link module:HashSet.values}       | Gets an iterator of all values              | O(1)       |\n * | getters      | {@link module:HashSet.toValues}     | Gets an array of all values                 | O(n)       |\n * | getters      | {@link module:HashSet.size}         | Gets the number of elements                 | O(1)       |\n * |              |                                     |                                             |            |\n * | mutations    | {@link module:HashSet.add}          | Adds a value to the set                     | O(1) avg   |\n * | mutations    | {@link module:HashSet.remove}       | Removes a value from the set                | O(1) avg   |\n * | mutations    | {@link module:HashSet.toggle}       | Toggles a value's presence                  | O(1) avg   |\n * |              |                                     |                                             |            |\n * | operations   | {@link module:HashSet.difference}   | Computes set difference (A - B)             | O(n)       |\n * | operations   | {@link module:HashSet.intersection} | Computes set intersection (A ∩ B)           | O(n)       |\n * | operations   | {@link module:HashSet.union}        | Computes set union (A ∪ B)                  | O(n)       |\n * |              |                                     |                                             |            |\n * | mapping      | {@link module:HashSet.map}          | Transforms each element                     | O(n)       |\n * |              |                                     |                                             |            |\n * | sequencing   | {@link module:HashSet.flatMap}      | Transforms and flattens elements            | O(n)       |\n * |              |                                     |                                             |            |\n * | traversing   | {@link module:HashSet.forEach}      | Applies a function to each element          | O(n)       |\n * |              |                                     |                                             |            |\n * | folding      | {@link module:HashSet.reduce}       | Reduces the set to a single value           | O(n)       |\n * |              |                                     |                                             |            |\n * | filtering    | {@link module:HashSet.filter}       | Keeps elements that satisfy a predicate     | O(n)       |\n * |              |                                     |                                             |            |\n * | partitioning | {@link module:HashSet.partition}    | Splits into two sets by a predicate         | O(n)       |\n *\n * ## Notes\n *\n * ### Composability with the Effect Ecosystem:\n *\n * This `HashSet` is designed to work seamlessly within the Effect ecosystem. It\n * implements the {@link Iterable}, {@link Equal}, {@link Pipeable}, and\n * {@link Inspectable} traits from Effect. This ensures compatibility with other\n * Effect data structures and functionalities. For example, you can easily use\n * Effect's `pipe` method to chain operations on the `HashSet`.\n *\n * **Equality of Elements with Effect's {@link Equal `Equal`} Trait:**\n *\n * This `HashSet` relies on Effect's {@link Equal} trait to determine the\n * uniqueness of elements within the set. The way equality is checked depends on\n * the type of the elements:\n *\n * - **Primitive Values:** For primitive JavaScript values like strings, numbers,\n *   booleans, `null`, and `undefined`, equality is determined by their value\n *   (similar to the `===` operator).\n * - **Objects and Custom Types:** For objects and other custom types, equality is\n *   determined by whether those types implement the {@link Equal} interface\n *   themselves. If an element type implements `Equal`, the `HashSet` will\n *   delegate to that implementation to perform the equality check. This allows\n *   you to define custom logic for determining when two instances of your\n *   objects should be considered equal based on their properties, rather than\n *   just their object identity.\n *\n * ```ts\n * import { Equal, Hash, HashSet } from \"effect\"\n *\n * class Person implements Equal.Equal {\n *   constructor(\n *     readonly id: number, // Unique identifier\n *     readonly name: string,\n *     readonly age: number\n *   ) {}\n *\n *   // Define equality based on id, name, and age\n *   [Equal.symbol](that: Equal.Equal): boolean {\n *     if (that instanceof Person) {\n *       return (\n *         Equal.equals(this.id, that.id) &&\n *         Equal.equals(this.name, that.name) &&\n *         Equal.equals(this.age, that.age)\n *       )\n *     }\n *     return false\n *   }\n *\n *   // Generate a hash code based on the unique id\n *   [Hash.symbol](): number {\n *     return Hash.hash(this.id)\n *   }\n * }\n *\n * // Creating a HashSet with objects that implement the Equal interface\n * const set = HashSet.empty().pipe(\n *   HashSet.add(new Person(1, \"Alice\", 30)),\n *   HashSet.add(new Person(1, \"Alice\", 30))\n * )\n *\n * // HashSet recognizes them as equal, so only one element is stored\n * console.log(HashSet.size(set))\n * // Output: 1\n * ```\n *\n * **Simplifying Equality and Hashing with `Data` and `Schema`:**\n *\n * Effect's {@link Data} and {@link Schema `Schema.Data`} modules offer powerful\n * ways to automatically handle the implementation of both the {@link Equal} and\n * {@link Hash} traits for your custom data structures.\n *\n * - **`Data` Module:** By using constructors like `Data.struct`, `Data.tuple`,\n *   `Data.array`, or `Data.case` to define your data types, Effect\n *   automatically generates the necessary implementations for value-based\n *   equality and consistent hashing. This significantly reduces boilerplate and\n *   ensures correctness.\n *\n * ```ts\n * import { HashSet, Data, Equal } from \"effect\"\n * import assert from \"node:assert/strict\"\n *\n * // Data.* implements the `Equal` traits for us\n * const person1 = Data.struct({ id: 1, name: \"Alice\", age: 30 })\n * const person2 = Data.struct({ id: 1, name: \"Alice\", age: 30 })\n *\n * assert(Equal.equals(person1, person2))\n *\n * const set = HashSet.empty().pipe(\n *   HashSet.add(person1),\n *   HashSet.add(person2)\n * )\n *\n * // HashSet recognizes them as equal, so only one element is stored\n * console.log(HashSet.size(set)) // Output: 1\n * ```\n *\n * - **`Schema` Module:** When defining data schemas using the {@link Schema}\n *   module, you can use `Schema.Data` to automatically include the `Equal` and\n *   `Hash` traits in the decoded objects. This is particularly important when\n *   working with `HashSet`. **For decoded objects to be correctly recognized as\n *   equal within a `HashSet`, ensure that the schema for those objects is\n *   defined using `Schema.Data`.**\n *\n * ```ts\n * import { Equal, HashSet, Schema } from \"effect\"\n * import assert from \"node:assert/strict\"\n *\n * // Schema.Data implements the `Equal` traits for us\n * const PersonSchema = Schema.Data(\n *   Schema.Struct({\n *     id: Schema.Number,\n *     name: Schema.String,\n *     age: Schema.Number\n *   })\n * )\n *\n * const Person = Schema.decode(PersonSchema)\n *\n * const person1 = Person({ id: 1, name: \"Alice\", age: 30 })\n * const person2 = Person({ id: 1, name: \"Alice\", age: 30 })\n *\n * assert(Equal.equals(person1, person2)) // Output: true\n *\n * const set = HashSet.empty().pipe(\n *   HashSet.add(person1),\n *   HashSet.add(person2)\n * )\n *\n * // HashSet thanks to Schema.Data implementation of the `Equal` trait, recognizes the two Person as equal, so only one element is stored\n * console.log(HashSet.size(set)) // Output: 1\n * ```\n *\n * ### Interoperability with the JavaScript Runtime:\n *\n * To interoperate with the regular JavaScript runtime, Effect's `HashSet`\n * provides methods to access its elements in formats readily usable by\n * JavaScript APIs: {@link values `HashSet.values`},\n * {@link toValues `HashSet.toValues`}\n *\n * ```ts\n * import { HashSet } from \"effect\"\n *\n * const hashSet: HashSet.HashSet<number> = HashSet.make(1, 2, 3)\n *\n * // Using HashSet.values to convert HashSet.HashSet<A> to IterableIterator<A>\n * const iterable: IterableIterator<number> = HashSet.values(hashSet)\n *\n * console.log(...iterable) // Logs:  1 2 3\n *\n * // Using HashSet.toValues to convert HashSet.HashSet<A> to Array<A>\n * const array: Array<number> = HashSet.toValues(hashSet)\n *\n * console.log(array) // Logs: [ 1, 2, 3 ]\n * ```\n *\n * Be mindful of performance implications (both time and space complexity) when\n * frequently converting between Effect's immutable HashSet and mutable\n * JavaScript data structures, especially for large collections.\n *\n * @module HashSet\n * @since 2.0.0\n */\nexport * as HashSet from \"./HashSet.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Inspectable from \"./Inspectable.js\"\n\n/**\n * This module provides utility functions for working with Iterables in TypeScript.\n *\n * @since 2.0.0\n */\nexport * as Iterable from \"./Iterable.js\"\n\n/**\n * @since 3.10.0\n */\nexport * as JSONSchema from \"./JSONSchema.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as KeyedPool from \"./KeyedPool.js\"\n\n/**\n * A `Layer<ROut, E, RIn>` describes how to build one or more services in your\n * application. Services can be injected into effects via\n * `Effect.provideService`. Effects can require services via `Effect.service`.\n *\n * Layer can be thought of as recipes for producing bundles of services, given\n * their dependencies (other services).\n *\n * Construction of services can be effectful and utilize resources that must be\n * acquired and safely released when the services are done being utilized.\n *\n * By default layers are shared, meaning that if the same layer is used twice\n * the layer will only be allocated a single time.\n *\n * Because of their excellent composition properties, layers are the idiomatic\n * way in Effect-TS to create services that depend on other services.\n *\n * @since 2.0.0\n */\nexport * as Layer from \"./Layer.js\"\n\n/**\n * @since 3.14.0\n * @experimental\n */\nexport * as LayerMap from \"./LayerMap.js\"\n\n/**\n * A data type for immutable linked lists representing ordered collections of elements of type `A`.\n *\n * This data type is optimal for last-in-first-out (LIFO), stack-like access patterns. If you need another access pattern, for example, random access or FIFO, consider using a collection more suited to this than `List`.\n *\n * **Performance**\n *\n * - Time: `List` has `O(1)` prepend and head/tail access. Most other operations are `O(n)` on the number of elements in the list. This includes the index-based lookup of elements, `length`, `append` and `reverse`.\n * - Space: `List` implements structural sharing of the tail list. This means that many operations are either zero- or constant-memory cost.\n *\n * @since 2.0.0\n */\nexport * as List from \"./List.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as LogLevel from \"./LogLevel.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as LogSpan from \"./LogSpan.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Logger from \"./Logger.js\"\n\n/**\n * @since 3.8.0\n * @experimental\n */\nexport * as Mailbox from \"./Mailbox.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ManagedRuntime from \"./ManagedRuntime.js\"\n\n/**\n * The `effect/match` module provides a type-safe pattern matching system for\n * TypeScript. Inspired by functional programming, it simplifies conditional\n * logic by replacing verbose if/else or switch statements with a structured and\n * expressive API.\n *\n * This module supports matching against types, values, and discriminated unions\n * while enforcing exhaustiveness checking to ensure all cases are handled.\n *\n * Although pattern matching is not yet a native JavaScript feature,\n * `effect/match` offers a reliable implementation that is available today.\n *\n * **How Pattern Matching Works**\n *\n * Pattern matching follows a structured process:\n *\n * - **Creating a matcher**: Define a `Matcher` that operates on either a\n *   specific `Match.type` or `Match.value`.\n *\n * - **Defining patterns**: Use combinators such as `Match.when`, `Match.not`,\n *   and `Match.tag` to specify matching conditions.\n *\n * - **Completing the match**: Apply a finalizer such as `Match.exhaustive`,\n *   `Match.orElse`, or `Match.option` to determine how unmatched cases should\n *   be handled.\n *\n * @since 1.0.0\n */\nexport * as Match from \"./Match.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MergeDecision from \"./MergeDecision.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MergeState from \"./MergeState.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MergeStrategy from \"./MergeStrategy.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Metric from \"./Metric.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricBoundaries from \"./MetricBoundaries.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricHook from \"./MetricHook.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricKey from \"./MetricKey.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricKeyType from \"./MetricKeyType.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricLabel from \"./MetricLabel.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricPair from \"./MetricPair.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricPolling from \"./MetricPolling.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricRegistry from \"./MetricRegistry.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MetricState from \"./MetricState.js\"\n\n/**\n * A lightweight alternative to the `Effect` data type, with a subset of the functionality.\n *\n * @since 3.4.0\n * @experimental\n */\nexport * as Micro from \"./Micro.js\"\n\n/**\n * @since 2.0.0\n *\n * Enables low level framework authors to run on their own isolated effect version\n */\nexport * as ModuleVersion from \"./ModuleVersion.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MutableHashMap from \"./MutableHashMap.js\"\n\n/**\n * # MutableHashSet\n *\n * A mutable `MutableHashSet` provides a collection of unique values with\n * efficient lookup, insertion and removal. Unlike its immutable sibling\n * {@link module:HashSet}, a `MutableHashSet` can be modified in-place;\n * operations like add, remove, and clear directly modify the original set\n * rather than creating a new one. This mutability offers benefits like improved\n * performance in scenarios where you need to build or modify a set\n * incrementally.\n *\n * ## What Problem Does It Solve?\n *\n * `MutableHashSet` solves the problem of maintaining an unsorted collection\n * where each value appears exactly once, with fast operations for checking\n * membership and adding/removing values, in contexts where mutability is\n * preferred for performance or implementation simplicity.\n *\n * ## When to Use\n *\n * Use `MutableHashSet` when you need:\n *\n * - A collection with no duplicate values\n * - Efficient membership testing (**`O(1)`** average complexity)\n * - In-place modifications for better performance\n * - A set that will be built or modified incrementally\n * - Local mutability in otherwise immutable code\n *\n * ## Advanced Features\n *\n * MutableHashSet provides operations for:\n *\n * - Adding and removing elements with direct mutation\n * - Checking for element existence\n * - Clearing all elements at once\n * - Converting to/from other collection types\n *\n * ## Performance Characteristics\n *\n * - **Lookup** operations ({@link module:MutableHashSet.has}): **`O(1)`** average\n *   time complexity\n * - **Insertion** operations ({@link module:MutableHashSet.add}): **`O(1)`**\n *   average time complexity\n * - **Removal** operations ({@link module:MutableHashSet.remove}): **`O(1)`**\n *   average time complexity\n * - **Iteration**: **`O(n)`** where n is the size of the set\n *\n * The MutableHashSet data structure implements the following traits:\n *\n * - {@link Iterable}: allows iterating over the values in the set\n * - {@link Pipeable}: allows chaining operations with the pipe operator\n * - {@link Inspectable}: allows inspecting the contents of the set\n *\n * ## Operations Reference\n *\n * | Category     | Operation                                  | Description                         | Complexity |\n * | ------------ | ------------------------------------------ | ----------------------------------- | ---------- |\n * | constructors | {@link module:MutableHashSet.empty}        | Creates an empty MutableHashSet     | O(1)       |\n * | constructors | {@link module:MutableHashSet.fromIterable} | Creates a set from an iterable      | O(n)       |\n * | constructors | {@link module:MutableHashSet.make}         | Creates a set from multiple values  | O(n)       |\n * |              |                                            |                                     |            |\n * | elements     | {@link module:MutableHashSet.has}          | Checks if a value exists in the set | O(1) avg   |\n * | elements     | {@link module:MutableHashSet.add}          | Adds a value to the set             | O(1) avg   |\n * | elements     | {@link module:MutableHashSet.remove}       | Removes a value from the set        | O(1) avg   |\n * | elements     | {@link module:MutableHashSet.size}         | Gets the number of elements         | O(1)       |\n * | elements     | {@link module:MutableHashSet.clear}        | Removes all values from the set     | O(1)       |\n *\n * ## Notes\n *\n * ### Mutability Considerations:\n *\n * Unlike most data structures in the Effect ecosystem, `MutableHashSet` is\n * mutable. This means that operations like `add`, `remove`, and `clear` modify\n * the original set rather than creating a new one. This can lead to more\n * efficient code in some scenarios, but requires careful handling to avoid\n * unexpected side effects.\n *\n * ### When to Choose `MutableHashSet` vs {@link module:HashSet}:\n *\n * - Use `MutableHashSet` when you need to build or modify a set incrementally and\n *   performance is a priority\n * - Use `HashSet` when you want immutability guarantees and functional\n *   programming patterns\n * - Consider using {@link module:HashSet}'s bounded mutation context (via\n *   {@link module:HashSet.beginMutation}, {@link module:HashSet.endMutation}, and\n *   {@link module:HashSet.mutate} methods) when you need temporary mutability\n *   within an otherwise immutable context - this approach might be sufficient\n *   for many use cases without requiring a separate `MutableHashSet`\n * - `MutableHashSet` is often useful for local operations where the mutability is\n *   contained and doesn't leak into the broader application\n *\n * @module MutableHashSet\n * @since 2.0.0\n */\nexport * as MutableHashSet from \"./MutableHashSet.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MutableList from \"./MutableList.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MutableQueue from \"./MutableQueue.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as MutableRef from \"./MutableRef.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as NonEmptyIterable from \"./NonEmptyIterable.js\"\n\n/**\n * # Number\n *\n * This module provides utility functions and type class instances for working\n * with the `number` type in TypeScript. It includes functions for basic\n * arithmetic operations, as well as type class instances for `Equivalence` and\n * `Order`.\n *\n * ## Operations Reference\n *\n * | Category     | Operation                                  | Description                                             | Domain                         | Co-domain             |\n * | ------------ | ------------------------------------------ | ------------------------------------------------------- | ------------------------------ | --------------------- |\n * | constructors | {@link module:Number.parse}                | Safely parses a string to a number                      | `string`                       | `Option<number>`      |\n * |              |                                            |                                                         |                                |                       |\n * | math         | {@link module:Number.sum}                  | Adds two numbers                                        | `number`, `number`             | `number`              |\n * | math         | {@link module:Number.sumAll}               | Sums all numbers in a collection                        | `Iterable<number>`             | `number`              |\n * | math         | {@link module:Number.subtract}             | Subtracts one number from another                       | `number`, `number`             | `number`              |\n * | math         | {@link module:Number.multiply}             | Multiplies two numbers                                  | `number`, `number`             | `number`              |\n * | math         | {@link module:Number.multiplyAll}          | Multiplies all numbers in a collection                  | `Iterable<number>`             | `number`              |\n * | math         | {@link module:Number.divide}               | Safely divides handling division by zero                | `number`, `number`             | `Option<number>`      |\n * | math         | {@link module:Number.unsafeDivide}         | Divides but misbehaves for division by zero             | `number`, `number`             | `number`              |\n * | math         | {@link module:Number.remainder}            | Calculates remainder of division                        | `number`, `number`             | `number`              |\n * | math         | {@link module:Number.increment}            | Adds 1 to a number                                      | `number`                       | `number`              |\n * | math         | {@link module:Number.decrement}            | Subtracts 1 from a number                               | `number`                       | `number`              |\n * | math         | {@link module:Number.sign}                 | Determines the sign of a number                         | `number`                       | `Ordering`            |\n * | math         | {@link module:Number.nextPow2}             | Finds the next power of 2                               | `number`                       | `number`              |\n * | math         | {@link module:Number.round}                | Rounds a number with specified precision                | `number`, `number`             | `number`              |\n * |              |                                            |                                                         |                                |                       |\n * | predicates   | {@link module:Number.between}              | Checks if a number is in a range                        | `number`, `{minimum, maximum}` | `boolean`             |\n * | predicates   | {@link module:Number.lessThan}             | Checks if one number is less than another               | `number`, `number`             | `boolean`             |\n * | predicates   | {@link module:Number.lessThanOrEqualTo}    | Checks if one number is less than or equal              | `number`, `number`             | `boolean`             |\n * | predicates   | {@link module:Number.greaterThan}          | Checks if one number is greater than another            | `number`, `number`             | `boolean`             |\n * | predicates   | {@link module:Number.greaterThanOrEqualTo} | Checks if one number is greater or equal                | `number`, `number`             | `boolean`             |\n * |              |                                            |                                                         |                                |                       |\n * | guards       | {@link module:Number.isNumber}             | Type guard for JavaScript numbers                       | `unknown`                      | `boolean`             |\n * |              |                                            |                                                         |                                |                       |\n * | comparison   | {@link module:Number.min}                  | Returns the minimum of two numbers                      | `number`, `number`             | `number`              |\n * | comparison   | {@link module:Number.max}                  | Returns the maximum of two numbers                      | `number`, `number`             | `number`              |\n * | comparison   | {@link module:Number.clamp}                | Restricts a number to a range                           | `number`, `{minimum, maximum}` | `number`              |\n * |              |                                            |                                                         |                                |                       |\n * | instances    | {@link module:Number.Equivalence}          | Equivalence instance for numbers                        |                                | `Equivalence<number>` |\n * | instances    | {@link module:Number.Order}                | Order instance for numbers                              |                                | `Order<number>`       |\n * |              |                                            |                                                         |                                |                       |\n * | errors       | {@link module:Number.DivisionByZeroError}  | Error thrown by unsafeDivide                            |                                |                       |\n *\n * ## Composition Patterns and Type Safety\n *\n * When building function pipelines, understanding how types flow through\n * operations is critical:\n *\n * ### Composing with type-preserving operations\n *\n * Most operations in this module are type-preserving (`number → number`),\n * making them easily composable in pipelines:\n *\n * ```ts\n * import { pipe } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * const result = pipe(\n *   10,\n *   Number.increment, // number → number\n *   Number.multiply(2), // number → number\n *   Number.round(1) // number → number\n * ) // Result: number (21)\n * ```\n *\n * ### Working with Option results\n *\n * Operations that might fail (like division by zero) return Option types and\n * require Option combinators:\n *\n * ```ts\n * import { pipe, Option } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * const result = pipe(\n *   10,\n *   Number.divide(0), // number → Option<number>\n *   Option.getOrElse(() => 0) // Option<number> → number\n * ) // Result: number (0)\n * ```\n *\n * ### Composition best practices\n *\n * - Chain type-preserving operations for maximum composability\n * - Use Option combinators when working with potentially failing operations\n * - Consider using Effect for operations that might fail with specific errors\n * - Remember that all operations maintain JavaScript's floating-point precision\n *   limitations\n *\n * @module Number\n * @since 2.0.0\n * @see {@link module:BigInt} for more similar operations on `bigint` types\n * @see {@link module:BigDecimal} for more similar operations on `BigDecimal` types\n */\nexport * as Number from \"./Number.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Option from \"./Option.js\"\n\n/**\n * This module provides an implementation of the `Order` type class which is used to define a total ordering on some type `A`.\n * An order is defined by a relation `<=`, which obeys the following laws:\n *\n * - either `x <= y` or `y <= x` (totality)\n * - if `x <= y` and `y <= x`, then `x == y` (antisymmetry)\n * - if `x <= y` and `y <= z`, then `x <= z` (transitivity)\n *\n * The truth table for compare is defined as follows:\n *\n * | `x <= y` | `x >= y` | Ordering |                       |\n * | -------- | -------- | -------- | --------------------- |\n * | `true`   | `true`   | `0`      | corresponds to x == y |\n * | `true`   | `false`  | `< 0`    | corresponds to x < y  |\n * | `false`  | `true`   | `> 0`    | corresponds to x > y  |\n *\n * @since 2.0.0\n */\nexport * as Order from \"./Order.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Ordering from \"./Ordering.js\"\n\n/**\n * @since 3.10.0\n */\nexport * as ParseResult from \"./ParseResult.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Pipeable from \"./Pipeable.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Pool from \"./Pool.js\"\n\n/**\n * This module provides a collection of functions for working with predicates and refinements.\n *\n * A `Predicate<A>` is a function that takes a value of type `A` and returns a boolean.\n * It is used to check if a value satisfies a certain condition.\n *\n * A `Refinement<A, B>` is a special type of predicate that not only checks a condition\n * but also provides a type guard, allowing TypeScript to narrow the type of the input\n * value from `A` to a more specific type `B` within a conditional block.\n *\n * The module includes:\n * - Basic predicates and refinements for common types (e.g., `isString`, `isNumber`).\n * - Combinators to create new predicates from existing ones (e.g., `and`, `or`, `not`).\n * - Advanced combinators for working with data structures (e.g., `tuple`, `struct`).\n * - Type-level utilities for inspecting predicate and refinement types.\n *\n * @since 2.0.0\n */\nexport * as Predicate from \"./Predicate.js\"\n\n/**\n * @since 3.10.0\n */\nexport * as Pretty from \"./Pretty.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as PrimaryKey from \"./PrimaryKey.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as PubSub from \"./PubSub.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Queue from \"./Queue.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Random from \"./Random.js\"\n\n/**\n * Limits the number of calls to a resource to a maximum amount in some interval.\n *\n * @since 2.0.0\n */\nexport * as RateLimiter from \"./RateLimiter.js\"\n\n/**\n * @since 3.5.0\n */\nexport * as RcMap from \"./RcMap.js\"\n\n/**\n * @since 3.5.0\n */\nexport * as RcRef from \"./RcRef.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Readable from \"./Readable.js\"\n\n/**\n * This module provides utility functions for working with records in TypeScript.\n *\n * @since 2.0.0\n */\nexport * as Record from \"./Record.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as RedBlackTree from \"./RedBlackTree.js\"\n\n/**\n * The Redacted module provides functionality for handling sensitive information\n * securely within your application. By using the `Redacted` data type, you can\n * ensure that sensitive values are not accidentally exposed in logs or error\n * messages.\n *\n * @since 3.3.0\n */\nexport * as Redacted from \"./Redacted.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Ref from \"./Ref.js\"\n\n/**\n * This module provides utility functions for working with RegExp in TypeScript.\n *\n * @since 2.0.0\n */\nexport * as RegExp from \"./RegExp.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Reloadable from \"./Reloadable.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Request from \"./Request.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as RequestBlock from \"./RequestBlock.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as RequestResolver from \"./RequestResolver.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Resource from \"./Resource.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Runtime from \"./Runtime.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as RuntimeFlags from \"./RuntimeFlags.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as RuntimeFlagsPatch from \"./RuntimeFlagsPatch.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as STM from \"./STM.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Schedule from \"./Schedule.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ScheduleDecision from \"./ScheduleDecision.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ScheduleInterval from \"./ScheduleInterval.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ScheduleIntervals from \"./ScheduleIntervals.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Scheduler from \"./Scheduler.js\"\n\n/**\n * @since 3.10.0\n */\nexport * as Schema from \"./Schema.js\"\n\n/**\n * @since 3.10.0\n */\nexport * as SchemaAST from \"./SchemaAST.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Scope from \"./Scope.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ScopedCache from \"./ScopedCache.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as ScopedRef from \"./ScopedRef.js\"\n\n/**\n * @since 2.0.0\n * @deprecated\n */\nexport * as Secret from \"./Secret.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as SingleProducerAsyncInput from \"./SingleProducerAsyncInput.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Sink from \"./Sink.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as SortedMap from \"./SortedMap.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as SortedSet from \"./SortedSet.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Stream from \"./Stream.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as StreamEmit from \"./StreamEmit.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as StreamHaltStrategy from \"./StreamHaltStrategy.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Streamable from \"./Streamable.js\"\n\n/**\n * This module provides utility functions and type class instances for working with the `string` type in TypeScript.\n * It includes functions for basic string manipulation, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @since 2.0.0\n */\nexport * as String from \"./String.js\"\n\n/**\n * This module provides utility functions for working with structs in TypeScript.\n *\n * @since 2.0.0\n */\nexport * as Struct from \"./Struct.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Subscribable from \"./Subscribable.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as SubscriptionRef from \"./SubscriptionRef.js\"\n\n/**\n * A `Supervisor<T>` is allowed to supervise the launching and termination of\n * fibers, producing some visible value of type `T` from the supervision.\n *\n * @since 2.0.0\n */\nexport * as Supervisor from \"./Supervisor.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Symbol from \"./Symbol.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as SynchronizedRef from \"./SynchronizedRef.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TArray from \"./TArray.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TDeferred from \"./TDeferred.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TMap from \"./TMap.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TPriorityQueue from \"./TPriorityQueue.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TPubSub from \"./TPubSub.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TQueue from \"./TQueue.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TRandom from \"./TRandom.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TReentrantLock from \"./TReentrantLock.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TRef from \"./TRef.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TSemaphore from \"./TSemaphore.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TSet from \"./TSet.js\"\n\n/**\n * @since 3.10.0\n */\nexport * as TSubscriptionRef from \"./TSubscriptionRef.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Take from \"./Take.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestAnnotation from \"./TestAnnotation.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestAnnotationMap from \"./TestAnnotationMap.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestAnnotations from \"./TestAnnotations.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestClock from \"./TestClock.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestConfig from \"./TestConfig.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestContext from \"./TestContext.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestLive from \"./TestLive.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestServices from \"./TestServices.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as TestSized from \"./TestSized.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Tracer from \"./Tracer.js\"\n\n/**\n * A `Trie` is used for locating specific `string` keys from within a set.\n *\n * It works similar to `HashMap`, but with keys required to be `string`.\n * This constraint unlocks some performance optimizations and new methods to get string prefixes (e.g. `keysWithPrefix`, `longestPrefixOf`).\n *\n * Prefix search is also the main feature that makes a `Trie` more suited than `HashMap` for certain usecases.\n *\n * A `Trie` is often used to store a dictionary (list of words) that can be searched\n * in a manner that allows for efficient generation of completion lists\n * (e.g. predict the rest of a word a user is typing).\n *\n * A `Trie` has O(n) lookup time where `n` is the size of the key,\n * or even less than `n` on search misses.\n *\n * @since 2.0.0\n */\nexport * as Trie from \"./Trie.js\"\n\n/**\n * This module provides utility functions for working with tuples in TypeScript.\n *\n * @since 2.0.0\n */\nexport * as Tuple from \"./Tuple.js\"\n\n/**\n * A collection of types that are commonly used types.\n *\n * @since 2.0.0\n */\nexport * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Unify from \"./Unify.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as UpstreamPullRequest from \"./UpstreamPullRequest.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as UpstreamPullStrategy from \"./UpstreamPullStrategy.js\"\n\n/**\n * @since 2.0.0\n */\nexport * as Utils from \"./Utils.js\"\n", "/**\n * @since 2.0.0\n */\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface FunctionTypeLambda extends TypeLambda {\n  readonly type: (a: this[\"In\"]) => this[\"Target\"]\n}\n\n/**\n * Tests if a value is a `function`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isFunction = (input: unknown): input is Function => typeof input === \"function\"\n\n/**\n * Creates a function that can be used in a data-last (aka `pipe`able) or\n * data-first style.\n *\n * The first parameter to `dual` is either the arity of the uncurried function\n * or a predicate that determines if the function is being used in a data-first\n * or data-last style.\n *\n * Using the arity is the most common use case, but there are some cases where\n * you may want to use a predicate. For example, if you have a function that\n * takes an optional argument, you can use a predicate to determine if the\n * function is being used in a data-first or data-last style.\n *\n * You can pass either the arity of the uncurried function or a predicate\n * which determines if the function is being used in a data-first or\n * data-last style.\n *\n * **Example** (Using arity to determine data-first or data-last style)\n *\n * ```ts\n * import { dual, pipe } from \"effect/Function\"\n *\n * const sum = dual<\n *   (that: number) => (self: number) => number,\n *   (self: number, that: number) => number\n * >(2, (self, that) => self + that)\n *\n * console.log(sum(2, 3)) // 5\n * console.log(pipe(2, sum(3))) // 5\n * ```\n *\n * **Example** (Using call signatures to define the overloads)\n *\n * ```ts\n * import { dual, pipe } from \"effect/Function\"\n *\n * const sum: {\n *   (that: number): (self: number) => number\n *   (self: number, that: number): number\n * } = dual(2, (self: number, that: number): number => self + that)\n *\n * console.log(sum(2, 3)) // 5\n * console.log(pipe(2, sum(3))) // 5\n * ```\n *\n * **Example** (Using a predicate to determine data-first or data-last style)\n *\n * ```ts\n * import { dual, pipe } from \"effect/Function\"\n *\n * const sum = dual<\n *   (that: number) => (self: number) => number,\n *   (self: number, that: number) => number\n * >(\n *   (args) => args.length === 2,\n *   (self, that) => self + that\n * )\n *\n * console.log(sum(2, 3)) // 5\n * console.log(pipe(2, sum(3))) // 5\n * ```\n *\n * @since 2.0.0\n */\nexport const dual: {\n  /**\n   * Creates a function that can be used in a data-last (aka `pipe`able) or\n   * data-first style.\n   *\n   * The first parameter to `dual` is either the arity of the uncurried function\n   * or a predicate that determines if the function is being used in a data-first\n   * or data-last style.\n   *\n   * Using the arity is the most common use case, but there are some cases where\n   * you may want to use a predicate. For example, if you have a function that\n   * takes an optional argument, you can use a predicate to determine if the\n   * function is being used in a data-first or data-last style.\n   *\n   * You can pass either the arity of the uncurried function or a predicate\n   * which determines if the function is being used in a data-first or\n   * data-last style.\n   *\n   * **Example** (Using arity to determine data-first or data-last style)\n   *\n   * ```ts\n   * import { dual, pipe } from \"effect/Function\"\n   *\n   * const sum = dual<\n   *   (that: number) => (self: number) => number,\n   *   (self: number, that: number) => number\n   * >(2, (self, that) => self + that)\n   *\n   * console.log(sum(2, 3)) // 5\n   * console.log(pipe(2, sum(3))) // 5\n   * ```\n   *\n   * **Example** (Using call signatures to define the overloads)\n   *\n   * ```ts\n   * import { dual, pipe } from \"effect/Function\"\n   *\n   * const sum: {\n   *   (that: number): (self: number) => number\n   *   (self: number, that: number): number\n   * } = dual(2, (self: number, that: number): number => self + that)\n   *\n   * console.log(sum(2, 3)) // 5\n   * console.log(pipe(2, sum(3))) // 5\n   * ```\n   *\n   * **Example** (Using a predicate to determine data-first or data-last style)\n   *\n   * ```ts\n   * import { dual, pipe } from \"effect/Function\"\n   *\n   * const sum = dual<\n   *   (that: number) => (self: number) => number,\n   *   (self: number, that: number) => number\n   * >(\n   *   (args) => args.length === 2,\n   *   (self, that) => self + that\n   * )\n   *\n   * console.log(sum(2, 3)) // 5\n   * console.log(pipe(2, sum(3))) // 5\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <DataLast extends (...args: Array<any>) => any, DataFirst extends (...args: Array<any>) => any>(arity: Parameters<DataFirst>[\"length\"], body: DataFirst): DataLast & DataFirst\n  /**\n   * Creates a function that can be used in a data-last (aka `pipe`able) or\n   * data-first style.\n   *\n   * The first parameter to `dual` is either the arity of the uncurried function\n   * or a predicate that determines if the function is being used in a data-first\n   * or data-last style.\n   *\n   * Using the arity is the most common use case, but there are some cases where\n   * you may want to use a predicate. For example, if you have a function that\n   * takes an optional argument, you can use a predicate to determine if the\n   * function is being used in a data-first or data-last style.\n   *\n   * You can pass either the arity of the uncurried function or a predicate\n   * which determines if the function is being used in a data-first or\n   * data-last style.\n   *\n   * **Example** (Using arity to determine data-first or data-last style)\n   *\n   * ```ts\n   * import { dual, pipe } from \"effect/Function\"\n   *\n   * const sum = dual<\n   *   (that: number) => (self: number) => number,\n   *   (self: number, that: number) => number\n   * >(2, (self, that) => self + that)\n   *\n   * console.log(sum(2, 3)) // 5\n   * console.log(pipe(2, sum(3))) // 5\n   * ```\n   *\n   * **Example** (Using call signatures to define the overloads)\n   *\n   * ```ts\n   * import { dual, pipe } from \"effect/Function\"\n   *\n   * const sum: {\n   *   (that: number): (self: number) => number\n   *   (self: number, that: number): number\n   * } = dual(2, (self: number, that: number): number => self + that)\n   *\n   * console.log(sum(2, 3)) // 5\n   * console.log(pipe(2, sum(3))) // 5\n   * ```\n   *\n   * **Example** (Using a predicate to determine data-first or data-last style)\n   *\n   * ```ts\n   * import { dual, pipe } from \"effect/Function\"\n   *\n   * const sum = dual<\n   *   (that: number) => (self: number) => number,\n   *   (self: number, that: number) => number\n   * >(\n   *   (args) => args.length === 2,\n   *   (self, that) => self + that\n   * )\n   *\n   * console.log(sum(2, 3)) // 5\n   * console.log(pipe(2, sum(3))) // 5\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <DataLast extends (...args: Array<any>) => any, DataFirst extends (...args: Array<any>) => any>(isDataFirst: (args: IArguments) => boolean, body: DataFirst): DataLast & DataFirst\n} = function(arity, body) {\n  if (typeof arity === \"function\") {\n    return function() {\n      if (arity(arguments)) {\n        // @ts-expect-error\n        return body.apply(this, arguments)\n      }\n      return ((self: any) => body(self, ...arguments)) as any\n    }\n  }\n\n  switch (arity) {\n    case 0:\n    case 1:\n      throw new RangeError(`Invalid arity ${arity}`)\n\n    case 2:\n      return function(a, b) {\n        if (arguments.length >= 2) {\n          return body(a, b)\n        }\n        return function(self: any) {\n          return body(self, a)\n        }\n      }\n\n    case 3:\n      return function(a, b, c) {\n        if (arguments.length >= 3) {\n          return body(a, b, c)\n        }\n        return function(self: any) {\n          return body(self, a, b)\n        }\n      }\n\n    case 4:\n      return function(a, b, c, d) {\n        if (arguments.length >= 4) {\n          return body(a, b, c, d)\n        }\n        return function(self: any) {\n          return body(self, a, b, c)\n        }\n      }\n\n    case 5:\n      return function(a, b, c, d, e) {\n        if (arguments.length >= 5) {\n          return body(a, b, c, d, e)\n        }\n        return function(self: any) {\n          return body(self, a, b, c, d)\n        }\n      }\n\n    default:\n      return function() {\n        if (arguments.length >= arity) {\n          // @ts-expect-error\n          return body.apply(this, arguments)\n        }\n        const args = arguments\n        return function(self: any) {\n          return body(self, ...args)\n        }\n      }\n  }\n}\n/**\n * Apply a function to given values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, apply } from \"effect/Function\"\n * import { length } from \"effect/String\"\n *\n * assert.deepStrictEqual(pipe(length, apply(\"hello\")), 5)\n * ```\n *\n * @since 2.0.0\n */\nexport const apply = <A extends ReadonlyArray<unknown>>(...a: A) => <B>(self: (...a: A) => B): B => self(...a)\n\n/**\n * A lazy argument.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { LazyArg, constant } from \"effect/Function\"\n *\n * const constNull: LazyArg<null> = constant(null)\n * ```\n *\n * @since 2.0.0\n */\nexport interface LazyArg<A> {\n  (): A\n}\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { FunctionN } from \"effect/Function\"\n *\n * const sum: FunctionN<[number, number], number> = (a, b) => a + b\n * ```\n *\n * @since 2.0.0\n */\nexport interface FunctionN<A extends ReadonlyArray<unknown>, B> {\n  (...args: A): B\n}\n\n/**\n * The identity function, i.e. A function that returns its input argument.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(identity(5), 5)\n * ```\n *\n * @since 2.0.0\n */\nexport const identity = <A>(a: A): A => a\n\n/**\n * A function that ensures that the type of an expression matches some type,\n * without changing the resulting type of that expression.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { satisfies } from \"effect/Function\"\n *\n * const test1 = satisfies<number>()(5 as const)\n *     //^? const test: 5\n *     // @ts-expect-error\n * const test2 = satisfies<string>()(5)\n *     //^? Argument of type 'number' is not assignable to parameter of type 'string'\n *\n * assert.deepStrictEqual(satisfies<number>()(5), 5)\n * ```\n *\n * @since 2.0.0\n */\nexport const satisfies = <A>() => <B extends A>(b: B) => b\n\n/**\n * Casts the result to the specified type.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { unsafeCoerce, identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(unsafeCoerce, identity)\n * ```\n *\n * @since 2.0.0\n */\nexport const unsafeCoerce: <A, B>(a: A) => B = identity as any\n\n/**\n * Creates a constant value that never changes.\n *\n * This is useful when you want to pass a value to a higher-order function (a function that takes another function as its argument)\n * and want that inner function to always use the same value, no matter how many times it is called.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constant } from \"effect/Function\"\n *\n * const constNull = constant(null)\n *\n * assert.deepStrictEqual(constNull(), null)\n * assert.deepStrictEqual(constNull(), null)\n * ```\n *\n * @since 2.0.0\n */\nexport const constant = <A>(value: A): LazyArg<A> => () => value\n\n/**\n * A thunk that returns always `true`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constTrue } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constTrue(), true)\n * ```\n *\n * @since 2.0.0\n */\nexport const constTrue: LazyArg<boolean> = constant(true)\n\n/**\n * A thunk that returns always `false`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constFalse } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constFalse(), false)\n * ```\n *\n * @since 2.0.0\n */\nexport const constFalse: LazyArg<boolean> = constant(false)\n\n/**\n * A thunk that returns always `null`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constNull } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constNull(), null)\n * ```\n *\n * @since 2.0.0\n */\nexport const constNull: LazyArg<null> = constant(null)\n\n/**\n * A thunk that returns always `undefined`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constUndefined } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constUndefined(), undefined)\n * ```\n *\n * @since 2.0.0\n */\nexport const constUndefined: LazyArg<undefined> = constant(undefined)\n\n/**\n * A thunk that returns always `void`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constVoid } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constVoid(), undefined)\n * ```\n *\n * @since 2.0.0\n */\nexport const constVoid: LazyArg<void> = constUndefined\n\n/**\n * Reverses the order of arguments for a curried function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { flip } from \"effect/Function\"\n *\n * const f = (a: number) => (b: string) => a - b.length\n *\n * assert.deepStrictEqual(flip(f)('aaa')(2), -1)\n * ```\n *\n * @since 2.0.0\n */\nexport const flip = <A extends Array<unknown>, B extends Array<unknown>, C>(\n  f: (...a: A) => (...b: B) => C\n): (...b: B) => (...a: A) => C =>\n(...b) =>\n(...a) => f(...a)(...b)\n\n/**\n * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.\n * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { compose } from \"effect/Function\"\n *\n * const increment = (n: number) => n + 1;\n * const square = (n: number) => n * n;\n *\n * assert.strictEqual(compose(increment, square)(2), 9);\n * ```\n *\n * @since 2.0.0\n */\nexport const compose: {\n  /**\n   * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.\n   * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { compose } from \"effect/Function\"\n   *\n   * const increment = (n: number) => n + 1;\n   * const square = (n: number) => n * n;\n   *\n   * assert.strictEqual(compose(increment, square)(2), 9);\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B, C>(bc: (b: B) => C): <A>(self: (a: A) => B) => (a: A) => C\n  /**\n   * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.\n   * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { compose } from \"effect/Function\"\n   *\n   * const increment = (n: number) => n + 1;\n   * const square = (n: number) => n * n;\n   *\n   * assert.strictEqual(compose(increment, square)(2), 9);\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B, C>(self: (a: A) => B, bc: (b: B) => C): (a: A) => C\n} = dual(2, <A, B, C>(ab: (a: A) => B, bc: (b: B) => C): (a: A) => C => (a) => bc(ab(a)))\n\n/**\n * The `absurd` function is a stub for cases where a value of type `never` is encountered in your code,\n * meaning that it should be impossible for this code to be executed.\n *\n * This function is particularly useful when it's necessary to specify that certain cases are impossible.\n *\n * @since 2.0.0\n */\nexport const absurd = <A>(_: never): A => {\n  throw new Error(\"Called `absurd` function which should be uncallable\")\n}\n\n/**\n * Creates a   version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { tupled } from \"effect/Function\"\n *\n * const sumTupled = tupled((x: number, y: number): number => x + y)\n *\n * assert.deepStrictEqual(sumTupled([1, 2]), 3)\n * ```\n *\n * @since 2.0.0\n */\nexport const tupled = <A extends ReadonlyArray<unknown>, B>(f: (...a: A) => B): (a: A) => B => (a) => f(...a)\n\n/**\n * Inverse function of `tupled`\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { untupled } from \"effect/Function\"\n *\n * const getFirst = untupled(<A, B>(tuple: [A, B]): A => tuple[0])\n *\n * assert.deepStrictEqual(getFirst(1, 2), 1)\n * ```\n *\n * @since 2.0.0\n */\nexport const untupled = <A extends ReadonlyArray<unknown>, B>(f: (a: A) => B): (...a: A) => B => (...a) => f(a)\n\n/**\n * Pipes the value of an expression into a pipeline of functions.\n *\n * **Details**\n *\n * The `pipe` function is a utility that allows us to compose functions in a\n * readable and sequential manner. It takes the output of one function and\n * passes it as the input to the next function in the pipeline. This enables us\n * to build complex transformations by chaining multiple functions together.\n *\n * ```ts skip-type-checking\n * import { pipe } from \"effect\"\n *\n * const result = pipe(input, func1, func2, ..., funcN)\n * ```\n *\n * In this syntax, `input` is the initial value, and `func1`, `func2`, ...,\n * `funcN` are the functions to be applied in sequence. The result of each\n * function becomes the input for the next function, and the final result is\n * returned.\n *\n * Here's an illustration of how `pipe` works:\n *\n * ```\n * ┌───────┐    ┌───────┐    ┌───────┐    ┌───────┐    ┌───────┐    ┌────────┐\n * │ input │───►│ func1 │───►│ func2 │───►│  ...  │───►│ funcN │───►│ result │\n * └───────┘    └───────┘    └───────┘    └───────┘    └───────┘    └────────┘\n * ```\n *\n * It's important to note that functions passed to `pipe` must have a **single\n * argument** because they are only called with a single argument.\n *\n * **When to Use**\n *\n * This is useful in combination with data-last functions as a simulation of\n * methods:\n *\n * ```ts skip-type-checking\n * as.map(f).filter(g)\n * ```\n *\n * becomes:\n *\n * ```ts skip-type-checking\n * import { pipe, Array } from \"effect\"\n *\n * pipe(as, Array.map(f), Array.filter(g))\n * ```\n *\n * **Example** (Chaining Arithmetic Operations)\n *\n * ```ts\n * import { pipe } from \"effect\"\n *\n * // Define simple arithmetic operations\n * const increment = (x: number) => x + 1\n * const double = (x: number) => x * 2\n * const subtractTen = (x: number) => x - 10\n *\n * // Sequentially apply these operations using `pipe`\n * const result = pipe(5, increment, double, subtractTen)\n *\n * console.log(result)\n * // Output: 2\n * ```\n *\n * @since 2.0.0\n */\nexport function pipe<A>(a: A): A\nexport function pipe<A, B = never>(a: A, ab: (a: A) => B): B\nexport function pipe<A, B = never, C = never>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C\n): C\nexport function pipe<A, B = never, C = never, D = never>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D\n): D\nexport function pipe<A, B = never, C = never, D = never, E = never>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E\n): E\nexport function pipe<A, B = never, C = never, D = never, E = never, F = never>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F\n): F\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G\n): G\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H\n): H\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I\n): I\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J\n): J\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K\n): K\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L\n): L\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M\n): M\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N\n): N\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O\n): O\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never,\n  P = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P\n): P\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never,\n  P = never,\n  Q = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q\n): Q\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never,\n  P = never,\n  Q = never,\n  R = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q,\n  qr: (q: Q) => R\n): R\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never,\n  P = never,\n  Q = never,\n  R = never,\n  S = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q,\n  qr: (q: Q) => R,\n  rs: (r: R) => S\n): S\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never,\n  P = never,\n  Q = never,\n  R = never,\n  S = never,\n  T = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q,\n  qr: (q: Q) => R,\n  rs: (r: R) => S,\n  st: (s: S) => T\n): T\nexport function pipe(\n  a: unknown,\n  ab?: Function,\n  bc?: Function,\n  cd?: Function,\n  de?: Function,\n  ef?: Function,\n  fg?: Function,\n  gh?: Function,\n  hi?: Function\n): unknown {\n  switch (arguments.length) {\n    case 1:\n      return a\n    case 2:\n      return ab!(a)\n    case 3:\n      return bc!(ab!(a))\n    case 4:\n      return cd!(bc!(ab!(a)))\n    case 5:\n      return de!(cd!(bc!(ab!(a))))\n    case 6:\n      return ef!(de!(cd!(bc!(ab!(a)))))\n    case 7:\n      return fg!(ef!(de!(cd!(bc!(ab!(a))))))\n    case 8:\n      return gh!(fg!(ef!(de!(cd!(bc!(ab!(a)))))))\n    case 9:\n      return hi!(gh!(fg!(ef!(de!(cd!(bc!(ab!(a))))))))\n    default: {\n      let ret = arguments[0]\n      for (let i = 1; i < arguments.length; i++) {\n        ret = arguments[i](ret)\n      }\n      return ret\n    }\n  }\n}\n\n/**\n * Performs left-to-right function composition. The first argument may have any arity, the remaining arguments must be unary.\n *\n * See also [`pipe`](#pipe).\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { flow } from \"effect/Function\"\n *\n * const len = (s: string): number => s.length\n * const double = (n: number): number => n * 2\n *\n * const f = flow(len, double)\n *\n * assert.strictEqual(f('aaa'), 6)\n * ```\n *\n * @since 2.0.0\n */\nexport function flow<A extends ReadonlyArray<unknown>, B = never>(\n  ab: (...a: A) => B\n): (...a: A) => B\nexport function flow<A extends ReadonlyArray<unknown>, B = never, C = never>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C\n): (...a: A) => C\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never\n>(ab: (...a: A) => B, bc: (b: B) => C, cd: (c: C) => D): (...a: A) => D\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E\n): (...a: A) => E\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F\n): (...a: A) => F\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G\n): (...a: A) => G\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H\n): (...a: A) => H\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I\n): (...a: A) => I\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J\n): (...a: A) => J\nexport function flow(\n  ab: Function,\n  bc?: Function,\n  cd?: Function,\n  de?: Function,\n  ef?: Function,\n  fg?: Function,\n  gh?: Function,\n  hi?: Function,\n  ij?: Function\n): unknown {\n  switch (arguments.length) {\n    case 1:\n      return ab\n    case 2:\n      return function(this: unknown) {\n        return bc!(ab.apply(this, arguments))\n      }\n    case 3:\n      return function(this: unknown) {\n        return cd!(bc!(ab.apply(this, arguments)))\n      }\n    case 4:\n      return function(this: unknown) {\n        return de!(cd!(bc!(ab.apply(this, arguments))))\n      }\n    case 5:\n      return function(this: unknown) {\n        return ef!(de!(cd!(bc!(ab.apply(this, arguments)))))\n      }\n    case 6:\n      return function(this: unknown) {\n        return fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments))))))\n      }\n    case 7:\n      return function(this: unknown) {\n        return gh!(fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments)))))))\n      }\n    case 8:\n      return function(this: unknown) {\n        return hi!(gh!(fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments))))))))\n      }\n    case 9:\n      return function(this: unknown) {\n        return ij!(hi!(gh!(fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments)))))))))\n      }\n  }\n  return\n}\n\n/**\n * Type hole simulation.\n *\n * @since 2.0.0\n */\nexport const hole: <T>() => T = unsafeCoerce(absurd)\n\n/**\n * The SK combinator, also known as the \"S-K combinator\" or \"S-combinator\", is a fundamental combinator in the\n * lambda calculus and the SKI combinator calculus.\n *\n * This function is useful for discarding the first argument passed to it and returning the second argument.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { SK } from \"effect/Function\";\n *\n * assert.deepStrictEqual(SK(0, \"hello\"), \"hello\")\n * ```\n *\n * @since 2.0.0\n */\nexport const SK = <A, B>(_: A, b: B): B => b\n", "/**\n * This module provides utility functions for working with arrays in TypeScript.\n *\n * @since 2.0.0\n */\n\nimport * as Either from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { dual, identity } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as internalArray from \"./internal/array.js\"\nimport * as internalDoNotation from \"./internal/doNotation.js\"\nimport * as moduleIterable from \"./Iterable.js\"\nimport * as Option from \"./Option.js\"\nimport * as Order from \"./Order.js\"\nimport * as Predicate from \"./Predicate.js\"\nimport * as Record from \"./Record.js\"\nimport * as Tuple from \"./Tuple.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface ReadonlyArrayTypeLambda extends TypeLambda {\n  readonly type: ReadonlyArray<this[\"Target\"]>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type NonEmptyReadonlyArray<A> = readonly [A, ...Array<A>]\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type NonEmptyArray<A> = [A, ...Array<A>]\n\n/**\n * Builds a `NonEmptyArray` from an non-empty collection of elements.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.make(1, 2, 3)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <Elements extends NonEmptyArray<any>>(\n  ...elements: Elements\n): NonEmptyArray<Elements[number]> => elements\n\n/**\n * Creates a new `Array` of the specified length.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.allocate<number>(3)\n * console.log(result) // [ <3 empty items> ]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const allocate = <A = never>(n: number): Array<A | undefined> => new Array(n)\n\n/**\n * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * **Example**\n *\n * ```ts\n * import { makeBy } from \"effect/Array\"\n *\n * const result = makeBy(5, n => n * 2)\n * console.log(result) // [0, 2, 4, 6, 8]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const makeBy: {\n  /**\n   * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { makeBy } from \"effect/Array\"\n   *\n   * const result = makeBy(5, n => n * 2)\n   * console.log(result) // [0, 2, 4, 6, 8]\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A>(f: (i: number) => A): (n: number) => NonEmptyArray<A>\n  /**\n   * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { makeBy } from \"effect/Array\"\n   *\n   * const result = makeBy(5, n => n * 2)\n   * console.log(result) // [0, 2, 4, 6, 8]\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A>(n: number, f: (i: number) => A): NonEmptyArray<A>\n} = dual(2, <A>(n: number, f: (i: number) => A) => {\n  const max = Math.max(1, Math.floor(n))\n  const out = new Array(max)\n  for (let i = 0; i < max; i++) {\n    out[i] = f(i)\n  }\n  return out as NonEmptyArray<A>\n})\n\n/**\n * Return a `NonEmptyArray` containing a range of integers, including both endpoints.\n *\n * **Example**\n *\n * ```ts\n * import { range } from \"effect/Array\"\n *\n * const result = range(1, 3)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const range = (start: number, end: number): NonEmptyArray<number> =>\n  start <= end ? makeBy(end - start + 1, (i) => start + i) : [start]\n\n/**\n * Return a `NonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.replicate(\"a\", 3)\n * console.log(result) // [\"a\", \"a\", \"a\"]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const replicate: {\n  /**\n   * Return a `NonEmptyArray` containing a value repeated the specified number of times.\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.replicate(\"a\", 3)\n   * console.log(result) // [\"a\", \"a\", \"a\"]\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  (n: number): <A>(a: A) => NonEmptyArray<A>\n  /**\n   * Return a `NonEmptyArray` containing a value repeated the specified number of times.\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.replicate(\"a\", 3)\n   * console.log(result) // [\"a\", \"a\", \"a\"]\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A>(a: A, n: number): NonEmptyArray<A>\n} = dual(2, <A>(a: A, n: number): NonEmptyArray<A> => makeBy(n, () => a))\n\n/**\n * Creates a new `Array` from an iterable collection of values.\n * If the input is already an array, it returns the input as-is.\n * Otherwise, it converts the iterable collection to an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.fromIterable(new Set([1, 2, 3]))\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterable = <A>(collection: Iterable<A>): Array<A> =>\n  Array.isArray(collection) ? collection : Array.from(collection)\n\n/**\n * Creates a new `Array` from a value that might not be an iterable.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.ensure(\"a\")) // [\"a\"]\n * console.log(Array.ensure([\"a\"])) // [\"a\"]\n * console.log(Array.ensure([\"a\", \"b\", \"c\"])) // [\"a\", \"b\", \"c\"]\n * ```\n *\n * @category constructors\n * @since 3.3.0\n */\nexport const ensure = <A>(self: ReadonlyArray<A> | A): Array<A> => Array.isArray(self) ? self : [self as A]\n\n/**\n * Takes a record and returns an array of tuples containing its keys and values.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.fromRecord({ a: 1, b: 2, c: 3 })\n * console.log(result) // [[\"a\", 1], [\"b\", 2], [\"c\", 3]]\n * ```\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromRecord: <K extends string, A>(self: Readonly<Record<K, A>>) => Array<[K, A]> = Record.toEntries\n\n/**\n * Converts an `Option` to an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Option } from \"effect\"\n *\n * console.log(Array.fromOption(Option.some(1))) // [1]\n * console.log(Array.fromOption(Option.none())) // []\n * ```\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromOption: <A>(self: Option.Option<A>) => Array<A> = Option.toArray\n\n/**\n * Matches the elements of an array, applying functions to cases of empty and non-empty arrays.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const match = Array.match({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: ([head, ...tail]) => `head: ${head}, tail: ${tail.length}`\n * })\n * console.log(match([])) // \"empty\"\n * console.log(match([1, 2, 3])) // \"head: 1, tail: 2\"\n * ```\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  /**\n   * Matches the elements of an array, applying functions to cases of empty and non-empty arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const match = Array.match({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: ([head, ...tail]) => `head: ${head}, tail: ${tail.length}`\n   * })\n   * console.log(match([])) // \"empty\"\n   * console.log(match([1, 2, 3])) // \"head: 1, tail: 2\"\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <B, A, C = B>(\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (self: NonEmptyReadonlyArray<A>) => C\n    }\n  ): (self: ReadonlyArray<A>) => B | C\n  /**\n   * Matches the elements of an array, applying functions to cases of empty and non-empty arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const match = Array.match({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: ([head, ...tail]) => `head: ${head}, tail: ${tail.length}`\n   * })\n   * console.log(match([])) // \"empty\"\n   * console.log(match([1, 2, 3])) // \"head: 1, tail: 2\"\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <A, B, C = B>(\n    self: ReadonlyArray<A>,\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (self: NonEmptyReadonlyArray<A>) => C\n    }\n  ): B | C\n} = dual(2, <A, B, C = B>(\n  self: ReadonlyArray<A>,\n  { onEmpty, onNonEmpty }: {\n    readonly onEmpty: LazyArg<B>\n    readonly onNonEmpty: (self: NonEmptyReadonlyArray<A>) => C\n  }\n): B | C => isNonEmptyReadonlyArray(self) ? onNonEmpty(self) : onEmpty())\n\n/**\n * Matches the elements of an array from the left, applying functions to cases of empty and non-empty arrays.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const matchLeft = Array.matchLeft({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (head, tail) => `head: ${head}, tail: ${tail.length}`\n * })\n * console.log(matchLeft([])) // \"empty\"\n * console.log(matchLeft([1, 2, 3])) // \"head: 1, tail: 2\"\n * ```\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const matchLeft: {\n  /**\n   * Matches the elements of an array from the left, applying functions to cases of empty and non-empty arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const matchLeft = Array.matchLeft({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: (head, tail) => `head: ${head}, tail: ${tail.length}`\n   * })\n   * console.log(matchLeft([])) // \"empty\"\n   * console.log(matchLeft([1, 2, 3])) // \"head: 1, tail: 2\"\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <B, A, C = B>(\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (head: A, tail: Array<A>) => C\n    }\n  ): (self: ReadonlyArray<A>) => B | C\n  /**\n   * Matches the elements of an array from the left, applying functions to cases of empty and non-empty arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const matchLeft = Array.matchLeft({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: (head, tail) => `head: ${head}, tail: ${tail.length}`\n   * })\n   * console.log(matchLeft([])) // \"empty\"\n   * console.log(matchLeft([1, 2, 3])) // \"head: 1, tail: 2\"\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <A, B, C = B>(\n    self: ReadonlyArray<A>,\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (head: A, tail: Array<A>) => C\n    }\n  ): B | C\n} = dual(2, <A, B, C = B>(\n  self: ReadonlyArray<A>,\n  { onEmpty, onNonEmpty }: {\n    readonly onEmpty: LazyArg<B>\n    readonly onNonEmpty: (head: A, tail: Array<A>) => C\n  }\n): B | C => isNonEmptyReadonlyArray(self) ? onNonEmpty(headNonEmpty(self), tailNonEmpty(self)) : onEmpty())\n\n/**\n * Matches the elements of an array from the right, applying functions to cases of empty and non-empty arrays.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const matchRight = Array.matchRight({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (init, last) => `init: ${init.length}, last: ${last}`\n * })\n * console.log(matchRight([])) // \"empty\"\n * console.log(matchRight([1, 2, 3])) // \"init: 2, last: 3\"\n * ```\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const matchRight: {\n  /**\n   * Matches the elements of an array from the right, applying functions to cases of empty and non-empty arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const matchRight = Array.matchRight({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: (init, last) => `init: ${init.length}, last: ${last}`\n   * })\n   * console.log(matchRight([])) // \"empty\"\n   * console.log(matchRight([1, 2, 3])) // \"init: 2, last: 3\"\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <B, A, C = B>(\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (init: Array<A>, last: A) => C\n    }\n  ): (self: ReadonlyArray<A>) => B | C\n  /**\n   * Matches the elements of an array from the right, applying functions to cases of empty and non-empty arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const matchRight = Array.matchRight({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: (init, last) => `init: ${init.length}, last: ${last}`\n   * })\n   * console.log(matchRight([])) // \"empty\"\n   * console.log(matchRight([1, 2, 3])) // \"init: 2, last: 3\"\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <A, B, C = B>(\n    self: ReadonlyArray<A>,\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (init: Array<A>, last: A) => C\n    }\n  ): B | C\n} = dual(2, <A, B, C = B>(\n  self: ReadonlyArray<A>,\n  { onEmpty, onNonEmpty }: {\n    readonly onEmpty: LazyArg<B>\n    readonly onNonEmpty: (init: Array<A>, last: A) => C\n  }\n): B | C =>\n  isNonEmptyReadonlyArray(self) ?\n    onNonEmpty(initNonEmpty(self), lastNonEmpty(self)) :\n    onEmpty())\n\n/**\n * Prepend an element to the front of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.prepend([2, 3, 4], 1)\n * console.log(result) // [1, 2, 3, 4]\n * ```\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  /**\n   * Prepend an element to the front of an `Iterable`, creating a new `NonEmptyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.prepend([2, 3, 4], 1)\n   * console.log(result) // [1, 2, 3, 4]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(head: B): <A>(self: Iterable<A>) => NonEmptyArray<A | B>\n  /**\n   * Prepend an element to the front of an `Iterable`, creating a new `NonEmptyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.prepend([2, 3, 4], 1)\n   * console.log(result) // [1, 2, 3, 4]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, head: B): NonEmptyArray<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, head: B): NonEmptyArray<A | B> => [head, ...self])\n\n/**\n * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n * If either array is non-empty, the result is also a non-empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.prependAll([2, 3], [0, 1])\n * console.log(result) // [0, 1, 2, 3]\n * ```\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll: {\n  /**\n   * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.prependAll([2, 3], [0, 1])\n   * console.log(result) // [0, 1, 2, 3]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <S extends Iterable<any>, T extends Iterable<any>>(that: T): (self: S) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  /**\n   * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.prependAll([2, 3], [0, 1])\n   * console.log(result) // [0, 1, 2, 3]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<A | B>\n  /**\n   * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.prependAll([2, 3], [0, 1])\n   * console.log(result) // [0, 1, 2, 3]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: Iterable<B>): NonEmptyArray<A | B>\n  /**\n   * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.prependAll([2, 3], [0, 1])\n   * console.log(result) // [0, 1, 2, 3]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(that).concat(fromIterable(self))\n)\n\n/**\n * Append an element to the end of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.append([1, 2, 3], 4);\n * console.log(result) // [1, 2, 3, 4]\n * ```\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  /**\n   * Append an element to the end of an `Iterable`, creating a new `NonEmptyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.append([1, 2, 3], 4);\n   * console.log(result) // [1, 2, 3, 4]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(last: B): <A>(self: Iterable<A>) => NonEmptyArray<A | B>\n  /**\n   * Append an element to the end of an `Iterable`, creating a new `NonEmptyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.append([1, 2, 3], 4);\n   * console.log(result) // [1, 2, 3, 4]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, last: B): NonEmptyArray<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, last: B): Array<A | B> => [...self, last])\n\n/**\n * Concatenates two arrays (or iterables), combining their elements.\n * If either array is non-empty, the result is also a non-empty array.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll: {\n  /**\n   * Concatenates two arrays (or iterables), combining their elements.\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <S extends Iterable<any>, T extends Iterable<any>>(that: T): (self: S) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  /**\n   * Concatenates two arrays (or iterables), combining their elements.\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<A | B>\n  /**\n   * Concatenates two arrays (or iterables), combining their elements.\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: Iterable<B>): NonEmptyArray<A | B>\n  /**\n   * Concatenates two arrays (or iterables), combining their elements.\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(self).concat(fromIterable(that))\n)\n\n/**\n * Accumulates values from an `Iterable` starting from the left, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\";\n *\n * const result = Array.scan([1, 2, 3, 4], 0, (acc, value) => acc + value)\n * console.log(result) // [0, 1, 3, 6, 10]\n *\n * // Explanation:\n * // This function starts with the initial value (0 in this case)\n * // and adds each element of the array to this accumulator one by one,\n * // keeping track of the cumulative sum after each addition.\n * // Each of these sums is captured in the resulting array.\n * ```\n *\n * @category folding\n * @since 2.0.0\n */\nexport const scan: {\n  /**\n   * Accumulates values from an `Iterable` starting from the left, storing\n   * each intermediate result in an array. Useful for tracking the progression of\n   * a value through a series of transformations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\";\n   *\n   * const result = Array.scan([1, 2, 3, 4], 0, (acc, value) => acc + value)\n   * console.log(result) // [0, 1, 3, 6, 10]\n   *\n   * // Explanation:\n   * // This function starts with the initial value (0 in this case)\n   * // and adds each element of the array to this accumulator one by one,\n   * // keeping track of the cumulative sum after each addition.\n   * // Each of these sums is captured in the resulting array.\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<A>) => NonEmptyArray<B>\n  /**\n   * Accumulates values from an `Iterable` starting from the left, storing\n   * each intermediate result in an array. Useful for tracking the progression of\n   * a value through a series of transformations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\";\n   *\n   * const result = Array.scan([1, 2, 3, 4], 0, (acc, value) => acc + value)\n   * console.log(result) // [0, 1, 3, 6, 10]\n   *\n   * // Explanation:\n   * // This function starts with the initial value (0 in this case)\n   * // and adds each element of the array to this accumulator one by one,\n   * // keeping track of the cumulative sum after each addition.\n   * // Each of these sums is captured in the resulting array.\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B>\n} = dual(3, <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B> => {\n  const out: NonEmptyArray<B> = [b]\n  let i = 0\n  for (const a of self) {\n    out[i + 1] = f(out[i], a)\n    i++\n  }\n  return out\n})\n\n/**\n * Accumulates values from an `Iterable` starting from the right, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\";\n *\n * const result = Array.scanRight([1, 2, 3, 4], 0, (acc, value) => acc + value)\n * console.log(result) // [10, 9, 7, 4, 0]\n * ```\n *\n * @category folding\n * @since 2.0.0\n */\nexport const scanRight: {\n  /**\n   * Accumulates values from an `Iterable` starting from the right, storing\n   * each intermediate result in an array. Useful for tracking the progression of\n   * a value through a series of transformations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\";\n   *\n   * const result = Array.scanRight([1, 2, 3, 4], 0, (acc, value) => acc + value)\n   * console.log(result) // [10, 9, 7, 4, 0]\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<A>) => NonEmptyArray<B>\n  /**\n   * Accumulates values from an `Iterable` starting from the right, storing\n   * each intermediate result in an array. Useful for tracking the progression of\n   * a value through a series of transformations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\";\n   *\n   * const result = Array.scanRight([1, 2, 3, 4], 0, (acc, value) => acc + value)\n   * console.log(result) // [10, 9, 7, 4, 0]\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B>\n} = dual(3, <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B> => {\n  const input = fromIterable(self)\n  const out: NonEmptyArray<B> = new Array(input.length + 1) as any\n  out[input.length] = b\n  for (let i = input.length - 1; i >= 0; i--) {\n    out[i] = f(out[i + 1], input[i])\n  }\n  return out\n})\n\n/**\n * Determine if `unknown` is an Array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.isArray(null)) // false\n * console.log(Array.isArray([1, 2, 3])) // true\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isArray: {\n  /**\n   * Determine if `unknown` is an Array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * console.log(Array.isArray(null)) // false\n   * console.log(Array.isArray([1, 2, 3])) // true\n   * ```\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  (self: unknown): self is Array<unknown>\n  /**\n   * Determine if `unknown` is an Array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * console.log(Array.isArray(null)) // false\n   * console.log(Array.isArray([1, 2, 3])) // true\n   * ```\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  <T>(self: T): self is Extract<T, ReadonlyArray<any>>\n} = Array.isArray\n\n/**\n * Determine if an `Array` is empty narrowing down the type to `[]`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.isEmptyArray([])) // true\n * console.log(Array.isEmptyArray([1, 2, 3])) // false\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyArray = <A>(self: Array<A>): self is [] => self.length === 0\n\n/**\n * Determine if a `ReadonlyArray` is empty narrowing down the type to `readonly []`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.isEmptyReadonlyArray([])) // true\n * console.log(Array.isEmptyReadonlyArray([1, 2, 3])) // false\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyReadonlyArray: <A>(self: ReadonlyArray<A>) => self is readonly [] = isEmptyArray as any\n\n/**\n * Determine if an `Array` is non empty narrowing down the type to `NonEmptyArray`.\n *\n * An `Array` is considered to be a `NonEmptyArray` if it contains at least one element.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.isNonEmptyArray([])) // false\n * console.log(Array.isNonEmptyArray([1, 2, 3])) // true\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNonEmptyArray: <A>(self: Array<A>) => self is NonEmptyArray<A> = internalArray.isNonEmptyArray\n\n/**\n * Determine if a `ReadonlyArray` is non empty narrowing down the type to `NonEmptyReadonlyArray`.\n *\n * A `ReadonlyArray` is considered to be a `NonEmptyReadonlyArray` if it contains at least one element.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.isNonEmptyReadonlyArray([])) // false\n * console.log(Array.isNonEmptyReadonlyArray([1, 2, 3])) // true\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNonEmptyReadonlyArray: <A>(self: ReadonlyArray<A>) => self is NonEmptyReadonlyArray<A> =\n  internalArray.isNonEmptyArray\n\n/**\n * Return the number of elements in a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const length = <A>(self: ReadonlyArray<A>): number => self.length\n\nconst isOutOfBounds = <A>(i: number, as: ReadonlyArray<A>): boolean => i < 0 || i >= as.length\n\nconst clamp = <A>(i: number, as: ReadonlyArray<A>): number => Math.floor(Math.min(Math.max(0, i), as.length))\n\n/**\n * This function provides a safe way to read a value at a particular index from a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const get: {\n  /**\n   * This function provides a safe way to read a value at a particular index from a `ReadonlyArray`.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (index: number): <A>(self: ReadonlyArray<A>) => Option.Option<A>\n  /**\n   * This function provides a safe way to read a value at a particular index from a `ReadonlyArray`.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: ReadonlyArray<A>, index: number): Option.Option<A>\n} = dual(2, <A>(self: ReadonlyArray<A>, index: number): Option.Option<A> => {\n  const i = Math.floor(index)\n  return isOutOfBounds(i, self) ? Option.none() : Option.some(self[i])\n})\n\n/**\n * Gets an element unsafely, will throw on out of bounds.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  /**\n   * Gets an element unsafely, will throw on out of bounds.\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  (index: number): <A>(self: ReadonlyArray<A>) => A\n  /**\n   * Gets an element unsafely, will throw on out of bounds.\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  <A>(self: ReadonlyArray<A>, index: number): A\n} = dual(2, <A>(self: ReadonlyArray<A>, index: number): A => {\n  const i = Math.floor(index)\n  if (isOutOfBounds(i, self)) {\n    throw new Error(`Index ${i} out of bounds`)\n  }\n  return self[i]\n})\n\n/**\n * Return a tuple containing the first element, and a new `Array` of the remaining elements, if any.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\";\n *\n * const result = Array.unprepend([1, 2, 3, 4])\n * console.log(result) // [1, [2, 3, 4]]\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const unprepend = <A>(\n  self: NonEmptyReadonlyArray<A>\n): [firstElement: A, remainingElements: Array<A>] => [headNonEmpty(self), tailNonEmpty(self)]\n\n/**\n * Return a tuple containing a copy of the `NonEmptyReadonlyArray` without its last element, and that last element.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\";\n *\n * const result = Array.unappend([1, 2, 3, 4])\n * console.log(result) // [[1, 2, 3], 4]\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const unappend = <A>(\n  self: NonEmptyReadonlyArray<A>\n): [arrayWithoutLastElement: Array<A>, lastElement: A] => [initNonEmpty(self), lastNonEmpty(self)]\n\n/**\n * Get the first element of a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const head: <A>(self: ReadonlyArray<A>) => Option.Option<A> = get(0)\n\n/**\n * Get the first element of a non empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.headNonEmpty([1, 2, 3, 4])\n * console.log(result) // 1\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const headNonEmpty: <A>(self: NonEmptyReadonlyArray<A>) => A = unsafeGet(0)\n\n/**\n * Get the last element in a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const last = <A>(self: ReadonlyArray<A>): Option.Option<A> =>\n  isNonEmptyReadonlyArray(self) ? Option.some(lastNonEmpty(self)) : Option.none()\n\n/**\n * Get the last element of a non empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.lastNonEmpty([1, 2, 3, 4])\n * console.log(result) // 4\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const lastNonEmpty = <A>(self: NonEmptyReadonlyArray<A>): A => self[self.length - 1]\n\n/**\n * Get all but the first element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const tail = <A>(self: Iterable<A>): Option.Option<Array<A>> => {\n  const input = fromIterable(self)\n  return isNonEmptyReadonlyArray(input) ? Option.some(tailNonEmpty(input)) : Option.none()\n}\n\n/**\n * Get all but the first element of a `NonEmptyReadonlyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.tailNonEmpty([1, 2, 3, 4])\n * console.log(result) // [2, 3, 4]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const tailNonEmpty = <A>(self: NonEmptyReadonlyArray<A>): Array<A> => self.slice(1)\n\n/**\n * Get all but the last element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const init = <A>(self: Iterable<A>): Option.Option<Array<A>> => {\n  const input = fromIterable(self)\n  return isNonEmptyReadonlyArray(input) ? Option.some(initNonEmpty(input)) : Option.none()\n}\n\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.initNonEmpty([1, 2, 3, 4])\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const initNonEmpty = <A>(self: NonEmptyReadonlyArray<A>): Array<A> => self.slice(0, -1)\n\n/**\n * Keep only a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.take([1, 2, 3, 4, 5], 3)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const take: {\n  /**\n   * Keep only a max number of elements from the start of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.take([1, 2, 3, 4, 5], 3)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  /**\n   * Keep only a max number of elements from the start of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.take([1, 2, 3, 4, 5], 3)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  return input.slice(0, clamp(n, input))\n})\n\n/**\n * Keep only a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.takeRight([1, 2, 3, 4, 5], 3)\n * console.log(result) // [3, 4, 5]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const takeRight: {\n  /**\n   * Keep only a max number of elements from the end of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.takeRight([1, 2, 3, 4, 5], 3)\n   * console.log(result) // [3, 4, 5]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  /**\n   * Keep only a max number of elements from the end of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.takeRight([1, 2, 3, 4, 5], 3)\n   * console.log(result) // [3, 4, 5]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  const i = clamp(n, input)\n  return i === 0 ? [] : input.slice(-i)\n})\n\n/**\n * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.takeWhile([1, 3, 2, 4, 1, 2], x => x < 4)\n * console.log(result) // [1, 3, 2]\n *\n * // Explanation:\n * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n * // - The next element (`3`) is also less than `4`, so it adds `3`.\n * // - The next element (`2`) is again less than `4`, so it adds `2`.\n * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const takeWhile: {\n  /**\n   * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.takeWhile([1, 3, 2, 4, 1, 2], x => x < 4)\n   * console.log(result) // [1, 3, 2]\n   *\n   * // Explanation:\n   * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n   * // - The next element (`3`) is also less than `4`, so it adds `3`.\n   * // - The next element (`2`) is again less than `4`, so it adds `2`.\n   * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Array<B>\n  /**\n   * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.takeWhile([1, 3, 2, 4, 1, 2], x => x < 4)\n   * console.log(result) // [1, 3, 2]\n   *\n   * // Explanation:\n   * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n   * // - The next element (`3`) is also less than `4`, so it adds `3`.\n   * // - The next element (`2`) is again less than `4`, so it adds `2`.\n   * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Array<A>\n  /**\n   * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.takeWhile([1, 3, 2, 4, 1, 2], x => x < 4)\n   * console.log(result) // [1, 3, 2]\n   *\n   * // Explanation:\n   * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n   * // - The next element (`3`) is also less than `4`, so it adds `3`.\n   * // - The next element (`2`) is again less than `4`, so it adds `2`.\n   * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Array<B>\n  /**\n   * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.takeWhile([1, 3, 2, 4, 1, 2], x => x < 4)\n   * console.log(result) // [1, 3, 2]\n   *\n   * // Explanation:\n   * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n   * // - The next element (`3`) is also less than `4`, so it adds `3`.\n   * // - The next element (`2`) is again less than `4`, so it adds `2`.\n   * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A> => {\n  let i = 0\n  const out: Array<A> = []\n  for (const a of self) {\n    if (!predicate(a, i)) {\n      break\n    }\n    out.push(a)\n    i++\n  }\n  return out\n})\n\nconst spanIndex = <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): number => {\n  let i = 0\n  for (const a of self) {\n    if (!predicate(a, i)) {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/**\n * Split an `Iterable` into two parts:\n *\n * 1. the longest initial subarray for which all elements satisfy the specified predicate\n * 2. the remaining elements\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const span: {\n  /**\n   * Split an `Iterable` into two parts:\n   *\n   * 1. the longest initial subarray for which all elements satisfy the specified predicate\n   * 2. the remaining elements\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => [init: Array<B>, rest: Array<Exclude<A, B>>]\n  /**\n   * Split an `Iterable` into two parts:\n   *\n   * 1. the longest initial subarray for which all elements satisfy the specified predicate\n   * 2. the remaining elements\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => [init: Array<A>, rest: Array<A>]\n  /**\n   * Split an `Iterable` into two parts:\n   *\n   * 1. the longest initial subarray for which all elements satisfy the specified predicate\n   * 2. the remaining elements\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): [init: Array<B>, rest: Array<Exclude<A, B>>]\n  /**\n   * Split an `Iterable` into two parts:\n   *\n   * 1. the longest initial subarray for which all elements satisfy the specified predicate\n   * 2. the remaining elements\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [init: Array<A>, rest: Array<A>]\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [init: Array<A>, rest: Array<A>] =>\n    splitAt(self, spanIndex(self, predicate))\n)\n\n/**\n * Drop a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.drop([1, 2, 3, 4, 5], 2)\n * console.log(result) // [3, 4, 5]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const drop: {\n  /**\n   * Drop a max number of elements from the start of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.drop([1, 2, 3, 4, 5], 2)\n   * console.log(result) // [3, 4, 5]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  /**\n   * Drop a max number of elements from the start of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.drop([1, 2, 3, 4, 5], 2)\n   * console.log(result) // [3, 4, 5]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  return input.slice(clamp(n, input), input.length)\n})\n\n/**\n * Drop a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.dropRight([1, 2, 3, 4, 5], 2)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const dropRight: {\n  /**\n   * Drop a max number of elements from the end of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dropRight([1, 2, 3, 4, 5], 2)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  /**\n   * Drop a max number of elements from the end of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dropRight([1, 2, 3, 4, 5], 2)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  return input.slice(0, input.length - clamp(n, input))\n})\n\n/**\n * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.dropWhile([1, 2, 3, 4, 5], x => x < 4)\n * console.log(result) // [4, 5]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const dropWhile: {\n  /**\n   * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dropWhile([1, 2, 3, 4, 5], x => x < 4)\n   * console.log(result) // [4, 5]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Array<A>\n  /**\n   * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dropWhile([1, 2, 3, 4, 5], x => x < 4)\n   * console.log(result) // [4, 5]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A> =>\n    fromIterable(self).slice(spanIndex(self, predicate))\n)\n\n/**\n * Return the first index for which a predicate holds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.findFirstIndex([5, 3, 8, 9], x => x > 5)\n * console.log(result) // Option.some(2)\n * ```\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirstIndex: {\n  /**\n   * Return the first index for which a predicate holds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstIndex([5, 3, 8, 9], x => x > 5)\n   * console.log(result) // Option.some(2)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option.Option<number>\n  /**\n   * Return the first index for which a predicate holds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstIndex([5, 3, 8, 9], x => x > 5)\n   * console.log(result) // Option.some(2)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option.Option<number>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option.Option<number> => {\n  let i = 0\n  for (const a of self) {\n    if (predicate(a, i)) {\n      return Option.some(i)\n    }\n    i++\n  }\n  return Option.none()\n})\n\n/**\n * Return the last index for which a predicate holds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.findLastIndex([1, 3, 8, 9], x => x < 5)\n * console.log(result) // Option.some(1)\n * ```\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLastIndex: {\n  /**\n   * Return the last index for which a predicate holds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLastIndex([1, 3, 8, 9], x => x < 5)\n   * console.log(result) // Option.some(1)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option.Option<number>\n  /**\n   * Return the last index for which a predicate holds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLastIndex([1, 3, 8, 9], x => x < 5)\n   * console.log(result) // Option.some(1)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option.Option<number>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option.Option<number> => {\n  const input = fromIterable(self)\n  for (let i = input.length - 1; i >= 0; i--) {\n    if (predicate(input[i], i)) {\n      return Option.some(i)\n    }\n  }\n  return Option.none()\n})\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.findFirst([1, 2, 3, 4, 5], x => x > 3)\n * console.log(result) // Option.some(4)\n * ```\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirst([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option.Option<B>): (self: Iterable<A>) => Option.Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirst([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option.Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirst([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option.Option<A>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirst([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option.Option<B>): Option.Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirst([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option.Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirst([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option.Option<A>\n} = moduleIterable.findFirst\n\n/**\n * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.findLast([1, 2, 3, 4, 5], n => n % 2 === 0)\n * console.log(result) // Option.some(4)\n * ```\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLast: {\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLast([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option.Option<B>): (self: Iterable<A>) => Option.Option<B>\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLast([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option.Option<B>\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLast([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option.Option<A>\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLast([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option.Option<B>): Option.Option<B>\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLast([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option.Option<B>\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLast([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option.Option<A>\n} = dual(\n  2,\n  <A>(\n    self: Iterable<A>,\n    f: ((a: A, i: number) => boolean) | ((a: A, i: number) => Option.Option<A>)\n  ): Option.Option<A> => {\n    const input = fromIterable(self)\n    for (let i = input.length - 1; i >= 0; i--) {\n      const a = input[i]\n      const o = f(a, i)\n      if (Predicate.isBoolean(o)) {\n        if (o) {\n          return Option.some(a)\n        }\n      } else {\n        if (Option.isSome(o)) {\n          return o\n        }\n      }\n    }\n    return Option.none()\n  }\n)\n\n/**\n * Returns a tuple of the first element that satisfies the specified\n * predicate and its index, or `None` if no such element exists.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.findFirstWithIndex([1, 2, 3, 4, 5], x => x > 3)\n * console.log(result) // Option.some([4, 3])\n * ```\n *\n * @category elements\n * @since 3.17.0\n */\nexport const findFirstWithIndex: {\n  /**\n   * Returns a tuple of the first element that satisfies the specified\n   * predicate and its index, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstWithIndex([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some([4, 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.17.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option.Option<B>): (self: Iterable<A>) => Option.Option<[B, number]>\n  /**\n   * Returns a tuple of the first element that satisfies the specified\n   * predicate and its index, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstWithIndex([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some([4, 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.17.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option.Option<[B, number]>\n  /**\n   * Returns a tuple of the first element that satisfies the specified\n   * predicate and its index, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstWithIndex([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some([4, 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.17.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option.Option<[A, number]>\n  /**\n   * Returns a tuple of the first element that satisfies the specified\n   * predicate and its index, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstWithIndex([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some([4, 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.17.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option.Option<B>): Option.Option<[B, number]>\n  /**\n   * Returns a tuple of the first element that satisfies the specified\n   * predicate and its index, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstWithIndex([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some([4, 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.17.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option.Option<[B, number]>\n  /**\n   * Returns a tuple of the first element that satisfies the specified\n   * predicate and its index, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstWithIndex([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some([4, 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.17.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option.Option<[A, number]>\n} = dual(\n  2,\n  <A>(\n    self: Iterable<A>,\n    f: ((a: A, i: number) => boolean) | ((a: A, i: number) => Option.Option<A>)\n  ): Option.Option<[A, number]> => {\n    let i = 0\n    for (const a of self) {\n      const o = f(a, i)\n      if (Predicate.isBoolean(o)) {\n        if (o) {\n          return Option.some([a, i])\n        }\n      } else {\n        if (Option.isSome(o)) {\n          return Option.some([o.value, i])\n        }\n      }\n      i++\n    }\n    return Option.none()\n  }\n)\n\n/**\n * Counts all the element of the given array that pass the given predicate\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.countBy([1, 2, 3, 4, 5], n => n % 2 === 0)\n * console.log(result) // 2\n * ```\n *\n * @category folding\n * @since 3.16.0\n */\nexport const countBy: {\n  /**\n   * Counts all the element of the given array that pass the given predicate\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.countBy([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // 2\n   * ```\n   *\n   * @category folding\n   * @since 3.16.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => number\n  /**\n   * Counts all the element of the given array that pass the given predicate\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.countBy([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // 2\n   * ```\n   *\n   * @category folding\n   * @since 3.16.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): number\n} = dual(\n  2,\n  <A>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => boolean\n  ): number => {\n    let count = 0\n    const as = fromIterable(self)\n    for (let i = 0; i < as.length; i++) {\n      const a = as[i]\n      if (f(a, i)) {\n        count++\n      }\n    }\n    return count\n  }\n)\n\n/**\n * Insert an element at the specified index, creating a new `NonEmptyArray`,\n * or return `None` if the index is out of bounds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.insertAt(['a', 'b', 'c', 'e'], 3, 'd')\n * console.log(result) // Option.some(['a', 'b', 'c', 'd', 'e'])\n * ```\n *\n * @since 2.0.0\n */\nexport const insertAt: {\n  /**\n   * Insert an element at the specified index, creating a new `NonEmptyArray`,\n   * or return `None` if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.insertAt(['a', 'b', 'c', 'e'], 3, 'd')\n   * console.log(result) // Option.some(['a', 'b', 'c', 'd', 'e'])\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B>(i: number, b: B): <A>(self: Iterable<A>) => Option.Option<NonEmptyArray<A | B>>\n  /**\n   * Insert an element at the specified index, creating a new `NonEmptyArray`,\n   * or return `None` if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.insertAt(['a', 'b', 'c', 'e'], 3, 'd')\n   * console.log(result) // Option.some(['a', 'b', 'c', 'd', 'e'])\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, i: number, b: B): Option.Option<NonEmptyArray<A | B>>\n} = dual(3, <A, B>(self: Iterable<A>, i: number, b: B): Option.Option<NonEmptyArray<A | B>> => {\n  const out: Array<A | B> = Array.from(self)\n  //             v--- `= self.length` is ok, it means inserting in last position\n  if (i < 0 || i > out.length) {\n    return Option.none()\n  }\n  out.splice(i, 0, b)\n  return Option.some(out) as any\n})\n\n/**\n * Change the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.replace(['a', 'b', 'c', 'd'], 1, 'z')\n * console.log(result) // ['a', 'z', 'c', 'd']\n * ```\n *\n * @since 2.0.0\n */\nexport const replace: {\n  /**\n   * Change the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.replace(['a', 'b', 'c', 'd'], 1, 'z')\n   * console.log(result) // ['a', 'z', 'c', 'd']\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B>(i: number, b: B): <A, S extends Iterable<A> = Iterable<A>>(\n    self: S\n  ) => ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n  /**\n   * Change the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.replace(['a', 'b', 'c', 'd'], 1, 'z')\n   * console.log(result) // ['a', 'z', 'c', 'd']\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(self: S, i: number, b: B): ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n} = dual(3, <A, B>(self: Iterable<A>, i: number, b: B): Array<A | B> => modify(self, i, () => b))\n\n/**\n * Replaces an element in an array with the given value, returning an option of the updated array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.replaceOption([1, 2, 3], 1, 4)\n * console.log(result) // Option.some([1, 4, 3])\n * ```\n *\n * @since 2.0.0\n */\nexport const replaceOption: {\n  /**\n   * Replaces an element in an array with the given value, returning an option of the updated array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.replaceOption([1, 2, 3], 1, 4)\n   * console.log(result) // Option.some([1, 4, 3])\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B>(i: number, b: B): <A, S extends Iterable<A> = Iterable<A>>(\n    self: S\n  ) => Option.Option<ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>>\n  /**\n   * Replaces an element in an array with the given value, returning an option of the updated array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.replaceOption([1, 2, 3], 1, 4)\n   * console.log(result) // Option.some([1, 4, 3])\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(self: S, i: number, b: B): Option.Option<ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>>\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, i: number, b: B): Option.Option<Array<A | B>> => modifyOption(self, i, () => b)\n)\n\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.modify([1, 2, 3, 4], 2, (n) => n * 2)\n * console.log(result) // [1, 2, 6, 4]\n * ```\n *\n * @since 2.0.0\n */\nexport const modify: {\n  /**\n   * Apply a function to the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modify([1, 2, 3, 4], 2, (n) => n * 2)\n   * console.log(result) // [1, 2, 6, 4]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(i: number, f: (a: ReadonlyArray.Infer<S>) => B): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n  /**\n   * Apply a function to the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modify([1, 2, 3, 4], 2, (n) => n * 2)\n   * console.log(result) // [1, 2, 6, 4]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(self: S, i: number, f: (a: ReadonlyArray.Infer<S>) => B): ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, i: number, f: (a: A) => B): Array<A | B> => {\n    const out: Array<A | B> = Array.from(self)\n    if (isOutOfBounds(i, out)) {\n      return out\n    }\n    const b = f(out[i] as A)\n    out[i] = b\n    return out\n  }\n)\n\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return `None` if the index is out of bounds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const input = [1, 2, 3, 4]\n * const result = Array.modifyOption(input, 2, (n) => n * 2)\n * console.log(result) // Option.some([1, 2, 6, 4])\n *\n * const outOfBoundsResult = Array.modifyOption(input, 5, (n) => n * 2)\n * console.log(outOfBoundsResult) // Option.none()\n * ```\n *\n * @since 2.0.0\n */\nexport const modifyOption: {\n  /**\n   * Apply a function to the element at the specified index, creating a new `Array`,\n   * or return `None` if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const input = [1, 2, 3, 4]\n   * const result = Array.modifyOption(input, 2, (n) => n * 2)\n   * console.log(result) // Option.some([1, 2, 6, 4])\n   *\n   * const outOfBoundsResult = Array.modifyOption(input, 5, (n) => n * 2)\n   * console.log(outOfBoundsResult) // Option.none()\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(i: number, f: (a: ReadonlyArray.Infer<S>) => B): (self: S) => Option.Option<ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>>\n  /**\n   * Apply a function to the element at the specified index, creating a new `Array`,\n   * or return `None` if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const input = [1, 2, 3, 4]\n   * const result = Array.modifyOption(input, 2, (n) => n * 2)\n   * console.log(result) // Option.some([1, 2, 6, 4])\n   *\n   * const outOfBoundsResult = Array.modifyOption(input, 5, (n) => n * 2)\n   * console.log(outOfBoundsResult) // Option.none()\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(self: S, i: number, f: (a: ReadonlyArray.Infer<S>) => B): Option.Option<ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>>\n} = dual(3, <A, B>(self: Iterable<A>, i: number, f: (a: A) => B): Option.Option<Array<A | B>> => {\n  const arr = fromIterable(self)\n  if (isOutOfBounds(i, arr)) {\n    return Option.none()\n  }\n  const out: Array<A | B> = Array.isArray(self) ? self.slice() : arr\n  const b = f(arr[i])\n  out[i] = b\n  return Option.some(out)\n})\n\n/**\n * Delete the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const input = [1, 2, 3, 4]\n * const result = Array.remove(input, 2)\n * console.log(result) // [1, 2, 4]\n *\n * const outOfBoundsResult = Array.remove(input, 5)\n * console.log(outOfBoundsResult) // [1, 2, 3, 4]\n * ```\n *\n * @since 2.0.0\n */\nexport const remove: {\n  /**\n   * Delete the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const input = [1, 2, 3, 4]\n   * const result = Array.remove(input, 2)\n   * console.log(result) // [1, 2, 4]\n   *\n   * const outOfBoundsResult = Array.remove(input, 5)\n   * console.log(outOfBoundsResult) // [1, 2, 3, 4]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (i: number): <A>(self: Iterable<A>) => Array<A>\n  /**\n   * Delete the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const input = [1, 2, 3, 4]\n   * const result = Array.remove(input, 2)\n   * console.log(result) // [1, 2, 4]\n   *\n   * const outOfBoundsResult = Array.remove(input, 5)\n   * console.log(outOfBoundsResult) // [1, 2, 3, 4]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, i: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, i: number): Array<A> => {\n  const out = Array.from(self)\n  if (isOutOfBounds(i, out)) {\n    return out\n  }\n  out.splice(i, 1)\n  return out\n})\n\n/**\n * Delete the element at the specified index, creating a new `Array`,\n * or return `None` if the index is out of bounds.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.removeOption(numbers, 2)\n * assert.deepStrictEqual(result, Option.some([1, 2, 4]))\n *\n * const outOfBoundsResult = Array.removeOption(numbers, 5)\n * assert.deepStrictEqual(outOfBoundsResult, Option.none())\n * ```\n *\n * @since 3.16.0\n */\nexport const removeOption: {\n  /**\n   * Delete the element at the specified index, creating a new `Array`,\n   * or return `None` if the index is out of bounds.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const result = Array.removeOption(numbers, 2)\n   * assert.deepStrictEqual(result, Option.some([1, 2, 4]))\n   *\n   * const outOfBoundsResult = Array.removeOption(numbers, 5)\n   * assert.deepStrictEqual(outOfBoundsResult, Option.none())\n   * ```\n   *\n   * @since 3.16.0\n   */\n  (i: number): <A>(self: Iterable<A>) => Option.Option<Array<A>>\n  /**\n   * Delete the element at the specified index, creating a new `Array`,\n   * or return `None` if the index is out of bounds.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const result = Array.removeOption(numbers, 2)\n   * assert.deepStrictEqual(result, Option.some([1, 2, 4]))\n   *\n   * const outOfBoundsResult = Array.removeOption(numbers, 5)\n   * assert.deepStrictEqual(outOfBoundsResult, Option.none())\n   * ```\n   *\n   * @since 3.16.0\n   */\n  <A>(self: Iterable<A>, i: number): Option.Option<Array<A>>\n} = dual(2, <A>(self: Iterable<A>, i: number): Option.Option<Array<A>> => {\n  const arr = fromIterable(self)\n  if (isOutOfBounds(i, arr)) {\n    return Option.none()\n  }\n  const out = Array.isArray(self) ? self.slice() : arr\n  out.splice(i, 1)\n  return Option.some(out)\n})\n\n/**\n * Reverse an `Iterable`, creating a new `Array`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.reverse([1, 2, 3, 4])\n * console.log(result) // [4, 3, 2, 1]\n * ```\n *\n * @category elements\n * @since 2.0.0\n */\nexport const reverse = <S extends Iterable<any>>(\n  self: S\n): S extends NonEmptyReadonlyArray<infer A> ? NonEmptyArray<A> : S extends Iterable<infer A> ? Array<A> : never =>\n  Array.from(self).reverse() as any\n\n/**\n * Create a new array with elements sorted in increasing order based on the specified comparator.\n * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const sort: {\n  /**\n   * Create a new array with elements sorted in increasing order based on the specified comparator.\n   * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n   *\n   * @category sorting\n   * @since 2.0.0\n   */\n  <B>(O: Order.Order<B>): <A extends B, S extends Iterable<A>>(self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  /**\n   * Create a new array with elements sorted in increasing order based on the specified comparator.\n   * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n   *\n   * @category sorting\n   * @since 2.0.0\n   */\n  <A extends B, B>(self: NonEmptyReadonlyArray<A>, O: Order.Order<B>): NonEmptyArray<A>\n  /**\n   * Create a new array with elements sorted in increasing order based on the specified comparator.\n   * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n   *\n   * @category sorting\n   * @since 2.0.0\n   */\n  <A extends B, B>(self: Iterable<A>, O: Order.Order<B>): Array<A>\n} = dual(2, <A extends B, B>(self: Iterable<A>, O: Order.Order<B>): Array<A> => {\n  const out = Array.from(self)\n  out.sort(O)\n  return out\n})\n\n/**\n * Sorts an array based on a provided mapping function and order. The mapping\n * function transforms the elements into a value that can be compared, and the\n * order defines how those values should be sorted.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Order } from \"effect\"\n *\n * const result = Array.sortWith([\"aaa\", \"b\", \"cc\"], (s) => s.length, Order.number)\n * console.log(result) // [\"b\", \"cc\", \"aaa\"]\n *\n * // Explanation:\n * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n * // converts each string into its length, and the `Order.number` specifies that the lengths should\n * // be sorted in ascending order.\n * ```\n *\n * @since 2.0.0\n * @category elements\n */\nexport const sortWith: {\n  /**\n   * Sorts an array based on a provided mapping function and order. The mapping\n   * function transforms the elements into a value that can be compared, and the\n   * order defines how those values should be sorted.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Order } from \"effect\"\n   *\n   * const result = Array.sortWith([\"aaa\", \"b\", \"cc\"], (s) => s.length, Order.number)\n   * console.log(result) // [\"b\", \"cc\", \"aaa\"]\n   *\n   * // Explanation:\n   * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n   * // converts each string into its length, and the `Order.number` specifies that the lengths should\n   * // be sorted in ascending order.\n   * ```\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <S extends Iterable<any>, B>(f: (a: ReadonlyArray.Infer<S>) => B, order: Order.Order<B>): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  /**\n   * Sorts an array based on a provided mapping function and order. The mapping\n   * function transforms the elements into a value that can be compared, and the\n   * order defines how those values should be sorted.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Order } from \"effect\"\n   *\n   * const result = Array.sortWith([\"aaa\", \"b\", \"cc\"], (s) => s.length, Order.number)\n   * console.log(result) // [\"b\", \"cc\", \"aaa\"]\n   *\n   * // Explanation:\n   * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n   * // converts each string into its length, and the `Order.number` specifies that the lengths should\n   * // be sorted in ascending order.\n   * ```\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B, O: Order.Order<B>): NonEmptyArray<A>\n  /**\n   * Sorts an array based on a provided mapping function and order. The mapping\n   * function transforms the elements into a value that can be compared, and the\n   * order defines how those values should be sorted.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Order } from \"effect\"\n   *\n   * const result = Array.sortWith([\"aaa\", \"b\", \"cc\"], (s) => s.length, Order.number)\n   * console.log(result) // [\"b\", \"cc\", \"aaa\"]\n   *\n   * // Explanation:\n   * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n   * // converts each string into its length, and the `Order.number` specifies that the lengths should\n   * // be sorted in ascending order.\n   * ```\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B>(self: Iterable<A>, f: (a: A) => B, order: Order.Order<B>): Array<A>\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, f: (a: A) => B, order: Order.Order<B>): Array<A> =>\n    Array.from(self).map((a) => [a, f(a)] as const).sort(([, a], [, b]) => order(a, b)).map(([_]) => _)\n)\n\n/**\n * Sorts the elements of an `Iterable` in increasing order based on the provided\n * orders. The elements are compared using the first order in `orders`, then the\n * second order if the first comparison is equal, and so on.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Order, pipe } from \"effect\"\n *\n * const users = [\n *   { name: \"Alice\", age: 30 },\n *   { name: \"Bob\", age: 25 },\n *   { name: \"Charlie\", age: 30 }\n * ]\n *\n * const result = pipe(\n *   users,\n *   Array.sortBy(\n *     Order.mapInput(Order.number, (user: (typeof users)[number]) => user.age),\n *     Order.mapInput(Order.string, (user: (typeof users)[number]) => user.name)\n *   )\n * )\n *\n * console.log(result)\n * // [\n * //   { name: \"Bob\", age: 25 },\n * //   { name: \"Alice\", age: 30 },\n * //   { name: \"Charlie\", age: 30 }\n * // ]\n *\n * // Explanation:\n * // The array of users is sorted first by age in ascending order. When ages are equal,\n * // the users are further sorted by name in ascending order.\n * ```\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const sortBy = <S extends Iterable<any>>(\n  ...orders: ReadonlyArray<Order.Order<ReadonlyArray.Infer<S>>>\n) => {\n  const sortByAll = sort(Order.combineAll(orders))\n  return (\n    self: S\n  ): S extends NonEmptyReadonlyArray<infer A> ? NonEmptyArray<A> : S extends Iterable<infer A> ? Array<A> : never => {\n    const input = fromIterable(self)\n    if (isNonEmptyReadonlyArray(input)) {\n      return sortByAll(input) as any\n    }\n    return [] as any\n  }\n}\n\n/**\n * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n * If one input `Iterable` is short, excess elements of the\n * longer `Iterable` are discarded.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.zip([1, 2, 3], ['a', 'b'])\n * console.log(result) // [[1, 'a'], [2, 'b']]\n * ```\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zip: {\n  /**\n   * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n   * If one input `Iterable` is short, excess elements of the\n   * longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zip([1, 2, 3], ['a', 'b'])\n   * console.log(result) // [[1, 'a'], [2, 'b']]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B>(that: NonEmptyReadonlyArray<B>): <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<[A, B]>\n  /**\n   * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n   * If one input `Iterable` is short, excess elements of the\n   * longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zip([1, 2, 3], ['a', 'b'])\n   * console.log(result) // [[1, 'a'], [2, 'b']]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Array<[A, B]>\n  /**\n   * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n   * If one input `Iterable` is short, excess elements of the\n   * longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zip([1, 2, 3], ['a', 'b'])\n   * console.log(result) // [[1, 'a'], [2, 'b']]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<[A, B]>\n  /**\n   * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n   * If one input `Iterable` is short, excess elements of the\n   * longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zip([1, 2, 3], ['a', 'b'])\n   * console.log(result) // [[1, 'a'], [2, 'b']]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<[A, B]> => zipWith(self, that, Tuple.make)\n)\n\n/**\n * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.zipWith([1, 2, 3], [4, 5, 6], (a, b) => a + b)\n * console.log(result) // [5, 7, 9]\n * ```\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zipWith([1, 2, 3], [4, 5, 6], (a, b) => a + b)\n   * console.log(result) // [5, 7, 9]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B, A, C>(that: NonEmptyReadonlyArray<B>, f: (a: A, b: B) => C): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<C>\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zipWith([1, 2, 3], [4, 5, 6], (a, b) => a + b)\n   * console.log(result) // [5, 7, 9]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B, A, C>(that: Iterable<B>, f: (a: A, b: B) => C): (self: Iterable<A>) => Array<C>\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zipWith([1, 2, 3], [4, 5, 6], (a, b) => a + b)\n   * console.log(result) // [5, 7, 9]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, B, C>(\n    self: NonEmptyReadonlyArray<A>,\n    that: NonEmptyReadonlyArray<B>,\n    f: (a: A, b: B) => C\n  ): NonEmptyArray<C>\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zipWith([1, 2, 3], [4, 5, 6], (a, b) => a + b)\n   * console.log(result) // [5, 7, 9]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B, A, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Array<C>\n} = dual(3, <B, A, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Array<C> => {\n  const as = fromIterable(self)\n  const bs = fromIterable(that)\n  if (isNonEmptyReadonlyArray(as) && isNonEmptyReadonlyArray(bs)) {\n    const out: NonEmptyArray<C> = [f(headNonEmpty(as), headNonEmpty(bs))]\n    const len = Math.min(as.length, bs.length)\n    for (let i = 1; i < len; i++) {\n      out[i] = f(as[i], bs[i])\n    }\n    return out\n  }\n  return []\n})\n\n/**\n * This function is the inverse of `zip`. Takes an `Iterable` of pairs and return two corresponding `Array`s.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.unzip([[1, \"a\"], [2, \"b\"], [3, \"c\"]])\n * console.log(result) // [[1, 2, 3], ['a', 'b', 'c']]\n * ```\n *\n * @since 2.0.0\n */\nexport const unzip: <S extends Iterable<readonly [any, any]>>(\n  self: S\n) => S extends NonEmptyReadonlyArray<readonly [infer A, infer B]> ? [NonEmptyArray<A>, NonEmptyArray<B>]\n  : S extends Iterable<readonly [infer A, infer B]> ? [Array<A>, Array<B>]\n  : never = (<A, B>(self: Iterable<readonly [A, B]>): [Array<A>, Array<B>] => {\n    const input = fromIterable(self)\n    if (isNonEmptyReadonlyArray(input)) {\n      const fa: NonEmptyArray<A> = [input[0][0]]\n      const fb: NonEmptyArray<B> = [input[0][1]]\n      for (let i = 1; i < input.length; i++) {\n        fa[i] = input[i][0]\n        fb[i] = input[i][1]\n      }\n      return [fa, fb]\n    }\n    return [[], []]\n  }) as any\n\n/**\n * Places an element in between members of an `Iterable`.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.intersperse([1, 2, 3], 0)\n * console.log(result) // [1, 0, 2, 0, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const intersperse: {\n  /**\n   * Places an element in between members of an `Iterable`.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.intersperse([1, 2, 3], 0)\n   * console.log(result) // [1, 0, 2, 0, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B>(middle: B): <S extends Iterable<any>>(self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n  /**\n   * Places an element in between members of an `Iterable`.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.intersperse([1, 2, 3], 0)\n   * console.log(result) // [1, 0, 2, 0, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, middle: B): NonEmptyArray<A | B>\n  /**\n   * Places an element in between members of an `Iterable`.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.intersperse([1, 2, 3], 0)\n   * console.log(result) // [1, 0, 2, 0, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, middle: B): Array<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, middle: B): Array<A | B> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    const out: NonEmptyArray<A | B> = [headNonEmpty(input)]\n    const tail = tailNonEmpty(input)\n    for (let i = 0; i < tail.length; i++) {\n      if (i < tail.length) {\n        out.push(middle)\n      }\n      out.push(tail[i])\n    }\n    return out\n  }\n  return []\n})\n\n/**\n * Apply a function to the head, creating a new `NonEmptyReadonlyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyHead([1, 2, 3], n => n * 10)\n * console.log(result) // [10, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const modifyNonEmptyHead: {\n  /**\n   * Apply a function to the head, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modifyNonEmptyHead([1, 2, 3], n => n * 10)\n   * console.log(result) // [10, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  /**\n   * Apply a function to the head, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modifyNonEmptyHead([1, 2, 3], n => n * 10)\n   * console.log(result) // [10, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    f: (a: A) => B\n  ): NonEmptyArray<A | B> => [f(headNonEmpty(self)), ...tailNonEmpty(self)]\n)\n\n/**\n * Change the head, creating a new `NonEmptyReadonlyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyHead([1, 2, 3], 10)\n * console.log(result) // [10, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const setNonEmptyHead: {\n  /**\n   * Change the head, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.setNonEmptyHead([1, 2, 3], 10)\n   * console.log(result) // [10, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B>(b: B): <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  /**\n   * Change the head, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.setNonEmptyHead([1, 2, 3], 10)\n   * console.log(result) // [10, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B> => modifyNonEmptyHead(self, () => b)\n)\n\n/**\n * Apply a function to the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyLast([1, 2, 3], n => n * 2)\n * console.log(result) // [1, 2, 6]\n * ```\n *\n * @since 2.0.0\n */\nexport const modifyNonEmptyLast: {\n  /**\n   * Apply a function to the last element, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modifyNonEmptyLast([1, 2, 3], n => n * 2)\n   * console.log(result) // [1, 2, 6]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  /**\n   * Apply a function to the last element, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modifyNonEmptyLast([1, 2, 3], n => n * 2)\n   * console.log(result) // [1, 2, 6]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B): NonEmptyArray<A | B> =>\n    append(initNonEmpty(self), f(lastNonEmpty(self)))\n)\n\n/**\n * Change the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyLast([1, 2, 3], 4)\n * console.log(result) // [1, 2, 4]\n * ```\n *\n * @since 2.0.0\n */\nexport const setNonEmptyLast: {\n  /**\n   * Change the last element, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.setNonEmptyLast([1, 2, 3], 4)\n   * console.log(result) // [1, 2, 4]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B>(b: B): <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  /**\n   * Change the last element, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.setNonEmptyLast([1, 2, 3], 4)\n   * console.log(result) // [1, 2, 4]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B> => modifyNonEmptyLast(self, () => b)\n)\n\n/**\n * Rotate an `Iterable` by `n` steps.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.rotate(['a', 'b', 'c', 'd', 'e'], 2)\n * console.log(result) // [ 'd', 'e', 'a', 'b', 'c' ]\n * ```\n *\n * @since 2.0.0\n */\nexport const rotate: {\n  /**\n   * Rotate an `Iterable` by `n` steps.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.rotate(['a', 'b', 'c', 'd', 'e'], 2)\n   * console.log(result) // [ 'd', 'e', 'a', 'b', 'c' ]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (n: number): <S extends Iterable<any>>(self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  /**\n   * Rotate an `Iterable` by `n` steps.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.rotate(['a', 'b', 'c', 'd', 'e'], 2)\n   * console.log(result) // [ 'd', 'e', 'a', 'b', 'c' ]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>, n: number): NonEmptyArray<A>\n  /**\n   * Rotate an `Iterable` by `n` steps.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.rotate(['a', 'b', 'c', 'd', 'e'], 2)\n   * console.log(result) // [ 'd', 'e', 'a', 'b', 'c' ]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    const len = input.length\n    const m = Math.round(n) % len\n    if (isOutOfBounds(Math.abs(m), input) || m === 0) {\n      return copy(input)\n    }\n    if (m < 0) {\n      const [f, s] = splitNonEmptyAt(input, -m)\n      return appendAll(s, f)\n    } else {\n      return rotate(self, m - len)\n    }\n  }\n  return []\n})\n\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using a provided `isEquivalent` function.\n *\n * **Example**\n *\n * ```ts\n * import { Array, pipe } from \"effect\"\n *\n * const isEquivalent = (a: number, b: number) => a === b\n * const containsNumber = Array.containsWith(isEquivalent)\n * const result = pipe([1, 2, 3, 4], containsNumber(3))\n * console.log(result) // true\n * ```\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (a: A): (self: Iterable<A>) => boolean\n  (self: Iterable<A>, a: A): boolean\n} =>\n  dual(2, (self: Iterable<A>, a: A): boolean => {\n    for (const i of self) {\n      if (isEquivalent(a, i)) {\n        return true\n      }\n    }\n    return false\n  })\n\nconst _equivalence = Equal.equivalence()\n\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using the default `Equivalence`.\n *\n * **Example**\n *\n * ```ts\n * import { Array, pipe } from \"effect\"\n *\n * const result = pipe(['a', 'b', 'c', 'd'], Array.contains('c'))\n * console.log(result) // true\n * ```\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains: {\n  /**\n   * Returns a function that checks if a `ReadonlyArray` contains a given value using the default `Equivalence`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, pipe } from \"effect\"\n   *\n   * const result = pipe(['a', 'b', 'c', 'd'], Array.contains('c'))\n   * console.log(result) // true\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(a: A): (self: Iterable<A>) => boolean\n  /**\n   * Returns a function that checks if a `ReadonlyArray` contains a given value using the default `Equivalence`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, pipe } from \"effect\"\n   *\n   * const result = pipe(['a', 'b', 'c', 'd'], Array.contains('c'))\n   * console.log(result) // true\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, a: A): boolean\n} = containsWith(_equivalence)\n\n/**\n * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n * value and the rest of the `Array`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.chop([1, 2, 3, 4, 5], (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n * console.log(result) // [2, 4, 6, 8, 10]\n *\n * // Explanation:\n * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n * // resulting in a new array `[2, 4, 6, 8, 10]`.\n * ```\n *\n * @since 2.0.0\n */\nexport const chop: {\n  /**\n   * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n   * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n   * value and the rest of the `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.chop([1, 2, 3, 4, 5], (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n   * console.log(result) // [2, 4, 6, 8, 10]\n   *\n   * // Explanation:\n   * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n   * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n   * // resulting in a new array `[2, 4, 6, 8, 10]`.\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <S extends Iterable<any>, B>(\n    f: (as: NonEmptyReadonlyArray<ReadonlyArray.Infer<S>>) => readonly [B, ReadonlyArray<ReadonlyArray.Infer<S>>]\n  ): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  /**\n   * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n   * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n   * value and the rest of the `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.chop([1, 2, 3, 4, 5], (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n   * console.log(result) // [2, 4, 6, 8, 10]\n   *\n   * // Explanation:\n   * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n   * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n   * // resulting in a new array `[2, 4, 6, 8, 10]`.\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    f: (as: NonEmptyReadonlyArray<A>) => readonly [B, ReadonlyArray<A>]\n  ): NonEmptyArray<B>\n  /**\n   * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n   * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n   * value and the rest of the `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.chop([1, 2, 3, 4, 5], (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n   * console.log(result) // [2, 4, 6, 8, 10]\n   *\n   * // Explanation:\n   * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n   * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n   * // resulting in a new array `[2, 4, 6, 8, 10]`.\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: Iterable<A>,\n    f: (as: NonEmptyReadonlyArray<A>) => readonly [B, ReadonlyArray<A>]\n  ): Array<B>\n} = dual(2, <A, B>(\n  self: Iterable<A>,\n  f: (as: NonEmptyReadonlyArray<A>) => readonly [B, ReadonlyArray<A>]\n): Array<B> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    const [b, rest] = f(input)\n    const out: NonEmptyArray<B> = [b]\n    let next: ReadonlyArray<A> = rest\n    while (internalArray.isNonEmptyArray(next)) {\n      const [b, rest] = f(next)\n      out.push(b)\n      next = rest\n    }\n    return out\n  }\n  return []\n})\n\n/**\n * Splits an `Iterable` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` can be `0`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.splitAt([1, 2, 3, 4, 5], 3)\n * console.log(result) // [[1, 2, 3], [4, 5]]\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitAt: {\n  /**\n   * Splits an `Iterable` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` can be `0`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.splitAt([1, 2, 3, 4, 5], 3)\n   * console.log(result) // [[1, 2, 3], [4, 5]]\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => [beforeIndex: Array<A>, fromIndex: Array<A>]\n  /**\n   * Splits an `Iterable` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` can be `0`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.splitAt([1, 2, 3, 4, 5], 3)\n   * console.log(result) // [[1, 2, 3], [4, 5]]\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): [beforeIndex: Array<A>, fromIndex: Array<A>]\n} = dual(2, <A>(self: Iterable<A>, n: number): [Array<A>, Array<A>] => {\n  const input = Array.from(self)\n  const _n = Math.floor(n)\n  if (isNonEmptyReadonlyArray(input)) {\n    if (_n >= 1) {\n      return splitNonEmptyAt(input, _n)\n    }\n    return [[], input]\n  }\n  return [input, []]\n})\n\n/**\n * Splits a `NonEmptyReadonlyArray` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` must be `>= 1`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.splitNonEmptyAt([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n * console.log(result) // [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitNonEmptyAt: {\n  /**\n   * Splits a `NonEmptyReadonlyArray` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` must be `>= 1`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.splitNonEmptyAt([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n   * console.log(result) // [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: NonEmptyReadonlyArray<A>) => [beforeIndex: NonEmptyArray<A>, fromIndex: Array<A>]\n  /**\n   * Splits a `NonEmptyReadonlyArray` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` must be `>= 1`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.splitNonEmptyAt([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n   * console.log(result) // [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>, n: number): [beforeIndex: NonEmptyArray<A>, fromIndex: Array<A>]\n} = dual(2, <A>(self: NonEmptyReadonlyArray<A>, n: number): [NonEmptyArray<A>, Array<A>] => {\n  const _n = Math.max(1, Math.floor(n))\n  return _n >= self.length ?\n    [copy(self), []] :\n    [prepend(self.slice(1, _n), headNonEmpty(self)), self.slice(_n)]\n})\n\n/**\n * Splits this iterable into `n` equally sized arrays.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.split([1, 2, 3, 4, 5, 6, 7, 8], 3)\n * console.log(result) // [[1, 2, 3], [4, 5, 6], [7, 8]]\n * ```\n *\n * @since 2.0.0\n * @category splitting\n */\nexport const split: {\n  /**\n   * Splits this iterable into `n` equally sized arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.split([1, 2, 3, 4, 5, 6, 7, 8], 3)\n   * console.log(result) // [[1, 2, 3], [4, 5, 6], [7, 8]]\n   * ```\n   *\n   * @since 2.0.0\n   * @category splitting\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<Array<A>>\n  /**\n   * Splits this iterable into `n` equally sized arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.split([1, 2, 3, 4, 5, 6, 7, 8], 3)\n   * console.log(result) // [[1, 2, 3], [4, 5, 6], [7, 8]]\n   * ```\n   *\n   * @since 2.0.0\n   * @category splitting\n   */\n  <A>(self: Iterable<A>, n: number): Array<Array<A>>\n} = dual(2, <A>(self: Iterable<A>, n: number) => {\n  const input = fromIterable(self)\n  return chunksOf(input, Math.ceil(input.length / Math.floor(n)))\n})\n\n/**\n * Splits this iterable on the first element that matches this predicate.\n * Returns a tuple containing two arrays: the first one is before the match, and the second one is from the match onward.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.splitWhere([1, 2, 3, 4, 5], n => n > 3)\n * console.log(result) // [[1, 2, 3], [4, 5]]\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitWhere: {\n  /**\n   * Splits this iterable on the first element that matches this predicate.\n   * Returns a tuple containing two arrays: the first one is before the match, and the second one is from the match onward.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.splitWhere([1, 2, 3, 4, 5], n => n > 3)\n   * console.log(result) // [[1, 2, 3], [4, 5]]\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => [beforeMatch: Array<A>, fromMatch: Array<A>]\n  /**\n   * Splits this iterable on the first element that matches this predicate.\n   * Returns a tuple containing two arrays: the first one is before the match, and the second one is from the match onward.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.splitWhere([1, 2, 3, 4, 5], n => n > 3)\n   * console.log(result) // [[1, 2, 3], [4, 5]]\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [beforeMatch: Array<A>, fromMatch: Array<A>]\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [beforeMatch: Array<A>, fromMatch: Array<A>] =>\n    span(self, (a: A, i: number) => !predicate(a, i))\n)\n\n/**\n * Copies an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.copy([1, 2, 3])\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const copy: {\n  /**\n   * Copies an array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.copy([1, 2, 3])\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>): NonEmptyArray<A>\n  /**\n   * Copies an array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.copy([1, 2, 3])\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: ReadonlyArray<A>): Array<A>\n} = (<A>(self: ReadonlyArray<A>): Array<A> => self.slice()) as any\n\n/**\n * Pads an array.\n * Returns a new array of length `n` with the elements of `array` followed by `fill` elements if `array` is shorter than `n`.\n * If `array` is longer than `n`, the returned array will be a slice of `array` containing the `n` first elements of `array`.\n * If `n` is less than or equal to 0, the returned array will be an empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.pad([1, 2, 3], 6, 0)\n * console.log(result) // [1, 2, 3, 0, 0, 0]\n * ```\n *\n * @since 3.8.4\n */\nexport const pad: {\n  /**\n   * Pads an array.\n   * Returns a new array of length `n` with the elements of `array` followed by `fill` elements if `array` is shorter than `n`.\n   * If `array` is longer than `n`, the returned array will be a slice of `array` containing the `n` first elements of `array`.\n   * If `n` is less than or equal to 0, the returned array will be an empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.pad([1, 2, 3], 6, 0)\n   * console.log(result) // [1, 2, 3, 0, 0, 0]\n   * ```\n   *\n   * @since 3.8.4\n   */\n  <A, T>(n: number, fill: T): (\n    self: Array<A>\n  ) => Array<A | T>\n  /**\n   * Pads an array.\n   * Returns a new array of length `n` with the elements of `array` followed by `fill` elements if `array` is shorter than `n`.\n   * If `array` is longer than `n`, the returned array will be a slice of `array` containing the `n` first elements of `array`.\n   * If `n` is less than or equal to 0, the returned array will be an empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.pad([1, 2, 3], 6, 0)\n   * console.log(result) // [1, 2, 3, 0, 0, 0]\n   * ```\n   *\n   * @since 3.8.4\n   */\n  <A, T>(self: Array<A>, n: number, fill: T): Array<A | T>\n} = dual(3, <A, T>(self: Array<A>, n: number, fill: T): Array<A | T> => {\n  if (self.length >= n) {\n    return take(self, n)\n  }\n  return appendAll(\n    self,\n    makeBy(n - self.length, () => fill)\n  )\n})\n\n/**\n * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts skip-type-checking\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `self`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.chunksOf([1, 2, 3, 4, 5], 2)\n * console.log(result) // [[1, 2], [3, 4], [5]]\n *\n * // Explanation:\n * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n * // the last chunk contains the remaining elements.\n * // The result is `[[1, 2], [3, 4], [5]]`.\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const chunksOf: {\n  /**\n   * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n   * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n   * definition of `chunksOf`; it satisfies the property that\n   *\n   * ```ts skip-type-checking\n   * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n   * ```\n   *\n   * whenever `n` evenly divides the length of `self`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.chunksOf([1, 2, 3, 4, 5], 2)\n   * console.log(result) // [[1, 2], [3, 4], [5]]\n   *\n   * // Explanation:\n   * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n   * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n   * // the last chunk contains the remaining elements.\n   * // The result is `[[1, 2], [3, 4], [5]]`.\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  (n: number): <S extends Iterable<any>>(\n    self: S\n  ) => ReadonlyArray.With<S, NonEmptyArray<ReadonlyArray.Infer<S>>>\n  /**\n   * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n   * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n   * definition of `chunksOf`; it satisfies the property that\n   *\n   * ```ts skip-type-checking\n   * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n   * ```\n   *\n   * whenever `n` evenly divides the length of `self`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.chunksOf([1, 2, 3, 4, 5], 2)\n   * console.log(result) // [[1, 2], [3, 4], [5]]\n   *\n   * // Explanation:\n   * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n   * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n   * // the last chunk contains the remaining elements.\n   * // The result is `[[1, 2], [3, 4], [5]]`.\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>, n: number): NonEmptyArray<NonEmptyArray<A>>\n  /**\n   * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n   * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n   * definition of `chunksOf`; it satisfies the property that\n   *\n   * ```ts skip-type-checking\n   * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n   * ```\n   *\n   * whenever `n` evenly divides the length of `self`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.chunksOf([1, 2, 3, 4, 5], 2)\n   * console.log(result) // [[1, 2], [3, 4], [5]]\n   *\n   * // Explanation:\n   * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n   * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n   * // the last chunk contains the remaining elements.\n   * // The result is `[[1, 2], [3, 4], [5]]`.\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<NonEmptyArray<A>>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<NonEmptyArray<A>> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    return chop(input, splitNonEmptyAt(n))\n  }\n  return []\n})\n\n/**\n * Creates sliding windows of size `n` from an `Iterable`.\n * If the number of elements is less than `n` or if `n` is not greater than zero,\n * an empty array is returned.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * assert.deepStrictEqual(Array.window(numbers, 3), [[1, 2, 3], [2, 3, 4], [3, 4, 5]])\n * assert.deepStrictEqual(Array.window(numbers, 6), [])\n * ```\n *\n * @category splitting\n * @since 3.13.2\n */\nexport const window: {\n  /**\n   * Creates sliding windows of size `n` from an `Iterable`.\n   * If the number of elements is less than `n` or if `n` is not greater than zero,\n   * an empty array is returned.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * assert.deepStrictEqual(Array.window(numbers, 3), [[1, 2, 3], [2, 3, 4], [3, 4, 5]])\n   * assert.deepStrictEqual(Array.window(numbers, 6), [])\n   * ```\n   *\n   * @category splitting\n   * @since 3.13.2\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<Array<A>>\n  /**\n   * Creates sliding windows of size `n` from an `Iterable`.\n   * If the number of elements is less than `n` or if `n` is not greater than zero,\n   * an empty array is returned.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * assert.deepStrictEqual(Array.window(numbers, 3), [[1, 2, 3], [2, 3, 4], [3, 4, 5]])\n   * assert.deepStrictEqual(Array.window(numbers, 6), [])\n   * ```\n   *\n   * @category splitting\n   * @since 3.13.2\n   */\n  <A>(self: Iterable<A>, n: number): Array<Array<A>>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<Array<A>> => {\n  const input = fromIterable(self)\n  if (n > 0 && isNonEmptyReadonlyArray(input)) {\n    return Array.from(\n      { length: input.length - (n - 1) },\n      (_, index) => input.slice(index, index + n)\n    )\n  }\n  return []\n})\n\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s using the provided `isEquivalent` function.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.groupWith([\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"a\"], (x, y) => x === y)\n * console.log(result) // [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\"], [\"a\"]]\n * ```\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupWith: {\n  /**\n   * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s using the provided `isEquivalent` function.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.groupWith([\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"a\"], (x, y) => x === y)\n   * console.log(result) // [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\"], [\"a\"]]\n   * ```\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A>(isEquivalent: (self: A, that: A) => boolean): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<NonEmptyArray<A>>\n  /**\n   * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s using the provided `isEquivalent` function.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.groupWith([\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"a\"], (x, y) => x === y)\n   * console.log(result) // [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\"], [\"a\"]]\n   * ```\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A>(\n    self: NonEmptyReadonlyArray<A>,\n    isEquivalent: (self: A, that: A) => boolean\n  ): NonEmptyArray<NonEmptyArray<A>>\n} = dual(\n  2,\n  <A>(self: NonEmptyReadonlyArray<A>, isEquivalent: (self: A, that: A) => boolean): NonEmptyArray<NonEmptyArray<A>> =>\n    chop(self, (as) => {\n      const h = headNonEmpty(as)\n      const out: NonEmptyArray<A> = [h]\n      let i = 1\n      for (; i < as.length; i++) {\n        const a = as[i]\n        if (isEquivalent(a, h)) {\n          out.push(a)\n        } else {\n          break\n        }\n      }\n      return [out, as.slice(i)]\n    })\n)\n\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.group([1, 1, 2, 2, 2, 3, 1])\n * console.log(result) // [[1, 1], [2, 2, 2], [3], [1]]\n * ```\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const group: <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<NonEmptyArray<A>> = groupWith(\n  Equal.equivalence()\n)\n\n/**\n * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const people = [\n *   { name: \"Alice\", group: \"A\" },\n *   { name: \"Bob\", group: \"B\" },\n *   { name: \"Charlie\", group: \"A\" }\n * ]\n *\n * const result = Array.groupBy(people, person => person.group)\n * console.log(result)\n * // {\n * //  A: [{ name: \"Alice\", group: \"A\" }, { name: \"Charlie\", group: \"A\" }],\n * //  B: [{ name: \"Bob\", group: \"B\" }]\n * // }\n * ```\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupBy: {\n  /**\n   * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n   * function on each element, and grouping the results according to values returned\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const people = [\n   *   { name: \"Alice\", group: \"A\" },\n   *   { name: \"Bob\", group: \"B\" },\n   *   { name: \"Charlie\", group: \"A\" }\n   * ]\n   *\n   * const result = Array.groupBy(people, person => person.group)\n   * console.log(result)\n   * // {\n   * //  A: [{ name: \"Alice\", group: \"A\" }, { name: \"Charlie\", group: \"A\" }],\n   * //  B: [{ name: \"Bob\", group: \"B\" }]\n   * // }\n   * ```\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol>(f: (a: A) => K): (self: Iterable<A>) => Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>>\n  /**\n   * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n   * function on each element, and grouping the results according to values returned\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const people = [\n   *   { name: \"Alice\", group: \"A\" },\n   *   { name: \"Bob\", group: \"B\" },\n   *   { name: \"Charlie\", group: \"A\" }\n   * ]\n   *\n   * const result = Array.groupBy(people, person => person.group)\n   * console.log(result)\n   * // {\n   * //  A: [{ name: \"Alice\", group: \"A\" }, { name: \"Charlie\", group: \"A\" }],\n   * //  B: [{ name: \"Bob\", group: \"B\" }]\n   * // }\n   * ```\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol>(self: Iterable<A>, f: (a: A) => K): Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>>\n} = dual(2, <A, K extends string | symbol>(\n  self: Iterable<A>,\n  f: (a: A) => K\n): Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>> => {\n  const out: Record<string | symbol, NonEmptyArray<A>> = {}\n  for (const a of self) {\n    const k = f(a)\n    if (Object.prototype.hasOwnProperty.call(out, k)) {\n      out[k].push(a)\n    } else {\n      out[k] = [a]\n    }\n  }\n  return out\n})\n\n/**\n * Calculates the union of two arrays using the provided equivalence relation.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const union = Array.unionWith([1, 2], [2, 3], (a, b) => a === b)\n * console.log(union) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const unionWith: {\n  /**\n   * Calculates the union of two arrays using the provided equivalence relation.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const union = Array.unionWith([1, 2], [2, 3], (a, b) => a === b)\n   * console.log(union) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <S extends Iterable<any>, T extends Iterable<any>>(\n    that: T,\n    isEquivalent: (self: ReadonlyArray.Infer<S>, that: ReadonlyArray.Infer<T>) => boolean\n  ): (self: S) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  /**\n   * Calculates the union of two arrays using the provided equivalence relation.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const union = Array.unionWith([1, 2], [2, 3], (a, b) => a === b)\n   * console.log(union) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    that: Iterable<B>,\n    isEquivalent: (self: A, that: B) => boolean\n  ): NonEmptyArray<A | B>\n  /**\n   * Calculates the union of two arrays using the provided equivalence relation.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const union = Array.unionWith([1, 2], [2, 3], (a, b) => a === b)\n   * console.log(union) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: Iterable<A>,\n    that: NonEmptyReadonlyArray<B>,\n    isEquivalent: (self: A, that: B) => boolean\n  ): NonEmptyArray<A | B>\n  /**\n   * Calculates the union of two arrays using the provided equivalence relation.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const union = Array.unionWith([1, 2], [2, 3], (a, b) => a === b)\n   * console.log(union) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: Iterable<A>,\n    that: Iterable<B>,\n    isEquivalent: (self: A, that: B) => boolean\n  ): Array<A | B>\n} = dual(3, <A>(self: Iterable<A>, that: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A> => {\n  const a = fromIterable(self)\n  const b = fromIterable(that)\n  if (isNonEmptyReadonlyArray(a)) {\n    if (isNonEmptyReadonlyArray(b)) {\n      const dedupe = dedupeWith(isEquivalent)\n      return dedupe(appendAll(a, b))\n    }\n    return a\n  }\n  return b\n})\n\n/**\n * Creates a union of two arrays, removing duplicates.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.union([1, 2], [2, 3])\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const union: {\n  /**\n   * Creates a union of two arrays, removing duplicates.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.union([1, 2], [2, 3])\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <T extends Iterable<any>>(that: T): <S extends Iterable<any>>(\n    self: S\n  ) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  /**\n   * Creates a union of two arrays, removing duplicates.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.union([1, 2], [2, 3])\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: ReadonlyArray<B>): NonEmptyArray<A | B>\n  /**\n   * Creates a union of two arrays, removing duplicates.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.union([1, 2], [2, 3])\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: ReadonlyArray<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<A | B>\n  /**\n   * Creates a union of two arrays, removing duplicates.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.union([1, 2], [2, 3])\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B> => unionWith(self, that, _equivalence))\n\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const array1 = [{ id: 1 }, { id: 2 }, { id: 3 }]\n * const array2 = [{ id: 3 }, { id: 4 }, { id: 1 }]\n * const isEquivalent = (a: { id: number }, b: { id: number }) => a.id === b.id\n * const result = Array.intersectionWith(isEquivalent)(array2)(array1)\n * console.log(result) // [{ id: 1 }, { id: 3 }]\n * ```\n *\n * @since 2.0.0\n */\nexport const intersectionWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (that: Iterable<A>): (self: Iterable<A>) => Array<A>\n  (self: Iterable<A>, that: Iterable<A>): Array<A>\n} => {\n  const has = containsWith(isEquivalent)\n  return dual(\n    2,\n    (self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(self).filter((a) => has(that, a))\n  )\n}\n\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.intersection([1, 2, 3], [3, 4, 1])\n * console.log(result) // [1, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const intersection: {\n  /**\n   * Creates an `Array` of unique values that are included in all given `Iterable`s.\n   * The order and references of result values are determined by the first `Iterable`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.intersection([1, 2, 3], [3, 4, 1])\n   * console.log(result) // [1, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Array<A & B>\n  /**\n   * Creates an `Array` of unique values that are included in all given `Iterable`s.\n   * The order and references of result values are determined by the first `Iterable`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.intersection([1, 2, 3], [3, 4, 1])\n   * console.log(result) // [1, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A & B>\n} = intersectionWith(_equivalence)\n\n/**\n * Creates a `Array` of values not included in the other given `Iterable` using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [2, 3, 4]\n * const difference = Array.differenceWith<number>((a, b) => a === b)(array1, array2)\n * console.log(difference) // [1]\n * ```\n *\n * @since 2.0.0\n */\nexport const differenceWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (that: Iterable<A>): (self: Iterable<A>) => Array<A>\n  (self: Iterable<A>, that: Iterable<A>): Array<A>\n} => {\n  const has = containsWith(isEquivalent)\n  return dual(\n    2,\n    (self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(self).filter((a) => !has(that, a))\n  )\n}\n\n/**\n * Creates a `Array` of values not included in the other given `Iterable`.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const difference = Array.difference([1, 2, 3], [2, 3, 4])\n * console.log(difference) // [1]\n * ```\n *\n * @since 2.0.0\n */\nexport const difference: {\n  /**\n   * Creates a `Array` of values not included in the other given `Iterable`.\n   * The order and references of result values are determined by the first `Iterable`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const difference = Array.difference([1, 2, 3], [2, 3, 4])\n   * console.log(difference) // [1]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(that: Iterable<A>): (self: Iterable<A>) => Array<A>\n  /**\n   * Creates a `Array` of values not included in the other given `Iterable`.\n   * The order and references of result values are determined by the first `Iterable`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const difference = Array.difference([1, 2, 3], [2, 3, 4])\n   * console.log(difference) // [1]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, that: Iterable<A>): Array<A>\n} = differenceWith(_equivalence)\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const empty: <A = never>() => Array<A> = () => []\n\n/**\n * Constructs a new `NonEmptyArray<A>` from the specified value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const of = <A>(a: A): NonEmptyArray<A> => [a]\n\n/**\n * @since 2.0.0\n */\nexport declare namespace ReadonlyArray {\n  /**\n   * @since 2.0.0\n   */\n  export type Infer<S extends Iterable<any>> = S extends ReadonlyArray<infer A> ? A\n    : S extends Iterable<infer A> ? A\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type With<S extends Iterable<any>, A> = S extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : Array<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type OrNonEmpty<\n    S extends Iterable<any>,\n    T extends Iterable<any>,\n    A\n  > = S extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : T extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : Array<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type AndNonEmpty<\n    S extends Iterable<any>,\n    T extends Iterable<any>,\n    A\n  > = S extends NonEmptyReadonlyArray<any> ? T extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : Array<A>\n    : Array<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type Flatten<T extends ReadonlyArray<ReadonlyArray<any>>> = T extends\n    NonEmptyReadonlyArray<NonEmptyReadonlyArray<infer A>> ? NonEmptyArray<A>\n    : T extends ReadonlyArray<ReadonlyArray<infer A>> ? Array<A>\n    : never\n}\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <S extends ReadonlyArray<any>, B>(f: (a: ReadonlyArray.Infer<S>, i: number) => B): (self: S) => ReadonlyArray.With<S, B>\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <S extends ReadonlyArray<any>, B>(self: S, f: (a: ReadonlyArray.Infer<S>, i: number) => B): ReadonlyArray.With<S, B>\n} = dual(2, <A, B>(self: ReadonlyArray<A>, f: (a: A, i: number) => B): Array<B> => self.map(f))\n\n/**\n * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  /**\n   * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <S extends ReadonlyArray<any>, T extends ReadonlyArray<any>>(f: (a: ReadonlyArray.Infer<S>, i: number) => T): (self: S) => ReadonlyArray.AndNonEmpty<S, T, ReadonlyArray.Infer<T>>\n  /**\n   * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    f: (a: A, i: number) => NonEmptyReadonlyArray<B>\n  ): NonEmptyArray<B>\n  /**\n   * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: ReadonlyArray<A>, f: (a: A, i: number) => ReadonlyArray<B>): Array<B>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, f: (a: A, i: number) => ReadonlyArray<B>): Array<B> => {\n    if (isEmptyReadonlyArray(self)) {\n      return []\n    }\n    const out: Array<B> = []\n    for (let i = 0; i < self.length; i++) {\n      const inner = f(self[i], i)\n      for (let j = 0; j < inner.length; j++) {\n        out.push(inner[j])\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Combines multiple arrays into a single array by concatenating all elements\n * from each nested array. This function ensures that the structure of nested\n * arrays is collapsed into a single, flat array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.flatten([[1, 2], [], [3, 4], [], [5, 6]])\n * console.log(result) // [1, 2, 3, 4, 5, 6]\n * ```\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatten: <S extends ReadonlyArray<ReadonlyArray<any>>>(self: S) => ReadonlyArray.Flatten<S> = flatMap(\n  identity\n) as any\n\n/**\n * Applies a function to each element of the `Iterable` and filters based on the result, keeping the transformed values where the function returns `Some`.\n * This method combines filtering and mapping functionalities, allowing transformations and filtering of elements based on a single function pass.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Option } from \"effect\"\n *\n * const evenSquares = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none()\n *\n * const result = Array.filterMap([1, 2, 3, 4, 5], evenSquares);\n * console.log(result) // [4, 16]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMap: {\n  /**\n   * Applies a function to each element of the `Iterable` and filters based on the result, keeping the transformed values where the function returns `Some`.\n   * This method combines filtering and mapping functionalities, allowing transformations and filtering of elements based on a single function pass.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Option } from \"effect\"\n   *\n   * const evenSquares = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none()\n   *\n   * const result = Array.filterMap([1, 2, 3, 4, 5], evenSquares);\n   * console.log(result) // [4, 16]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A, i: number) => Option.Option<B>): (self: Iterable<A>) => Array<B>\n  /**\n   * Applies a function to each element of the `Iterable` and filters based on the result, keeping the transformed values where the function returns `Some`.\n   * This method combines filtering and mapping functionalities, allowing transformations and filtering of elements based on a single function pass.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Option } from \"effect\"\n   *\n   * const evenSquares = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none()\n   *\n   * const result = Array.filterMap([1, 2, 3, 4, 5], evenSquares);\n   * console.log(result) // [4, 16]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option.Option<B>): Array<B>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option.Option<B>): Array<B> => {\n    const as = fromIterable(self)\n    const out: Array<B> = []\n    for (let i = 0; i < as.length; i++) {\n      const o = f(as[i], i)\n      if (Option.isSome(o)) {\n        out.push(o.value)\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Applies a function to each element of the array and filters based on the result, stopping when a condition is not met.\n * This method combines filtering and mapping in a single pass, and short-circuits, i.e., stops processing, as soon as the function returns `None`.\n * This is useful when you need to transform an array but only up to the point where a certain condition holds true.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Option } from \"effect\"\n *\n * const toSquareTillOdd = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none()\n *\n * const result = Array.filterMapWhile([2, 4, 5], toSquareTillOdd)\n * console.log(result) // [4, 16]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMapWhile: {\n  /**\n   * Applies a function to each element of the array and filters based on the result, stopping when a condition is not met.\n   * This method combines filtering and mapping in a single pass, and short-circuits, i.e., stops processing, as soon as the function returns `None`.\n   * This is useful when you need to transform an array but only up to the point where a certain condition holds true.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Option } from \"effect\"\n   *\n   * const toSquareTillOdd = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none()\n   *\n   * const result = Array.filterMapWhile([2, 4, 5], toSquareTillOdd)\n   * console.log(result) // [4, 16]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A, i: number) => Option.Option<B>): (self: Iterable<A>) => Array<B>\n  /**\n   * Applies a function to each element of the array and filters based on the result, stopping when a condition is not met.\n   * This method combines filtering and mapping in a single pass, and short-circuits, i.e., stops processing, as soon as the function returns `None`.\n   * This is useful when you need to transform an array but only up to the point where a certain condition holds true.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Option } from \"effect\"\n   *\n   * const toSquareTillOdd = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none()\n   *\n   * const result = Array.filterMapWhile([2, 4, 5], toSquareTillOdd)\n   * console.log(result) // [4, 16]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option.Option<B>): Array<B>\n} = dual(2, <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option.Option<B>) => {\n  let i = 0\n  const out: Array<B> = []\n  for (const a of self) {\n    const b = f(a, i)\n    if (Option.isSome(b)) {\n      out.push(b.value)\n    } else {\n      break\n    }\n    i++\n  }\n  return out\n})\n\n/**\n * Applies a function to each element of the `Iterable`, categorizing the results into two separate arrays.\n * This function is particularly useful for operations where each element can result in two possible types,\n * and you want to separate these types into different collections. For instance, separating validation results\n * into successes and failures.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Either } from \"effect\";\n *\n * const isEven = (x: number) => x % 2 === 0\n *\n * const result = Array.partitionMap([1, 2, 3, 4, 5], x =>\n *   isEven(x) ? Either.right(x) : Either.left(x)\n * )\n * console.log(result)\n * // [\n * //   [1, 3, 5],\n * //   [2, 4]\n * // ]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  /**\n   * Applies a function to each element of the `Iterable`, categorizing the results into two separate arrays.\n   * This function is particularly useful for operations where each element can result in two possible types,\n   * and you want to separate these types into different collections. For instance, separating validation results\n   * into successes and failures.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Either } from \"effect\";\n   *\n   * const isEven = (x: number) => x % 2 === 0\n   *\n   * const result = Array.partitionMap([1, 2, 3, 4, 5], x =>\n   *   isEven(x) ? Either.right(x) : Either.left(x)\n   * )\n   * console.log(result)\n   * // [\n   * //   [1, 3, 5],\n   * //   [2, 4]\n   * // ]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(f: (a: A, i: number) => Either.Either<C, B>): (self: Iterable<A>) => [left: Array<B>, right: Array<C>]\n  /**\n   * Applies a function to each element of the `Iterable`, categorizing the results into two separate arrays.\n   * This function is particularly useful for operations where each element can result in two possible types,\n   * and you want to separate these types into different collections. For instance, separating validation results\n   * into successes and failures.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Either } from \"effect\";\n   *\n   * const isEven = (x: number) => x % 2 === 0\n   *\n   * const result = Array.partitionMap([1, 2, 3, 4, 5], x =>\n   *   isEven(x) ? Either.right(x) : Either.left(x)\n   * )\n   * console.log(result)\n   * // [\n   * //   [1, 3, 5],\n   * //   [2, 4]\n   * // ]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(self: Iterable<A>, f: (a: A, i: number) => Either.Either<C, B>): [left: Array<B>, right: Array<C>]\n} = dual(\n  2,\n  <A, B, C>(self: Iterable<A>, f: (a: A, i: number) => Either.Either<C, B>): [left: Array<B>, right: Array<C>] => {\n    const left: Array<B> = []\n    const right: Array<C> = []\n    const as = fromIterable(self)\n    for (let i = 0; i < as.length; i++) {\n      const e = f(as[i], i)\n      if (Either.isLeft(e)) {\n        left.push(e.left)\n      } else {\n        right.push(e.right)\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Retrieves the `Some` values from an `Iterable` of `Option`s, collecting them into an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Option } from \"effect\"\n *\n * const result = Array.getSomes([Option.some(1), Option.none(), Option.some(2)])\n * console.log(result) // [1, 2]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\n\nexport const getSomes: <T extends Iterable<Option.Option<X>>, X = any>(\n  self: T\n) => Array<Option.Option.Value<ReadonlyArray.Infer<T>>> = filterMap(identity as any)\n\n/**\n * Retrieves the `Left` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Either } from \"effect\"\n *\n * const result = Array.getLefts([Either.right(1), Either.left(\"err\"), Either.right(2)])\n * console.log(result) // [\"err\"]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getLefts = <T extends Iterable<Either.Either<any, any>>>(\n  self: T\n): Array<Either.Either.Left<ReadonlyArray.Infer<T>>> => {\n  const out: Array<any> = []\n  for (const a of self) {\n    if (Either.isLeft(a)) {\n      out.push(a.left)\n    }\n  }\n\n  return out\n}\n\n/**\n * Retrieves the `Right` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Either } from \"effect\"\n *\n * const result = Array.getRights([Either.right(1), Either.left(\"err\"), Either.right(2)])\n * console.log(result) // [1, 2]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getRights = <T extends Iterable<Either.Either<any, any>>>(\n  self: T\n): Array<Either.Either.Right<ReadonlyArray.Infer<T>>> => {\n  const out: Array<any> = []\n  for (const a of self) {\n    if (Either.isRight(a)) {\n      out.push(a.right)\n    }\n  }\n\n  return out\n}\n\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const filter: {\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Array<B>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Array<A>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Array<B>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A> => {\n    const as = fromIterable(self)\n    const out: Array<A> = []\n    for (let i = 0; i < as.length; i++) {\n      if (predicate(as[i], i)) {\n        out.push(as[i])\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Separate elements based on a predicate that also exposes the index of the element.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.partition([1, 2, 3, 4], n => n % 2 === 0)\n * console.log(result) // [[1, 3], [2, 4]]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partition: {\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.partition([1, 2, 3, 4], n => n % 2 === 0)\n   * console.log(result) // [[1, 3], [2, 4]]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (\n    self: Iterable<A>\n  ) => [excluded: Array<Exclude<A, B>>, satisfying: Array<B>]\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.partition([1, 2, 3, 4], n => n % 2 === 0)\n   * console.log(result) // [[1, 3], [2, 4]]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => [excluded: Array<A>, satisfying: Array<A>]\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.partition([1, 2, 3, 4], n => n % 2 === 0)\n   * console.log(result) // [[1, 3], [2, 4]]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): [excluded: Array<Exclude<A, B>>, satisfying: Array<B>]\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.partition([1, 2, 3, 4], n => n % 2 === 0)\n   * console.log(result) // [[1, 3], [2, 4]]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [excluded: Array<A>, satisfying: Array<A>]\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [excluded: Array<A>, satisfying: Array<A>] => {\n    const left: Array<A> = []\n    const right: Array<A> = []\n    const as = fromIterable(self)\n    for (let i = 0; i < as.length; i++) {\n      if (predicate(as[i], i)) {\n        right.push(as[i])\n      } else {\n        left.push(as[i])\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Separates an `Iterable` into two arrays based on a predicate.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const separate: <T extends Iterable<Either.Either<any, any>>>(\n  self: T\n) => [Array<Either.Either.Left<ReadonlyArray.Infer<T>>>, Array<Either.Either.Right<ReadonlyArray.Infer<T>>>] =\n  partitionMap(identity)\n\n/**\n * Reduces an array from the left.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.reduce([1, 2, 3], 0, (acc, n) => acc + n)\n * console.log(result) // 6\n * ```\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduce: {\n  /**\n   * Reduces an array from the left.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.reduce([1, 2, 3], 0, (acc, n) => acc + n)\n   * console.log(result) // 6\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Iterable<A>) => B\n  /**\n   * Reduces an array from the left.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.reduce([1, 2, 3], 0, (acc, n) => acc + n)\n   * console.log(result) // 6\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = dual(\n  3,\n  <B, A>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B =>\n    fromIterable(self).reduce((b, a, i) => f(b, a, i), b)\n)\n\n/**\n * Reduces an array from the right.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.reduceRight([1, 2, 3], 0, (acc, n) => acc + n)\n * console.log(result) // 6\n * ```\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduceRight: {\n  /**\n   * Reduces an array from the right.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.reduceRight([1, 2, 3], 0, (acc, n) => acc + n)\n   * console.log(result) // 6\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Iterable<A>) => B\n  /**\n   * Reduces an array from the right.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.reduceRight([1, 2, 3], 0, (acc, n) => acc + n)\n   * console.log(result) // 6\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B =>\n    fromIterable(self).reduceRight((b, a, i) => f(b, a, i), b)\n)\n\n/**\n * Lifts a predicate into an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n * const to = Array.liftPredicate(isEven)\n * console.log(to(1)) // []\n * console.log(to(2)) // [2]\n * ```\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftPredicate: { // Note: I intentionally avoid using the NoInfer pattern here.\n  <A, B extends A>(refinement: Predicate.Refinement<A, B>): (a: A) => Array<B>\n  /**\n   * Lifts a predicate into an array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const isEven = (n: number) => n % 2 === 0\n   * const to = Array.liftPredicate(isEven)\n   * console.log(to(1)) // []\n   * console.log(to(2)) // [2]\n   * ```\n   *\n   * @category lifting\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate.Predicate<A>): <B extends A>(b: B) => Array<B>\n} = <A>(predicate: Predicate.Predicate<A>) => <B extends A>(b: B): Array<B> => predicate(b) ? [b] : []\n\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport const liftOption = <A extends Array<unknown>, B>(\n  f: (...a: A) => Option.Option<B>\n) =>\n(...a: A): Array<B> => fromOption(f(...a))\n\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport const fromNullable = <A>(a: A): Array<NonNullable<A>> => a == null ? empty() : [a as NonNullable<A>]\n\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport const liftNullable = <A extends Array<unknown>, B>(\n  f: (...a: A) => B | null | undefined\n): (...a: A) => Array<NonNullable<B>> =>\n(...a) => fromNullable(f(...a))\n\n/**\n * Maps over an array and flattens the result, removing null and undefined values.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.flatMapNullable([1, 2, 3], n => (n % 2 === 0 ? null : n))\n * console.log(result) // [1, 3]\n *\n * // Explanation:\n * // The array of numbers [1, 2, 3] is mapped with a function that returns null for even numbers\n * // and the number itself for odd numbers. The resulting array [1, null, 3] is then flattened\n * // to remove null values, resulting in [1, 3].\n * ```\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMapNullable: {\n  /**\n   * Maps over an array and flattens the result, removing null and undefined values.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.flatMapNullable([1, 2, 3], n => (n % 2 === 0 ? null : n))\n   * console.log(result) // [1, 3]\n   *\n   * // Explanation:\n   * // The array of numbers [1, 2, 3] is mapped with a function that returns null for even numbers\n   * // and the number itself for odd numbers. The resulting array [1, null, 3] is then flattened\n   * // to remove null values, resulting in [1, 3].\n   * ```\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B | null | undefined): (self: ReadonlyArray<A>) => Array<NonNullable<B>>\n  /**\n   * Maps over an array and flattens the result, removing null and undefined values.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.flatMapNullable([1, 2, 3], n => (n % 2 === 0 ? null : n))\n   * console.log(result) // [1, 3]\n   *\n   * // Explanation:\n   * // The array of numbers [1, 2, 3] is mapped with a function that returns null for even numbers\n   * // and the number itself for odd numbers. The resulting array [1, null, 3] is then flattened\n   * // to remove null values, resulting in [1, 3].\n   * ```\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: ReadonlyArray<A>, f: (a: A) => B | null | undefined): Array<NonNullable<B>>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, f: (a: A) => B | null | undefined): Array<NonNullable<B>> =>\n    flatMap(self, (a) => fromNullable(f(a)))\n)\n\n/**\n * Lifts a function that returns an `Either` into a function that returns an array.\n * If the `Either` is a left, it returns an empty array.\n * If the `Either` is a right, it returns an array with the right value.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Either } from \"effect\"\n *\n * const parseNumber = (s: string): Either.Either<number, Error> =>\n *   isNaN(Number(s)) ? Either.left(new Error(\"Not a number\")) : Either.right(Number(s))\n *\n * const liftedParseNumber = Array.liftEither(parseNumber)\n *\n * const result1 = liftedParseNumber(\"42\")\n * console.log(result1) // [42]\n *\n * const result2 = liftedParseNumber(\"not a number\")\n * console.log(result2) // []\n *\n * // Explanation:\n * // The function parseNumber is lifted to return an array.\n * // When parsing \"42\", it returns an Either.left with the number 42, resulting in [42].\n * // When parsing \"not a number\", it returns an Either.right with an error, resulting in an empty array [].\n * ```\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftEither = <A extends Array<unknown>, E, B>(\n  f: (...a: A) => Either.Either<B, E>\n) =>\n(...a: A): Array<B> => {\n  const e = f(...a)\n  return Either.isLeft(e) ? [] : [e.right]\n}\n\n/**\n * Check if a predicate holds true for every `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const every: {\n  /**\n   * Check if a predicate holds true for every `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: ReadonlyArray<A>) => self is ReadonlyArray<B>\n  /**\n   * Check if a predicate holds true for every `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: ReadonlyArray<A>) => boolean\n  /**\n   * Check if a predicate holds true for every `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: ReadonlyArray<A>, refinement: (a: A, i: number) => a is B): self is ReadonlyArray<B>\n  /**\n   * Check if a predicate holds true for every `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: ReadonlyArray<A>, predicate: (a: A, i: number) => boolean): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: ReadonlyArray<A>, refinement: (a: A, i: number) => a is B): self is ReadonlyArray<B> =>\n    self.every(refinement)\n)\n\n/**\n * Check if a predicate holds true for some `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const some: {\n  /**\n   * Check if a predicate holds true for some `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: ReadonlyArray<A>) => self is NonEmptyReadonlyArray<A>\n  /**\n   * Check if a predicate holds true for some `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: ReadonlyArray<A>, predicate: (a: A, i: number) => boolean): self is NonEmptyReadonlyArray<A>\n} = dual(\n  2,\n  <A>(self: ReadonlyArray<A>, predicate: (a: A, i: number) => boolean): self is NonEmptyReadonlyArray<A> =>\n    self.some(predicate)\n)\n\n/**\n * Extends an array with a function that maps each subarray to a value.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.extend([1, 2, 3], as => as.length)\n * console.log(result) // [3, 2, 1]\n *\n * // Explanation:\n * // The function maps each subarray starting from each element to its length.\n * // The subarrays are: [1, 2, 3], [2, 3], [3].\n * // The lengths are: 3, 2, 1.\n * // Therefore, the result is [3, 2, 1].\n * ```\n *\n * @since 2.0.0\n */\nexport const extend: {\n  /**\n   * Extends an array with a function that maps each subarray to a value.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.extend([1, 2, 3], as => as.length)\n   * console.log(result) // [3, 2, 1]\n   *\n   * // Explanation:\n   * // The function maps each subarray starting from each element to its length.\n   * // The subarrays are: [1, 2, 3], [2, 3], [3].\n   * // The lengths are: 3, 2, 1.\n   * // Therefore, the result is [3, 2, 1].\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(f: (as: ReadonlyArray<A>) => B): (self: ReadonlyArray<A>) => Array<B>\n  /**\n   * Extends an array with a function that maps each subarray to a value.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.extend([1, 2, 3], as => as.length)\n   * console.log(result) // [3, 2, 1]\n   *\n   * // Explanation:\n   * // The function maps each subarray starting from each element to its length.\n   * // The subarrays are: [1, 2, 3], [2, 3], [3].\n   * // The lengths are: 3, 2, 1.\n   * // Therefore, the result is [3, 2, 1].\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: ReadonlyArray<A>, f: (as: ReadonlyArray<A>) => B): Array<B>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, f: (as: ReadonlyArray<A>) => B): Array<B> => self.map((_, i, as) => f(as.slice(i)))\n)\n\n/**\n * Finds the minimum element in an array based on a comparator.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Order } from \"effect\"\n *\n * const result = Array.min([3, 1, 2], Order.number)\n * console.log(result) // 1\n * ```\n *\n * @since 2.0.0\n */\nexport const min: {\n  /**\n   * Finds the minimum element in an array based on a comparator.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Order } from \"effect\"\n   *\n   * const result = Array.min([3, 1, 2], Order.number)\n   * console.log(result) // 1\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(O: Order.Order<A>): (self: NonEmptyReadonlyArray<A>) => A\n  /**\n   * Finds the minimum element in an array based on a comparator.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Order } from \"effect\"\n   *\n   * const result = Array.min([3, 1, 2], Order.number)\n   * console.log(result) // 1\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A\n} = dual(2, <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A => self.reduce(Order.min(O)))\n\n/**\n * Finds the maximum element in an array based on a comparator.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Order } from \"effect\"\n *\n * const result = Array.max([3, 1, 2], Order.number)\n * console.log(result) // 3\n * ```\n *\n * @since 2.0.0\n */\nexport const max: {\n  /**\n   * Finds the maximum element in an array based on a comparator.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Order } from \"effect\"\n   *\n   * const result = Array.max([3, 1, 2], Order.number)\n   * console.log(result) // 3\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(O: Order.Order<A>): (self: NonEmptyReadonlyArray<A>) => A\n  /**\n   * Finds the maximum element in an array based on a comparator.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Order } from \"effect\"\n   *\n   * const result = Array.max([3, 1, 2], Order.number)\n   * console.log(result) // 3\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A\n} = dual(2, <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A => self.reduce(Order.max(O)))\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const unfold = <B, A>(b: B, f: (b: B) => Option.Option<readonly [A, B]>): Array<A> => {\n  const out: Array<A> = []\n  let next: B = b\n  let o: Option.Option<readonly [A, B]>\n  while (Option.isSome(o = f(next))) {\n    const [a, b] = o.value\n    out.push(a)\n    next = b\n  }\n  return out\n}\n\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getOrder: <A>(O: Order.Order<A>) => Order.Order<ReadonlyArray<A>> = Order.array\n\n/**\n * Creates an equivalence relation for arrays.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const eq = Array.getEquivalence<number>((a, b) => a === b)\n * console.log(eq([1, 2, 3], [1, 2, 3])) // true\n * ```\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getEquivalence: <A>(\n  isEquivalent: Equivalence.Equivalence<A>\n) => Equivalence.Equivalence<ReadonlyArray<A>> = Equivalence.array\n\n/**\n * Performs a side-effect for each element of the `Iterable`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * Array.forEach([1, 2, 3], n => console.log(n)) // 1, 2, 3\n * ```\n *\n * @since 2.0.0\n */\nexport const forEach: {\n  /**\n   * Performs a side-effect for each element of the `Iterable`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * Array.forEach([1, 2, 3], n => console.log(n)) // 1, 2, 3\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(f: (a: A, i: number) => void): (self: Iterable<A>) => void\n  /**\n   * Performs a side-effect for each element of the `Iterable`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * Array.forEach([1, 2, 3], n => console.log(n)) // 1, 2, 3\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, f: (a: A, i: number) => void): void\n} = dual(2, <A>(self: Iterable<A>, f: (a: A, i: number) => void): void => fromIterable(self).forEach((a, i) => f(a, i)))\n\n/**\n * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n * preserving the order of the first occurrence of each element.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.dedupeWith([1, 2, 2, 3, 3, 3], (a, b) => a === b)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const dedupeWith: {\n  /**\n   * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n   * preserving the order of the first occurrence of each element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dedupeWith([1, 2, 2, 3, 3, 3], (a, b) => a === b)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <S extends Iterable<any>>(\n    isEquivalent: (self: ReadonlyArray.Infer<S>, that: ReadonlyArray.Infer<S>) => boolean\n  ): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  /**\n   * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n   * preserving the order of the first occurrence of each element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dedupeWith([1, 2, 2, 3, 3, 3], (a, b) => a === b)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(\n    self: NonEmptyReadonlyArray<A>,\n    isEquivalent: (self: A, that: A) => boolean\n  ): NonEmptyArray<A>\n  /**\n   * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n   * preserving the order of the first occurrence of each element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dedupeWith([1, 2, 2, 3, 3, 3], (a, b) => a === b)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A> => {\n    const input = fromIterable(self)\n    if (isNonEmptyReadonlyArray(input)) {\n      const out: NonEmptyArray<A> = [headNonEmpty(input)]\n      const rest = tailNonEmpty(input)\n      for (const r of rest) {\n        if (out.every((a) => !isEquivalent(r, a))) {\n          out.push(r)\n        }\n      }\n      return out\n    }\n    return []\n  }\n)\n\n/**\n * Remove duplicates from an `Iterable`, preserving the order of the first occurrence of each element.\n * The equivalence used to compare elements is provided by `Equal.equivalence()` from the `Equal` module.\n *\n * @since 2.0.0\n */\nexport const dedupe = <S extends Iterable<any>>(\n  self: S\n): S extends NonEmptyReadonlyArray<infer A> ? NonEmptyArray<A> : S extends Iterable<infer A> ? Array<A> : never =>\n  dedupeWith(self, Equal.equivalence()) as any\n\n/**\n * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.dedupeAdjacentWith([1, 1, 2, 2, 3, 3], (a, b) => a === b)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacentWith: {\n  /**\n   * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dedupeAdjacentWith([1, 1, 2, 2, 3, 3], (a, b) => a === b)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(isEquivalent: (self: A, that: A) => boolean): (self: Iterable<A>) => Array<A>\n  /**\n   * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dedupeAdjacentWith([1, 1, 2, 2, 3, 3], (a, b) => a === b)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A>\n} = dual(2, <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A> => {\n  const out: Array<A> = []\n  let lastA: Option.Option<A> = Option.none()\n  for (const a of self) {\n    if (Option.isNone(lastA) || !isEquivalent(a, lastA.value)) {\n      out.push(a)\n      lastA = Option.some(a)\n    }\n  }\n  return out\n})\n\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.dedupeAdjacent([1, 1, 2, 2, 3, 3])\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacent: <A>(self: Iterable<A>) => Array<A> = dedupeAdjacentWith(Equal.equivalence())\n\n/**\n * Joins the elements together with \"sep\" in the middle.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const strings = [\"a\", \"b\", \"c\"]\n * const joined = Array.join(strings, \"-\")\n * console.log(joined) // \"a-b-c\"\n * ```\n *\n * @since 2.0.0\n * @category folding\n */\nexport const join: {\n  /**\n   * Joins the elements together with \"sep\" in the middle.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const strings = [\"a\", \"b\", \"c\"]\n   * const joined = Array.join(strings, \"-\")\n   * console.log(joined) // \"a-b-c\"\n   * ```\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  (sep: string): (self: Iterable<string>) => string\n  /**\n   * Joins the elements together with \"sep\" in the middle.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const strings = [\"a\", \"b\", \"c\"]\n   * const joined = Array.join(strings, \"-\")\n   * console.log(joined) // \"a-b-c\"\n   * ```\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  (self: Iterable<string>, sep: string): string\n} = dual(2, (self: Iterable<string>, sep: string): string => fromIterable(self).join(sep))\n\n/**\n * Statefully maps over the chunk, producing new elements of type `B`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.mapAccum([1, 2, 3], 0, (acc, n) => [acc + n, acc + n])\n * console.log(result) // [6, [1, 3, 6]]\n * ```\n *\n * @since 2.0.0\n * @category folding\n */\nexport const mapAccum: {\n  /**\n   * Statefully maps over the chunk, producing new elements of type `B`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.mapAccum([1, 2, 3], 0, (acc, n) => [acc + n, acc + n])\n   * console.log(result) // [6, [1, 3, 6]]\n   * ```\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <S, A, B, I extends Iterable<A> = Iterable<A>>(s: S, f: (s: S, a: ReadonlyArray.Infer<I>, i: number) => readonly [S, B]): (self: I) => [state: S, mappedArray: ReadonlyArray.With<I, B>]\n  /**\n   * Statefully maps over the chunk, producing new elements of type `B`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.mapAccum([1, 2, 3], 0, (acc, n) => [acc + n, acc + n])\n   * console.log(result) // [6, [1, 3, 6]]\n   * ```\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <S, A, B, I extends Iterable<A> = Iterable<A>>(\n    self: I,\n    s: S,\n    f: (s: S, a: ReadonlyArray.Infer<I>, i: number) => readonly [S, B]\n  ): [state: S, mappedArray: ReadonlyArray.With<I, B>]\n} = dual(\n  3,\n  <S, A, B>(self: Iterable<A>, s: S, f: (s: S, a: A, i: number) => [S, B]): [state: S, mappedArray: Array<B>] => {\n    let i = 0\n    let s1 = s\n    const out: Array<B> = []\n    for (const a of self) {\n      const r = f(s1, a, i)\n      s1 = r[0]\n      out.push(r[1])\n      i++\n    }\n    return [s1, out]\n  }\n)\n\n/**\n * Zips this chunk crosswise with the specified chunk using the specified combiner.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.cartesianWith([1, 2], [\"a\", \"b\"], (a, b) => `${a}-${b}`)\n * console.log(result) // [\"1-a\", \"1-b\", \"2-a\", \"2-b\"]\n * ```\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesianWith: {\n  /**\n   * Zips this chunk crosswise with the specified chunk using the specified combiner.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.cartesianWith([1, 2], [\"a\", \"b\"], (a, b) => `${a}-${b}`)\n   * console.log(result) // [\"1-a\", \"1-b\", \"2-a\", \"2-b\"]\n   * ```\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B, C>(that: ReadonlyArray<B>, f: (a: A, b: B) => C): (self: ReadonlyArray<A>) => Array<C>\n  /**\n   * Zips this chunk crosswise with the specified chunk using the specified combiner.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.cartesianWith([1, 2], [\"a\", \"b\"], (a, b) => `${a}-${b}`)\n   * console.log(result) // [\"1-a\", \"1-b\", \"2-a\", \"2-b\"]\n   * ```\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B, C>(self: ReadonlyArray<A>, that: ReadonlyArray<B>, f: (a: A, b: B) => C): Array<C>\n} = dual(\n  3,\n  <A, B, C>(self: ReadonlyArray<A>, that: ReadonlyArray<B>, f: (a: A, b: B) => C): Array<C> =>\n    flatMap(self, (a) => map(that, (b) => f(a, b)))\n)\n\n/**\n * Zips this chunk crosswise with the specified chunk.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.cartesian([1, 2], [\"a\", \"b\"])\n * console.log(result) // [[1, \"a\"], [1, \"b\"], [2, \"a\"], [2, \"b\"]]\n * ```\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesian: {\n  /**\n   * Zips this chunk crosswise with the specified chunk.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.cartesian([1, 2], [\"a\", \"b\"])\n   * console.log(result) // [[1, \"a\"], [1, \"b\"], [2, \"a\"], [2, \"b\"]]\n   * ```\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <B>(that: ReadonlyArray<B>): <A>(self: ReadonlyArray<A>) => Array<[A, B]>\n  /**\n   * Zips this chunk crosswise with the specified chunk.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.cartesian([1, 2], [\"a\", \"b\"])\n   * console.log(result) // [[1, \"a\"], [1, \"b\"], [2, \"a\"], [2, \"b\"]]\n   * ```\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B>(self: ReadonlyArray<A>, that: ReadonlyArray<B>): Array<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, that: ReadonlyArray<B>): Array<[A, B]> => cartesianWith(self, that, (a, b) => [a, b])\n)\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * **Example**\n *\n * ```ts\n * import { Array, pipe } from \"effect\"\n *\n * const doResult = pipe(\n *   Array.Do,\n *   Array.bind(\"x\", () => [1, 3, 5]),\n *   Array.bind(\"y\", () => [2, 4, 6]),\n *   Array.filter(({ x, y }) => x < y), // condition\n *   Array.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n * ```\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const Do: ReadonlyArray<{}> = of({})\n\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * **Example**\n *\n * ```ts\n * import { Array, pipe } from \"effect\"\n *\n * const doResult = pipe(\n *   Array.Do,\n *   Array.bind(\"x\", () => [1, 3, 5]),\n *   Array.bind(\"y\", () => [2, 4, 6]),\n *   Array.filter(({ x, y }) => x < y), // condition\n *   Array.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n * ```\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const bind: {\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, pipe } from \"effect\"\n   *\n   * const doResult = pipe(\n   *   Array.Do,\n   *   Array.bind(\"x\", () => [1, 3, 5]),\n   *   Array.bind(\"y\", () => [2, 4, 6]),\n   *   Array.filter(({ x, y }) => x < y), // condition\n   *   Array.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   * ```\n   *\n   * @see {@link bindTo}\n   * @see {@link Do}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  <A extends object, N extends string, B>(tag: Exclude<N, keyof A>, f: (a: NoInfer<A>) => ReadonlyArray<B>): (\n    self: ReadonlyArray<A>\n  ) => Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, pipe } from \"effect\"\n   *\n   * const doResult = pipe(\n   *   Array.Do,\n   *   Array.bind(\"x\", () => [1, 3, 5]),\n   *   Array.bind(\"y\", () => [2, 4, 6]),\n   *   Array.filter(({ x, y }) => x < y), // condition\n   *   Array.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   * ```\n   *\n   * @see {@link bindTo}\n   * @see {@link Do}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  <A extends object, N extends string, B>(\n    self: ReadonlyArray<A>,\n    tag: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => ReadonlyArray<B>\n  ): Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = internalDoNotation.bind<ReadonlyArrayTypeLambda>(map, flatMap) as any\n\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * **Example**\n *\n * ```ts\n * import { Array, pipe } from \"effect\"\n *\n * const doResult = pipe(\n *   Array.Do,\n *   Array.bind(\"x\", () => [1, 3, 5]),\n *   Array.bind(\"y\", () => [2, 4, 6]),\n *   Array.filter(({ x, y }) => x < y), // condition\n *   Array.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n * ```\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const bindTo: {\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, pipe } from \"effect\"\n   *\n   * const doResult = pipe(\n   *   Array.Do,\n   *   Array.bind(\"x\", () => [1, 3, 5]),\n   *   Array.bind(\"y\", () => [2, 4, 6]),\n   *   Array.filter(({ x, y }) => x < y), // condition\n   *   Array.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   * ```\n   *\n   * @see {@link bindTo}\n   * @see {@link Do}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  <N extends string>(tag: N): <A>(self: ReadonlyArray<A>) => Array<{ [K in N]: A }>\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, pipe } from \"effect\"\n   *\n   * const doResult = pipe(\n   *   Array.Do,\n   *   Array.bind(\"x\", () => [1, 3, 5]),\n   *   Array.bind(\"y\", () => [2, 4, 6]),\n   *   Array.filter(({ x, y }) => x < y), // condition\n   *   Array.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   * ```\n   *\n   * @see {@link bindTo}\n   * @see {@link Do}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  <A, N extends string>(self: ReadonlyArray<A>, tag: N): Array<{ [K in N]: A }>\n} = internalDoNotation.bindTo<ReadonlyArrayTypeLambda>(map) as any\n\nconst let_: {\n  <N extends string, B, A extends object>(\n    tag: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): (self: ReadonlyArray<A>) => Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  <N extends string, A extends object, B>(\n    self: ReadonlyArray<A>,\n    tag: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = internalDoNotation.let_<ReadonlyArrayTypeLambda>(map) as any\n\nexport {\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, pipe } from \"effect\"\n   *\n   * const doResult = pipe(\n   *   Array.Do,\n   *   Array.bind(\"x\", () => [1, 3, 5]),\n   *   Array.bind(\"y\", () => [2, 4, 6]),\n   *   Array.filter(({ x, y }) => x < y), // condition\n   *   Array.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   *\n   * ```\n   *\n   * @see {@link bindTo}\n   * @see {@link bind}\n   * @see {@link Do}\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  let_ as let\n}\n", "/**\n * @since 2.0.0\n */\n\nimport * as Equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { constNull, constUndefined, dual, identity } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport * as either from \"./internal/either.js\"\nimport * as option_ from \"./internal/option.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport { isFunction } from \"./Predicate.js\"\nimport type { Covariant, NoInfer, NotFunction } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport * as Gen from \"./Utils.js\"\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type Either<A, E = never> = Left<E, A> | Right<E, A>\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const TypeId: unique symbol = either.TypeId\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport type TypeId = typeof TypeId\n\n// TODO(4.0): flip the order of the type parameters\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Left<out E, out A> extends Pipeable, Inspectable {\n  readonly _tag: \"Left\"\n  readonly _op: \"Left\"\n  readonly left: E\n  readonly [TypeId]: {\n    readonly _R: Covariant<A>\n    readonly _L: Covariant<E>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: EitherUnify<this>\n  [Unify.ignoreSymbol]?: EitherUnifyIgnore\n}\n\n// TODO(4.0): flip the order of the type parameters\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Right<out E, out A> extends Pipeable, Inspectable {\n  readonly _tag: \"Right\"\n  readonly _op: \"Right\"\n  readonly right: A\n  readonly [TypeId]: {\n    readonly _R: Covariant<A>\n    readonly _L: Covariant<E>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: EitherUnify<this>\n  [Unify.ignoreSymbol]?: EitherUnifyIgnore\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface EitherUnify<A extends { [Unify.typeSymbol]?: any }> {\n  Either?: () => A[Unify.typeSymbol] extends Either<infer R0, infer L0> | infer _ ? Either<R0, L0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface EitherUnifyIgnore {}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface EitherTypeLambda extends TypeLambda {\n  readonly type: Either<this[\"Target\"], this[\"Out1\"]>\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Either {\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Left<T extends Either<any, any>> = [T] extends [Either<infer _A, infer _E>] ? _E : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Right<T extends Either<any, any>> = [T] extends [Either<infer _A, infer _E>] ? _A : never\n}\n\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const right: <A>(a: A) => Either<A> = either.right\n\nconst void_: Either<void> = right(void 0)\nexport {\n  /**\n   * @category constructors\n   * @since 3.13.0\n   */\n  void_ as void\n}\n\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const left: <E>(e: E) => Either<never, E> = either.left\n\n/**\n * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))\n * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromNullable: {\n  /**\n   * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use\n   * the provided default as a `Left`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))\n   * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A, E>(onNullable: (right: A) => E): (self: A) => Either<NonNullable<A>, E>\n  /**\n   * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use\n   * the provided default as a `Left`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))\n   * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A, E>(self: A, onNullable: (right: A) => E): Either<NonNullable<A>, E>\n} = dual(\n  2,\n  <A, E>(self: A, onNullable: (right: A) => E): Either<NonNullable<A>, E> =>\n    self == null ? left(onNullable(self)) : right(self)\n)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))\n * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromOption: {\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))\n   * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <E>(onNone: () => E): <A>(self: Option<A>) => Either<A, E>\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))\n   * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A, E>(self: Option<A>, onNone: () => E): Either<A, E>\n} = either.fromOption\n\nconst try_: {\n  <A, E>(\n    options: {\n      readonly try: LazyArg<A>\n      readonly catch: (error: unknown) => E\n    }\n  ): Either<A, E>\n  <A>(evaluate: LazyArg<A>): Either<A, unknown>\n} = (<A, E>(\n  evaluate: LazyArg<A> | {\n    readonly try: LazyArg<A>\n    readonly catch: (error: unknown) => E\n  }\n) => {\n  if (isFunction(evaluate)) {\n    try {\n      return right(evaluate())\n    } catch (e) {\n      return left(e)\n    }\n  } else {\n    try {\n      return right(evaluate.try())\n    } catch (e) {\n      return left(evaluate.catch(e))\n    }\n  }\n}) as any\n\nexport {\n  /**\n   * Imports a synchronous side-effect into a pure `Either` value, translating any\n   * thrown exceptions into typed failed eithers creating with `Either.left`.\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  try_ as try\n}\n\n/**\n * Tests if a value is a `Either`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isEither(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isEither(Either.left(\"a\")), true)\n * assert.deepStrictEqual(Either.isEither({ right: 1 }), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEither: (input: unknown) => input is Either<unknown, unknown> = either.isEither\n\n/**\n * Determine if a `Either` is a `Left`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isLeft(Either.right(1)), false)\n * assert.deepStrictEqual(Either.isLeft(Either.left(\"a\")), true)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isLeft: <A, E>(self: Either<A, E>) => self is Left<E, A> = either.isLeft\n\n/**\n * Determine if a `Either` is a `Right`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isRight(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isRight(Either.left(\"a\")), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isRight: <A, E>(self: Either<A, E>) => self is Right<E, A> = either.isRight\n\n/**\n * Converts a `Either` to an `Option` discarding the `Left`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getRight(Either.right('ok')), Option.some('ok'))\n * assert.deepStrictEqual(Either.getRight(Either.left('err')), Option.none())\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getRight: <A, E>(self: Either<A, E>) => Option<A> = either.getRight\n\n/**\n * Converts a `Either` to an `Option` discarding the value.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getLeft(Either.right('ok')), Option.none())\n * assert.deepStrictEqual(Either.getLeft(Either.left('err')), Option.some('err'))\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getLeft: <A, E>(self: Either<A, E>) => Option<E> = either.getLeft\n\n/**\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <A, E>({ left, right }: {\n  right: Equivalence.Equivalence<A>\n  left: Equivalence.Equivalence<E>\n}): Equivalence.Equivalence<Either<A, E>> =>\n  Equivalence.make((x, y) =>\n    isLeft(x) ?\n      isLeft(y) && left(x.left, y.left) :\n      isRight(y) && right(x.right, y.right)\n  )\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapBoth: {\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <E, E2, A, A2>(\n    options: {\n      readonly onLeft: (left: E) => E2\n      readonly onRight: (right: A) => A2\n    }\n  ): (self: Either<A, E>) => Either<A2, E2>\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, E, E2, A2>(\n    self: Either<A, E>,\n    options: {\n      readonly onLeft: (left: E) => E2\n      readonly onRight: (right: A) => A2\n    }\n  ): Either<A2, E2>\n} = dual(\n  2,\n  <A, E, E2, A2>(self: Either<A, E>, { onLeft, onRight }: {\n    readonly onLeft: (left: E) => E2\n    readonly onRight: (right: A) => A2\n  }): Either<A2, E2> => isLeft(self) ? left(onLeft(self.left)) : right(onRight(self.right))\n)\n\n/**\n * Maps the `Left` side of an `Either` value to a new `Either` value.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapLeft: {\n  /**\n   * Maps the `Left` side of an `Either` value to a new `Either` value.\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <E, E2>(f: (left: E) => E2): <A>(self: Either<A, E>) => Either<A, E2>\n  /**\n   * Maps the `Left` side of an `Either` value to a new `Either` value.\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, E, E2>(self: Either<A, E>, f: (left: E) => E2): Either<A, E2>\n} = dual(\n  2,\n  <A, E, E2>(self: Either<A, E>, f: (left: E) => E2): Either<A, E2> =>\n    isLeft(self) ? left(f(self.left)) : right(self.right)\n)\n\n/**\n * Maps the `Right` side of an `Either` value to a new `Either` value.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  /**\n   * Maps the `Right` side of an `Either` value to a new `Either` value.\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, A2>(f: (right: A) => A2): <E>(self: Either<A, E>) => Either<A2, E>\n  /**\n   * Maps the `Right` side of an `Either` value to a new `Either` value.\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, E, A2>(self: Either<A, E>, f: (right: A) => A2): Either<A2, E>\n} = dual(\n  2,\n  <A, E, A2>(self: Either<A, E>, f: (right: A) => A2): Either<A2, E> =>\n    isRight(self) ? right(f(self.right)) : left(self.left)\n)\n\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,\n * if the value is a `Right` the inner value is applied to the `onRight` function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Either } from \"effect\"\n *\n * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`\n *\n * const onRight = (value: number): string => `Ok: ${value}`\n *\n * assert.deepStrictEqual(pipe(Either.right(1), Either.match({ onLeft, onRight })), 'Ok: 1')\n * assert.deepStrictEqual(\n *   pipe(Either.left(['string 1', 'string 2']), Either.match({ onLeft, onRight })),\n *   'strings: string 1, string 2'\n * )\n * ```\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  /**\n   * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,\n   * if the value is a `Right` the inner value is applied to the `onRight` function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`\n   *\n   * const onRight = (value: number): string => `Ok: ${value}`\n   *\n   * assert.deepStrictEqual(pipe(Either.right(1), Either.match({ onLeft, onRight })), 'Ok: 1')\n   * assert.deepStrictEqual(\n   *   pipe(Either.left(['string 1', 'string 2']), Either.match({ onLeft, onRight })),\n   *   'strings: string 1, string 2'\n   * )\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <E, B, A, C = B>(\n    options: {\n      readonly onLeft: (left: E) => B\n      readonly onRight: (right: A) => C\n    }\n  ): (self: Either<A, E>) => B | C\n  /**\n   * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,\n   * if the value is a `Right` the inner value is applied to the `onRight` function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`\n   *\n   * const onRight = (value: number): string => `Ok: ${value}`\n   *\n   * assert.deepStrictEqual(pipe(Either.right(1), Either.match({ onLeft, onRight })), 'Ok: 1')\n   * assert.deepStrictEqual(\n   *   pipe(Either.left(['string 1', 'string 2']), Either.match({ onLeft, onRight })),\n   *   'strings: string 1, string 2'\n   * )\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <A, E, B, C = B>(\n    self: Either<A, E>,\n    options: {\n      readonly onLeft: (left: E) => B\n      readonly onRight: (right: A) => C\n    }\n  ): B | C\n} = dual(\n  2,\n  <A, E, B, C = B>(self: Either<A, E>, { onLeft, onRight }: {\n    readonly onLeft: (left: E) => B\n    readonly onRight: (right: A) => C\n  }): B | C => isLeft(self) ? onLeft(self.left) : onRight(self.right)\n)\n\n/**\n * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n * or `Left` of the result of the provided function if the predicate returns false\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n * const isPositiveEither = Either.liftPredicate(isPositive, n => `${n} is not positive`)\n *\n * assert.deepStrictEqual(\n *   isPositiveEither(1),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   isPositiveEither(0),\n *   Either.left(\"0 is not positive\")\n * )\n * ```\n *\n * @category lifting\n * @since 3.4.0\n */\nexport const liftPredicate: {\n  /**\n   * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n   * or `Left` of the result of the provided function if the predicate returns false\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   * const isPositiveEither = Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *\n   * assert.deepStrictEqual(\n   *   isPositiveEither(1),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   isPositiveEither(0),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <A, B extends A, E>(refinement: Refinement<A, B>, orLeftWith: (a: A) => E): (a: A) => Either<B, E>\n  /**\n   * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n   * or `Left` of the result of the provided function if the predicate returns false\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   * const isPositiveEither = Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *\n   * assert.deepStrictEqual(\n   *   isPositiveEither(1),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   isPositiveEither(0),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <B extends A, E, A = B>(predicate: Predicate<A>, orLeftWith: (a: A) => E): (a: B) => Either<B, E>\n  /**\n   * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n   * or `Left` of the result of the provided function if the predicate returns false\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   * const isPositiveEither = Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *\n   * assert.deepStrictEqual(\n   *   isPositiveEither(1),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   isPositiveEither(0),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <A, E, B extends A>(self: A, refinement: Refinement<A, B>, orLeftWith: (a: A) => E): Either<B, E>\n  /**\n   * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n   * or `Left` of the result of the provided function if the predicate returns false\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   * const isPositiveEither = Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *\n   * assert.deepStrictEqual(\n   *   isPositiveEither(1),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   isPositiveEither(0),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <B extends A, E, A = B>(self: B, predicate: Predicate<A>, orLeftWith: (a: A) => E): Either<B, E>\n} = dual(\n  3,\n  <A, E>(a: A, predicate: Predicate<A>, orLeftWith: (a: A) => E): Either<A, E> =>\n    predicate(a) ? right(a) : left(orLeftWith(a))\n)\n\n/**\n * Filter the right value with the provided function.\n * If the predicate fails, set the left value with the result of the provided function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(1),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(0),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.left(\"0 is not positive\")\n * )\n * ```\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrLeft: {\n  /**\n   * Filter the right value with the provided function.\n   * If the predicate fails, set the left value with the result of the provided function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(1),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(0),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, B extends A, E2>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orLeftWith: (right: NoInfer<A>) => E2\n  ): <E>(self: Either<A, E>) => Either<B, E2 | E>\n  /**\n   * Filter the right value with the provided function.\n   * If the predicate fails, set the left value with the result of the provided function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(1),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(0),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E2>(predicate: Predicate<NoInfer<A>>, orLeftWith: (right: NoInfer<A>) => E2): <E>(self: Either<A, E>) => Either<A, E2 | E>\n  /**\n   * Filter the right value with the provided function.\n   * If the predicate fails, set the left value with the result of the provided function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(1),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(0),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, B extends A, E2>(\n    self: Either<A, E>,\n    refinement: Refinement<A, B>,\n    orLeftWith: (right: A) => E2\n  ): Either<B, E | E2>\n  /**\n   * Filter the right value with the provided function.\n   * If the predicate fails, set the left value with the result of the provided function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(1),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(0),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, E2>(self: Either<A, E>, predicate: Predicate<A>, orLeftWith: (right: A) => E2): Either<A, E | E2>\n} = dual(3, <A, E, E2>(\n  self: Either<A, E>,\n  predicate: Predicate<A>,\n  orLeftWith: (right: A) => E2\n): Either<A, E | E2> => flatMap(self, (r) => predicate(r) ? right(r) : left(orLeftWith(r))))\n\n/**\n * @category getters\n * @since 2.0.0\n */\nexport const merge: <A, E>(self: Either<A, E>) => E | A = match({\n  onLeft: identity,\n  onRight: identity\n})\n\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + \"!\"), 1)\n * assert.deepStrictEqual(Either.getOrElse(Either.left(\"not a number\"), (error) => error + \"!\"), \"not a number!\")\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrElse: {\n  /**\n   * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + \"!\"), 1)\n   * assert.deepStrictEqual(Either.getOrElse(Either.left(\"not a number\"), (error) => error + \"!\"), \"not a number!\")\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <E, A2>(onLeft: (left: E) => A2): <A>(self: Either<A, E>) => A2 | A\n  /**\n   * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + \"!\"), 1)\n   * assert.deepStrictEqual(Either.getOrElse(Either.left(\"not a number\"), (error) => error + \"!\"), \"not a number!\")\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A, E, A2>(self: Either<A, E>, onLeft: (left: E) => A2): A | A2\n} = dual(\n  2,\n  <A, E, A2>(self: Either<A, E>, onLeft: (left: E) => A2): A | A2 => isLeft(self) ? onLeft(self.left) : self.right\n)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrNull(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrNull(Either.left(\"a\")), null)\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrNull: <A, E>(self: Either<A, E>) => A | null = getOrElse(constNull)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrUndefined(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrUndefined(Either.left(\"a\")), undefined)\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrUndefined: <A, E>(self: Either<A, E>) => A | undefined = getOrElse(constUndefined)\n\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Either.getOrThrowWith(Either.right(1), () => new Error('Unexpected Left')),\n *   1\n * )\n * assert.throws(() => Either.getOrThrowWith(Either.left(\"error\"), () => new Error('Unexpected Left')))\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrThrowWith: {\n  /**\n   * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n   *\n   * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Either.getOrThrowWith(Either.right(1), () => new Error('Unexpected Left')),\n   *   1\n   * )\n   * assert.throws(() => Either.getOrThrowWith(Either.left(\"error\"), () => new Error('Unexpected Left')))\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <E>(onLeft: (left: E) => unknown): <A>(self: Either<A, E>) => A\n  /**\n   * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n   *\n   * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Either.getOrThrowWith(Either.right(1), () => new Error('Unexpected Left')),\n   *   1\n   * )\n   * assert.throws(() => Either.getOrThrowWith(Either.left(\"error\"), () => new Error('Unexpected Left')))\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A, E>(self: Either<A, E>, onLeft: (left: E) => unknown): A\n} = dual(2, <A, E>(self: Either<A, E>, onLeft: (left: E) => unknown): A => {\n  if (isRight(self)) {\n    return self.right\n  }\n  throw onLeft(self.left)\n})\n\n// TODO(4.0): by default should throw `L` (i.e getOrThrowWith with the identity function)\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrThrow(Either.right(1)), 1)\n * assert.throws(() => Either.getOrThrow(Either.left(\"error\")))\n * ```\n *\n * @throws `Error(\"getOrThrow called on a Left\")`\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrThrow: <A, E>(self: Either<A, E>) => A = getOrThrowWith(() =>\n  new Error(\"getOrThrow called on a Left\")\n)\n\n/**\n * Returns `self` if it is a `Right` or `that` otherwise.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElse: {\n  /**\n   * Returns `self` if it is a `Right` or `that` otherwise.\n   *\n   * @category error handling\n   * @since 2.0.0\n   */\n  <E, A2, E2>(that: (left: E) => Either<A2, E2>): <A>(self: Either<A, E>) => Either<A | A2, E2>\n  /**\n   * Returns `self` if it is a `Right` or `that` otherwise.\n   *\n   * @category error handling\n   * @since 2.0.0\n   */\n  <A, E, A2, E2>(self: Either<A, E>, that: (left: E) => Either<A2, E2>): Either<A | A2, E2>\n} = dual(\n  2,\n  <A, E, A2, E2>(self: Either<A, E>, that: (left: E) => Either<A2, E2>): Either<A | A2, E2> =>\n    isLeft(self) ? that(self.left) : right(self.right)\n)\n\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  /**\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, A2, E2>(f: (right: A) => Either<A2, E2>): <E>(self: Either<A, E>) => Either<A2, E | E2>\n  /**\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, E, A2, E2>(self: Either<A, E>, f: (right: A) => Either<A2, E2>): Either<A2, E | E2>\n} = dual(\n  2,\n  <A, E, A2, E2>(self: Either<A, E>, f: (right: A) => Either<A2, E2>): Either<A2, E | E2> =>\n    isLeft(self) ? left(self.left) : f(self.right)\n)\n\n/**\n * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const andThen: {\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, A2, E2>(f: (right: A) => Either<A2, E2>): <E>(self: Either<A, E>) => Either<A2, E | E2>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A2, E2>(f: Either<A2, E2>): <E, A>(self: Either<A, E>) => Either<A2, E | E2>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, A2>(f: (right: A) => A2): <E>(self: Either<A, E>) => Either<A2, E>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A2>(right: NotFunction<A2>): <A, E>(self: Either<A, E>) => Either<A2, E>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, E, A2, E2>(self: Either<A, E>, f: (right: A) => Either<A2, E2>): Either<A2, E | E2>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, E, A2, E2>(self: Either<A, E>, f: Either<A2, E2>): Either<A2, E | E2>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, E, A2>(self: Either<A, E>, f: (right: A) => A2): Either<A2, E>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, E, A2>(self: Either<A, E>, f: NotFunction<A2>): Either<A2, E>\n} = dual(\n  2,\n  <A, E, A2, E2>(self: Either<A, E>, f: (right: A) => Either<A2, E2> | Either<A2, E2>): Either<A2, E | E2> =>\n    flatMap(self, (a) => {\n      const b = isFunction(f) ? f(a) : f\n      return isEither(b) ? b : right(b)\n    })\n)\n\n/**\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  /**\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A2, E2, A, B>(that: Either<A2, E2>, f: (right: A, right2: A2) => B): <E>(self: Either<A, E>) => Either<B, E2 | E>\n  /**\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, E, A2, E2, B>(self: Either<A, E>, that: Either<A2, E2>, f: (right: A, right2: A2) => B): Either<B, E | E2>\n} = dual(\n  3,\n  <A, E, A2, E2, B>(self: Either<A, E>, that: Either<A2, E2>, f: (right: A, right2: A2) => B): Either<B, E | E2> =>\n    flatMap(self, (r) => map(that, (r2) => f(r, r2)))\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const ap: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A, E2>(that: Either<A, E2>): <A2, E>(self: Either<(right: A) => A2, E>) => Either<A2, E | E2>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A, A2, E, E2>(self: Either<(right: A) => A2, E>, that: Either<A, E2>): Either<A2, E | E2>\n} = dual(\n  2,\n  <A, E, A2, E2>(self: Either<(right: A) => A2, E>, that: Either<A, E2>): Either<A2, E | E2> =>\n    zipWith(self, that, (f, a) => f(a))\n)\n\n/**\n * Takes a structure of `Either`s and returns an `Either` of values with the same structure.\n *\n * - If a tuple is supplied, then the returned `Either` will contain a tuple with the same length.\n * - If a struct is supplied, then the returned `Either` will contain a struct with the same keys.\n * - If an iterable is supplied, then the returned `Either` will contain an array.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.all([Either.right(1), Either.right(2)]), Either.right([1, 2]))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.right(\"hello\") }), Either.right({ right: 1, b: \"hello\" }))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.left(\"error\") }), Either.left(\"error\"))\n * ```\n *\n * @category combining\n * @since 2.0.0\n */\n// @ts-expect-error\nexport const all: <const I extends Iterable<Either<any, any>> | Record<string, Either<any, any>>>(\n  input: I\n) => [I] extends [ReadonlyArray<Either<any, any>>] ? Either<\n    { -readonly [K in keyof I]: [I[K]] extends [Either<infer A, any>] ? A : never },\n    I[number] extends never ? never : [I[number]] extends [Either<any, infer E>] ? E : never\n  >\n  : [I] extends [Iterable<Either<infer A, infer E>>] ? Either<Array<A>, E>\n  : Either<\n    { -readonly [K in keyof I]: [I[K]] extends [Either<infer A, any>] ? A : never },\n    I[keyof I] extends never ? never : [I[keyof I]] extends [Either<any, infer E>] ? E : never\n  > = (\n    input: Iterable<Either<any, any>> | Record<string, Either<any, any>>\n  ): Either<any, any> => {\n    if (Symbol.iterator in input) {\n      const out: Array<Either<any, any>> = []\n      for (const e of input) {\n        if (isLeft(e)) {\n          return e\n        }\n        out.push(e.right)\n      }\n      return right(out)\n    }\n\n    const out: Record<string, any> = {}\n    for (const key of Object.keys(input)) {\n      const e = input[key]\n      if (isLeft(e)) {\n        return e\n      }\n      out[key] = e.right\n    }\n    return right(out)\n  }\n\n/**\n * Returns an `Either` that swaps the error/success cases. This allows you to\n * use all methods on the error channel, possibly before flipping back.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const flip = <A, E>(self: Either<A, E>): Either<E, A> => isLeft(self) ? right(self.left) : left(self.right)\n\nconst adapter = Gen.adapter<EitherTypeLambda>()\n\n/**\n * @category generators\n * @since 2.0.0\n */\nexport const gen: Gen.Gen<EitherTypeLambda, Gen.Adapter<EitherTypeLambda>> = (...args) => {\n  const f = args.length === 1 ? args[0] : args[1].bind(args[0])\n  const iterator = f(adapter)\n  let state: IteratorResult<any> = iterator.next()\n  while (!state.done) {\n    const current = Gen.isGenKind(state.value)\n      ? state.value.value\n      : Gen.yieldWrapGet(state.value)\n    if (isLeft(current)) {\n      return current\n    }\n    state = iterator.next(current.right as never)\n  }\n  return right(state.value) as any\n}\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link bind}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const Do: Either<{}> = right({})\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bind: {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <N extends string, A extends object, B, E2>(name: Exclude<N, keyof A>, f: (a: NoInfer<A>) => Either<B, E2>): <E>(self: Either<A, E>) => Either<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E | E2>\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <A extends object, E, N extends string, B, E2>(\n    self: Either<A, E>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => Either<B, E2>\n  ): Either<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E | E2>\n} = doNotation.bind<EitherTypeLambda>(map, flatMap)\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bindTo: {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <N extends string>(name: N): <A, E>(self: Either<A, E>) => Either<{ [K in N]: A }, E>\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <A, E, N extends string>(self: Either<A, E>, name: N): Either<{ [K in N]: A }, E>\n} = doNotation.bindTo<EitherTypeLambda>(map)\n\nconst let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (r: NoInfer<A>) => B\n  ): <E>(self: Either<A, E>) => Either<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E>\n  <A extends object, E, N extends string, B>(\n    self: Either<A, E>,\n    name: Exclude<N, keyof A>,\n    f: (r: NoInfer<A>) => B\n  ): Either<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E>\n} = doNotation.let_<EitherTypeLambda>(map)\n\nexport {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link bind}\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  let_ as let\n}\n\n/**\n * Converts an `Option` of an `Either` into an `Either` of an `Option`.\n *\n * **Details**\n *\n * This function transforms an `Option<Either<A, E>>` into an\n * `Either<Option<A>, E>`. If the `Option` is `None`, the resulting `Either`\n * will be a `Right` with a `None` value. If the `Option` is `Some`, the\n * inner `Either` will be executed, and its result wrapped in a `Some`.\n *\n * @example\n * ```ts\n * import { Effect, Either, Option } from \"effect\"\n *\n * //      ┌─── Option<Either<number, never>>\n * //      ▼\n * const maybe = Option.some(Either.right(42))\n *\n * //      ┌─── Either<Option<number>, never, never>\n * //      ▼\n * const result = Either.transposeOption(maybe)\n *\n * console.log(Effect.runSync(result))\n * // Output: { _id: 'Option', _tag: 'Some', value: 42 }\n * ```\n *\n * @since 3.14.0\n * @category Optional Wrapping & Unwrapping\n */\nexport const transposeOption = <A = never, E = never>(\n  self: Option<Either<A, E>>\n): Either<Option<A>, E> => {\n  return option_.isNone(self) ? right(option_.none) : map(self.value, option_.some)\n}\n\n/**\n * Applies an `Either` on an `Option` and transposes the result.\n *\n * **Details**\n *\n * If the `Option` is `None`, the resulting `Either` will immediately succeed with a `Right` value of `None`.\n * If the `Option` is `Some`, the transformation function will be applied to the inner value, and its result wrapped in a `Some`.\n *\n * @example\n * ```ts\n * import { Either, Option, pipe } from \"effect\"\n *\n * //          ┌─── Either<Option<number>, never>>\n * //          ▼\n * const noneResult = pipe(\n *   Option.none(),\n *   Either.transposeMapOption(() => Either.right(42)) // will not be executed\n * )\n * console.log(noneResult)\n * // Output: { _id: 'Either', _tag: 'Right', right: { _id: 'Option', _tag: 'None' } }\n *\n * //          ┌─── Either<Option<number>, never>>\n * //          ▼\n * const someRightResult = pipe(\n *   Option.some(42),\n *   Either.transposeMapOption((value) => Either.right(value * 2))\n * )\n * console.log(someRightResult)\n * // Output: { _id: 'Either', _tag: 'Right', right: { _id: 'Option', _tag: 'Some', value: 84 } }\n * ```\n *\n * @since 3.15.0\n * @category Optional Wrapping & Unwrapping\n */\nexport const transposeMapOption = dual<\n  /**\n   * Applies an `Either` on an `Option` and transposes the result.\n   *\n   * **Details**\n   *\n   * If the `Option` is `None`, the resulting `Either` will immediately succeed with a `Right` value of `None`.\n   * If the `Option` is `Some`, the transformation function will be applied to the inner value, and its result wrapped in a `Some`.\n   *\n   * @example\n   * ```ts\n   * import { Either, Option, pipe } from \"effect\"\n   *\n   * //          ┌─── Either<Option<number>, never>>\n   * //          ▼\n   * const noneResult = pipe(\n   *   Option.none(),\n   *   Either.transposeMapOption(() => Either.right(42)) // will not be executed\n   * )\n   * console.log(noneResult)\n   * // Output: { _id: 'Either', _tag: 'Right', right: { _id: 'Option', _tag: 'None' } }\n   *\n   * //          ┌─── Either<Option<number>, never>>\n   * //          ▼\n   * const someRightResult = pipe(\n   *   Option.some(42),\n   *   Either.transposeMapOption((value) => Either.right(value * 2))\n   * )\n   * console.log(someRightResult)\n   * // Output: { _id: 'Either', _tag: 'Right', right: { _id: 'Option', _tag: 'Some', value: 84 } }\n   * ```\n   *\n   * @since 3.15.0\n   * @category Optional Wrapping & Unwrapping\n   */\n  <A, B, E = never>(f: (self: A) => Either<B, E>) => (self: Option<A>) => Either<Option<B>, E>,\n  /**\n   * Applies an `Either` on an `Option` and transposes the result.\n   *\n   * **Details**\n   *\n   * If the `Option` is `None`, the resulting `Either` will immediately succeed with a `Right` value of `None`.\n   * If the `Option` is `Some`, the transformation function will be applied to the inner value, and its result wrapped in a `Some`.\n   *\n   * @example\n   * ```ts\n   * import { Either, Option, pipe } from \"effect\"\n   *\n   * //          ┌─── Either<Option<number>, never>>\n   * //          ▼\n   * const noneResult = pipe(\n   *   Option.none(),\n   *   Either.transposeMapOption(() => Either.right(42)) // will not be executed\n   * )\n   * console.log(noneResult)\n   * // Output: { _id: 'Either', _tag: 'Right', right: { _id: 'Option', _tag: 'None' } }\n   *\n   * //          ┌─── Either<Option<number>, never>>\n   * //          ▼\n   * const someRightResult = pipe(\n   *   Option.some(42),\n   *   Either.transposeMapOption((value) => Either.right(value * 2))\n   * )\n   * console.log(someRightResult)\n   * // Output: { _id: 'Either', _tag: 'Right', right: { _id: 'Option', _tag: 'Some', value: 84 } }\n   * ```\n   *\n   * @since 3.15.0\n   * @category Optional Wrapping & Unwrapping\n   */\n  <A, B, E = never>(self: Option<A>, f: (self: A) => Either<B, E>) => Either<Option<B>, E>\n>(2, (self, f) => option_.isNone(self) ? right(option_.none) : map(f(self.value), option_.some))\n", "/**\n * This module provides an implementation of the `Equivalence` type class, which defines a binary relation\n * that is reflexive, symmetric, and transitive. In other words, it defines a notion of equivalence between values of a certain type.\n * These properties are also known in mathematics as an \"equivalence relation\".\n *\n * @since 2.0.0\n */\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type class\n * @since 2.0.0\n */\nexport interface Equivalence<in A> {\n  (self: A, that: A): boolean\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface EquivalenceTypeLambda extends TypeLambda {\n  readonly type: Equivalence<this[\"Target\"]>\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A>(isEquivalent: (self: A, that: A) => boolean): Equivalence<A> => (self: A, that: A): boolean =>\n  self === that || isEquivalent(self, that)\n\nconst isStrictEquivalent = (x: unknown, y: unknown) => x === y\n\n/**\n * Return an `Equivalence` that uses strict equality (===) to compare values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const strict: <A>() => Equivalence<A> = () => isStrictEquivalent\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const string: Equivalence<string> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const number: Equivalence<number> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const boolean: Equivalence<boolean> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const bigint: Equivalence<bigint> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const symbol: Equivalence<symbol> = strict()\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combine: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(that: Equivalence<A>): (self: Equivalence<A>) => Equivalence<A>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(self: Equivalence<A>, that: Equivalence<A>): Equivalence<A>\n} = dual(2, <A>(self: Equivalence<A>, that: Equivalence<A>): Equivalence<A> => make((x, y) => self(x, y) && that(x, y)))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineMany: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(collection: Iterable<Equivalence<A>>): (self: Equivalence<A>) => Equivalence<A>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(self: Equivalence<A>, collection: Iterable<Equivalence<A>>): Equivalence<A>\n} = dual(2, <A>(self: Equivalence<A>, collection: Iterable<Equivalence<A>>): Equivalence<A> =>\n  make((x, y) => {\n    if (!self(x, y)) {\n      return false\n    }\n    for (const equivalence of collection) {\n      if (!equivalence(x, y)) {\n        return false\n      }\n    }\n    return true\n  }))\n\nconst isAlwaysEquivalent: Equivalence<unknown> = (_x, _y) => true\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineAll = <A>(collection: Iterable<Equivalence<A>>): Equivalence<A> =>\n  combineMany(isAlwaysEquivalent, collection)\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapInput: {\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <B, A>(f: (b: B) => A): (self: Equivalence<A>) => Equivalence<B>\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, B>(self: Equivalence<A>, f: (b: B) => A): Equivalence<B>\n} = dual(\n  2,\n  <A, B>(self: Equivalence<A>, f: (b: B) => A): Equivalence<B> => make((x, y) => self(f(x), f(y)))\n)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Date: Equivalence<Date> = mapInput(number, (date) => date.getTime())\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product: {\n  <B>(that: Equivalence<B>): <A>(self: Equivalence<A>) => Equivalence<readonly [A, B]> // readonly because invariant\n  <A, B>(self: Equivalence<A>, that: Equivalence<B>): Equivalence<readonly [A, B]> // readonly because invariant\n} = dual(\n  2,\n  <A, B>(self: Equivalence<A>, that: Equivalence<B>): Equivalence<readonly [A, B]> =>\n    make(([xa, xb], [ya, yb]) => self(xa, ya) && that(xb, yb))\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = <A>(collection: Iterable<Equivalence<A>>): Equivalence<ReadonlyArray<A>> => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length)\n\n    let collectionLength = 0\n    for (const equivalence of collection) {\n      if (collectionLength >= len) {\n        break\n      }\n      if (!equivalence(x[collectionLength], y[collectionLength])) {\n        return false\n      }\n      collectionLength++\n    }\n    return true\n  })\n}\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Equivalence<A>,\n  collection: Iterable<Equivalence<A>>\n): Equivalence<readonly [A, ...Array<A>]> /* readonly because invariant */ => {\n  const equivalence = all(collection)\n  return make((x, y) => !self(x[0], y[0]) ? false : equivalence(x.slice(1), y.slice(1)))\n}\n\n/**\n * Similar to `Promise.all` but operates on `Equivalence`s.\n *\n * ```ts skip-type-checking\n * [Equivalence<A>, Equivalence<B>, ...] -> Equivalence<[A, B, ...]>\n * ```\n *\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const tuple = <T extends ReadonlyArray<Equivalence<any>>>(\n  ...elements: T\n): Equivalence<Readonly<{ [I in keyof T]: [T[I]] extends [Equivalence<infer A>] ? A : never }>> => all(elements) as any\n\n/**\n * Creates a new `Equivalence` for an array of values based on a given `Equivalence` for the elements of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const array = <A>(item: Equivalence<A>): Equivalence<ReadonlyArray<A>> =>\n  make((self, that) => {\n    if (self.length !== that.length) {\n      return false\n    }\n\n    for (let i = 0; i < self.length; i++) {\n      const isEq = item(self[i], that[i])\n      if (!isEq) {\n        return false\n      }\n    }\n\n    return true\n  })\n\n/**\n * Given a struct of `Equivalence`s returns a new `Equivalence` that compares values of a struct\n * by applying each `Equivalence` to the corresponding property of the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const struct = <R extends Record<string, Equivalence<any>>>(\n  fields: R\n): Equivalence<{ readonly [K in keyof R]: [R[K]] extends [Equivalence<infer A>] ? A : never }> => {\n  const keys = Object.keys(fields)\n  return make((self, that) => {\n    for (const key of keys) {\n      if (!fields[key](self[key], that[key])) {\n        return false\n      }\n    }\n    return true\n  })\n}\n", "/**\n * @since 2.0.0\n */\n\nimport type * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport { dual } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport type { Option } from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport { EffectPrototype } from \"./effectable.js\"\nimport * as option from \"./option.js\"\n\n/**\n * @internal\n */\nexport const TypeId: Either.TypeId = Symbol.for(\"effect/Either\") as Either.TypeId\n\nconst CommonProto = {\n  ...EffectPrototype,\n  [TypeId]: {\n    _R: (_: never) => _\n  },\n  [NodeInspectSymbol]<L, R>(this: Either.Either<R, L>) {\n    return this.toJSON()\n  },\n  toString<L, R>(this: Either.Left<L, R>) {\n    return format(this.toJSON())\n  }\n}\n\nconst RightProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"Right\",\n  _op: \"Right\",\n  [Equal.symbol]<L, R>(this: Either.Right<L, R>, that: unknown): boolean {\n    return isEither(that) && isRight(that) && Equal.equals(this.right, that.right)\n  },\n  [Hash.symbol]<L, R>(this: Either.Right<L, R>) {\n    return Hash.combine(Hash.hash(this._tag))(Hash.hash(this.right))\n  },\n  toJSON<L, R>(this: Either.Right<L, R>) {\n    return {\n      _id: \"Either\",\n      _tag: this._tag,\n      right: toJSON(this.right)\n    }\n  }\n})\n\nconst LeftProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"Left\",\n  _op: \"Left\",\n  [Equal.symbol]<L, R>(this: Either.Left<L, R>, that: unknown): boolean {\n    return isEither(that) && isLeft(that) && Equal.equals(this.left, that.left)\n  },\n  [Hash.symbol]<L, R>(this: Either.Left<L, R>) {\n    return Hash.combine(Hash.hash(this._tag))(Hash.hash(this.left))\n  },\n  toJSON<E, A>(this: Either.Left<E, A>) {\n    return {\n      _id: \"Either\",\n      _tag: this._tag,\n      left: toJSON(this.left)\n    }\n  }\n})\n\n/** @internal */\nexport const isEither = (input: unknown): input is Either.Either<unknown, unknown> => hasProperty(input, TypeId)\n\n/** @internal */\nexport const isLeft = <R, L>(ma: Either.Either<R, L>): ma is Either.Left<L, R> => ma._tag === \"Left\"\n\n/** @internal */\nexport const isRight = <R, L>(ma: Either.Either<R, L>): ma is Either.Right<L, R> => ma._tag === \"Right\"\n\n/** @internal */\nexport const left = <L>(left: L): Either.Either<never, L> => {\n  const a = Object.create(LeftProto)\n  a.left = left\n  return a\n}\n\n/** @internal */\nexport const right = <R>(right: R): Either.Either<R> => {\n  const a = Object.create(RightProto)\n  a.right = right\n  return a\n}\n\n/** @internal */\nexport const getLeft = <R, L>(\n  self: Either.Either<R, L>\n): Option<L> => (isRight(self) ? option.none : option.some(self.left))\n\n/** @internal */\nexport const getRight = <R, L>(\n  self: Either.Either<R, L>\n): Option<R> => (isLeft(self) ? option.none : option.some(self.right))\n\n/** @internal */\nexport const fromOption: {\n  <L>(onNone: () => L): <R>(self: Option<R>) => Either.Either<R, L>\n  <R, L>(self: Option<R>, onNone: () => L): Either.Either<R, L>\n} = dual(\n  2,\n  <R, L>(self: Option<R>, onNone: () => L): Either.Either<R, L> =>\n    option.isNone(self) ? left(onNone()) : right(self.value)\n)\n", "/**\n * @since 2.0.0\n */\nimport type { Equivalence } from \"./Equivalence.js\"\nimport * as Hash from \"./Hash.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport { structuralRegionState } from \"./Utils.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const symbol: unique symbol = Symbol.for(\"effect/Equal\")\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Equal extends Hash.Hash {\n  [symbol](that: Equal): boolean\n}\n\n/**\n * @since 2.0.0\n * @category equality\n */\nexport function equals<B>(that: B): <A>(self: A) => boolean\nexport function equals<A, B>(self: A, that: B): boolean\nexport function equals(): any {\n  if (arguments.length === 1) {\n    return (self: unknown) => compareBoth(self, arguments[0])\n  }\n  return compareBoth(arguments[0], arguments[1])\n}\n\nfunction compareBoth(self: unknown, that: unknown): boolean {\n  if (self === that) {\n    return true\n  }\n  const selfType = typeof self\n  if (selfType !== typeof that) {\n    return false\n  }\n  if (selfType === \"object\" || selfType === \"function\") {\n    if (self !== null && that !== null) {\n      if (isEqual(self) && isEqual(that)) {\n        if (Hash.hash(self) === Hash.hash(that) && self[symbol](that)) {\n          return true\n        } else {\n          return structuralRegionState.enabled && structuralRegionState.tester\n            ? structuralRegionState.tester(self, that)\n            : false\n        }\n      } else if (self instanceof Date && that instanceof Date) {\n        return self.toISOString() === that.toISOString()\n      } else if (self instanceof URL && that instanceof URL) {\n        return self.href === that.href\n      }\n    }\n    if (structuralRegionState.enabled) {\n      if (Array.isArray(self) && Array.isArray(that)) {\n        return self.length === that.length && self.every((v, i) => compareBoth(v, that[i]))\n      }\n      if (Object.getPrototypeOf(self) === Object.prototype && Object.getPrototypeOf(self) === Object.prototype) {\n        const keysSelf = Object.keys(self as any)\n        const keysThat = Object.keys(that as any)\n        if (keysSelf.length === keysThat.length) {\n          for (const key of keysSelf) {\n            // @ts-expect-error\n            if (!(key in that && compareBoth(self[key], that[key]))) {\n              return structuralRegionState.tester ? structuralRegionState.tester(self, that) : false\n            }\n          }\n          return true\n        }\n      }\n      return structuralRegionState.tester ? structuralRegionState.tester(self, that) : false\n    }\n  }\n\n  return structuralRegionState.enabled && structuralRegionState.tester\n    ? structuralRegionState.tester(self, that)\n    : false\n}\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isEqual = (u: unknown): u is Equal => hasProperty(u, symbol)\n\n/**\n * @since 2.0.0\n * @category instances\n */\nexport const equivalence: <A>() => Equivalence<A> = () => equals\n", "/**\n * @since 2.0.0\n */\nimport { pipe } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport { structuralRegionState } from \"./Utils.js\"\n\n/** @internal */\nconst randomHashCache = globalValue(\n  Symbol.for(\"effect/Hash/randomHashCache\"),\n  () => new WeakMap<object, number>()\n)\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const symbol: unique symbol = Symbol.for(\"effect/Hash\")\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Hash {\n  [symbol](): number\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const hash: <A>(self: A) => number = <A>(self: A) => {\n  if (structuralRegionState.enabled === true) {\n    return 0\n  }\n\n  switch (typeof self) {\n    case \"number\":\n      return number(self)\n    case \"bigint\":\n      return string(self.toString(10))\n    case \"boolean\":\n      return string(String(self))\n    case \"symbol\":\n      return string(String(self))\n    case \"string\":\n      return string(self)\n    case \"undefined\":\n      return string(\"undefined\")\n    case \"function\":\n    case \"object\": {\n      if (self === null) {\n        return string(\"null\")\n      } else if (self instanceof Date) {\n        return hash(self.toISOString())\n      } else if (self instanceof URL) {\n        return hash(self.href)\n      } else if (isHash(self)) {\n        return self[symbol]()\n      } else {\n        return random(self)\n      }\n    }\n    default:\n      throw new Error(\n        `BUG: unhandled typeof ${typeof self} - please report an issue at https://github.com/Effect-TS/effect/issues`\n      )\n  }\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const random: <A extends object>(self: A) => number = (self) => {\n  if (!randomHashCache.has(self)) {\n    randomHashCache.set(self, number(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)))\n  }\n  return randomHashCache.get(self)!\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const combine: (b: number) => (self: number) => number = (b) => (self) => (self * 53) ^ b\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const optimize = (n: number): number => (n & 0xbfffffff) | ((n >>> 1) & 0x40000000)\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isHash = (u: unknown): u is Hash => hasProperty(u, symbol)\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const number = (n: number) => {\n  if (n !== n || n === Infinity) {\n    return 0\n  }\n  let h = n | 0\n  if (h !== n) {\n    h ^= n * 0xffffffff\n  }\n  while (n > 0xffffffff) {\n    h ^= n /= 0xffffffff\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const string = (str: string) => {\n  let h = 5381, i = str.length\n  while (i) {\n    h = (h * 33) ^ str.charCodeAt(--i)\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const structureKeys = <A extends object>(o: A, keys: ReadonlyArray<keyof A>) => {\n  let h = 12289\n  for (let i = 0; i < keys.length; i++) {\n    h ^= pipe(string(keys[i]! as string), combine(hash((o as any)[keys[i]!])))\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const structure = <A extends object>(o: A) =>\n  structureKeys(o, Object.keys(o) as unknown as ReadonlyArray<keyof A>)\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const array = <A>(arr: ReadonlyArray<A>) => {\n  let h = 6151\n  for (let i = 0; i < arr.length; i++) {\n    h = pipe(h, combine(hash(arr[i])))\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const cached: {\n  /**\n   * @since 2.0.0\n   * @category hashing\n   */\n  (self: object): (hash: number) => number\n  /**\n   * @since 2.0.0\n   * @category hashing\n   */\n  (self: object, hash: number): number\n} = function() {\n  if (arguments.length === 1) {\n    const self = arguments[0] as object\n    return function(hash: number) {\n      Object.defineProperty(self, symbol, {\n        value() {\n          return hash\n        },\n        enumerable: false\n      })\n      return hash\n    } as any\n  }\n  const self = arguments[0] as object\n  const hash = arguments[1] as number\n  Object.defineProperty(self, symbol, {\n    value() {\n      return hash\n    },\n    enumerable: false\n  })\n\n  return hash\n}\n", "/**\n * The `GlobalValue` module ensures that a single instance of a value is created globally,\n * even when modules are imported multiple times (e.g., due to mixing CommonJS and ESM builds)\n * or during hot-reloading in development environments like Next.js or Remix.\n *\n * It achieves this by using a versioned global store, identified by a unique `Symbol` tied to\n * the current version of the `effect` library. The store holds values that are keyed by an identifier,\n * allowing the reuse of previously computed instances across imports or reloads.\n *\n * This pattern is particularly useful in scenarios where frequent reloading can cause services or\n * single-instance objects to be recreated unnecessarily, such as in development environments with hot-reloading.\n *\n * @since 2.0.0\n */\nconst globalStoreId = `effect/GlobalValue`\n\nlet globalStore: Map<unknown, any>\n\n/**\n * Retrieves or computes a global value associated with the given `id`. If the value for this `id`\n * has already been computed, it will be returned from the global store. If it does not exist yet,\n * the provided `compute` function will be executed to compute the value, store it, and then return it.\n *\n * This ensures that even in cases where the module is imported multiple times (e.g., in mixed environments\n * like CommonJS and ESM, or during hot-reloading in development), the value is computed only once and reused\n * thereafter.\n *\n * @example\n * ```ts\n * import { globalValue } from \"effect/GlobalValue\"\n *\n * // This cache will persist as long as the module is running,\n * // even if reloaded or imported elsewhere\n * const myCache = globalValue(\n *   Symbol.for(\"myCache\"),\n *   () => new WeakMap<object, number>()\n * )\n * ```\n *\n * @since 2.0.0\n */\nexport const globalValue = <A>(id: unknown, compute: () => A): A => {\n  if (!globalStore) {\n    // @ts-expect-error\n    globalThis[globalStoreId] ??= new Map()\n    // @ts-expect-error\n    globalStore = globalThis[globalStoreId] as Map<unknown, any>\n  }\n  if (!globalStore.has(id)) {\n    globalStore.set(id, compute())\n  }\n  return globalStore.get(id)!\n}\n", "/**\n * This module provides a collection of functions for working with predicates and refinements.\n *\n * A `Predicate<A>` is a function that takes a value of type `A` and returns a boolean.\n * It is used to check if a value satisfies a certain condition.\n *\n * A `Refinement<A, B>` is a special type of predicate that not only checks a condition\n * but also provides a type guard, allowing TypeScript to narrow the type of the input\n * value from `A` to a more specific type `B` within a conditional block.\n *\n * The module includes:\n * - Basic predicates and refinements for common types (e.g., `isString`, `isNumber`).\n * - Combinators to create new predicates from existing ones (e.g., `and`, `or`, `not`).\n * - Advanced combinators for working with data structures (e.g., `tuple`, `struct`).\n * - Type-level utilities for inspecting predicate and refinement types.\n *\n * @since 2.0.0\n */\nimport { dual, isFunction as isFunction_ } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { TupleOf, TupleOfAtLeast } from \"./Types.js\"\n\n/**\n * Represents a function that takes a value of type `A` and returns `true` if the value\n * satisfies some condition, `false` otherwise.\n *\n * @example\n * ```ts\n * import { Predicate } from \"effect\"\n * import * as assert from \"node:assert\"\n *\n * const isEven: Predicate.Predicate<number> = (n) => n % 2 === 0\n *\n * assert.strictEqual(isEven(2), true)\n * assert.strictEqual(isEven(3), false)\n * ```\n *\n * @category models\n * @since 2.0.0\n */\nexport interface Predicate<in A> {\n  (a: A): boolean\n}\n\n/**\n * A `TypeLambda` for `Predicate`. This is used to support higher-kinded types\n * and allows `Predicate` to be used in generic contexts within the `effect` ecosystem.\n *\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface PredicateTypeLambda extends TypeLambda {\n  readonly type: Predicate<this[\"Target\"]>\n}\n\n/**\n * Represents a function that serves as a type guard.\n *\n * A `Refinement<A, B>` is a function that takes a value of type `A` and returns a\n * type predicate `a is B`, where `B` is a subtype of `A`. If the function returns\n * `true`, TypeScript will narrow the type of the input variable to `B`.\n *\n * @example\n * ```ts\n * import { Predicate } from \"effect\"\n * import * as assert from \"node:assert\"\n *\n * const isString: Predicate.Refinement<unknown, string> = (u): u is string => typeof u === \"string\"\n *\n * const value: unknown = \"hello\"\n *\n * if (isString(value)) {\n *   // value is now known to be a string\n *   assert.strictEqual(value.toUpperCase(), \"HELLO\")\n * }\n * ```\n *\n * @category models\n * @since 2.0.0\n */\nexport interface Refinement<in A, out B extends A> {\n  (a: A): a is B\n}\n\n/**\n * A namespace for type-level utilities for `Predicate`.\n *\n * @since 3.6.0\n * @category type-level\n */\nexport declare namespace Predicate {\n  /**\n   * Extracts the input type `A` from a `Predicate<A>`.\n   *\n   * @example\n   * ```ts\n   * import { type Predicate } from \"effect\"\n   *\n   * type T = Predicate.Predicate.In<Predicate.Predicate<string>> // T is string\n   * ```\n   *\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type In<T extends Any> = [T] extends [Predicate<infer _A>] ? _A : never\n  /**\n   * A type representing any `Predicate`.\n   *\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type Any = Predicate<never>\n}\n\n/**\n * A namespace for type-level utilities for `Refinement`.\n *\n * @since 3.6.0\n * @category type-level\n */\nexport declare namespace Refinement {\n  /**\n   * Extracts the input type `A` from a `Refinement<A, B>`.\n   *\n   * @example\n   * ```ts\n   * import { type Predicate } from \"effect\"\n   *\n   * type IsString = Predicate.Refinement<unknown, string>\n   * type T = Predicate.Refinement.In<IsString> // T is unknown\n   * ```\n   *\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type In<T extends Any> = [T] extends [Refinement<infer _A, infer _>] ? _A : never\n  /**\n   * Extracts the output (refined) type `B` from a `Refinement<A, B>`.\n   *\n   * @example\n   * ```ts\n   * import { type Predicate } from \"effect\"\n   *\n   * type IsString = Predicate.Refinement<unknown, string>\n   * type T = Predicate.Refinement.Out<IsString> // T is string\n   * ```\n   *\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type Out<T extends Any> = [T] extends [Refinement<infer _, infer _B>] ? _B : never\n  /**\n   * A type representing any `Refinement`.\n   *\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type Any = Refinement<any, any>\n}\n\n/**\n * Transforms a `Predicate<A>` into a `Predicate<B>` by applying a function `(b: B) => A`\n * to the input before passing it to the predicate. This is also known as \"contramap\" or\n * \"pre-composition\".\n *\n * @example\n * ```ts\n * import { Predicate, Number } from \"effect\"\n * import * as assert from \"node:assert\"\n *\n * // A predicate on numbers\n * const isPositive: Predicate.Predicate<number> = Number.greaterThan(0)\n *\n * // A function from `string` to `number`\n * const stringLength = (s: string): number => s.length\n *\n * // Create a new predicate on strings by mapping the input\n * const hasPositiveLength = Predicate.mapInput(isPositive, stringLength)\n *\n * assert.strictEqual(hasPositiveLength(\"hello\"), true)\n * assert.strictEqual(hasPositiveLength(\"\"), false)\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const mapInput: {\n  /**\n   * Transforms a `Predicate<A>` into a `Predicate<B>` by applying a function `(b: B) => A`\n   * to the input before passing it to the predicate. This is also known as \"contramap\" or\n   * \"pre-composition\".\n   *\n   * @example\n   * ```ts\n   * import { Predicate, Number } from \"effect\"\n   * import * as assert from \"node:assert\"\n   *\n   * // A predicate on numbers\n   * const isPositive: Predicate.Predicate<number> = Number.greaterThan(0)\n   *\n   * // A function from `string` to `number`\n   * const stringLength = (s: string): number => s.length\n   *\n   * // Create a new predicate on strings by mapping the input\n   * const hasPositiveLength = Predicate.mapInput(isPositive, stringLength)\n   *\n   * assert.strictEqual(hasPositiveLength(\"hello\"), true)\n   * assert.strictEqual(hasPositiveLength(\"\"), false)\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <B, A>(f: (b: B) => A): (self: Predicate<A>) => Predicate<B>\n  /**\n   * Transforms a `Predicate<A>` into a `Predicate<B>` by applying a function `(b: B) => A`\n   * to the input before passing it to the predicate. This is also known as \"contramap\" or\n   * \"pre-composition\".\n   *\n   * @example\n   * ```ts\n   * import { Predicate, Number } from \"effect\"\n   * import * as assert from \"node:assert\"\n   *\n   * // A predicate on numbers\n   * const isPositive: Predicate.Predicate<number> = Number.greaterThan(0)\n   *\n   * // A function from `string` to `number`\n   * const stringLength = (s: string): number => s.length\n   *\n   * // Create a new predicate on strings by mapping the input\n   * const hasPositiveLength = Predicate.mapInput(isPositive, stringLength)\n   *\n   * assert.strictEqual(hasPositiveLength(\"hello\"), true)\n   * assert.strictEqual(hasPositiveLength(\"\"), false)\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A, B>(self: Predicate<A>, f: (b: B) => A): Predicate<B>\n} = dual(2, <A, B>(self: Predicate<A>, f: (b: B) => A): Predicate<B> => (b) => self(f(b)))\n\n/**\n * A refinement that checks if a `ReadonlyArray<T>` is a tuple with exactly `N` elements.\n * If the check is successful, the type is narrowed to `TupleOf<N, T>`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isTupleOf } from \"effect/Predicate\"\n *\n * const isTupleOf3 = isTupleOf(3)\n *\n * assert.strictEqual(isTupleOf3([1, 2, 3]), true);\n * assert.strictEqual(isTupleOf3([1, 2]), false);\n *\n * const arr: number[] = [1, 2, 3];\n * if (isTupleOf(arr, 3)) {\n *   // The type of arr is now [number, number, number]\n *   const [a, b, c] = arr;\n *   assert.deepStrictEqual([a, b, c], [1, 2, 3])\n * }\n * ```\n *\n * @category guards\n * @since 3.3.0\n */\nexport const isTupleOf: {\n  /**\n   * A refinement that checks if a `ReadonlyArray<T>` is a tuple with exactly `N` elements.\n   * If the check is successful, the type is narrowed to `TupleOf<N, T>`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTupleOf } from \"effect/Predicate\"\n   *\n   * const isTupleOf3 = isTupleOf(3)\n   *\n   * assert.strictEqual(isTupleOf3([1, 2, 3]), true);\n   * assert.strictEqual(isTupleOf3([1, 2]), false);\n   *\n   * const arr: number[] = [1, 2, 3];\n   * if (isTupleOf(arr, 3)) {\n   *   // The type of arr is now [number, number, number]\n   *   const [a, b, c] = arr;\n   *   assert.deepStrictEqual([a, b, c], [1, 2, 3])\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  <N extends number>(n: N): <T>(self: ReadonlyArray<T>) => self is TupleOf<N, T>\n  /**\n   * A refinement that checks if a `ReadonlyArray<T>` is a tuple with exactly `N` elements.\n   * If the check is successful, the type is narrowed to `TupleOf<N, T>`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTupleOf } from \"effect/Predicate\"\n   *\n   * const isTupleOf3 = isTupleOf(3)\n   *\n   * assert.strictEqual(isTupleOf3([1, 2, 3]), true);\n   * assert.strictEqual(isTupleOf3([1, 2]), false);\n   *\n   * const arr: number[] = [1, 2, 3];\n   * if (isTupleOf(arr, 3)) {\n   *   // The type of arr is now [number, number, number]\n   *   const [a, b, c] = arr;\n   *   assert.deepStrictEqual([a, b, c], [1, 2, 3])\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOf<N, T>\n} = dual(2, <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOf<N, T> => self.length === n)\n\n/**\n * A refinement that checks if a `ReadonlyArray<T>` is a tuple with at least `N` elements.\n * If the check is successful, the type is narrowed to `TupleOfAtLeast<N, T>`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isTupleOfAtLeast } from \"effect/Predicate\"\n *\n * const isTupleOfAtLeast3 = isTupleOfAtLeast(3)\n *\n * assert.strictEqual(isTupleOfAtLeast3([1, 2, 3]), true);\n * assert.strictEqual(isTupleOfAtLeast3([1, 2, 3, 4]), true);\n * assert.strictEqual(isTupleOfAtLeast3([1, 2]), false);\n *\n * const arr: number[] = [1, 2, 3, 4];\n * if (isTupleOfAtLeast(arr, 3)) {\n *   // The type of arr is now [number, number, number, ...number[]]\n *   const [a, b, c] = arr;\n *   assert.deepStrictEqual([a, b, c], [1, 2, 3])\n * }\n * ```\n *\n * @category guards\n * @since 3.3.0\n */\nexport const isTupleOfAtLeast: {\n  /**\n   * A refinement that checks if a `ReadonlyArray<T>` is a tuple with at least `N` elements.\n   * If the check is successful, the type is narrowed to `TupleOfAtLeast<N, T>`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTupleOfAtLeast } from \"effect/Predicate\"\n   *\n   * const isTupleOfAtLeast3 = isTupleOfAtLeast(3)\n   *\n   * assert.strictEqual(isTupleOfAtLeast3([1, 2, 3]), true);\n   * assert.strictEqual(isTupleOfAtLeast3([1, 2, 3, 4]), true);\n   * assert.strictEqual(isTupleOfAtLeast3([1, 2]), false);\n   *\n   * const arr: number[] = [1, 2, 3, 4];\n   * if (isTupleOfAtLeast(arr, 3)) {\n   *   // The type of arr is now [number, number, number, ...number[]]\n   *   const [a, b, c] = arr;\n   *   assert.deepStrictEqual([a, b, c], [1, 2, 3])\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  <N extends number>(n: N): <T>(self: ReadonlyArray<T>) => self is TupleOfAtLeast<N, T>\n  /**\n   * A refinement that checks if a `ReadonlyArray<T>` is a tuple with at least `N` elements.\n   * If the check is successful, the type is narrowed to `TupleOfAtLeast<N, T>`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTupleOfAtLeast } from \"effect/Predicate\"\n   *\n   * const isTupleOfAtLeast3 = isTupleOfAtLeast(3)\n   *\n   * assert.strictEqual(isTupleOfAtLeast3([1, 2, 3]), true);\n   * assert.strictEqual(isTupleOfAtLeast3([1, 2, 3, 4]), true);\n   * assert.strictEqual(isTupleOfAtLeast3([1, 2]), false);\n   *\n   * const arr: number[] = [1, 2, 3, 4];\n   * if (isTupleOfAtLeast(arr, 3)) {\n   *   // The type of arr is now [number, number, number, ...number[]]\n   *   const [a, b, c] = arr;\n   *   assert.deepStrictEqual([a, b, c], [1, 2, 3])\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOfAtLeast<N, T>\n} = dual(2, <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOfAtLeast<N, T> => self.length >= n)\n\n/**\n * A predicate that checks if a value is \"truthy\" in JavaScript.\n * Fails for `false`, `0`, `-0`, `0n`, `\"\"`, `null`, `undefined`, and `NaN`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isTruthy } from \"effect/Predicate\"\n *\n * assert.strictEqual(isTruthy(1), true)\n * assert.strictEqual(isTruthy(\"hello\"), true)\n * assert.strictEqual(isTruthy({}), true)\n *\n * assert.strictEqual(isTruthy(0), false)\n * assert.strictEqual(isTruthy(\"\"), false)\n * assert.strictEqual(isTruthy(null), false)\n * assert.strictEqual(isTruthy(undefined), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isTruthy = (input: unknown) => !!input\n\n/**\n * A refinement that checks if a value is a `Set`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isSet } from \"effect/Predicate\"\n *\n * assert.strictEqual(isSet(new Set([1, 2])), true)\n * assert.strictEqual(isSet(new Set()), true)\n *\n * assert.strictEqual(isSet({}), false)\n * assert.strictEqual(isSet([1, 2]), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSet = (input: unknown): input is Set<unknown> => input instanceof Set\n\n/**\n * A refinement that checks if a value is a `Map`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isMap } from \"effect/Predicate\"\n *\n * assert.strictEqual(isMap(new Map()), true)\n *\n * assert.strictEqual(isMap({}), false)\n * assert.strictEqual(isMap(new Set()), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isMap = (input: unknown): input is Map<unknown, unknown> => input instanceof Map\n\n/**\n * A refinement that checks if a value is a `string`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isString } from \"effect/Predicate\"\n *\n * assert.strictEqual(isString(\"hello\"), true)\n * assert.strictEqual(isString(\"\"), true)\n *\n * assert.strictEqual(isString(123), false)\n * assert.strictEqual(isString(null), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isString = (input: unknown): input is string => typeof input === \"string\"\n\n/**\n * A refinement that checks if a value is a `number`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNumber } from \"effect/Predicate\"\n *\n * assert.strictEqual(isNumber(123), true)\n * assert.strictEqual(isNumber(0), true)\n * assert.strictEqual(isNumber(-1.5), true)\n * assert.strictEqual(isNumber(NaN), true)\n *\n * assert.strictEqual(isNumber(\"123\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNumber = (input: unknown): input is number => typeof input === \"number\"\n\n/**\n * A refinement that checks if a value is a `boolean`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isBoolean } from \"effect/Predicate\"\n *\n * assert.strictEqual(isBoolean(true), true)\n * assert.strictEqual(isBoolean(false), true)\n *\n * assert.strictEqual(isBoolean(\"true\"), false)\n * assert.strictEqual(isBoolean(0), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBoolean = (input: unknown): input is boolean => typeof input === \"boolean\"\n\n/**\n * A refinement that checks if a value is a `bigint`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isBigInt } from \"effect/Predicate\"\n *\n * assert.strictEqual(isBigInt(1n), true)\n *\n * assert.strictEqual(isBigInt(1), false)\n * assert.strictEqual(isBigInt(\"1\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBigInt = (input: unknown): input is bigint => typeof input === \"bigint\"\n\n/**\n * A refinement that checks if a value is a `symbol`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isSymbol } from \"effect/Predicate\"\n *\n * assert.strictEqual(isSymbol(Symbol.for(\"a\")), true)\n *\n * assert.strictEqual(isSymbol(\"a\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSymbol = (input: unknown): input is symbol => typeof input === \"symbol\"\n\n// TODO: make public\n/**\n * A refinement that checks if a value is a valid `PropertyKey` (a `string`, `number`, or `symbol`).\n * @internal\n */\nexport const isPropertyKey = (u: unknown): u is PropertyKey => isString(u) || isNumber(u) || isSymbol(u)\n\n/**\n * A refinement that checks if a value is a `Function`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.strictEqual(isFunction(() => {}), true)\n * assert.strictEqual(isFunction(isFunction), true)\n *\n * assert.strictEqual(isFunction(\"function\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isFunction: (input: unknown) => input is Function = isFunction_\n\n/**\n * A refinement that checks if a value is `undefined`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isUndefined } from \"effect/Predicate\"\n *\n * assert.strictEqual(isUndefined(undefined), true)\n *\n * assert.strictEqual(isUndefined(null), false)\n * assert.strictEqual(isUndefined(\"undefined\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUndefined = (input: unknown): input is undefined => input === undefined\n\n/**\n * A refinement that checks if a value is not `undefined`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNotUndefined } from \"effect/Predicate\"\n *\n * assert.strictEqual(isNotUndefined(null), true)\n * assert.strictEqual(isNotUndefined(\"value\"), true)\n *\n * assert.strictEqual(isNotUndefined(undefined), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotUndefined = <A>(input: A): input is Exclude<A, undefined> => input !== undefined\n\n/**\n * A refinement that checks if a value is `null`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNull } from \"effect/Predicate\"\n *\n * assert.strictEqual(isNull(null), true)\n *\n * assert.strictEqual(isNull(undefined), false)\n * assert.strictEqual(isNull(\"null\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNull = (input: unknown): input is null => input === null\n\n/**\n * A refinement that checks if a value is not `null`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNotNull } from \"effect/Predicate\"\n *\n * assert.strictEqual(isNotNull(undefined), true)\n * assert.strictEqual(isNotNull(\"value\"), true)\n *\n * assert.strictEqual(isNotNull(null), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotNull = <A>(input: A): input is Exclude<A, null> => input !== null\n\n/**\n * A refinement that always returns `false`. The type is narrowed to `never`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNever } from \"effect/Predicate\"\n *\n * assert.strictEqual(isNever(1), false)\n * assert.strictEqual(isNever(null), false)\n * assert.strictEqual(isNever({}), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNever: (input: unknown) => input is never = (_: unknown): _ is never => false\n\n/**\n * A refinement that always returns `true`. The type is narrowed to `unknown`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isUnknown } from \"effect/Predicate\"\n *\n * assert.strictEqual(isUnknown(1), true)\n * assert.strictEqual(isUnknown(null), true)\n * assert.strictEqual(isUnknown({}), true)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUnknown: (input: unknown) => input is unknown = (_): _ is unknown => true\n\n/**\n * Checks if the input is an object or an array.\n * @internal\n */\nexport const isRecordOrArray = (input: unknown): input is { [x: PropertyKey]: unknown } =>\n  typeof input === \"object\" && input !== null\n\n/**\n * A refinement that checks if a value is an `object`. Note that in JavaScript,\n * arrays and functions are also considered objects.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isObject } from \"effect/Predicate\"\n *\n * assert.strictEqual(isObject({}), true)\n * assert.strictEqual(isObject([]), true)\n * assert.strictEqual(isObject(() => {}), true)\n *\n * assert.strictEqual(isObject(null), false)\n * assert.strictEqual(isObject(\"hello\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n * @see isRecord to check for plain objects (excluding arrays and functions).\n */\nexport const isObject = (input: unknown): input is object => isRecordOrArray(input) || isFunction(input)\n\n/**\n * A refinement that checks if a value is an object-like value and has a specific property key.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { hasProperty } from \"effect/Predicate\"\n *\n * assert.strictEqual(hasProperty({ a: 1 }, \"a\"), true)\n * assert.strictEqual(hasProperty({ a: 1 }, \"b\"), false)\n *\n * const value: unknown = { name: \"Alice\" };\n * if (hasProperty(value, \"name\")) {\n *   // The type of `value` is narrowed to `{ name: unknown }`\n *   // and we can safely access `value.name`\n *   console.log(value.name)\n * }\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const hasProperty: {\n  /**\n   * A refinement that checks if a value is an object-like value and has a specific property key.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { hasProperty } from \"effect/Predicate\"\n   *\n   * assert.strictEqual(hasProperty({ a: 1 }, \"a\"), true)\n   * assert.strictEqual(hasProperty({ a: 1 }, \"b\"), false)\n   *\n   * const value: unknown = { name: \"Alice\" };\n   * if (hasProperty(value, \"name\")) {\n   *   // The type of `value` is narrowed to `{ name: unknown }`\n   *   // and we can safely access `value.name`\n   *   console.log(value.name)\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  <P extends PropertyKey>(property: P): (self: unknown) => self is { [K in P]: unknown }\n  /**\n   * A refinement that checks if a value is an object-like value and has a specific property key.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { hasProperty } from \"effect/Predicate\"\n   *\n   * assert.strictEqual(hasProperty({ a: 1 }, \"a\"), true)\n   * assert.strictEqual(hasProperty({ a: 1 }, \"b\"), false)\n   *\n   * const value: unknown = { name: \"Alice\" };\n   * if (hasProperty(value, \"name\")) {\n   *   // The type of `value` is narrowed to `{ name: unknown }`\n   *   // and we can safely access `value.name`\n   *   console.log(value.name)\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  <P extends PropertyKey>(self: unknown, property: P): self is { [K in P]: unknown }\n} = dual(\n  2,\n  <P extends PropertyKey>(self: unknown, property: P): self is { [K in P]: unknown } =>\n    isObject(self) && (property in self)\n)\n\n/**\n * A refinement that checks if a value is an object with a `_tag` property\n * that matches the given tag. This is a powerful tool for working with\n * discriminated union types.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isTagged } from \"effect/Predicate\"\n *\n * type Shape = { _tag: \"circle\"; radius: number } | { _tag: \"square\"; side: number }\n *\n * const isCircle = isTagged(\"circle\")\n *\n * const shape1: Shape = { _tag: \"circle\", radius: 10 }\n * const shape2: Shape = { _tag: \"square\", side: 5 }\n *\n * assert.strictEqual(isCircle(shape1), true)\n * assert.strictEqual(isCircle(shape2), false)\n *\n * if (isCircle(shape1)) {\n *   // shape1 is now narrowed to { _tag: \"circle\"; radius: number }\n *   assert.strictEqual(shape1.radius, 10)\n * }\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isTagged: {\n  /**\n   * A refinement that checks if a value is an object with a `_tag` property\n   * that matches the given tag. This is a powerful tool for working with\n   * discriminated union types.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTagged } from \"effect/Predicate\"\n   *\n   * type Shape = { _tag: \"circle\"; radius: number } | { _tag: \"square\"; side: number }\n   *\n   * const isCircle = isTagged(\"circle\")\n   *\n   * const shape1: Shape = { _tag: \"circle\", radius: 10 }\n   * const shape2: Shape = { _tag: \"square\", side: 5 }\n   *\n   * assert.strictEqual(isCircle(shape1), true)\n   * assert.strictEqual(isCircle(shape2), false)\n   *\n   * if (isCircle(shape1)) {\n   *   // shape1 is now narrowed to { _tag: \"circle\"; radius: number }\n   *   assert.strictEqual(shape1.radius, 10)\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  <K extends string>(tag: K): (self: unknown) => self is { _tag: K }\n  /**\n   * A refinement that checks if a value is an object with a `_tag` property\n   * that matches the given tag. This is a powerful tool for working with\n   * discriminated union types.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTagged } from \"effect/Predicate\"\n   *\n   * type Shape = { _tag: \"circle\"; radius: number } | { _tag: \"square\"; side: number }\n   *\n   * const isCircle = isTagged(\"circle\")\n   *\n   * const shape1: Shape = { _tag: \"circle\", radius: 10 }\n   * const shape2: Shape = { _tag: \"square\", side: 5 }\n   *\n   * assert.strictEqual(isCircle(shape1), true)\n   * assert.strictEqual(isCircle(shape2), false)\n   *\n   * if (isCircle(shape1)) {\n   *   // shape1 is now narrowed to { _tag: \"circle\"; radius: number }\n   *   assert.strictEqual(shape1.radius, 10)\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  <K extends string>(self: unknown, tag: K): self is { _tag: K }\n} = dual(\n  2,\n  <K extends string>(self: unknown, tag: K): self is { _tag: K } => hasProperty(self, \"_tag\") && self[\"_tag\"] === tag\n)\n\n/**\n * A refinement that checks if a value is either `null` or `undefined`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNullable } from \"effect/Predicate\"\n *\n * assert.strictEqual(isNullable(null), true)\n * assert.strictEqual(isNullable(undefined), true)\n *\n * assert.strictEqual(isNullable(0), false)\n * assert.strictEqual(isNullable(\"\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n * @see isNotNullable\n */\nexport const isNullable = <A>(input: A): input is Extract<A, null | undefined> => input === null || input === undefined\n\n/**\n * A refinement that checks if a value is neither `null` nor `undefined`.\n * The type is narrowed to `NonNullable<A>`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNotNullable } from \"effect/Predicate\"\n *\n * assert.strictEqual(isNotNullable(0), true)\n * assert.strictEqual(isNotNullable(\"hello\"), true)\n *\n * assert.strictEqual(isNotNullable(null), false)\n * assert.strictEqual(isNotNullable(undefined), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n * @see isNullable\n */\nexport const isNotNullable = <A>(input: A): input is NonNullable<A> => input !== null && input !== undefined\n\n/**\n * A refinement that checks if a value is an instance of `Error`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isError } from \"effect/Predicate\"\n *\n * assert.strictEqual(isError(new Error(\"boom\")), true)\n * assert.strictEqual(isError(new TypeError(\"boom\")), true)\n *\n * assert.strictEqual(isError({ message: \"boom\" }), false)\n * assert.strictEqual(isError(\"boom\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isError = (input: unknown): input is Error => input instanceof Error\n\n/**\n * A refinement that checks if a value is a `Uint8Array`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isUint8Array } from \"effect/Predicate\"\n *\n * assert.strictEqual(isUint8Array(new Uint8Array()), true)\n *\n * assert.strictEqual(isUint8Array(new Uint16Array()), false)\n * assert.strictEqual(isUint8Array([1, 2, 3]), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUint8Array = (input: unknown): input is Uint8Array => input instanceof Uint8Array\n\n/**\n * A refinement that checks if a value is a `Date` object.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isDate } from \"effect/Predicate\"\n *\n * assert.strictEqual(isDate(new Date()), true)\n *\n * assert.strictEqual(isDate(Date.now()), false) // `Date.now()` returns a number\n * assert.strictEqual(isDate(\"2023-01-01\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isDate = (input: unknown): input is Date => input instanceof Date\n\n/**\n * A refinement that checks if a value is an `Iterable`.\n * Many built-in types are iterable, such as `Array`, `string`, `Map`, and `Set`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isIterable } from \"effect/Predicate\"\n *\n * assert.strictEqual(isIterable([]), true)\n * assert.strictEqual(isIterable(\"hello\"), true)\n * assert.strictEqual(isIterable(new Set()), true)\n *\n * assert.strictEqual(isIterable({}), false)\n * assert.strictEqual(isIterable(123), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isIterable = (input: unknown): input is Iterable<unknown> =>\n  typeof input === \"string\" || hasProperty(input, Symbol.iterator)\n\n/**\n * A refinement that checks if a value is a record (i.e., a plain object).\n * This check returns `false` for arrays, `null`, and functions.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isRecord } from \"effect/Predicate\"\n *\n * assert.strictEqual(isRecord({}), true)\n * assert.strictEqual(isRecord({ a: 1 }), true)\n *\n * assert.strictEqual(isRecord([]), false)\n * assert.strictEqual(isRecord(new Date()), false)\n * assert.strictEqual(isRecord(null), false)\n * assert.strictEqual(isRecord(() => null), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n * @see isObject\n */\nexport const isRecord = (input: unknown): input is { [x: string | symbol]: unknown } =>\n  isRecordOrArray(input) && !Array.isArray(input)\n\n/**\n * A refinement that checks if a value is a readonly record (i.e., a plain object).\n * This check returns `false` for arrays, `null`, and functions.\n *\n * This is an alias for `isRecord`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isReadonlyRecord } from \"effect/Predicate\"\n *\n * assert.strictEqual(isReadonlyRecord({}), true)\n * assert.strictEqual(isReadonlyRecord({ a: 1 }), true)\n *\n * assert.strictEqual(isReadonlyRecord([]), false)\n * assert.strictEqual(isReadonlyRecord(null), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isReadonlyRecord: (\n  input: unknown\n) => input is { readonly [x: string | symbol]: unknown } = isRecord\n\n/**\n * A refinement that checks if a value is a `Promise`. It performs a duck-typing check\n * for `.then` and `.catch` methods.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isPromise } from \"effect/Predicate\"\n *\n * assert.strictEqual(isPromise(Promise.resolve(1)), true)\n * assert.strictEqual(isPromise(new Promise(() => {})), true)\n *\n * assert.strictEqual(isPromise({ then() {} }), false) // Missing .catch\n * assert.strictEqual(isPromise({}), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n * @see isPromiseLike\n */\nexport const isPromise = (\n  input: unknown\n): input is Promise<unknown> =>\n  hasProperty(input, \"then\") && \"catch\" in input && isFunction(input.then) && isFunction(input.catch)\n\n/**\n * A refinement that checks if a value is `PromiseLike`. It performs a duck-typing\n * check for a `.then` method.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isPromiseLike } from \"effect/Predicate\"\n *\n * assert.strictEqual(isPromiseLike(Promise.resolve(1)), true)\n * assert.strictEqual(isPromiseLike({ then: () => {} }), true)\n *\n * assert.strictEqual(isPromiseLike({}), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n * @see isPromise\n */\nexport const isPromiseLike = (\n  input: unknown\n): input is PromiseLike<unknown> => hasProperty(input, \"then\") && isFunction(input.then)\n\n/**\n * A refinement that checks if a value is a `RegExp`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * assert.strictEqual(Predicate.isRegExp(/a/), true)\n * assert.strictEqual(Predicate.isRegExp(new RegExp(\"a\")), true)\n *\n * assert.strictEqual(Predicate.isRegExp(\"/a/\"), false)\n * ```\n *\n * @category guards\n * @since 3.9.0\n */\nexport const isRegExp = (input: unknown): input is RegExp => input instanceof RegExp\n\n/**\n * Composes a `Refinement` with another `Refinement` or `Predicate`.\n *\n * This can be used to chain checks. The first refinement is applied, and if it\n * passes, the second check is applied to the same value, potentially refining\n * the type further.\n *\n * @example\n * ```ts\n * import { Predicate } from \"effect\"\n * import * as assert from \"node:assert\"\n *\n * const isString = (u: unknown): u is string => typeof u === \"string\"\n * const minLength = (n: number) => (s: string): boolean => s.length >= n\n *\n * // Create a refinement that checks for a string with a minimum length of 3\n * const isLongString = Predicate.compose(isString, minLength(3))\n *\n * let value: unknown = \"hello\"\n *\n * assert.strictEqual(isLongString(value), true)\n * if (isLongString(value)) {\n *   // value is narrowed to string\n *   assert.strictEqual(value.toUpperCase(), \"HELLO\")\n * }\n * assert.strictEqual(isLongString(\"hi\"), false)\n * ```\n *\n * @since 2.0.0\n */\nexport const compose: {\n  /**\n   * Composes a `Refinement` with another `Refinement` or `Predicate`.\n   *\n   * This can be used to chain checks. The first refinement is applied, and if it\n   * passes, the second check is applied to the same value, potentially refining\n   * the type further.\n   *\n   * @example\n   * ```ts\n   * import { Predicate } from \"effect\"\n   * import * as assert from \"node:assert\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const minLength = (n: number) => (s: string): boolean => s.length >= n\n   *\n   * // Create a refinement that checks for a string with a minimum length of 3\n   * const isLongString = Predicate.compose(isString, minLength(3))\n   *\n   * let value: unknown = \"hello\"\n   *\n   * assert.strictEqual(isLongString(value), true)\n   * if (isLongString(value)) {\n   *   // value is narrowed to string\n   *   assert.strictEqual(value.toUpperCase(), \"HELLO\")\n   * }\n   * assert.strictEqual(isLongString(\"hi\"), false)\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B extends A, C extends B, D extends C>(bc: Refinement<C, D>): (ab: Refinement<A, B>) => Refinement<A, D>\n  /**\n   * Composes a `Refinement` with another `Refinement` or `Predicate`.\n   *\n   * This can be used to chain checks. The first refinement is applied, and if it\n   * passes, the second check is applied to the same value, potentially refining\n   * the type further.\n   *\n   * @example\n   * ```ts\n   * import { Predicate } from \"effect\"\n   * import * as assert from \"node:assert\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const minLength = (n: number) => (s: string): boolean => s.length >= n\n   *\n   * // Create a refinement that checks for a string with a minimum length of 3\n   * const isLongString = Predicate.compose(isString, minLength(3))\n   *\n   * let value: unknown = \"hello\"\n   *\n   * assert.strictEqual(isLongString(value), true)\n   * if (isLongString(value)) {\n   *   // value is narrowed to string\n   *   assert.strictEqual(value.toUpperCase(), \"HELLO\")\n   * }\n   * assert.strictEqual(isLongString(\"hi\"), false)\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B extends A>(bc: Predicate<NoInfer<B>>): (ab: Refinement<A, B>) => Refinement<A, B>\n  /**\n   * Composes a `Refinement` with another `Refinement` or `Predicate`.\n   *\n   * This can be used to chain checks. The first refinement is applied, and if it\n   * passes, the second check is applied to the same value, potentially refining\n   * the type further.\n   *\n   * @example\n   * ```ts\n   * import { Predicate } from \"effect\"\n   * import * as assert from \"node:assert\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const minLength = (n: number) => (s: string): boolean => s.length >= n\n   *\n   * // Create a refinement that checks for a string with a minimum length of 3\n   * const isLongString = Predicate.compose(isString, minLength(3))\n   *\n   * let value: unknown = \"hello\"\n   *\n   * assert.strictEqual(isLongString(value), true)\n   * if (isLongString(value)) {\n   *   // value is narrowed to string\n   *   assert.strictEqual(value.toUpperCase(), \"HELLO\")\n   * }\n   * assert.strictEqual(isLongString(\"hi\"), false)\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B extends A, C extends B, D extends C>(ab: Refinement<A, B>, bc: Refinement<C, D>): Refinement<A, D>\n  /**\n   * Composes a `Refinement` with another `Refinement` or `Predicate`.\n   *\n   * This can be used to chain checks. The first refinement is applied, and if it\n   * passes, the second check is applied to the same value, potentially refining\n   * the type further.\n   *\n   * @example\n   * ```ts\n   * import { Predicate } from \"effect\"\n   * import * as assert from \"node:assert\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const minLength = (n: number) => (s: string): boolean => s.length >= n\n   *\n   * // Create a refinement that checks for a string with a minimum length of 3\n   * const isLongString = Predicate.compose(isString, minLength(3))\n   *\n   * let value: unknown = \"hello\"\n   *\n   * assert.strictEqual(isLongString(value), true)\n   * if (isLongString(value)) {\n   *   // value is narrowed to string\n   *   assert.strictEqual(value.toUpperCase(), \"HELLO\")\n   * }\n   * assert.strictEqual(isLongString(\"hi\"), false)\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B extends A>(ab: Refinement<A, B>, bc: Predicate<NoInfer<B>>): Refinement<A, B>\n} = dual(\n  2,\n  <A, B extends A, C extends B, D extends C>(ab: Refinement<A, B>, bc: Refinement<C, D>): Refinement<A, D> =>\n  (a): a is D => ab(a) && bc(a as C)\n)\n\n/**\n * Combines two predicates to test a tuple of two values. The first predicate tests the\n * first element of the tuple, and the second predicate tests the second element.\n *\n * @category combining\n * @since 2.0.0\n */\nexport const product =\n  <A, B>(self: Predicate<A>, that: Predicate<B>): Predicate<readonly [A, B]> /* readonly because contravariant */ =>\n  ([a, b]) => self(a) && that(b)\n\n/**\n * Takes an iterable of predicates and returns a new predicate that tests an array of values.\n * The new predicate returns `true` if each predicate at a given index is satisfied by the\n * value at the same index in the array. The check stops at the length of the shorter of\n * the two iterables (predicates or values).\n *\n * @category combining\n * @since 2.0.0\n * @see tuple for a more powerful, variadic version.\n */\nexport const all = <A>(\n  collection: Iterable<Predicate<A>>\n): Predicate<ReadonlyArray<A>> => {\n  return (as) => {\n    let collectionIndex = 0\n    for (const p of collection) {\n      if (collectionIndex >= as.length) {\n        break\n      }\n      if (p(as[collectionIndex]) === false) {\n        return false\n      }\n      collectionIndex++\n    }\n    return true\n  }\n}\n\n/**\n * Combines a predicate for a single value and an iterable of predicates for the rest of an array.\n * Useful for checking the head and tail of an array separately.\n *\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Predicate<A>,\n  collection: Iterable<Predicate<A>>\n): Predicate<readonly [A, ...Array<A>]> /* readonly because contravariant */ => {\n  const rest = all(collection)\n  return ([head, ...tail]) => self(head) === false ? false : rest(tail)\n}\n\n/**\n * Combines an array of predicates into a single predicate that tests an array of values.\n * This function is highly type-aware and will produce a `Refinement` if any of the provided\n * predicates are `Refinement`s, allowing for powerful type-narrowing of tuples.\n *\n * - If all predicates are `Predicate<T>`, the result is `Predicate<[T, T, ...]>`.\n * - If any predicate is a `Refinement<A, B>`, the result is a `Refinement` that narrows\n *   the input tuple type to a more specific tuple type.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * const isString = (u: unknown): u is string => typeof u === \"string\"\n * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n *\n * // Create a refinement for a [string, number] tuple\n * const isStringNumberTuple = Predicate.tuple(isString, isNumber)\n *\n * const value: [unknown, unknown] = [\"hello\", 123]\n * if (isStringNumberTuple(value)) {\n *   // value is narrowed to [string, number]\n *   const [s, n] = value\n *   assert.strictEqual(s.toUpperCase(), \"HELLO\")\n *   assert.strictEqual(n.toFixed(2), \"123.00\")\n * }\n * assert.strictEqual(isStringNumberTuple([\"hello\", \"123\"]), false)\n * ```\n *\n * @since 2.0.0\n */\nexport const tuple: {\n  /**\n   * Combines an array of predicates into a single predicate that tests an array of values.\n   * This function is highly type-aware and will produce a `Refinement` if any of the provided\n   * predicates are `Refinement`s, allowing for powerful type-narrowing of tuples.\n   *\n   * - If all predicates are `Predicate<T>`, the result is `Predicate<[T, T, ...]>`.\n   * - If any predicate is a `Refinement<A, B>`, the result is a `Refinement` that narrows\n   *   the input tuple type to a more specific tuple type.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n   *\n   * // Create a refinement for a [string, number] tuple\n   * const isStringNumberTuple = Predicate.tuple(isString, isNumber)\n   *\n   * const value: [unknown, unknown] = [\"hello\", 123]\n   * if (isStringNumberTuple(value)) {\n   *   // value is narrowed to [string, number]\n   *   const [s, n] = value\n   *   assert.strictEqual(s.toUpperCase(), \"HELLO\")\n   *   assert.strictEqual(n.toFixed(2), \"123.00\")\n   * }\n   * assert.strictEqual(isStringNumberTuple([\"hello\", \"123\"]), false)\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <T extends ReadonlyArray<Predicate.Any>>(...elements: T): [Extract<T[number], Refinement.Any>] extends [never] ? Predicate<{ readonly [I in keyof T]: Predicate.In<T[I]> }>\n    : Refinement<\n      { readonly [I in keyof T]: T[I] extends Refinement.Any ? Refinement.In<T[I]> : Predicate.In<T[I]> },\n      { readonly [I in keyof T]: T[I] extends Refinement.Any ? Refinement.Out<T[I]> : Predicate.In<T[I]> }\n    >\n} = (...elements: ReadonlyArray<Predicate.Any>) => all(elements) as any\n\n/**\n * Combines a record of predicates into a single predicate that tests a record of values.\n * This function is highly type-aware and will produce a `Refinement` if any of the provided\n * predicates are `Refinement`s, allowing for powerful type-narrowing of structs.\n *\n * - If all predicates are `Predicate<T>`, the result is `Predicate<{ k: T, ... }>`.\n * - If any predicate is a `Refinement<A, B>`, the result is a `Refinement` that narrows\n *   the input record type to a more specific record type.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * const isString = (u: unknown): u is string => typeof u === \"string\"\n * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n *\n * const personPredicate = Predicate.struct({\n *   name: isString,\n *   age: isNumber\n * })\n *\n * const value: { name: unknown; age: unknown } = { name: \"Alice\", age: 30 }\n * if (personPredicate(value)) {\n *   // value is narrowed to { name: string; age: number }\n *   assert.strictEqual(value.name.toUpperCase(), \"ALICE\")\n *   assert.strictEqual(value.age.toFixed(0), \"30\")\n * }\n * assert.strictEqual(personPredicate({ name: \"Bob\", age: \"40\" }), false)\n * ```\n *\n * @since 2.0.0\n */\nexport const struct: {\n  /**\n   * Combines a record of predicates into a single predicate that tests a record of values.\n   * This function is highly type-aware and will produce a `Refinement` if any of the provided\n   * predicates are `Refinement`s, allowing for powerful type-narrowing of structs.\n   *\n   * - If all predicates are `Predicate<T>`, the result is `Predicate<{ k: T, ... }>`.\n   * - If any predicate is a `Refinement<A, B>`, the result is a `Refinement` that narrows\n   *   the input record type to a more specific record type.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n   *\n   * const personPredicate = Predicate.struct({\n   *   name: isString,\n   *   age: isNumber\n   * })\n   *\n   * const value: { name: unknown; age: unknown } = { name: \"Alice\", age: 30 }\n   * if (personPredicate(value)) {\n   *   // value is narrowed to { name: string; age: number }\n   *   assert.strictEqual(value.name.toUpperCase(), \"ALICE\")\n   *   assert.strictEqual(value.age.toFixed(0), \"30\")\n   * }\n   * assert.strictEqual(personPredicate({ name: \"Bob\", age: \"40\" }), false)\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <R extends Record<string, Predicate.Any>>(fields: R): [Extract<R[keyof R], Refinement.Any>] extends [never] ?\n    Predicate<{ readonly [K in keyof R]: Predicate.In<R[K]> }> :\n    Refinement<\n      { readonly [K in keyof R]: R[K] extends Refinement.Any ? Refinement.In<R[K]> : Predicate.In<R[K]> },\n      { readonly [K in keyof R]: R[K] extends Refinement.Any ? Refinement.Out<R[K]> : Predicate.In<R[K]> }\n    >\n} = (<R extends Record<string, Predicate.Any>>(fields: R) => {\n  const keys = Object.keys(fields)\n  return (a: Record<string, unknown>) => {\n    for (const key of keys) {\n      if (!fields[key](a[key] as never)) {\n        return false\n      }\n    }\n    return true\n  }\n}) as any\n\n/**\n * Returns a new predicate that is the logical negation of the given predicate.\n *\n * **Note**: If the input is a `Refinement`, the resulting predicate will be a\n * simple `Predicate`, as TypeScript cannot infer the negative type.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate, Number } from \"effect\"\n *\n * const isNonPositive = Predicate.not(Number.greaterThan(0))\n *\n * assert.strictEqual(isNonPositive(-1), true)\n * assert.strictEqual(isNonPositive(0), true)\n * assert.strictEqual(isNonPositive(1), false)\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const not = <A>(self: Predicate<A>): Predicate<A> => (a) => !self(a)\n\n/**\n * Combines two predicates with a logical \"OR\". The resulting predicate returns `true`\n * if at least one of the predicates returns `true`.\n *\n * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n * union of their target types (`B | C`).\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * const isString = (u: unknown): u is string => typeof u === \"string\"\n * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n *\n * const isStringOrNumber = Predicate.or(isString, isNumber)\n *\n * assert.strictEqual(isStringOrNumber(\"hello\"), true)\n * assert.strictEqual(isStringOrNumber(123), true)\n * assert.strictEqual(isStringOrNumber(null), false)\n *\n * const value: unknown = \"world\"\n * if (isStringOrNumber(value)) {\n *   // value is narrowed to string | number\n *   console.log(value)\n * }\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const or: {\n  /**\n   * Combines two predicates with a logical \"OR\". The resulting predicate returns `true`\n   * if at least one of the predicates returns `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * union of their target types (`B | C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n   *\n   * const isStringOrNumber = Predicate.or(isString, isNumber)\n   *\n   * assert.strictEqual(isStringOrNumber(\"hello\"), true)\n   * assert.strictEqual(isStringOrNumber(123), true)\n   * assert.strictEqual(isStringOrNumber(null), false)\n   *\n   * const value: unknown = \"world\"\n   * if (isStringOrNumber(value)) {\n   *   // value is narrowed to string | number\n   *   console.log(value)\n   * }\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A, C extends A>(that: Refinement<A, C>): <B extends A>(self: Refinement<A, B>) => Refinement<A, B | C>\n  /**\n   * Combines two predicates with a logical \"OR\". The resulting predicate returns `true`\n   * if at least one of the predicates returns `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * union of their target types (`B | C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n   *\n   * const isStringOrNumber = Predicate.or(isString, isNumber)\n   *\n   * assert.strictEqual(isStringOrNumber(\"hello\"), true)\n   * assert.strictEqual(isStringOrNumber(123), true)\n   * assert.strictEqual(isStringOrNumber(null), false)\n   *\n   * const value: unknown = \"world\"\n   * if (isStringOrNumber(value)) {\n   *   // value is narrowed to string | number\n   *   console.log(value)\n   * }\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A, B extends A, C extends A>(self: Refinement<A, B>, that: Refinement<A, C>): Refinement<A, B | C>\n  /**\n   * Combines two predicates with a logical \"OR\". The resulting predicate returns `true`\n   * if at least one of the predicates returns `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * union of their target types (`B | C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n   *\n   * const isStringOrNumber = Predicate.or(isString, isNumber)\n   *\n   * assert.strictEqual(isStringOrNumber(\"hello\"), true)\n   * assert.strictEqual(isStringOrNumber(123), true)\n   * assert.strictEqual(isStringOrNumber(null), false)\n   *\n   * const value: unknown = \"world\"\n   * if (isStringOrNumber(value)) {\n   *   // value is narrowed to string | number\n   *   console.log(value)\n   * }\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * Combines two predicates with a logical \"OR\". The resulting predicate returns `true`\n   * if at least one of the predicates returns `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * union of their target types (`B | C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n   *\n   * const isStringOrNumber = Predicate.or(isString, isNumber)\n   *\n   * assert.strictEqual(isStringOrNumber(\"hello\"), true)\n   * assert.strictEqual(isStringOrNumber(123), true)\n   * assert.strictEqual(isStringOrNumber(null), false)\n   *\n   * const value: unknown = \"world\"\n   * if (isStringOrNumber(value)) {\n   *   // value is narrowed to string | number\n   *   console.log(value)\n   * }\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) || that(a))\n\n/**\n * Combines two predicates with a logical \"AND\". The resulting predicate returns `true`\n * only if both of the predicates return `true`.\n *\n * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n * intersection of their target types (`B & C`).\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * type Person = { name: string }\n * type Employee = { id: number }\n *\n * const hasName = (u: unknown): u is Person => Predicate.hasProperty(u, \"name\") && typeof (u as any).name === \"string\"\n * const hasId = (u: unknown): u is Employee => Predicate.hasProperty(u, \"id\") && typeof (u as any).id === \"number\"\n *\n * const isPersonAndEmployee = Predicate.and(hasName, hasId)\n *\n * const val: unknown = { name: \"Alice\", id: 123 }\n * if (isPersonAndEmployee(val)) {\n *   // val is narrowed to Person & Employee\n *   assert.strictEqual(val.name, \"Alice\")\n *   assert.strictEqual(val.id, 123)\n * }\n *\n * assert.strictEqual(isPersonAndEmployee({ name: \"Bob\" }), false) // Missing id\n * assert.strictEqual(isPersonAndEmployee({ id: 456 }), false) // Missing name\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const and: {\n  /**\n   * Combines two predicates with a logical \"AND\". The resulting predicate returns `true`\n   * only if both of the predicates return `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * intersection of their target types (`B & C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * type Person = { name: string }\n   * type Employee = { id: number }\n   *\n   * const hasName = (u: unknown): u is Person => Predicate.hasProperty(u, \"name\") && typeof (u as any).name === \"string\"\n   * const hasId = (u: unknown): u is Employee => Predicate.hasProperty(u, \"id\") && typeof (u as any).id === \"number\"\n   *\n   * const isPersonAndEmployee = Predicate.and(hasName, hasId)\n   *\n   * const val: unknown = { name: \"Alice\", id: 123 }\n   * if (isPersonAndEmployee(val)) {\n   *   // val is narrowed to Person & Employee\n   *   assert.strictEqual(val.name, \"Alice\")\n   *   assert.strictEqual(val.id, 123)\n   * }\n   *\n   * assert.strictEqual(isPersonAndEmployee({ name: \"Bob\" }), false) // Missing id\n   * assert.strictEqual(isPersonAndEmployee({ id: 456 }), false) // Missing name\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A, C extends A>(that: Refinement<A, C>): <B extends A>(self: Refinement<A, B>) => Refinement<A, B & C>\n  /**\n   * Combines two predicates with a logical \"AND\". The resulting predicate returns `true`\n   * only if both of the predicates return `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * intersection of their target types (`B & C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * type Person = { name: string }\n   * type Employee = { id: number }\n   *\n   * const hasName = (u: unknown): u is Person => Predicate.hasProperty(u, \"name\") && typeof (u as any).name === \"string\"\n   * const hasId = (u: unknown): u is Employee => Predicate.hasProperty(u, \"id\") && typeof (u as any).id === \"number\"\n   *\n   * const isPersonAndEmployee = Predicate.and(hasName, hasId)\n   *\n   * const val: unknown = { name: \"Alice\", id: 123 }\n   * if (isPersonAndEmployee(val)) {\n   *   // val is narrowed to Person & Employee\n   *   assert.strictEqual(val.name, \"Alice\")\n   *   assert.strictEqual(val.id, 123)\n   * }\n   *\n   * assert.strictEqual(isPersonAndEmployee({ name: \"Bob\" }), false) // Missing id\n   * assert.strictEqual(isPersonAndEmployee({ id: 456 }), false) // Missing name\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A, B extends A, C extends A>(self: Refinement<A, B>, that: Refinement<A, C>): Refinement<A, B & C>\n  /**\n   * Combines two predicates with a logical \"AND\". The resulting predicate returns `true`\n   * only if both of the predicates return `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * intersection of their target types (`B & C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * type Person = { name: string }\n   * type Employee = { id: number }\n   *\n   * const hasName = (u: unknown): u is Person => Predicate.hasProperty(u, \"name\") && typeof (u as any).name === \"string\"\n   * const hasId = (u: unknown): u is Employee => Predicate.hasProperty(u, \"id\") && typeof (u as any).id === \"number\"\n   *\n   * const isPersonAndEmployee = Predicate.and(hasName, hasId)\n   *\n   * const val: unknown = { name: \"Alice\", id: 123 }\n   * if (isPersonAndEmployee(val)) {\n   *   // val is narrowed to Person & Employee\n   *   assert.strictEqual(val.name, \"Alice\")\n   *   assert.strictEqual(val.id, 123)\n   * }\n   *\n   * assert.strictEqual(isPersonAndEmployee({ name: \"Bob\" }), false) // Missing id\n   * assert.strictEqual(isPersonAndEmployee({ id: 456 }), false) // Missing name\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * Combines two predicates with a logical \"AND\". The resulting predicate returns `true`\n   * only if both of the predicates return `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * intersection of their target types (`B & C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * type Person = { name: string }\n   * type Employee = { id: number }\n   *\n   * const hasName = (u: unknown): u is Person => Predicate.hasProperty(u, \"name\") && typeof (u as any).name === \"string\"\n   * const hasId = (u: unknown): u is Employee => Predicate.hasProperty(u, \"id\") && typeof (u as any).id === \"number\"\n   *\n   * const isPersonAndEmployee = Predicate.and(hasName, hasId)\n   *\n   * const val: unknown = { name: \"Alice\", id: 123 }\n   * if (isPersonAndEmployee(val)) {\n   *   // val is narrowed to Person & Employee\n   *   assert.strictEqual(val.name, \"Alice\")\n   *   assert.strictEqual(val.id, 123)\n   * }\n   *\n   * assert.strictEqual(isPersonAndEmployee({ name: \"Bob\" }), false) // Missing id\n   * assert.strictEqual(isPersonAndEmployee({ id: 456 }), false) // Missing name\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) && that(a))\n\n/**\n * Combines two predicates with a logical \"XOR\" (exclusive OR). The resulting predicate\n * returns `true` if one of the predicates returns `true`, but not both.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * const isPositive = (n: number) => n > 0\n * const isEven = (n: number) => n % 2 === 0\n *\n * const isPositiveXorEven = Predicate.xor(isPositive, isEven)\n *\n * assert.strictEqual(isPositiveXorEven(4), false)  // both true -> false\n * assert.strictEqual(isPositiveXorEven(3), true)   // one true -> true\n * assert.strictEqual(isPositiveXorEven(-2), true)  // one true -> true\n * assert.strictEqual(isPositiveXorEven(-1), false) // both false -> false\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const xor: {\n  /**\n   * Combines two predicates with a logical \"XOR\" (exclusive OR). The resulting predicate\n   * returns `true` if one of the predicates returns `true`, but not both.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isPositive = (n: number) => n > 0\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * const isPositiveXorEven = Predicate.xor(isPositive, isEven)\n   *\n   * assert.strictEqual(isPositiveXorEven(4), false)  // both true -> false\n   * assert.strictEqual(isPositiveXorEven(3), true)   // one true -> true\n   * assert.strictEqual(isPositiveXorEven(-2), true)  // one true -> true\n   * assert.strictEqual(isPositiveXorEven(-1), false) // both false -> false\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * Combines two predicates with a logical \"XOR\" (exclusive OR). The resulting predicate\n   * returns `true` if one of the predicates returns `true`, but not both.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isPositive = (n: number) => n > 0\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * const isPositiveXorEven = Predicate.xor(isPositive, isEven)\n   *\n   * assert.strictEqual(isPositiveXorEven(4), false)  // both true -> false\n   * assert.strictEqual(isPositiveXorEven(3), true)   // one true -> true\n   * assert.strictEqual(isPositiveXorEven(-2), true)  // one true -> true\n   * assert.strictEqual(isPositiveXorEven(-1), false) // both false -> false\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) !== that(a))\n\n/**\n * Combines two predicates with a logical \"EQV\" (equivalence). The resulting predicate\n * returns `true` if both predicates return the same boolean value (both `true` or both `false`).\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * const isPositive = (n: number) => n > 0\n * const isEven = (n: number) => n % 2 === 0\n *\n * const isPositiveEqvEven = Predicate.eqv(isPositive, isEven)\n *\n * assert.strictEqual(isPositiveEqvEven(4), true)   // both true -> true\n * assert.strictEqual(isPositiveEqvEven(3), false)  // different -> false\n * assert.strictEqual(isPositiveEqvEven(-2), false) // different -> false\n * assert.strictEqual(isPositiveEqvEven(-1), true)  // both false -> true\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const eqv: {\n  /**\n   * Combines two predicates with a logical \"EQV\" (equivalence). The resulting predicate\n   * returns `true` if both predicates return the same boolean value (both `true` or both `false`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isPositive = (n: number) => n > 0\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * const isPositiveEqvEven = Predicate.eqv(isPositive, isEven)\n   *\n   * assert.strictEqual(isPositiveEqvEven(4), true)   // both true -> true\n   * assert.strictEqual(isPositiveEqvEven(3), false)  // different -> false\n   * assert.strictEqual(isPositiveEqvEven(-2), false) // different -> false\n   * assert.strictEqual(isPositiveEqvEven(-1), true)  // both false -> true\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * Combines two predicates with a logical \"EQV\" (equivalence). The resulting predicate\n   * returns `true` if both predicates return the same boolean value (both `true` or both `false`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isPositive = (n: number) => n > 0\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * const isPositiveEqvEven = Predicate.eqv(isPositive, isEven)\n   *\n   * assert.strictEqual(isPositiveEqvEven(4), true)   // both true -> true\n   * assert.strictEqual(isPositiveEqvEven(3), false)  // different -> false\n   * assert.strictEqual(isPositiveEqvEven(-2), false) // different -> false\n   * assert.strictEqual(isPositiveEqvEven(-1), true)  // both false -> true\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) === that(a))\n\n/**\n * Creates a predicate that represents a logical \"if-then\" rule.\n *\n * Think of it as a conditional promise: **\"If `antecedent` holds true, then I promise `consequent` will also be true.\"**\n *\n * This function is invaluable for defining complex validation logic where one condition dictates another.\n *\n * ### How It Works\n *\n * The rule only fails (returns `false`) when the \"if\" part is `true`, but the \"then\" part is `false`.\n * In all other cases, the promise is considered kept, and the result is `true`.\n *\n * This includes the concept of **\"vacuous truth\"**: if the \"if\" part is `false`, the rule doesn't apply,\n * so the promise isn't broken, and the result is `true`. (e.g., \"If it rains, I'll bring an umbrella.\"\n * If it doesn't rain, you haven't broken your promise, no matter what).\n *\n * ### Key Details\n *\n * - **Logical Equivalence**: `implies(p, q)` is the same as `not(p).or(q)`, or simply `!p || q`\n *   in plain JavaScript. This can be a helpful way to reason about its behavior.\n *\n * - **Type-Safety Warning**: This function always returns a `Predicate`, never a type-narrowing\n *   `Refinement`. A `true` result doesn't guarantee the `consequent` passed (it could be `true`\n *   simply because the `antecedent` was `false`), so it cannot be used to safely narrow a type.\n *\n * @example\n * ```ts\n * // Rule: A user can only be an admin if they also belong to the \"staff\" group.\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * type User = {\n *   isStaff: boolean\n *   isAdmin: boolean\n * }\n *\n * const isValidUserPermission = Predicate.implies(\n *   // antecedent: \"if\" the user is an admin...\n *   (user: User) => user.isAdmin,\n *   // consequent: \"then\" they must be staff.\n *   (user: User) => user.isStaff\n * )\n *\n * // A non-admin who is not staff. Rule doesn't apply (antecedent is false).\n * assert.strictEqual(isValidUserPermission({ isStaff: false, isAdmin: false }), true)\n *\n * // A staff member who is not an admin. Rule doesn't apply (antecedent is false).\n * assert.strictEqual(isValidUserPermission({ isStaff: true, isAdmin: false }), true)\n *\n * // An admin who is also staff. The rule was followed.\n * assert.strictEqual(isValidUserPermission({ isStaff: true, isAdmin: true }), true)\n *\n * // An admin who is NOT staff. The rule was broken!\n * assert.strictEqual(isValidUserPermission({ isStaff: false, isAdmin: true }), false)\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const implies: {\n  /**\n   * Creates a predicate that represents a logical \"if-then\" rule.\n   *\n   * Think of it as a conditional promise: **\"If `antecedent` holds true, then I promise `consequent` will also be true.\"**\n   *\n   * This function is invaluable for defining complex validation logic where one condition dictates another.\n   *\n   * ### How It Works\n   *\n   * The rule only fails (returns `false`) when the \"if\" part is `true`, but the \"then\" part is `false`.\n   * In all other cases, the promise is considered kept, and the result is `true`.\n   *\n   * This includes the concept of **\"vacuous truth\"**: if the \"if\" part is `false`, the rule doesn't apply,\n   * so the promise isn't broken, and the result is `true`. (e.g., \"If it rains, I'll bring an umbrella.\"\n   * If it doesn't rain, you haven't broken your promise, no matter what).\n   *\n   * ### Key Details\n   *\n   * - **Logical Equivalence**: `implies(p, q)` is the same as `not(p).or(q)`, or simply `!p || q`\n   *   in plain JavaScript. This can be a helpful way to reason about its behavior.\n   *\n   * - **Type-Safety Warning**: This function always returns a `Predicate`, never a type-narrowing\n   *   `Refinement`. A `true` result doesn't guarantee the `consequent` passed (it could be `true`\n   *   simply because the `antecedent` was `false`), so it cannot be used to safely narrow a type.\n   *\n   * @example\n   * ```ts\n   * // Rule: A user can only be an admin if they also belong to the \"staff\" group.\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * type User = {\n   *   isStaff: boolean\n   *   isAdmin: boolean\n   * }\n   *\n   * const isValidUserPermission = Predicate.implies(\n   *   // antecedent: \"if\" the user is an admin...\n   *   (user: User) => user.isAdmin,\n   *   // consequent: \"then\" they must be staff.\n   *   (user: User) => user.isStaff\n   * )\n   *\n   * // A non-admin who is not staff. Rule doesn't apply (antecedent is false).\n   * assert.strictEqual(isValidUserPermission({ isStaff: false, isAdmin: false }), true)\n   *\n   * // A staff member who is not an admin. Rule doesn't apply (antecedent is false).\n   * assert.strictEqual(isValidUserPermission({ isStaff: true, isAdmin: false }), true)\n   *\n   * // An admin who is also staff. The rule was followed.\n   * assert.strictEqual(isValidUserPermission({ isStaff: true, isAdmin: true }), true)\n   *\n   * // An admin who is NOT staff. The rule was broken!\n   * assert.strictEqual(isValidUserPermission({ isStaff: false, isAdmin: true }), false)\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(consequent: Predicate<A>): (antecedent: Predicate<A>) => Predicate<A>\n  /**\n   * Creates a predicate that represents a logical \"if-then\" rule.\n   *\n   * Think of it as a conditional promise: **\"If `antecedent` holds true, then I promise `consequent` will also be true.\"**\n   *\n   * This function is invaluable for defining complex validation logic where one condition dictates another.\n   *\n   * ### How It Works\n   *\n   * The rule only fails (returns `false`) when the \"if\" part is `true`, but the \"then\" part is `false`.\n   * In all other cases, the promise is considered kept, and the result is `true`.\n   *\n   * This includes the concept of **\"vacuous truth\"**: if the \"if\" part is `false`, the rule doesn't apply,\n   * so the promise isn't broken, and the result is `true`. (e.g., \"If it rains, I'll bring an umbrella.\"\n   * If it doesn't rain, you haven't broken your promise, no matter what).\n   *\n   * ### Key Details\n   *\n   * - **Logical Equivalence**: `implies(p, q)` is the same as `not(p).or(q)`, or simply `!p || q`\n   *   in plain JavaScript. This can be a helpful way to reason about its behavior.\n   *\n   * - **Type-Safety Warning**: This function always returns a `Predicate`, never a type-narrowing\n   *   `Refinement`. A `true` result doesn't guarantee the `consequent` passed (it could be `true`\n   *   simply because the `antecedent` was `false`), so it cannot be used to safely narrow a type.\n   *\n   * @example\n   * ```ts\n   * // Rule: A user can only be an admin if they also belong to the \"staff\" group.\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * type User = {\n   *   isStaff: boolean\n   *   isAdmin: boolean\n   * }\n   *\n   * const isValidUserPermission = Predicate.implies(\n   *   // antecedent: \"if\" the user is an admin...\n   *   (user: User) => user.isAdmin,\n   *   // consequent: \"then\" they must be staff.\n   *   (user: User) => user.isStaff\n   * )\n   *\n   * // A non-admin who is not staff. Rule doesn't apply (antecedent is false).\n   * assert.strictEqual(isValidUserPermission({ isStaff: false, isAdmin: false }), true)\n   *\n   * // A staff member who is not an admin. Rule doesn't apply (antecedent is false).\n   * assert.strictEqual(isValidUserPermission({ isStaff: true, isAdmin: false }), true)\n   *\n   * // An admin who is also staff. The rule was followed.\n   * assert.strictEqual(isValidUserPermission({ isStaff: true, isAdmin: true }), true)\n   *\n   * // An admin who is NOT staff. The rule was broken!\n   * assert.strictEqual(isValidUserPermission({ isStaff: false, isAdmin: true }), false)\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(antecedent: Predicate<A>, consequent: Predicate<A>): Predicate<A>\n} = dual(\n  2,\n  <A>(antecedent: Predicate<A>, consequent: Predicate<A>): Predicate<A> => (a) => antecedent(a) ? consequent(a) : true\n)\n\n/**\n * Combines two predicates with a logical \"NOR\" (negated OR). The resulting predicate\n * returns `true` only if both predicates return `false`.\n * This is equivalent to `not(or(p, q))`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const nor: {\n  /**\n   * Combines two predicates with a logical \"NOR\" (negated OR). The resulting predicate\n   * returns `true` only if both predicates return `false`.\n   * This is equivalent to `not(or(p, q))`.\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * Combines two predicates with a logical \"NOR\" (negated OR). The resulting predicate\n   * returns `true` only if both predicates return `false`.\n   * This is equivalent to `not(or(p, q))`.\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(\n  2,\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => !(self(a) || that(a))\n)\n\n/**\n * Combines two predicates with a logical \"NAND\" (negated AND). The resulting predicate\n * returns `true` if at least one of the predicates returns `false`.\n * This is equivalent to `not(and(p, q))`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const nand: {\n  /**\n   * Combines two predicates with a logical \"NAND\" (negated AND). The resulting predicate\n   * returns `true` if at least one of the predicates returns `false`.\n   * This is equivalent to `not(and(p, q))`.\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * Combines two predicates with a logical \"NAND\" (negated AND). The resulting predicate\n   * returns `true` if at least one of the predicates returns `false`.\n   * This is equivalent to `not(and(p, q))`.\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(\n  2,\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => !(self(a) && that(a))\n)\n\n/**\n * Takes an iterable of predicates and returns a new predicate. The new predicate\n * returns `true` if all predicates in the collection return `true` for a given value.\n *\n * This is like `Array.prototype.every` but for a collection of predicates.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * const isPositive = (n: number) => n > 0\n * const isEven = (n: number) => n % 2 === 0\n *\n * const isPositiveAndEven = Predicate.every([isPositive, isEven])\n *\n * assert.strictEqual(isPositiveAndEven(4), true)\n * assert.strictEqual(isPositiveAndEven(3), false)\n * assert.strictEqual(isPositiveAndEven(-2), false)\n * ```\n *\n * @category elements\n * @since 2.0.0\n * @see some\n */\nexport const every = <A>(collection: Iterable<Predicate<A>>): Predicate<A> => (a: A) => {\n  for (const p of collection) {\n    if (!p(a)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Takes an iterable of predicates and returns a new predicate. The new predicate\n * returns `true` if at least one predicate in the collection returns `true` for a given value.\n *\n * This is like `Array.prototype.some` but for a collection of predicates.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * const isNegative = (n: number) => n < 0\n * const isOdd = (n: number) => n % 2 !== 0\n *\n * const isNegativeOrOdd = Predicate.some([isNegative, isOdd])\n *\n * assert.strictEqual(isNegativeOrOdd(-2), true) // isNegative is true\n * assert.strictEqual(isNegativeOrOdd(3), true)  // isOdd is true\n * assert.strictEqual(isNegativeOrOdd(4), false) // both are false\n * ```\n *\n * @category elements\n * @since 2.0.0\n * @see every\n */\nexport const some = <A>(collection: Iterable<Predicate<A>>): Predicate<A> => (a) => {\n  for (const p of collection) {\n    if (p(a)) {\n      return true\n    }\n  }\n  return false\n}\n", "/**\n * @since 2.0.0\n */\nimport { identity } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport type { Kind, TypeLambda } from \"./HKT.js\"\nimport { getBugErrorMessage } from \"./internal/errors.js\"\nimport { isNullable, isObject } from \"./Predicate.js\"\nimport type * as Types from \"./Types.js\"\n\n/*\n * Copyright 2014 Thom Chiovoloni, released under the MIT license.\n *\n * A random number generator based on the basic implementation of the PCG algorithm,\n * as described here: http://www.pcg-random.org/\n *\n * Adapted for TypeScript from Thom's original code at https://github.com/thomcc/pcg-random\n *\n * forked from https://github.com/frptools\n *\n * @since 2.0.0\n */\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const GenKindTypeId: unique symbol = Symbol.for(\"effect/Gen/GenKind\")\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport type GenKindTypeId = typeof GenKindTypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface GenKind<F extends TypeLambda, R, O, E, A> extends Variance<F, R, O, E> {\n  readonly value: Kind<F, R, O, E, A>\n\n  [Symbol.iterator](): IterableIterator<GenKind<F, R, O, E, A>, A>\n}\n\n/**\n * @category predicates\n * @since 3.0.6\n */\nexport const isGenKind = (u: unknown): u is GenKind<any, any, any, any, any> => isObject(u) && GenKindTypeId in u\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport class GenKindImpl<F extends TypeLambda, R, O, E, A> implements GenKind<F, R, O, E, A> {\n  constructor(\n    /**\n     * @since 2.0.0\n     */\n    readonly value: Kind<F, R, O, E, A>\n  ) {}\n\n  /**\n   * @since 2.0.0\n   */\n  get _F() {\n    return identity\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _R() {\n    return (_: R) => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _O() {\n    return (_: never): O => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _E() {\n    return (_: never): E => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  readonly [GenKindTypeId]: typeof GenKindTypeId = GenKindTypeId;\n\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator](): IterableIterator<GenKind<F, R, O, E, A>, A> {\n    return new SingleShotGen<GenKind<F, R, O, E, A>, A>(this as any)\n  }\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport class SingleShotGen<T, A> implements IterableIterator<T, A> {\n  private called = false\n\n  constructor(readonly self: T) {}\n\n  /**\n   * @since 2.0.0\n   */\n  next(a: A): IteratorResult<T, A> {\n    return this.called ?\n      ({\n        value: a,\n        done: true\n      }) :\n      (this.called = true,\n        ({\n          value: this.self,\n          done: false\n        }))\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  return(a: A): IteratorResult<T, A> {\n    return ({\n      value: a,\n      done: true\n    })\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  throw(e: unknown): IteratorResult<T, A> {\n    throw e\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator](): IterableIterator<T, A> {\n    return new SingleShotGen<T, A>(this.self)\n  }\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const makeGenKind = <F extends TypeLambda, R, O, E, A>(\n  kind: Kind<F, R, O, E, A>\n): GenKind<F, R, O, E, A> => new GenKindImpl(kind)\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Variance<in out F extends TypeLambda, in R, out O, out E> {\n  readonly [GenKindTypeId]: GenKindTypeId\n  readonly _F: Types.Invariant<F>\n  readonly _R: Types.Contravariant<R>\n  readonly _O: Types.Covariant<O>\n  readonly _E: Types.Covariant<E>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Gen<F extends TypeLambda, Z> {\n  <Self, K extends Variance<F, any, any, any> | YieldWrap<Kind<F, any, any, any, any>>, A>(\n    ...args:\n      | [\n        self: Self,\n        body: (this: Self, resume: Z) => Generator<K, A, never>\n      ]\n      | [\n        body: (resume: Z) => Generator<K, A, never>\n      ]\n  ): Kind<\n    F,\n    [K] extends [Variance<F, infer R, any, any>] ? R\n      : [K] extends [YieldWrap<Kind<F, infer R, any, any, any>>] ? R\n      : never,\n    [K] extends [Variance<F, any, infer O, any>] ? O\n      : [K] extends [YieldWrap<Kind<F, any, infer O, any, any>>] ? O\n      : never,\n    [K] extends [Variance<F, any, any, infer E>] ? E\n      : [K] extends [YieldWrap<Kind<F, any, any, infer E, any>>] ? E\n      : never,\n    A\n  >\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Adapter<Z extends TypeLambda> {\n  <_R, _O, _E, _A>(\n    self: Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, _R, _O, _E, _A>(a: A, ab: (a: A) => Kind<Z, _R, _O, _E, _A>): GenKind<Z, _R, _O, _E, _A>\n  <A, B, _R, _O, _E, _A>(a: A, ab: (a: A) => B, bc: (b: B) => Kind<Z, _R, _O, _E, _A>): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: F) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (g: H) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => T,\n    tu: (s: T) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n}\n\n/**\n * @category adapters\n * @since 2.0.0\n */\nexport const adapter: <F extends TypeLambda>() => Adapter<F> = () => (function() {\n  let x = arguments[0]\n  for (let i = 1; i < arguments.length; i++) {\n    x = arguments[i](x)\n  }\n  return new GenKindImpl(x) as any\n})\n\nconst defaultIncHi = 0x14057b7e\nconst defaultIncLo = 0xf767814f\nconst MUL_HI = 0x5851f42d >>> 0\nconst MUL_LO = 0x4c957f2d >>> 0\nconst BIT_53 = 9007199254740992.0\nconst BIT_27 = 134217728.0\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport type PCGRandomState = [number, number, number, number]\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport type OptionalNumber = number | null | undefined\n\n/**\n * PCG is a family of simple fast space-efficient statistically good algorithms\n * for random number generation. Unlike many general-purpose RNGs, they are also\n * hard to predict.\n *\n * @category model\n * @since 2.0.0\n */\nexport class PCGRandom {\n  private _state!: Int32Array\n\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * - `seed` - The low 32 bits of the seed (0 is used for high 32 bits).\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(seed?: OptionalNumber)\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * - `seedHi` - The high 32 bits of the seed.\n   * - `seedLo` - The low 32 bits of the seed.\n   * - `inc` - The low 32 bits of the incrementer (0 is used for high 32 bits).\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(seedHi: OptionalNumber, seedLo: OptionalNumber, inc?: OptionalNumber)\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * - `seedHi` - The high 32 bits of the seed.\n   * - `seedLo` - The low 32 bits of the seed.\n   * - `incHi` - The high 32 bits of the incrementer.\n   * - `incLo` - The low 32 bits of the incrementer.\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(\n    seedHi: OptionalNumber,\n    seedLo: OptionalNumber,\n    incHi: OptionalNumber,\n    incLo: OptionalNumber\n  )\n  constructor(\n    seedHi?: OptionalNumber,\n    seedLo?: OptionalNumber,\n    incHi?: OptionalNumber,\n    incLo?: OptionalNumber\n  ) {\n    if (isNullable(seedLo) && isNullable(seedHi)) {\n      seedLo = (Math.random() * 0xffffffff) >>> 0\n      seedHi = 0\n    } else if (isNullable(seedLo)) {\n      seedLo = seedHi\n      seedHi = 0\n    }\n    if (isNullable(incLo) && isNullable(incHi)) {\n      incLo = this._state ? this._state[3] : defaultIncLo\n      incHi = this._state ? this._state[2] : defaultIncHi\n    } else if (isNullable(incLo)) {\n      incLo = <number> incHi\n      incHi = 0\n    }\n\n    this._state = new Int32Array([0, 0, (<number> incHi) >>> 0, ((incLo || 0) | 1) >>> 0])\n    this._next()\n    add64(\n      this._state,\n      this._state[0]!,\n      this._state[1]!,\n      (<number> seedHi) >>> 0,\n      (<number> seedLo) >>> 0\n    )\n    this._next()\n    return this\n  }\n\n  /**\n   * Returns a copy of the internal state of this random number generator as a\n   * JavaScript Array.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  getState(): PCGRandomState {\n    return [this._state[0]!, this._state[1]!, this._state[2]!, this._state[3]!]\n  }\n\n  /**\n   * Restore state previously retrieved using `getState()`.\n   *\n   * @since 2.0.0\n   */\n  setState(state: PCGRandomState) {\n    this._state[0] = state[0]\n    this._state[1] = state[1]\n    this._state[2] = state[2]\n    this._state[3] = state[3] | 1\n  }\n\n  /**\n   * Get a uniformly distributed 32 bit integer between [0, max).\n   *\n   * @category getter\n   * @since 2.0.0\n   */\n  integer(max: number) {\n    return Math.round(this.number() * Number.MAX_SAFE_INTEGER) % max\n  }\n\n  /**\n   * Get a uniformly distributed IEEE-754 double between 0.0 and 1.0, with\n   * 53 bits of precision (every bit of the mantissa is randomized).\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  number() {\n    const hi = (this._next() & 0x03ffffff) * 1.0\n    const lo = (this._next() & 0x07ffffff) * 1.0\n    return (hi * BIT_27 + lo) / BIT_53\n  }\n\n  /** @internal */\n  private _next() {\n    // save current state (what we'll use for this number)\n    const oldHi = this._state[0]! >>> 0\n    const oldLo = this._state[1]! >>> 0\n\n    // churn LCG.\n    mul64(this._state, oldHi, oldLo, MUL_HI, MUL_LO)\n    add64(this._state, this._state[0]!, this._state[1]!, this._state[2]!, this._state[3]!)\n\n    // get least sig. 32 bits of ((oldstate >> 18) ^ oldstate) >> 27\n    let xsHi = oldHi >>> 18\n    let xsLo = ((oldLo >>> 18) | (oldHi << 14)) >>> 0\n    xsHi = (xsHi ^ oldHi) >>> 0\n    xsLo = (xsLo ^ oldLo) >>> 0\n    const xorshifted = ((xsLo >>> 27) | (xsHi << 5)) >>> 0\n    // rotate xorshifted right a random amount, based on the most sig. 5 bits\n    // bits of the old state.\n    const rot = oldHi >>> 27\n    const rot2 = ((-rot >>> 0) & 31) >>> 0\n    return ((xorshifted >>> rot) | (xorshifted << rot2)) >>> 0\n  }\n}\n\nfunction mul64(\n  out: Int32Array,\n  aHi: number,\n  aLo: number,\n  bHi: number,\n  bLo: number\n): void {\n  let c1 = ((aLo >>> 16) * (bLo & 0xffff)) >>> 0\n  let c0 = ((aLo & 0xffff) * (bLo >>> 16)) >>> 0\n\n  let lo = ((aLo & 0xffff) * (bLo & 0xffff)) >>> 0\n  let hi = ((aLo >>> 16) * (bLo >>> 16) + ((c0 >>> 16) + (c1 >>> 16))) >>> 0\n\n  c0 = (c0 << 16) >>> 0\n  lo = (lo + c0) >>> 0\n  if ((lo >>> 0) < (c0 >>> 0)) {\n    hi = (hi + 1) >>> 0\n  }\n\n  c1 = (c1 << 16) >>> 0\n  lo = (lo + c1) >>> 0\n  if ((lo >>> 0) < (c1 >>> 0)) {\n    hi = (hi + 1) >>> 0\n  }\n\n  hi = (hi + Math.imul(aLo, bHi)) >>> 0\n  hi = (hi + Math.imul(aHi, bLo)) >>> 0\n\n  out[0] = hi\n  out[1] = lo\n}\n\n// add two 64 bit numbers (given in parts), and store the result in `out`.\nfunction add64(\n  out: Int32Array,\n  aHi: number,\n  aLo: number,\n  bHi: number,\n  bLo: number\n): void {\n  let hi = (aHi + bHi) >>> 0\n  const lo = (aLo + bLo) >>> 0\n  if ((lo >>> 0) < (aLo >>> 0)) {\n    hi = (hi + 1) | 0\n  }\n  out[0] = hi\n  out[1] = lo\n}\n\n/**\n * @since 3.0.6\n */\nexport const YieldWrapTypeId: unique symbol = Symbol.for(\"effect/Utils/YieldWrap\")\n\n/**\n * @since 3.0.6\n */\nexport class YieldWrap<T> {\n  /**\n   * @since 3.0.6\n   */\n  readonly #value: T\n  constructor(value: T) {\n    this.#value = value\n  }\n  /**\n   * @since 3.0.6\n   */\n  [YieldWrapTypeId](): T {\n    return this.#value\n  }\n}\n\n/**\n * @since 3.0.6\n */\nexport function yieldWrapGet<T>(self: YieldWrap<T>): T {\n  if (typeof self === \"object\" && self !== null && YieldWrapTypeId in self) {\n    return self[YieldWrapTypeId]()\n  }\n  throw new Error(getBugErrorMessage(\"yieldWrapGet\"))\n}\n\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nexport const structuralRegionState = globalValue(\n  \"effect/Utils/isStructuralRegion\",\n  (): { enabled: boolean; tester: ((a: unknown, b: unknown) => boolean) | undefined } => ({\n    enabled: false,\n    tester: undefined\n  })\n)\n\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nexport const structuralRegion = <A>(body: () => A, tester?: (a: unknown, b: unknown) => boolean): A => {\n  const current = structuralRegionState.enabled\n  const currentTester = structuralRegionState.tester\n  structuralRegionState.enabled = true\n  if (tester) {\n    structuralRegionState.tester = tester\n  }\n  try {\n    return body()\n  } finally {\n    structuralRegionState.enabled = current\n    structuralRegionState.tester = currentTester\n  }\n}\n\nconst standard = {\n  effect_internal_function: <A>(body: () => A) => {\n    return body()\n  }\n}\n\nconst forced = {\n  effect_internal_function: <A>(body: () => A) => {\n    try {\n      return body()\n    } finally {\n      //\n    }\n  }\n}\n\nconst isNotOptimizedAway =\n  standard.effect_internal_function(() => new Error().stack)?.includes(\"effect_internal_function\") === true\n\n/**\n * @since 3.2.2\n * @status experimental\n * @category tracing\n */\nexport const internalCall = isNotOptimizedAway ? standard.effect_internal_function : forced.effect_internal_function\n\nconst genConstructor = (function*() {}).constructor\n\n/**\n * @since 3.11.0\n */\nexport const isGeneratorFunction = (u: unknown): u is (...args: Array<any>) => Generator<any, any, any> =>\n  isObject(u) && u.constructor === genConstructor\n", "/**\n * @since 2.0.0\n */\n\n/** @internal */\nexport const getBugErrorMessage = (message: string) =>\n  `BUG: ${message} - please report an issue at https://github.com/Effect-TS/effect/issues`\n", "/**\n * @since 2.0.0\n */\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport { hasProperty, isFunction } from \"./Predicate.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const NodeInspectSymbol = Symbol.for(\"nodejs.util.inspect.custom\")\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type NodeInspectSymbol = typeof NodeInspectSymbol\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Inspectable {\n  toString(): string\n  toJSON(): unknown\n  [NodeInspectSymbol](): unknown\n}\n\n/**\n * @since 2.0.0\n */\nexport const toJSON = (x: unknown): unknown => {\n  try {\n    if (\n      hasProperty(x, \"toJSON\") && isFunction(x[\"toJSON\"]) &&\n      x[\"toJSON\"].length === 0\n    ) {\n      return x.toJSON()\n    } else if (Array.isArray(x)) {\n      return x.map(toJSON)\n    }\n  } catch {\n    return {}\n  }\n  return redact(x)\n}\n\n/**\n * @since 2.0.0\n */\nexport const format = (x: unknown): string => JSON.stringify(x, null, 2)\n\n/**\n * @since 2.0.0\n */\nexport const BaseProto: Inspectable = {\n  toJSON() {\n    return toJSON(this)\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  toString() {\n    return format(this.toJSON())\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport abstract class Class {\n  /**\n   * @since 2.0.0\n   */\n  abstract toJSON(): unknown\n  /**\n   * @since 2.0.0\n   */\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n  /**\n   * @since 2.0.0\n   */\n  toString() {\n    return format(this.toJSON())\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport const toStringUnknown = (u: unknown, whitespace: number | string | undefined = 2): string => {\n  if (typeof u === \"string\") {\n    return u\n  }\n  try {\n    return typeof u === \"object\" ? stringifyCircular(u, whitespace) : String(u)\n  } catch {\n    return String(u)\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport const stringifyCircular = (obj: unknown, whitespace?: number | string | undefined): string => {\n  let cache: Array<unknown> = []\n  const retVal = JSON.stringify(\n    obj,\n    (_key, value) =>\n      typeof value === \"object\" && value !== null\n        ? cache.includes(value)\n          ? undefined // circular reference\n          : cache.push(value) && (redactableState.fiberRefs !== undefined && isRedactable(value)\n            ? value[symbolRedactable](redactableState.fiberRefs)\n            : value)\n        : value,\n    whitespace\n  )\n  ;(cache as any) = undefined\n  return retVal\n}\n\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport interface Redactable {\n  readonly [symbolRedactable]: (fiberRefs: FiberRefs.FiberRefs) => unknown\n}\n\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const symbolRedactable: unique symbol = Symbol.for(\"effect/Inspectable/Redactable\")\n\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const isRedactable = (u: unknown): u is Redactable =>\n  typeof u === \"object\" && u !== null && symbolRedactable in u\n\nconst redactableState = globalValue(\"effect/Inspectable/redactableState\", () => ({\n  fiberRefs: undefined as FiberRefs.FiberRefs | undefined\n}))\n\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const withRedactableContext = <A>(context: FiberRefs.FiberRefs, f: () => A): A => {\n  const prev = redactableState.fiberRefs\n  redactableState.fiberRefs = context\n  try {\n    return f()\n  } finally {\n    redactableState.fiberRefs = prev\n  }\n}\n\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const redact = (u: unknown): unknown => {\n  if (isRedactable(u) && redactableState.fiberRefs !== undefined) {\n    return u[symbolRedactable](redactableState.fiberRefs)\n  }\n  return u\n}\n", "import type * as Channel from \"../Channel.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type * as Effectable from \"../Effectable.js\"\nimport * as Equal from \"../Equal.js\"\nimport * as Hash from \"../Hash.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport type * as Sink from \"../Sink.js\"\nimport type * as Stream from \"../Stream.js\"\nimport { SingleShotGen, YieldWrap } from \"../Utils.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport * as version from \"./version.js\"\n\n/** @internal */\nexport const EffectTypeId: Effect.EffectTypeId = Symbol.for(\"effect/Effect\") as Effect.EffectTypeId\n\n/** @internal */\nexport const StreamTypeId: Stream.StreamTypeId = Symbol.for(\"effect/Stream\") as Stream.StreamTypeId\n\n/** @internal */\nexport const SinkTypeId: Sink.SinkTypeId = Symbol.for(\"effect/Sink\") as Sink.SinkTypeId\n\n/** @internal */\nexport const ChannelTypeId: Channel.ChannelTypeId = Symbol.for(\"effect/Channel\") as Channel.ChannelTypeId\n\n/** @internal */\nexport const effectVariance = {\n  /* c8 ignore next */\n  _R: (_: never) => _,\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _,\n\n  _V: version.getCurrentVersion()\n}\n\nconst sinkVariance = {\n  /* c8 ignore next */\n  _A: (_: never) => _,\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _L: (_: never) => _,\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\nconst channelVariance = {\n  /* c8 ignore next */\n  _Env: (_: never) => _,\n  /* c8 ignore next */\n  _InErr: (_: unknown) => _,\n  /* c8 ignore next */\n  _InElem: (_: unknown) => _,\n  /* c8 ignore next */\n  _InDone: (_: unknown) => _,\n  /* c8 ignore next */\n  _OutErr: (_: never) => _,\n  /* c8 ignore next */\n  _OutElem: (_: never) => _,\n  /* c8 ignore next */\n  _OutDone: (_: never) => _\n}\n\n/** @internal */\nexport const EffectPrototype: Effect.Effect<never> & Equal.Equal = {\n  [EffectTypeId]: effectVariance,\n  [StreamTypeId]: effectVariance,\n  [SinkTypeId]: sinkVariance,\n  [ChannelTypeId]: channelVariance,\n  [Equal.symbol](that: any) {\n    return this === that\n  },\n  [Hash.symbol]() {\n    return Hash.cached(this, Hash.random(this))\n  },\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this)) as any\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const StructuralPrototype: Equal.Equal = {\n  [Hash.symbol]() {\n    return Hash.cached(this, Hash.structure(this))\n  },\n  [Equal.symbol](this: Equal.Equal, that: Equal.Equal) {\n    const selfKeys = Object.keys(this)\n    const thatKeys = Object.keys(that as object)\n    if (selfKeys.length !== thatKeys.length) {\n      return false\n    }\n    for (const key of selfKeys) {\n      if (!(key in (that as object) && Equal.equals((this as any)[key], (that as any)[key]))) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\n/** @internal */\nexport const CommitPrototype: Effect.Effect<never> = {\n  ...EffectPrototype,\n  _op: OpCodes.OP_COMMIT\n} as any\n\n/** @internal */\nexport const StructuralCommitPrototype: Effect.Effect<never> = {\n  ...CommitPrototype,\n  ...StructuralPrototype\n} as any\n\n/** @internal */\nexport const Base: Effectable.CommitPrimitive = (function() {\n  function Base() {}\n  Base.prototype = CommitPrototype\n  return Base as any\n})()\n\n/** @internal */\nexport const StructuralBase: Effectable.CommitPrimitive = (function() {\n  function Base() {}\n  Base.prototype = StructuralCommitPrototype\n  return Base as any\n})()\n", "/**\n * @since 2.0.0\n */\n\nimport type { Ctor } from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category Models\n */\nexport interface Pipeable {\n  pipe<A>(this: A): A\n  pipe<A, B = never>(this: A, ab: (_: A) => B): B\n  pipe<A, B = never, C = never>(this: A, ab: (_: A) => B, bc: (_: B) => C): C\n  pipe<A, B = never, C = never, D = never>(this: A, ab: (_: A) => B, bc: (_: B) => C, cd: (_: C) => D): D\n  pipe<A, B = never, C = never, D = never, E = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E\n  ): E\n  pipe<A, B = never, C = never, D = never, E = never, F = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F\n  ): F\n  pipe<A, B = never, C = never, D = never, E = never, F = never, G = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G\n  ): G\n  pipe<A, B = never, C = never, D = never, E = never, F = never, G = never, H = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H\n  ): H\n  pipe<A, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I\n  ): I\n  pipe<A, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J\n  ): J\n  pipe<A, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K\n  ): K\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L\n  ): L\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M\n  ): M\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N\n  ): N\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O\n  ): O\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P\n  ): P\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q\n  ): Q\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never,\n    R = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R\n  ): R\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never,\n    R = never,\n    S = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S\n  ): S\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never,\n    R = never,\n    S = never,\n    T = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T\n  ): T\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never,\n    R = never,\n    S = never,\n    T = never,\n    U = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T,\n    tu: (_: T) => U\n  ): U\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never,\n    R = never,\n    S = never,\n    T = never,\n    U = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T,\n    tu: (_: T) => U\n  ): U\n}\n\n/**\n * @since 2.0.0\n */\nexport const pipeArguments = <A>(self: A, args: IArguments): unknown => {\n  switch (args.length) {\n    case 0:\n      return self\n    case 1:\n      return args[0](self)\n    case 2:\n      return args[1](args[0](self))\n    case 3:\n      return args[2](args[1](args[0](self)))\n    case 4:\n      return args[3](args[2](args[1](args[0](self))))\n    case 5:\n      return args[4](args[3](args[2](args[1](args[0](self)))))\n    case 6:\n      return args[5](args[4](args[3](args[2](args[1](args[0](self))))))\n    case 7:\n      return args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))\n    case 8:\n      return args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self))))))))\n    case 9:\n      return args[8](args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))))\n    default: {\n      let ret = self\n      for (let i = 0, len = args.length; i < len; i++) {\n        ret = args[i](ret)\n      }\n      return ret\n    }\n  }\n}\n\n/**\n * @since 3.15.0\n * @category Models\n */\nexport interface PipeableConstructor {\n  new(...args: Array<any>): Pipeable\n}\n\n/**\n * @since 3.15.0\n * @category Prototypes\n */\nexport const Prototype: Pipeable = {\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst Base: PipeableConstructor = (function() {\n  function PipeableBase() {}\n  PipeableBase.prototype = Prototype\n  return PipeableBase as any\n})()\n\n/**\n * @since 3.15.0\n * @category Constructors\n */\nexport const Class: {\n  /**\n   * @since 3.15.0\n   * @category Constructors\n   */\n  (): PipeableConstructor\n  /**\n   * @since 3.15.0\n   * @category Constructors\n   */\n  <TBase extends Ctor>(klass: TBase): TBase & PipeableConstructor\n} = (klass?: Ctor) =>\n  klass ?\n    class extends klass {\n      pipe() {\n        return pipeArguments(this, arguments)\n      }\n    }\n    : Base\n", "/** @internal */\nexport type OP_ASYNC = typeof OP_ASYNC\n\n/** @internal */\nexport const OP_ASYNC = \"Async\" as const\n\n/** @internal */\nexport type OP_COMMIT = typeof OP_COMMIT\n\n/** @internal */\nexport const OP_COMMIT = \"Commit\" as const\n\n/** @internal */\nexport type OP_FAILURE = typeof OP_FAILURE\n\n/** @internal */\nexport const OP_FAILURE = \"Failure\" as const\n\n/** @internal */\nexport type OP_ON_FAILURE = typeof OP_ON_FAILURE\n\n/** @internal */\nexport const OP_ON_FAILURE = \"OnFailure\" as const\n\n/** @internal */\nexport type OP_ON_SUCCESS = typeof OP_ON_SUCCESS\n\n/** @internal */\nexport const OP_ON_SUCCESS = \"OnSuccess\" as const\n\n/** @internal */\nexport type OP_ON_SUCCESS_AND_FAILURE = typeof OP_ON_SUCCESS_AND_FAILURE\n\n/** @internal */\nexport const OP_ON_SUCCESS_AND_FAILURE = \"OnSuccessAndFailure\" as const\n\n/** @internal */\nexport type OP_SUCCESS = typeof OP_SUCCESS\n\n/** @internal */\nexport const OP_SUCCESS = \"Success\" as const\n\n/** @internal */\nexport type OP_SYNC = typeof OP_SYNC\n\n/** @internal */\nexport const OP_SYNC = \"Sync\" as const\n\n/** @internal */\nexport const OP_TAG = \"Tag\" as const\n\n/** @internal */\nexport type OP_TAG = typeof OP_TAG\n\n/** @internal */\nexport type OP_UPDATE_RUNTIME_FLAGS = typeof OP_UPDATE_RUNTIME_FLAGS\n\n/** @internal */\nexport const OP_UPDATE_RUNTIME_FLAGS = \"UpdateRuntimeFlags\" as const\n\n/** @internal */\nexport type OP_WHILE = typeof OP_WHILE\n\n/** @internal */\nexport const OP_WHILE = \"While\" as const\n\n/** @internal */\nexport type OP_ITERATOR = typeof OP_ITERATOR\n\n/** @internal */\nexport const OP_ITERATOR = \"Iterator\" as const\n\n/** @internal */\nexport type OP_WITH_RUNTIME = typeof OP_WITH_RUNTIME\n\n/** @internal */\nexport const OP_WITH_RUNTIME = \"WithRuntime\" as const\n\n/** @internal */\nexport type OP_YIELD = typeof OP_YIELD\n\n/** @internal */\nexport const OP_YIELD = \"Yield\" as const\n\n/** @internal */\nexport type OP_REVERT_FLAGS = typeof OP_REVERT_FLAGS\n\n/** @internal */\nexport const OP_REVERT_FLAGS = \"RevertFlags\" as const\n", "let moduleVersion = \"3.18.4\"\n\nexport const getCurrentVersion = () => moduleVersion\n\nexport const setCurrentVersion = (version: string) => {\n  moduleVersion = version\n}\n", "/**\n * @since 2.0.0\n */\n\nimport * as Equal from \"../Equal.js\"\nimport * as Hash from \"../Hash.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport type * as Option from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport { EffectPrototype } from \"./effectable.js\"\n\nconst TypeId: Option.TypeId = Symbol.for(\"effect/Option\") as Option.TypeId\n\nconst CommonProto = {\n  ...EffectPrototype,\n  [TypeId]: {\n    _A: (_: never) => _\n  },\n  [NodeInspectSymbol]<A>(this: Option.Option<A>) {\n    return this.toJSON()\n  },\n  toString<A>(this: Option.Option<A>) {\n    return format(this.toJSON())\n  }\n}\n\nconst SomeProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"Some\",\n  _op: \"Some\",\n  [Equal.symbol]<A>(this: Option.Some<A>, that: unknown): boolean {\n    return isOption(that) && isSome(that) && Equal.equals(this.value, that.value)\n  },\n  [Hash.symbol]<A>(this: Option.Some<A>) {\n    return Hash.cached(this, Hash.combine(Hash.hash(this._tag))(Hash.hash(this.value)))\n  },\n  toJSON<A>(this: Option.Some<A>) {\n    return {\n      _id: \"Option\",\n      _tag: this._tag,\n      value: toJSON(this.value)\n    }\n  }\n})\n\nconst NoneHash = Hash.hash(\"None\")\nconst NoneProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"None\",\n  _op: \"None\",\n  [Equal.symbol]<A>(this: Option.None<A>, that: unknown): boolean {\n    return isOption(that) && isNone(that)\n  },\n  [Hash.symbol]<A>(this: Option.None<A>) {\n    return NoneHash\n  },\n  toJSON<A>(this: Option.None<A>) {\n    return {\n      _id: \"Option\",\n      _tag: this._tag\n    }\n  }\n})\n\n/** @internal */\nexport const isOption = (input: unknown): input is Option.Option<unknown> => hasProperty(input, TypeId)\n\n/** @internal */\nexport const isNone = <A>(fa: Option.Option<A>): fa is Option.None<A> => fa._tag === \"None\"\n\n/** @internal */\nexport const isSome = <A>(fa: Option.Option<A>): fa is Option.Some<A> => fa._tag === \"Some\"\n\n/** @internal */\nexport const none: Option.Option<never> = Object.create(NoneProto)\n\n/** @internal */\nexport const some = <A>(value: A): Option.Option<A> => {\n  const a = Object.create(SomeProto)\n  a.value = value\n  return a\n}\n", "/**\n * @since 2.0.0\n */\n\nimport type { NonEmptyArray } from \"../Array.js\"\n\n/** @internal */\nexport const isNonEmptyArray = <A>(self: ReadonlyArray<A>): self is NonEmptyArray<A> => self.length > 0\n", "/**\n * @since 2.0.0\n */\nimport type { Either } from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { constNull, constUndefined, dual, identity, isFunction } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport * as either from \"./internal/either.js\"\nimport * as option from \"./internal/option.js\"\nimport type { Order } from \"./Order.js\"\nimport * as order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type { Covariant, NoInfer, NotFunction } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport * as Gen from \"./Utils.js\"\n\n/**\n * The `Option` data type represents optional values. An `Option<A>` can either\n * be `Some<A>`, containing a value of type `A`, or `None`, representing the\n * absence of a value.\n *\n * **When to Use**\n *\n * You can use `Option` in scenarios like:\n *\n * - Using it for initial values\n * - Returning values from functions that are not defined for all possible\n *   inputs (referred to as “partial functions”)\n * - Managing optional fields in data structures\n * - Handling optional function arguments\n *\n * @category Models\n * @since 2.0.0\n */\nexport type Option<A> = None<A> | Some<A>\n\n/**\n * @category Symbols\n * @since 2.0.0\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/Option\")\n\n/**\n * @category Symbols\n * @since 2.0.0\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @category Models\n * @since 2.0.0\n */\nexport interface None<out A> extends Pipeable, Inspectable {\n  readonly _tag: \"None\"\n  readonly _op: \"None\"\n  readonly [TypeId]: {\n    readonly _A: Covariant<A>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: OptionUnify<this>\n  [Unify.ignoreSymbol]?: OptionUnifyIgnore\n}\n\n/**\n * @category Models\n * @since 2.0.0\n */\nexport interface Some<out A> extends Pipeable, Inspectable {\n  readonly _tag: \"Some\"\n  readonly _op: \"Some\"\n  readonly value: A\n  readonly [TypeId]: {\n    readonly _A: Covariant<A>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: OptionUnify<this>\n  [Unify.ignoreSymbol]?: OptionUnifyIgnore\n}\n\n/**\n * @category Models\n * @since 2.0.0\n */\nexport interface OptionUnify<A extends { [Unify.typeSymbol]?: any }> {\n  Option?: () => A[Unify.typeSymbol] extends Option<infer A0> | infer _ ? Option<A0> : never\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Option {\n  /**\n   * Extracts the type of the value contained in an `Option`.\n   *\n   * **Example** (Getting the Value Type of an Option)\n   *\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Declare an Option holding a string\n   * declare const myOption: Option.Option<string>\n   *\n   * // Extract the type of the value within the Option\n   * //\n   * //      ┌─── string\n   * //      ▼\n   * type MyType = Option.Option.Value<typeof myOption>\n   * ```\n   *\n   * @since 2.0.0\n   * @category Type-level Utils\n   */\n  export type Value<T extends Option<any>> = [T] extends [Option<infer _A>] ? _A : never\n}\n\n/**\n * @category Models\n * @since 2.0.0\n */\nexport interface OptionUnifyIgnore {}\n\n/**\n * @category Type Lambdas\n * @since 2.0.0\n */\nexport interface OptionTypeLambda extends TypeLambda {\n  readonly type: Option<this[\"Target\"]>\n}\n\n/**\n * Represents the absence of a value by creating an empty `Option`.\n *\n * `Option.none` returns an `Option<never>`, which is a subtype of `Option<A>`.\n * This means you can use it in place of any `Option<A>` regardless of the type\n * `A`.\n *\n * **Example** (Creating an Option with No Value)\n *\n * ```ts\n * import { Option } from \"effect\"\n *\n * // An Option holding no value\n * //\n * //      ┌─── Option<never>\n * //      ▼\n * const noValue = Option.none()\n *\n * console.log(noValue)\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @see {@link some} for the opposite operation.\n *\n * @category Constructors\n * @since 2.0.0\n */\nexport const none = <A = never>(): Option<A> => option.none\n\n/**\n * Wraps the given value into an `Option` to represent its presence.\n *\n * **Example** (Creating an Option with a Value)\n *\n * ```ts\n * import { Option } from \"effect\"\n *\n * // An Option holding the number 1\n * //\n * //      ┌─── Option<number>\n * //      ▼\n * const value = Option.some(1)\n *\n * console.log(value)\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n * ```\n *\n * @see {@link none} for the opposite operation.\n *\n * @category Constructors\n * @since 2.0.0\n */\nexport const some: <A>(value: A) => Option<A> = option.some\n\n/**\n * Determines whether the given value is an `Option`.\n *\n * **Details**\n *\n * This function checks if a value is an instance of `Option`. It returns `true`\n * if the value is either `Option.some` or `Option.none`, and `false` otherwise.\n * This is particularly useful when working with unknown values or when you need\n * to ensure type safety in your code.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.isOption(Option.some(1)))\n * // Output: true\n *\n * console.log(Option.isOption(Option.none()))\n * // Output: true\n *\n * console.log(Option.isOption({}))\n * // Output: false\n * ```\n *\n * @category Guards\n * @since 2.0.0\n */\nexport const isOption: (input: unknown) => input is Option<unknown> = option.isOption\n\n/**\n * Checks whether an `Option` represents the absence of a value (`None`).\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.isNone(Option.some(1)))\n * // Output: false\n *\n * console.log(Option.isNone(Option.none()))\n * // Output: true\n * ```\n *\n * @see {@link isSome} for the opposite check.\n *\n * @category Guards\n * @since 2.0.0\n */\nexport const isNone: <A>(self: Option<A>) => self is None<A> = option.isNone\n\n/**\n * Checks whether an `Option` contains a value (`Some`).\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.isSome(Option.some(1)))\n * // Output: true\n *\n * console.log(Option.isSome(Option.none()))\n * // Output: false\n * ```\n *\n * @see {@link isNone} for the opposite check.\n *\n * @category Guards\n * @since 2.0.0\n */\nexport const isSome: <A>(self: Option<A>) => self is Some<A> = option.isSome\n\n/**\n * Performs pattern matching on an `Option` to handle both `Some` and `None`\n * cases.\n *\n * **Details**\n *\n * This function allows you to match against an `Option` and handle both\n * scenarios: when the `Option` is `None` (i.e., contains no value), and when\n * the `Option` is `Some` (i.e., contains a value). It executes one of the\n * provided functions based on the case:\n *\n * - If the `Option` is `None`, the `onNone` function is executed and its result\n *   is returned.\n * - If the `Option` is `Some`, the `onSome` function is executed with the\n *   contained value, and its result is returned.\n *\n * This function provides a concise and functional way to handle optional values\n * without resorting to `if` or manual checks, making your code more declarative\n * and readable.\n *\n * **Example** (Pattern Matching with Option)\n *\n * ```ts\n * import { Option } from \"effect\"\n *\n * const foo = Option.some(1)\n *\n * const message = Option.match(foo, {\n *   onNone: () => \"Option is empty\",\n *   onSome: (value) => `Option has a value: ${value}`\n * })\n *\n * console.log(message)\n * // Output: \"Option has a value: 1\"\n * ```\n *\n * @category Pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  /**\n   * Performs pattern matching on an `Option` to handle both `Some` and `None`\n   * cases.\n   *\n   * **Details**\n   *\n   * This function allows you to match against an `Option` and handle both\n   * scenarios: when the `Option` is `None` (i.e., contains no value), and when\n   * the `Option` is `Some` (i.e., contains a value). It executes one of the\n   * provided functions based on the case:\n   *\n   * - If the `Option` is `None`, the `onNone` function is executed and its result\n   *   is returned.\n   * - If the `Option` is `Some`, the `onSome` function is executed with the\n   *   contained value, and its result is returned.\n   *\n   * This function provides a concise and functional way to handle optional values\n   * without resorting to `if` or manual checks, making your code more declarative\n   * and readable.\n   *\n   * **Example** (Pattern Matching with Option)\n   *\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const foo = Option.some(1)\n   *\n   * const message = Option.match(foo, {\n   *   onNone: () => \"Option is empty\",\n   *   onSome: (value) => `Option has a value: ${value}`\n   * })\n   *\n   * console.log(message)\n   * // Output: \"Option has a value: 1\"\n   * ```\n   *\n   * @category Pattern matching\n   * @since 2.0.0\n   */\n  <B, A, C = B>(\n    options: {\n      readonly onNone: LazyArg<B>\n      readonly onSome: (a: A) => C\n    }\n  ): (self: Option<A>) => B | C\n  /**\n   * Performs pattern matching on an `Option` to handle both `Some` and `None`\n   * cases.\n   *\n   * **Details**\n   *\n   * This function allows you to match against an `Option` and handle both\n   * scenarios: when the `Option` is `None` (i.e., contains no value), and when\n   * the `Option` is `Some` (i.e., contains a value). It executes one of the\n   * provided functions based on the case:\n   *\n   * - If the `Option` is `None`, the `onNone` function is executed and its result\n   *   is returned.\n   * - If the `Option` is `Some`, the `onSome` function is executed with the\n   *   contained value, and its result is returned.\n   *\n   * This function provides a concise and functional way to handle optional values\n   * without resorting to `if` or manual checks, making your code more declarative\n   * and readable.\n   *\n   * **Example** (Pattern Matching with Option)\n   *\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const foo = Option.some(1)\n   *\n   * const message = Option.match(foo, {\n   *   onNone: () => \"Option is empty\",\n   *   onSome: (value) => `Option has a value: ${value}`\n   * })\n   *\n   * console.log(message)\n   * // Output: \"Option has a value: 1\"\n   * ```\n   *\n   * @category Pattern matching\n   * @since 2.0.0\n   */\n  <A, B, C = B>(\n    self: Option<A>,\n    options: {\n      readonly onNone: LazyArg<B>\n      readonly onSome: (a: A) => C\n    }\n  ): B | C\n} = dual(\n  2,\n  <A, B, C = B>(self: Option<A>, { onNone, onSome }: {\n    readonly onNone: LazyArg<B>\n    readonly onSome: (a: A) => C\n  }): B | C => isNone(self) ? onNone() : onSome(self.value)\n)\n\n/**\n * Converts an `Option`-returning function into a type guard.\n *\n * **Details**\n *\n * This function transforms a function that returns an `Option` into a type\n * guard, ensuring type safety when validating or narrowing types. The returned\n * type guard function checks whether the input satisfies the condition defined\n * in the original `Option`-returning function.\n *\n * If the original function returns `Option.some`, the type guard evaluates to\n * `true`, confirming the input is of the desired type. If the function returns\n * `Option.none`, the type guard evaluates to `false`.\n *\n * This utility is especially useful for validating types in union types,\n * filtering arrays, or ensuring safe handling of specific subtypes.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * type MyData = string | number\n *\n * const parseString = (data: MyData): Option.Option<string> =>\n *   typeof data === \"string\" ? Option.some(data) : Option.none()\n *\n * //      ┌─── (a: MyData) => a is string\n * //      ▼\n * const isString = Option.toRefinement(parseString)\n *\n * console.log(isString(\"a\"))\n * // Output: true\n *\n * console.log(isString(1))\n * // Output: false\n * ```\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const toRefinement = <A, B extends A>(f: (a: A) => Option<B>): (a: A) => a is B => (a: A): a is B => isSome(f(a))\n\n/**\n * Converts an `Iterable` into an `Option`, wrapping the first element if it\n * exists.\n *\n * **Details**\n *\n * This function takes an `Iterable` (e.g., an array, a generator, or any object\n * implementing the `Iterable` interface) and returns an `Option` based on its\n * content:\n *\n * - If the `Iterable` contains at least one element, the first element is\n *   wrapped in a `Some` and returned.\n * - If the `Iterable` is empty, `None` is returned, representing the absence of\n *   a value.\n *\n * This utility is useful for safely handling collections that might be empty,\n * ensuring you explicitly handle both cases where a value exists or doesn't.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.fromIterable([1, 2, 3]))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * console.log(Option.fromIterable([]))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Constructors\n * @since 2.0.0\n */\nexport const fromIterable = <A>(collection: Iterable<A>): Option<A> => {\n  for (const a of collection) {\n    return some(a)\n  }\n  return none()\n}\n\n/**\n * Converts an `Either` into an `Option` by discarding the error and extracting\n * the right value.\n *\n * **Details**\n *\n * This function takes an `Either` and returns an `Option` based on its value:\n *\n * - If the `Either` is a `Right`, its value is wrapped in a `Some` and\n *   returned.\n * - If the `Either` is a `Left`, the error is discarded, and `None` is\n *   returned.\n *\n * This is particularly useful when you only care about the success case\n * (`Right`) of an `Either` and want to handle the result using `Option`. By\n * using this function, you can convert `Either` into a simpler structure for\n * cases where error handling is not required.\n *\n * @example\n * ```ts\n * import { Either, Option } from \"effect\"\n *\n * console.log(Option.getRight(Either.right(\"ok\")))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'ok' }\n *\n * console.log(Option.getRight(Either.left(\"err\")))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @see {@link getLeft} for the opposite operation.\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const getRight: <R, L>(self: Either<R, L>) => Option<R> = either.getRight\n\n/**\n * Converts an `Either` into an `Option` by discarding the right value and\n * extracting the left value.\n *\n * **Details**\n *\n * This function transforms an `Either` into an `Option` as follows:\n *\n * - If the `Either` is a `Left`, its value is wrapped in a `Some` and returned.\n * - If the `Either` is a `Right`, the value is discarded, and `None` is\n *   returned.\n *\n * This utility is useful when you only care about the error case (`Left`) of an\n * `Either` and want to handle it as an `Option`. By discarding the right value,\n * it simplifies error-focused workflows.\n *\n * @example\n * ```ts\n * import { Either, Option } from \"effect\"\n *\n * console.log(Option.getLeft(Either.right(\"ok\")))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(Option.getLeft(Either.left(\"err\")))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'err' }\n * ```\n *\n * @see {@link getRight} for the opposite operation.\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const getLeft: <R, L>(self: Either<R, L>) => Option<L> = either.getLeft\n\n/**\n * Returns the value contained in the `Option` if it is `Some`, otherwise\n * evaluates and returns the result of `onNone`.\n *\n * **Details**\n *\n * This function allows you to provide a fallback value or computation for when\n * an `Option` is `None`. If the `Option` contains a value (`Some`), that value\n * is returned. If it is empty (`None`), the `onNone` function is executed, and\n * its result is returned instead.\n *\n * This utility is helpful for safely handling `Option` values by ensuring you\n * always receive a meaningful result, whether or not the `Option` contains a\n * value. It is particularly useful for providing default values or alternative\n * logic when working with optional values.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.some(1).pipe(Option.getOrElse(() => 0)))\n * // Output: 1\n *\n * console.log(Option.none().pipe(Option.getOrElse(() => 0)))\n * // Output: 0\n * ```\n *\n * @see {@link getOrNull} for a version that returns `null` instead of executing a function.\n * @see {@link getOrUndefined} for a version that returns `undefined` instead of executing a function.\n *\n * @category Getters\n * @since 2.0.0\n */\nexport const getOrElse: {\n  /**\n   * Returns the value contained in the `Option` if it is `Some`, otherwise\n   * evaluates and returns the result of `onNone`.\n   *\n   * **Details**\n   *\n   * This function allows you to provide a fallback value or computation for when\n   * an `Option` is `None`. If the `Option` contains a value (`Some`), that value\n   * is returned. If it is empty (`None`), the `onNone` function is executed, and\n   * its result is returned instead.\n   *\n   * This utility is helpful for safely handling `Option` values by ensuring you\n   * always receive a meaningful result, whether or not the `Option` contains a\n   * value. It is particularly useful for providing default values or alternative\n   * logic when working with optional values.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.some(1).pipe(Option.getOrElse(() => 0)))\n   * // Output: 1\n   *\n   * console.log(Option.none().pipe(Option.getOrElse(() => 0)))\n   * // Output: 0\n   * ```\n   *\n   * @see {@link getOrNull} for a version that returns `null` instead of executing a function.\n   * @see {@link getOrUndefined} for a version that returns `undefined` instead of executing a function.\n   *\n   * @category Getters\n   * @since 2.0.0\n   */\n  <B>(onNone: LazyArg<B>): <A>(self: Option<A>) => B | A\n  /**\n   * Returns the value contained in the `Option` if it is `Some`, otherwise\n   * evaluates and returns the result of `onNone`.\n   *\n   * **Details**\n   *\n   * This function allows you to provide a fallback value or computation for when\n   * an `Option` is `None`. If the `Option` contains a value (`Some`), that value\n   * is returned. If it is empty (`None`), the `onNone` function is executed, and\n   * its result is returned instead.\n   *\n   * This utility is helpful for safely handling `Option` values by ensuring you\n   * always receive a meaningful result, whether or not the `Option` contains a\n   * value. It is particularly useful for providing default values or alternative\n   * logic when working with optional values.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.some(1).pipe(Option.getOrElse(() => 0)))\n   * // Output: 1\n   *\n   * console.log(Option.none().pipe(Option.getOrElse(() => 0)))\n   * // Output: 0\n   * ```\n   *\n   * @see {@link getOrNull} for a version that returns `null` instead of executing a function.\n   * @see {@link getOrUndefined} for a version that returns `undefined` instead of executing a function.\n   *\n   * @category Getters\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): A | B\n} = dual(\n  2,\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): A | B => isNone(self) ? onNone() : self.value\n)\n\n/**\n * Returns the provided `Option` `that` if the current `Option` (`self`) is\n * `None`; otherwise, it returns `self`.\n *\n * **Details**\n *\n * This function provides a fallback mechanism for `Option` values. If the\n * current `Option` is `None` (i.e., it contains no value), the `that` function\n * is evaluated, and its resulting `Option` is returned. If the current `Option`\n * is `Some` (i.e., it contains a value), the original `Option` is returned\n * unchanged.\n *\n * This is particularly useful for chaining fallback values or computations,\n * allowing you to provide alternative `Option` values when the first one is\n * empty.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.none().pipe(Option.orElse(() => Option.none())))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(Option.some(\"a\").pipe(Option.orElse(() => Option.none())))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n *\n * console.log(Option.none().pipe(Option.orElse(() => Option.some(\"b\"))))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'b' }\n *\n * console.log(Option.some(\"a\").pipe(Option.orElse(() => Option.some(\"b\"))))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n * ```\n *\n * @category Error handling\n * @since 2.0.0\n */\nexport const orElse: {\n  /**\n   * Returns the provided `Option` `that` if the current `Option` (`self`) is\n   * `None`; otherwise, it returns `self`.\n   *\n   * **Details**\n   *\n   * This function provides a fallback mechanism for `Option` values. If the\n   * current `Option` is `None` (i.e., it contains no value), the `that` function\n   * is evaluated, and its resulting `Option` is returned. If the current `Option`\n   * is `Some` (i.e., it contains a value), the original `Option` is returned\n   * unchanged.\n   *\n   * This is particularly useful for chaining fallback values or computations,\n   * allowing you to provide alternative `Option` values when the first one is\n   * empty.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.none().pipe(Option.orElse(() => Option.none())))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(Option.some(\"a\").pipe(Option.orElse(() => Option.none())))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   *\n   * console.log(Option.none().pipe(Option.orElse(() => Option.some(\"b\"))))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'b' }\n   *\n   * console.log(Option.some(\"a\").pipe(Option.orElse(() => Option.some(\"b\"))))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Error handling\n   * @since 2.0.0\n   */\n  <B>(that: LazyArg<Option<B>>): <A>(self: Option<A>) => Option<B | A>\n  /**\n   * Returns the provided `Option` `that` if the current `Option` (`self`) is\n   * `None`; otherwise, it returns `self`.\n   *\n   * **Details**\n   *\n   * This function provides a fallback mechanism for `Option` values. If the\n   * current `Option` is `None` (i.e., it contains no value), the `that` function\n   * is evaluated, and its resulting `Option` is returned. If the current `Option`\n   * is `Some` (i.e., it contains a value), the original `Option` is returned\n   * unchanged.\n   *\n   * This is particularly useful for chaining fallback values or computations,\n   * allowing you to provide alternative `Option` values when the first one is\n   * empty.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.none().pipe(Option.orElse(() => Option.none())))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(Option.some(\"a\").pipe(Option.orElse(() => Option.none())))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   *\n   * console.log(Option.none().pipe(Option.orElse(() => Option.some(\"b\"))))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'b' }\n   *\n   * console.log(Option.some(\"a\").pipe(Option.orElse(() => Option.some(\"b\"))))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Error handling\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<A | B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<A | B> => isNone(self) ? that() : self\n)\n\n/**\n * Returns the provided default value wrapped in `Some` if the current `Option`\n * (`self`) is `None`; otherwise, returns `self`.\n *\n * **Details**\n *\n * This function provides a way to supply a default value for cases where an\n * `Option` is `None`. If the current `Option` is empty (`None`), the `onNone`\n * function is executed to compute the default value, which is then wrapped in a\n * `Some`. If the current `Option` contains a value (`Some`), it is returned as\n * is.\n *\n * This is particularly useful for handling optional values where a fallback\n * default needs to be provided explicitly in case of absence.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.none().pipe(Option.orElseSome(() => \"b\")))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'b' }\n *\n * console.log(Option.some(\"a\").pipe(Option.orElseSome(() => \"b\")))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n * ```\n *\n * @category Error handling\n * @since 2.0.0\n */\nexport const orElseSome: {\n  /**\n   * Returns the provided default value wrapped in `Some` if the current `Option`\n   * (`self`) is `None`; otherwise, returns `self`.\n   *\n   * **Details**\n   *\n   * This function provides a way to supply a default value for cases where an\n   * `Option` is `None`. If the current `Option` is empty (`None`), the `onNone`\n   * function is executed to compute the default value, which is then wrapped in a\n   * `Some`. If the current `Option` contains a value (`Some`), it is returned as\n   * is.\n   *\n   * This is particularly useful for handling optional values where a fallback\n   * default needs to be provided explicitly in case of absence.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.none().pipe(Option.orElseSome(() => \"b\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'b' }\n   *\n   * console.log(Option.some(\"a\").pipe(Option.orElseSome(() => \"b\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Error handling\n   * @since 2.0.0\n   */\n  <B>(onNone: LazyArg<B>): <A>(self: Option<A>) => Option<B | A>\n  /**\n   * Returns the provided default value wrapped in `Some` if the current `Option`\n   * (`self`) is `None`; otherwise, returns `self`.\n   *\n   * **Details**\n   *\n   * This function provides a way to supply a default value for cases where an\n   * `Option` is `None`. If the current `Option` is empty (`None`), the `onNone`\n   * function is executed to compute the default value, which is then wrapped in a\n   * `Some`. If the current `Option` contains a value (`Some`), it is returned as\n   * is.\n   *\n   * This is particularly useful for handling optional values where a fallback\n   * default needs to be provided explicitly in case of absence.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.none().pipe(Option.orElseSome(() => \"b\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'b' }\n   *\n   * console.log(Option.some(\"a\").pipe(Option.orElseSome(() => \"b\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Error handling\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): Option<A | B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): Option<A | B> => isNone(self) ? some(onNone()) : self\n)\n\n/**\n * Similar to {@link orElse}, but returns an `Either` wrapped in an `Option` to\n * indicate the source of the value.\n *\n * **Details**\n *\n * This function allows you to provide a fallback `Option` in case the current\n * `Option` (`self`) is `None`. However, unlike `orElse`, it returns the value\n * wrapped in an `Either` object, providing additional information about where\n * the value came from:\n *\n * - If the value is from the fallback `Option` (`that`), it is wrapped in an\n *   `Either.right`.\n * - If the value is from the original `Option` (`self`), it is wrapped in an\n *   `Either.left`.\n *\n * This is especially useful when you need to differentiate between values\n * originating from the primary `Option` and those coming from the fallback,\n * while still maintaining the `Option`-style handling.\n *\n * @category Error handling\n * @since 2.0.0\n */\nexport const orElseEither: {\n  /**\n   * Similar to {@link orElse}, but returns an `Either` wrapped in an `Option` to\n   * indicate the source of the value.\n   *\n   * **Details**\n   *\n   * This function allows you to provide a fallback `Option` in case the current\n   * `Option` (`self`) is `None`. However, unlike `orElse`, it returns the value\n   * wrapped in an `Either` object, providing additional information about where\n   * the value came from:\n   *\n   * - If the value is from the fallback `Option` (`that`), it is wrapped in an\n   *   `Either.right`.\n   * - If the value is from the original `Option` (`self`), it is wrapped in an\n   *   `Either.left`.\n   *\n   * This is especially useful when you need to differentiate between values\n   * originating from the primary `Option` and those coming from the fallback,\n   * while still maintaining the `Option`-style handling.\n   *\n   * @category Error handling\n   * @since 2.0.0\n   */\n  <B>(that: LazyArg<Option<B>>): <A>(self: Option<A>) => Option<Either<B, A>>\n  /**\n   * Similar to {@link orElse}, but returns an `Either` wrapped in an `Option` to\n   * indicate the source of the value.\n   *\n   * **Details**\n   *\n   * This function allows you to provide a fallback `Option` in case the current\n   * `Option` (`self`) is `None`. However, unlike `orElse`, it returns the value\n   * wrapped in an `Either` object, providing additional information about where\n   * the value came from:\n   *\n   * - If the value is from the fallback `Option` (`that`), it is wrapped in an\n   *   `Either.right`.\n   * - If the value is from the original `Option` (`self`), it is wrapped in an\n   *   `Either.left`.\n   *\n   * This is especially useful when you need to differentiate between values\n   * originating from the primary `Option` and those coming from the fallback,\n   * while still maintaining the `Option`-style handling.\n   *\n   * @category Error handling\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<Either<B, A>>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<Either<B, A>> =>\n    isNone(self) ? map(that(), either.right) : map(self, either.left)\n)\n\n/**\n * Returns the first `Some` value found in an `Iterable` collection of\n * `Option`s, or `None` if no `Some` is found.\n *\n * **Details**\n *\n * This function iterates over a collection of `Option` values and returns the\n * first `Some` it encounters. If the collection contains only `None` values,\n * the result will also be `None`. This utility is useful for efficiently\n * finding the first valid value in a sequence of potentially empty or invalid\n * options.\n *\n * The iteration stops as soon as a `Some` is found, making this function\n * efficient for large collections.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.firstSomeOf([\n *   Option.none(),\n *   Option.some(1),\n *   Option.some(2)\n * ]))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n * ```\n *\n * @category Error handling\n * @since 2.0.0\n */\nexport const firstSomeOf = <T, C extends Iterable<Option<T>> = Iterable<Option<T>>>(\n  collection: C\n): [C] extends [Iterable<Option<infer A>>] ? Option<A> : never => {\n  let out: Option<unknown> = none()\n  for (out of collection) {\n    if (isSome(out)) {\n      return out as any\n    }\n  }\n  return out as any\n}\n\n/**\n * Converts a nullable value into an `Option`. Returns `None` if the value is\n * `null` or `undefined`, otherwise wraps the value in a `Some`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.fromNullable(undefined))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(Option.fromNullable(null))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(Option.fromNullable(1))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n * ```\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const fromNullable = <A>(\n  nullableValue: A\n): Option<NonNullable<A>> => (nullableValue == null ? none() : some(nullableValue as NonNullable<A>))\n\n/**\n * Lifts a function that returns `null` or `undefined` into the `Option`\n * context.\n *\n * **Details**\n *\n * This function takes a function `f` that might return `null` or `undefined`\n * and transforms it into a function that returns an `Option`. The resulting\n * function will return:\n * - `Some` if the original function produces a non-null, non-undefined value.\n * - `None` if the original function produces `null` or `undefined`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const parse = (s: string): number | undefined => {\n *   const n = parseFloat(s)\n *   return isNaN(n) ? undefined : n\n * }\n *\n * const parseOption = Option.liftNullable(parse)\n *\n * console.log(parseOption(\"1\"))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * console.log(parseOption(\"not a number\"))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const liftNullable = <A extends ReadonlyArray<unknown>, B>(\n  f: (...a: A) => B | null | undefined\n): (...a: A) => Option<NonNullable<B>> =>\n(...a) => fromNullable(f(...a))\n\n/**\n * Returns the value contained in the `Option` if it is `Some`; otherwise,\n * returns `null`.\n *\n * **Details**\n *\n * This function provides a way to extract the value of an `Option` while\n * falling back to `null` if the `Option` is `None`.\n *\n * It is particularly useful in scenarios where `null` is an acceptable\n * placeholder for the absence of a value, such as when interacting with APIs or\n * systems that use `null` as a default for missing values.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.getOrNull(Option.some(1)))\n * // Output: 1\n *\n * console.log(Option.getOrNull(Option.none()))\n * // Output: null\n * ```\n *\n * @category Getters\n * @since 2.0.0\n */\nexport const getOrNull: <A>(self: Option<A>) => A | null = getOrElse(constNull)\n\n/**\n * Returns the value contained in the `Option` if it is `Some`; otherwise,\n * returns `undefined`.\n *\n * **Details**\n *\n * This function provides a way to extract the value of an `Option` while\n * falling back to `undefined` if the `Option` is `None`.\n *\n * It is particularly useful in scenarios where `undefined` is an acceptable\n * placeholder for the absence of a value, such as when interacting with APIs or\n * systems that use `undefined` as a default for missing values.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.getOrUndefined(Option.some(1)))\n * // Output: 1\n *\n * console.log(Option.getOrUndefined(Option.none()))\n * // Output: undefined\n * ```\n *\n * @category Getters\n * @since 2.0.0\n */\nexport const getOrUndefined: <A>(self: Option<A>) => A | undefined = getOrElse(constUndefined)\n\n/**\n * Lifts a function that throws exceptions into a function that returns an\n * `Option`.\n *\n * **Details**\n *\n * This utility function takes a function `f` that might throw an exception and\n * transforms it into a safer function that returns an `Option`. If the original\n * function executes successfully, the result is wrapped in a `Some`. If an\n * exception is thrown, the result is `None`, allowing the developer to handle\n * errors in a functional, type-safe way.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const parse = Option.liftThrowable(JSON.parse)\n *\n * console.log(parse(\"1\"))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * console.log(parse(\"\"))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const liftThrowable = <A extends ReadonlyArray<unknown>, B>(\n  f: (...a: A) => B\n): (...a: A) => Option<B> =>\n(...a) => {\n  try {\n    return some(f(...a))\n  } catch {\n    return none()\n  }\n}\n\n/**\n * Extracts the value of an `Option` or throws an error if the `Option` is\n * `None`, using a custom error factory.\n *\n * **Details**\n *\n * This function allows you to extract the value of an `Option` when it is\n * `Some`. If the `Option` is `None`, it throws an error generated by the\n * provided `onNone` function. This utility is particularly useful when you need\n * a fail-fast behavior for empty `Option` values and want to provide a custom\n * error message or object.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Option.getOrThrowWith(Option.some(1), () => new Error('Unexpected None')),\n *   1\n * )\n * assert.throws(() => Option.getOrThrowWith(Option.none(), () => new Error('Unexpected None')))\n * ```\n *\n * @see {@link getOrThrow} for a version that throws a default error.\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const getOrThrowWith: {\n  /**\n   * Extracts the value of an `Option` or throws an error if the `Option` is\n   * `None`, using a custom error factory.\n   *\n   * **Details**\n   *\n   * This function allows you to extract the value of an `Option` when it is\n   * `Some`. If the `Option` is `None`, it throws an error generated by the\n   * provided `onNone` function. This utility is particularly useful when you need\n   * a fail-fast behavior for empty `Option` values and want to provide a custom\n   * error message or object.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Option.getOrThrowWith(Option.some(1), () => new Error('Unexpected None')),\n   *   1\n   * )\n   * assert.throws(() => Option.getOrThrowWith(Option.none(), () => new Error('Unexpected None')))\n   * ```\n   *\n   * @see {@link getOrThrow} for a version that throws a default error.\n   *\n   * @category Conversions\n   * @since 2.0.0\n   */\n  (onNone: () => unknown): <A>(self: Option<A>) => A\n  /**\n   * Extracts the value of an `Option` or throws an error if the `Option` is\n   * `None`, using a custom error factory.\n   *\n   * **Details**\n   *\n   * This function allows you to extract the value of an `Option` when it is\n   * `Some`. If the `Option` is `None`, it throws an error generated by the\n   * provided `onNone` function. This utility is particularly useful when you need\n   * a fail-fast behavior for empty `Option` values and want to provide a custom\n   * error message or object.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Option.getOrThrowWith(Option.some(1), () => new Error('Unexpected None')),\n   *   1\n   * )\n   * assert.throws(() => Option.getOrThrowWith(Option.none(), () => new Error('Unexpected None')))\n   * ```\n   *\n   * @see {@link getOrThrow} for a version that throws a default error.\n   *\n   * @category Conversions\n   * @since 2.0.0\n   */\n  <A>(self: Option<A>, onNone: () => unknown): A\n} = dual(2, <A>(self: Option<A>, onNone: () => unknown): A => {\n  if (isSome(self)) {\n    return self.value\n  }\n  throw onNone()\n})\n\n/**\n * Extracts the value of an `Option` or throws a default error if the `Option`\n * is `None`.\n *\n * **Details**\n *\n * This function extracts the value from an `Option` if it is `Some`. If the\n * `Option` is `None`, it throws a default error. It is useful for fail-fast\n * scenarios where the absence of a value is treated as an exceptional case and\n * a default error is sufficient.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrThrow(Option.some(1)), 1)\n * assert.throws(() => Option.getOrThrow(Option.none()))\n * ```\n *\n * @see {@link getOrThrowWith} for a version that allows you to provide a custom error.\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const getOrThrow: <A>(self: Option<A>) => A = getOrThrowWith(() => new Error(\"getOrThrow called on a None\"))\n\n/**\n * Transforms the value inside a `Some` to a new value using the provided\n * function, while leaving `None` unchanged.\n *\n * **Details**\n *\n * This function applies a mapping function `f` to the value inside an `Option`\n * if it is a `Some`. If the `Option` is `None`, it remains unchanged. The\n * result is a new `Option` with the transformed value (if it was a `Some`) or\n * still `None`.\n *\n * This utility is particularly useful for chaining transformations in a\n * functional way without needing to manually handle `None` cases.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * // Mapping over a `Some`\n * const someValue = Option.some(2)\n *\n * console.log(Option.map(someValue, (n) => n * 2))\n * // Output: { _id: 'Option', _tag: 'Some', value: 4 }\n *\n * // Mapping over a `None`\n * const noneValue = Option.none<number>()\n *\n * console.log(Option.map(noneValue, (n) => n * 2))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Mapping\n * @since 2.0.0\n */\nexport const map: {\n  /**\n   * Transforms the value inside a `Some` to a new value using the provided\n   * function, while leaving `None` unchanged.\n   *\n   * **Details**\n   *\n   * This function applies a mapping function `f` to the value inside an `Option`\n   * if it is a `Some`. If the `Option` is `None`, it remains unchanged. The\n   * result is a new `Option` with the transformed value (if it was a `Some`) or\n   * still `None`.\n   *\n   * This utility is particularly useful for chaining transformations in a\n   * functional way without needing to manually handle `None` cases.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Mapping over a `Some`\n   * const someValue = Option.some(2)\n   *\n   * console.log(Option.map(someValue, (n) => n * 2))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 4 }\n   *\n   * // Mapping over a `None`\n   * const noneValue = Option.none<number>()\n   *\n   * console.log(Option.map(noneValue, (n) => n * 2))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Mapping\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B): (self: Option<A>) => Option<B>\n  /**\n   * Transforms the value inside a `Some` to a new value using the provided\n   * function, while leaving `None` unchanged.\n   *\n   * **Details**\n   *\n   * This function applies a mapping function `f` to the value inside an `Option`\n   * if it is a `Some`. If the `Option` is `None`, it remains unchanged. The\n   * result is a new `Option` with the transformed value (if it was a `Some`) or\n   * still `None`.\n   *\n   * This utility is particularly useful for chaining transformations in a\n   * functional way without needing to manually handle `None` cases.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Mapping over a `Some`\n   * const someValue = Option.some(2)\n   *\n   * console.log(Option.map(someValue, (n) => n * 2))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 4 }\n   *\n   * // Mapping over a `None`\n   * const noneValue = Option.none<number>()\n   *\n   * console.log(Option.map(noneValue, (n) => n * 2))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Mapping\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => B): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => B): Option<B> => isNone(self) ? none() : some(f(self.value))\n)\n\n/**\n * Replaces the value inside a `Some` with the specified constant value, leaving\n * `None` unchanged.\n *\n * **Details**\n *\n * This function transforms an `Option` by replacing the value inside a `Some`\n * with the given constant value `b`. If the `Option` is `None`, it remains\n * unchanged.\n *\n * This is useful when you want to preserve the presence of a value (`Some`) but\n * replace its content with a fixed value.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * // Replacing the value of a `Some`\n * const someValue = Option.some(42)\n *\n * console.log(Option.as(someValue, \"new value\"))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'new value' }\n *\n * // Replacing a `None` (no effect)\n * const noneValue = Option.none<number>()\n *\n * console.log(Option.as(noneValue, \"new value\"))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Mapping\n * @since 2.0.0\n */\nexport const as: {\n  /**\n   * Replaces the value inside a `Some` with the specified constant value, leaving\n   * `None` unchanged.\n   *\n   * **Details**\n   *\n   * This function transforms an `Option` by replacing the value inside a `Some`\n   * with the given constant value `b`. If the `Option` is `None`, it remains\n   * unchanged.\n   *\n   * This is useful when you want to preserve the presence of a value (`Some`) but\n   * replace its content with a fixed value.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Replacing the value of a `Some`\n   * const someValue = Option.some(42)\n   *\n   * console.log(Option.as(someValue, \"new value\"))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'new value' }\n   *\n   * // Replacing a `None` (no effect)\n   * const noneValue = Option.none<number>()\n   *\n   * console.log(Option.as(noneValue, \"new value\"))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Mapping\n   * @since 2.0.0\n   */\n  <B>(b: B): <X>(self: Option<X>) => Option<B>\n  /**\n   * Replaces the value inside a `Some` with the specified constant value, leaving\n   * `None` unchanged.\n   *\n   * **Details**\n   *\n   * This function transforms an `Option` by replacing the value inside a `Some`\n   * with the given constant value `b`. If the `Option` is `None`, it remains\n   * unchanged.\n   *\n   * This is useful when you want to preserve the presence of a value (`Some`) but\n   * replace its content with a fixed value.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Replacing the value of a `Some`\n   * const someValue = Option.some(42)\n   *\n   * console.log(Option.as(someValue, \"new value\"))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'new value' }\n   *\n   * // Replacing a `None` (no effect)\n   * const noneValue = Option.none<number>()\n   *\n   * console.log(Option.as(noneValue, \"new value\"))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Mapping\n   * @since 2.0.0\n   */\n  <X, B>(self: Option<X>, b: B): Option<B>\n} = dual(2, <X, B>(self: Option<X>, b: B): Option<B> => map(self, () => b))\n\n/**\n * Replaces the value inside a `Some` with the constant value `void`, leaving\n * `None` unchanged.\n *\n * **Details**\n *\n * This function transforms an `Option` by replacing the value inside a `Some`\n * with `void`. If the `Option` is `None`, it remains unchanged.\n *\n * This is particularly useful in scenarios where the presence or absence of a\n * value is significant, but the actual content of the value is irrelevant.\n *\n * @category Mapping\n * @since 2.0.0\n */\nexport const asVoid: <_>(self: Option<_>) => Option<void> = as(undefined)\n\nconst void_: Option<void> = some(undefined)\nexport {\n  /**\n   * @since 2.0.0\n   */\n  void_ as void\n}\n\n/**\n * Applies a function to the value of a `Some` and flattens the resulting\n * `Option`. If the input is `None`, it remains `None`.\n *\n * **Details**\n *\n * This function allows you to chain computations that return `Option` values.\n * If the input `Option` is `Some`, the provided function `f` is applied to the\n * contained value, and the resulting `Option` is returned. If the input is\n * `None`, the function is not applied, and the result remains `None`.\n *\n * This utility is particularly useful for sequencing operations that may fail\n * or produce optional results, enabling clean and concise workflows for\n * handling such cases.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * interface Address {\n *   readonly city: string\n *   readonly street: Option.Option<string>\n * }\n *\n * interface User {\n *   readonly id: number\n *   readonly username: string\n *   readonly email: Option.Option<string>\n *   readonly address: Option.Option<Address>\n * }\n *\n * const user: User = {\n *   id: 1,\n *   username: \"john_doe\",\n *   email: Option.some(\"john.doe@example.com\"),\n *   address: Option.some({\n *     city: \"New York\",\n *     street: Option.some(\"123 Main St\")\n *   })\n * }\n *\n * // Use flatMap to extract the street value\n * const street = user.address.pipe(\n *   Option.flatMap((address) => address.street)\n * )\n *\n * console.log(street)\n * // Output: { _id: 'Option', _tag: 'Some', value: '123 Main St' }\n * ```\n *\n * @category Sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  /**\n   * Applies a function to the value of a `Some` and flattens the resulting\n   * `Option`. If the input is `None`, it remains `None`.\n   *\n   * **Details**\n   *\n   * This function allows you to chain computations that return `Option` values.\n   * If the input `Option` is `Some`, the provided function `f` is applied to the\n   * contained value, and the resulting `Option` is returned. If the input is\n   * `None`, the function is not applied, and the result remains `None`.\n   *\n   * This utility is particularly useful for sequencing operations that may fail\n   * or produce optional results, enabling clean and concise workflows for\n   * handling such cases.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * interface Address {\n   *   readonly city: string\n   *   readonly street: Option.Option<string>\n   * }\n   *\n   * interface User {\n   *   readonly id: number\n   *   readonly username: string\n   *   readonly email: Option.Option<string>\n   *   readonly address: Option.Option<Address>\n   * }\n   *\n   * const user: User = {\n   *   id: 1,\n   *   username: \"john_doe\",\n   *   email: Option.some(\"john.doe@example.com\"),\n   *   address: Option.some({\n   *     city: \"New York\",\n   *     street: Option.some(\"123 Main St\")\n   *   })\n   * }\n   *\n   * // Use flatMap to extract the street value\n   * const street = user.address.pipe(\n   *   Option.flatMap((address) => address.street)\n   * )\n   *\n   * console.log(street)\n   * // Output: { _id: 'Option', _tag: 'Some', value: '123 Main St' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => Option<B>): (self: Option<A>) => Option<B>\n  /**\n   * Applies a function to the value of a `Some` and flattens the resulting\n   * `Option`. If the input is `None`, it remains `None`.\n   *\n   * **Details**\n   *\n   * This function allows you to chain computations that return `Option` values.\n   * If the input `Option` is `Some`, the provided function `f` is applied to the\n   * contained value, and the resulting `Option` is returned. If the input is\n   * `None`, the function is not applied, and the result remains `None`.\n   *\n   * This utility is particularly useful for sequencing operations that may fail\n   * or produce optional results, enabling clean and concise workflows for\n   * handling such cases.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * interface Address {\n   *   readonly city: string\n   *   readonly street: Option.Option<string>\n   * }\n   *\n   * interface User {\n   *   readonly id: number\n   *   readonly username: string\n   *   readonly email: Option.Option<string>\n   *   readonly address: Option.Option<Address>\n   * }\n   *\n   * const user: User = {\n   *   id: 1,\n   *   username: \"john_doe\",\n   *   email: Option.some(\"john.doe@example.com\"),\n   *   address: Option.some({\n   *     city: \"New York\",\n   *     street: Option.some(\"123 Main St\")\n   *   })\n   * }\n   *\n   * // Use flatMap to extract the street value\n   * const street = user.address.pipe(\n   *   Option.flatMap((address) => address.street)\n   * )\n   *\n   * console.log(street)\n   * // Output: { _id: 'Option', _tag: 'Some', value: '123 Main St' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B> => isNone(self) ? none() : f(self.value)\n)\n\n/**\n * Chains two `Option`s together. The second `Option` can either be a static\n * value or depend on the result of the first `Option`.\n *\n * **Details**\n *\n * This function enables sequencing of two `Option` computations. If the first\n * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n * either:\n *\n * - Be a static `Option` value.\n * - Be a function that produces an `Option`, optionally based on the value of\n *   the first `Option`.\n *\n * If the first `Option` is `None`, the function skips the evaluation of the\n * second `Option` and directly returns `None`.\n *\n * @category Sequencing\n * @since 2.0.0\n */\nexport const andThen: {\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => Option<B>): (self: Option<A>) => Option<B>\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <B>(f: Option<B>): <A>(self: Option<A>) => Option<B>\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B): (self: Option<A>) => Option<B>\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <B>(f: NotFunction<B>): <A>(self: Option<A>) => Option<B>\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B>\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: Option<B>): Option<B>\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => B): Option<B>\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: NotFunction<B>): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => Option<B> | Option<B>): Option<B> =>\n    flatMap(self, (a) => {\n      const b = isFunction(f) ? f(a) : f\n      return isOption(b) ? b : some(b)\n    })\n)\n\n/**\n * Combines `flatMap` and `fromNullable`, transforming the value inside a `Some`\n * using a function that may return `null` or `undefined`.\n *\n * **Details**\n *\n * This function applies a transformation function `f` to the value inside a\n * `Some`. The function `f` may return a value, `null`, or `undefined`. If `f`\n * returns a value, it is wrapped in a `Some`. If `f` returns `null` or\n * `undefined`, the result is `None`. If the input `Option` is `None`, the\n * function is not applied, and `None` is returned.\n *\n * This utility is particularly useful when working with deeply nested optional\n * values or chaining computations that may result in `null` or `undefined` at\n * some point.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * interface Employee {\n *   company?: {\n *     address?: {\n *       street?: {\n *         name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: \"high street\" } } } }\n *\n * // Extracting a deeply nested property\n * console.log(\n *   Option.some(employee1)\n *     .pipe(Option.flatMapNullable((employee) => employee.company?.address?.street?.name))\n * )\n * // Output: { _id: 'Option', _tag: 'Some', value: 'high street' }\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * // Property does not exist\n * console.log(\n *   Option.some(employee2)\n *     .pipe(Option.flatMapNullable((employee) => employee.company?.address?.street?.name))\n * )\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Sequencing\n * @since 2.0.0\n */\nexport const flatMapNullable: {\n  /**\n   * Combines `flatMap` and `fromNullable`, transforming the value inside a `Some`\n   * using a function that may return `null` or `undefined`.\n   *\n   * **Details**\n   *\n   * This function applies a transformation function `f` to the value inside a\n   * `Some`. The function `f` may return a value, `null`, or `undefined`. If `f`\n   * returns a value, it is wrapped in a `Some`. If `f` returns `null` or\n   * `undefined`, the result is `None`. If the input `Option` is `None`, the\n   * function is not applied, and `None` is returned.\n   *\n   * This utility is particularly useful when working with deeply nested optional\n   * values or chaining computations that may result in `null` or `undefined` at\n   * some point.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * interface Employee {\n   *   company?: {\n   *     address?: {\n   *       street?: {\n   *         name?: string\n   *       }\n   *     }\n   *   }\n   * }\n   *\n   * const employee1: Employee = { company: { address: { street: { name: \"high street\" } } } }\n   *\n   * // Extracting a deeply nested property\n   * console.log(\n   *   Option.some(employee1)\n   *     .pipe(Option.flatMapNullable((employee) => employee.company?.address?.street?.name))\n   * )\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'high street' }\n   *\n   * const employee2: Employee = { company: { address: { street: {} } } }\n   *\n   * // Property does not exist\n   * console.log(\n   *   Option.some(employee2)\n   *     .pipe(Option.flatMapNullable((employee) => employee.company?.address?.street?.name))\n   * )\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B | null | undefined): (self: Option<A>) => Option<NonNullable<B>>\n  /**\n   * Combines `flatMap` and `fromNullable`, transforming the value inside a `Some`\n   * using a function that may return `null` or `undefined`.\n   *\n   * **Details**\n   *\n   * This function applies a transformation function `f` to the value inside a\n   * `Some`. The function `f` may return a value, `null`, or `undefined`. If `f`\n   * returns a value, it is wrapped in a `Some`. If `f` returns `null` or\n   * `undefined`, the result is `None`. If the input `Option` is `None`, the\n   * function is not applied, and `None` is returned.\n   *\n   * This utility is particularly useful when working with deeply nested optional\n   * values or chaining computations that may result in `null` or `undefined` at\n   * some point.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * interface Employee {\n   *   company?: {\n   *     address?: {\n   *       street?: {\n   *         name?: string\n   *       }\n   *     }\n   *   }\n   * }\n   *\n   * const employee1: Employee = { company: { address: { street: { name: \"high street\" } } } }\n   *\n   * // Extracting a deeply nested property\n   * console.log(\n   *   Option.some(employee1)\n   *     .pipe(Option.flatMapNullable((employee) => employee.company?.address?.street?.name))\n   * )\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'high street' }\n   *\n   * const employee2: Employee = { company: { address: { street: {} } } }\n   *\n   * // Property does not exist\n   * console.log(\n   *   Option.some(employee2)\n   *     .pipe(Option.flatMapNullable((employee) => employee.company?.address?.street?.name))\n   * )\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => B | null | undefined): Option<NonNullable<B>>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => B | null | undefined): Option<NonNullable<B>> =>\n    isNone(self) ? none() : fromNullable(f(self.value))\n)\n\n/**\n * Flattens an `Option` of `Option` into a single `Option`.\n *\n * **Details**\n *\n * This function takes an `Option` that wraps another `Option` and flattens it\n * into a single `Option`. If the outer `Option` is `Some`, the function\n * extracts the inner `Option`. If the outer `Option` is `None`, the result\n * remains `None`.\n *\n * This is useful for simplifying nested `Option` structures that may arise\n * during functional operations.\n *\n * @category Sequencing\n * @since 2.0.0\n */\nexport const flatten: <A>(self: Option<Option<A>>) => Option<A> = flatMap(identity)\n\n/**\n * Combines two `Option`s, keeping the value from the second `Option` if both\n * are `Some`.\n *\n * **Details**\n *\n * This function takes two `Option`s and returns the second one if the first is\n * `Some`. If the first `Option` is `None`, the result will also be `None`,\n * regardless of the second `Option`. It effectively \"zips\" the two `Option`s\n * while discarding the value from the first `Option`.\n *\n * This is particularly useful when sequencing computations where the result of\n * the first computation is not needed, and you only care about the result of\n * the second computation.\n *\n * @category Zipping\n * @since 2.0.0\n */\nexport const zipRight: {\n  /**\n   * Combines two `Option`s, keeping the value from the second `Option` if both\n   * are `Some`.\n   *\n   * **Details**\n   *\n   * This function takes two `Option`s and returns the second one if the first is\n   * `Some`. If the first `Option` is `None`, the result will also be `None`,\n   * regardless of the second `Option`. It effectively \"zips\" the two `Option`s\n   * while discarding the value from the first `Option`.\n   *\n   * This is particularly useful when sequencing computations where the result of\n   * the first computation is not needed, and you only care about the result of\n   * the second computation.\n   *\n   * @category Zipping\n   * @since 2.0.0\n   */\n  <B>(that: Option<B>): <_>(self: Option<_>) => Option<B>\n  /**\n   * Combines two `Option`s, keeping the value from the second `Option` if both\n   * are `Some`.\n   *\n   * **Details**\n   *\n   * This function takes two `Option`s and returns the second one if the first is\n   * `Some`. If the first `Option` is `None`, the result will also be `None`,\n   * regardless of the second `Option`. It effectively \"zips\" the two `Option`s\n   * while discarding the value from the first `Option`.\n   *\n   * This is particularly useful when sequencing computations where the result of\n   * the first computation is not needed, and you only care about the result of\n   * the second computation.\n   *\n   * @category Zipping\n   * @since 2.0.0\n   */\n  <X, B>(self: Option<X>, that: Option<B>): Option<B>\n} = dual(2, <X, B>(self: Option<X>, that: Option<B>): Option<B> => flatMap(self, () => that))\n\n/**\n * Combines two `Option`s, keeping the value from the first `Option` if both are\n * `Some`.\n *\n * **Details**\n *\n * This function takes two `Option`s and returns the first one if it is `Some`.\n * If either the first `Option` or the second `Option` is `None`, the result\n * will be `None`. This operation \"zips\" the two `Option`s while discarding the\n * value from the second `Option`.\n *\n * This is useful when sequencing computations where the second `Option`\n * represents a dependency or condition that must hold, but its value is\n * irrelevant.\n *\n * @category Zipping\n * @since 2.0.0\n */\nexport const zipLeft: {\n  /**\n   * Combines two `Option`s, keeping the value from the first `Option` if both are\n   * `Some`.\n   *\n   * **Details**\n   *\n   * This function takes two `Option`s and returns the first one if it is `Some`.\n   * If either the first `Option` or the second `Option` is `None`, the result\n   * will be `None`. This operation \"zips\" the two `Option`s while discarding the\n   * value from the second `Option`.\n   *\n   * This is useful when sequencing computations where the second `Option`\n   * represents a dependency or condition that must hold, but its value is\n   * irrelevant.\n   *\n   * @category Zipping\n   * @since 2.0.0\n   */\n  <_>(that: Option<_>): <A>(self: Option<A>) => Option<A>\n  /**\n   * Combines two `Option`s, keeping the value from the first `Option` if both are\n   * `Some`.\n   *\n   * **Details**\n   *\n   * This function takes two `Option`s and returns the first one if it is `Some`.\n   * If either the first `Option` or the second `Option` is `None`, the result\n   * will be `None`. This operation \"zips\" the two `Option`s while discarding the\n   * value from the second `Option`.\n   *\n   * This is useful when sequencing computations where the second `Option`\n   * represents a dependency or condition that must hold, but its value is\n   * irrelevant.\n   *\n   * @category Zipping\n   * @since 2.0.0\n   */\n  <A, X>(self: Option<A>, that: Option<X>): Option<A>\n} = dual(2, <A, X>(self: Option<A>, that: Option<X>): Option<A> => tap(self, () => that))\n\n/**\n * Composes two functions that return `Option` values, creating a new function\n * that chains them together.\n *\n * **Details**\n *\n * This function allows you to compose two computations, each represented by a\n * function that returns an `Option`. The result of the first function is passed\n * to the second function if it is `Some`. If the first function returns `None`,\n * the composed function short-circuits and returns `None` without invoking the\n * second function.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const parse = (s: string): Option.Option<number> => isNaN(Number(s)) ? Option.none() : Option.some(Number(s))\n *\n * const double = (n: number): Option.Option<number> => n > 0 ? Option.some(n * 2) : Option.none()\n *\n * const parseAndDouble = Option.composeK(parse, double)\n *\n * console.log(parseAndDouble(\"42\"))\n * // Output: { _id: 'Option', _tag: 'Some', value: 84 }\n *\n * console.log(parseAndDouble(\"not a number\"))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Sequencing\n * @since 2.0.0\n */\nexport const composeK: {\n  /**\n   * Composes two functions that return `Option` values, creating a new function\n   * that chains them together.\n   *\n   * **Details**\n   *\n   * This function allows you to compose two computations, each represented by a\n   * function that returns an `Option`. The result of the first function is passed\n   * to the second function if it is `Some`. If the first function returns `None`,\n   * the composed function short-circuits and returns `None` without invoking the\n   * second function.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const parse = (s: string): Option.Option<number> => isNaN(Number(s)) ? Option.none() : Option.some(Number(s))\n   *\n   * const double = (n: number): Option.Option<number> => n > 0 ? Option.some(n * 2) : Option.none()\n   *\n   * const parseAndDouble = Option.composeK(parse, double)\n   *\n   * console.log(parseAndDouble(\"42\"))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 84 }\n   *\n   * console.log(parseAndDouble(\"not a number\"))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <B, C>(bfc: (b: B) => Option<C>): <A>(afb: (a: A) => Option<B>) => (a: A) => Option<C>\n  /**\n   * Composes two functions that return `Option` values, creating a new function\n   * that chains them together.\n   *\n   * **Details**\n   *\n   * This function allows you to compose two computations, each represented by a\n   * function that returns an `Option`. The result of the first function is passed\n   * to the second function if it is `Some`. If the first function returns `None`,\n   * the composed function short-circuits and returns `None` without invoking the\n   * second function.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const parse = (s: string): Option.Option<number> => isNaN(Number(s)) ? Option.none() : Option.some(Number(s))\n   *\n   * const double = (n: number): Option.Option<number> => n > 0 ? Option.some(n * 2) : Option.none()\n   *\n   * const parseAndDouble = Option.composeK(parse, double)\n   *\n   * console.log(parseAndDouble(\"42\"))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 84 }\n   *\n   * console.log(parseAndDouble(\"not a number\"))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B, C>(afb: (a: A) => Option<B>, bfc: (b: B) => Option<C>): (a: A) => Option<C>\n} = dual(2, <A, B, C>(afb: (a: A) => Option<B>, bfc: (b: B) => Option<C>) => (a: A): Option<C> => flatMap(afb(a), bfc))\n\n/**\n * Applies the provided function `f` to the value of the `Option` if it is\n * `Some` and returns the original `Option`, unless `f` returns `None`, in which\n * case it returns `None`.\n *\n * **Details**\n *\n * This function allows you to perform additional computations on the value of\n * an `Option` without modifying its original value. If the `Option` is `Some`,\n * the provided function `f` is executed with the value, and its result\n * determines whether the original `Option` is returned (`Some`) or the result\n * is `None` if `f` returns `None`. If the input `Option` is `None`, the\n * function is not executed, and `None` is returned.\n *\n * This is particularly useful for applying side conditions or performing\n * validation checks while retaining the original `Option`'s value.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const getInteger = (n: number) => Number.isInteger(n) ? Option.some(n) : Option.none()\n *\n * console.log(Option.tap(Option.none(), getInteger))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(Option.tap(Option.some(1), getInteger))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * console.log(Option.tap(Option.some(1.14), getInteger))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Sequencing\n * @since 2.0.0\n */\nexport const tap: {\n  /**\n   * Applies the provided function `f` to the value of the `Option` if it is\n   * `Some` and returns the original `Option`, unless `f` returns `None`, in which\n   * case it returns `None`.\n   *\n   * **Details**\n   *\n   * This function allows you to perform additional computations on the value of\n   * an `Option` without modifying its original value. If the `Option` is `Some`,\n   * the provided function `f` is executed with the value, and its result\n   * determines whether the original `Option` is returned (`Some`) or the result\n   * is `None` if `f` returns `None`. If the input `Option` is `None`, the\n   * function is not executed, and `None` is returned.\n   *\n   * This is particularly useful for applying side conditions or performing\n   * validation checks while retaining the original `Option`'s value.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const getInteger = (n: number) => Number.isInteger(n) ? Option.some(n) : Option.none()\n   *\n   * console.log(Option.tap(Option.none(), getInteger))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(Option.tap(Option.some(1), getInteger))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n   *\n   * console.log(Option.tap(Option.some(1.14), getInteger))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, X>(f: (a: A) => Option<X>): (self: Option<A>) => Option<A>\n  /**\n   * Applies the provided function `f` to the value of the `Option` if it is\n   * `Some` and returns the original `Option`, unless `f` returns `None`, in which\n   * case it returns `None`.\n   *\n   * **Details**\n   *\n   * This function allows you to perform additional computations on the value of\n   * an `Option` without modifying its original value. If the `Option` is `Some`,\n   * the provided function `f` is executed with the value, and its result\n   * determines whether the original `Option` is returned (`Some`) or the result\n   * is `None` if `f` returns `None`. If the input `Option` is `None`, the\n   * function is not executed, and `None` is returned.\n   *\n   * This is particularly useful for applying side conditions or performing\n   * validation checks while retaining the original `Option`'s value.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const getInteger = (n: number) => Number.isInteger(n) ? Option.some(n) : Option.none()\n   *\n   * console.log(Option.tap(Option.none(), getInteger))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(Option.tap(Option.some(1), getInteger))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n   *\n   * console.log(Option.tap(Option.some(1.14), getInteger))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, X>(self: Option<A>, f: (a: A) => Option<X>): Option<A>\n} = dual(2, <A, X>(self: Option<A>, f: (a: A) => Option<X>): Option<A> => flatMap(self, (a) => map(f(a), () => a)))\n\n/**\n * Combines two `Option` values into a single `Option` containing a tuple of\n * their values if both are `Some`.\n *\n * **Details**\n *\n * This function takes two `Option`s and combines their values into a tuple `[A,\n * B]` if both are `Some`. If either of the `Option`s is `None`, the result is\n * `None`. This is particularly useful for combining multiple `Option` values\n * into a single one, ensuring both contain valid values.\n *\n * @category Combining\n * @since 2.0.0\n */\nexport const product = <A, B>(self: Option<A>, that: Option<B>): Option<[A, B]> =>\n  isSome(self) && isSome(that) ? some([self.value, that.value]) : none()\n\n/**\n * Combines an `Option` with a collection of `Option`s into a single `Option`\n * containing a tuple of their values if all are `Some`.\n *\n * **Details**\n *\n * This function takes a primary `Option` and a collection of `Option`s and\n * combines their values into a tuple `[A, ...Array<A>]` if all are `Some`. If\n * the primary `Option` or any `Option` in the collection is `None`, the result\n * is `None`.\n *\n * @category Combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Option<A>,\n  collection: Iterable<Option<A>>\n): Option<[A, ...Array<A>]> => {\n  if (isNone(self)) {\n    return none()\n  }\n  const out: [A, ...Array<A>] = [self.value]\n  for (const o of collection) {\n    if (isNone(o)) {\n      return none()\n    }\n    out.push(o.value)\n  }\n  return some(out)\n}\n\n/**\n * Combines a structure of `Option`s into a single `Option` containing the\n * values with the same structure.\n *\n * **Details**\n *\n * This function takes a structure of `Option`s (a tuple, struct, or iterable)\n * and produces a single `Option` that contains the values from the input\n * structure if all `Option`s are `Some`. If any `Option` in the input is\n * `None`, the result is `None`. The structure of the input is preserved in the\n * output.\n *\n * - If the input is a tuple (e.g., an array), the result will be an `Option`\n *   containing a tuple with the same length.\n * - If the input is a struct (e.g., an object), the result will be an `Option`\n *   containing a struct with the same keys.\n * - If the input is an iterable, the result will be an `Option` containing an\n *   array.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const maybeName: Option.Option<string> = Option.some(\"John\")\n * const maybeAge: Option.Option<number> = Option.some(25)\n *\n * //      ┌─── Option<[string, number]>\n * //      ▼\n * const tuple = Option.all([maybeName, maybeAge])\n * console.log(tuple)\n * // Output:\n * // { _id: 'Option', _tag: 'Some', value: [ 'John', 25 ] }\n *\n * //      ┌─── Option<{ name: string; age: number; }>\n * //      ▼\n * const struct = Option.all({ name: maybeName, age: maybeAge })\n * console.log(struct)\n * // Output:\n * // { _id: 'Option', _tag: 'Some', value: { name: 'John', age: 25 } }\n * ```\n *\n * @category Combining\n * @since 2.0.0\n */\n// @ts-expect-error\nexport const all: <const I extends Iterable<Option<any>> | Record<string, Option<any>>>(\n  input: I\n) => [I] extends [ReadonlyArray<Option<any>>] ? Option<\n    { -readonly [K in keyof I]: [I[K]] extends [Option<infer A>] ? A : never }\n  >\n  : [I] extends [Iterable<Option<infer A>>] ? Option<Array<A>>\n  : Option<{ -readonly [K in keyof I]: [I[K]] extends [Option<infer A>] ? A : never }> = (\n    input: Iterable<Option<any>> | Record<string, Option<any>>\n  ): Option<any> => {\n    if (Symbol.iterator in input) {\n      const out: Array<Option<any>> = []\n      for (const o of (input as Iterable<Option<any>>)) {\n        if (isNone(o)) {\n          return none()\n        }\n        out.push(o.value)\n      }\n      return some(out)\n    }\n\n    const out: Record<string, any> = {}\n    for (const key of Object.keys(input)) {\n      const o = input[key]\n      if (isNone(o)) {\n        return none()\n      }\n      out[key] = o.value\n    }\n    return some(out)\n  }\n\n/**\n * Combines two `Option` values into a new `Option` by applying a provided\n * function to their values.\n *\n * **Details**\n *\n * This function takes two `Option` values (`self` and `that`) and a combining\n * function `f`. If both `Option` values are `Some`, the function `f` is applied\n * to their values, and the result is wrapped in a new `Some`. If either\n * `Option` is `None`, the result is `None`.\n *\n * This utility is useful for combining two optional computations into a single\n * result while maintaining type safety and avoiding explicit checks for `None`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const maybeName: Option.Option<string> = Option.some(\"John\")\n * const maybeAge: Option.Option<number> = Option.some(25)\n *\n * // Combine the name and age into a person object\n * const person = Option.zipWith(maybeName, maybeAge, (name, age) => ({\n *   name: name.toUpperCase(),\n *   age\n * }))\n *\n * console.log(person)\n * // Output:\n * // { _id: 'Option', _tag: 'Some', value: { name: 'JOHN', age: 25 } }\n * ```\n *\n * @category Zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  /**\n   * Combines two `Option` values into a new `Option` by applying a provided\n   * function to their values.\n   *\n   * **Details**\n   *\n   * This function takes two `Option` values (`self` and `that`) and a combining\n   * function `f`. If both `Option` values are `Some`, the function `f` is applied\n   * to their values, and the result is wrapped in a new `Some`. If either\n   * `Option` is `None`, the result is `None`.\n   *\n   * This utility is useful for combining two optional computations into a single\n   * result while maintaining type safety and avoiding explicit checks for `None`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const maybeName: Option.Option<string> = Option.some(\"John\")\n   * const maybeAge: Option.Option<number> = Option.some(25)\n   *\n   * // Combine the name and age into a person object\n   * const person = Option.zipWith(maybeName, maybeAge, (name, age) => ({\n   *   name: name.toUpperCase(),\n   *   age\n   * }))\n   *\n   * console.log(person)\n   * // Output:\n   * // { _id: 'Option', _tag: 'Some', value: { name: 'JOHN', age: 25 } }\n   * ```\n   *\n   * @category Zipping\n   * @since 2.0.0\n   */\n  <B, A, C>(that: Option<B>, f: (a: A, b: B) => C): (self: Option<A>) => Option<C>\n  /**\n   * Combines two `Option` values into a new `Option` by applying a provided\n   * function to their values.\n   *\n   * **Details**\n   *\n   * This function takes two `Option` values (`self` and `that`) and a combining\n   * function `f`. If both `Option` values are `Some`, the function `f` is applied\n   * to their values, and the result is wrapped in a new `Some`. If either\n   * `Option` is `None`, the result is `None`.\n   *\n   * This utility is useful for combining two optional computations into a single\n   * result while maintaining type safety and avoiding explicit checks for `None`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const maybeName: Option.Option<string> = Option.some(\"John\")\n   * const maybeAge: Option.Option<number> = Option.some(25)\n   *\n   * // Combine the name and age into a person object\n   * const person = Option.zipWith(maybeName, maybeAge, (name, age) => ({\n   *   name: name.toUpperCase(),\n   *   age\n   * }))\n   *\n   * console.log(person)\n   * // Output:\n   * // { _id: 'Option', _tag: 'Some', value: { name: 'JOHN', age: 25 } }\n   * ```\n   *\n   * @category Zipping\n   * @since 2.0.0\n   */\n  <A, B, C>(self: Option<A>, that: Option<B>, f: (a: A, b: B) => C): Option<C>\n} = dual(\n  3,\n  <A, B, C>(self: Option<A>, that: Option<B>, f: (a: A, b: B) => C): Option<C> =>\n    map(product(self, that), ([a, b]) => f(a, b))\n)\n\n/**\n * Applies a function inside a `Some` to a value inside another `Some`,\n * combining them into a new `Option`.\n *\n * **Details**\n *\n * This function allows you to apply a function wrapped in an `Option` (`self`)\n * to a value wrapped in another `Option` (`that`). If both `Option`s are\n * `Some`, the function is applied to the value, and the result is wrapped in a\n * new `Some`. If either `Option` is `None`, the result is `None`.\n *\n * @category Combining\n * @since 2.0.0\n */\nexport const ap: {\n  /**\n   * Applies a function inside a `Some` to a value inside another `Some`,\n   * combining them into a new `Option`.\n   *\n   * **Details**\n   *\n   * This function allows you to apply a function wrapped in an `Option` (`self`)\n   * to a value wrapped in another `Option` (`that`). If both `Option`s are\n   * `Some`, the function is applied to the value, and the result is wrapped in a\n   * new `Some`. If either `Option` is `None`, the result is `None`.\n   *\n   * @category Combining\n   * @since 2.0.0\n   */\n  <A>(that: Option<A>): <B>(self: Option<(a: A) => B>) => Option<B>\n  /**\n   * Applies a function inside a `Some` to a value inside another `Some`,\n   * combining them into a new `Option`.\n   *\n   * **Details**\n   *\n   * This function allows you to apply a function wrapped in an `Option` (`self`)\n   * to a value wrapped in another `Option` (`that`). If both `Option`s are\n   * `Some`, the function is applied to the value, and the result is wrapped in a\n   * new `Some`. If either `Option` is `None`, the result is `None`.\n   *\n   * @category Combining\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<(a: A) => B>, that: Option<A>): Option<B>\n} = dual(2, <A, B>(self: Option<(a: A) => B>, that: Option<A>): Option<B> => zipWith(self, that, (f, a) => f(a)))\n\n/**\n * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, ignoring\n * elements that are `None`.\n *\n * **Details**\n *\n * This function takes an initial value of type `B` and a reducing function `f`\n * that combines the accumulator with values of type `A`. It processes an\n * iterable of `Option<A>`, applying `f` only to the `Some` values while\n * ignoring the `None` values. The result is a single value of type `B`.\n *\n * This utility is particularly useful for aggregating values from an iterable\n * of `Option`s while skipping the absent (`None`) values.\n *\n * @example\n * ```ts\n * import { Option, pipe } from \"effect\"\n *\n * const iterable = [Option.some(1), Option.none(), Option.some(2), Option.none()]\n *\n * console.log(pipe(iterable, Option.reduceCompact(0, (b, a) => b + a)))\n * // Output: 3\n * ```\n *\n * @category Reducing\n * @since 2.0.0\n */\nexport const reduceCompact: {\n  /**\n   * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, ignoring\n   * elements that are `None`.\n   *\n   * **Details**\n   *\n   * This function takes an initial value of type `B` and a reducing function `f`\n   * that combines the accumulator with values of type `A`. It processes an\n   * iterable of `Option<A>`, applying `f` only to the `Some` values while\n   * ignoring the `None` values. The result is a single value of type `B`.\n   *\n   * This utility is particularly useful for aggregating values from an iterable\n   * of `Option`s while skipping the absent (`None`) values.\n   *\n   * @example\n   * ```ts\n   * import { Option, pipe } from \"effect\"\n   *\n   * const iterable = [Option.some(1), Option.none(), Option.some(2), Option.none()]\n   *\n   * console.log(pipe(iterable, Option.reduceCompact(0, (b, a) => b + a)))\n   * // Output: 3\n   * ```\n   *\n   * @category Reducing\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<Option<A>>) => B\n  /**\n   * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, ignoring\n   * elements that are `None`.\n   *\n   * **Details**\n   *\n   * This function takes an initial value of type `B` and a reducing function `f`\n   * that combines the accumulator with values of type `A`. It processes an\n   * iterable of `Option<A>`, applying `f` only to the `Some` values while\n   * ignoring the `None` values. The result is a single value of type `B`.\n   *\n   * This utility is particularly useful for aggregating values from an iterable\n   * of `Option`s while skipping the absent (`None`) values.\n   *\n   * @example\n   * ```ts\n   * import { Option, pipe } from \"effect\"\n   *\n   * const iterable = [Option.some(1), Option.none(), Option.some(2), Option.none()]\n   *\n   * console.log(pipe(iterable, Option.reduceCompact(0, (b, a) => b + a)))\n   * // Output: 3\n   * ```\n   *\n   * @category Reducing\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<Option<A>>, b: B, f: (b: B, a: A) => B): B\n} = dual(\n  3,\n  <A, B>(self: Iterable<Option<A>>, b: B, f: (b: B, a: A) => B): B => {\n    let out: B = b\n    for (const oa of self) {\n      if (isSome(oa)) {\n        out = f(out, oa.value)\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Converts an `Option` into an `Array`.\n * If the input is `None`, an empty array is returned.\n * If the input is `Some`, its value is wrapped in a single-element array.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.toArray(Option.some(1)))\n * // Output: [1]\n *\n * console.log(Option.toArray(Option.none()))\n * // Output: []\n * ```\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const toArray = <A>(self: Option<A>): Array<A> => isNone(self) ? [] : [self.value]\n\n/**\n * Splits an `Option` into two `Option`s based on the result of a mapping\n * function that produces an `Either`.\n *\n * **Details**\n *\n * This function takes an `Option` and a mapping function `f` that converts its\n * value into an `Either`. It returns a tuple of two `Option`s:\n *\n * - The first `Option` (`left`) contains the value from the `Left` side of the\n *   `Either` if it exists, otherwise `None`.\n * - The second `Option` (`right`) contains the value from the `Right` side of\n *   the `Either` if it exists, otherwise `None`.\n *\n * If the input `Option` is `None`, both returned `Option`s are `None`.\n *\n * This utility is useful for filtering and categorizing the contents of an\n * `Option` based on a bifurcating computation.\n *\n * @category Filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  /**\n   * Splits an `Option` into two `Option`s based on the result of a mapping\n   * function that produces an `Either`.\n   *\n   * **Details**\n   *\n   * This function takes an `Option` and a mapping function `f` that converts its\n   * value into an `Either`. It returns a tuple of two `Option`s:\n   *\n   * - The first `Option` (`left`) contains the value from the `Left` side of the\n   *   `Either` if it exists, otherwise `None`.\n   * - The second `Option` (`right`) contains the value from the `Right` side of\n   *   the `Either` if it exists, otherwise `None`.\n   *\n   * If the input `Option` is `None`, both returned `Option`s are `None`.\n   *\n   * This utility is useful for filtering and categorizing the contents of an\n   * `Option` based on a bifurcating computation.\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(f: (a: A) => Either<C, B>): (self: Option<A>) => [left: Option<B>, right: Option<C>]\n  /**\n   * Splits an `Option` into two `Option`s based on the result of a mapping\n   * function that produces an `Either`.\n   *\n   * **Details**\n   *\n   * This function takes an `Option` and a mapping function `f` that converts its\n   * value into an `Either`. It returns a tuple of two `Option`s:\n   *\n   * - The first `Option` (`left`) contains the value from the `Left` side of the\n   *   `Either` if it exists, otherwise `None`.\n   * - The second `Option` (`right`) contains the value from the `Right` side of\n   *   the `Either` if it exists, otherwise `None`.\n   *\n   * If the input `Option` is `None`, both returned `Option`s are `None`.\n   *\n   * This utility is useful for filtering and categorizing the contents of an\n   * `Option` based on a bifurcating computation.\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(self: Option<A>, f: (a: A) => Either<C, B>): [left: Option<B>, right: Option<C>]\n} = dual(2, <A, B, C>(\n  self: Option<A>,\n  f: (a: A) => Either<C, B>\n): [excluded: Option<B>, satisfying: Option<C>] => {\n  if (isNone(self)) {\n    return [none(), none()]\n  }\n  const e = f(self.value)\n  return either.isLeft(e) ? [some(e.left), none()] : [none(), some(e.right)]\n})\n\n// TODO(4.0): remove?\n/**\n * Alias of {@link flatMap}.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * // Transform and filter numbers\n * const transformEven = (n: Option.Option<number>): Option.Option<string> =>\n *   Option.filterMap(n, (n) => (n % 2 === 0 ? Option.some(`Even: ${n}`) : Option.none()))\n *\n * console.log(transformEven(Option.none()))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(transformEven(Option.some(1)))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(transformEven(Option.some(2)))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'Even: 2' }\n * ```\n *\n * @category Filtering\n * @since 2.0.0\n */\nexport const filterMap: {\n  // TODO(4.0): remove?\n  /**\n   * Alias of {@link flatMap}.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Transform and filter numbers\n   * const transformEven = (n: Option.Option<number>): Option.Option<string> =>\n   *   Option.filterMap(n, (n) => (n % 2 === 0 ? Option.some(`Even: ${n}`) : Option.none()))\n   *\n   * console.log(transformEven(Option.none()))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(transformEven(Option.some(1)))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(transformEven(Option.some(2)))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'Even: 2' }\n   * ```\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => Option<B>): (self: Option<A>) => Option<B>\n  // TODO(4.0): remove?\n  /**\n   * Alias of {@link flatMap}.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Transform and filter numbers\n   * const transformEven = (n: Option.Option<number>): Option.Option<string> =>\n   *   Option.filterMap(n, (n) => (n % 2 === 0 ? Option.some(`Even: ${n}`) : Option.none()))\n   *\n   * console.log(transformEven(Option.none()))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(transformEven(Option.some(1)))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(transformEven(Option.some(2)))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'Even: 2' }\n   * ```\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B>\n} = flatMap\n\n/**\n * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n *\n * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const removeEmptyString = (input: Option.Option<string>) =>\n *   Option.filter(input, (value) => value !== \"\")\n *\n * console.log(removeEmptyString(Option.none()))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(removeEmptyString(Option.some(\"\")))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(removeEmptyString(Option.some(\"a\")))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n * ```\n *\n * @category Filtering\n * @since 2.0.0\n */\nexport const filter: {\n  /**\n   * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n   *\n   * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const removeEmptyString = (input: Option.Option<string>) =>\n   *   Option.filter(input, (value) => value !== \"\")\n   *\n   * console.log(removeEmptyString(Option.none()))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"\")))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"a\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Option<A>) => Option<B>\n  /**\n   * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n   *\n   * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const removeEmptyString = (input: Option.Option<string>) =>\n   *   Option.filter(input, (value) => value !== \"\")\n   *\n   * console.log(removeEmptyString(Option.none()))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"\")))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"a\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Option<A>) => Option<A>\n  /**\n   * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n   *\n   * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const removeEmptyString = (input: Option.Option<string>) =>\n   *   Option.filter(input, (value) => value !== \"\")\n   *\n   * console.log(removeEmptyString(Option.none()))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"\")))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"a\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Option<A>, refinement: Refinement<A, B>): Option<B>\n  /**\n   * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n   *\n   * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const removeEmptyString = (input: Option.Option<string>) =>\n   *   Option.filter(input, (value) => value !== \"\")\n   *\n   * console.log(removeEmptyString(Option.none()))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"\")))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"a\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A>(self: Option<A>, predicate: Predicate<A>): Option<A>\n} = dual(\n  2,\n  <A>(self: Option<A>, predicate: Predicate<A>): Option<A> =>\n    filterMap(self, (b) => (predicate(b) ? option.some(b) : option.none))\n)\n\n/**\n * Creates an `Equivalence` instance for comparing `Option` values, using a\n * provided `Equivalence` for the inner type.\n *\n * **Details**\n *\n * This function takes an `Equivalence` instance for a specific type `A` and\n * produces an `Equivalence` instance for `Option<A>`. The resulting\n * `Equivalence` determines whether two `Option` values are equivalent:\n *\n * - Two `None`s are considered equivalent.\n * - A `Some` and a `None` are not equivalent.\n * - Two `Some` values are equivalent if their inner values are equivalent\n *   according to the provided `Equivalence`.\n *\n * **Example** (Comparing Optional Numbers for Equivalence)\n *\n * ```ts\n * import { Number, Option } from \"effect\"\n *\n * const isEquivalent = Option.getEquivalence(Number.Equivalence)\n *\n * console.log(isEquivalent(Option.none(), Option.none()))\n * // Output: true\n *\n * console.log(isEquivalent(Option.none(), Option.some(1)))\n * // Output: false\n *\n * console.log(isEquivalent(Option.some(1), Option.none()))\n * // Output: false\n *\n * console.log(isEquivalent(Option.some(1), Option.some(2)))\n * // Output: false\n *\n * console.log(isEquivalent(Option.some(1), Option.some(1)))\n * // Output: true\n * ```\n *\n * @category Equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <A>(isEquivalent: Equivalence.Equivalence<A>): Equivalence.Equivalence<Option<A>> =>\n  Equivalence.make((x, y) => isNone(x) ? isNone(y) : isNone(y) ? false : isEquivalent(x.value, y.value))\n\n/**\n * Creates an `Order` instance for comparing `Option` values, using a provided\n * `Order` for the inner type.\n *\n * **Details**\n *\n * This function produces an `Order` instance for `Option<A>`, allowing `Option`\n * values to be compared:\n *\n * - `None` is always considered less than any `Some` value.\n * - If both are `Some`, their inner values are compared using the provided\n *   `Order` instance.\n *\n * @example\n * ```ts\n * import { Number, Option } from \"effect\"\n *\n * const order = Option.getOrder(Number.Order)\n *\n * console.log(order(Option.none(), Option.none()))\n * // Output: 0\n *\n * console.log(order(Option.none(), Option.some(1)))\n * // Output: -1\n *\n * console.log(order(Option.some(1), Option.none()))\n * // Output: 1\n *\n * console.log(order(Option.some(1), Option.some(2)))\n * // Output: -1\n *\n * console.log(order(Option.some(1), Option.some(1)))\n * // Output: 0\n * ```\n *\n * @category Sorting\n * @since 2.0.0\n */\nexport const getOrder = <A>(O: Order<A>): Order<Option<A>> =>\n  order.make((self, that) => isSome(self) ? (isSome(that) ? O(self.value, that.value) : 1) : -1)\n\n/**\n * Lifts a binary function to work with `Option` values, allowing the function\n * to operate on two `Option`s.\n *\n * **Details**\n *\n * This function takes a binary function `f` and returns a new function that\n * applies `f` to the values of two `Option`s (`self` and `that`). If both\n * `Option`s are `Some`, the binary function `f` is applied to their values, and\n * the result is wrapped in a new `Some`. If either `Option` is `None`, the\n * result is `None`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * // A binary function to add two numbers\n * const add = (a: number, b: number): number => a + b\n *\n * // Lift the `add` function to work with `Option` values\n * const addOptions = Option.lift2(add)\n *\n * // Both `Option`s are `Some`\n * console.log(addOptions(Option.some(2), Option.some(3)))\n * // Output: { _id: 'Option', _tag: 'Some', value: 5 }\n *\n * // One `Option` is `None`\n * console.log(addOptions(Option.some(2), Option.none()))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Lifting\n * @since 2.0.0\n */\nexport const lift2 = <A, B, C>(f: (a: A, b: B) => C): {\n  (that: Option<B>): (self: Option<A>) => Option<C>\n  (self: Option<A>, that: Option<B>): Option<C>\n} => dual(2, (self: Option<A>, that: Option<B>): Option<C> => zipWith(self, that, f))\n\n/**\n * Lifts a `Predicate` or `Refinement` into the `Option` context, returning a\n * `Some` of the input value if the predicate is satisfied, or `None` otherwise.\n *\n * **Details**\n *\n * This function transforms a `Predicate` (or a more specific `Refinement`) into\n * a function that produces an `Option`. If the predicate evaluates to `true`,\n * the input value is wrapped in a `Some`. If the predicate evaluates to\n * `false`, the result is `None`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * // Check if a number is positive\n * const isPositive = (n: number) => n > 0\n *\n * //      ┌─── (b: number) => Option<number>\n * //      ▼\n * const parsePositive = Option.liftPredicate(isPositive)\n *\n * console.log(parsePositive(1))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * console.log(parsePositive(-1))\n * // OUtput: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Lifting\n * @since 2.0.0\n */\nexport const liftPredicate: { // Note: I intentionally avoid using the NoInfer pattern here.\n  <A, B extends A>(refinement: Refinement<A, B>): (a: A) => Option<B>\n  /**\n   * Lifts a `Predicate` or `Refinement` into the `Option` context, returning a\n   * `Some` of the input value if the predicate is satisfied, or `None` otherwise.\n   *\n   * **Details**\n   *\n   * This function transforms a `Predicate` (or a more specific `Refinement`) into\n   * a function that produces an `Option`. If the predicate evaluates to `true`,\n   * the input value is wrapped in a `Some`. If the predicate evaluates to\n   * `false`, the result is `None`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Check if a number is positive\n   * const isPositive = (n: number) => n > 0\n   *\n   * //      ┌─── (b: number) => Option<number>\n   * //      ▼\n   * const parsePositive = Option.liftPredicate(isPositive)\n   *\n   * console.log(parsePositive(1))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n   *\n   * console.log(parsePositive(-1))\n   * // OUtput: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Lifting\n   * @since 2.0.0\n   */\n  <B extends A, A = B>(predicate: Predicate<A>): (b: B) => Option<B>\n  /**\n   * Lifts a `Predicate` or `Refinement` into the `Option` context, returning a\n   * `Some` of the input value if the predicate is satisfied, or `None` otherwise.\n   *\n   * **Details**\n   *\n   * This function transforms a `Predicate` (or a more specific `Refinement`) into\n   * a function that produces an `Option`. If the predicate evaluates to `true`,\n   * the input value is wrapped in a `Some`. If the predicate evaluates to\n   * `false`, the result is `None`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Check if a number is positive\n   * const isPositive = (n: number) => n > 0\n   *\n   * //      ┌─── (b: number) => Option<number>\n   * //      ▼\n   * const parsePositive = Option.liftPredicate(isPositive)\n   *\n   * console.log(parsePositive(1))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n   *\n   * console.log(parsePositive(-1))\n   * // OUtput: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Lifting\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: A, refinement: Refinement<A, B>): Option<B>\n  /**\n   * Lifts a `Predicate` or `Refinement` into the `Option` context, returning a\n   * `Some` of the input value if the predicate is satisfied, or `None` otherwise.\n   *\n   * **Details**\n   *\n   * This function transforms a `Predicate` (or a more specific `Refinement`) into\n   * a function that produces an `Option`. If the predicate evaluates to `true`,\n   * the input value is wrapped in a `Some`. If the predicate evaluates to\n   * `false`, the result is `None`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Check if a number is positive\n   * const isPositive = (n: number) => n > 0\n   *\n   * //      ┌─── (b: number) => Option<number>\n   * //      ▼\n   * const parsePositive = Option.liftPredicate(isPositive)\n   *\n   * console.log(parsePositive(1))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n   *\n   * console.log(parsePositive(-1))\n   * // OUtput: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Lifting\n   * @since 2.0.0\n   */\n  <B extends A, A = B>(self: B, predicate: Predicate<A>): Option<B>\n} = dual(\n  2,\n  <B extends A, A = B>(b: B, predicate: Predicate<A>): Option<B> => predicate(b) ? some(b) : none()\n)\n\n/**\n * Returns a function that checks if an `Option` contains a specified value,\n * using a provided equivalence function.\n *\n * **Details**\n *\n * This function allows you to check whether an `Option` contains a specific\n * value. It uses an equivalence function `isEquivalent` to compare the value\n * inside the `Option` to the provided value. If the `Option` is `Some` and the\n * equivalence function returns `true`, the result is `true`. If the `Option` is\n * `None` or the values are not equivalent, the result is `false`.\n *\n * @example\n * ```ts\n * import { Number, Option } from \"effect\"\n *\n * const contains = Option.containsWith(Number.Equivalence)\n *\n * console.log(Option.some(2).pipe(contains(2)))\n * // Output: true\n *\n * console.log(Option.some(1).pipe(contains(2)))\n * // Output: false\n *\n * console.log(Option.none().pipe(contains(2)))\n * // Output: false\n * ```\n *\n * @see {@link contains} for a version that uses the default `Equivalence`.\n *\n * @category Elements\n * @since 2.0.0\n */\nexport const containsWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (a: A): (self: Option<A>) => boolean\n  (self: Option<A>, a: A): boolean\n} => dual(2, (self: Option<A>, a: A): boolean => isNone(self) ? false : isEquivalent(self.value, a))\n\nconst _equivalence = Equal.equivalence()\n\n/**\n * Returns a function that checks if an `Option` contains a specified value\n * using the default `Equivalence`.\n *\n * **Details**\n *\n * This function allows you to check whether an `Option` contains a specific\n * value. It uses the default `Equivalence` for equality comparison. If the\n * `Option` is `Some` and its value is equivalent to the provided value, the\n * result is `true`. If the `Option` is `None` or the values are not equivalent,\n * the result is `false`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.some(2).pipe(Option.contains(2)))\n * // Output: true\n *\n * console.log(Option.some(1).pipe(Option.contains(2)))\n * // Output: false\n *\n * console.log(Option.none().pipe(Option.contains(2)))\n * // Output: false\n * ```\n *\n * @see {@link containsWith} for a version that allows you to specify a custom equivalence function.\n *\n * @category Elements\n * @since 2.0.0\n */\nexport const contains: {\n  /**\n   * Returns a function that checks if an `Option` contains a specified value\n   * using the default `Equivalence`.\n   *\n   * **Details**\n   *\n   * This function allows you to check whether an `Option` contains a specific\n   * value. It uses the default `Equivalence` for equality comparison. If the\n   * `Option` is `Some` and its value is equivalent to the provided value, the\n   * result is `true`. If the `Option` is `None` or the values are not equivalent,\n   * the result is `false`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.some(2).pipe(Option.contains(2)))\n   * // Output: true\n   *\n   * console.log(Option.some(1).pipe(Option.contains(2)))\n   * // Output: false\n   *\n   * console.log(Option.none().pipe(Option.contains(2)))\n   * // Output: false\n   * ```\n   *\n   * @see {@link containsWith} for a version that allows you to specify a custom equivalence function.\n   *\n   * @category Elements\n   * @since 2.0.0\n   */\n  <A>(a: A): (self: Option<A>) => boolean\n  /**\n   * Returns a function that checks if an `Option` contains a specified value\n   * using the default `Equivalence`.\n   *\n   * **Details**\n   *\n   * This function allows you to check whether an `Option` contains a specific\n   * value. It uses the default `Equivalence` for equality comparison. If the\n   * `Option` is `Some` and its value is equivalent to the provided value, the\n   * result is `true`. If the `Option` is `None` or the values are not equivalent,\n   * the result is `false`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.some(2).pipe(Option.contains(2)))\n   * // Output: true\n   *\n   * console.log(Option.some(1).pipe(Option.contains(2)))\n   * // Output: false\n   *\n   * console.log(Option.none().pipe(Option.contains(2)))\n   * // Output: false\n   * ```\n   *\n   * @see {@link containsWith} for a version that allows you to specify a custom equivalence function.\n   *\n   * @category Elements\n   * @since 2.0.0\n   */\n  <A>(self: Option<A>, a: A): boolean\n} = containsWith(_equivalence)\n\n/**\n * Checks if a value in an `Option` satisfies a given predicate or refinement.\n *\n * **Details**\n *\n * This function allows you to check if a value inside a `Some` meets a\n * specified condition. If the `Option` is `None`, the result is `false`. If the\n * `Option` is `Some`, the provided predicate or refinement is applied to the\n * value:\n *\n * - If the condition is met, the result is `true`.\n * - If the condition is not met, the result is `false`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n *\n * console.log(Option.some(2).pipe(Option.exists(isEven)))\n * // Output: true\n *\n * console.log(Option.some(1).pipe(Option.exists(isEven)))\n * // Output: false\n *\n * console.log(Option.none().pipe(Option.exists(isEven)))\n * // Output: false\n * ```\n *\n * @category Elements\n * @since 2.0.0\n */\nexport const exists: {\n  /**\n   * Checks if a value in an `Option` satisfies a given predicate or refinement.\n   *\n   * **Details**\n   *\n   * This function allows you to check if a value inside a `Some` meets a\n   * specified condition. If the `Option` is `None`, the result is `false`. If the\n   * `Option` is `Some`, the provided predicate or refinement is applied to the\n   * value:\n   *\n   * - If the condition is met, the result is `true`.\n   * - If the condition is not met, the result is `false`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * console.log(Option.some(2).pipe(Option.exists(isEven)))\n   * // Output: true\n   *\n   * console.log(Option.some(1).pipe(Option.exists(isEven)))\n   * // Output: false\n   *\n   * console.log(Option.none().pipe(Option.exists(isEven)))\n   * // Output: false\n   * ```\n   *\n   * @category Elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Option<A>) => self is Option<B>\n  /**\n   * Checks if a value in an `Option` satisfies a given predicate or refinement.\n   *\n   * **Details**\n   *\n   * This function allows you to check if a value inside a `Some` meets a\n   * specified condition. If the `Option` is `None`, the result is `false`. If the\n   * `Option` is `Some`, the provided predicate or refinement is applied to the\n   * value:\n   *\n   * - If the condition is met, the result is `true`.\n   * - If the condition is not met, the result is `false`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * console.log(Option.some(2).pipe(Option.exists(isEven)))\n   * // Output: true\n   *\n   * console.log(Option.some(1).pipe(Option.exists(isEven)))\n   * // Output: false\n   *\n   * console.log(Option.none().pipe(Option.exists(isEven)))\n   * // Output: false\n   * ```\n   *\n   * @category Elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Option<A>) => boolean\n  /**\n   * Checks if a value in an `Option` satisfies a given predicate or refinement.\n   *\n   * **Details**\n   *\n   * This function allows you to check if a value inside a `Some` meets a\n   * specified condition. If the `Option` is `None`, the result is `false`. If the\n   * `Option` is `Some`, the provided predicate or refinement is applied to the\n   * value:\n   *\n   * - If the condition is met, the result is `true`.\n   * - If the condition is not met, the result is `false`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * console.log(Option.some(2).pipe(Option.exists(isEven)))\n   * // Output: true\n   *\n   * console.log(Option.some(1).pipe(Option.exists(isEven)))\n   * // Output: false\n   *\n   * console.log(Option.none().pipe(Option.exists(isEven)))\n   * // Output: false\n   * ```\n   *\n   * @category Elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Option<A>, refinement: Refinement<A, B>): self is Option<B>\n  /**\n   * Checks if a value in an `Option` satisfies a given predicate or refinement.\n   *\n   * **Details**\n   *\n   * This function allows you to check if a value inside a `Some` meets a\n   * specified condition. If the `Option` is `None`, the result is `false`. If the\n   * `Option` is `Some`, the provided predicate or refinement is applied to the\n   * value:\n   *\n   * - If the condition is met, the result is `true`.\n   * - If the condition is not met, the result is `false`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * console.log(Option.some(2).pipe(Option.exists(isEven)))\n   * // Output: true\n   *\n   * console.log(Option.some(1).pipe(Option.exists(isEven)))\n   * // Output: false\n   *\n   * console.log(Option.none().pipe(Option.exists(isEven)))\n   * // Output: false\n   * ```\n   *\n   * @category Elements\n   * @since 2.0.0\n   */\n  <A>(self: Option<A>, predicate: Predicate<A>): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: Option<A>, refinement: Refinement<A, B>): self is Option<B> =>\n    isNone(self) ? false : refinement(self.value)\n)\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @category Do notation\n * @since 2.0.0\n */\nexport const bindTo: {\n  // -------------------------------------------------------------------------------------\n  // do notation\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @category Do notation\n   * @since 2.0.0\n   */\n  <N extends string>(name: N): <A>(self: Option<A>) => Option<{ [K in N]: A }>\n  // -------------------------------------------------------------------------------------\n  // do notation\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @category Do notation\n   * @since 2.0.0\n   */\n  <A, N extends string>(self: Option<A>, name: N): Option<{ [K in N]: A }>\n} = doNotation.bindTo<OptionTypeLambda>(map)\n\nconst let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): (self: Option<A>) => Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  <A extends object, N extends string, B>(\n    self: Option<A>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.let_<OptionTypeLambda>(map)\n\nexport {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link bindTo}\n   *\n   * @category Do notation\n   * @since 2.0.0\n   */\n  let_ as let\n}\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @category Do notation\n * @since 2.0.0\n */\nexport const bind: {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @category Do notation\n   * @since 2.0.0\n   */\n  <N extends string, A extends object, B>(name: Exclude<N, keyof A>, f: (a: NoInfer<A>) => Option<B>): (self: Option<A>) => Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @category Do notation\n   * @since 2.0.0\n   */\n  <A extends object, N extends string, B>(\n    self: Option<A>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => Option<B>\n  ): Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.bind<OptionTypeLambda>(map, flatMap)\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @category Do notation\n * @since 2.0.0\n */\nexport const Do: Option<{}> = some({})\n\nconst adapter = Gen.adapter<OptionTypeLambda>()\n\n/**\n * Similar to `Effect.gen`, `Option.gen` provides a more readable,\n * generator-based syntax for working with `Option` values, making code that\n * involves `Option` easier to write and understand. This approach is similar to\n * using `async/await` but tailored for `Option`.\n *\n * **Example** (Using `Option.gen` to Create a Combined Value)\n *\n * ```ts\n * import { Option } from \"effect\"\n *\n * const maybeName: Option.Option<string> = Option.some(\"John\")\n * const maybeAge: Option.Option<number> = Option.some(25)\n *\n * const person = Option.gen(function* () {\n *   const name = (yield* maybeName).toUpperCase()\n *   const age = yield* maybeAge\n *   return { name, age }\n * })\n *\n * console.log(person)\n * // Output:\n * // { _id: 'Option', _tag: 'Some', value: { name: 'JOHN', age: 25 } }\n * ```\n *\n * @category Generators\n * @since 2.0.0\n */\nexport const gen: Gen.Gen<OptionTypeLambda, Gen.Adapter<OptionTypeLambda>> = (...args) => {\n  const f = args.length === 1 ? args[0] : args[1].bind(args[0])\n  const iterator = f(adapter)\n  let state: IteratorResult<any> = iterator.next()\n  while (!state.done) {\n    const current = Gen.isGenKind(state.value)\n      ? state.value.value\n      : Gen.yieldWrapGet(state.value)\n    if (isNone(current)) {\n      return current\n    }\n    state = iterator.next(current.value as never)\n  }\n  return some(state.value)\n}\n\n/**\n * Merges two optional values, applying a function if both exist.\n * Unlike {@link zipWith}, this function returns `None` only if both inputs are `None`.\n *\n * @internal\n */\nexport const mergeWith = <A>(f: (a1: A, a2: A) => A) => (o1: Option<A>, o2: Option<A>): Option<A> => {\n  if (isNone(o1)) {\n    return o2\n  } else if (isNone(o2)) {\n    return o1\n  }\n  return some(f(o1.value, o2.value))\n}\n", "/**\n * This module provides an implementation of the `Order` type class which is used to define a total ordering on some type `A`.\n * An order is defined by a relation `<=`, which obeys the following laws:\n *\n * - either `x <= y` or `y <= x` (totality)\n * - if `x <= y` and `y <= x`, then `x == y` (antisymmetry)\n * - if `x <= y` and `y <= z`, then `x <= z` (transitivity)\n *\n * The truth table for compare is defined as follows:\n *\n * | `x <= y` | `x >= y` | Ordering |                       |\n * | -------- | -------- | -------- | --------------------- |\n * | `true`   | `true`   | `0`      | corresponds to x == y |\n * | `true`   | `false`  | `< 0`    | corresponds to x < y  |\n * | `false`  | `true`   | `> 0`    | corresponds to x > y  |\n *\n * @since 2.0.0\n */\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type class\n * @since 2.0.0\n */\nexport interface Order<in A> {\n  (self: A, that: A): -1 | 0 | 1\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface OrderTypeLambda extends TypeLambda {\n  readonly type: Order<this[\"Target\"]>\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A>(\n  compare: (self: A, that: A) => -1 | 0 | 1\n): Order<A> =>\n(self, that) => self === that ? 0 : compare(self, that)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const string: Order<string> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const number: Order<number> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const boolean: Order<boolean> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const bigint: Order<bigint> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @since 2.0.0\n */\nexport const reverse = <A>(O: Order<A>): Order<A> => make((self, that) => O(that, self))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combine: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(that: Order<A>): (self: Order<A>) => Order<A>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(self: Order<A>, that: Order<A>): Order<A>\n} = dual(2, <A>(self: Order<A>, that: Order<A>): Order<A> =>\n  make((a1, a2) => {\n    const out = self(a1, a2)\n    if (out !== 0) {\n      return out\n    }\n    return that(a1, a2)\n  }))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineMany: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(collection: Iterable<Order<A>>): (self: Order<A>) => Order<A>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<A>\n} = dual(2, <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<A> =>\n  make((a1, a2) => {\n    let out = self(a1, a2)\n    if (out !== 0) {\n      return out\n    }\n    for (const O of collection) {\n      out = O(a1, a2)\n      if (out !== 0) {\n        return out\n      }\n    }\n    return out\n  }))\n\n/**\n * @since 2.0.0\n */\nexport const empty = <A>(): Order<A> => make(() => 0)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineAll = <A>(collection: Iterable<Order<A>>): Order<A> => combineMany(empty(), collection)\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapInput: {\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <B, A>(f: (b: B) => A): (self: Order<A>) => Order<B>\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, B>(self: Order<A>, f: (b: B) => A): Order<B>\n} = dual(\n  2,\n  <A, B>(self: Order<A>, f: (b: B) => A): Order<B> => make((b1, b2) => self(f(b1), f(b2)))\n)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Date: Order<Date> = mapInput(number, (date) => date.getTime())\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product: {\n  <B>(that: Order<B>): <A>(self: Order<A>) => Order<readonly [A, B]> // readonly because invariant\n  <A, B>(self: Order<A>, that: Order<B>): Order<readonly [A, B]> // readonly because invariant\n} = dual(2, <A, B>(self: Order<A>, that: Order<B>): Order<readonly [A, B]> =>\n  make(([xa, xb], [ya, yb]) => {\n    const o = self(xa, ya)\n    return o !== 0 ? o : that(xb, yb)\n  }))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = <A>(collection: Iterable<Order<A>>): Order<ReadonlyArray<A>> => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length)\n    let collectionLength = 0\n    for (const O of collection) {\n      if (collectionLength >= len) {\n        break\n      }\n      const o = O(x[collectionLength], y[collectionLength])\n      if (o !== 0) {\n        return o\n      }\n      collectionLength++\n    }\n    return 0\n  })\n}\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany: {\n  <A>(collection: Iterable<Order<A>>): (self: Order<A>) => Order<readonly [A, ...Array<A>]> // readonly because invariant\n  <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<readonly [A, ...Array<A>]> // readonly because invariant\n} = dual(2, <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<readonly [A, ...Array<A>]> => {\n  const O = all(collection)\n  return make((x, y) => {\n    const o = self(x[0], y[0])\n    return o !== 0 ? o : O(x.slice(1), y.slice(1))\n  })\n})\n\n/**\n * Similar to `Promise.all` but operates on `Order`s.\n *\n * ```\n * [Order<A>, Order<B>, ...] -> Order<[A, B, ...]>\n * ```\n *\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const tuple = <T extends ReadonlyArray<Order<any>>>(\n  ...elements: T\n): Order<Readonly<{ [I in keyof T]: [T[I]] extends [Order<infer A>] ? A : never }>> => all(elements) as any\n\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const array = <A>(O: Order<A>): Order<ReadonlyArray<A>> =>\n  make((self, that) => {\n    const aLen = self.length\n    const bLen = that.length\n    const len = Math.min(aLen, bLen)\n    for (let i = 0; i < len; i++) {\n      const o = O(self[i], that[i])\n      if (o !== 0) {\n        return o\n      }\n    }\n    return number(aLen, bLen)\n  })\n\n/**\n * This function creates and returns a new `Order` for a struct of values based on the given `Order`s\n * for each property in the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const struct = <R extends { readonly [x: string]: Order<any> }>(\n  fields: R\n): Order<{ [K in keyof R]: [R[K]] extends [Order<infer A>] ? A : never }> => {\n  const keys = Object.keys(fields)\n  return make((self, that) => {\n    for (const key of keys) {\n      const o = fields[key](self[key], that[key])\n      if (o !== 0) {\n        return o\n      }\n    }\n    return 0\n  })\n}\n\n/**\n * Test whether one value is _strictly less than_ another.\n *\n * @since 2.0.0\n */\nexport const lessThan = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) === -1)\n\n/**\n * Test whether one value is _strictly greater than_ another.\n *\n * @since 2.0.0\n */\nexport const greaterThan = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) === 1)\n\n/**\n * Test whether one value is _non-strictly less than_ another.\n *\n * @since 2.0.0\n */\nexport const lessThanOrEqualTo = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) !== 1)\n\n/**\n * Test whether one value is _non-strictly greater than_ another.\n *\n * @since 2.0.0\n */\nexport const greaterThanOrEqualTo = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) !== -1)\n\n/**\n * Take the minimum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nexport const min = <A>(O: Order<A>): {\n  (that: A): (self: A) => A\n  (self: A, that: A): A\n} => dual(2, (self: A, that: A) => self === that || O(self, that) < 1 ? self : that)\n\n/**\n * Take the maximum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nexport const max = <A>(O: Order<A>): {\n  (that: A): (self: A) => A\n  (self: A, that: A): A\n} => dual(2, (self: A, that: A) => self === that || O(self, that) > -1 ? self : that)\n\n/**\n * Clamp a value between a minimum and a maximum.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Order, Number } from \"effect\"\n *\n * const clamp = Order.clamp(Number.Order)({ minimum: 1, maximum: 5 })\n *\n * assert.equal(clamp(3), 3)\n * assert.equal(clamp(0), 1)\n * assert.equal(clamp(6), 5)\n * ```\n *\n * @since 2.0.0\n */\nexport const clamp = <A>(O: Order<A>): {\n  (options: {\n    minimum: A\n    maximum: A\n  }): (self: A) => A\n  (self: A, options: {\n    minimum: A\n    maximum: A\n  }): A\n} =>\n  dual(\n    2,\n    (self: A, options: {\n      minimum: A\n      maximum: A\n    }): A => min(O)(options.maximum, max(O)(options.minimum, self))\n  )\n\n/**\n * Test whether a value is between a minimum and a maximum (inclusive).\n *\n * @since 2.0.0\n */\nexport const between = <A>(O: Order<A>): {\n  (options: {\n    minimum: A\n    maximum: A\n  }): (self: A) => boolean\n  (self: A, options: {\n    minimum: A\n    maximum: A\n  }): boolean\n} =>\n  dual(\n    2,\n    (self: A, options: {\n      minimum: A\n      maximum: A\n    }): boolean => !lessThan(O)(self, options.minimum) && !greaterThan(O)(self, options.maximum)\n  )\n", "/**\n * This module provides utility functions for working with tuples in TypeScript.\n *\n * @since 2.0.0\n */\nimport * as Equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as order from \"./Order.js\"\nimport type { TupleOf } from \"./Types.js\"\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface TupleTypeLambda extends TypeLambda {\n  readonly type: [this[\"Out1\"], this[\"Target\"]]\n}\n\n/**\n * Constructs a new tuple from the provided values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { make } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(make(1, 'hello', true), [1, 'hello', true])\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A extends ReadonlyArray<any>>(...elements: A): A => elements\n\n/**\n * Return the first element from a tuple with two elements.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { getFirst } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(getFirst([\"hello\", 42]), \"hello\")\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getFirst = <L, R>(self: readonly [L, R]): L => self[0]\n\n/**\n * Return the second element from a tuple with two elements.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { getSecond } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(getSecond([\"hello\", 42]), 42)\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getSecond = <L, R>(self: readonly [L, R]): R => self[1]\n\n/**\n * Transforms each element of tuple using the given function, treating tuple homomorphically\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Tuple } from \"effect\"\n *\n * const result = pipe(\n *   [\"a\", 1, false] as const,\n *   Tuple.map((el) => el.toString().toUpperCase())\n * )\n * assert.deepStrictEqual(result, ['A', '1', 'FALSE'])\n * ```\n *\n * @category mapping\n * @since 3.9.0\n */\nexport const map: {\n  /**\n   * Transforms each element of tuple using the given function, treating tuple homomorphically\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Tuple } from \"effect\"\n   *\n   * const result = pipe(\n   *   [\"a\", 1, false] as const,\n   *   Tuple.map((el) => el.toString().toUpperCase())\n   * )\n   * assert.deepStrictEqual(result, ['A', '1', 'FALSE'])\n   * ```\n   *\n   * @category mapping\n   * @since 3.9.0\n   */\n  <T extends ReadonlyArray<any> | [], B>(fn: (element: T[number]) => B): (self: T) => TupleOf<T[\"length\"], B>\n  /**\n   * Transforms each element of tuple using the given function, treating tuple homomorphically\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Tuple } from \"effect\"\n   *\n   * const result = pipe(\n   *   [\"a\", 1, false] as const,\n   *   Tuple.map((el) => el.toString().toUpperCase())\n   * )\n   * assert.deepStrictEqual(result, ['A', '1', 'FALSE'])\n   * ```\n   *\n   * @category mapping\n   * @since 3.9.0\n   */\n  <B, T extends ReadonlyArray<any> | []>(self: T, fn: (element: T[number]) => B): TupleOf<T[\"length\"], B>\n} = dual(\n  2,\n  <N extends number, A, B>(\n    self: TupleOf<N, A>,\n    fn: (element: A) => B\n  ): TupleOf<N, B> => self.map((element) => fn(element)) as TupleOf<N, B>\n)\n\n/**\n * Transforms both elements of a tuple with two elements using the given functions.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { mapBoth } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapBoth([\"hello\", 42], { onFirst: s => s.toUpperCase(), onSecond: n => n.toString() }),\n *   [\"HELLO\", \"42\"]\n * )\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapBoth: {\n  /**\n   * Transforms both elements of a tuple with two elements using the given functions.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapBoth } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapBoth([\"hello\", 42], { onFirst: s => s.toUpperCase(), onSecond: n => n.toString() }),\n   *   [\"HELLO\", \"42\"]\n   * )\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L1, L2, R1, R2>(\n    options: {\n      readonly onFirst: (e: L1) => L2\n      readonly onSecond: (a: R1) => R2\n    }\n  ): (self: readonly [L1, R1]) => [L2, R2]\n  /**\n   * Transforms both elements of a tuple with two elements using the given functions.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapBoth } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapBoth([\"hello\", 42], { onFirst: s => s.toUpperCase(), onSecond: n => n.toString() }),\n   *   [\"HELLO\", \"42\"]\n   * )\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L1, R1, L2, R2>(\n    self: readonly [L1, R1],\n    options: {\n      readonly onFirst: (e: L1) => L2\n      readonly onSecond: (a: R1) => R2\n    }\n  ): [L2, R2]\n} = dual(\n  2,\n  <L1, R1, L2, R2>(\n    self: readonly [L1, R1],\n    { onFirst, onSecond }: {\n      readonly onFirst: (e: L1) => L2\n      readonly onSecond: (a: R1) => R2\n    }\n  ): [L2, R2] => [onFirst(self[0]), onSecond(self[1])]\n)\n\n/**\n * Transforms the first component of a tuple with two elements using a given function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { mapFirst } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapFirst([\"hello\", 42], s => s.toUpperCase()),\n *   [\"HELLO\", 42]\n * )\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapFirst: {\n  /**\n   * Transforms the first component of a tuple with two elements using a given function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapFirst } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapFirst([\"hello\", 42], s => s.toUpperCase()),\n   *   [\"HELLO\", 42]\n   * )\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L1, L2>(f: (left: L1) => L2): <R>(self: readonly [L1, R]) => [L2, R]\n  /**\n   * Transforms the first component of a tuple with two elements using a given function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapFirst } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapFirst([\"hello\", 42], s => s.toUpperCase()),\n   *   [\"HELLO\", 42]\n   * )\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L1, R, L2>(self: readonly [L1, R], f: (left: L1) => L2): [L2, R]\n} = dual(2, <L1, R, L2>(self: readonly [L1, R], f: (left: L1) => L2): [L2, R] => [f(self[0]), self[1]])\n\n/**\n * Transforms the second component of a tuple with two elements using a given function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { mapSecond } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapSecond([\"hello\", 42], n => n.toString()),\n *   [\"hello\", \"42\"]\n * )\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapSecond: {\n  /**\n   * Transforms the second component of a tuple with two elements using a given function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapSecond } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapSecond([\"hello\", 42], n => n.toString()),\n   *   [\"hello\", \"42\"]\n   * )\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <R1, R2>(f: (right: R1) => R2): <L>(self: readonly [L, R1]) => [L, R2]\n  /**\n   * Transforms the second component of a tuple with two elements using a given function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapSecond } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapSecond([\"hello\", 42], n => n.toString()),\n   *   [\"hello\", \"42\"]\n   * )\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L, R1, R2>(self: readonly [L, R1], f: (right: R1) => R2): [L, R2]\n} = dual(2, <L, R1, R2>(self: readonly [L, R1], f: (right: R1) => R2): [L, R2] => [self[0], f(self[1])])\n\n/**\n * Swaps the elements of a tuple with two elements.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { swap } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(swap([\"hello\", 42]), [42, \"hello\"])\n * ```\n *\n * @since 2.0.0\n */\nexport const swap = <L, R>(self: readonly [L, R]): [R, L] => [self[1], self[0]]\n\n/**\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const getEquivalence: <T extends ReadonlyArray<Equivalence.Equivalence<any>>>(\n  ...isEquivalents: T\n) => Equivalence.Equivalence<\n  Readonly<{ [I in keyof T]: [T[I]] extends [Equivalence.Equivalence<infer A>] ? A : never }>\n> = Equivalence.tuple\n\n/**\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const getOrder: <T extends ReadonlyArray<order.Order<any>>>(\n  ...elements: T\n) => order.Order<{ [I in keyof T]: [T[I]] extends [order.Order<infer A>] ? A : never }> = order.tuple\n\n/**\n * Appends an element to the end of a tuple.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendElement: {\n  /**\n   * Appends an element to the end of a tuple.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(that: B): <A extends ReadonlyArray<unknown>>(self: A) => [...A, B]\n  /**\n   * Appends an element to the end of a tuple.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A extends ReadonlyArray<unknown>, B>(self: A, that: B): [...A, B]\n} = dual(2, <A extends ReadonlyArray<unknown>, B>(self: A, that: B): [...A, B] => [...self, that])\n\n/**\n * Retrieves the element at a specified index from a tuple.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Tuple } from \"effect\"\n *\n * assert.deepStrictEqual(Tuple.at([1, 'hello', true], 1), 'hello')\n * ```\n *\n * @category getters\n * @since 3.4.0\n */\nexport const at: {\n  /**\n   * Retrieves the element at a specified index from a tuple.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Tuple } from \"effect\"\n   *\n   * assert.deepStrictEqual(Tuple.at([1, 'hello', true], 1), 'hello')\n   * ```\n   *\n   * @category getters\n   * @since 3.4.0\n   */\n  <N extends number>(index: N): <A extends ReadonlyArray<unknown>>(self: A) => A[N]\n  /**\n   * Retrieves the element at a specified index from a tuple.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Tuple } from \"effect\"\n   *\n   * assert.deepStrictEqual(Tuple.at([1, 'hello', true], 1), 'hello')\n   * ```\n   *\n   * @category getters\n   * @since 3.4.0\n   */\n  <A extends ReadonlyArray<unknown>, N extends number>(self: A, index: N): A[N]\n} = dual(2, <A extends ReadonlyArray<unknown>, N extends number>(self: A, index: N): A[N] => self[index])\n\nexport {\n  /**\n   * Determine if an `Array` is a tuple with exactly `N` elements, narrowing down the type to `TupleOf`.\n   *\n   * An `Array` is considered to be a `TupleOf` if its length is exactly `N`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTupleOf } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 3), true);\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 2), false);\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 4), false);\n   *\n   * const arr: number[] = [1, 2, 3];\n   * if (isTupleOf(arr, 3)) {\n   *   console.log(arr);\n   *   // ^? [number, number, number]\n   * }\n   *\n   * ```\n   * @category guards\n   * @since 3.3.0\n   */\n  isTupleOf,\n  /**\n   * Determine if an `Array` is a tuple with at least `N` elements, narrowing down the type to `TupleOfAtLeast`.\n   *\n   * An `Array` is considered to be a `TupleOfAtLeast` if its length is at least `N`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTupleOfAtLeast } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 3), true);\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 2), true);\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 4), false);\n   *\n   * const arr: number[] = [1, 2, 3, 4];\n   * if (isTupleOfAtLeast(arr, 3)) {\n   *   console.log(arr);\n   *   // ^? [number, number, number, ...number[]]\n   * }\n   *\n   * ```\n   * @category guards\n   * @since 3.3.0\n   */\n  isTupleOfAtLeast\n} from \"./Predicate.js\"\n", "/**\n * This module provides utility functions for working with records in TypeScript.\n *\n * @since 2.0.0\n */\n\nimport type { Either } from \"./Either.js\"\nimport * as E from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport type { Equivalence } from \"./Equivalence.js\"\nimport { dual, identity } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as Option from \"./Option.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type ReadonlyRecord<in out K extends string | symbol, out A> = {\n  readonly [P in K]: A\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace ReadonlyRecord {\n  type IsFiniteString<T extends string> = T extends \"\" ? true :\n    [T] extends [`${infer Head}${infer Rest}`]\n      ? string extends Head ? false : `${number}` extends Head ? false : Rest extends \"\" ? true : IsFiniteString<Rest>\n    : false\n\n  /**\n   * @since 2.0.0\n   */\n  export type NonLiteralKey<K extends string | symbol> = K extends string ? IsFiniteString<K> extends true ? string : K\n    : symbol\n\n  /**\n   * @since 2.0.0\n   */\n  export type IntersectKeys<K1 extends string, K2 extends string> = [string] extends [K1 | K2] ?\n    NonLiteralKey<K1> & NonLiteralKey<K2>\n    : K1 & K2\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface ReadonlyRecordTypeLambda<K extends string = string> extends TypeLambda {\n  readonly type: ReadonlyRecord<K, this[\"Target\"]>\n}\n\n/**\n * Creates a new, empty record.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const empty = <K extends string | symbol = never, V = never>(): Record<\n  ReadonlyRecord.NonLiteralKey<K>,\n  V\n> => ({} as any)\n\n/**\n * Determine if a record is empty.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isEmptyRecord } from \"effect/Record\"\n *\n * assert.deepStrictEqual(isEmptyRecord({}), true);\n * assert.deepStrictEqual(isEmptyRecord({ a: 3 }), false);\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyRecord = <K extends string, A>(self: Record<K, A>): self is Record<K, never> =>\n  keys(self).length === 0\n\n/**\n * Determine if a record is empty.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isEmptyReadonlyRecord } from \"effect/Record\"\n *\n * assert.deepStrictEqual(isEmptyReadonlyRecord({}), true);\n * assert.deepStrictEqual(isEmptyReadonlyRecord({ a: 3 }), false);\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyReadonlyRecord: <K extends string, A>(\n  self: ReadonlyRecord<K, A>\n) => self is ReadonlyRecord<K, never> = isEmptyRecord\n\n/**\n * Takes an iterable and a projection function and returns a record.\n * The projection function maps each value of the iterable to a tuple of a key and a value, which is then added to the resulting record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { fromIterableWith } from \"effect/Record\"\n *\n * const input = [1, 2, 3, 4]\n *\n * assert.deepStrictEqual(\n *   fromIterableWith(input, a => [String(a), a * 2]),\n *   { '1': 2, '2': 4, '3': 6, '4': 8 }\n * )\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterableWith: {\n  /**\n   * Takes an iterable and a projection function and returns a record.\n   * The projection function maps each value of the iterable to a tuple of a key and a value, which is then added to the resulting record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { fromIterableWith } from \"effect/Record\"\n   *\n   * const input = [1, 2, 3, 4]\n   *\n   * assert.deepStrictEqual(\n   *   fromIterableWith(input, a => [String(a), a * 2]),\n   *   { '1': 2, '2': 4, '3': 6, '4': 8 }\n   * )\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol, B>(f: (a: A) => readonly [K, B]): (self: Iterable<A>) => Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  /**\n   * Takes an iterable and a projection function and returns a record.\n   * The projection function maps each value of the iterable to a tuple of a key and a value, which is then added to the resulting record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { fromIterableWith } from \"effect/Record\"\n   *\n   * const input = [1, 2, 3, 4]\n   *\n   * assert.deepStrictEqual(\n   *   fromIterableWith(input, a => [String(a), a * 2]),\n   *   { '1': 2, '2': 4, '3': 6, '4': 8 }\n   * )\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol, B>(self: Iterable<A>, f: (a: A) => readonly [K, B]): Record<ReadonlyRecord.NonLiteralKey<K>, B>\n} = dual(\n  2,\n  <A, K extends string, B>(\n    self: Iterable<A>,\n    f: (a: A) => readonly [K, B]\n  ): Record<ReadonlyRecord.NonLiteralKey<K>, B> => {\n    const out: Record<string, B> = empty()\n    for (const a of self) {\n      const [k, b] = f(a)\n      out[k] = b\n    }\n    return out\n  }\n)\n\n/**\n * Creates a new record from an iterable, utilizing the provided function to determine the key for each element.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { fromIterableBy } from \"effect/Record\"\n *\n * const users = [\n *   { id: \"2\", name: \"name2\" },\n *   { id: \"1\", name: \"name1\" }\n * ]\n *\n * assert.deepStrictEqual(\n *   fromIterableBy(users, user => user.id),\n *   {\n *     \"2\": { id: \"2\", name: \"name2\" },\n *     \"1\": { id: \"1\", name: \"name1\" }\n *   }\n * )\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterableBy = <A, K extends string | symbol>(\n  items: Iterable<A>,\n  f: (a: A) => K\n): Record<ReadonlyRecord.NonLiteralKey<K>, A> => fromIterableWith(items, (a) => [f(a), a])\n\n/**\n * Builds a record from an iterable of key-value pairs.\n *\n * If there are conflicting keys when using `fromEntries`, the last occurrence of the key/value pair will overwrite the\n * previous ones. So the resulting record will only have the value of the last occurrence of each key.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { fromEntries } from \"effect/Record\"\n *\n * const input: Array<[string, number]> = [[\"a\", 1], [\"b\", 2]]\n *\n * assert.deepStrictEqual(fromEntries(input), { a: 1, b: 2 })\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromEntries: <Entry extends readonly [string | symbol, any]>(\n  entries: Iterable<Entry>\n) => Record<ReadonlyRecord.NonLiteralKey<Entry[0]>, Entry[1]> = Object.fromEntries\n\n/**\n * Transforms the values of a record into an `Array` with a custom mapping function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { collect } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(collect(x, (key, n) => [key, n]), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n * ```\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const collect: {\n  /**\n   * Transforms the values of a record into an `Array` with a custom mapping function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { collect } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * assert.deepStrictEqual(collect(x, (key, n) => [key, n]), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n   * ```\n   *\n   * @category conversions\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(f: (key: K, a: A) => B): (self: ReadonlyRecord<K, A>) => Array<B>\n  /**\n   * Transforms the values of a record into an `Array` with a custom mapping function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { collect } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * assert.deepStrictEqual(collect(x, (key, n) => [key, n]), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n   * ```\n   *\n   * @category conversions\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(self: ReadonlyRecord<K, A>, f: (key: K, a: A) => B): Array<B>\n} = dual(\n  2,\n  <K extends string, A, B>(self: ReadonlyRecord<K, A>, f: (key: K, a: A) => B): Array<B> => {\n    const out: Array<B> = []\n    for (const key of keys(self)) {\n      out.push(f(key, self[key]))\n    }\n    return out\n  }\n)\n\n/**\n * Takes a record and returns an array of tuples containing its keys and values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { toEntries } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(toEntries(x), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n * ```\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toEntries: <K extends string, A>(self: ReadonlyRecord<K, A>) => Array<[K, A]> = collect((\n  key,\n  value\n) => [key, value])\n\n/**\n * Returns the number of key/value pairs in a record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { size } from \"effect/Record\";\n *\n * assert.deepStrictEqual(size({ a: \"a\", b: 1, c: true }), 3);\n * ```\n *\n * @since 2.0.0\n */\nexport const size = <K extends string, A>(self: ReadonlyRecord<K, A>): number => keys(self).length\n\n/**\n * Check if a given `key` exists in a record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { empty, has } from \"effect/Record\"\n *\n * assert.deepStrictEqual(has({ a: 1, b: 2 }, \"a\"), true);\n * assert.deepStrictEqual(has(empty<string>(), \"c\"), false);\n * ```\n *\n * @since 2.0.0\n */\nexport const has: {\n  /**\n   * Check if a given `key` exists in a record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { empty, has } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(has({ a: 1, b: 2 }, \"a\"), true);\n   * assert.deepStrictEqual(has(empty<string>(), \"c\"), false);\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol>(key: NoInfer<K>): <A>(self: ReadonlyRecord<K, A>) => boolean\n  /**\n   * Check if a given `key` exists in a record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { empty, has } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(has({ a: 1, b: 2 }, \"a\"), true);\n   * assert.deepStrictEqual(has(empty<string>(), \"c\"), false);\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A>(self: ReadonlyRecord<K, A>, key: NoInfer<K>): boolean\n} = dual(\n  2,\n  <K extends string | symbol, A>(\n    self: ReadonlyRecord<K, A>,\n    key: NoInfer<K>\n  ): boolean => Object.prototype.hasOwnProperty.call(self, key)\n)\n\n/**\n * Retrieve a value at a particular key from a record, returning it wrapped in an `Option`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record as R, Option } from \"effect\"\n *\n * const person: Record<string, unknown> = { name: \"John Doe\", age: 35 }\n *\n * assert.deepStrictEqual(R.get(person, \"name\"), Option.some(\"John Doe\"))\n * assert.deepStrictEqual(R.get(person, \"email\"), Option.none())\n * ```\n *\n * @since 2.0.0\n */\nexport const get: {\n  /**\n   * Retrieve a value at a particular key from a record, returning it wrapped in an `Option`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R, Option } from \"effect\"\n   *\n   * const person: Record<string, unknown> = { name: \"John Doe\", age: 35 }\n   *\n   * assert.deepStrictEqual(R.get(person, \"name\"), Option.some(\"John Doe\"))\n   * assert.deepStrictEqual(R.get(person, \"email\"), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol>(key: NoInfer<K>): <A>(self: ReadonlyRecord<K, A>) => Option.Option<A>\n  /**\n   * Retrieve a value at a particular key from a record, returning it wrapped in an `Option`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R, Option } from \"effect\"\n   *\n   * const person: Record<string, unknown> = { name: \"John Doe\", age: 35 }\n   *\n   * assert.deepStrictEqual(R.get(person, \"name\"), Option.some(\"John Doe\"))\n   * assert.deepStrictEqual(R.get(person, \"email\"), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A>(self: ReadonlyRecord<K, A>, key: NoInfer<K>): Option.Option<A>\n} = dual(\n  2,\n  <K extends string | symbol, A>(self: ReadonlyRecord<K, A>, key: NoInfer<K>): Option.Option<A> =>\n    has(self, key) ? Option.some(self[key]) : Option.none()\n)\n\n/**\n * Apply a function to the element at the specified key, creating a new record.\n * If the key does not exist, the record is returned unchanged.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record as R } from \"effect\"\n *\n * const f = (x: number) => x * 2\n *\n * assert.deepStrictEqual(\n *  R.modify({ a: 3 }, 'a', f),\n *  { a: 6 }\n * )\n * assert.deepStrictEqual(\n *  R.modify({ a: 3 } as Record<string, number>, 'b', f),\n *  { a: 3 }\n * )\n * ```\n *\n * @since 2.0.0\n */\nexport const modify: {\n  /**\n   * Apply a function to the element at the specified key, creating a new record.\n   * If the key does not exist, the record is returned unchanged.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R } from \"effect\"\n   *\n   * const f = (x: number) => x * 2\n   *\n   * assert.deepStrictEqual(\n   *  R.modify({ a: 3 }, 'a', f),\n   *  { a: 6 }\n   * )\n   * assert.deepStrictEqual(\n   *  R.modify({ a: 3 } as Record<string, number>, 'b', f),\n   *  { a: 3 }\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(key: NoInfer<K>, f: (a: A) => B): (self: ReadonlyRecord<K, A>) => Record<K, A | B>\n  /**\n   * Apply a function to the element at the specified key, creating a new record.\n   * If the key does not exist, the record is returned unchanged.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R } from \"effect\"\n   *\n   * const f = (x: number) => x * 2\n   *\n   * assert.deepStrictEqual(\n   *  R.modify({ a: 3 }, 'a', f),\n   *  { a: 6 }\n   * )\n   * assert.deepStrictEqual(\n   *  R.modify({ a: 3 } as Record<string, number>, 'b', f),\n   *  { a: 3 }\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, f: (a: A) => B): Record<K, A | B>\n} = dual(\n  3,\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, f: (a: A) => B): Record<K, A | B> => {\n    if (!has(self, key)) {\n      return { ...self }\n    }\n    return { ...self, [key]: f(self[key]) }\n  }\n)\n\n/**\n * Apply a function to the element at the specified key, creating a new record,\n * or return `None` if the key doesn't exist.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record as R, Option } from \"effect\"\n *\n * const f = (x: number) => x * 2\n *\n * assert.deepStrictEqual(\n *  R.modifyOption({ a: 3 }, 'a', f),\n *  Option.some({ a: 6 })\n * )\n * assert.deepStrictEqual(\n *  R.modifyOption({ a: 3 } as Record<string, number>, 'b', f),\n *  Option.none()\n * )\n * ```\n *\n * @since 2.0.0\n */\nexport const modifyOption: {\n  /**\n   * Apply a function to the element at the specified key, creating a new record,\n   * or return `None` if the key doesn't exist.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R, Option } from \"effect\"\n   *\n   * const f = (x: number) => x * 2\n   *\n   * assert.deepStrictEqual(\n   *  R.modifyOption({ a: 3 }, 'a', f),\n   *  Option.some({ a: 6 })\n   * )\n   * assert.deepStrictEqual(\n   *  R.modifyOption({ a: 3 } as Record<string, number>, 'b', f),\n   *  Option.none()\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(key: NoInfer<K>, f: (a: A) => B): (self: ReadonlyRecord<K, A>) => Option.Option<Record<K, A | B>>\n  /**\n   * Apply a function to the element at the specified key, creating a new record,\n   * or return `None` if the key doesn't exist.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R, Option } from \"effect\"\n   *\n   * const f = (x: number) => x * 2\n   *\n   * assert.deepStrictEqual(\n   *  R.modifyOption({ a: 3 }, 'a', f),\n   *  Option.some({ a: 6 })\n   * )\n   * assert.deepStrictEqual(\n   *  R.modifyOption({ a: 3 } as Record<string, number>, 'b', f),\n   *  Option.none()\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, f: (a: A) => B): Option.Option<Record<K, A | B>>\n} = dual(\n  3,\n  <K extends string | symbol, A, B>(\n    self: ReadonlyRecord<K, A>,\n    key: NoInfer<K>,\n    f: (a: A) => B\n  ): Option.Option<Record<K, A | B>> => {\n    if (!has(self, key)) {\n      return Option.none()\n    }\n    return Option.some({ ...self, [key]: f(self[key]) })\n  }\n)\n\n/**\n * Replaces a value in the record with the new value passed as parameter.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.replaceOption({ a: 1, b: 2, c: 3 }, 'a', 10),\n *   Option.some({ a: 10, b: 2, c: 3 })\n * )\n * assert.deepStrictEqual(Record.replaceOption(Record.empty<string>(), 'a', 10), Option.none())\n * ```\n *\n * @since 2.0.0\n */\nexport const replaceOption: {\n  /**\n   * Replaces a value in the record with the new value passed as parameter.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Record.replaceOption({ a: 1, b: 2, c: 3 }, 'a', 10),\n   *   Option.some({ a: 10, b: 2, c: 3 })\n   * )\n   * assert.deepStrictEqual(Record.replaceOption(Record.empty<string>(), 'a', 10), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, B>(key: NoInfer<K>, b: B): <A>(self: ReadonlyRecord<K, A>) => Option.Option<Record<K, A | B>>\n  /**\n   * Replaces a value in the record with the new value passed as parameter.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Record.replaceOption({ a: 1, b: 2, c: 3 }, 'a', 10),\n   *   Option.some({ a: 10, b: 2, c: 3 })\n   * )\n   * assert.deepStrictEqual(Record.replaceOption(Record.empty<string>(), 'a', 10), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, b: B): Option.Option<Record<K, A | B>>\n} = dual(\n  3,\n  <K extends string | symbol, A, B>(\n    self: ReadonlyRecord<K, A>,\n    key: NoInfer<K>,\n    b: B\n  ): Option.Option<Record<K, A | B>> => modifyOption(self, key, () => b)\n)\n\n/**\n * If the given key exists in the record, returns a new record with the key removed,\n * otherwise returns a copy of the original record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { remove } from \"effect/Record\"\n *\n * assert.deepStrictEqual(remove({ a: 1, b: 2 }, \"a\"), { b: 2 })\n * ```\n *\n * @since 2.0.0\n */\nexport const remove: {\n  /**\n   * If the given key exists in the record, returns a new record with the key removed,\n   * otherwise returns a copy of the original record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { remove } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(remove({ a: 1, b: 2 }, \"a\"), { b: 2 })\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, X extends K>(key: X): <A>(self: ReadonlyRecord<K, A>) => Record<Exclude<K, X>, A>\n  /**\n   * If the given key exists in the record, returns a new record with the key removed,\n   * otherwise returns a copy of the original record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { remove } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(remove({ a: 1, b: 2 }, \"a\"), { b: 2 })\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, X extends K>(self: ReadonlyRecord<K, A>, key: X): Record<Exclude<K, X>, A>\n} = dual(\n  2,\n  <K extends string | symbol, A, X extends K>(self: ReadonlyRecord<K, A>, key: X): Record<Exclude<K, X>, A> => {\n    if (!has(self, key)) {\n      return { ...self }\n    }\n    const out = { ...self }\n    delete out[key]\n    return out\n  }\n)\n\n/**\n * Retrieves the value of the property with the given `key` from a record and returns an `Option`\n * of a tuple with the value and the record with the removed property.\n * If the key is not present, returns `O.none`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record as R, Option } from \"effect\"\n *\n * assert.deepStrictEqual(R.pop({ a: 1, b: 2 }, \"a\"), Option.some([1, { b: 2 }]))\n * assert.deepStrictEqual(R.pop({ a: 1, b: 2 } as Record<string, number>, \"c\"), Option.none())\n * ```\n *\n * @category record\n * @since 2.0.0\n */\nexport const pop: {\n  /**\n   * Retrieves the value of the property with the given `key` from a record and returns an `Option`\n   * of a tuple with the value and the record with the removed property.\n   * If the key is not present, returns `O.none`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(R.pop({ a: 1, b: 2 }, \"a\"), Option.some([1, { b: 2 }]))\n   * assert.deepStrictEqual(R.pop({ a: 1, b: 2 } as Record<string, number>, \"c\"), Option.none())\n   * ```\n   *\n   * @category record\n   * @since 2.0.0\n   */\n  <K extends string | symbol, X extends K>(key: X): <A>(self: ReadonlyRecord<K, A>) => Option.Option<[A, Record<Exclude<K, X>, A>]>\n  /**\n   * Retrieves the value of the property with the given `key` from a record and returns an `Option`\n   * of a tuple with the value and the record with the removed property.\n   * If the key is not present, returns `O.none`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(R.pop({ a: 1, b: 2 }, \"a\"), Option.some([1, { b: 2 }]))\n   * assert.deepStrictEqual(R.pop({ a: 1, b: 2 } as Record<string, number>, \"c\"), Option.none())\n   * ```\n   *\n   * @category record\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, X extends K>(self: ReadonlyRecord<K, A>, key: X): Option.Option<[A, Record<Exclude<K, X>, A>]>\n} = dual(2, <K extends string | symbol, A, X extends K>(\n  self: ReadonlyRecord<K, A>,\n  key: X\n): Option.Option<[A, Record<Exclude<K, X>, A>]> =>\n  has(self, key) ? Option.some([self[key], remove(self, key)]) : Option.none())\n\n/**\n * Maps a record into another record by applying a transformation function to each of its values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { map } from \"effect/Record\"\n *\n * const f = (n: number) => `-${n}`\n *\n * assert.deepStrictEqual(map({ a: 3, b: 5 }, f), { a: \"-3\", b: \"-5\" })\n *\n * const g = (n: number, key: string) => `${key.toUpperCase()}-${n}`\n *\n * assert.deepStrictEqual(map({ a: 3, b: 5 }, g), { a: \"A-3\", b: \"B-5\" })\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  /**\n   * Maps a record into another record by applying a transformation function to each of its values.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { map } from \"effect/Record\"\n   *\n   * const f = (n: number) => `-${n}`\n   *\n   * assert.deepStrictEqual(map({ a: 3, b: 5 }, f), { a: \"-3\", b: \"-5\" })\n   *\n   * const g = (n: number, key: string) => `${key.toUpperCase()}-${n}`\n   *\n   * assert.deepStrictEqual(map({ a: 3, b: 5 }, g), { a: \"A-3\", b: \"B-5\" })\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(f: (a: A, key: NoInfer<K>) => B): (self: ReadonlyRecord<K, A>) => Record<K, B>\n  /**\n   * Maps a record into another record by applying a transformation function to each of its values.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { map } from \"effect/Record\"\n   *\n   * const f = (n: number) => `-${n}`\n   *\n   * assert.deepStrictEqual(map({ a: 3, b: 5 }, f), { a: \"-3\", b: \"-5\" })\n   *\n   * const g = (n: number, key: string) => `${key.toUpperCase()}-${n}`\n   *\n   * assert.deepStrictEqual(map({ a: 3, b: 5 }, g), { a: \"A-3\", b: \"B-5\" })\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(self: ReadonlyRecord<K, A>, f: (a: A, key: NoInfer<K>) => B): Record<K, B>\n} = dual(\n  2,\n  <K extends string, A, B>(self: ReadonlyRecord<K, A>, f: (a: A, key: NoInfer<K>) => B): Record<K, B> => {\n    const out: Record<K, B> = { ...self } as any\n    for (const key of keys(self)) {\n      out[key] = f(self[key], key)\n    }\n    return out\n  }\n)\n\n/**\n * Maps the keys of a `ReadonlyRecord` while preserving the corresponding values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { mapKeys } from \"effect/Record\"\n *\n * assert.deepStrictEqual(mapKeys({ a: 3, b: 5 }, (key) => key.toUpperCase()), { A: 3, B: 5 })\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapKeys: {\n  /**\n   * Maps the keys of a `ReadonlyRecord` while preserving the corresponding values.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapKeys } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(mapKeys({ a: 3, b: 5 }, (key) => key.toUpperCase()), { A: 3, B: 5 })\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, K2 extends string>(f: (key: K, a: A) => K2): (self: ReadonlyRecord<K, A>) => Record<K2, A>\n  /**\n   * Maps the keys of a `ReadonlyRecord` while preserving the corresponding values.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapKeys } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(mapKeys({ a: 3, b: 5 }, (key) => key.toUpperCase()), { A: 3, B: 5 })\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, K2 extends string>(self: ReadonlyRecord<K, A>, f: (key: K, a: A) => K2): Record<K2, A>\n} = dual(\n  2,\n  <K extends string, A, K2 extends string>(\n    self: ReadonlyRecord<K, A>,\n    f: (key: K, a: A) => K2\n  ): Record<K2, A> => {\n    const out: Record<K2, A> = {} as any\n    for (const key of keys(self)) {\n      const a = self[key]\n      out[f(key, a)] = a\n    }\n    return out\n  }\n)\n\n/**\n * Maps entries of a `ReadonlyRecord` using the provided function, allowing modification of both keys and corresponding values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { mapEntries } from \"effect/Record\"\n *\n * assert.deepStrictEqual(mapEntries({ a: 3, b: 5 }, (a, key) => [key.toUpperCase(), a + 1]), { A: 4, B: 6 })\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapEntries: {\n  /**\n   * Maps entries of a `ReadonlyRecord` using the provided function, allowing modification of both keys and corresponding values.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapEntries } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(mapEntries({ a: 3, b: 5 }, (a, key) => [key.toUpperCase(), a + 1]), { A: 4, B: 6 })\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, K2 extends string, B>(f: (a: A, key: K) => readonly [K2, B]): (self: ReadonlyRecord<K, A>) => Record<K2, B>\n  /**\n   * Maps entries of a `ReadonlyRecord` using the provided function, allowing modification of both keys and corresponding values.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapEntries } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(mapEntries({ a: 3, b: 5 }, (a, key) => [key.toUpperCase(), a + 1]), { A: 4, B: 6 })\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, K2 extends string, B>(self: ReadonlyRecord<K, A>, f: (a: A, key: K) => [K2, B]): Record<K2, B>\n} = dual(\n  2,\n  <K extends string, A, K2 extends string, B>(\n    self: ReadonlyRecord<K, A>,\n    f: (a: A, key: K) => [K2, B]\n  ): Record<K2, B> => {\n    const out = <Record<K2, B>> {}\n    for (const key of keys(self)) {\n      const [k, b] = f(self[key], key)\n      out[k] = b\n    }\n    return out\n  }\n)\n\n/**\n * Transforms a record into a record by applying the function `f` to each key and value in the original record.\n * If the function returns `Some`, the key-value pair is included in the output record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Option } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * const f = (a: number, key: string) => a > 2 ? Option.some(a * 2) : Option.none()\n * assert.deepStrictEqual(Record.filterMap(x, f), { c: 6 })\n * ```\n *\n * @since 2.0.0\n */\nexport const filterMap: {\n  /**\n   * Transforms a record into a record by applying the function `f` to each key and value in the original record.\n   * If the function returns `Some`, the key-value pair is included in the output record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record, Option } from \"effect\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * const f = (a: number, key: string) => a > 2 ? Option.some(a * 2) : Option.none()\n   * assert.deepStrictEqual(Record.filterMap(x, f), { c: 6 })\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(f: (a: A, key: K) => Option.Option<B>): (self: ReadonlyRecord<K, A>) => Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  /**\n   * Transforms a record into a record by applying the function `f` to each key and value in the original record.\n   * If the function returns `Some`, the key-value pair is included in the output record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record, Option } from \"effect\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * const f = (a: number, key: string) => a > 2 ? Option.some(a * 2) : Option.none()\n   * assert.deepStrictEqual(Record.filterMap(x, f), { c: 6 })\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(self: ReadonlyRecord<K, A>, f: (a: A, key: K) => Option.Option<B>): Record<ReadonlyRecord.NonLiteralKey<K>, B>\n} = dual(\n  2,\n  <K extends string, A, B>(\n    self: ReadonlyRecord<K, A>,\n    f: (a: A, key: K) => Option.Option<B>\n  ): Record<ReadonlyRecord.NonLiteralKey<K>, B> => {\n    const out: Record<string, B> = empty()\n    for (const key of keys(self)) {\n      const o = f(self[key], key)\n      if (Option.isSome(o)) {\n        out[key] = o.value\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Selects properties from a record whose values match the given predicate.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { filter } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3, d: 4 }\n * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filter: {\n  /**\n   * Selects properties from a record whose values match the given predicate.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { filter } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3, d: 4 }\n   * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B extends A>(refinement: (a: NoInfer<A>, key: K) => a is B): (self: ReadonlyRecord<K, A>) => Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  /**\n   * Selects properties from a record whose values match the given predicate.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { filter } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3, d: 4 }\n   * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A>(predicate: (A: NoInfer<A>, key: K) => boolean): (self: ReadonlyRecord<K, A>) => Record<ReadonlyRecord.NonLiteralKey<K>, A>\n  /**\n   * Selects properties from a record whose values match the given predicate.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { filter } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3, d: 4 }\n   * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B extends A>(self: ReadonlyRecord<K, A>, refinement: (a: A, key: K) => a is B): Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  /**\n   * Selects properties from a record whose values match the given predicate.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { filter } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3, d: 4 }\n   * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A>(self: ReadonlyRecord<K, A>, predicate: (a: A, key: K) => boolean): Record<ReadonlyRecord.NonLiteralKey<K>, A>\n} = dual(\n  2,\n  <K extends string, A>(\n    self: ReadonlyRecord<K, A>,\n    predicate: (a: A, key: K) => boolean\n  ): Record<ReadonlyRecord.NonLiteralKey<K>, A> => {\n    const out: Record<string, A> = empty()\n    for (const key of keys(self)) {\n      if (predicate(self[key], key)) {\n        out[key] = self[key]\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Given a record with `Option` values, returns a new record containing only the `Some` values, preserving the original keys.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getSomes({ a: Option.some(1), b: Option.none(), c: Option.some(2) }),\n *   { a: 1, c: 2 }\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getSomes: <K extends string, A>(\n  self: ReadonlyRecord<K, Option.Option<A>>\n) => Record<ReadonlyRecord.NonLiteralKey<K>, A> = filterMap(\n  identity\n)\n\n/**\n * Given a record with `Either` values, returns a new record containing only the `Left` values, preserving the original keys.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getLefts({ a: Either.right(1), b: Either.left(\"err\"), c: Either.right(2) }),\n *   { b: \"err\" }\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getLefts = <K extends string, R, L>(\n  self: ReadonlyRecord<K, Either<R, L>>\n): Record<ReadonlyRecord.NonLiteralKey<K>, L> => {\n  const out: Record<string, L> = empty()\n  for (const key of keys(self)) {\n    const value = self[key]\n    if (E.isLeft(value)) {\n      out[key] = value.left\n    }\n  }\n\n  return out\n}\n\n/**\n * Given a record with `Either` values, returns a new record containing only the `Right` values, preserving the original keys.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getRights({ a: Either.right(1), b: Either.left(\"err\"), c: Either.right(2) }),\n *   { a: 1, c: 2 }\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getRights = <K extends string, R, L>(\n  self: ReadonlyRecord<K, Either<R, L>>\n): Record<string, R> => {\n  const out: Record<string, R> = empty()\n  for (const key of keys(self)) {\n    const value = self[key]\n    if (E.isRight(value)) {\n      out[key] = value.right\n    }\n  }\n\n  return out\n}\n\n/**\n * Partitions the elements of a record into two groups: those that match a predicate, and those that don't.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Either } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * const f = (n: number) => (n % 2 === 0 ? Either.right(n) : Either.left(n))\n * assert.deepStrictEqual(Record.partitionMap(x, f), [{ a: 1, c: 3 }, { b: 2}])\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  /**\n   * Partitions the elements of a record into two groups: those that match a predicate, and those that don't.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record, Either } from \"effect\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * const f = (n: number) => (n % 2 === 0 ? Either.right(n) : Either.left(n))\n   * assert.deepStrictEqual(Record.partitionMap(x, f), [{ a: 1, c: 3 }, { b: 2}])\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B, C>(f: (a: A, key: K) => Either<C, B>): (\n    self: ReadonlyRecord<K, A>\n  ) => [left: Record<ReadonlyRecord.NonLiteralKey<K>, B>, right: Record<ReadonlyRecord.NonLiteralKey<K>, C>]\n  /**\n   * Partitions the elements of a record into two groups: those that match a predicate, and those that don't.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record, Either } from \"effect\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * const f = (n: number) => (n % 2 === 0 ? Either.right(n) : Either.left(n))\n   * assert.deepStrictEqual(Record.partitionMap(x, f), [{ a: 1, c: 3 }, { b: 2}])\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B, C>(self: ReadonlyRecord<K, A>, f: (a: A, key: K) => Either<C, B>): [left: Record<ReadonlyRecord.NonLiteralKey<K>, B>, right: Record<ReadonlyRecord.NonLiteralKey<K>, C>]\n} = dual(\n  2,\n  <K extends string, A, B, C>(\n    self: ReadonlyRecord<K, A>,\n    f: (a: A, key: K) => Either<C, B>\n  ): [left: Record<ReadonlyRecord.NonLiteralKey<K>, B>, right: Record<ReadonlyRecord.NonLiteralKey<K>, C>] => {\n    const left: Record<string, B> = empty()\n    const right: Record<string, C> = empty()\n    for (const key of keys(self)) {\n      const e = f(self[key], key)\n      if (E.isLeft(e)) {\n        left[key] = e.left\n      } else {\n        right[key] = e.right\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Partitions a record of `Either` values into two separate records,\n * one with the `Left` values and one with the `Right` values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.separate({ a: Either.left(\"e\"), b: Either.right(1) }),\n *   [{ a: \"e\" }, { b: 1 }]\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const separate: <K extends string, A, B>(\n  self: ReadonlyRecord<K, Either<B, A>>\n) => [Record<ReadonlyRecord.NonLiteralKey<K>, A>, Record<ReadonlyRecord.NonLiteralKey<K>, B>] = partitionMap(identity)\n\n/**\n * Partitions a record into two separate records based on the result of a predicate function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { partition } from \"effect/Record\"\n *\n * assert.deepStrictEqual(\n *   partition({ a: 1, b: 3 }, (n) => n > 2),\n *   [{ a: 1 }, { b: 3 }]\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partition: {\n  /**\n   * Partitions a record into two separate records based on the result of a predicate function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { partition } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(\n   *   partition({ a: 1, b: 3 }, (n) => n > 2),\n   *   [{ a: 1 }, { b: 3 }]\n   * )\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B extends A>(refinement: (a: NoInfer<A>, key: K) => a is B): (\n    self: ReadonlyRecord<K, A>\n  ) => [\n    excluded: Record<ReadonlyRecord.NonLiteralKey<K>, Exclude<A, B>>,\n    satisfying: Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  ]\n  /**\n   * Partitions a record into two separate records based on the result of a predicate function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { partition } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(\n   *   partition({ a: 1, b: 3 }, (n) => n > 2),\n   *   [{ a: 1 }, { b: 3 }]\n   * )\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A>(predicate: (a: NoInfer<A>, key: K) => boolean): (\n    self: ReadonlyRecord<K, A>\n  ) => [excluded: Record<ReadonlyRecord.NonLiteralKey<K>, A>, satisfying: Record<ReadonlyRecord.NonLiteralKey<K>, A>]\n  /**\n   * Partitions a record into two separate records based on the result of a predicate function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { partition } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(\n   *   partition({ a: 1, b: 3 }, (n) => n > 2),\n   *   [{ a: 1 }, { b: 3 }]\n   * )\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B extends A>(self: ReadonlyRecord<K, A>, refinement: (a: A, key: K) => a is B): [\n    excluded: Record<ReadonlyRecord.NonLiteralKey<K>, Exclude<A, B>>,\n    satisfying: Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  ]\n  /**\n   * Partitions a record into two separate records based on the result of a predicate function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { partition } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(\n   *   partition({ a: 1, b: 3 }, (n) => n > 2),\n   *   [{ a: 1 }, { b: 3 }]\n   * )\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A>(self: ReadonlyRecord<K, A>, predicate: (a: A, key: K) => boolean): [excluded: Record<ReadonlyRecord.NonLiteralKey<K>, A>, satisfying: Record<ReadonlyRecord.NonLiteralKey<K>, A>]\n} = dual(\n  2,\n  <K extends string, A>(\n    self: ReadonlyRecord<K, A>,\n    predicate: (a: A, key: K) => boolean\n  ): [excluded: Record<ReadonlyRecord.NonLiteralKey<K>, A>, satisfying: Record<ReadonlyRecord.NonLiteralKey<K>, A>] => {\n    const left: Record<string, A> = empty()\n    const right: Record<string, A> = empty()\n    for (const key of keys(self)) {\n      if (predicate(self[key], key)) {\n        right[key] = self[key]\n      } else {\n        left[key] = self[key]\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Retrieve the keys of a given record as an array.\n *\n * @since 2.0.0\n */\nexport const keys = <K extends string | symbol, A>(self: ReadonlyRecord<K, A>): Array<K & string> =>\n  Object.keys(self) as Array<K & string>\n\n/**\n * Retrieve the values of a given record as an array.\n *\n * @since 2.0.0\n */\nexport const values = <K extends string, A>(self: ReadonlyRecord<K, A>): Array<A> => collect(self, (_, a) => a)\n\n/**\n * Add a new key-value pair or update an existing key's value in a record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { set } from \"effect/Record\"\n *\n * assert.deepStrictEqual(set(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n * assert.deepStrictEqual(set(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n * ```\n *\n * @since 2.0.0\n */\nexport const set: {\n  /**\n   * Add a new key-value pair or update an existing key's value in a record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { set } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(set(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n   * assert.deepStrictEqual(set(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, K1 extends K | ((string | symbol) & {}), B>(key: K1, value: B): <A>(self: ReadonlyRecord<K, A>) => Record<K | K1, A | B>\n  /**\n   * Add a new key-value pair or update an existing key's value in a record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { set } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(set(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n   * assert.deepStrictEqual(set(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, K1 extends K | ((string | symbol) & {}), B>(self: ReadonlyRecord<K, A>, key: K1, value: B): Record<K | K1, A | B>\n} = dual(\n  3,\n  <K extends string | symbol, A, K1 extends K | ((string | symbol) & {}), B>(\n    self: ReadonlyRecord<K, A>,\n    key: K1,\n    value: B\n  ): Record<K | K1, A | B> => {\n    return { ...self, [key]: value } as any\n  }\n)\n\n/**\n * Replace a key's value in a record and return the updated record.\n * If the key does not exist in the record, a copy of the original record is returned.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record } from \"effect\"\n *\n * assert.deepStrictEqual(Record.replace(\"a\", 3)({ a: 1, b: 2 }), { a: 3, b: 2 });\n * assert.deepStrictEqual(Record.replace(\"c\", 3)({ a: 1, b: 2 }), { a: 1, b: 2 });\n * ```\n *\n * @since 2.0.0\n */\nexport const replace: {\n  /**\n   * Replace a key's value in a record and return the updated record.\n   * If the key does not exist in the record, a copy of the original record is returned.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record } from \"effect\"\n   *\n   * assert.deepStrictEqual(Record.replace(\"a\", 3)({ a: 1, b: 2 }), { a: 3, b: 2 });\n   * assert.deepStrictEqual(Record.replace(\"c\", 3)({ a: 1, b: 2 }), { a: 1, b: 2 });\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, B>(key: NoInfer<K>, value: B): <A>(self: ReadonlyRecord<K, A>) => Record<K, A | B>\n  /**\n   * Replace a key's value in a record and return the updated record.\n   * If the key does not exist in the record, a copy of the original record is returned.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record } from \"effect\"\n   *\n   * assert.deepStrictEqual(Record.replace(\"a\", 3)({ a: 1, b: 2 }), { a: 3, b: 2 });\n   * assert.deepStrictEqual(Record.replace(\"c\", 3)({ a: 1, b: 2 }), { a: 1, b: 2 });\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, value: B): Record<K, A | B>\n} = dual(\n  3,\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, value: B): Record<K, A | B> => {\n    if (has(self, key)) {\n      return { ...self, [key]: value }\n    }\n    return { ...self }\n  }\n)\n\n/**\n * Check if all the keys and values in one record are also found in another record.\n *\n * @since 2.0.0\n */\nexport const isSubrecordBy = <A>(equivalence: Equivalence<A>): {\n  <K extends string>(that: ReadonlyRecord<K, A>): (self: ReadonlyRecord<K, A>) => boolean\n  <K extends string>(self: ReadonlyRecord<K, A>, that: ReadonlyRecord<K, A>): boolean\n} =>\n  dual(2, <K extends string>(self: ReadonlyRecord<K, A>, that: ReadonlyRecord<K, A>): boolean => {\n    for (const key of keys(self)) {\n      if (!has(that, key) || !equivalence(self[key], that[key])) {\n        return false\n      }\n    }\n    return true\n  })\n\n/**\n * Check if one record is a subrecord of another, meaning it contains all the keys and values found in the second record.\n * This comparison uses default equality checks (`Equal.equivalence()`).\n *\n * @since 2.0.0\n */\nexport const isSubrecord: {\n  /**\n   * Check if one record is a subrecord of another, meaning it contains all the keys and values found in the second record.\n   * This comparison uses default equality checks (`Equal.equivalence()`).\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A>(that: ReadonlyRecord<K, A>): (self: ReadonlyRecord<K, A>) => boolean\n  /**\n   * Check if one record is a subrecord of another, meaning it contains all the keys and values found in the second record.\n   * This comparison uses default equality checks (`Equal.equivalence()`).\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A>(self: ReadonlyRecord<K, A>, that: ReadonlyRecord<K, A>): boolean\n} = isSubrecordBy(Equal.equivalence())\n\n/**\n * Reduce a record to a single value by combining its entries with a specified function.\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduce: {\n  /**\n   * Reduce a record to a single value by combining its entries with a specified function.\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <Z, V, K extends string>(zero: Z, f: (accumulator: Z, value: V, key: K) => Z): (self: ReadonlyRecord<K, V>) => Z\n  /**\n   * Reduce a record to a single value by combining its entries with a specified function.\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <K extends string, V, Z>(\n    self: ReadonlyRecord<K, V>,\n    zero: Z,\n    f: (accumulator: Z, value: V, key: K) => Z\n  ): Z\n} = dual(\n  3,\n  <K extends string, V, Z>(\n    self: ReadonlyRecord<K, V>,\n    zero: Z,\n    f: (accumulator: Z, value: V, key: K) => Z\n  ): Z => {\n    let out: Z = zero\n    for (const key of keys(self)) {\n      out = f(out, self[key], key)\n    }\n    return out\n  }\n)\n\n/**\n * Check if all entries in a record meet a specific condition.\n *\n * @since 2.0.0\n */\nexport const every: {\n  /**\n   * Check if all entries in a record meet a specific condition.\n   *\n   * @since 2.0.0\n   */\n  <A, K extends string, B extends A>(refinement: (value: A, key: K) => value is B): (self: ReadonlyRecord<K, A>) => self is ReadonlyRecord<K, B>\n  /**\n   * Check if all entries in a record meet a specific condition.\n   *\n   * @since 2.0.0\n   */\n  <A, K extends string>(predicate: (value: A, key: K) => boolean): (self: ReadonlyRecord<K, A>) => boolean\n  /**\n   * Check if all entries in a record meet a specific condition.\n   *\n   * @since 2.0.0\n   */\n  <A, K extends string, B extends A>(self: ReadonlyRecord<K, A>, refinement: (value: A, key: K) => value is B): self is ReadonlyRecord<K, B>\n  /**\n   * Check if all entries in a record meet a specific condition.\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A>(self: ReadonlyRecord<K, A>, predicate: (value: A, key: K) => boolean): boolean\n} = dual(\n  2,\n  <A, K extends string, B extends A>(\n    self: ReadonlyRecord<K, A>,\n    refinement: (value: A, key: K) => value is B\n  ): self is ReadonlyRecord<K, B> => {\n    for (const key of keys(self)) {\n      if (!refinement(self[key], key)) {\n        return false\n      }\n    }\n    return true\n  }\n)\n\n/**\n * Check if any entry in a record meets a specific condition.\n *\n * @since 2.0.0\n */\nexport const some: {\n  /**\n   * Check if any entry in a record meets a specific condition.\n   *\n   * @since 2.0.0\n   */\n  <A, K extends string>(predicate: (value: A, key: K) => boolean): (self: ReadonlyRecord<K, A>) => boolean\n  /**\n   * Check if any entry in a record meets a specific condition.\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A>(self: ReadonlyRecord<K, A>, predicate: (value: A, key: K) => boolean): boolean\n} = dual(\n  2,\n  <K extends string, A>(self: ReadonlyRecord<K, A>, predicate: (value: A, key: K) => boolean): boolean => {\n    for (const key of keys(self)) {\n      if (predicate(self[key], key)) {\n        return true\n      }\n    }\n    return false\n  }\n)\n\n/**\n * Merge two records, preserving entries that exist in either of the records.\n *\n * @since 2.0.0\n */\nexport const union: {\n  /**\n   * Merge two records, preserving entries that exist in either of the records.\n   *\n   * @since 2.0.0\n   */\n  <K1 extends string, A, B, C>(that: ReadonlyRecord<K1, B>, combine: (selfValue: A, thatValue: B) => C): <K0 extends string>(self: ReadonlyRecord<K0, A>) => Record<K0 | K1, A | B | C>\n  /**\n   * Merge two records, preserving entries that exist in either of the records.\n   *\n   * @since 2.0.0\n   */\n  <K0 extends string, A, K1 extends string, B, C>(\n    self: ReadonlyRecord<K0, A>,\n    that: ReadonlyRecord<K1, B>,\n    combine: (selfValue: A, thatValue: B) => C\n  ): Record<K0 | K1, A | B | C>\n} = dual(\n  3,\n  <K0 extends string, A, K1 extends string, B, C>(\n    self: ReadonlyRecord<K0, A>,\n    that: ReadonlyRecord<K1, B>,\n    combine: (selfValue: A, thatValue: B) => C\n  ): Record<K0 | K1, A | B | C> => {\n    if (isEmptyRecord(self)) {\n      return { ...that } as any\n    }\n    if (isEmptyRecord(that)) {\n      return { ...self } as any\n    }\n    const out: Record<string, A | B | C> = empty()\n    for (const key of keys(self)) {\n      if (has(that, key as any)) {\n        out[key] = combine(self[key], that[key as unknown as K1])\n      } else {\n        out[key] = self[key]\n      }\n    }\n    for (const key of keys(that)) {\n      if (!has(out, key)) {\n        out[key] = that[key]\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Merge two records, retaining only the entries that exist in both records.\n *\n * @since 2.0.0\n */\nexport const intersection: {\n  /**\n   * Merge two records, retaining only the entries that exist in both records.\n   *\n   * @since 2.0.0\n   */\n  <K1 extends string, A, B, C>(that: ReadonlyRecord<K1, B>, combine: (selfValue: A, thatValue: B) => C): <K0 extends string>(self: ReadonlyRecord<K0, A>) => Record<ReadonlyRecord.IntersectKeys<K0, K1>, C>\n  /**\n   * Merge two records, retaining only the entries that exist in both records.\n   *\n   * @since 2.0.0\n   */\n  <K0 extends string, A, K1 extends string, B, C>(\n    self: ReadonlyRecord<K0, A>,\n    that: ReadonlyRecord<K1, B>,\n    combine: (selfValue: A, thatValue: B) => C\n  ): Record<ReadonlyRecord.IntersectKeys<K0, K1>, C>\n} = dual(\n  3,\n  <K0 extends string, A, K1 extends string, B, C>(\n    self: ReadonlyRecord<K0, A>,\n    that: ReadonlyRecord<K1, B>,\n    combine: (selfValue: A, thatValue: B) => C\n  ): Record<ReadonlyRecord.IntersectKeys<K0, K1>, C> => {\n    const out: Record<string, C> = empty()\n    if (isEmptyRecord(self) || isEmptyRecord(that)) {\n      return out\n    }\n    for (const key of keys(self)) {\n      if (has(that, key as any)) {\n        out[key] = combine(self[key], that[key as unknown as K1])\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Merge two records, preserving only the entries that are unique to each record.\n *\n * @since 2.0.0\n */\nexport const difference: {\n  /**\n   * Merge two records, preserving only the entries that are unique to each record.\n   *\n   * @since 2.0.0\n   */\n  <K1 extends string, B>(that: ReadonlyRecord<K1, B>): <K0 extends string, A>(self: ReadonlyRecord<K0, A>) => Record<K0 | K1, A | B>\n  /**\n   * Merge two records, preserving only the entries that are unique to each record.\n   *\n   * @since 2.0.0\n   */\n  <K0 extends string, A, K1 extends string, B>(self: ReadonlyRecord<K0, A>, that: ReadonlyRecord<K1, B>): Record<K0 | K1, A | B>\n} = dual(2, <K0 extends string, A, K1 extends string, B>(\n  self: ReadonlyRecord<K0, A>,\n  that: ReadonlyRecord<K1, B>\n): Record<K0 | K1, A | B> => {\n  if (isEmptyRecord(self)) {\n    return { ...that } as any\n  }\n  if (isEmptyRecord(that)) {\n    return { ...self } as any\n  }\n  const out = <Record<K0 | K1, A | B>> {}\n  for (const key of keys(self)) {\n    if (!has(that, key as any)) {\n      out[key] = self[key]\n    }\n  }\n  for (const key of keys(that)) {\n    if (!has(self, key as any)) {\n      out[key] = that[key]\n    }\n  }\n  return out\n})\n\n/**\n * Create an `Equivalence` for records using the provided `Equivalence` for values.\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getEquivalence = <K extends string, A>(\n  equivalence: Equivalence<A>\n): Equivalence<ReadonlyRecord<K, A>> => {\n  const is = isSubrecordBy(equivalence)\n  return (self, that) => is(self, that) && is(that, self)\n}\n\n/**\n * Create a non-empty record from a single element.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const singleton = <K extends string | symbol, A>(key: K, value: A): Record<K, A> => ({\n  [key]: value\n} as any)\n\n/**\n * Returns the first entry that satisfies the specified\n * predicate, or `None` if no such entry exists.\n *\n * @example\n * ```ts\n * import { Record, Option } from \"effect\"\n *\n * const record = { a: 1, b: 2, c: 3 }\n * const result = Record.findFirst(record, (value, key) => value > 1 && key !== \"b\")\n * console.log(result) // Option.Some([\"c\", 3])\n * ```\n *\n * @category elements\n * @since 3.14.0\n */\nexport const findFirst: {\n  /**\n   * Returns the first entry that satisfies the specified\n   * predicate, or `None` if no such entry exists.\n   *\n   * @example\n   * ```ts\n   * import { Record, Option } from \"effect\"\n   *\n   * const record = { a: 1, b: 2, c: 3 }\n   * const result = Record.findFirst(record, (value, key) => value > 1 && key !== \"b\")\n   * console.log(result) // Option.Some([\"c\", 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.14.0\n   */\n  <K extends string | symbol, V, V2 extends V>(refinement: (value: NoInfer<V>, key: NoInfer<K>) => value is V2): (self: ReadonlyRecord<K, V>) => Option.Option<[K, V2]>\n  /**\n   * Returns the first entry that satisfies the specified\n   * predicate, or `None` if no such entry exists.\n   *\n   * @example\n   * ```ts\n   * import { Record, Option } from \"effect\"\n   *\n   * const record = { a: 1, b: 2, c: 3 }\n   * const result = Record.findFirst(record, (value, key) => value > 1 && key !== \"b\")\n   * console.log(result) // Option.Some([\"c\", 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.14.0\n   */\n  <K extends string | symbol, V>(predicate: (value: NoInfer<V>, key: NoInfer<K>) => boolean): (self: ReadonlyRecord<K, V>) => Option.Option<[K, V]>\n  /**\n   * Returns the first entry that satisfies the specified\n   * predicate, or `None` if no such entry exists.\n   *\n   * @example\n   * ```ts\n   * import { Record, Option } from \"effect\"\n   *\n   * const record = { a: 1, b: 2, c: 3 }\n   * const result = Record.findFirst(record, (value, key) => value > 1 && key !== \"b\")\n   * console.log(result) // Option.Some([\"c\", 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.14.0\n   */\n  <K extends string | symbol, V, V2 extends V>(\n    self: ReadonlyRecord<K, V>,\n    refinement: (value: NoInfer<V>, key: NoInfer<K>) => value is V2\n  ): Option.Option<[K, V2]>\n  /**\n   * Returns the first entry that satisfies the specified\n   * predicate, or `None` if no such entry exists.\n   *\n   * @example\n   * ```ts\n   * import { Record, Option } from \"effect\"\n   *\n   * const record = { a: 1, b: 2, c: 3 }\n   * const result = Record.findFirst(record, (value, key) => value > 1 && key !== \"b\")\n   * console.log(result) // Option.Some([\"c\", 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.14.0\n   */\n  <K extends string | symbol, V>(\n    self: ReadonlyRecord<K, V>,\n    predicate: (value: NoInfer<V>, key: NoInfer<K>) => boolean\n  ): Option.Option<[K, V]>\n} = dual(\n  2,\n  <K extends string | symbol, V>(self: ReadonlyRecord<K, V>, f: (value: V, key: K) => boolean) => {\n    const k = keys(self)\n    for (let i = 0; i < k.length; i++) {\n      const key = k[i]\n      if (f(self[key], key)) {\n        return Option.some([key, self[key]])\n      }\n    }\n    return Option.none()\n  }\n)\n", "import * as array_ from \"../../Array.js\"\nimport type * as AST from \"../../SchemaAST.js\"\nimport * as util_ from \"./util.js\"\n\nconst getErrorMessage = (\n  reason: string,\n  details?: string,\n  path?: ReadonlyArray<PropertyKey>,\n  ast?: AST.AST\n): string => {\n  let out = reason\n\n  if (path && array_.isNonEmptyReadonlyArray(path)) {\n    out += `\\nat path: ${util_.formatPath(path)}`\n  }\n\n  if (details !== undefined) {\n    out += `\\ndetails: ${details}`\n  }\n\n  if (ast) {\n    out += `\\nschema (${ast._tag}): ${ast}`\n  }\n\n  return out\n}\n\n// ---------------------------------------------\n// generic\n// ---------------------------------------------\n\n/** @internal */\nexport const getInvalidArgumentErrorMessage = (details: string) => getErrorMessage(\"Invalid Argument\", details)\n\nconst getUnsupportedSchemaErrorMessage = (details?: string, path?: ReadonlyArray<PropertyKey>, ast?: AST.AST): string =>\n  getErrorMessage(\"Unsupported schema\", details, path, ast)\n\nconst getMissingAnnotationErrorMessage = (details?: string, path?: ReadonlyArray<PropertyKey>, ast?: AST.AST): string =>\n  getErrorMessage(\"Missing annotation\", details, path, ast)\n\n// ---------------------------------------------\n// Arbitrary\n// ---------------------------------------------\n\n/** @internal */\nexport const getArbitraryUnsupportedErrorMessage = (path: ReadonlyArray<PropertyKey>, ast: AST.AST) =>\n  getUnsupportedSchemaErrorMessage(\"Cannot build an Arbitrary for this schema\", path, ast)\n\n/** @internal */\nexport const getArbitraryMissingAnnotationErrorMessage = (\n  path: ReadonlyArray<PropertyKey>,\n  ast: AST.AST\n) =>\n  getMissingAnnotationErrorMessage(\n    `Generating an Arbitrary for this schema requires an \"arbitrary\" annotation`,\n    path,\n    ast\n  )\n\n/** @internal */\nexport const getArbitraryEmptyEnumErrorMessage = (path: ReadonlyArray<PropertyKey>) =>\n  getErrorMessage(\"Empty Enums schema\", \"Generating an Arbitrary for this schema requires at least one enum\", path)\n\n// ---------------------------------------------\n// Equivalence\n// ---------------------------------------------\n\n/** @internal */\nexport const getEquivalenceUnsupportedErrorMessage = (ast: AST.AST, path: ReadonlyArray<PropertyKey>) =>\n  getUnsupportedSchemaErrorMessage(\"Cannot build an Equivalence\", path, ast)\n\n// ---------------------------------------------\n// JSON Schema\n// ---------------------------------------------\n\n/** @internal */\nexport const getJSONSchemaMissingAnnotationErrorMessage = (\n  path: ReadonlyArray<PropertyKey>,\n  ast: AST.AST\n) =>\n  getMissingAnnotationErrorMessage(\n    `Generating a JSON Schema for this schema requires a \"jsonSchema\" annotation`,\n    path,\n    ast\n  )\n\n/** @internal */\nexport const getJSONSchemaMissingIdentifierAnnotationErrorMessage = (\n  path: ReadonlyArray<PropertyKey>,\n  ast: AST.AST\n) =>\n  getMissingAnnotationErrorMessage(\n    `Generating a JSON Schema for this schema requires an \"identifier\" annotation`,\n    path,\n    ast\n  )\n\n/** @internal */\nexport const getJSONSchemaUnsupportedPostRestElementsErrorMessage = (path: ReadonlyArray<PropertyKey>): string =>\n  getErrorMessage(\n    \"Generating a JSON Schema for post-rest elements is not currently supported. You're welcome to contribute by submitting a Pull Request\",\n    undefined,\n    path\n  )\n\n/** @internal */\nexport const getJSONSchemaUnsupportedKeyErrorMessage = (key: PropertyKey, path: ReadonlyArray<PropertyKey>): string =>\n  getErrorMessage(\"Unsupported key\", `Cannot encode ${util_.formatPropertyKey(key)} key to JSON Schema`, path)\n\n// ---------------------------------------------\n// Pretty\n// ---------------------------------------------\n\n/** @internal */\nexport const getPrettyMissingAnnotationErrorMessage = (\n  path: ReadonlyArray<PropertyKey>,\n  ast: AST.AST\n) => getMissingAnnotationErrorMessage(`Generating a Pretty for this schema requires a \"pretty\" annotation`, path, ast)\n\n/** @internal */\nexport const getPrettyNeverErrorMessage = \"Cannot pretty print a `never` value\"\n\n/** @internal */\nexport const getPrettyNoMatchingSchemaErrorMessage = (\n  actual: unknown,\n  path: ReadonlyArray<PropertyKey>,\n  ast: AST.AST\n) => getErrorMessage(\"Unexpected Error\", `Cannot find a matching schema for ${util_.formatUnknown(actual)}`, path, ast)\n\n// ---------------------------------------------\n// Schema\n// ---------------------------------------------\n\n/** @internal */\nexport const getSchemaExtendErrorMessage = (x: AST.AST, y: AST.AST, path: ReadonlyArray<PropertyKey>) =>\n  getErrorMessage(\"Unsupported schema or overlapping types\", `cannot extend ${x} with ${y}`, path)\n\n/** @internal */\nexport const getSchemaUnsupportedLiteralSpanErrorMessage = (ast: AST.AST) =>\n  getErrorMessage(\"Unsupported template literal span\", undefined, undefined, ast)\n\n// ---------------------------------------------\n// AST\n// ---------------------------------------------\n\n/** @internal */\nexport const getASTUnsupportedSchemaErrorMessage = (ast: AST.AST) =>\n  getUnsupportedSchemaErrorMessage(undefined, undefined, ast)\n\n/** @internal */\nexport const getASTUnsupportedKeySchemaErrorMessage = (ast: AST.AST) =>\n  getErrorMessage(\"Unsupported key schema\", undefined, undefined, ast)\n\n/** @internal */\nexport const getASTUnsupportedLiteralErrorMessage = (literal: AST.LiteralValue) =>\n  getErrorMessage(\"Unsupported literal\", `literal value: ${util_.formatUnknown(literal)}`)\n\n/** @internal */\nexport const getASTDuplicateIndexSignatureErrorMessage = (type: \"string\" | \"symbol\"): string =>\n  getErrorMessage(\"Duplicate index signature\", `${type} index signature`)\n\n/** @internal */\nexport const getASTIndexSignatureParameterErrorMessage = getErrorMessage(\n  \"Unsupported index signature parameter\",\n  \"An index signature parameter type must be `string`, `symbol`, a template literal type or a refinement of the previous types\"\n)\n\n/** @internal */\nexport const getASTRequiredElementFollowinAnOptionalElementErrorMessage = getErrorMessage(\n  \"Invalid element\",\n  \"A required element cannot follow an optional element. ts(1257)\"\n)\n\n/** @internal */\nexport const getASTDuplicatePropertySignatureTransformationErrorMessage = (key: PropertyKey): string =>\n  getErrorMessage(\"Duplicate property signature transformation\", `Duplicate key ${util_.formatUnknown(key)}`)\n\n/** @internal */\nexport const getASTUnsupportedRenameSchemaErrorMessage = (ast: AST.AST): string =>\n  getUnsupportedSchemaErrorMessage(undefined, undefined, ast)\n\n/** @internal */\nexport const getASTDuplicatePropertySignatureErrorMessage = (key: PropertyKey): string =>\n  getErrorMessage(\"Duplicate property signature\", `Duplicate key ${util_.formatUnknown(key)}`)\n", "import type { NonEmptyReadonlyArray } from \"../../Array.js\"\nimport type * as ParseResult from \"../../ParseResult.js\"\nimport * as Predicate from \"../../Predicate.js\"\nimport type * as AST from \"../../SchemaAST.js\"\n\n/** @internal */\nexport const getKeysForIndexSignature = (\n  input: { readonly [x: PropertyKey]: unknown },\n  parameter: AST.Parameter\n): ReadonlyArray<string> | ReadonlyArray<symbol> => {\n  switch (parameter._tag) {\n    case \"StringKeyword\":\n    case \"TemplateLiteral\":\n      return Object.keys(input)\n    case \"SymbolKeyword\":\n      return Object.getOwnPropertySymbols(input)\n    case \"Refinement\":\n      return getKeysForIndexSignature(input, parameter.from)\n  }\n}\n\n/** @internal */\nexport const memoizeThunk = <A>(f: () => A): () => A => {\n  let done = false\n  let a: A\n  return () => {\n    if (done) {\n      return a\n    }\n    a = f()\n    done = true\n    return a\n  }\n}\n\n/** @internal */\nexport const formatDate = (date: Date): string => {\n  try {\n    return date.toISOString()\n  } catch {\n    return String(date)\n  }\n}\n\nconst CIRCULAR = \"[Circular]\"\n\n/** @internal */\nexport function formatUnknown(input: unknown, whitespace: number | string | undefined = 0): string {\n  const seen = new WeakSet<object>()\n  const gap = !whitespace ? \"\" : (typeof whitespace === \"number\" ? \" \".repeat(whitespace) : whitespace)\n  const ind = (d: number) => gap.repeat(d)\n\n  const safeToString = (x: any): string => {\n    try {\n      const s = x.toString()\n      return typeof s === \"string\" ? s : String(s)\n    } catch {\n      return \"[toString threw]\"\n    }\n  }\n\n  const wrap = (v: unknown, body: string): string => {\n    const ctor = (v as any)?.constructor\n    return ctor && ctor !== Object.prototype.constructor && ctor.name ? `${ctor.name}(${body})` : body\n  }\n\n  const ownKeys = (o: object): Array<PropertyKey> => {\n    try {\n      return Reflect.ownKeys(o)\n    } catch {\n      return [\"[ownKeys threw]\"]\n    }\n  }\n\n  function go(v: unknown, d = 0): string {\n    if (Array.isArray(v)) {\n      if (seen.has(v)) return CIRCULAR\n      seen.add(v)\n      if (!gap || v.length <= 1) return `[${v.map((x) => go(x, d)).join(\",\")}]`\n      const inner = v.map((x) => go(x, d + 1)).join(\",\\n\" + ind(d + 1))\n      return `[\\n${ind(d + 1)}${inner}\\n${ind(d)}]`\n    }\n\n    if (Predicate.isDate(v)) return formatDate(v)\n\n    if (\n      Predicate.hasProperty(v, \"toString\") &&\n      Predicate.isFunction((v as any)[\"toString\"]) &&\n      (v as any)[\"toString\"] !== Object.prototype.toString\n    ) return safeToString(v)\n\n    if (Predicate.isString(v)) return JSON.stringify(v)\n\n    if (\n      Predicate.isNumber(v) ||\n      v == null ||\n      Predicate.isBoolean(v) ||\n      Predicate.isSymbol(v)\n    ) return String(v)\n\n    if (Predicate.isBigInt(v)) return String(v) + \"n\"\n\n    if (v instanceof Set || v instanceof Map) {\n      if (seen.has(v)) return CIRCULAR\n      seen.add(v)\n      return `${v.constructor.name}(${go(Array.from(v), d)})`\n    }\n\n    if (Predicate.isObject(v)) {\n      if (seen.has(v)) return CIRCULAR\n      seen.add(v)\n      const keys = ownKeys(v)\n      if (!gap || keys.length <= 1) {\n        const body = `{${keys.map((k) => `${formatPropertyKey(k)}:${go((v as any)[k], d)}`).join(\",\")}}`\n        return wrap(v, body)\n      }\n      const body = `{\\n${\n        keys.map((k) => `${ind(d + 1)}${formatPropertyKey(k)}: ${go((v as any)[k], d + 1)}`).join(\",\\n\")\n      }\\n${ind(d)}}`\n      return wrap(v, body)\n    }\n\n    return String(v)\n  }\n\n  return go(input, 0)\n}\n\n/** @internal */\nexport function formatPropertyKey(name: PropertyKey): string {\n  return Predicate.isString(name) ? JSON.stringify(name) : String(name)\n}\n\n/** @internal */\nexport type SingleOrArray<A> = A | ReadonlyArray<A>\n\n/** @internal */\nexport const isNonEmpty = <A>(x: ParseResult.SingleOrNonEmpty<A>): x is NonEmptyReadonlyArray<A> => Array.isArray(x)\n\n/** @internal */\nexport const isSingle = <A>(x: A | ReadonlyArray<A>): x is A => !Array.isArray(x)\n\n/** @internal */\nexport const formatPathKey = (key: PropertyKey): string => `[${formatPropertyKey(key)}]`\n\n/** @internal */\nexport const formatPath = (path: ParseResult.Path): string =>\n  isNonEmpty(path) ? path.map(formatPathKey).join(\"\") : formatPathKey(path)\n", "import type * as Schema from \"../../Schema.js\"\n\n/** @internal */\nexport const DateFromSelfSchemaId: Schema.DateFromSelfSchemaId = Symbol.for(\n  \"effect/SchemaId/DateFromSelf\"\n) as Schema.DateFromSelfSchemaId\n\n/** @internal */\nexport const GreaterThanSchemaId: Schema.GreaterThanSchemaId = Symbol.for(\n  \"effect/SchemaId/GreaterThan\"\n) as Schema.GreaterThanSchemaId\n\n/** @internal */\nexport const GreaterThanOrEqualToSchemaId: Schema.GreaterThanOrEqualToSchemaId = Symbol.for(\n  \"effect/SchemaId/GreaterThanOrEqualTo\"\n) as Schema.GreaterThanOrEqualToSchemaId\n\n/** @internal */\nexport const LessThanSchemaId: Schema.LessThanSchemaId = Symbol.for(\n  \"effect/SchemaId/LessThan\"\n) as Schema.LessThanSchemaId\n\n/** @internal */\nexport const LessThanOrEqualToSchemaId: Schema.LessThanOrEqualToSchemaId = Symbol.for(\n  \"effect/SchemaId/LessThanOrEqualTo\"\n) as Schema.LessThanOrEqualToSchemaId\n\n/** @internal */\nexport const IntSchemaId: Schema.IntSchemaId = Symbol.for(\n  \"effect/SchemaId/Int\"\n) as Schema.IntSchemaId\n\n/** @internal */\nexport const NonNaNSchemaId: Schema.NonNaNSchemaId = Symbol.for(\n  \"effect/SchemaId/NonNaN\"\n) as Schema.NonNaNSchemaId\n\n/** @internal */\nexport const FiniteSchemaId: Schema.FiniteSchemaId = Symbol.for(\n  \"effect/SchemaId/Finite\"\n) as Schema.FiniteSchemaId\n\n/** @internal */\nexport const JsonNumberSchemaId: Schema.JsonNumberSchemaId = Symbol.for(\n  \"effect/SchemaId/JsonNumber\"\n) as Schema.JsonNumberSchemaId\n\n/** @internal */\nexport const BetweenSchemaId: Schema.BetweenSchemaId = Symbol.for(\n  \"effect/SchemaId/Between\"\n) as Schema.BetweenSchemaId\n\n/** @internal */\nexport const GreaterThanBigintSchemaId: Schema.GreaterThanBigIntSchemaId = Symbol.for(\n  \"effect/SchemaId/GreaterThanBigint\"\n) as Schema.GreaterThanBigIntSchemaId\n\n/** @internal */\nexport const GreaterThanOrEqualToBigIntSchemaId: Schema.GreaterThanOrEqualToBigIntSchemaId = Symbol.for(\n  \"effect/SchemaId/GreaterThanOrEqualToBigint\"\n) as Schema.GreaterThanOrEqualToBigIntSchemaId\n\n/** @internal */\nexport const LessThanBigIntSchemaId: Schema.LessThanBigIntSchemaId = Symbol.for(\n  \"effect/SchemaId/LessThanBigint\"\n) as Schema.LessThanBigIntSchemaId\n\n/** @internal */\nexport const LessThanOrEqualToBigIntSchemaId: Schema.LessThanOrEqualToBigIntSchemaId = Symbol.for(\n  \"effect/SchemaId/LessThanOrEqualToBigint\"\n) as Schema.LessThanOrEqualToBigIntSchemaId\n\n/** @internal */\nexport const BetweenBigintSchemaId: Schema.BetweenBigIntSchemaId = Symbol.for(\n  \"effect/SchemaId/BetweenBigint\"\n) as Schema.BetweenBigIntSchemaId\n\n/** @internal */\nexport const MinLengthSchemaId: Schema.MinLengthSchemaId = Symbol.for(\n  \"effect/SchemaId/MinLength\"\n) as Schema.MinLengthSchemaId\n\n/** @internal */\nexport const MaxLengthSchemaId: Schema.MaxLengthSchemaId = Symbol.for(\n  \"effect/SchemaId/MaxLength\"\n) as Schema.MaxLengthSchemaId\n\n/** @internal */\nexport const LengthSchemaId: Schema.LengthSchemaId = Symbol.for(\n  \"effect/SchemaId/Length\"\n) as Schema.LengthSchemaId\n\n/** @internal */\nexport const MinItemsSchemaId: Schema.MinItemsSchemaId = Symbol.for(\n  \"effect/SchemaId/MinItems\"\n) as Schema.MinItemsSchemaId\n\n/** @internal */\nexport const MaxItemsSchemaId: Schema.MaxItemsSchemaId = Symbol.for(\n  \"effect/SchemaId/MaxItems\"\n) as Schema.MaxItemsSchemaId\n\n/** @internal */\nexport const ItemsCountSchemaId: Schema.ItemsCountSchemaId = Symbol.for(\n  \"effect/SchemaId/ItemsCount\"\n) as Schema.ItemsCountSchemaId\n", "/**\n * @since 3.10.0\n */\n\nimport * as Arr from \"./Array.js\"\nimport type { Effect } from \"./Effect.js\"\nimport type { Equivalence } from \"./Equivalence.js\"\nimport { dual, identity } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport * as errors_ from \"./internal/schema/errors.js\"\nimport * as util_ from \"./internal/schema/util.js\"\nimport * as Number from \"./Number.js\"\nimport * as Option from \"./Option.js\"\nimport * as Order from \"./Order.js\"\nimport type { ParseIssue } from \"./ParseResult.js\"\nimport * as Predicate from \"./Predicate.js\"\nimport * as regexp from \"./RegExp.js\"\nimport type { Concurrency } from \"./Types.js\"\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport type AST =\n  | Declaration\n  | Literal\n  | UniqueSymbol\n  | UndefinedKeyword\n  | VoidKeyword\n  | NeverKeyword\n  | UnknownKeyword\n  | AnyKeyword\n  | StringKeyword\n  | NumberKeyword\n  | BooleanKeyword\n  | BigIntKeyword\n  | SymbolKeyword\n  | ObjectKeyword\n  | Enums\n  | TemplateLiteral\n  // possible transformations\n  | Refinement\n  | TupleType\n  | TypeLiteral\n  | Union\n  | Suspend\n  // transformations\n  | Transformation\n\n// -------------------------------------------------------------------------------------\n// annotations\n// -------------------------------------------------------------------------------------\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type BrandAnnotation = Arr.NonEmptyReadonlyArray<string | symbol>\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const BrandAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Brand\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type SchemaIdAnnotation = string | symbol\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const SchemaIdAnnotationId: unique symbol = Symbol.for(\"effect/annotation/SchemaId\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type MessageAnnotation = (issue: ParseIssue) => string | Effect<string> | {\n  readonly message: string | Effect<string>\n  readonly override: boolean\n}\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const MessageAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Message\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type MissingMessageAnnotation = () => string | Effect<string>\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const MissingMessageAnnotationId: unique symbol = Symbol.for(\"effect/annotation/MissingMessage\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type IdentifierAnnotation = string\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const IdentifierAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Identifier\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type TitleAnnotation = string\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const TitleAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Title\")\n\n/** @internal */\nexport const AutoTitleAnnotationId: unique symbol = Symbol.for(\"effect/annotation/AutoTitle\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type DescriptionAnnotation = string\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const DescriptionAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Description\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type ExamplesAnnotation<A> = Arr.NonEmptyReadonlyArray<A>\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const ExamplesAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Examples\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type DefaultAnnotation<A> = A\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const DefaultAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Default\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type JSONSchemaAnnotation = object\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const JSONSchemaAnnotationId: unique symbol = Symbol.for(\"effect/annotation/JSONSchema\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const ArbitraryAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Arbitrary\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const PrettyAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Pretty\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type EquivalenceAnnotation<A, TypeParameters extends ReadonlyArray<any> = readonly []> = (\n  ...equivalences: { readonly [K in keyof TypeParameters]: Equivalence<TypeParameters[K]> }\n) => Equivalence<A>\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const EquivalenceAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Equivalence\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type DocumentationAnnotation = string\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const DocumentationAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Documentation\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type ConcurrencyAnnotation = Concurrency | undefined\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const ConcurrencyAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Concurrency\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type BatchingAnnotation = boolean | \"inherit\" | undefined\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const BatchingAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Batching\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type ParseIssueTitleAnnotation = (issue: ParseIssue) => string | undefined\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const ParseIssueTitleAnnotationId: unique symbol = Symbol.for(\"effect/annotation/ParseIssueTitle\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const ParseOptionsAnnotationId: unique symbol = Symbol.for(\"effect/annotation/ParseOptions\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type DecodingFallbackAnnotation<A> = (issue: ParseIssue) => Effect<A, ParseIssue>\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const DecodingFallbackAnnotationId: unique symbol = Symbol.for(\"effect/annotation/DecodingFallback\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const SurrogateAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Surrogate\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type SurrogateAnnotation = AST\n\n/** @internal */\nexport const StableFilterAnnotationId: unique symbol = Symbol.for(\"effect/annotation/StableFilter\")\n\n/**\n * A stable filter consistently applies fixed validation rules, such as\n * 'minItems', 'maxItems', and 'itemsCount', to ensure array length complies\n * with set criteria regardless of the input data's content.\n *\n * @internal\n */\nexport type StableFilterAnnotation = boolean\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport interface Annotations {\n  readonly [_: string]: unknown\n  readonly [_: symbol]: unknown\n}\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport interface Annotated {\n  readonly annotations: Annotations\n}\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getAnnotation: {\n  /**\n   * @category annotations\n   * @since 3.10.0\n   */\n  <A>(key: symbol): (annotated: Annotated) => Option.Option<A>\n  /**\n   * @category annotations\n   * @since 3.10.0\n   */\n  <A>(annotated: Annotated, key: symbol): Option.Option<A>\n} = dual(\n  2,\n  <A>(annotated: Annotated, key: symbol): Option.Option<A> =>\n    Object.prototype.hasOwnProperty.call(annotated.annotations, key) ?\n      Option.some(annotated.annotations[key] as any) :\n      Option.none()\n)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getBrandAnnotation = getAnnotation<BrandAnnotation>(BrandAnnotationId)\n\n/**\n * @category annotations\n * @since 3.14.2\n */\nexport const getSchemaIdAnnotation = getAnnotation<SchemaIdAnnotation>(SchemaIdAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getMessageAnnotation = getAnnotation<MessageAnnotation>(MessageAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getMissingMessageAnnotation = getAnnotation<MissingMessageAnnotation>(MissingMessageAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getTitleAnnotation = getAnnotation<TitleAnnotation>(TitleAnnotationId)\n\n/** @internal */\nexport const getAutoTitleAnnotation = getAnnotation<TitleAnnotation>(AutoTitleAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getIdentifierAnnotation = getAnnotation<IdentifierAnnotation>(IdentifierAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getDescriptionAnnotation = getAnnotation<DescriptionAnnotation>(DescriptionAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getExamplesAnnotation = getAnnotation<ExamplesAnnotation<unknown>>(ExamplesAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getDefaultAnnotation = getAnnotation<DefaultAnnotation<unknown>>(DefaultAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getJSONSchemaAnnotation = getAnnotation<JSONSchemaAnnotation>(JSONSchemaAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getDocumentationAnnotation = getAnnotation<DocumentationAnnotation>(DocumentationAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getConcurrencyAnnotation = getAnnotation<ConcurrencyAnnotation>(ConcurrencyAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getBatchingAnnotation = getAnnotation<BatchingAnnotation>(BatchingAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getParseIssueTitleAnnotation = getAnnotation<ParseIssueTitleAnnotation>(ParseIssueTitleAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getParseOptionsAnnotation = getAnnotation<ParseOptions>(ParseOptionsAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getDecodingFallbackAnnotation = getAnnotation<DecodingFallbackAnnotation<unknown>>(\n  DecodingFallbackAnnotationId\n)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getSurrogateAnnotation = getAnnotation<SurrogateAnnotation>(SurrogateAnnotationId)\n\nconst getStableFilterAnnotation = getAnnotation<StableFilterAnnotation>(StableFilterAnnotationId)\n\n/** @internal */\nexport const hasStableFilter = (annotated: Annotated) =>\n  Option.exists(getStableFilterAnnotation(annotated), (b) => b === true)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const JSONIdentifierAnnotationId: unique symbol = Symbol.for(\"effect/annotation/JSONIdentifier\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getJSONIdentifierAnnotation = getAnnotation<IdentifierAnnotation>(JSONIdentifierAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getJSONIdentifier = (annotated: Annotated) =>\n  Option.orElse(getJSONIdentifierAnnotation(annotated), () => getIdentifierAnnotation(annotated))\n\n// -------------------------------------------------------------------------------------\n// schema ids\n// -------------------------------------------------------------------------------------\n\n/**\n * @category schema id\n * @since 3.10.0\n */\nexport const ParseJsonSchemaId: unique symbol = Symbol.for(\"effect/schema/ParseJson\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Declaration implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Declaration\"\n  constructor(\n    readonly typeParameters: ReadonlyArray<AST>,\n    readonly decodeUnknown: (\n      ...typeParameters: ReadonlyArray<AST>\n    ) => (input: unknown, options: ParseOptions, self: Declaration) => Effect<any, ParseIssue, any>,\n    readonly encodeUnknown: (\n      ...typeParameters: ReadonlyArray<AST>\n    ) => (input: unknown, options: ParseOptions, self: Declaration) => Effect<any, ParseIssue, any>,\n    readonly annotations: Annotations = {}\n  ) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(getExpected(this), () => \"<declaration schema>\")\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      typeParameters: this.typeParameters.map((ast) => ast.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\nconst createASTGuard = <T extends AST[\"_tag\"]>(tag: T) => (ast: AST): ast is Extract<AST, { _tag: T }> =>\n  ast._tag === tag\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isDeclaration: (ast: AST) => ast is Declaration = createASTGuard(\"Declaration\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport type LiteralValue = string | number | boolean | null | bigint\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Literal implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Literal\"\n  constructor(readonly literal: LiteralValue, readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(getExpected(this), () => util_.formatUnknown(this.literal))\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      literal: Predicate.isBigInt(this.literal) ? String(this.literal) : this.literal,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isLiteral: (ast: AST) => ast is Literal = createASTGuard(\"Literal\")\n\nconst $null = new Literal(null)\n\nexport {\n  /**\n   * @category constructors\n   * @since 3.10.0\n   */\n  $null as null\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class UniqueSymbol implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"UniqueSymbol\"\n  constructor(readonly symbol: symbol, readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(getExpected(this), () => util_.formatUnknown(this.symbol))\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      symbol: String(this.symbol),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isUniqueSymbol: (ast: AST) => ast is UniqueSymbol = createASTGuard(\"UniqueSymbol\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class UndefinedKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"UndefinedKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const undefinedKeyword: UndefinedKeyword = new UndefinedKeyword({\n  [TitleAnnotationId]: \"undefined\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isUndefinedKeyword: (ast: AST) => ast is UndefinedKeyword = createASTGuard(\"UndefinedKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class VoidKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"VoidKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const voidKeyword: VoidKeyword = new VoidKeyword({\n  [TitleAnnotationId]: \"void\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isVoidKeyword: (ast: AST) => ast is VoidKeyword = createASTGuard(\"VoidKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class NeverKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"NeverKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const neverKeyword: NeverKeyword = new NeverKeyword({\n  [TitleAnnotationId]: \"never\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isNeverKeyword: (ast: AST) => ast is NeverKeyword = createASTGuard(\"NeverKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class UnknownKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"UnknownKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const unknownKeyword: UnknownKeyword = new UnknownKeyword({\n  [TitleAnnotationId]: \"unknown\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isUnknownKeyword: (ast: AST) => ast is UnknownKeyword = createASTGuard(\"UnknownKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class AnyKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"AnyKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const anyKeyword: AnyKeyword = new AnyKeyword({\n  [TitleAnnotationId]: \"any\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isAnyKeyword: (ast: AST) => ast is AnyKeyword = createASTGuard(\"AnyKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class StringKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"StringKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const stringKeyword: StringKeyword = new StringKeyword({\n  [TitleAnnotationId]: \"string\",\n  [DescriptionAnnotationId]: \"a string\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isStringKeyword: (ast: AST) => ast is StringKeyword = createASTGuard(\"StringKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class NumberKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"NumberKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const numberKeyword: NumberKeyword = new NumberKeyword({\n  [TitleAnnotationId]: \"number\",\n  [DescriptionAnnotationId]: \"a number\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isNumberKeyword: (ast: AST) => ast is NumberKeyword = createASTGuard(\"NumberKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class BooleanKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"BooleanKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const booleanKeyword: BooleanKeyword = new BooleanKeyword({\n  [TitleAnnotationId]: \"boolean\",\n  [DescriptionAnnotationId]: \"a boolean\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isBooleanKeyword: (ast: AST) => ast is BooleanKeyword = createASTGuard(\"BooleanKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class BigIntKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"BigIntKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const bigIntKeyword: BigIntKeyword = new BigIntKeyword({\n  [TitleAnnotationId]: \"bigint\",\n  [DescriptionAnnotationId]: \"a bigint\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isBigIntKeyword: (ast: AST) => ast is BigIntKeyword = createASTGuard(\"BigIntKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class SymbolKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"SymbolKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const symbolKeyword: SymbolKeyword = new SymbolKeyword({\n  [TitleAnnotationId]: \"symbol\",\n  [DescriptionAnnotationId]: \"a symbol\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isSymbolKeyword: (ast: AST) => ast is SymbolKeyword = createASTGuard(\"SymbolKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class ObjectKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"ObjectKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const objectKeyword: ObjectKeyword = new ObjectKeyword({\n  [TitleAnnotationId]: \"object\",\n  [DescriptionAnnotationId]: \"an object in the TypeScript meaning, i.e. the `object` type\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isObjectKeyword: (ast: AST) => ast is ObjectKeyword = createASTGuard(\"ObjectKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Enums implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Enums\"\n  constructor(\n    readonly enums: ReadonlyArray<readonly [string, string | number]>,\n    readonly annotations: Annotations = {}\n  ) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(\n      getExpected(this),\n      () => `<enum ${this.enums.length} value(s): ${this.enums.map(([_, value]) => JSON.stringify(value)).join(\" | \")}>`\n    )\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      enums: this.enums,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isEnums: (ast: AST) => ast is Enums = createASTGuard(\"Enums\")\n\ntype TemplateLiteralSpanBaseType = StringKeyword | NumberKeyword | Literal | TemplateLiteral\n\ntype TemplateLiteralSpanType = TemplateLiteralSpanBaseType | Union<TemplateLiteralSpanType>\n\nconst isTemplateLiteralSpanType = (ast: AST): ast is TemplateLiteralSpanType => {\n  switch (ast._tag) {\n    case \"Literal\":\n    case \"NumberKeyword\":\n    case \"StringKeyword\":\n    case \"TemplateLiteral\":\n      return true\n    case \"Union\":\n      return ast.types.every(isTemplateLiteralSpanType)\n  }\n  return false\n}\n\nconst templateLiteralSpanUnionTypeToString = (type: TemplateLiteralSpanType): string => {\n  switch (type._tag) {\n    case \"Literal\":\n      return JSON.stringify(String(type.literal))\n    case \"StringKeyword\":\n      return \"string\"\n    case \"NumberKeyword\":\n      return \"number\"\n    case \"TemplateLiteral\":\n      return String(type)\n    case \"Union\":\n      return type.types.map(templateLiteralSpanUnionTypeToString).join(\" | \")\n  }\n}\n\nconst templateLiteralSpanTypeToString = (type: TemplateLiteralSpanType): string => {\n  switch (type._tag) {\n    case \"Literal\":\n      return String(type.literal)\n    case \"StringKeyword\":\n      return \"${string}\"\n    case \"NumberKeyword\":\n      return \"${number}\"\n    case \"TemplateLiteral\":\n      return \"${\" + String(type) + \"}\"\n    case \"Union\":\n      return \"${\" + type.types.map(templateLiteralSpanUnionTypeToString).join(\" | \") + \"}\"\n  }\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class TemplateLiteralSpan {\n  /**\n   * @since 3.10.0\n   */\n  readonly type: TemplateLiteralSpanType\n  constructor(type: AST, readonly literal: string) {\n    if (isTemplateLiteralSpanType(type)) {\n      this.type = type\n    } else {\n      throw new Error(errors_.getSchemaUnsupportedLiteralSpanErrorMessage(type))\n    }\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return templateLiteralSpanTypeToString(this.type) + this.literal\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      type: this.type.toJSON(),\n      literal: this.literal\n    }\n  }\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class TemplateLiteral implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"TemplateLiteral\"\n  constructor(\n    readonly head: string,\n    readonly spans: Arr.NonEmptyReadonlyArray<TemplateLiteralSpan>,\n    readonly annotations: Annotations = {}\n  ) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(getExpected(this), () => formatTemplateLiteral(this))\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      head: this.head,\n      spans: this.spans.map((span) => span.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\nconst formatTemplateLiteral = (ast: TemplateLiteral): string =>\n  \"`\" + ast.head + ast.spans.map(String).join(\"\") +\n  \"`\"\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isTemplateLiteral: (ast: AST) => ast is TemplateLiteral = createASTGuard(\"TemplateLiteral\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Type implements Annotated {\n  constructor(\n    readonly type: AST,\n    readonly annotations: Annotations = {}\n  ) {}\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      type: this.type.toJSON(),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return String(this.type)\n  }\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class OptionalType extends Type {\n  constructor(\n    type: AST,\n    readonly isOptional: boolean,\n    annotations: Annotations = {}\n  ) {\n    super(type, annotations)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      type: this.type.toJSON(),\n      isOptional: this.isOptional,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return String(this.type) + (this.isOptional ? \"?\" : \"\")\n  }\n}\n\nconst getRestASTs = (rest: ReadonlyArray<Type>): ReadonlyArray<AST> => rest.map((annotatedAST) => annotatedAST.type)\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class TupleType implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"TupleType\"\n  constructor(\n    readonly elements: ReadonlyArray<OptionalType>,\n    readonly rest: ReadonlyArray<Type>,\n    readonly isReadonly: boolean,\n    readonly annotations: Annotations = {}\n  ) {\n    let hasOptionalElement = false\n    let hasIllegalRequiredElement = false\n    for (const e of elements) {\n      if (e.isOptional) {\n        hasOptionalElement = true\n      } else if (hasOptionalElement) {\n        hasIllegalRequiredElement = true\n        break\n      }\n    }\n    if (hasIllegalRequiredElement || (hasOptionalElement && rest.length > 1)) {\n      throw new Error(errors_.getASTRequiredElementFollowinAnOptionalElementErrorMessage)\n    }\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(getExpected(this), () => formatTuple(this))\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      elements: this.elements.map((e) => e.toJSON()),\n      rest: this.rest.map((ast) => ast.toJSON()),\n      isReadonly: this.isReadonly,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\nconst formatTuple = (ast: TupleType): string => {\n  const formattedElements = ast.elements.map(String)\n    .join(\", \")\n  return Arr.matchLeft(ast.rest, {\n    onEmpty: () => `readonly [${formattedElements}]`,\n    onNonEmpty: (head, tail) => {\n      const formattedHead = String(head)\n      const wrappedHead = formattedHead.includes(\" | \") ? `(${formattedHead})` : formattedHead\n\n      if (tail.length > 0) {\n        const formattedTail = tail.map(String).join(\", \")\n        if (ast.elements.length > 0) {\n          return `readonly [${formattedElements}, ...${wrappedHead}[], ${formattedTail}]`\n        } else {\n          return `readonly [...${wrappedHead}[], ${formattedTail}]`\n        }\n      } else {\n        if (ast.elements.length > 0) {\n          return `readonly [${formattedElements}, ...${wrappedHead}[]]`\n        } else {\n          return `ReadonlyArray<${formattedHead}>`\n        }\n      }\n    }\n  })\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isTupleType: (ast: AST) => ast is TupleType = createASTGuard(\"TupleType\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class PropertySignature extends OptionalType {\n  constructor(\n    readonly name: PropertyKey,\n    type: AST,\n    isOptional: boolean,\n    readonly isReadonly: boolean,\n    annotations?: Annotations\n  ) {\n    super(type, isOptional, annotations)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString(): string {\n    return (this.isReadonly ? \"readonly \" : \"\") + String(this.name) + (this.isOptional ? \"?\" : \"\") + \": \" +\n      this.type\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      name: String(this.name),\n      type: this.type.toJSON(),\n      isOptional: this.isOptional,\n      isReadonly: this.isReadonly,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @since 3.10.0\n */\nexport type Parameter = StringKeyword | SymbolKeyword | TemplateLiteral | Refinement<Parameter>\n\n/**\n * @since 3.10.0\n */\nexport const isParameter = (ast: AST): ast is Parameter => {\n  switch (ast._tag) {\n    case \"StringKeyword\":\n    case \"SymbolKeyword\":\n    case \"TemplateLiteral\":\n      return true\n    case \"Refinement\":\n      return isParameter(ast.from)\n  }\n  return false\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class IndexSignature {\n  /**\n   * @since 3.10.0\n   */\n  readonly parameter: Parameter\n  constructor(\n    parameter: AST,\n    readonly type: AST,\n    readonly isReadonly: boolean\n  ) {\n    if (isParameter(parameter)) {\n      this.parameter = parameter\n    } else {\n      throw new Error(errors_.getASTIndexSignatureParameterErrorMessage)\n    }\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString(): string {\n    return (this.isReadonly ? \"readonly \" : \"\") + `[x: ${this.parameter}]: ${this.type}`\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      parameter: this.parameter.toJSON(),\n      type: this.type.toJSON(),\n      isReadonly: this.isReadonly\n    }\n  }\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class TypeLiteral implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"TypeLiteral\"\n  /**\n   * @since 3.10.0\n   */\n  readonly propertySignatures: ReadonlyArray<PropertySignature>\n  /**\n   * @since 3.10.0\n   */\n  readonly indexSignatures: ReadonlyArray<IndexSignature>\n  constructor(\n    propertySignatures: ReadonlyArray<PropertySignature>,\n    indexSignatures: ReadonlyArray<IndexSignature>,\n    readonly annotations: Annotations = {}\n  ) {\n    // check for duplicate property signatures\n    const keys: Record<PropertyKey, null> = {}\n    for (let i = 0; i < propertySignatures.length; i++) {\n      const name = propertySignatures[i].name\n      if (Object.prototype.hasOwnProperty.call(keys, name)) {\n        throw new Error(errors_.getASTDuplicatePropertySignatureErrorMessage(name))\n      }\n      keys[name] = null\n    }\n    // check for duplicate index signatures\n    const parameters = {\n      string: false,\n      symbol: false\n    }\n    for (let i = 0; i < indexSignatures.length; i++) {\n      const encodedParameter = getEncodedParameter(indexSignatures[i].parameter)\n      if (isStringKeyword(encodedParameter)) {\n        if (parameters.string) {\n          throw new Error(errors_.getASTDuplicateIndexSignatureErrorMessage(\"string\"))\n        }\n        parameters.string = true\n      } else if (isSymbolKeyword(encodedParameter)) {\n        if (parameters.symbol) {\n          throw new Error(errors_.getASTDuplicateIndexSignatureErrorMessage(\"symbol\"))\n        }\n        parameters.symbol = true\n      }\n    }\n\n    this.propertySignatures = propertySignatures\n    this.indexSignatures = indexSignatures\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(getExpected(this), () => formatTypeLiteral(this))\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      propertySignatures: this.propertySignatures.map((ps) => ps.toJSON()),\n      indexSignatures: this.indexSignatures.map((ps) => ps.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\nconst formatIndexSignatures = (iss: ReadonlyArray<IndexSignature>): string => iss.map(String).join(\"; \")\n\nconst formatTypeLiteral = (ast: TypeLiteral): string => {\n  if (ast.propertySignatures.length > 0) {\n    const pss = ast.propertySignatures.map(String).join(\"; \")\n    if (ast.indexSignatures.length > 0) {\n      return `{ ${pss}; ${formatIndexSignatures(ast.indexSignatures)} }`\n    } else {\n      return `{ ${pss} }`\n    }\n  } else {\n    if (ast.indexSignatures.length > 0) {\n      return `{ ${formatIndexSignatures(ast.indexSignatures)} }`\n    } else {\n      return \"{}\"\n    }\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isTypeLiteral: (ast: AST) => ast is TypeLiteral = createASTGuard(\"TypeLiteral\")\n\n/**\n * @since 3.10.0\n */\nexport type Members<A> = readonly [A, A, ...Array<A>]\n\nconst sortCandidates = Arr.sort(\n  Order.mapInput(Number.Order, (ast: AST) => {\n    switch (ast._tag) {\n      case \"AnyKeyword\":\n        return 0\n      case \"UnknownKeyword\":\n        return 1\n      case \"ObjectKeyword\":\n        return 2\n      case \"StringKeyword\":\n      case \"NumberKeyword\":\n      case \"BooleanKeyword\":\n      case \"BigIntKeyword\":\n      case \"SymbolKeyword\":\n        return 3\n    }\n    return 4\n  })\n)\n\nconst literalMap = {\n  string: \"StringKeyword\",\n  number: \"NumberKeyword\",\n  boolean: \"BooleanKeyword\",\n  bigint: \"BigIntKeyword\"\n} as const\n\n/** @internal */\nexport const flatten = (candidates: ReadonlyArray<AST>): Array<AST> =>\n  Arr.flatMap(candidates, (ast) => isUnion(ast) ? flatten(ast.types) : [ast])\n\n/** @internal */\nexport const unify = (candidates: ReadonlyArray<AST>): Array<AST> => {\n  const cs = sortCandidates(candidates)\n  const out: Array<AST> = []\n  const uniques: { [K in AST[\"_tag\"] | \"{}\"]?: AST } = {}\n  const literals: Array<LiteralValue | symbol> = []\n  for (const ast of cs) {\n    switch (ast._tag) {\n      case \"NeverKeyword\":\n        break\n      case \"AnyKeyword\":\n        return [anyKeyword]\n      case \"UnknownKeyword\":\n        return [unknownKeyword]\n      // uniques\n      case \"ObjectKeyword\":\n      case \"UndefinedKeyword\":\n      case \"VoidKeyword\":\n      case \"StringKeyword\":\n      case \"NumberKeyword\":\n      case \"BooleanKeyword\":\n      case \"BigIntKeyword\":\n      case \"SymbolKeyword\": {\n        if (!uniques[ast._tag]) {\n          uniques[ast._tag] = ast\n          out.push(ast)\n        }\n        break\n      }\n      case \"Literal\": {\n        const type = typeof ast.literal\n        switch (type) {\n          case \"string\":\n          case \"number\":\n          case \"bigint\":\n          case \"boolean\": {\n            const _tag = literalMap[type]\n            if (!uniques[_tag] && !literals.includes(ast.literal)) {\n              literals.push(ast.literal)\n              out.push(ast)\n            }\n            break\n          }\n          // null\n          case \"object\": {\n            if (!literals.includes(ast.literal)) {\n              literals.push(ast.literal)\n              out.push(ast)\n            }\n            break\n          }\n        }\n        break\n      }\n      case \"UniqueSymbol\": {\n        if (!uniques[\"SymbolKeyword\"] && !literals.includes(ast.symbol)) {\n          literals.push(ast.symbol)\n          out.push(ast)\n        }\n        break\n      }\n      case \"TupleType\": {\n        if (!uniques[\"ObjectKeyword\"]) {\n          out.push(ast)\n        }\n        break\n      }\n      case \"TypeLiteral\": {\n        if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {\n          if (!uniques[\"{}\"]) {\n            uniques[\"{}\"] = ast\n            out.push(ast)\n          }\n        } else if (!uniques[\"ObjectKeyword\"]) {\n          out.push(ast)\n        }\n        break\n      }\n      default:\n        out.push(ast)\n    }\n  }\n  return out\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Union<M extends AST = AST> implements Annotated {\n  static make = (types: ReadonlyArray<AST>, annotations?: Annotations): AST => {\n    return isMembers(types) ? new Union(types, annotations) : types.length === 1 ? types[0] : neverKeyword\n  }\n  /** @internal */\n  static unify = (candidates: ReadonlyArray<AST>, annotations?: Annotations): AST => {\n    return Union.make(unify(flatten(candidates)), annotations)\n  }\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Union\"\n  private constructor(readonly types: Members<M>, readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(getExpected(this), () => this.types.map(String).join(\" | \"))\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      types: this.types.map((ast) => ast.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/** @internal */\nexport const mapMembers = <A, B>(members: Members<A>, f: (a: A) => B): Members<B> => members.map(f) as any\n\n/** @internal */\nexport const isMembers = <A>(as: ReadonlyArray<A>): as is Members<A> => as.length > 1\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isUnion: (ast: AST) => ast is Union = createASTGuard(\"Union\")\n\nconst toJSONMemoMap = globalValue(\n  Symbol.for(\"effect/Schema/AST/toJSONMemoMap\"),\n  () => new WeakMap<AST, object>()\n)\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Suspend implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Suspend\"\n  constructor(readonly f: () => AST, readonly annotations: Annotations = {}) {\n    this.f = util_.memoizeThunk(f)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return getExpected(this).pipe(\n      Option.orElse(() =>\n        Option.flatMap(\n          Option.liftThrowable(this.f)(),\n          (ast) => getExpected(ast)\n        )\n      ),\n      Option.getOrElse(() => \"<suspended schema>\")\n    )\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    const ast = this.f()\n    let out = toJSONMemoMap.get(ast)\n    if (out) {\n      return out\n    }\n    toJSONMemoMap.set(ast, { _tag: this._tag })\n    out = {\n      _tag: this._tag,\n      ast: ast.toJSON(),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n    toJSONMemoMap.set(ast, out)\n    return out\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isSuspend: (ast: AST) => ast is Suspend = createASTGuard(\"Suspend\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Refinement<From extends AST = AST> implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Refinement\"\n  constructor(\n    readonly from: From,\n    readonly filter: (\n      input: any,\n      options: ParseOptions,\n      self: Refinement\n    ) => Option.Option<ParseIssue>,\n    readonly annotations: Annotations = {}\n  ) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return getIdentifierAnnotation(this).pipe(Option.getOrElse(() =>\n      Option.match(getOrElseExpected(this), {\n        onNone: () => `{ ${this.from} | filter }`,\n        onSome: (expected) => isRefinement(this.from) ? String(this.from) + \" & \" + expected : expected\n      })\n    ))\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      from: this.from.toJSON(),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isRefinement: (ast: AST) => ast is Refinement<AST> = createASTGuard(\"Refinement\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface ParseOptions {\n  /**\n   * The `errors` option allows you to receive all parsing errors when\n   * attempting to parse a value using a schema. By default only the first error\n   * is returned, but by setting the `errors` option to `\"all\"`, you can receive\n   * all errors that occurred during the parsing process. This can be useful for\n   * debugging or for providing more comprehensive error messages to the user.\n   *\n   * default: \"first\"\n   *\n   * @since 3.10.0\n   */\n  readonly errors?: \"first\" | \"all\" | undefined\n  /**\n   * When using a `Schema` to parse a value, by default any properties that are\n   * not specified in the `Schema` will be stripped out from the output. This is\n   * because the `Schema` is expecting a specific shape for the parsed value,\n   * and any excess properties do not conform to that shape.\n   *\n   * However, you can use the `onExcessProperty` option (default value:\n   * `\"ignore\"`) to trigger a parsing error. This can be particularly useful in\n   * cases where you need to detect and handle potential errors or unexpected\n   * values.\n   *\n   * If you want to allow excess properties to remain, you can use\n   * `onExcessProperty` set to `\"preserve\"`.\n   *\n   * default: \"ignore\"\n   *\n   * @since 3.10.0\n   */\n  readonly onExcessProperty?: \"ignore\" | \"error\" | \"preserve\" | undefined\n  /**\n   * The `propertyOrder` option provides control over the order of object fields\n   * in the output. This feature is particularly useful when the sequence of\n   * keys is important for the consuming processes or when maintaining the input\n   * order enhances readability and usability.\n   *\n   * By default, the `propertyOrder` option is set to `\"none\"`. This means that\n   * the internal system decides the order of keys to optimize parsing speed.\n   * The order of keys in this mode should not be considered stable, and it's\n   * recommended not to rely on key ordering as it may change in future updates\n   * without notice.\n   *\n   * Setting `propertyOrder` to `\"original\"` ensures that the keys are ordered\n   * as they appear in the input during the decoding/encoding process.\n   *\n   * default: \"none\"\n   *\n   * @since 3.10.0\n   */\n  readonly propertyOrder?: \"none\" | \"original\" | undefined\n  /**\n   * Handles missing properties in data structures. By default, missing\n   * properties are treated as if present with an `undefined` value. To treat\n   * missing properties as errors, set the `exact` option to `true`. This\n   * setting is already enabled by default for `is` and `asserts` functions,\n   * treating absent properties strictly unless overridden.\n   *\n   * default: false\n   *\n   * @since 3.10.0\n   */\n  readonly exact?: boolean | undefined\n}\n\n/**\n * @since 3.10.0\n */\nexport const defaultParseOption: ParseOptions = {}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Transformation implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Transformation\"\n  constructor(\n    readonly from: AST,\n    readonly to: AST,\n    readonly transformation: TransformationKind,\n    readonly annotations: Annotations = {}\n  ) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(\n      getExpected(this),\n      () => `(${String(this.from)} <-> ${String(this.to)})`\n    )\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      from: this.from.toJSON(),\n      to: this.to.toJSON(),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isTransformation: (ast: AST) => ast is Transformation = createASTGuard(\"Transformation\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport type TransformationKind =\n  | FinalTransformation\n  | ComposeTransformation\n  | TypeLiteralTransformation\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class FinalTransformation {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"FinalTransformation\"\n  constructor(\n    readonly decode: (\n      fromA: any,\n      options: ParseOptions,\n      self: Transformation,\n      fromI: any\n    ) => Effect<any, ParseIssue, any>,\n    readonly encode: (toI: any, options: ParseOptions, self: Transformation, toA: any) => Effect<any, ParseIssue, any>\n  ) {}\n}\n\nconst createTransformationGuard =\n  <T extends TransformationKind[\"_tag\"]>(tag: T) =>\n  (ast: TransformationKind): ast is Extract<TransformationKind, { _tag: T }> => ast._tag === tag\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isFinalTransformation: (ast: TransformationKind) => ast is FinalTransformation = createTransformationGuard(\n  \"FinalTransformation\"\n)\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class ComposeTransformation {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"ComposeTransformation\"\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const composeTransformation: ComposeTransformation = new ComposeTransformation()\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isComposeTransformation: (ast: TransformationKind) => ast is ComposeTransformation =\n  createTransformationGuard(\n    \"ComposeTransformation\"\n  )\n\n/**\n * Represents a `PropertySignature -> PropertySignature` transformation\n *\n * The semantic of `decode` is:\n * - `none()` represents the absence of the key/value pair\n * - `some(value)` represents the presence of the key/value pair\n *\n * The semantic of `encode` is:\n * - `none()` you don't want to output the key/value pair\n * - `some(value)` you want to output the key/value pair\n *\n * @category model\n * @since 3.10.0\n */\nexport class PropertySignatureTransformation {\n  constructor(\n    readonly from: PropertyKey,\n    readonly to: PropertyKey,\n    readonly decode: (o: Option.Option<any>) => Option.Option<any>,\n    readonly encode: (o: Option.Option<any>) => Option.Option<any>\n  ) {}\n}\n\nconst isRenamingPropertySignatureTransformation = (t: PropertySignatureTransformation) =>\n  t.decode === identity && t.encode === identity\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class TypeLiteralTransformation {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"TypeLiteralTransformation\"\n  constructor(\n    readonly propertySignatureTransformations: ReadonlyArray<\n      PropertySignatureTransformation\n    >\n  ) {\n    // check for duplicate property signature transformations\n    const fromKeys: Record<PropertyKey, true> = {}\n    const toKeys: Record<PropertyKey, true> = {}\n    for (const pst of propertySignatureTransformations) {\n      const from = pst.from\n      if (fromKeys[from]) {\n        throw new Error(errors_.getASTDuplicatePropertySignatureTransformationErrorMessage(from))\n      }\n      fromKeys[from] = true\n      const to = pst.to\n      if (toKeys[to]) {\n        throw new Error(errors_.getASTDuplicatePropertySignatureTransformationErrorMessage(to))\n      }\n      toKeys[to] = true\n    }\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isTypeLiteralTransformation: (ast: TransformationKind) => ast is TypeLiteralTransformation =\n  createTransformationGuard(\"TypeLiteralTransformation\")\n\n// -------------------------------------------------------------------------------------\n// API\n// -------------------------------------------------------------------------------------\n\n/**\n * Merges a set of new annotations with existing ones, potentially overwriting\n * any duplicates.\n *\n * Any previously existing identifier annotations are deleted.\n *\n * @since 3.10.0\n */\nexport const annotations = (ast: AST, overrides: Annotations): AST => {\n  const d = Object.getOwnPropertyDescriptors(ast)\n  const base: any = { ...ast.annotations }\n  delete base[IdentifierAnnotationId]\n  const value = { ...base, ...overrides }\n  const surrogate = getSurrogateAnnotation(ast)\n  if (Option.isSome(surrogate)) {\n    value[SurrogateAnnotationId] = annotations(surrogate.value, overrides)\n  }\n  d.annotations.value = value\n  return Object.create(Object.getPrototypeOf(ast), d)\n}\n\n/**\n * Equivalent at runtime to the TypeScript type-level `keyof` operator.\n *\n * @since 3.10.0\n */\nexport const keyof = (ast: AST): AST => Union.unify(_keyof(ast))\n\nconst STRING_KEYWORD_PATTERN = \"[\\\\s\\\\S]*?\" // any string, including newlines\nconst NUMBER_KEYWORD_PATTERN = \"[+-]?\\\\d*\\\\.?\\\\d+(?:[Ee][+-]?\\\\d+)?\"\n\nconst getTemplateLiteralSpanTypePattern = (type: TemplateLiteralSpanType, capture: boolean): string => {\n  switch (type._tag) {\n    case \"Literal\":\n      return regexp.escape(String(type.literal))\n    case \"StringKeyword\":\n      return STRING_KEYWORD_PATTERN\n    case \"NumberKeyword\":\n      return NUMBER_KEYWORD_PATTERN\n    case \"TemplateLiteral\":\n      return getTemplateLiteralPattern(type, capture, false)\n    case \"Union\":\n      return type.types.map((type) => getTemplateLiteralSpanTypePattern(type, capture)).join(\"|\")\n  }\n}\n\nconst handleTemplateLiteralSpanTypeParens = (\n  type: TemplateLiteralSpanType,\n  s: string,\n  capture: boolean,\n  top: boolean\n) => {\n  if (isUnion(type)) {\n    if (capture && !top) {\n      return `(?:${s})`\n    }\n  } else if (!capture || !top) {\n    return s\n  }\n  return `(${s})`\n}\n\nconst getTemplateLiteralPattern = (ast: TemplateLiteral, capture: boolean, top: boolean): string => {\n  let pattern = ``\n  if (ast.head !== \"\") {\n    const head = regexp.escape(ast.head)\n    pattern += capture && top ? `(${head})` : head\n  }\n\n  for (const span of ast.spans) {\n    const spanPattern = getTemplateLiteralSpanTypePattern(span.type, capture)\n    pattern += handleTemplateLiteralSpanTypeParens(span.type, spanPattern, capture, top)\n    if (span.literal !== \"\") {\n      const literal = regexp.escape(span.literal)\n      pattern += capture && top ? `(${literal})` : literal\n    }\n  }\n\n  return pattern\n}\n\n/**\n * Generates a regular expression from a `TemplateLiteral` AST node.\n *\n * @see {@link getTemplateLiteralCapturingRegExp} for a variant that captures the pattern.\n *\n * @since 3.10.0\n */\nexport const getTemplateLiteralRegExp = (ast: TemplateLiteral): RegExp =>\n  new RegExp(`^${getTemplateLiteralPattern(ast, false, true)}$`)\n\n/**\n * Generates a regular expression that captures the pattern defined by the given `TemplateLiteral` AST.\n *\n * @see {@link getTemplateLiteralRegExp} for a variant that does not capture the pattern.\n *\n * @since 3.10.0\n */\nexport const getTemplateLiteralCapturingRegExp = (ast: TemplateLiteral): RegExp =>\n  new RegExp(`^${getTemplateLiteralPattern(ast, true, true)}$`)\n\n/**\n * @since 3.10.0\n */\nexport const getPropertySignatures = (ast: AST): Array<PropertySignature> => {\n  const annotation = getSurrogateAnnotation(ast)\n  if (Option.isSome(annotation)) {\n    return getPropertySignatures(annotation.value)\n  }\n  switch (ast._tag) {\n    case \"TypeLiteral\":\n      return ast.propertySignatures.slice()\n    case \"Suspend\":\n      return getPropertySignatures(ast.f())\n    case \"Refinement\":\n      return getPropertySignatures(ast.from)\n  }\n  return getPropertyKeys(ast).map((name) => getPropertyKeyIndexedAccess(ast, name))\n}\n\nconst getIndexSignatures = (ast: AST): Array<IndexSignature> => {\n  const annotation = getSurrogateAnnotation(ast)\n  if (Option.isSome(annotation)) {\n    return getIndexSignatures(annotation.value)\n  }\n  switch (ast._tag) {\n    case \"TypeLiteral\":\n      return ast.indexSignatures.slice()\n    case \"Suspend\":\n      return getIndexSignatures(ast.f())\n    case \"Refinement\":\n      return getIndexSignatures(ast.from)\n  }\n  return []\n}\n\n/** @internal */\nexport const getNumberIndexedAccess = (ast: AST): AST => {\n  switch (ast._tag) {\n    case \"TupleType\": {\n      let hasOptional = false\n      let out: Array<AST> = []\n      for (const e of ast.elements) {\n        if (e.isOptional) {\n          hasOptional = true\n        }\n        out.push(e.type)\n      }\n      if (hasOptional) {\n        out.push(undefinedKeyword)\n      }\n      out = out.concat(getRestASTs(ast.rest))\n      return Union.make(out)\n    }\n    case \"Refinement\":\n      return getNumberIndexedAccess(ast.from)\n    case \"Union\":\n      return Union.make(ast.types.map(getNumberIndexedAccess))\n    case \"Suspend\":\n      return getNumberIndexedAccess(ast.f())\n  }\n  throw new Error(errors_.getASTUnsupportedSchemaErrorMessage(ast))\n}\n\nconst getTypeLiteralPropertySignature = (ast: TypeLiteral, name: PropertyKey): PropertySignature | undefined => {\n  // from property signatures...\n  const ops = Arr.findFirst(ast.propertySignatures, (ps) => ps.name === name)\n  if (Option.isSome(ops)) {\n    return ops.value\n  }\n\n  // from index signatures...\n  if (Predicate.isString(name)) {\n    let out: PropertySignature | undefined = undefined\n    for (const is of ast.indexSignatures) {\n      const encodedParameter = getEncodedParameter(is.parameter)\n      switch (encodedParameter._tag) {\n        case \"TemplateLiteral\": {\n          const regex = getTemplateLiteralRegExp(encodedParameter)\n          if (regex.test(name)) {\n            return new PropertySignature(name, is.type, false, true)\n          }\n          break\n        }\n        case \"StringKeyword\": {\n          if (out === undefined) {\n            out = new PropertySignature(name, is.type, false, true)\n          }\n        }\n      }\n    }\n    if (out) {\n      return out\n    }\n  } else if (Predicate.isSymbol(name)) {\n    for (const is of ast.indexSignatures) {\n      const encodedParameter = getEncodedParameter(is.parameter)\n      if (isSymbolKeyword(encodedParameter)) {\n        return new PropertySignature(name, is.type, false, true)\n      }\n    }\n  }\n}\n\n/** @internal */\nexport const getPropertyKeyIndexedAccess = (ast: AST, name: PropertyKey): PropertySignature => {\n  const annotation = getSurrogateAnnotation(ast)\n  if (Option.isSome(annotation)) {\n    return getPropertyKeyIndexedAccess(annotation.value, name)\n  }\n  switch (ast._tag) {\n    case \"TypeLiteral\": {\n      const ps = getTypeLiteralPropertySignature(ast, name)\n      if (ps) {\n        return ps\n      }\n      break\n    }\n    case \"Union\":\n      return new PropertySignature(\n        name,\n        Union.make(ast.types.map((ast) => getPropertyKeyIndexedAccess(ast, name).type)),\n        false,\n        true\n      )\n    case \"Suspend\":\n      return getPropertyKeyIndexedAccess(ast.f(), name)\n    case \"Refinement\":\n      return getPropertyKeyIndexedAccess(ast.from, name)\n  }\n  throw new Error(errors_.getASTUnsupportedSchemaErrorMessage(ast))\n}\n\nconst getPropertyKeys = (ast: AST): Array<PropertyKey> => {\n  const annotation = getSurrogateAnnotation(ast)\n  if (Option.isSome(annotation)) {\n    return getPropertyKeys(annotation.value)\n  }\n  switch (ast._tag) {\n    case \"TypeLiteral\":\n      return ast.propertySignatures.map((ps) => ps.name)\n    case \"Union\":\n      return ast.types.slice(1).reduce(\n        (out: Array<PropertyKey>, ast) => Arr.intersection(out, getPropertyKeys(ast)),\n        getPropertyKeys(ast.types[0])\n      )\n    case \"Suspend\":\n      return getPropertyKeys(ast.f())\n    case \"Refinement\":\n      return getPropertyKeys(ast.from)\n    case \"Transformation\":\n      return getPropertyKeys(ast.to)\n  }\n  return []\n}\n\n/** @internal */\nexport const record = (key: AST, value: AST): {\n  propertySignatures: Array<PropertySignature>\n  indexSignatures: Array<IndexSignature>\n} => {\n  const propertySignatures: Array<PropertySignature> = []\n  const indexSignatures: Array<IndexSignature> = []\n  const go = (key: AST): void => {\n    switch (key._tag) {\n      case \"NeverKeyword\":\n        break\n      case \"StringKeyword\":\n      case \"SymbolKeyword\":\n      case \"TemplateLiteral\":\n      case \"Refinement\":\n        indexSignatures.push(new IndexSignature(key, value, true))\n        break\n      case \"Literal\":\n        if (Predicate.isString(key.literal) || Predicate.isNumber(key.literal)) {\n          propertySignatures.push(new PropertySignature(key.literal, value, false, true))\n        } else {\n          throw new Error(errors_.getASTUnsupportedLiteralErrorMessage(key.literal))\n        }\n        break\n      case \"Enums\": {\n        for (const [_, name] of key.enums) {\n          propertySignatures.push(new PropertySignature(name, value, false, true))\n        }\n        break\n      }\n      case \"UniqueSymbol\":\n        propertySignatures.push(new PropertySignature(key.symbol, value, false, true))\n        break\n      case \"Union\":\n        key.types.forEach(go)\n        break\n      default:\n        throw new Error(errors_.getASTUnsupportedKeySchemaErrorMessage(key))\n    }\n  }\n  go(key)\n  return { propertySignatures, indexSignatures }\n}\n\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Pick`.\n *\n * @since 3.10.0\n */\nexport const pick = (ast: AST, keys: ReadonlyArray<PropertyKey>): TypeLiteral | Transformation => {\n  const annotation = getSurrogateAnnotation(ast)\n  if (Option.isSome(annotation)) {\n    return pick(annotation.value, keys)\n  }\n  switch (ast._tag) {\n    case \"TypeLiteral\": {\n      const pss: Array<PropertySignature> = []\n      const names: Record<PropertyKey, null> = {}\n      for (const ps of ast.propertySignatures) {\n        names[ps.name] = null\n        if (keys.includes(ps.name)) {\n          pss.push(ps)\n        }\n      }\n      for (const key of keys) {\n        if (!(key in names)) {\n          const ps = getTypeLiteralPropertySignature(ast, key)\n          if (ps) {\n            pss.push(ps)\n          }\n        }\n      }\n      return new TypeLiteral(pss, [])\n    }\n    case \"Union\":\n      return new TypeLiteral(keys.map((name) => getPropertyKeyIndexedAccess(ast, name)), [])\n    case \"Suspend\":\n      return pick(ast.f(), keys)\n    case \"Refinement\":\n      return pick(ast.from, keys)\n    case \"Transformation\": {\n      switch (ast.transformation._tag) {\n        case \"ComposeTransformation\":\n          return new Transformation(\n            pick(ast.from, keys),\n            pick(ast.to, keys),\n            composeTransformation\n          )\n        case \"TypeLiteralTransformation\": {\n          const ts: Array<PropertySignatureTransformation> = []\n          const fromKeys: Array<PropertyKey> = []\n          for (const k of keys) {\n            const t = ast.transformation.propertySignatureTransformations.find((t) => t.to === k)\n            if (t) {\n              ts.push(t)\n              fromKeys.push(t.from)\n            } else {\n              fromKeys.push(k)\n            }\n          }\n          return Arr.isNonEmptyReadonlyArray(ts) ?\n            new Transformation(\n              pick(ast.from, fromKeys),\n              pick(ast.to, keys),\n              new TypeLiteralTransformation(ts)\n            ) :\n            pick(ast.from, fromKeys)\n        }\n      }\n    }\n  }\n  throw new Error(errors_.getASTUnsupportedSchemaErrorMessage(ast))\n}\n\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Omit`.\n *\n * @since 3.10.0\n */\nexport const omit = (ast: AST, keys: ReadonlyArray<PropertyKey>): TypeLiteral | Transformation => {\n  let indexSignatures = getIndexSignatures(ast)\n  if (indexSignatures.length > 0) {\n    if (indexSignatures.some((is) => isStringKeyword(getEncodedParameter(is.parameter)))) {\n      indexSignatures = indexSignatures.filter((is) => !isTemplateLiteral(getEncodedParameter(is.parameter)))\n    }\n    return new TypeLiteral([], indexSignatures)\n  }\n  return pick(ast, getPropertyKeys(ast).filter((name) => !keys.includes(name)))\n}\n\n/** @internal */\nexport const orUndefined = (ast: AST): AST => Union.make([ast, undefinedKeyword])\n\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Partial`.\n *\n * @since 3.10.0\n */\nexport const partial = (ast: AST, options?: { readonly exact: true }): AST => {\n  const exact = options?.exact === true\n  switch (ast._tag) {\n    case \"TupleType\":\n      return new TupleType(\n        ast.elements.map((e) => new OptionalType(exact ? e.type : orUndefined(e.type), true)),\n        Arr.match(ast.rest, {\n          onEmpty: () => ast.rest,\n          onNonEmpty: (rest) => [new Type(Union.make([...getRestASTs(rest), undefinedKeyword]))]\n        }),\n        ast.isReadonly\n      )\n    case \"TypeLiteral\":\n      return new TypeLiteral(\n        ast.propertySignatures.map((ps) =>\n          new PropertySignature(ps.name, exact ? ps.type : orUndefined(ps.type), true, ps.isReadonly, ps.annotations)\n        ),\n        ast.indexSignatures.map((is) => new IndexSignature(is.parameter, orUndefined(is.type), is.isReadonly))\n      )\n    case \"Union\":\n      return Union.make(ast.types.map((member) => partial(member, options)))\n    case \"Suspend\":\n      return new Suspend(() => partial(ast.f(), options))\n    case \"Declaration\":\n    case \"Refinement\":\n      throw new Error(errors_.getASTUnsupportedSchemaErrorMessage(ast))\n    case \"Transformation\": {\n      if (\n        isTypeLiteralTransformation(ast.transformation) &&\n        ast.transformation.propertySignatureTransformations.every(isRenamingPropertySignatureTransformation)\n      ) {\n        return new Transformation(partial(ast.from, options), partial(ast.to, options), ast.transformation)\n      }\n      throw new Error(errors_.getASTUnsupportedSchemaErrorMessage(ast))\n    }\n  }\n  return ast\n}\n\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Required`.\n *\n * @since 3.10.0\n */\nexport const required = (ast: AST): AST => {\n  switch (ast._tag) {\n    case \"TupleType\":\n      return new TupleType(\n        ast.elements.map((e) => new OptionalType(e.type, false)),\n        ast.rest,\n        ast.isReadonly\n      )\n    case \"TypeLiteral\":\n      return new TypeLiteral(\n        ast.propertySignatures.map((f) => new PropertySignature(f.name, f.type, false, f.isReadonly, f.annotations)),\n        ast.indexSignatures\n      )\n    case \"Union\":\n      return Union.make(ast.types.map((member) => required(member)))\n    case \"Suspend\":\n      return new Suspend(() => required(ast.f()))\n    case \"Declaration\":\n    case \"Refinement\":\n      throw new Error(errors_.getASTUnsupportedSchemaErrorMessage(ast))\n    case \"Transformation\": {\n      if (\n        isTypeLiteralTransformation(ast.transformation) &&\n        ast.transformation.propertySignatureTransformations.every(isRenamingPropertySignatureTransformation)\n      ) {\n        return new Transformation(required(ast.from), required(ast.to), ast.transformation)\n      }\n      throw new Error(errors_.getASTUnsupportedSchemaErrorMessage(ast))\n    }\n  }\n  return ast\n}\n\n/**\n * Creates a new AST with shallow mutability applied to its properties.\n *\n * @since 3.10.0\n */\nexport const mutable = (ast: AST): AST => {\n  switch (ast._tag) {\n    case \"TupleType\":\n      return ast.isReadonly === false ? ast : new TupleType(ast.elements, ast.rest, false, ast.annotations)\n    case \"TypeLiteral\": {\n      const propertySignatures = changeMap(\n        ast.propertySignatures,\n        (ps) =>\n          ps.isReadonly === false ? ps : new PropertySignature(ps.name, ps.type, ps.isOptional, false, ps.annotations)\n      )\n      const indexSignatures = changeMap(\n        ast.indexSignatures,\n        (is) => is.isReadonly === false ? is : new IndexSignature(is.parameter, is.type, false)\n      )\n      return propertySignatures === ast.propertySignatures && indexSignatures === ast.indexSignatures ?\n        ast :\n        new TypeLiteral(propertySignatures, indexSignatures, ast.annotations)\n    }\n    case \"Union\": {\n      const types = changeMap(ast.types, mutable)\n      return types === ast.types ? ast : Union.make(types, ast.annotations)\n    }\n    case \"Suspend\":\n      return new Suspend(() => mutable(ast.f()), ast.annotations)\n    case \"Refinement\": {\n      const from = mutable(ast.from)\n      return from === ast.from ? ast : new Refinement(from, ast.filter, ast.annotations)\n    }\n    case \"Transformation\": {\n      const from = mutable(ast.from)\n      const to = mutable(ast.to)\n      return from === ast.from && to === ast.to ?\n        ast :\n        new Transformation(from, to, ast.transformation, ast.annotations)\n    }\n  }\n  return ast\n}\n\n// -------------------------------------------------------------------------------------\n// compiler harness\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 3.10.0\n */\nexport type Compiler<A> = (ast: AST, path: ReadonlyArray<PropertyKey>) => A\n\n/**\n * @since 3.10.0\n */\nexport type Match<A> = {\n  [K in AST[\"_tag\"]]: (ast: Extract<AST, { _tag: K }>, compile: Compiler<A>, path: ReadonlyArray<PropertyKey>) => A\n}\n\n/**\n * @since 3.10.0\n */\nexport const getCompiler = <A>(match: Match<A>): Compiler<A> => {\n  const compile = (ast: AST, path: ReadonlyArray<PropertyKey>): A => match[ast._tag](ast as any, compile, path)\n  return compile\n}\n\n/** @internal */\nexport const pickAnnotations =\n  (annotationIds: ReadonlyArray<symbol>) => (annotated: Annotated): Annotations | undefined => {\n    let out: { [_: symbol]: unknown } | undefined = undefined\n    for (const id of annotationIds) {\n      if (Object.prototype.hasOwnProperty.call(annotated.annotations, id)) {\n        if (out === undefined) {\n          out = {}\n        }\n        out[id] = annotated.annotations[id]\n      }\n    }\n    return out\n  }\n\n/** @internal */\nexport const omitAnnotations =\n  (annotationIds: ReadonlyArray<symbol>) => (annotated: Annotated): Annotations | undefined => {\n    const out = { ...annotated.annotations }\n    for (const id of annotationIds) {\n      delete out[id]\n    }\n    return out\n  }\n\nconst preserveTransformationAnnotations = pickAnnotations([\n  ExamplesAnnotationId,\n  DefaultAnnotationId,\n  JSONSchemaAnnotationId,\n  ArbitraryAnnotationId,\n  PrettyAnnotationId,\n  EquivalenceAnnotationId\n])\n\n/**\n * @since 3.10.0\n */\nexport const typeAST = (ast: AST): AST => {\n  switch (ast._tag) {\n    case \"Declaration\": {\n      const typeParameters = changeMap(ast.typeParameters, typeAST)\n      return typeParameters === ast.typeParameters ?\n        ast :\n        new Declaration(typeParameters, ast.decodeUnknown, ast.encodeUnknown, ast.annotations)\n    }\n    case \"TupleType\": {\n      const elements = changeMap(ast.elements, (e) => {\n        const type = typeAST(e.type)\n        return type === e.type ? e : new OptionalType(type, e.isOptional)\n      })\n      const restASTs = getRestASTs(ast.rest)\n      const rest = changeMap(restASTs, typeAST)\n      return elements === ast.elements && rest === restASTs ?\n        ast :\n        new TupleType(elements, rest.map((type) => new Type(type)), ast.isReadonly, ast.annotations)\n    }\n    case \"TypeLiteral\": {\n      const propertySignatures = changeMap(ast.propertySignatures, (p) => {\n        const type = typeAST(p.type)\n        return type === p.type ? p : new PropertySignature(p.name, type, p.isOptional, p.isReadonly)\n      })\n      const indexSignatures = changeMap(ast.indexSignatures, (is) => {\n        const type = typeAST(is.type)\n        return type === is.type ? is : new IndexSignature(is.parameter, type, is.isReadonly)\n      })\n      return propertySignatures === ast.propertySignatures && indexSignatures === ast.indexSignatures ?\n        ast :\n        new TypeLiteral(propertySignatures, indexSignatures, ast.annotations)\n    }\n    case \"Union\": {\n      const types = changeMap(ast.types, typeAST)\n      return types === ast.types ? ast : Union.make(types, ast.annotations)\n    }\n    case \"Suspend\":\n      return new Suspend(() => typeAST(ast.f()), ast.annotations)\n    case \"Refinement\": {\n      const from = typeAST(ast.from)\n      return from === ast.from ?\n        ast :\n        new Refinement(from, ast.filter, ast.annotations)\n    }\n    case \"Transformation\": {\n      const preserve = preserveTransformationAnnotations(ast)\n      return typeAST(\n        preserve !== undefined ?\n          annotations(ast.to, preserve) :\n          ast.to\n      )\n    }\n  }\n  return ast\n}\n\nfunction changeMap<A>(\n  as: Arr.NonEmptyReadonlyArray<A>,\n  f: (a: A) => A\n): Arr.NonEmptyReadonlyArray<A>\nfunction changeMap<A>(as: ReadonlyArray<A>, f: (a: A) => A): ReadonlyArray<A>\nfunction changeMap<A>(as: ReadonlyArray<A>, f: (a: A) => A): ReadonlyArray<A> {\n  let changed = false\n  const out = Arr.allocate(as.length) as Array<A>\n  for (let i = 0; i < as.length; i++) {\n    const a = as[i]\n    const fa = f(a)\n    if (fa !== a) {\n      changed = true\n    }\n    out[i] = fa\n  }\n  return changed ? out : as\n}\n\n/**\n * Returns the from part of a transformation if it exists\n *\n * @internal\n */\nexport const getTransformationFrom = (ast: AST): AST | undefined => {\n  switch (ast._tag) {\n    case \"Transformation\":\n      return ast.from\n    case \"Refinement\":\n      return getTransformationFrom(ast.from)\n    case \"Suspend\":\n      return getTransformationFrom(ast.f())\n  }\n}\n\nconst encodedAST_ = (ast: AST, isBound: boolean): AST => {\n  switch (ast._tag) {\n    case \"Declaration\": {\n      const typeParameters = changeMap(ast.typeParameters, (ast) => encodedAST_(ast, isBound))\n      return typeParameters === ast.typeParameters ?\n        ast :\n        new Declaration(typeParameters, ast.decodeUnknown, ast.encodeUnknown)\n    }\n    case \"TupleType\": {\n      const elements = changeMap(ast.elements, (e) => {\n        const type = encodedAST_(e.type, isBound)\n        return type === e.type ? e : new OptionalType(type, e.isOptional)\n      })\n      const restASTs = getRestASTs(ast.rest)\n      const rest = changeMap(restASTs, (ast) => encodedAST_(ast, isBound))\n      return elements === ast.elements && rest === restASTs ?\n        ast :\n        new TupleType(elements, rest.map((ast) => new Type(ast)), ast.isReadonly)\n    }\n    case \"TypeLiteral\": {\n      const propertySignatures = changeMap(ast.propertySignatures, (ps) => {\n        const type = encodedAST_(ps.type, isBound)\n        return type === ps.type\n          ? ps\n          : new PropertySignature(ps.name, type, ps.isOptional, ps.isReadonly)\n      })\n      const indexSignatures = changeMap(ast.indexSignatures, (is) => {\n        const type = encodedAST_(is.type, isBound)\n        return type === is.type ? is : new IndexSignature(is.parameter, type, is.isReadonly)\n      })\n      return propertySignatures === ast.propertySignatures && indexSignatures === ast.indexSignatures ?\n        ast :\n        new TypeLiteral(propertySignatures, indexSignatures)\n    }\n    case \"Union\": {\n      const types = changeMap(ast.types, (ast) => encodedAST_(ast, isBound))\n      return types === ast.types ? ast : Union.make(types)\n    }\n    case \"Suspend\": {\n      let borrowedAnnotations = undefined\n      const identifier = getJSONIdentifier(ast)\n      if (Option.isSome(identifier)) {\n        const suffix = isBound ? \"Bound\" : \"\"\n        borrowedAnnotations = { [JSONIdentifierAnnotationId]: `${identifier.value}Encoded${suffix}` }\n      }\n      return new Suspend(() => encodedAST_(ast.f(), isBound), borrowedAnnotations)\n    }\n    case \"Refinement\": {\n      const from = encodedAST_(ast.from, isBound)\n      if (isBound) {\n        if (from === ast.from) return ast\n        if (getTransformationFrom(ast.from) === undefined && hasStableFilter(ast)) {\n          return new Refinement(from, ast.filter, ast.annotations)\n        }\n        return from\n      } else {\n        return from\n      }\n    }\n    case \"Transformation\":\n      return encodedAST_(ast.from, isBound)\n  }\n  return ast\n}\n\n/**\n * @since 3.10.0\n */\nexport const encodedAST = (ast: AST): AST => encodedAST_(ast, false)\n\n/**\n * @since 3.10.0\n */\nexport const encodedBoundAST = (ast: AST): AST => encodedAST_(ast, true)\n\nconst toJSONAnnotations = (annotations: Annotations): object => {\n  const out: Record<string, unknown> = {}\n  for (const k of Object.getOwnPropertySymbols(annotations)) {\n    out[String(k)] = annotations[k]\n  }\n  return out\n}\n\n/** @internal */\nexport const getEncodedParameter = (\n  ast: Parameter\n): StringKeyword | SymbolKeyword | TemplateLiteral => {\n  switch (ast._tag) {\n    case \"StringKeyword\":\n    case \"SymbolKeyword\":\n    case \"TemplateLiteral\":\n      return ast\n    case \"Refinement\":\n      return getEncodedParameter(ast.from)\n  }\n}\n\n/** @internal  */\nexport const equals = (self: AST, that: AST): boolean => {\n  switch (self._tag) {\n    case \"Literal\":\n      return isLiteral(that) && that.literal === self.literal\n    case \"UniqueSymbol\":\n      return isUniqueSymbol(that) && that.symbol === self.symbol\n    case \"UndefinedKeyword\":\n    case \"VoidKeyword\":\n    case \"NeverKeyword\":\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n    case \"StringKeyword\":\n    case \"NumberKeyword\":\n    case \"BooleanKeyword\":\n    case \"BigIntKeyword\":\n    case \"SymbolKeyword\":\n    case \"ObjectKeyword\":\n      return that._tag === self._tag\n    case \"TemplateLiteral\":\n      return isTemplateLiteral(that) && that.head === self.head && equalsTemplateLiteralSpan(that.spans, self.spans)\n    case \"Enums\":\n      return isEnums(that) && equalsEnums(that.enums, self.enums)\n    case \"Union\":\n      return isUnion(that) && equalsUnion(self.types, that.types)\n    case \"Refinement\":\n    case \"TupleType\":\n    case \"TypeLiteral\":\n    case \"Suspend\":\n    case \"Transformation\":\n    case \"Declaration\":\n      return self === that\n  }\n}\n\nconst equalsTemplateLiteralSpan = Arr.getEquivalence<TemplateLiteralSpan>((self, that): boolean => {\n  return self.literal === that.literal && equals(self.type, that.type)\n})\n\nconst equalsEnums = Arr.getEquivalence<readonly [string, string | number]>((self, that) =>\n  that[0] === self[0] && that[1] === self[1]\n)\n\nconst equalsUnion = Arr.getEquivalence<AST>(equals)\n\nconst intersection = Arr.intersectionWith(equals)\n\nconst _keyof = (ast: AST): Array<AST> => {\n  switch (ast._tag) {\n    case \"Declaration\": {\n      const annotation = getSurrogateAnnotation(ast)\n      if (Option.isSome(annotation)) {\n        return _keyof(annotation.value)\n      }\n      break\n    }\n    case \"TypeLiteral\":\n      return ast.propertySignatures.map((p): AST =>\n        Predicate.isSymbol(p.name) ? new UniqueSymbol(p.name) : new Literal(p.name)\n      ).concat(ast.indexSignatures.map((is) => getEncodedParameter(is.parameter)))\n    case \"Suspend\":\n      return _keyof(ast.f())\n    case \"Union\":\n      return ast.types.slice(1).reduce(\n        (out: Array<AST>, ast) => intersection(out, _keyof(ast)),\n        _keyof(ast.types[0])\n      )\n    case \"Transformation\":\n      return _keyof(ast.to)\n  }\n  throw new Error(errors_.getASTUnsupportedSchemaErrorMessage(ast))\n}\n\n/** @internal */\nexport const compose = (ab: AST, cd: AST): AST => new Transformation(ab, cd, composeTransformation)\n\n/** @internal */\nexport const rename = (ast: AST, mapping: { readonly [K in PropertyKey]?: PropertyKey }): AST => {\n  switch (ast._tag) {\n    case \"TypeLiteral\": {\n      const propertySignatureTransformations: Array<PropertySignatureTransformation> = []\n      for (const key of Reflect.ownKeys(mapping)) {\n        const name = mapping[key]\n        if (name !== undefined) {\n          propertySignatureTransformations.push(\n            new PropertySignatureTransformation(\n              key,\n              name,\n              identity,\n              identity\n            )\n          )\n        }\n      }\n      if (propertySignatureTransformations.length === 0) {\n        return ast\n      }\n      return new Transformation(\n        ast,\n        new TypeLiteral(\n          ast.propertySignatures.map((ps) => {\n            const name = mapping[ps.name]\n            return new PropertySignature(\n              name === undefined ? ps.name : name,\n              typeAST(ps.type),\n              ps.isOptional,\n              ps.isReadonly,\n              ps.annotations\n            )\n          }),\n          ast.indexSignatures\n        ),\n        new TypeLiteralTransformation(propertySignatureTransformations)\n      )\n    }\n    case \"Union\":\n      return Union.make(ast.types.map((ast) => rename(ast, mapping)))\n    case \"Suspend\":\n      return new Suspend(() => rename(ast.f(), mapping))\n    case \"Transformation\":\n      return compose(ast, rename(typeAST(ast), mapping))\n  }\n  throw new Error(errors_.getASTUnsupportedRenameSchemaErrorMessage(ast))\n}\n\nconst formatKeyword = (ast: AST): string => Option.getOrElse(getExpected(ast), () => ast._tag)\n\nfunction getBrands(ast: Annotated): string {\n  return Option.match(getBrandAnnotation(ast), {\n    onNone: () => \"\",\n    onSome: (brands) => brands.map((brand) => ` & Brand<${util_.formatUnknown(brand)}>`).join(\"\")\n  })\n}\n\nconst getOrElseExpected = (ast: Annotated): Option.Option<string> =>\n  getTitleAnnotation(ast).pipe(\n    Option.orElse(() => getDescriptionAnnotation(ast)),\n    Option.orElse(() => getAutoTitleAnnotation(ast)),\n    Option.map((s) => s + getBrands(ast))\n  )\n\nconst getExpected = (ast: Annotated): Option.Option<string> =>\n  Option.orElse(getIdentifierAnnotation(ast), () => getOrElseExpected(ast))\n\n/** @internal */\nexport const pruneUndefined = (\n  ast: AST,\n  self: (ast: AST) => AST | undefined,\n  onTransformation: (ast: Transformation) => AST | undefined\n): AST | undefined => {\n  switch (ast._tag) {\n    case \"UndefinedKeyword\":\n      return neverKeyword\n    case \"Union\": {\n      const types: Array<AST> = []\n      let hasUndefined = false\n      for (const type of ast.types) {\n        const pruned = self(type)\n        if (pruned) {\n          hasUndefined = true\n          if (!isNeverKeyword(pruned)) {\n            types.push(pruned)\n          }\n        } else {\n          types.push(type)\n        }\n      }\n      if (hasUndefined) {\n        return Union.make(types)\n      }\n      break\n    }\n    case \"Suspend\":\n      return self(ast.f())\n    case \"Transformation\":\n      return onTransformation(ast)\n  }\n}\n", "/**\n * # Number\n *\n * This module provides utility functions and type class instances for working\n * with the `number` type in TypeScript. It includes functions for basic\n * arithmetic operations, as well as type class instances for `Equivalence` and\n * `Order`.\n *\n * ## Operations Reference\n *\n * | Category     | Operation                                  | Description                                             | Domain                         | Co-domain             |\n * | ------------ | ------------------------------------------ | ------------------------------------------------------- | ------------------------------ | --------------------- |\n * | constructors | {@link module:Number.parse}                | Safely parses a string to a number                      | `string`                       | `Option<number>`      |\n * |              |                                            |                                                         |                                |                       |\n * | math         | {@link module:Number.sum}                  | Adds two numbers                                        | `number`, `number`             | `number`              |\n * | math         | {@link module:Number.sumAll}               | Sums all numbers in a collection                        | `Iterable<number>`             | `number`              |\n * | math         | {@link module:Number.subtract}             | Subtracts one number from another                       | `number`, `number`             | `number`              |\n * | math         | {@link module:Number.multiply}             | Multiplies two numbers                                  | `number`, `number`             | `number`              |\n * | math         | {@link module:Number.multiplyAll}          | Multiplies all numbers in a collection                  | `Iterable<number>`             | `number`              |\n * | math         | {@link module:Number.divide}               | Safely divides handling division by zero                | `number`, `number`             | `Option<number>`      |\n * | math         | {@link module:Number.unsafeDivide}         | Divides but misbehaves for division by zero             | `number`, `number`             | `number`              |\n * | math         | {@link module:Number.remainder}            | Calculates remainder of division                        | `number`, `number`             | `number`              |\n * | math         | {@link module:Number.increment}            | Adds 1 to a number                                      | `number`                       | `number`              |\n * | math         | {@link module:Number.decrement}            | Subtracts 1 from a number                               | `number`                       | `number`              |\n * | math         | {@link module:Number.sign}                 | Determines the sign of a number                         | `number`                       | `Ordering`            |\n * | math         | {@link module:Number.nextPow2}             | Finds the next power of 2                               | `number`                       | `number`              |\n * | math         | {@link module:Number.round}                | Rounds a number with specified precision                | `number`, `number`             | `number`              |\n * |              |                                            |                                                         |                                |                       |\n * | predicates   | {@link module:Number.between}              | Checks if a number is in a range                        | `number`, `{minimum, maximum}` | `boolean`             |\n * | predicates   | {@link module:Number.lessThan}             | Checks if one number is less than another               | `number`, `number`             | `boolean`             |\n * | predicates   | {@link module:Number.lessThanOrEqualTo}    | Checks if one number is less than or equal              | `number`, `number`             | `boolean`             |\n * | predicates   | {@link module:Number.greaterThan}          | Checks if one number is greater than another            | `number`, `number`             | `boolean`             |\n * | predicates   | {@link module:Number.greaterThanOrEqualTo} | Checks if one number is greater or equal                | `number`, `number`             | `boolean`             |\n * |              |                                            |                                                         |                                |                       |\n * | guards       | {@link module:Number.isNumber}             | Type guard for JavaScript numbers                       | `unknown`                      | `boolean`             |\n * |              |                                            |                                                         |                                |                       |\n * | comparison   | {@link module:Number.min}                  | Returns the minimum of two numbers                      | `number`, `number`             | `number`              |\n * | comparison   | {@link module:Number.max}                  | Returns the maximum of two numbers                      | `number`, `number`             | `number`              |\n * | comparison   | {@link module:Number.clamp}                | Restricts a number to a range                           | `number`, `{minimum, maximum}` | `number`              |\n * |              |                                            |                                                         |                                |                       |\n * | instances    | {@link module:Number.Equivalence}          | Equivalence instance for numbers                        |                                | `Equivalence<number>` |\n * | instances    | {@link module:Number.Order}                | Order instance for numbers                              |                                | `Order<number>`       |\n * |              |                                            |                                                         |                                |                       |\n * | errors       | {@link module:Number.DivisionByZeroError}  | Error thrown by unsafeDivide                            |                                |                       |\n *\n * ## Composition Patterns and Type Safety\n *\n * When building function pipelines, understanding how types flow through\n * operations is critical:\n *\n * ### Composing with type-preserving operations\n *\n * Most operations in this module are type-preserving (`number → number`),\n * making them easily composable in pipelines:\n *\n * ```ts\n * import { pipe } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * const result = pipe(\n *   10,\n *   Number.increment, // number → number\n *   Number.multiply(2), // number → number\n *   Number.round(1) // number → number\n * ) // Result: number (21)\n * ```\n *\n * ### Working with Option results\n *\n * Operations that might fail (like division by zero) return Option types and\n * require Option combinators:\n *\n * ```ts\n * import { pipe, Option } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * const result = pipe(\n *   10,\n *   Number.divide(0), // number → Option<number>\n *   Option.getOrElse(() => 0) // Option<number> → number\n * ) // Result: number (0)\n * ```\n *\n * ### Composition best practices\n *\n * - Chain type-preserving operations for maximum composability\n * - Use Option combinators when working with potentially failing operations\n * - Consider using Effect for operations that might fail with specific errors\n * - Remember that all operations maintain JavaScript's floating-point precision\n *   limitations\n *\n * @module Number\n * @since 2.0.0\n * @see {@link module:BigInt} for more similar operations on `bigint` types\n * @see {@link module:BigDecimal} for more similar operations on `BigDecimal` types\n */\n\nimport * as equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport * as option from \"./internal/option.js\"\nimport * as _Iterable from \"./Iterable.js\"\nimport type { Option } from \"./Option.js\"\nimport * as order from \"./Order.js\"\nimport type { Ordering } from \"./Ordering.js\"\nimport * as predicate from \"./Predicate.js\"\n\n/**\n * Type guard that tests if a value is a member of the set of JavaScript\n * numbers.\n *\n * @memberof Number\n * @since 2.0.0\n * @category guards\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import * as Number from \"effect/Number\"\n *\n * // Regular numbers\n * assert.equal(Number.isNumber(2), true)\n * assert.equal(Number.isNumber(-3.14), true)\n * assert.equal(Number.isNumber(0), true)\n *\n * // Special numeric values\n * assert.equal(Number.isNumber(Infinity), true)\n * assert.equal(Number.isNumber(NaN), true)\n *\n * // Non-number values\n * assert.equal(Number.isNumber(\"2\"), false)\n * assert.equal(Number.isNumber(true), false)\n * assert.equal(Number.isNumber(null), false)\n * assert.equal(Number.isNumber(undefined), false)\n * assert.equal(Number.isNumber({}), false)\n * assert.equal(Number.isNumber([]), false)\n *\n * // Using as a type guard in conditionals\n * function processValue(value: unknown): string {\n *   if (Number.isNumber(value)) {\n *     // TypeScript now knows 'value' is a number\n *     return `Numeric value: ${value.toFixed(2)}`\n *   }\n *   return \"Not a number\"\n * }\n *\n * assert.strictEqual(processValue(42), \"Numeric value: 42.00\")\n * assert.strictEqual(processValue(\"hello\"), \"Not a number\")\n *\n * // Filtering for numbers in an array\n * const mixed = [1, \"two\", 3, false, 5]\n * const onlyNumbers = mixed.filter(Number.isNumber)\n * assert.equal(onlyNumbers, [1, 3, 5])\n * ```\n *\n * @param input - The value to test for membership in the set of JavaScript\n *   numbers\n *\n * @returns `true` if the input is a JavaScript number, `false` otherwise\n */\nexport const isNumber: (input: unknown) => input is number = predicate.isNumber\n\n/**\n * Returns the additive inverse of a number, effectively negating it.\n *\n * @memberof Number\n * @since 3.14.6\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { pipe } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * assert.equal(\n *   Number.negate(5), //\n *   -5\n * )\n *\n * assert.equal(\n *   Number.negate(-5), //\n *   5\n * )\n *\n * assert.equal(\n *   Number.negate(0), //\n *   0\n * )\n * ```\n *\n * @param n - The number value to be negated.\n *\n * @returns The negated number value.\n */\nexport const negate = (n: number): number => multiply(n, -1)\n\n/**\n * Performs addition in the set of JavaScript numbers.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { pipe } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * // Data-first style (direct application)\n * assert.equal(Number.sum(2, 3), 5)\n * assert.equal(Number.sum(-10, 5), -5)\n * assert.equal(Number.sum(0.1, 0.2), 0.30000000000000004) // Note: floating-point precision limitation\n *\n * // Data-last style (pipeable)\n * assert.equal(\n *   pipe(\n *     10,\n *     Number.sum(5) // 10 + 5 = 15\n *   ),\n *   15\n * )\n *\n * // Chaining multiple additions\n * assert.equal(\n *   pipe(\n *     1,\n *     Number.sum(2), // 1 + 2 = 3\n *     Number.sum(3), // 3 + 3 = 6\n *     Number.sum(4) // 6 + 4 = 10\n *   ),\n *   10\n * )\n *\n * // Identity property: a + 0 = a\n * assert.equal(Number.sum(42, 0), 42)\n *\n * // Commutative property: a + b = b + a\n * assert.equal(Number.sum(5, 3), Number.sum(3, 5))\n * ```\n */\nexport const sum: {\n  /**\n   * Returns a function that adds a specified number to its argument.\n   *\n   * @param that - The number to add to the input of the resulting function\n   *\n   * @returns A function that takes a number and returns the sum of that number\n   *   and `that`\n   */\n  (that: number): (self: number) => number\n\n  /**\n   * Adds two numbers together.\n   *\n   * @param self - The first addend\n   * @param that - The second addend\n   *\n   * @returns The sum of the two numbers\n   */\n  (self: number, that: number): number\n} = dual(2, (self: number, that: number): number => self + that)\n\n/**\n * Computes the sum of all elements in an iterable collection of numbers.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import * as Number from \"effect/Number\"\n *\n * // Basic sums\n * assert.equal(Number.sumAll([2, 3, 4]), 9) // 2 + 3 + 4 = 9\n * assert.equal(Number.sumAll([1.1, 2.2, 3.3]), 6.6) // 1.1 + 2.2 + 3.3 = 6.6\n *\n * // Empty collection returns the additive identity (0)\n * assert.equal(Number.sumAll([]), 0)\n *\n * // Single element collection\n * assert.equal(Number.sumAll([42]), 42)\n *\n * // Sums with negative numbers\n * assert.equal(Number.sumAll([2, -3, 4]), 3) // 2 + (-3) + 4 = 3\n * assert.equal(Number.sumAll([-2, -3, -4]), -9) // (-2) + (-3) + (-4) = -9\n *\n * // Works with any iterable\n * assert.equal(Number.sumAll(new Set([2, 3, 4])), 9)\n *\n * // Using with generated sequences\n * function* range(start: number, end: number) {\n *   for (let i = start; i <= end; i++) yield i\n * }\n *\n * // Compute sum of first 5 natural numbers: 1 + 2 + 3 + 4 + 5 = 15\n * assert.equal(Number.sumAll(range(1, 5)), 15)\n *\n * // Floating point precision example\n * assert.equal(\n *   Number.sumAll([0.1, 0.2]),\n *   0.30000000000000004 // Note IEEE 754 precision limitation\n * )\n * ```\n *\n * @param collection - An `iterable` containing the `numbers` to sum\n *\n * @returns The sum of all numbers in the collection, or 0 if the collection is\n *   empty\n */\nexport const sumAll = (collection: Iterable<number>): number => _Iterable.reduce(collection, 0, sum)\n\n/**\n * Performs subtraction in the set of JavaScript numbers.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { pipe } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * // Data-first style (direct application)\n * assert.equal(Number.subtract(2, 3), -1) // 2 - 3 = -1\n * assert.equal(Number.subtract(10, 5), 5) // 10 - 5 = 5\n * assert.equal(Number.subtract(0.3, 0.1), 0.19999999999999998) // Note: floating-point precision limitation\n *\n * // Data-last style (pipeable)\n * assert.equal(\n *   pipe(\n *     10,\n *     Number.subtract(5) // 10 - 5 = 5\n *   ),\n *   5\n * )\n *\n * // Chaining multiple subtractions\n * assert.equal(\n *   pipe(\n *     20,\n *     Number.subtract(5), // 20 - 5 = 15\n *     Number.subtract(3), // 15 - 3 = 12\n *     Number.subtract(2) // 12 - 2 = 10\n *   ),\n *   10\n * )\n *\n * // Right identity property: a - 0 = a\n * assert.equal(Number.subtract(42, 0), 42)\n *\n * // Self-annihilation property: a - a = 0\n * assert.equal(Number.subtract(42, 42), 0)\n *\n * // Non-commutative property: a - b ≠ b - a\n * assert.equal(Number.subtract(5, 3), 2) // 5 - 3 = 2\n * assert.equal(Number.subtract(3, 5), -2) // 3 - 5 = -2\n *\n * // Inverse relation: a - b = -(b - a)\n * assert.equal(Number.subtract(5, 3), -Number.subtract(3, 5))\n * ```\n */\nexport const subtract: {\n  /**\n   * Returns a function that subtracts a specified number from its argument.\n   *\n   * @param subtrahend - The number to subtract from the input of the resulting\n   *   function\n   *\n   * @returns A function that takes a minuend and returns the difference of\n   *   subtracting the subtrahend from it\n   */\n  (subtrahend: number): (minuend: number) => number\n\n  /**\n   * Subtracts the subtrahend from the minuend and returns the difference.\n   *\n   * @param minuend - The number from which another number is to be subtracted\n   * @param subtrahend - The number to subtract from the minuend\n   *\n   * @returns The difference of the minuend minus the subtrahend\n   */\n  (minuend: number, subtrahend: number): number\n} = dual(\n  2,\n  (minuend: number, subtrahend: number): number => minuend - subtrahend\n)\n\n/**\n * Performs **multiplication** in the set of JavaScript numbers.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { pipe } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * // Data-first style (direct application)\n * assert.equal(Number.multiply(2, 3), 6) // 2 × 3 = 6\n * assert.equal(Number.multiply(-4, 5), -20) // (-4) × 5 = -20\n * assert.equal(Number.multiply(-3, -2), 6) // (-3) × (-2) = 6\n * assert.equal(Number.multiply(0.1, 0.2), 0.020000000000000004) // Note: floating-point precision limitation\n *\n * // Data-last style (pipeable)\n * assert.equal(\n *   pipe(\n *     10,\n *     Number.multiply(5) // 10 × 5 = 50\n *   ),\n *   50\n * )\n *\n * // Chaining multiple multiplications\n * assert.equal(\n *   pipe(\n *     2,\n *     Number.multiply(3), // 2 × 3 = 6\n *     Number.multiply(4), // 6 × 4 = 24\n *     Number.multiply(0.5) // 24 × 0.5 = 12\n *   ),\n *   12\n * )\n *\n * // Identity property: a × 1 = a\n * assert.equal(Number.multiply(42, 1), 42)\n *\n * // Zero property: a × 0 = 0\n * assert.equal(Number.multiply(42, 0), 0)\n *\n * // Commutative property: a × b = b × a\n * assert.equal(Number.multiply(5, 3), Number.multiply(3, 5))\n *\n * // Associative property: (a × b) × c = a × (b × c)\n * const a = 2,\n *   b = 3,\n *   c = 4\n * assert.equal(\n *   Number.multiply(Number.multiply(a, b), c),\n *   Number.multiply(a, Number.multiply(b, c))\n * )\n * ```\n */\nexport const multiply: {\n  /**\n   * Returns a function that multiplies a specified number with its argument.\n   *\n   * @param multiplicand - The number to multiply with the input of the\n   *   resulting function\n   *\n   * @returns A function that takes a multiplier and returns the product of that\n   *   multiplier and the multiplicand\n   */\n  (multiplicand: number): (multiplier: number) => number\n\n  /**\n   * Multiplies two numbers together.\n   *\n   * @param multiplier - The first factor\n   * @param multiplicand - The second factor\n   *\n   * @returns The product of the two numbers\n   */\n  (multiplier: number, multiplicand: number): number\n} = dual(\n  2,\n  (multiplier: number, multiplicand: number): number => multiplier * multiplicand\n)\n\n/**\n * Computes the product of all elements in an iterable collection of numbers.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import * as Number from \"effect/Number\"\n *\n * // Basic products\n * assert.equal(Number.multiplyAll([2, 3, 4]), 24) // 2 × 3 × 4 = 24\n * assert.equal(Number.multiplyAll([1.5, 2, 3]), 9) // 1.5 × 2 × 3 = 9\n *\n * // Empty collection returns the multiplicative identity (1)\n * assert.equal(Number.multiplyAll([]), 1)\n *\n * // Single element collection\n * assert.equal(Number.multiplyAll([42]), 42)\n *\n * // Products with negative numbers\n * assert.equal(Number.multiplyAll([2, -3, 4]), -24) // 2 × (-3) × 4 = -24\n * assert.equal(Number.multiplyAll([-2, -3]), 6) // (-2) × (-3) = 6\n *\n * // Zero property - if any element is zero, product is zero\n * assert.equal(Number.multiplyAll([2, 0, 3]), 0)\n *\n * // Works with any iterable\n * assert.equal(Number.multiplyAll(new Set([2, 3, 4])), 24)\n *\n * // Using with generated sequences\n * function* range(start: number, end: number) {\n *   for (let i = start; i <= end; i++) yield i\n * }\n *\n * // Compute factorial: 5! = 5 × 4 × 3 × 2 × 1 = 120\n * assert.equal(Number.multiplyAll(range(1, 5)), 120)\n * ```\n *\n * @param collection - An `iterable` containing the `numbers` to multiply\n *\n * @returns The product of all numbers in the collection, or 1 if the collection\n *   is empty\n */\nexport const multiplyAll = (collection: Iterable<number>): number => {\n  let out = 1\n  for (const n of collection) {\n    if (n === 0) {\n      return 0\n    }\n    out *= n\n  }\n  return out\n}\n\n/**\n * Performs division in the set of JavaScript numbers, returning the result\n * wrapped in an `Option` to handle division by zero.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { pipe, Option } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * // Data-first style (direct application)\n * assert.equal(Number.divide(6, 3), Option.some(2)) // 6 ÷ 3 = 2\n * assert.equal(Number.divide(-8, 4), Option.some(-2)) // (-8) ÷ 4 = -2\n * assert.equal(Number.divide(-10, -5), Option.some(2)) // (-10) ÷ (-5) = 2\n * assert.equal(Number.divide(1, 3), Option.some(0.3333333333333333)) // Note: floating-point approximation\n *\n * // Handling division by zero\n * assert.equal(Number.divide(6, 0), Option.none()) // 6 ÷ 0 is undefined\n *\n * // Data-last style (pipeable)\n * assert.equal(\n *   pipe(\n *     10,\n *     Number.divide(2) // 10 ÷ 2 = 5\n *   ),\n *   Option.some(5)\n * )\n *\n * // Chaining multiple divisions using Option combinators\n * assert.equal(\n *   pipe(\n *     Option.some(24),\n *     Option.flatMap((n) => Number.divide(n, 2)), // 24 ÷ 2 = 12\n *     Option.flatMap(Number.divide(3)), // 12 ÷ 3 = 4\n *     Option.flatMap(Number.divide(2)) // 4 ÷ 2 = 2\n *   ),\n *   Option.some(2)\n * )\n *\n * // Division-by-one property: a ÷ 1 = a\n * assert.equal(Number.divide(42, 1), Option.some(42))\n *\n * // Self-division property: a ÷ a = 1 (for a ≠ 0)\n * assert.equal(Number.divide(42, 42), Option.some(1))\n *\n * // Non-commutative property: a ÷ b ≠ b ÷ a\n * assert.notDeepStrictEqual(\n *   Number.divide(6, 3), // 6 ÷ 3 = 2\n *   Number.divide(3, 6) // 3 ÷ 6 = 0.5\n * )\n * ```\n */\nexport const divide: {\n  /**\n   * Returns a function that divides its input by a specified divisor.\n   *\n   * @param divisor - The number to divide by\n   *\n   * @returns A function that takes a dividend and returns the quotient wrapped\n   *   in an Option (Option.none() if divisor is 0)\n   */\n  (divisor: number): (dividend: number) => Option<number>\n\n  /**\n   * Divides the dividend by the divisor and returns the quotient wrapped in an\n   * Option.\n   *\n   * @param dividend - The number to be divided\n   * @param divisor - The number to divide by\n   *\n   * @returns Some(quotient) if the divisor is not 0, None otherwise\n   */\n  (dividend: number, divisor: number): Option<number>\n} = dual(2, (dividend: number, divisor: number) => divisor === 0 ? option.none : option.some(dividend / divisor))\n\n/**\n * Performs division in the set of JavaScript numbers, but misbehaves for\n * division by zero.\n *\n * Unlike {@link module:Number.divide} which returns an Option, this function\n * directly returns a number or `Infinity` or `NaN`.\n *\n * - If the `divisor` is zero, it returns `Infinity`.\n * - If both the `dividend` and the `divisor` are zero, then it returns `NaN`.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { pipe } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * // Data-first style (direct application)\n * assert.equal(Number.unsafeDivide(6, 3), 2) // 6 ÷ 3 = 2\n * assert.equal(Number.unsafeDivide(-8, 4), -2) // (-8) ÷ 4 = -2\n * assert.equal(Number.unsafeDivide(-10, -5), 2) // (-10) ÷ (-5) = 2\n * assert.equal(Number.unsafeDivide(1, 3), 0.3333333333333333)\n *\n * // Data-last style (pipeable)\n * assert.equal(\n *   pipe(\n *     10,\n *     Number.unsafeDivide(2) // 10 ÷ 2 = 5\n *   ),\n *   5\n * )\n *\n * // Chaining multiple divisions\n * assert.equal(\n *   pipe(\n *     24,\n *     Number.unsafeDivide(2), // 24 ÷ 2 = 12\n *     Number.unsafeDivide(3), // 12 ÷ 3 = 4\n *     Number.unsafeDivide(2) // 4 ÷ 2 = 2\n *   ),\n *   2\n * )\n *\n * assert.equal(Number.unsafeDivide(6, 0), Infinity)\n *\n * assert.equal(Number.unsafeDivide(0, 0), NaN)\n *\n * // Compare with safe division\n * const safeResult = Number.divide(6, 3) // Option.some(2)\n * const unsafeResult = Number.unsafeDivide(6, 3) // 2 directly\n * ```\n *\n * @throws - An {@link module:Number.DivisionByZeroError} if the divisor is zero.\n * @see {@link module:Number.divide} - Safe division returning an Option\n */\nexport const unsafeDivide: {\n  /**\n   * Returns a function that divides its input by a specified divisor.\n   *\n   * @param divisor - The number to divide by\n   *\n   * @returns A function that takes a dividend and returns the quotient\n   * @throws - An {@link module:Number.DivisionByZeroError} if the divisor is\n   *   zero\n   */\n  (divisor: number): (dividend: number) => number\n\n  /**\n   * Divides the dividend by the divisor and returns the quotient.\n   *\n   * If the divisor is zero, it returns Infinity.\n   *\n   * @param dividend - The number to be divided\n   * @param divisor - The number to divide by\n   *\n   * @returns The quotient of the division\n   */\n  (dividend: number, divisor: number): number\n} = dual(2, (dividend: number, divisor: number): number => dividend / divisor)\n\n/**\n * Returns the result of adding `1` to a given number.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { increment } from \"effect/Number\"\n *\n * assert.equal(increment(2), 3)\n * ```\n */\nexport const increment = (n: number): number => sum(n, 1)\n\n/**\n * Decrements a number by `1`.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { decrement } from \"effect/Number\"\n *\n * assert.equal(decrement(3), 2)\n * ```\n */\nexport const decrement = (n: number): number => subtract(n, 1)\n\n/**\n * @memberof Number\n * @since 2.0.0\n * @category instances\n */\nexport const Equivalence: equivalence.Equivalence<number> = equivalence.number\n\n/**\n * @memberof Number\n * @since 2.0.0\n * @category instances\n */\nexport const Order: order.Order<number> = order.number\n\n/**\n * Returns `true` if the first argument is less than the second, otherwise\n * `false`.\n *\n * @memberof Number\n * @since 2.0.0\n * @category predicates\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { lessThan } from \"effect/Number\"\n *\n * assert.equal(lessThan(2, 3), true)\n * assert.equal(lessThan(3, 3), false)\n * assert.equal(lessThan(4, 3), false)\n * ```\n */\nexport const lessThan: {\n  /**\n   * Returns `true` if the first argument is less than the second, otherwise\n   * `false`.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { lessThan } from \"effect/Number\"\n   *\n   * assert.equal(lessThan(2, 3), true)\n   * assert.equal(lessThan(3, 3), false)\n   * assert.equal(lessThan(4, 3), false)\n   * ```\n   */\n  (that: number): (self: number) => boolean\n  /**\n   * Returns `true` if the first argument is less than the second, otherwise\n   * `false`.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { lessThan } from \"effect/Number\"\n   *\n   * assert.equal(lessThan(2, 3), true)\n   * assert.equal(lessThan(3, 3), false)\n   * assert.equal(lessThan(4, 3), false)\n   * ```\n   */\n  (self: number, that: number): boolean\n} = order.lessThan(Order)\n\n/**\n * Returns a function that checks if a given `number` is less than or equal to\n * the provided one.\n *\n * @memberof Number\n * @since 2.0.0\n * @category predicates\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { lessThanOrEqualTo } from \"effect/Number\"\n *\n * assert.equal(lessThanOrEqualTo(2, 3), true)\n * assert.equal(lessThanOrEqualTo(3, 3), true)\n * assert.equal(lessThanOrEqualTo(4, 3), false)\n * ```\n */\nexport const lessThanOrEqualTo: {\n  /**\n   * Returns a function that checks if a given `number` is less than or equal to\n   * the provided one.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { lessThanOrEqualTo } from \"effect/Number\"\n   *\n   * assert.equal(lessThanOrEqualTo(2, 3), true)\n   * assert.equal(lessThanOrEqualTo(3, 3), true)\n   * assert.equal(lessThanOrEqualTo(4, 3), false)\n   * ```\n   */\n  (that: number): (self: number) => boolean\n  /**\n   * Returns a function that checks if a given `number` is less than or equal to\n   * the provided one.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { lessThanOrEqualTo } from \"effect/Number\"\n   *\n   * assert.equal(lessThanOrEqualTo(2, 3), true)\n   * assert.equal(lessThanOrEqualTo(3, 3), true)\n   * assert.equal(lessThanOrEqualTo(4, 3), false)\n   * ```\n   */\n  (self: number, that: number): boolean\n} = order.lessThanOrEqualTo(Order)\n\n/**\n * Returns `true` if the first argument is greater than the second, otherwise\n * `false`.\n *\n * @memberof Number\n * @since 2.0.0\n * @category predicates\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { greaterThan } from \"effect/Number\"\n *\n * assert.equal(greaterThan(2, 3), false)\n * assert.equal(greaterThan(3, 3), false)\n * assert.equal(greaterThan(4, 3), true)\n * ```\n */\nexport const greaterThan: {\n  /**\n   * Returns `true` if the first argument is greater than the second, otherwise\n   * `false`.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { greaterThan } from \"effect/Number\"\n   *\n   * assert.equal(greaterThan(2, 3), false)\n   * assert.equal(greaterThan(3, 3), false)\n   * assert.equal(greaterThan(4, 3), true)\n   * ```\n   */\n  (that: number): (self: number) => boolean\n  /**\n   * Returns `true` if the first argument is greater than the second, otherwise\n   * `false`.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { greaterThan } from \"effect/Number\"\n   *\n   * assert.equal(greaterThan(2, 3), false)\n   * assert.equal(greaterThan(3, 3), false)\n   * assert.equal(greaterThan(4, 3), true)\n   * ```\n   */\n  (self: number, that: number): boolean\n} = order.greaterThan(Order)\n\n/**\n * Returns a function that checks if a given `number` is greater than or equal\n * to the provided one.\n *\n * @memberof Number\n * @since 2.0.0\n * @category predicates\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { greaterThanOrEqualTo } from \"effect/Number\"\n *\n * assert.equal(greaterThanOrEqualTo(2, 3), false)\n * assert.equal(greaterThanOrEqualTo(3, 3), true)\n * assert.equal(greaterThanOrEqualTo(4, 3), true)\n * ```\n */\nexport const greaterThanOrEqualTo: {\n  /**\n   * Returns a function that checks if a given `number` is greater than or equal\n   * to the provided one.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { greaterThanOrEqualTo } from \"effect/Number\"\n   *\n   * assert.equal(greaterThanOrEqualTo(2, 3), false)\n   * assert.equal(greaterThanOrEqualTo(3, 3), true)\n   * assert.equal(greaterThanOrEqualTo(4, 3), true)\n   * ```\n   */\n  (that: number): (self: number) => boolean\n  /**\n   * Returns a function that checks if a given `number` is greater than or equal\n   * to the provided one.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { greaterThanOrEqualTo } from \"effect/Number\"\n   *\n   * assert.equal(greaterThanOrEqualTo(2, 3), false)\n   * assert.equal(greaterThanOrEqualTo(3, 3), true)\n   * assert.equal(greaterThanOrEqualTo(4, 3), true)\n   * ```\n   */\n  (self: number, that: number): boolean\n} = order.greaterThanOrEqualTo(Order)\n\n/**\n * Checks if a `number` is between a `minimum` and `maximum` value (inclusive).\n *\n * @memberof Number\n * @since 2.0.0\n * @category predicates\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { Number } from \"effect\"\n *\n * const between = Number.between({ minimum: 0, maximum: 5 })\n *\n * assert.equal(between(3), true)\n * assert.equal(between(-1), false)\n * assert.equal(between(6), false)\n * ```\n */\nexport const between: {\n  /**\n   * Checks if a `number` is between a `minimum` and `maximum` value (inclusive).\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { Number } from \"effect\"\n   *\n   * const between = Number.between({ minimum: 0, maximum: 5 })\n   *\n   * assert.equal(between(3), true)\n   * assert.equal(between(-1), false)\n   * assert.equal(between(6), false)\n   * ```\n   */\n  (options: { minimum: number; maximum: number }): (self: number) => boolean\n  /**\n   * Checks if a `number` is between a `minimum` and `maximum` value (inclusive).\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { Number } from \"effect\"\n   *\n   * const between = Number.between({ minimum: 0, maximum: 5 })\n   *\n   * assert.equal(between(3), true)\n   * assert.equal(between(-1), false)\n   * assert.equal(between(6), false)\n   * ```\n   */\n  (\n   self: number,\n   options: {\n     minimum: number\n     maximum: number\n   }\n  ): boolean\n} = order.between(Order)\n\n/**\n * Restricts the given `number` to be within the range specified by the\n * `minimum` and `maximum` values.\n *\n * - If the `number` is less than the `minimum` value, the function returns the\n *   `minimum` value.\n * - If the `number` is greater than the `maximum` value, the function returns the\n *   `maximum` value.\n * - Otherwise, it returns the original `number`.\n *\n * @memberof Number\n * @since 2.0.0\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { Number } from \"effect\"\n *\n * const clamp = Number.clamp({ minimum: 1, maximum: 5 })\n *\n * assert.equal(clamp(3), 3)\n * assert.equal(clamp(0), 1)\n * assert.equal(clamp(6), 5)\n * ```\n */\nexport const clamp: {\n  /**\n   * Restricts the given `number` to be within the range specified by the\n   * `minimum` and `maximum` values.\n   *\n   * - If the `number` is less than the `minimum` value, the function returns the\n   *   `minimum` value.\n   * - If the `number` is greater than the `maximum` value, the function returns the\n   *   `maximum` value.\n   * - Otherwise, it returns the original `number`.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { Number } from \"effect\"\n   *\n   * const clamp = Number.clamp({ minimum: 1, maximum: 5 })\n   *\n   * assert.equal(clamp(3), 3)\n   * assert.equal(clamp(0), 1)\n   * assert.equal(clamp(6), 5)\n   * ```\n   */\n  (options: { minimum: number; maximum: number }): (self: number) => number\n  /**\n   * Restricts the given `number` to be within the range specified by the\n   * `minimum` and `maximum` values.\n   *\n   * - If the `number` is less than the `minimum` value, the function returns the\n   *   `minimum` value.\n   * - If the `number` is greater than the `maximum` value, the function returns the\n   *   `maximum` value.\n   * - Otherwise, it returns the original `number`.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { Number } from \"effect\"\n   *\n   * const clamp = Number.clamp({ minimum: 1, maximum: 5 })\n   *\n   * assert.equal(clamp(3), 3)\n   * assert.equal(clamp(0), 1)\n   * assert.equal(clamp(6), 5)\n   * ```\n   */\n  (\n   self: number,\n   options: {\n     minimum: number\n     maximum: number\n   }\n  ): number\n} = order.clamp(Order)\n\n/**\n * Returns the minimum between two `number`s.\n *\n * @memberof Number\n * @since 2.0.0\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { min } from \"effect/Number\"\n *\n * assert.equal(min(2, 3), 2)\n * ```\n */\nexport const min: {\n  /**\n   * Returns the minimum between two `number`s.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { min } from \"effect/Number\"\n   *\n   * assert.equal(min(2, 3), 2)\n   * ```\n   */\n  (that: number): (self: number) => number\n  /**\n   * Returns the minimum between two `number`s.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { min } from \"effect/Number\"\n   *\n   * assert.equal(min(2, 3), 2)\n   * ```\n   */\n  (self: number, that: number): number\n} = order.min(Order)\n\n/**\n * Returns the maximum between two `number`s.\n *\n * @memberof Number\n * @since 2.0.0\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { max } from \"effect/Number\"\n *\n * assert.equal(max(2, 3), 3)\n * ```\n */\nexport const max: {\n  /**\n   * Returns the maximum between two `number`s.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { max } from \"effect/Number\"\n   *\n   * assert.equal(max(2, 3), 3)\n   * ```\n   */\n  (that: number): (self: number) => number\n  /**\n   * Returns the maximum between two `number`s.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { max } from \"effect/Number\"\n   *\n   * assert.equal(max(2, 3), 3)\n   * ```\n   */\n  (self: number, that: number): number\n} = order.max(Order)\n\n/**\n * Determines the sign of a given `number`.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { sign } from \"effect/Number\"\n *\n * assert.equal(sign(-5), -1)\n * assert.equal(sign(0), 0)\n * assert.equal(sign(5), 1)\n * ```\n */\nexport const sign = (n: number): Ordering => Order(n, 0)\n\n/**\n * Returns the remainder left over when one operand is divided by a second\n * operand.\n *\n * It always takes the sign of the dividend.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { remainder } from \"effect/Number\"\n *\n * assert.equal(remainder(2, 2), 0)\n * assert.equal(remainder(3, 2), 1)\n * assert.equal(remainder(-4, 2), -0)\n * ```\n */\nexport const remainder: {\n  /**\n   * Returns the remainder left over when one operand is divided by a second\n   * operand.\n   *\n   * It always takes the sign of the dividend.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category math\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { remainder } from \"effect/Number\"\n   *\n   * assert.equal(remainder(2, 2), 0)\n   * assert.equal(remainder(3, 2), 1)\n   * assert.equal(remainder(-4, 2), -0)\n   * ```\n   */\n  (divisor: number): (dividend: number) => number\n  /**\n   * Returns the remainder left over when one operand is divided by a second\n   * operand.\n   *\n   * It always takes the sign of the dividend.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category math\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { remainder } from \"effect/Number\"\n   *\n   * assert.equal(remainder(2, 2), 0)\n   * assert.equal(remainder(3, 2), 1)\n   * assert.equal(remainder(-4, 2), -0)\n   * ```\n   */\n  (dividend: number, divisor: number): number\n} = dual(2, (dividend: number, divisor: number): number => {\n  // https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\n  const selfDecCount = (dividend.toString().split(\".\")[1] || \"\").length\n  const divisorDecCount = (divisor.toString().split(\".\")[1] || \"\").length\n  const decCount = selfDecCount > divisorDecCount ? selfDecCount : divisorDecCount\n  const selfInt = parseInt(dividend.toFixed(decCount).replace(\".\", \"\"))\n  const divisorInt = parseInt(divisor.toFixed(decCount).replace(\".\", \"\"))\n  return (selfInt % divisorInt) / Math.pow(10, decCount)\n})\n\n/**\n * Returns the next power of 2 greater than or equal to the given number.\n *\n * - For `positive` inputs, returns the smallest power of 2 that is >= the input\n * - For `zero`, returns 2\n * - For `negative` inputs, returns NaN (as logarithms of negative numbers are\n *   undefined)\n * - For `NaN` input, returns NaN\n * - For `Infinity`, returns Infinity\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { nextPow2 } from \"effect/Number\"\n *\n * assert.equal(nextPow2(5), 8)\n * assert.equal(nextPow2(17), 32)\n * assert.equal(nextPow2(0), 2)\n * assert.equal(Number.isNaN(nextPow2(-1)), true) // Negative inputs result in NaN\n * ```\n */\nexport const nextPow2 = (n: number): number => {\n  const nextPow = Math.ceil(Math.log(n) / Math.log(2))\n  return Math.max(Math.pow(2, nextPow), 2)\n}\n\n/**\n * Tries to parse a `number` from a `string` using the `Number()` function. The\n * following special string values are supported: \"NaN\", \"Infinity\",\n * \"-Infinity\".\n *\n * @memberof Number\n * @since 2.0.0\n * @category constructors\n */\nexport const parse: {\n  /**\n   * Tries to parse a `number` from a `string` using the `Number()` function. The\n   * following special string values are supported: \"NaN\", \"Infinity\",\n   * \"-Infinity\".\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category constructors\n   */\n  (s: string): Option<number>\n} = (s) => {\n  if (s === \"NaN\") {\n    return option.some(NaN)\n  }\n  if (s === \"Infinity\") {\n    return option.some(Infinity)\n  }\n  if (s === \"-Infinity\") {\n    return option.some(-Infinity)\n  }\n  if (s.trim() === \"\") {\n    return option.none\n  }\n  const n = Number(s)\n  return Number.isNaN(n) ? option.none : option.some(n)\n}\n\n/**\n * Returns the number rounded with the given precision.\n *\n * @memberof Number\n * @since 3.8.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { round } from \"effect/Number\"\n *\n * assert.equal(round(1.1234, 2), 1.12)\n * assert.equal(round(1.567, 2), 1.57)\n * ```\n */\nexport const round: {\n  /**\n   * Returns the number rounded with the given precision.\n   *\n   * @memberof Number\n   * @since 3.8.0\n   * @category math\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { round } from \"effect/Number\"\n   *\n   * assert.equal(round(1.1234, 2), 1.12)\n   * assert.equal(round(1.567, 2), 1.57)\n   * ```\n   */\n  (precision: number): (self: number) => number\n  /**\n   * Returns the number rounded with the given precision.\n   *\n   * @memberof Number\n   * @since 3.8.0\n   * @category math\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { round } from \"effect/Number\"\n   *\n   * assert.equal(round(1.1234, 2), 1.12)\n   * assert.equal(round(1.567, 2), 1.57)\n   * ```\n   */\n  (self: number, precision: number): number\n} = dual(2, (self: number, precision: number): number => {\n  const factor = Math.pow(10, precision)\n  return Math.round(self * factor) / factor\n})\n", "/**\n * This module provides utility functions for working with RegExp in TypeScript.\n *\n * @since 2.0.0\n */\nimport * as predicate from \"./Predicate.js\"\n\n/**\n * Tests if a value is a `RegExp`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { RegExp } from \"effect\"\n *\n * assert.deepStrictEqual(RegExp.isRegExp(/a/), true)\n * assert.deepStrictEqual(RegExp.isRegExp(\"a\"), false)\n * ```\n *\n * @category guards\n * @since 3.9.0\n */\nexport const isRegExp: (input: unknown) => input is RegExp = predicate.isRegExp\n\n/**\n * Escapes special characters in a regular expression pattern.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { RegExp } from \"effect\"\n *\n * assert.deepStrictEqual(RegExp.escape(\"a*b\"), \"a\\\\*b\")\n * ```\n *\n * @since 2.0.0\n */\nexport const escape = (string: string): string => string.replace(/[/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")\n", "/**\n * This module provides a data structure called `Context` that can be used for dependency injection in effectful\n * programs. It is essentially a table mapping `Tag`s to their implementations (called `Service`s), and can be used to\n * manage dependencies in a type-safe way. The `Context` data structure is essentially a way of providing access to a set\n * of related services that can be passed around as a single unit. This module provides functions to create, modify, and\n * query the contents of a `Context`, as well as a number of utility types for working with tags and services.\n *\n * @since 2.0.0\n */\nimport type * as Effect from \"./Effect.js\"\nimport type { Equal } from \"./Equal.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as internal from \"./internal/context.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Types from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport const TagTypeId: unique symbol = internal.TagTypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TagTypeId = typeof TagTypeId\n\n/**\n * @since 3.5.9\n * @category models\n */\nexport interface Tag<in out Id, in out Value> extends Pipeable, Inspectable, ReadonlyTag<Id, Value> {\n  readonly _op: \"Tag\"\n  readonly Service: Value\n  readonly Identifier: Id\n  readonly [TagTypeId]: {\n    readonly _Service: Types.Invariant<Value>\n    readonly _Identifier: Types.Invariant<Id>\n  }\n  of(self: Value): Value\n  context(self: Value): Context<Id>\n  readonly stack?: string | undefined\n  readonly key: string\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: TagUnify<this>\n  [Unify.ignoreSymbol]?: TagUnifyIgnore\n}\n\n/**\n * @since 3.5.9\n * @category models\n */\nexport interface ReadonlyTag<in out Id, out Value> extends Pipeable, Inspectable, Effect.Effect<Value, never, Id> {\n  readonly _op: \"Tag\"\n  readonly Service: Value\n  readonly Identifier: Id\n  readonly [TagTypeId]: {\n    readonly _Service: Types.Covariant<Value>\n    readonly _Identifier: Types.Invariant<Id>\n  }\n  readonly stack?: string | undefined\n  readonly key: string\n}\n\n/**\n * @since 3.11.0\n * @category symbol\n */\nexport const ReferenceTypeId: unique symbol = internal.ReferenceTypeId\n\n/**\n * @since 3.11.0\n * @category symbol\n */\nexport type ReferenceTypeId = typeof ReferenceTypeId\n\n/**\n * @since 3.11.0\n * @category models\n */\nexport interface Reference<in out Id, in out Value> extends Pipeable, Inspectable {\n  readonly [ReferenceTypeId]: ReferenceTypeId\n  readonly defaultValue: () => Value\n\n  readonly _op: \"Tag\"\n  readonly Service: Value\n  readonly Identifier: Id\n  readonly [TagTypeId]: {\n    readonly _Service: Types.Invariant<Value>\n    readonly _Identifier: Types.Invariant<Id>\n  }\n  of(self: Value): Value\n  context(self: Value): Context<Id>\n  readonly stack?: string | undefined\n  readonly key: string\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: TagUnify<this>\n  [Unify.ignoreSymbol]?: TagUnifyIgnore\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface TagClassShape<Id, Shape> {\n  readonly [TagTypeId]: TagTypeId\n  readonly Type: Shape\n  readonly Id: Id\n}\n\n// TODO(4.0): move key narrowing to the Tag interface\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface TagClass<Self, Id extends string, Type> extends Tag<Self, Type> {\n  new(_: never): TagClassShape<Id, Type>\n  readonly key: Id\n}\n\n// TODO(4.0): move key narrowing to the Reference interface\n/**\n * @since 3.11.0\n * @category models\n */\nexport interface ReferenceClass<Self, Id extends string, Type> extends Reference<Self, Type> {\n  new(_: never): TagClassShape<Id, Type>\n  readonly key: Id\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface TagUnify<A extends { [Unify.typeSymbol]?: any }> {\n  Tag?: () => Extract<A[Unify.typeSymbol], Tag<any, any>>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface TagUnifyIgnore {}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Tag {\n  /**\n   * @since 2.0.0\n   */\n  export type Service<T extends Tag<any, any> | TagClassShape<any, any>> = T extends Tag<any, any> ? T[\"Service\"]\n    : T extends TagClassShape<any, infer A> ? A\n    : never\n  /**\n   * @since 2.0.0\n   */\n  export type Identifier<T extends Tag<any, any> | TagClassShape<any, any>> = T extends Tag<any, any> ? T[\"Identifier\"]\n    : T extends TagClassShape<any, any> ? T\n    : never\n}\n\n/**\n * Creates a new `Tag` instance with an optional key parameter.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.GenericTag(\"PORT\").key === Context.GenericTag(\"PORT\").key, true)\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const GenericTag: <Identifier, Service = Identifier>(key: string) => Tag<Identifier, Service> =\n  internal.makeGenericTag\n\nconst TypeId: unique symbol = internal.TypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type ValidTagsById<R> = R extends infer S ? Tag<S, any> : never\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Context<in Services> extends Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _Services: Types.Contravariant<Services>\n  }\n  readonly unsafeMap: Map<string, any>\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const unsafeMake: <Services>(unsafeMap: Map<string, any>) => Context<Services> = internal.makeContext\n\n/**\n * Checks if the provided argument is a `Context`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n * ```\n *\n * @since 2.0.0\n * @category guards\n */\nexport const isContext: (input: unknown) => input is Context<never> = internal.isContext\n\n/**\n * Checks if the provided argument is a `Tag`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isTag(Context.GenericTag(\"Tag\")), true)\n * ```\n *\n * @since 2.0.0\n * @category guards\n */\nexport const isTag: (input: unknown) => input is Tag<any, any> = internal.isTag\n\n/**\n * Checks if the provided argument is a `Reference`.\n *\n * @since 3.11.0\n * @category guards\n * @experimental\n */\nexport const isReference: (u: unknown) => u is Reference<any, any> = internal.isReference\n\n/**\n * Returns an empty `Context`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: () => Context<never> = internal.empty\n\n/**\n * Creates a new `Context` with a single service associated to the tag.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <I, S>(tag: Tag<I, S>, service: Types.NoInfer<S>) => Context<I> = internal.make\n\n/**\n * Adds a service to a given `Context`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context, pipe } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = Context.make(Port, { PORT: 8080 })\n *\n * const Services = pipe(\n *   someContext,\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n * ```\n *\n * @since 2.0.0\n */\nexport const add: {\n  /**\n   * Adds a service to a given `Context`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Context, pipe } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const someContext = Context.make(Port, { PORT: 8080 })\n   *\n   * const Services = pipe(\n   *   someContext,\n   *   Context.add(Timeout, { TIMEOUT: 5000 })\n   * )\n   *\n   * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n   * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <I, S>(tag: Tag<I, S>, service: Types.NoInfer<S>): <Services>(self: Context<Services>) => Context<Services | I>\n  /**\n   * Adds a service to a given `Context`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Context, pipe } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const someContext = Context.make(Port, { PORT: 8080 })\n   *\n   * const Services = pipe(\n   *   someContext,\n   *   Context.add(Timeout, { TIMEOUT: 5000 })\n   * )\n   *\n   * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n   * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <Services, I, S>(self: Context<Services>, tag: Tag<I, S>, service: Types.NoInfer<S>): Context<Services | I>\n} = internal.add\n\n/**\n * Get a service from the context that corresponds to the given tag.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n * ```\n *\n * @since 2.0.0\n * @category getters\n */\nexport const get: {\n  /**\n   * Get a service from the context that corresponds to the given tag.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Context } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const Services = pipe(\n   *   Context.make(Port, { PORT: 8080 }),\n   *   Context.add(Timeout, { TIMEOUT: 5000 })\n   * )\n   *\n   * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n   * ```\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <I, S>(tag: Reference<I, S>): <Services>(self: Context<Services>) => S\n  /**\n   * Get a service from the context that corresponds to the given tag.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Context } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const Services = pipe(\n   *   Context.make(Port, { PORT: 8080 }),\n   *   Context.add(Timeout, { TIMEOUT: 5000 })\n   * )\n   *\n   * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n   * ```\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <Services, I extends Services, S>(tag: Tag<I, S>): (self: Context<Services>) => S\n  /**\n   * Get a service from the context that corresponds to the given tag.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Context } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const Services = pipe(\n   *   Context.make(Port, { PORT: 8080 }),\n   *   Context.add(Timeout, { TIMEOUT: 5000 })\n   * )\n   *\n   * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n   * ```\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <Services, I, S>(self: Context<Services>, tag: Reference<I, S>): S\n  /**\n   * Get a service from the context that corresponds to the given tag.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Context } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const Services = pipe(\n   *   Context.make(Port, { PORT: 8080 }),\n   *   Context.add(Timeout, { TIMEOUT: 5000 })\n   * )\n   *\n   * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n   * ```\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <Services, I extends Services, S>(self: Context<Services>, tag: Tag<I, S>): S\n} = internal.get\n\n/**\n * Get a service from the context that corresponds to the given tag, or\n * use the fallback value.\n *\n * @since 3.7.0\n * @category getters\n */\nexport const getOrElse: {\n  /**\n   * Get a service from the context that corresponds to the given tag, or\n   * use the fallback value.\n   *\n   * @since 3.7.0\n   * @category getters\n   */\n  <S, I, B>(tag: Tag<I, S>, orElse: LazyArg<B>): <Services>(self: Context<Services>) => S | B\n  /**\n   * Get a service from the context that corresponds to the given tag, or\n   * use the fallback value.\n   *\n   * @since 3.7.0\n   * @category getters\n   */\n  <Services, S, I, B>(self: Context<Services>, tag: Tag<I, S>, orElse: LazyArg<B>): S | B\n} = internal.getOrElse\n\n/**\n * Get a service from the context that corresponds to the given tag.\n * This function is unsafe because if the tag is not present in the context, a runtime error will be thrown.\n *\n * For a safer version see {@link getOption}.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.unsafeGet(Services, Port), { PORT: 8080 })\n * assert.throws(() => Context.unsafeGet(Services, Timeout))\n * ```\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  /**\n   * Get a service from the context that corresponds to the given tag.\n   * This function is unsafe because if the tag is not present in the context, a runtime error will be thrown.\n   *\n   * For a safer version see {@link getOption}.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Context } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const Services = Context.make(Port, { PORT: 8080 })\n   *\n   * assert.deepStrictEqual(Context.unsafeGet(Services, Port), { PORT: 8080 })\n   * assert.throws(() => Context.unsafeGet(Services, Timeout))\n   * ```\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  <S, I>(tag: Tag<I, S>): <Services>(self: Context<Services>) => S\n  /**\n   * Get a service from the context that corresponds to the given tag.\n   * This function is unsafe because if the tag is not present in the context, a runtime error will be thrown.\n   *\n   * For a safer version see {@link getOption}.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Context } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const Services = Context.make(Port, { PORT: 8080 })\n   *\n   * assert.deepStrictEqual(Context.unsafeGet(Services, Port), { PORT: 8080 })\n   * assert.throws(() => Context.unsafeGet(Services, Timeout))\n   * ```\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  <Services, S, I>(self: Context<Services>, tag: Tag<I, S>): S\n} = internal.unsafeGet\n\n/**\n * Get the value associated with the specified tag from the context wrapped in an `Option` object. If the tag is not\n * found, the `Option` object will be `None`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n * ```\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOption: {\n  /**\n   * Get the value associated with the specified tag from the context wrapped in an `Option` object. If the tag is not\n   * found, the `Option` object will be `None`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Context, Option } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const Services = Context.make(Port, { PORT: 8080 })\n   *\n   * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n   * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <S, I>(tag: Tag<I, S>): <Services>(self: Context<Services>) => Option<S>\n  /**\n   * Get the value associated with the specified tag from the context wrapped in an `Option` object. If the tag is not\n   * found, the `Option` object will be `None`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Context, Option } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const Services = Context.make(Port, { PORT: 8080 })\n   *\n   * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n   * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <Services, S, I>(self: Context<Services>, tag: Tag<I, S>): Option<S>\n} = internal.getOption\n\n/**\n * Merges two `Context`s, returning a new `Context` containing the services of both.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const firstContext = Context.make(Port, { PORT: 8080 })\n * const secondContext = Context.make(Timeout, { TIMEOUT: 5000 })\n *\n * const Services = Context.merge(firstContext, secondContext)\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n * ```\n *\n * @since 2.0.0\n */\nexport const merge: {\n  /**\n   * Merges two `Context`s, returning a new `Context` containing the services of both.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Context } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const firstContext = Context.make(Port, { PORT: 8080 })\n   * const secondContext = Context.make(Timeout, { TIMEOUT: 5000 })\n   *\n   * const Services = Context.merge(firstContext, secondContext)\n   *\n   * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n   * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <R1>(that: Context<R1>): <Services>(self: Context<Services>) => Context<R1 | Services>\n  /**\n   * Merges two `Context`s, returning a new `Context` containing the services of both.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Context } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const firstContext = Context.make(Port, { PORT: 8080 })\n   * const secondContext = Context.make(Timeout, { TIMEOUT: 5000 })\n   *\n   * const Services = Context.merge(firstContext, secondContext)\n   *\n   * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n   * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <Services, R1>(self: Context<Services>, that: Context<R1>): Context<Services | R1>\n} = internal.merge\n\n/**\n * Merges any number of `Context`s, returning a new `Context` containing the services of all.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n * const Host = Context.GenericTag<{ HOST: string }>(\"Host\")\n *\n * const firstContext = Context.make(Port, { PORT: 8080 })\n * const secondContext = Context.make(Timeout, { TIMEOUT: 5000 })\n * const thirdContext = Context.make(Host, { HOST: \"localhost\" })\n *\n * const Services = Context.mergeAll(firstContext, secondContext, thirdContext)\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n * assert.deepStrictEqual(Context.get(Services, Host), { HOST: \"localhost\" })\n * ```\n *\n * @since 3.12.0\n */\nexport const mergeAll: <T extends Array<unknown>>(\n  ...ctxs: [...{ [K in keyof T]: Context<T[K]> }]\n) => Context<T[number]> = internal.mergeAll\n\n/**\n * Returns a new `Context` that contains only the specified services.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * const Services = pipe(someContext, Context.pick(Port))\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n * ```\n *\n * @since 2.0.0\n */\nexport const pick: <Tags extends ReadonlyArray<Tag<any, any>>>(\n  ...tags: Tags\n) => <Services>(self: Context<Services>) => Context<Services & Tag.Identifier<Tags[number]>> = internal.pick\n\n/**\n * @since 2.0.0\n */\nexport const omit: <Tags extends ReadonlyArray<Tag<any, any>>>(\n  ...tags: Tags\n) => <Services>(self: Context<Services>) => Context<Exclude<Services, Tag.Identifier<Tags[number]>>> = internal.omit\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context, Layer } from \"effect\"\n *\n * class MyTag extends Context.Tag(\"MyTag\")<\n *  MyTag,\n *  { readonly myNum: number }\n * >() {\n *  static Live = Layer.succeed(this, { myNum: 108 })\n * }\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const Tag: <const Id extends string>(id: Id) => <Self, Shape>() => TagClass<Self, Id, Shape> = internal.Tag\n\n/**\n * Creates a context tag with a default value.\n *\n * **Details**\n *\n * `Context.Reference` allows you to create a tag that can hold a value. You can\n * provide a default value for the service, which will automatically be used\n * when the context is accessed, or override it with a custom implementation\n * when needed.\n *\n * **Example** (Declaring a Tag with a default value)\n *\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Context, Effect } from \"effect\"\n *\n * class SpecialNumber extends Context.Reference<SpecialNumber>()(\n *   \"SpecialNumber\",\n *   { defaultValue: () => 2048 }\n * ) {}\n *\n * //      ┌─── Effect<void, never, never>\n * //      ▼\n * const program = Effect.gen(function* () {\n *   const specialNumber = yield* SpecialNumber\n *   console.log(`The special number is ${specialNumber}`)\n * })\n *\n * // No need to provide the SpecialNumber implementation\n * Effect.runPromise(program)\n * // Output: The special number is 2048\n * ```\n *\n * **Example** (Overriding the default value)\n *\n * ```ts\n * import { Context, Effect } from \"effect\"\n *\n * class SpecialNumber extends Context.Reference<SpecialNumber>()(\n *   \"SpecialNumber\",\n *   { defaultValue: () => 2048 }\n * ) {}\n *\n * const program = Effect.gen(function* () {\n *   const specialNumber = yield* SpecialNumber\n *   console.log(`The special number is ${specialNumber}`)\n * })\n *\n * Effect.runPromise(program.pipe(Effect.provideService(SpecialNumber, -1)))\n * // Output: The special number is -1\n * ```\n *\n * @since 3.11.0\n * @category constructors\n * @experimental\n */\nexport const Reference: <Self>() => <const Id extends string, Service>(\n  id: Id,\n  options: { readonly defaultValue: () => Service }\n) => ReferenceClass<Self, Id, Service> = internal.Reference\n", "import type * as C from \"../Context.js\"\nimport * as Equal from \"../Equal.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { dual } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as Hash from \"../Hash.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport type * as O from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as STM from \"../STM.js\"\nimport type { NoInfer } from \"../Types.js\"\nimport { EffectPrototype, effectVariance } from \"./effectable.js\"\nimport * as option from \"./option.js\"\n\n/** @internal */\nexport const TagTypeId: C.TagTypeId = Symbol.for(\"effect/Context/Tag\") as C.TagTypeId\n\n/** @internal */\nexport const ReferenceTypeId: C.ReferenceTypeId = Symbol.for(\"effect/Context/Reference\") as C.ReferenceTypeId\n\n/** @internal */\nconst STMSymbolKey = \"effect/STM\"\n\n/** @internal */\nexport const STMTypeId: STM.STMTypeId = Symbol.for(\n  STMSymbolKey\n) as STM.STMTypeId\n\n/** @internal */\nexport const TagProto: any = {\n  ...EffectPrototype,\n  _op: \"Tag\",\n  [STMTypeId]: effectVariance,\n  [TagTypeId]: {\n    _Service: (_: unknown) => _,\n    _Identifier: (_: unknown) => _\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON<I, A>(this: C.Tag<I, A>) {\n    return {\n      _id: \"Tag\",\n      key: this.key,\n      stack: this.stack\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  of<Service>(self: Service): Service {\n    return self\n  },\n  context<Identifier, Service>(\n    this: C.Tag<Identifier, Service>,\n    self: Service\n  ): C.Context<Identifier> {\n    return make(this, self)\n  }\n}\n\nexport const ReferenceProto: any = {\n  ...TagProto,\n  [ReferenceTypeId]: ReferenceTypeId\n}\n\n/** @internal */\nexport const makeGenericTag = <Identifier, Service = Identifier>(key: string): C.Tag<Identifier, Service> => {\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 2\n  const creationError = new Error()\n  Error.stackTraceLimit = limit\n  const tag = Object.create(TagProto)\n  Object.defineProperty(tag, \"stack\", {\n    get() {\n      return creationError.stack\n    }\n  })\n  tag.key = key\n  return tag\n}\n\n/** @internal */\nexport const Tag = <const Id extends string>(id: Id) => <Self, Shape>(): C.TagClass<Self, Id, Shape> => {\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 2\n  const creationError = new Error()\n  Error.stackTraceLimit = limit\n\n  function TagClass() {}\n  Object.setPrototypeOf(TagClass, TagProto)\n  TagClass.key = id\n  Object.defineProperty(TagClass, \"stack\", {\n    get() {\n      return creationError.stack\n    }\n  })\n  return TagClass as any\n}\n\n/** @internal */\nexport const Reference = <Self>() =>\n<const Id extends string, Service>(id: Id, options: {\n  readonly defaultValue: () => Service\n}): C.ReferenceClass<Self, Id, Service> => {\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 2\n  const creationError = new Error()\n  Error.stackTraceLimit = limit\n\n  function ReferenceClass() {}\n  Object.setPrototypeOf(ReferenceClass, ReferenceProto)\n  ReferenceClass.key = id\n  ReferenceClass.defaultValue = options.defaultValue\n  Object.defineProperty(ReferenceClass, \"stack\", {\n    get() {\n      return creationError.stack\n    }\n  })\n  return ReferenceClass as any\n}\n\n/** @internal */\nexport const TypeId: C.TypeId = Symbol.for(\"effect/Context\") as C.TypeId\n\n/** @internal */\nexport const ContextProto: Omit<C.Context<unknown>, \"unsafeMap\"> = {\n  [TypeId]: {\n    _Services: (_: unknown) => _\n  },\n  [Equal.symbol]<A>(this: C.Context<A>, that: unknown): boolean {\n    if (isContext(that)) {\n      if (this.unsafeMap.size === that.unsafeMap.size) {\n        for (const k of this.unsafeMap.keys()) {\n          if (!that.unsafeMap.has(k) || !Equal.equals(this.unsafeMap.get(k), that.unsafeMap.get(k))) {\n            return false\n          }\n        }\n        return true\n      }\n    }\n    return false\n  },\n  [Hash.symbol]<A>(this: C.Context<A>): number {\n    return Hash.cached(this, Hash.number(this.unsafeMap.size))\n  },\n  pipe<A>(this: C.Context<A>) {\n    return pipeArguments(this, arguments)\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON<A>(this: C.Context<A>) {\n    return {\n      _id: \"Context\",\n      services: Array.from(this.unsafeMap).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return (this as any).toJSON()\n  }\n}\n\n/** @internal */\nexport const makeContext = <Services>(unsafeMap: Map<string, any>): C.Context<Services> => {\n  const context = Object.create(ContextProto)\n  context.unsafeMap = unsafeMap\n  return context\n}\n\nconst serviceNotFoundError = (tag: C.Tag<any, any>) => {\n  const error = new Error(`Service not found${tag.key ? `: ${String(tag.key)}` : \"\"}`)\n  if (tag.stack) {\n    const lines = tag.stack.split(\"\\n\")\n    if (lines.length > 2) {\n      const afterAt = lines[2].match(/at (.*)/)\n      if (afterAt) {\n        error.message = error.message + ` (defined at ${afterAt[1]})`\n      }\n    }\n  }\n  if (error.stack) {\n    const lines = error.stack.split(\"\\n\")\n    lines.splice(1, 3)\n    error.stack = lines.join(\"\\n\")\n  }\n  return error\n}\n\n/** @internal */\nexport const isContext = (u: unknown): u is C.Context<never> => hasProperty(u, TypeId)\n\n/** @internal */\nexport const isTag = (u: unknown): u is C.Tag<any, any> => hasProperty(u, TagTypeId)\n\n/** @internal */\nexport const isReference = (u: unknown): u is C.Reference<any, any> => hasProperty(u, ReferenceTypeId)\n\nconst _empty = makeContext(new Map())\n\n/** @internal */\nexport const empty = (): C.Context<never> => _empty\n\n/** @internal */\nexport const make = <I, S>(tag: C.Tag<I, S>, service: NoInfer<S>): C.Context<I> =>\n  makeContext(new Map([[tag.key, service]]))\n\n/** @internal */\nexport const add = dual<\n  <I, S>(\n    tag: C.Tag<I, S>,\n    service: NoInfer<S>\n  ) => <Services>(\n    self: C.Context<Services>\n  ) => C.Context<Services | I>,\n  <Services, I, S>(\n    self: C.Context<Services>,\n    tag: C.Tag<I, S>,\n    service: NoInfer<S>\n  ) => C.Context<Services | I>\n>(3, (self, tag, service) => {\n  const map = new Map(self.unsafeMap)\n  map.set(tag.key, service)\n  return makeContext(map)\n})\n\nconst defaultValueCache = globalValue(\"effect/Context/defaultValueCache\", () => new Map<string, any>())\nconst getDefaultValue = (tag: C.Reference<any, any>) => {\n  if (defaultValueCache.has(tag.key)) {\n    return defaultValueCache.get(tag.key)\n  }\n  const value = tag.defaultValue()\n  defaultValueCache.set(tag.key, value)\n  return value\n}\n\n/** @internal */\nexport const unsafeGetReference = <Services, I, S>(self: C.Context<Services>, tag: C.Reference<I, S>): S => {\n  return self.unsafeMap.has(tag.key) ? self.unsafeMap.get(tag.key) : getDefaultValue(tag)\n}\n\n/** @internal */\nexport const unsafeGet = dual<\n  <S, I>(tag: C.Tag<I, S>) => <Services>(self: C.Context<Services>) => S,\n  <Services, S, I>(self: C.Context<Services>, tag: C.Tag<I, S>) => S\n>(2, (self, tag) => {\n  if (!self.unsafeMap.has(tag.key)) {\n    if (ReferenceTypeId in tag) return getDefaultValue(tag as any)\n    throw serviceNotFoundError(tag)\n  }\n  return self.unsafeMap.get(tag.key)! as any\n})\n\n/** @internal */\nexport const get: {\n  <I, S>(tag: C.Reference<I, S>): <Services>(self: C.Context<Services>) => S\n  <Services, I extends Services, S>(tag: C.Tag<I, S>): (self: C.Context<Services>) => S\n  <Services, I, S>(self: C.Context<Services>, tag: C.Reference<I, S>): S\n  <Services, I extends Services, S>(self: C.Context<Services>, tag: C.Tag<I, S>): S\n} = unsafeGet as any\n\n/** @internal */\nexport const getOrElse = dual<\n  <S, I, B>(tag: C.Tag<I, S>, orElse: LazyArg<B>) => <Services>(self: C.Context<Services>) => S | B,\n  <Services, S, I, B>(self: C.Context<Services>, tag: C.Tag<I, S>, orElse: LazyArg<B>) => S | B\n>(3, (self, tag, orElse) => {\n  if (!self.unsafeMap.has(tag.key)) {\n    return isReference(tag) ? getDefaultValue(tag) : orElse()\n  }\n  return self.unsafeMap.get(tag.key)! as any\n})\n\n/** @internal */\nexport const getOption = dual<\n  <S, I>(tag: C.Tag<I, S>) => <Services>(self: C.Context<Services>) => O.Option<S>,\n  <Services, S, I>(self: C.Context<Services>, tag: C.Tag<I, S>) => O.Option<S>\n>(2, (self, tag) => {\n  if (!self.unsafeMap.has(tag.key)) {\n    return isReference(tag) ? option.some(getDefaultValue(tag)) : option.none\n  }\n  return option.some(self.unsafeMap.get(tag.key)! as any)\n})\n\n/** @internal */\nexport const merge = dual<\n  <R1>(that: C.Context<R1>) => <Services>(self: C.Context<Services>) => C.Context<Services | R1>,\n  <Services, R1>(self: C.Context<Services>, that: C.Context<R1>) => C.Context<Services | R1>\n>(2, (self, that) => {\n  const map = new Map(self.unsafeMap)\n  for (const [tag, s] of that.unsafeMap) {\n    map.set(tag, s)\n  }\n  return makeContext(map)\n})\n\n/** @internal */\nexport const mergeAll = <T extends Array<unknown>>(\n  ...ctxs: [...{ [K in keyof T]: C.Context<T[K]> }]\n): C.Context<T[number]> => {\n  const map = new Map()\n  for (const ctx of ctxs) {\n    for (const [tag, s] of ctx.unsafeMap) {\n      map.set(tag, s)\n    }\n  }\n  return makeContext(map)\n}\n\n/** @internal */\nexport const pick =\n  <Tags extends ReadonlyArray<C.Tag<any, any>>>(...tags: Tags) =>\n  <Services>(self: C.Context<Services>): C.Context<\n    Services & C.Tag.Identifier<Tags[number]>\n  > => {\n    const tagSet = new Set<string>(tags.map((_) => _.key))\n    const newEnv = new Map()\n    for (const [tag, s] of self.unsafeMap.entries()) {\n      if (tagSet.has(tag)) {\n        newEnv.set(tag, s)\n      }\n    }\n    return makeContext(newEnv)\n  }\n\n/** @internal */\nexport const omit =\n  <Tags extends ReadonlyArray<C.Tag<any, any>>>(...tags: Tags) =>\n  <Services>(self: C.Context<Services>): C.Context<\n    Exclude<Services, C.Tag.Identifier<Tags[number]>>\n  > => {\n    const newEnv = new Map(self.unsafeMap)\n    for (const tag of tags) {\n      newEnv.delete(tag.key)\n    }\n    return makeContext(newEnv)\n  }\n", "import * as Arr from \"../Array.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport * as Context from \"../Context.js\"\nimport type * as Deferred from \"../Deferred.js\"\nimport type * as Differ from \"../Differ.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport type * as ExecutionStrategy from \"../ExecutionStrategy.js\"\nimport type * as Exit from \"../Exit.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport type * as FiberStatus from \"../FiberStatus.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { dual, identity, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as Hash from \"../Hash.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport type * as HashSet from \"../HashSet.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport * as List from \"../List.js\"\nimport type * as LogLevel from \"../LogLevel.js\"\nimport type * as LogSpan from \"../LogSpan.js\"\nimport type * as MetricLabel from \"../MetricLabel.js\"\nimport * as MutableRef from \"../MutableRef.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty, isObject, isPromiseLike, type Predicate, type Refinement } from \"../Predicate.js\"\nimport type * as Request from \"../Request.js\"\nimport type * as BlockedRequests from \"../RequestBlock.js\"\nimport type * as RequestResolver from \"../RequestResolver.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport * as RuntimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\nimport type * as Scope from \"../Scope.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport type { NoInfer, NotFunction } from \"../Types.js\"\nimport { internalCall, YieldWrap } from \"../Utils.js\"\nimport * as blockedRequests_ from \"./blockedRequests.js\"\nimport * as internalCause from \"./cause.js\"\nimport * as deferred from \"./deferred.js\"\nimport * as internalDiffer from \"./differ.js\"\nimport { CommitPrototype, effectVariance, StructuralCommitPrototype } from \"./effectable.js\"\nimport { getBugErrorMessage } from \"./errors.js\"\nimport type * as FiberRuntime from \"./fiberRuntime.js\"\nimport type * as fiberScope from \"./fiberScope.js\"\nimport * as DeferredOpCodes from \"./opCodes/deferred.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport * as runtimeFlags_ from \"./runtimeFlags.js\"\nimport { SingleShotGen } from \"./singleShotGen.js\"\n\n// -----------------------------------------------------------------------------\n// Effect\n// -----------------------------------------------------------------------------\n\n/**\n * @internal\n */\nexport const blocked = <A, E>(\n  blockedRequests: BlockedRequests.RequestBlock,\n  _continue: Effect.Effect<A, E>\n): Effect.Blocked<A, E> => {\n  const effect = new EffectPrimitive(\"Blocked\") as any\n  effect.effect_instruction_i0 = blockedRequests\n  effect.effect_instruction_i1 = _continue\n  return effect\n}\n\n/**\n * @internal\n */\nexport const runRequestBlock = (\n  blockedRequests: BlockedRequests.RequestBlock\n): Effect.Effect<void> => {\n  const effect = new EffectPrimitive(\"RunBlocked\") as any\n  effect.effect_instruction_i0 = blockedRequests\n  return effect\n}\n\n/** @internal */\nexport const EffectTypeId: Effect.EffectTypeId = Symbol.for(\"effect/Effect\") as Effect.EffectTypeId\n\n/** @internal */\nexport type Primitive =\n  | Async\n  | Commit\n  | Failure\n  | OnFailure\n  | OnSuccess\n  | OnStep\n  | OnSuccessAndFailure\n  | Success\n  | Sync\n  | UpdateRuntimeFlags\n  | While\n  | FromIterator\n  | WithRuntime\n  | Yield\n  | OpTag\n  | Blocked\n  | RunBlocked\n  | Either.Either<any, any>\n  | Option.Option<any>\n\n/** @internal */\nexport type Continuation =\n  | OnSuccess\n  | OnStep\n  | OnSuccessAndFailure\n  | OnFailure\n  | While\n  | FromIterator\n  | RevertFlags\n\n/** @internal */\nexport class RevertFlags {\n  readonly _op = OpCodes.OP_REVERT_FLAGS\n  constructor(\n    readonly patch: RuntimeFlagsPatch.RuntimeFlagsPatch,\n    readonly op: Primitive & { _op: OpCodes.OP_UPDATE_RUNTIME_FLAGS }\n  ) {\n  }\n}\n\nclass EffectPrimitive {\n  public effect_instruction_i0 = undefined\n  public effect_instruction_i1 = undefined\n  public effect_instruction_i2 = undefined\n  public trace = undefined;\n  [EffectTypeId] = effectVariance\n  constructor(readonly _op: Primitive[\"_op\"]) {}\n  [Equal.symbol](this: {}, that: unknown) {\n    return this === that\n  }\n  [Hash.symbol](this: {}) {\n    return Hash.cached(this, Hash.random(this))\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n  toJSON() {\n    return {\n      _id: \"Effect\",\n      _op: this._op,\n      effect_instruction_i0: toJSON(this.effect_instruction_i0),\n      effect_instruction_i1: toJSON(this.effect_instruction_i1),\n      effect_instruction_i2: toJSON(this.effect_instruction_i2)\n    }\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this))\n  }\n}\n\n/** @internal */\nclass EffectPrimitiveFailure {\n  public effect_instruction_i0 = undefined\n  public effect_instruction_i1 = undefined\n  public effect_instruction_i2 = undefined\n  public trace = undefined;\n  [EffectTypeId] = effectVariance\n  constructor(readonly _op: Primitive[\"_op\"]) {\n    // @ts-expect-error\n    this._tag = _op\n  }\n  [Equal.symbol](this: {}, that: unknown) {\n    return exitIsExit(that) && that._op === \"Failure\" &&\n      // @ts-expect-error\n      Equal.equals(this.effect_instruction_i0, that.effect_instruction_i0)\n  }\n  [Hash.symbol](this: {}) {\n    return pipe(\n      // @ts-expect-error\n      Hash.string(this._tag),\n      // @ts-expect-error\n      Hash.combine(Hash.hash(this.effect_instruction_i0)),\n      Hash.cached(this)\n    )\n  }\n  get cause() {\n    return this.effect_instruction_i0\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n  toJSON() {\n    return {\n      _id: \"Exit\",\n      _tag: this._op,\n      cause: (this.cause as any).toJSON()\n    }\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this))\n  }\n}\n\n/** @internal */\nclass EffectPrimitiveSuccess {\n  public effect_instruction_i0 = undefined\n  public effect_instruction_i1 = undefined\n  public effect_instruction_i2 = undefined\n  public trace = undefined;\n  [EffectTypeId] = effectVariance\n  constructor(readonly _op: Primitive[\"_op\"]) {\n    // @ts-expect-error\n    this._tag = _op\n  }\n  [Equal.symbol](this: {}, that: unknown) {\n    return exitIsExit(that) && that._op === \"Success\" &&\n      // @ts-expect-error\n      Equal.equals(this.effect_instruction_i0, that.effect_instruction_i0)\n  }\n  [Hash.symbol](this: {}) {\n    return pipe(\n      // @ts-expect-error\n      Hash.string(this._tag),\n      // @ts-expect-error\n      Hash.combine(Hash.hash(this.effect_instruction_i0)),\n      Hash.cached(this)\n    )\n  }\n  get value() {\n    return this.effect_instruction_i0\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n  toJSON() {\n    return {\n      _id: \"Exit\",\n      _tag: this._op,\n      value: toJSON(this.value)\n    }\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this))\n  }\n}\n\n/** @internal */\nexport type Op<Tag extends string, Body = {}> = Effect.Effect<never> & Body & {\n  readonly _op: Tag\n}\n\n/** @internal */\nexport interface Async extends\n  Op<OpCodes.OP_ASYNC, {\n    effect_instruction_i0(resume: (effect: Primitive) => void): void\n    readonly effect_instruction_i1: FiberId.FiberId\n  }>\n{}\n\n/** @internal */\nexport interface Blocked<out E = any, out A = any> extends\n  Op<\"Blocked\", {\n    readonly effect_instruction_i0: BlockedRequests.RequestBlock\n    readonly effect_instruction_i1: Effect.Effect<A, E>\n  }>\n{}\n\n/** @internal */\nexport interface RunBlocked extends\n  Op<\"RunBlocked\", {\n    readonly effect_instruction_i0: BlockedRequests.RequestBlock\n  }>\n{}\n\n/** @internal */\nexport interface Failure extends\n  Op<OpCodes.OP_FAILURE, {\n    readonly effect_instruction_i0: Cause.Cause<unknown>\n  }>\n{}\n\n/** @internal */\nexport interface OpTag extends Op<OpCodes.OP_TAG, {}> {}\n\n/** @internal */\nexport interface Commit extends\n  Op<OpCodes.OP_COMMIT, {\n    commit(): Effect.Effect<unknown, unknown, unknown>\n  }>\n{}\n\n/** @internal */\nexport interface OnFailure extends\n  Op<OpCodes.OP_ON_FAILURE, {\n    readonly effect_instruction_i0: Primitive\n    effect_instruction_i1(a: Cause.Cause<unknown>): Primitive\n  }>\n{}\n\n/** @internal */\nexport interface OnSuccess extends\n  Op<OpCodes.OP_ON_SUCCESS, {\n    readonly effect_instruction_i0: Primitive\n    effect_instruction_i1(a: unknown): Primitive\n  }>\n{}\n\n/** @internal */\nexport interface OnStep extends Op<\"OnStep\", { readonly effect_instruction_i0: Primitive }> {}\n\n/** @internal */\nexport interface OnSuccessAndFailure extends\n  Op<OpCodes.OP_ON_SUCCESS_AND_FAILURE, {\n    readonly effect_instruction_i0: Primitive\n    effect_instruction_i1(a: Cause.Cause<unknown>): Primitive\n    effect_instruction_i2(a: unknown): Primitive\n  }>\n{}\n\n/** @internal */\nexport interface Success extends\n  Op<OpCodes.OP_SUCCESS, {\n    readonly effect_instruction_i0: unknown\n  }>\n{}\n\n/** @internal */\nexport interface Sync extends\n  Op<OpCodes.OP_SYNC, {\n    effect_instruction_i0(): unknown\n  }>\n{}\n\n/** @internal */\nexport interface UpdateRuntimeFlags extends\n  Op<OpCodes.OP_UPDATE_RUNTIME_FLAGS, {\n    readonly effect_instruction_i0: RuntimeFlagsPatch.RuntimeFlagsPatch\n    readonly effect_instruction_i1?: (oldRuntimeFlags: RuntimeFlags.RuntimeFlags) => Primitive\n  }>\n{}\n\n/** @internal */\nexport interface While extends\n  Op<OpCodes.OP_WHILE, {\n    effect_instruction_i0(): boolean\n    effect_instruction_i1(): Primitive\n    effect_instruction_i2(a: unknown): void\n  }>\n{}\n\n/** @internal */\nexport interface FromIterator extends\n  Op<OpCodes.OP_ITERATOR, {\n    effect_instruction_i0: Iterator<YieldWrap<Primitive>, any>\n  }>\n{}\n\n/** @internal */\nexport interface WithRuntime extends\n  Op<OpCodes.OP_WITH_RUNTIME, {\n    effect_instruction_i0(fiber: FiberRuntime.FiberRuntime<unknown, unknown>, status: FiberStatus.Running): Primitive\n  }>\n{}\n\n/** @internal */\nexport interface Yield extends Op<OpCodes.OP_YIELD> {}\n\n/** @internal */\nexport const isEffect = (u: unknown): u is Effect.Effect<unknown, unknown, unknown> => hasProperty(u, EffectTypeId)\n\n/* @internal */\nexport const withFiberRuntime = <A, E = never, R = never>(\n  withRuntime: (fiber: FiberRuntime.FiberRuntime<A, E>, status: FiberStatus.Running) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_WITH_RUNTIME) as any\n  effect.effect_instruction_i0 = withRuntime\n  return effect\n}\n\n/* @internal */\nexport const acquireUseRelease: {\n  <A2, E2, R2, A, X, R3>(\n    use: (a: A) => Effect.Effect<A2, E2, R2>,\n    release: (a: A, exit: Exit.Exit<A2, E2>) => Effect.Effect<X, never, R3>\n  ): <E, R>(acquire: Effect.Effect<A, E, R>) => Effect.Effect<A2, E2 | E, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, X, R3>(\n    acquire: Effect.Effect<A, E, R>,\n    use: (a: A) => Effect.Effect<A2, E2, R2>,\n    release: (a: A, exit: Exit.Exit<A2, E2>) => Effect.Effect<X, never, R3>\n  ): Effect.Effect<A2, E | E2, R | R2 | R3>\n} = dual(3, <A, E, R, A2, E2, R2, X, R3>(\n  acquire: Effect.Effect<A, E, R>,\n  use: (a: A) => Effect.Effect<A2, E2, R2>,\n  release: (a: A, exit: Exit.Exit<A2, E2>) => Effect.Effect<X, never, R3>\n): Effect.Effect<A2, E | E2, R | R2 | R3> =>\n  uninterruptibleMask((restore) =>\n    flatMap(\n      acquire,\n      (a) =>\n        flatMap(exit(suspend(() => restore(use(a)))), (exit): Effect.Effect<A2, E | E2, R | R2 | R3> => {\n          return suspend(() => release(a, exit)).pipe(\n            matchCauseEffect({\n              onFailure: (cause) => {\n                switch (exit._tag) {\n                  case OpCodes.OP_FAILURE:\n                    return failCause(internalCause.sequential(exit.effect_instruction_i0, cause))\n                  case OpCodes.OP_SUCCESS:\n                    return failCause(cause)\n                }\n              },\n              onSuccess: () => exit\n            })\n          )\n        })\n    )\n  ))\n\n/* @internal */\nexport const as: {\n  <B>(value: B): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R>\n  <A, E, R, B>(self: Effect.Effect<A, E, R>, value: B): Effect.Effect<B, E, R>\n} = dual(\n  2,\n  <A, E, R, B>(self: Effect.Effect<A, E, R>, value: B): Effect.Effect<B, E, R> => flatMap(self, () => succeed(value))\n)\n\n/* @internal */\nexport const asVoid = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<void, E, R> => as(self, void 0)\n\n/* @internal */\nexport const custom: {\n  <X, A, E, R>(i0: X, body: (this: { effect_instruction_i0: X }) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R>\n  <X, Y, A, E, R>(\n    i0: X,\n    i1: Y,\n    body: (this: { effect_instruction_i0: X; effect_instruction_i1: Y }) => Effect.Effect<A, E, R>\n  ): Effect.Effect<A, E, R>\n  <X, Y, Z, A, E, R>(\n    i0: X,\n    i1: Y,\n    i2: Z,\n    body: (\n      this: { effect_instruction_i0: X; effect_instruction_i1: Y; effect_instruction_i2: Z }\n    ) => Effect.Effect<A, E, R>\n  ): Effect.Effect<A, E, R>\n} = function() {\n  const wrapper = new EffectPrimitive(OpCodes.OP_COMMIT) as any\n  switch (arguments.length) {\n    case 2: {\n      wrapper.effect_instruction_i0 = arguments[0]\n      wrapper.commit = arguments[1]\n      break\n    }\n    case 3: {\n      wrapper.effect_instruction_i0 = arguments[0]\n      wrapper.effect_instruction_i1 = arguments[1]\n      wrapper.commit = arguments[2]\n      break\n    }\n    case 4: {\n      wrapper.effect_instruction_i0 = arguments[0]\n      wrapper.effect_instruction_i1 = arguments[1]\n      wrapper.effect_instruction_i2 = arguments[2]\n      wrapper.commit = arguments[3]\n      break\n    }\n    default: {\n      throw new Error(getBugErrorMessage(\"you're not supposed to end up here\"))\n    }\n  }\n  return wrapper\n}\n\n/* @internal */\nexport const unsafeAsync = <A, E = never, R = never>(\n  register: (\n    callback: (_: Effect.Effect<A, E, R>) => void\n  ) => void | Effect.Effect<void, never, R>,\n  blockingOn: FiberId.FiberId = FiberId.none\n): Effect.Effect<A, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_ASYNC) as any\n  let cancelerRef: Effect.Effect<void, never, R> | void = undefined\n  effect.effect_instruction_i0 = (resume: (_: Effect.Effect<A, E, R>) => void) => {\n    cancelerRef = register(resume)\n  }\n  effect.effect_instruction_i1 = blockingOn\n  return onInterrupt(effect, (_) => isEffect(cancelerRef) ? cancelerRef : void_)\n}\n\n/* @internal */\nexport const asyncInterrupt = <A, E = never, R = never>(\n  register: (\n    callback: (_: Effect.Effect<A, E, R>) => void\n  ) => void | Effect.Effect<void, never, R>,\n  blockingOn: FiberId.FiberId = FiberId.none\n): Effect.Effect<A, E, R> => suspend(() => unsafeAsync(register, blockingOn))\n\nconst async_ = <A, E = never, R = never>(\n  resume: (\n    callback: (_: Effect.Effect<A, E, R>) => void,\n    signal: AbortSignal\n  ) => void | Effect.Effect<void, never, R>,\n  blockingOn: FiberId.FiberId = FiberId.none\n): Effect.Effect<A, E, R> => {\n  return custom(resume, function() {\n    let backingResume: ((_: Effect.Effect<A, E, R>) => void) | undefined = undefined\n    let pendingEffect: Effect.Effect<A, E, R> | undefined = undefined\n    function proxyResume(effect: Effect.Effect<A, E, R>) {\n      if (backingResume) {\n        backingResume(effect)\n      } else if (pendingEffect === undefined) {\n        pendingEffect = effect\n      }\n    }\n    const effect = new EffectPrimitive(OpCodes.OP_ASYNC) as any\n    effect.effect_instruction_i0 = (resume: (_: Effect.Effect<A, E, R>) => void) => {\n      backingResume = resume\n      if (pendingEffect) {\n        resume(pendingEffect)\n      }\n    }\n    effect.effect_instruction_i1 = blockingOn\n    let cancelerRef: Effect.Effect<void, never, R> | void = undefined\n    let controllerRef: AbortController | void = undefined\n    if (this.effect_instruction_i0.length !== 1) {\n      controllerRef = new AbortController()\n      cancelerRef = internalCall(() => this.effect_instruction_i0(proxyResume, controllerRef!.signal))\n    } else {\n      cancelerRef = internalCall(() => (this.effect_instruction_i0 as any)(proxyResume))\n    }\n    return (cancelerRef || controllerRef) ?\n      onInterrupt(effect, (_) => {\n        if (controllerRef) {\n          controllerRef.abort()\n        }\n        return cancelerRef ?? void_\n      }) :\n      effect\n  })\n}\nexport {\n  /** @internal */\n  async_ as async\n}\n\n/* @internal */\nexport const catchAllCause = dual<\n  <E, A2, E2, R2>(\n    f: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R2>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A2 | A, E2, R2 | R>\n>(2, (self, f) => {\n  const effect = new EffectPrimitive(OpCodes.OP_ON_FAILURE) as any\n  effect.effect_instruction_i0 = self\n  effect.effect_instruction_i1 = f\n  return effect\n})\n\n/* @internal */\nexport const catchAll: {\n  <E, A2, E2, R2>(\n    f: (e: E) => Effect.Effect<A2, E2, R2>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E2, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (e: E) => Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A2 | A, E2, R2 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (e: E) => Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A2 | A, E2, R2 | R> => matchEffect(self, { onFailure: f, onSuccess: succeed })\n)\n\n/* @internal */\nexport const catchIf: {\n  <E, EB extends E, A2, E2, R2>(\n    refinement: Refinement<NoInfer<E>, EB>,\n    f: (e: EB) => Effect.Effect<A2, E2, R2>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E2 | Exclude<E, EB>, R2 | R>\n  <E, A2, E2, R2>(\n    predicate: Predicate<NoInfer<E>>,\n    f: (e: NoInfer<E>) => Effect.Effect<A2, E2, R2>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E | E2, R2 | R>\n  <A, E, R, EB extends E, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    refinement: Refinement<E, EB>,\n    f: (e: EB) => Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A2 | A, E2 | Exclude<E, EB>, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    predicate: Predicate<E>,\n    f: (e: E) => Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A | A2, E | E2, R | R2>\n} = dual(3, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  predicate: Predicate<E>,\n  f: (e: E) => Effect.Effect<A2, E2, R2>\n): Effect.Effect<A | A2, E | E2, R | R2> =>\n  catchAllCause(self, (cause): Effect.Effect<A | A2, E | E2, R | R2> => {\n    const either = internalCause.failureOrCause(cause)\n    switch (either._tag) {\n      case \"Left\":\n        return predicate(either.left) ? f(either.left) : failCause(cause)\n      case \"Right\":\n        return failCause(either.right)\n    }\n  }))\n\n/* @internal */\nexport const catchSome = dual<\n  <E, A2, E2, R2>(\n    pf: (e: NoInfer<E>) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E | E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    pf: (e: NoInfer<E>) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => Effect.Effect<A2 | A, E | E2, R2 | R>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  pf: (e: NoInfer<E>) => Option.Option<Effect.Effect<A2, E2, R2>>\n) =>\n  catchAllCause(self, (cause): Effect.Effect<A2 | A, E | E2, R2 | R> => {\n    const either = internalCause.failureOrCause(cause)\n    switch (either._tag) {\n      case \"Left\":\n        return pipe(pf(either.left), Option.getOrElse(() => failCause(cause)))\n      case \"Right\":\n        return failCause(either.right)\n    }\n  }))\n\n/* @internal */\nexport const checkInterruptible = <A, E, R>(\n  f: (isInterruptible: boolean) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => withFiberRuntime((_, status) => f(runtimeFlags_.interruption(status.runtimeFlags)))\n\nconst originalSymbol = Symbol.for(\"effect/OriginalAnnotation\")\n\n/* @internal */\nexport const originalInstance = <E>(obj: E): E => {\n  if (hasProperty(obj, originalSymbol)) {\n    // @ts-expect-error\n    return obj[originalSymbol]\n  }\n  return obj\n}\n\n/* @internal */\nexport const capture = <E>(obj: E & object, span: Option.Option<Tracer.Span>): E => {\n  if (Option.isSome(span)) {\n    return new Proxy(obj, {\n      has(target, p) {\n        return p === internalCause.spanSymbol || p === originalSymbol || p in target\n      },\n      get(target, p) {\n        if (p === internalCause.spanSymbol) {\n          return span.value\n        }\n        if (p === originalSymbol) {\n          return obj\n        }\n        // @ts-expect-error\n        return target[p]\n      }\n    })\n  }\n  return obj\n}\n\n/* @internal */\nexport const die = (defect: unknown): Effect.Effect<never> =>\n  isObject(defect) && !(internalCause.spanSymbol in defect) ?\n    withFiberRuntime((fiber) => failCause(internalCause.die(capture(defect, currentSpanFromFiber(fiber)))))\n    : failCause(internalCause.die(defect))\n\n/* @internal */\nexport const dieMessage = (message: string): Effect.Effect<never> =>\n  failCauseSync(() => internalCause.die(new RuntimeException(message)))\n\n/* @internal */\nexport const dieSync = (evaluate: LazyArg<unknown>): Effect.Effect<never> => flatMap(sync(evaluate), die)\n\n/* @internal */\nexport const either = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Either.Either<A, E>, never, R> =>\n  matchEffect(self, {\n    onFailure: (e) => succeed(Either.left(e)),\n    onSuccess: (a) => succeed(Either.right(a))\n  })\n\n/* @internal */\nexport const exit = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Exit.Exit<A, E>, never, R> =>\n  matchCause(self, {\n    onFailure: exitFailCause,\n    onSuccess: exitSucceed\n  })\n\n/* @internal */\nexport const fail = <E>(error: E): Effect.Effect<never, E> =>\n  isObject(error) && !(internalCause.spanSymbol in error) ?\n    withFiberRuntime((fiber) => failCause(internalCause.fail(capture(error, currentSpanFromFiber(fiber)))))\n    : failCause(internalCause.fail(error))\n\n/* @internal */\nexport const failSync = <E>(evaluate: LazyArg<E>): Effect.Effect<never, E> => flatMap(sync(evaluate), fail)\n\n/* @internal */\nexport const failCause = <E>(cause: Cause.Cause<E>): Effect.Effect<never, E> => {\n  const effect = new EffectPrimitiveFailure(OpCodes.OP_FAILURE) as any\n  effect.effect_instruction_i0 = cause\n  return effect\n}\n\n/* @internal */\nexport const failCauseSync = <E>(\n  evaluate: LazyArg<Cause.Cause<E>>\n): Effect.Effect<never, E> => flatMap(sync(evaluate), failCause)\n\n/* @internal */\nexport const fiberId: Effect.Effect<FiberId.FiberId> = withFiberRuntime((state) => succeed(state.id()))\n\n/* @internal */\nexport const fiberIdWith = <A, E, R>(\n  f: (descriptor: FiberId.Runtime) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => withFiberRuntime((state) => f(state.id()))\n\n/* @internal */\nexport const flatMap = dual<\n  <A, B, E1, R1>(\n    f: (a: A) => Effect.Effect<B, E1, R1>\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E1 | E, R1 | R>,\n  <A, E, R, B, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    f: (a: A) => Effect.Effect<B, E1, R1>\n  ) => Effect.Effect<B, E | E1, R | R1>\n>(\n  2,\n  (self, f) => {\n    const effect = new EffectPrimitive(OpCodes.OP_ON_SUCCESS) as any\n    effect.effect_instruction_i0 = self\n    effect.effect_instruction_i1 = f\n    return effect\n  }\n)\n\n/* @internal */\nexport const andThen: {\n  <A, X>(\n    f: (a: NoInfer<A>) => X\n  ): <E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => [X] extends [Effect.Effect<infer A1, infer E1, infer R1>] ? Effect.Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect.Effect<A1, E | Cause.UnknownException, R>\n    : Effect.Effect<X, E, R>\n  <X>(\n    f: NotFunction<X>\n  ): <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => [X] extends [Effect.Effect<infer A1, infer E1, infer R1>] ? Effect.Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect.Effect<A1, E | Cause.UnknownException, R>\n    : Effect.Effect<X, E, R>\n  <A, E, R, X>(\n    self: Effect.Effect<A, E, R>,\n    f: (a: NoInfer<A>) => X\n  ): [X] extends [Effect.Effect<infer A1, infer E1, infer R1>] ? Effect.Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect.Effect<A1, E | Cause.UnknownException, R>\n    : Effect.Effect<X, E, R>\n  <A, E, R, X>(\n    self: Effect.Effect<A, E, R>,\n    f: NotFunction<X>\n  ): [X] extends [Effect.Effect<infer A1, infer E1, infer R1>] ? Effect.Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect.Effect<A1, E | Cause.UnknownException, R>\n    : Effect.Effect<X, E, R>\n} = dual(2, (self, f) =>\n  flatMap(self, (a) => {\n    const b = typeof f === \"function\" ? (f as any)(a) : f\n    if (isEffect(b)) {\n      return b\n    } else if (isPromiseLike(b)) {\n      return unsafeAsync<any, Cause.UnknownException>((resume) => {\n        b.then((a) => resume(succeed(a)), (e) =>\n          resume(fail(new UnknownException(e, \"An unknown error occurred in Effect.andThen\"))))\n      })\n    }\n    return succeed(b)\n  }))\n\n/* @internal */\nexport const step = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<Exit.Exit<A, E> | Effect.Blocked<A, E>, never, R> => {\n  const effect = new EffectPrimitive(\"OnStep\") as any\n  effect.effect_instruction_i0 = self\n  return effect\n}\n\n/* @internal */\nexport const flatten = <A, E1, R1, E, R>(\n  self: Effect.Effect<Effect.Effect<A, E1, R1>, E, R>\n): Effect.Effect<A, E | E1, R | R1> => flatMap(self, identity)\n\n/* @internal */\nexport const flip = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<E, A, R> =>\n  matchEffect(self, { onFailure: succeed, onSuccess: fail })\n\n/* @internal */\nexport const matchCause: {\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, never, R>\n  <A, E, R, A2, A3>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): Effect.Effect<A2 | A3, never, R>\n} = dual(2, <A, E, R, A2, A3>(\n  self: Effect.Effect<A, E, R>,\n  options: {\n    readonly onFailure: (cause: Cause.Cause<E>) => A2\n    readonly onSuccess: (a: A) => A3\n  }\n): Effect.Effect<A2 | A3, never, R> =>\n  matchCauseEffect(self, {\n    onFailure: (cause) => succeed(options.onFailure(cause)),\n    onSuccess: (a) => succeed(options.onSuccess(a))\n  }))\n\n/* @internal */\nexport const matchCauseEffect: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n    }\n  ): Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n} = dual(2, <A, E, R, A2, E2, R2, A3, E3, R3>(\n  self: Effect.Effect<A, E, R>,\n  options: {\n    readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R2>\n    readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n  }\n): Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_ON_SUCCESS_AND_FAILURE) as any\n  effect.effect_instruction_i0 = self\n  effect.effect_instruction_i1 = options.onFailure\n  effect.effect_instruction_i2 = options.onSuccess\n  return effect\n})\n\n/* @internal */\nexport const matchEffect: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (e: E) => Effect.Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Effect.Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n    }\n  ): Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n} = dual(2, <A, E, R, A2, E2, R2, A3, E3, R3>(\n  self: Effect.Effect<A, E, R>,\n  options: {\n    readonly onFailure: (e: E) => Effect.Effect<A2, E2, R2>\n    readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n  }\n): Effect.Effect<A2 | A3, E2 | E3, R2 | R3 | R> =>\n  matchCauseEffect(self, {\n    onFailure: (cause) => {\n      const defects = internalCause.defects(cause)\n      if (defects.length > 0) {\n        return failCause(internalCause.electFailures(cause))\n      }\n      const failures = internalCause.failures(cause)\n      if (failures.length > 0) {\n        return options.onFailure(Chunk.unsafeHead(failures))\n      }\n      return failCause(cause as Cause.Cause<never>)\n    },\n    onSuccess: options.onSuccess\n  }))\n\n/* @internal */\nexport const forEachSequential: {\n  <A, B, E, R>(f: (a: A, i: number) => Effect.Effect<B, E, R>): (self: Iterable<A>) => Effect.Effect<Array<B>, E, R>\n  <A, B, E, R>(self: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>): Effect.Effect<Array<B>, E, R>\n} = dual(\n  2,\n  <A, B, E, R>(self: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>): Effect.Effect<Array<B>, E, R> =>\n    suspend(() => {\n      const arr = Arr.fromIterable(self)\n      const ret = Arr.allocate<B>(arr.length)\n      let i = 0\n      return as(\n        whileLoop({\n          while: () => i < arr.length,\n          body: () => f(arr[i], i),\n          step: (b) => {\n            ret[i++] = b\n          }\n        }),\n        ret as Array<B>\n      )\n    })\n)\n\n/* @internal */\nexport const forEachSequentialDiscard: {\n  <A, B, E, R>(f: (a: A, i: number) => Effect.Effect<B, E, R>): (self: Iterable<A>) => Effect.Effect<void, E, R>\n  <A, B, E, R>(self: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>): Effect.Effect<void, E, R>\n} = dual(\n  2,\n  <A, B, E, R>(self: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>): Effect.Effect<void, E, R> =>\n    suspend(() => {\n      const arr = Arr.fromIterable(self)\n      let i = 0\n      return whileLoop({\n        while: () => i < arr.length,\n        body: () => f(arr[i], i),\n        step: () => {\n          i++\n        }\n      })\n    })\n)\n\n/* @internal */\nexport const if_ = dual<\n  <A1, E1, R1, A2, E2, R2>(\n    options: {\n      readonly onTrue: LazyArg<Effect.Effect<A1, E1, R1>>\n      readonly onFalse: LazyArg<Effect.Effect<A2, E2, R2>>\n    }\n  ) => <E = never, R = never>(\n    self: Effect.Effect<boolean, E, R> | boolean\n  ) => Effect.Effect<A1 | A2, E | E1 | E2, R | R1 | R2>,\n  <A1, E1, R1, A2, E2, R2, E = never, R = never>(\n    self: Effect.Effect<boolean, E, R> | boolean,\n    options: {\n      readonly onTrue: LazyArg<Effect.Effect<A1, E1, R1>>\n      readonly onFalse: LazyArg<Effect.Effect<A2, E2, R2>>\n    }\n  ) => Effect.Effect<A1 | A2, E1 | E2 | E, R1 | R2 | R>\n>(\n  (args) => typeof args[0] === \"boolean\" || isEffect(args[0]),\n  <A1, E1, R1, A2, E2, R2, E = never, R = never>(\n    self: Effect.Effect<boolean, E, R> | boolean,\n    options: {\n      readonly onTrue: LazyArg<Effect.Effect<A1, E1, R1>>\n      readonly onFalse: LazyArg<Effect.Effect<A2, E2, R2>>\n    }\n  ): Effect.Effect<A1 | A2, E1 | E2 | E, R1 | R2 | R> =>\n    isEffect(self)\n      ? flatMap(self, (b): Effect.Effect<A1 | A2, E1 | E2, R1 | R2> => (b ? options.onTrue() : options.onFalse()))\n      : self\n      ? options.onTrue()\n      : options.onFalse()\n)\n\n/* @internal */\nexport const interrupt: Effect.Effect<never> = flatMap(fiberId, (fiberId) => interruptWith(fiberId))\n\n/* @internal */\nexport const interruptWith = (fiberId: FiberId.FiberId): Effect.Effect<never> =>\n  failCause(internalCause.interrupt(fiberId))\n\n/* @internal */\nexport const interruptible = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n  effect.effect_instruction_i0 = RuntimeFlagsPatch.enable(runtimeFlags_.Interruption)\n  effect.effect_instruction_i1 = () => self\n  return effect\n}\n\n/* @internal */\nexport const interruptibleMask = <A, E, R>(\n  f: (restore: <AX, EX, RX>(effect: Effect.Effect<AX, EX, RX>) => Effect.Effect<AX, EX, RX>) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  custom(f, function() {\n    const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n    effect.effect_instruction_i0 = RuntimeFlagsPatch.enable(runtimeFlags_.Interruption)\n    effect.effect_instruction_i1 = (oldFlags: RuntimeFlags.RuntimeFlags) =>\n      runtimeFlags_.interruption(oldFlags)\n        ? internalCall(() => this.effect_instruction_i0(interruptible))\n        : internalCall(() => this.effect_instruction_i0(uninterruptible))\n    return effect\n  })\n\n/* @internal */\nexport const intoDeferred: {\n  <A, E>(deferred: Deferred.Deferred<A, E>): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<boolean, never, R>\n  <A, E, R>(self: Effect.Effect<A, E, R>, deferred: Deferred.Deferred<A, E>): Effect.Effect<boolean, never, R>\n} = dual(\n  2,\n  <A, E, R>(self: Effect.Effect<A, E, R>, deferred: Deferred.Deferred<A, E>): Effect.Effect<boolean, never, R> =>\n    uninterruptibleMask((restore) =>\n      flatMap(\n        exit(restore(self)),\n        (exit) => deferredDone(deferred, exit)\n      )\n    )\n)\n\n/* @internal */\nexport const map: {\n  <A, B>(f: (a: A) => B): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R>\n  <A, E, R, B>(self: Effect.Effect<A, E, R>, f: (a: A) => B): Effect.Effect<B, E, R>\n} = dual(\n  2,\n  <A, E, R, B>(self: Effect.Effect<A, E, R>, f: (a: A) => B): Effect.Effect<B, E, R> =>\n    flatMap(self, (a) => sync(() => f(a)))\n)\n\n/* @internal */\nexport const mapBoth: {\n  <E, E2, A, A2>(\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E2, R>\n  <A, E, R, E2, A2>(\n    self: Effect.Effect<A, E, R>,\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): Effect.Effect<A2, E2, R>\n} = dual(2, <A, E, R, E2, A2>(\n  self: Effect.Effect<A, E, R>,\n  options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n): Effect.Effect<A2, E2, R> =>\n  matchEffect(self, {\n    onFailure: (e) => failSync(() => options.onFailure(e)),\n    onSuccess: (a) => sync(() => options.onSuccess(a))\n  }))\n\n/* @internal */\nexport const mapError: {\n  <E, E2>(f: (e: E) => E2): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E2, R>\n  <A, E, R, E2>(self: Effect.Effect<A, E, R>, f: (e: E) => E2): Effect.Effect<A, E2, R>\n} = dual(\n  2,\n  <A, E, R, E2>(self: Effect.Effect<A, E, R>, f: (e: E) => E2): Effect.Effect<A, E2, R> =>\n    matchCauseEffect(self, {\n      onFailure: (cause) => {\n        const either = internalCause.failureOrCause(cause)\n        switch (either._tag) {\n          case \"Left\": {\n            return failSync(() => f(either.left))\n          }\n          case \"Right\": {\n            return failCause(either.right)\n          }\n        }\n      },\n      onSuccess: succeed\n    })\n)\n\n/* @internal */\nexport const onError: {\n  <E, X, R2>(\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect.Effect<A, E, R>,\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, R2 | R>\n} = dual(2, <A, E, R, X, R2>(\n  self: Effect.Effect<A, E, R>,\n  cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n): Effect.Effect<A, E, R2 | R> =>\n  onExit(self, (exit) => exitIsSuccess(exit) ? void_ : cleanup(exit.effect_instruction_i0)))\n\n/* @internal */\nexport const onExit: {\n  <A, E, X, R2>(\n    cleanup: (exit: Exit.Exit<A, E>) => Effect.Effect<X, never, R2>\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect.Effect<A, E, R>,\n    cleanup: (exit: Exit.Exit<A, E>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, R2 | R>\n} = dual(2, <A, E, R, X, R2>(\n  self: Effect.Effect<A, E, R>,\n  cleanup: (exit: Exit.Exit<A, E>) => Effect.Effect<X, never, R2>\n): Effect.Effect<A, E, R2 | R> =>\n  uninterruptibleMask((restore) =>\n    matchCauseEffect(restore(self), {\n      onFailure: (cause1) => {\n        const result = exitFailCause(cause1)\n        return matchCauseEffect(cleanup(result), {\n          onFailure: (cause2) => exitFailCause(internalCause.sequential(cause1, cause2)),\n          onSuccess: () => result\n        })\n      },\n      onSuccess: (success) => {\n        const result = exitSucceed(success)\n        return zipRight(cleanup(result), result)\n      }\n    })\n  ))\n\n/* @internal */\nexport const onInterrupt: {\n  <X, R2>(\n    cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect.Effect<X, never, R2>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R2 | R>\n  <A, E, R, X, R2>(\n    self: Effect.Effect<A, E, R>,\n    cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, R2 | R>\n} = dual(2, <A, E, R, X, R2>(\n  self: Effect.Effect<A, E, R>,\n  cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect.Effect<X, never, R2>\n): Effect.Effect<A, E, R2 | R> =>\n  onExit(\n    self,\n    exitMatch({\n      onFailure: (cause) =>\n        internalCause.isInterruptedOnly(cause)\n          ? asVoid(cleanup(internalCause.interruptors(cause)))\n          : void_,\n      onSuccess: () => void_\n    })\n  ))\n\n/* @internal */\nexport const orElse: {\n  <A2, E2, R2>(\n    that: LazyArg<Effect.Effect<A2, E2, R2>>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E2, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: LazyArg<Effect.Effect<A2, E2, R2>>\n  ): Effect.Effect<A2 | A, E2, R2 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: LazyArg<Effect.Effect<A2, E2, R2>>\n  ): Effect.Effect<A2 | A, E2, R2 | R> => attemptOrElse(self, that, succeed)\n)\n\n/* @internal */\nexport const orDie = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, never, R> => orDieWith(self, identity)\n\n/* @internal */\nexport const orDieWith: {\n  <E>(f: (error: E) => unknown): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, never, R>\n  <A, E, R>(self: Effect.Effect<A, E, R>, f: (error: E) => unknown): Effect.Effect<A, never, R>\n} = dual(\n  2,\n  <A, E, R>(self: Effect.Effect<A, E, R>, f: (error: E) => unknown): Effect.Effect<A, never, R> =>\n    matchEffect(self, {\n      onFailure: (e) => die(f(e)),\n      onSuccess: succeed\n    })\n)\n\n/* @internal */\nexport const partitionMap: <A, A1, A2>(\n  elements: Iterable<A>,\n  f: (a: A) => Either.Either<A2, A1>\n) => [left: Array<A1>, right: Array<A2>] = Arr.partitionMap\n/* @internal */\nexport const runtimeFlags: Effect.Effect<RuntimeFlags.RuntimeFlags> = withFiberRuntime((_, status) =>\n  succeed(status.runtimeFlags)\n)\n\n/* @internal */\nexport const succeed = <A>(value: A): Effect.Effect<A> => {\n  const effect = new EffectPrimitiveSuccess(OpCodes.OP_SUCCESS) as any\n  effect.effect_instruction_i0 = value\n  return effect\n}\n\n/* @internal */\nexport const suspend = <A, E, R>(evaluate: LazyArg<Effect.Effect<A, E, R>>): Effect.Effect<A, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_COMMIT) as any\n  effect.commit = evaluate\n  return effect\n}\n\n/* @internal */\nexport const sync = <A>(thunk: LazyArg<A>): Effect.Effect<A> => {\n  const effect = new EffectPrimitive(OpCodes.OP_SYNC) as any\n  effect.effect_instruction_i0 = thunk\n  return effect\n}\n\n/* @internal */\nexport const tap = dual<\n  {\n    <A, X>(\n      f: (a: NoInfer<A>) => X\n    ): <E, R>(\n      self: Effect.Effect<A, E, R>\n    ) => [X] extends [Effect.Effect<infer _A1, infer E1, infer R1>] ? Effect.Effect<A, E | E1, R | R1>\n      : [X] extends [PromiseLike<infer _A1>] ? Effect.Effect<A, E | Cause.UnknownException, R>\n      : Effect.Effect<A, E, R>\n    <A, X, E1, R1>(\n      f: (a: NoInfer<A>) => Effect.Effect<X, E1, R1>,\n      options: { onlyEffect: true }\n    ): <E, R>(\n      self: Effect.Effect<A, E, R>\n    ) => Effect.Effect<A, E | E1, R | R1>\n    <X>(\n      f: NotFunction<X>\n    ): <A, E, R>(\n      self: Effect.Effect<A, E, R>\n    ) => [X] extends [Effect.Effect<infer _A1, infer E1, infer R1>] ? Effect.Effect<A, E | E1, R | R1>\n      : [X] extends [PromiseLike<infer _A1>] ? Effect.Effect<A, E | Cause.UnknownException, R>\n      : Effect.Effect<A, E, R>\n    <X, E1, R1>(\n      f: Effect.Effect<X, E1, R1>,\n      options: { onlyEffect: true }\n    ): <A, E, R>(\n      self: Effect.Effect<A, E, R>\n    ) => Effect.Effect<A, E | E1, R | R1>\n  },\n  {\n    <A, E, R, X>(\n      self: Effect.Effect<A, E, R>,\n      f: (a: NoInfer<A>) => X\n    ): [X] extends [Effect.Effect<infer _A1, infer E1, infer R1>] ? Effect.Effect<A, E | E1, R | R1>\n      : [X] extends [PromiseLike<infer _A1>] ? Effect.Effect<A, E | Cause.UnknownException, R>\n      : Effect.Effect<A, E, R>\n    <A, E, R, X, E1, R1>(\n      self: Effect.Effect<A, E, R>,\n      f: (a: NoInfer<A>) => Effect.Effect<X, E1, R1>,\n      options: { onlyEffect: true }\n    ): Effect.Effect<A, E | E1, R | R1>\n    <A, E, R, X>(\n      self: Effect.Effect<A, E, R>,\n      f: NotFunction<X>\n    ): [X] extends [Effect.Effect<infer _A1, infer E1, infer R1>] ? Effect.Effect<A, E | E1, R | R1>\n      : [X] extends [PromiseLike<infer _A1>] ? Effect.Effect<A, E | Cause.UnknownException, R>\n      : Effect.Effect<A, E, R>\n    <A, E, R, X, E1, R1>(\n      self: Effect.Effect<A, E, R>,\n      f: Effect.Effect<X, E1, R1>,\n      options: { onlyEffect: true }\n    ): Effect.Effect<A, E | E1, R | R1>\n  }\n>(\n  (args) => args.length === 3 || args.length === 2 && !(isObject(args[1]) && \"onlyEffect\" in args[1]),\n  <A, E, R, X>(self: Effect.Effect<A, E, R>, f: X) =>\n    flatMap(self, (a) => {\n      const b = typeof f === \"function\" ? (f as any)(a) : f\n      if (isEffect(b)) {\n        return as(b, a)\n      } else if (isPromiseLike(b)) {\n        return unsafeAsync<any, Cause.UnknownException>((resume) => {\n          b.then((_) => resume(succeed(a)), (e) =>\n            resume(fail(new UnknownException(e, \"An unknown error occurred in Effect.tap\"))))\n        })\n      }\n      return succeed(a)\n    })\n)\n\n/* @internal */\nexport const transplant = <A, E, R>(\n  f: (grafter: <A2, E2, R2>(effect: Effect.Effect<A2, E2, R2>) => Effect.Effect<A2, E2, R2>) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  withFiberRuntime<A, E, R>((state) => {\n    const scopeOverride = state.getFiberRef(currentForkScopeOverride)\n    const scope = pipe(scopeOverride, Option.getOrElse(() => state.scope()))\n    return f(fiberRefLocally(currentForkScopeOverride, Option.some(scope)))\n  })\n\n/* @internal */\nexport const attemptOrElse: {\n  <A2, E2, R2, A, A3, E3, R3>(\n    that: LazyArg<Effect.Effect<A2, E2, R2>>,\n    onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R | R2 | R3>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    that: LazyArg<Effect.Effect<A2, E2, R2>>,\n    onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n  ): Effect.Effect<A2 | A3, E2 | E3, R | R2 | R3>\n} = dual(3, <A, E, R, A2, E2, R2, A3, E3, R3>(\n  self: Effect.Effect<A, E, R>,\n  that: LazyArg<Effect.Effect<A2, E2, R2>>,\n  onSuccess: (a: A) => Effect.Effect<A3, E3, R3>\n): Effect.Effect<A2 | A3, E2 | E3, R | R2 | R3> =>\n  matchCauseEffect(self, {\n    onFailure: (cause) => {\n      const defects = internalCause.defects(cause)\n      if (defects.length > 0) {\n        return failCause(Option.getOrThrow(internalCause.keepDefectsAndElectFailures(cause)))\n      }\n      return that()\n    },\n    onSuccess\n  }))\n\n/* @internal */\nexport const uninterruptible: <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R> = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n  effect.effect_instruction_i0 = RuntimeFlagsPatch.disable(runtimeFlags_.Interruption)\n  effect.effect_instruction_i1 = () => self\n  return effect\n}\n\n/* @internal */\nexport const uninterruptibleMask = <A, E, R>(\n  f: (restore: <AX, EX, RX>(effect: Effect.Effect<AX, EX, RX>) => Effect.Effect<AX, EX, RX>) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  custom(f, function() {\n    const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n    effect.effect_instruction_i0 = RuntimeFlagsPatch.disable(runtimeFlags_.Interruption)\n    effect.effect_instruction_i1 = (oldFlags: RuntimeFlags.RuntimeFlags) =>\n      runtimeFlags_.interruption(oldFlags)\n        ? internalCall(() => this.effect_instruction_i0(interruptible))\n        : internalCall(() => this.effect_instruction_i0(uninterruptible))\n    return effect\n  })\n\nconst void_: Effect.Effect<void> = succeed(void 0)\nexport {\n  /* @internal */\n  void_ as void\n}\n\n/* @internal */\nexport const updateRuntimeFlags = (patch: RuntimeFlagsPatch.RuntimeFlagsPatch): Effect.Effect<void> => {\n  const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n  effect.effect_instruction_i0 = patch\n  effect.effect_instruction_i1 = void 0\n  return effect\n}\n\n/* @internal */\nexport const whenEffect: {\n  <E, R>(\n    condition: Effect.Effect<boolean, E, R>\n  ): <A, E2, R2>(\n    effect: Effect.Effect<A, E2, R2>\n  ) => Effect.Effect<Option.Option<A>, E | E2, R | R2>\n  <A, E2, R2, E, R>(\n    self: Effect.Effect<A, E2, R2>,\n    condition: Effect.Effect<boolean, E, R>\n  ): Effect.Effect<Option.Option<A>, E | E2, R | R2>\n} = dual(2, <A, E2, R2, E, R>(\n  self: Effect.Effect<A, E2, R2>,\n  condition: Effect.Effect<boolean, E, R>\n): Effect.Effect<Option.Option<A>, E | E2, R | R2> =>\n  flatMap(condition, (b) => {\n    if (b) {\n      return pipe(self, map(Option.some))\n    }\n    return succeed(Option.none())\n  }))\n\n/* @internal */\nexport const whileLoop = <A, E, R>(\n  options: {\n    readonly while: LazyArg<boolean>\n    readonly body: LazyArg<Effect.Effect<A, E, R>>\n    readonly step: (a: A) => void\n  }\n): Effect.Effect<void, E, R> => {\n  const effect = new EffectPrimitive(OpCodes.OP_WHILE) as any\n  effect.effect_instruction_i0 = options.while\n  effect.effect_instruction_i1 = options.body\n  effect.effect_instruction_i2 = options.step\n  return effect\n}\n\n/* @internal */\nexport const fromIterator = <Eff extends YieldWrap<Effect.Effect<any, any, any>>, AEff>(\n  iterator: LazyArg<Iterator<Eff, AEff, never>>\n): Effect.Effect<\n  AEff,\n  [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect.Effect<infer _A, infer E, infer _R>>] ? E : never,\n  [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect.Effect<infer _A, infer _E, infer R>>] ? R : never\n> =>\n  suspend(() => {\n    const effect = new EffectPrimitive(OpCodes.OP_ITERATOR) as any\n    effect.effect_instruction_i0 = iterator()\n    return effect\n  })\n\n/* @internal */\nexport const gen: typeof Effect.gen = function() {\n  const f = arguments.length === 1 ? arguments[0] : arguments[1].bind(arguments[0])\n  return fromIterator(() => f(pipe))\n}\n\n/** @internal */\nexport const fnUntraced: Effect.fn.Untraced = (body: Function, ...pipeables: Array<any>) =>\n  Object.defineProperty(\n    pipeables.length === 0\n      ? function(this: any, ...args: Array<any>) {\n        return fromIterator(() => body.apply(this, args))\n      }\n      : function(this: any, ...args: Array<any>) {\n        let effect = fromIterator(() => body.apply(this, args))\n        for (const x of pipeables) {\n          effect = x(effect, ...args)\n        }\n        return effect\n      },\n    \"length\",\n    { value: body.length, configurable: true }\n  )\n\n/* @internal */\nexport const withConcurrency = dual<\n  (concurrency: number | \"unbounded\") => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, concurrency: number | \"unbounded\") => Effect.Effect<A, E, R>\n>(2, (self, concurrency) => fiberRefLocally(self, currentConcurrency, concurrency))\n\n/* @internal */\nexport const withRequestBatching = dual<\n  (requestBatching: boolean) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, requestBatching: boolean) => Effect.Effect<A, E, R>\n>(2, (self, requestBatching) => fiberRefLocally(self, currentRequestBatching, requestBatching))\n\n/* @internal */\nexport const withRuntimeFlags = dual<\n  (update: RuntimeFlagsPatch.RuntimeFlagsPatch) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, update: RuntimeFlagsPatch.RuntimeFlagsPatch) => Effect.Effect<A, E, R>\n>(2, (self, update) => {\n  const effect = new EffectPrimitive(OpCodes.OP_UPDATE_RUNTIME_FLAGS) as any\n  effect.effect_instruction_i0 = update\n  effect.effect_instruction_i1 = () => self\n  return effect\n})\n\n/** @internal */\nexport const withTracerEnabled = dual<\n  (enabled: boolean) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, enabled: boolean) => Effect.Effect<A, E, R>\n>(2, (effect, enabled) =>\n  fiberRefLocally(\n    effect,\n    currentTracerEnabled,\n    enabled\n  ))\n\n/** @internal */\nexport const withTracerTiming = dual<\n  (enabled: boolean) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, enabled: boolean) => Effect.Effect<A, E, R>\n>(2, (effect, enabled) =>\n  fiberRefLocally(\n    effect,\n    currentTracerTimingEnabled,\n    enabled\n  ))\n\n/* @internal */\nexport const yieldNow = (options?: {\n  readonly priority?: number | undefined\n}): Effect.Effect<void> => {\n  const effect = new EffectPrimitive(OpCodes.OP_YIELD) as any\n  return typeof options?.priority !== \"undefined\" ?\n    withSchedulingPriority(effect, options.priority) :\n    effect\n}\n\n/* @internal */\nexport const zip = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>\n): Effect.Effect<[A, A2], E | E2, R | R2> => flatMap(self, (a) => map(that, (b) => [a, b])))\n\n/* @internal */\nexport const zipFlatten: {\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ): <A extends ReadonlyArray<any>, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<[...A, A2], E | E2, R | R2>\n  <A extends ReadonlyArray<any>, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<[...A, A2], E | E2, R | R2>\n} = dual(2, <A extends ReadonlyArray<any>, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>\n): Effect.Effect<[...A, A2], E | E2, R | R2> => flatMap(self, (a) => map(that, (b) => [...a, b])))\n\n/* @internal */\nexport const zipLeft: {\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2, R | R2>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A, E | E2, R | R2>\n} = dual(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>\n): Effect.Effect<A, E | E2, R | R2> => flatMap(self, (a) => as(that, a)))\n\n/* @internal */\nexport const zipRight: {\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E | E2, R | R2>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A2, E | E2, R | R2>\n} = dual(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>\n): Effect.Effect<A2, E | E2, R | R2> => flatMap(self, () => that))\n\n/* @internal */\nexport const zipWith: {\n  <A2, E2, R2, A, B>(\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E | E2, R | R2>\n  <A, E, R, A2, E2, R2, B>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B\n  ): Effect.Effect<B, E | E2, R | R2>\n} = dual(3, <A, E, R, A2, E2, R2, B>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>,\n  f: (a: A, b: A2) => B\n): Effect.Effect<B, E | E2, R | R2> => flatMap(self, (a) => map(that, (b) => f(a, b))))\n\n/* @internal */\nexport const never: Effect.Effect<never> = asyncInterrupt<never>(() => {\n  const interval = setInterval(() => {\n    //\n  }, 2 ** 31 - 1)\n  return sync(() => clearInterval(interval))\n})\n\n// -----------------------------------------------------------------------------\n// Fiber\n// -----------------------------------------------------------------------------\n\n/* @internal */\nexport const interruptFiber = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<Exit.Exit<A, E>> =>\n  flatMap(fiberId, (fiberId) => pipe(self, interruptAsFiber(fiberId)))\n\n/* @internal */\nexport const interruptAsFiber = dual<\n  (fiberId: FiberId.FiberId) => <A, E>(self: Fiber.Fiber<A, E>) => Effect.Effect<Exit.Exit<A, E>>,\n  <A, E>(self: Fiber.Fiber<A, E>, fiberId: FiberId.FiberId) => Effect.Effect<Exit.Exit<A, E>>\n>(2, (self, fiberId) => flatMap(self.interruptAsFork(fiberId), () => self.await))\n\n// -----------------------------------------------------------------------------\n// LogLevel\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const logLevelAll: LogLevel.LogLevel = {\n  _tag: \"All\",\n  syslog: 0,\n  label: \"ALL\",\n  ordinal: Number.MIN_SAFE_INTEGER,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelFatal: LogLevel.LogLevel = {\n  _tag: \"Fatal\",\n  syslog: 2,\n  label: \"FATAL\",\n  ordinal: 50000,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelError: LogLevel.LogLevel = {\n  _tag: \"Error\",\n  syslog: 3,\n  label: \"ERROR\",\n  ordinal: 40000,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelWarning: LogLevel.LogLevel = {\n  _tag: \"Warning\",\n  syslog: 4,\n  label: \"WARN\",\n  ordinal: 30000,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelInfo: LogLevel.LogLevel = {\n  _tag: \"Info\",\n  syslog: 6,\n  label: \"INFO\",\n  ordinal: 20000,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelDebug: LogLevel.LogLevel = {\n  _tag: \"Debug\",\n  syslog: 7,\n  label: \"DEBUG\",\n  ordinal: 10000,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelTrace: LogLevel.LogLevel = {\n  _tag: \"Trace\",\n  syslog: 7,\n  label: \"TRACE\",\n  ordinal: 0,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const logLevelNone: LogLevel.LogLevel = {\n  _tag: \"None\",\n  syslog: 7,\n  label: \"OFF\",\n  ordinal: Number.MAX_SAFE_INTEGER,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const allLogLevels: ReadonlyArray<LogLevel.LogLevel> = [\n  logLevelAll,\n  logLevelTrace,\n  logLevelDebug,\n  logLevelInfo,\n  logLevelWarning,\n  logLevelError,\n  logLevelFatal,\n  logLevelNone\n]\n\n// -----------------------------------------------------------------------------\n// FiberRef\n// -----------------------------------------------------------------------------\n\n/** @internal */\nconst FiberRefSymbolKey = \"effect/FiberRef\"\n\n/** @internal */\nexport const FiberRefTypeId: FiberRef.FiberRefTypeId = Symbol.for(\n  FiberRefSymbolKey\n) as FiberRef.FiberRefTypeId\n\nconst fiberRefVariance = {\n  /* c8 ignore next */\n  _A: (_: any) => _\n}\n\n/* @internal */\nexport const fiberRefGet = <A>(self: FiberRef.FiberRef<A>): Effect.Effect<A> =>\n  withFiberRuntime((fiber) => exitSucceed(fiber.getFiberRef(self)))\n\n/* @internal */\nexport const fiberRefGetAndSet = dual<\n  <A>(value: A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<A>,\n  <A>(self: FiberRef.FiberRef<A>, value: A) => Effect.Effect<A>\n>(2, (self, value) => fiberRefModify(self, (v) => [v, value] as const))\n\n/* @internal */\nexport const fiberRefGetAndUpdate = dual<\n  <A>(f: (a: A) => A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<A>,\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<A>\n>(2, (self, f) => fiberRefModify(self, (v) => [v, f(v)] as const))\n\n/* @internal */\nexport const fiberRefGetAndUpdateSome = dual<\n  <A>(\n    pf: (a: A) => Option.Option<A>\n  ) => (self: FiberRef.FiberRef<A>) => Effect.Effect<A>,\n  <A>(\n    self: FiberRef.FiberRef<A>,\n    pf: (a: A) => Option.Option<A>\n  ) => Effect.Effect<A>\n>(2, (self, pf) => fiberRefModify(self, (v) => [v, Option.getOrElse(pf(v), () => v)] as const))\n\n/* @internal */\nexport const fiberRefGetWith = dual<\n  <B, E, R, A>(f: (a: A) => Effect.Effect<B, E, R>) => (self: FiberRef.FiberRef<A>) => Effect.Effect<B, E, R>,\n  <A, B, E, R>(self: FiberRef.FiberRef<A>, f: (a: A) => Effect.Effect<B, E, R>) => Effect.Effect<B, E, R>\n>(2, (self, f) => flatMap(fiberRefGet(self), f))\n\n/* @internal */\nexport const fiberRefSet = dual<\n  <A>(value: A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void>,\n  <A>(self: FiberRef.FiberRef<A>, value: A) => Effect.Effect<void>\n>(2, (self, value) => fiberRefModify(self, () => [void 0, value] as const))\n\n/* @internal */\nexport const fiberRefDelete = <A>(self: FiberRef.FiberRef<A>): Effect.Effect<void> =>\n  withFiberRuntime((state) => {\n    state.unsafeDeleteFiberRef(self)\n    return void_\n  })\n\n/* @internal */\nexport const fiberRefReset = <A>(self: FiberRef.FiberRef<A>): Effect.Effect<void> => fiberRefSet(self, self.initial)\n\n/* @internal */\nexport const fiberRefModify = dual<\n  <A, B>(f: (a: A) => readonly [B, A]) => (self: FiberRef.FiberRef<A>) => Effect.Effect<B>,\n  <A, B>(self: FiberRef.FiberRef<A>, f: (a: A) => readonly [B, A]) => Effect.Effect<B>\n>(2, <A, B>(\n  self: FiberRef.FiberRef<A>,\n  f: (a: A) => readonly [B, A]\n): Effect.Effect<B> =>\n  withFiberRuntime((state) => {\n    const [b, a] = f(state.getFiberRef(self) as A)\n    state.setFiberRef(self, a)\n    return succeed(b)\n  }))\n\n/* @internal */\nexport const fiberRefModifySome = <A, B>(\n  self: FiberRef.FiberRef<A>,\n  def: B,\n  f: (a: A) => Option.Option<readonly [B, A]>\n): Effect.Effect<B> => fiberRefModify(self, (v) => Option.getOrElse(f(v), () => [def, v] as const))\n\n/* @internal */\nexport const fiberRefUpdate = dual<\n  <A>(f: (a: A) => A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void>,\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<void>\n>(2, (self, f) => fiberRefModify(self, (v) => [void 0, f(v)] as const))\n\n/* @internal */\nexport const fiberRefUpdateSome = dual<\n  <A>(pf: (a: A) => Option.Option<A>) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void>,\n  <A>(self: FiberRef.FiberRef<A>, pf: (a: A) => Option.Option<A>) => Effect.Effect<void>\n>(2, (self, pf) => fiberRefModify(self, (v) => [void 0, Option.getOrElse(pf(v), () => v)] as const))\n\n/* @internal */\nexport const fiberRefUpdateAndGet = dual<\n  <A>(f: (a: A) => A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<A>,\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<A>\n>(2, (self, f) =>\n  fiberRefModify(self, (v) => {\n    const result = f(v)\n    return [result, result] as const\n  }))\n\n/* @internal */\nexport const fiberRefUpdateSomeAndGet = dual<\n  <A>(pf: (a: A) => Option.Option<A>) => (self: FiberRef.FiberRef<A>) => Effect.Effect<A>,\n  <A>(self: FiberRef.FiberRef<A>, pf: (a: A) => Option.Option<A>) => Effect.Effect<A>\n>(2, (self, pf) =>\n  fiberRefModify(self, (v) => {\n    const result = Option.getOrElse(pf(v), () => v)\n    return [result, result] as const\n  }))\n\n// circular\n/** @internal */\nconst RequestResolverSymbolKey = \"effect/RequestResolver\"\n\n/** @internal */\nexport const RequestResolverTypeId: RequestResolver.RequestResolverTypeId = Symbol.for(\n  RequestResolverSymbolKey\n) as RequestResolver.RequestResolverTypeId\n\nconst requestResolverVariance = {\n  /* c8 ignore next */\n  _A: (_: unknown) => _,\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\n/** @internal */\nexport class RequestResolverImpl<in A, out R> implements RequestResolver.RequestResolver<A, R> {\n  readonly [RequestResolverTypeId] = requestResolverVariance\n  constructor(\n    readonly runAll: (\n      requests: Array<Array<Request.Entry<A>>>\n    ) => Effect.Effect<void, never, R>,\n    readonly target?: unknown\n  ) {\n  }\n  [Hash.symbol](): number {\n    return Hash.cached(this, this.target ? Hash.hash(this.target) : Hash.random(this))\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return this.target ?\n      isRequestResolver(that) && Equal.equals(this.target, (that as RequestResolverImpl<any, any>).target) :\n      this === that\n  }\n  identified(...ids: Array<unknown>): RequestResolver.RequestResolver<A, R> {\n    return new RequestResolverImpl(this.runAll, Chunk.fromIterable(ids))\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const isRequestResolver = (u: unknown): u is RequestResolver.RequestResolver<unknown, unknown> =>\n  hasProperty(u, RequestResolverTypeId)\n\n// end\n\n/** @internal */\nexport const resolverLocally = dual<\n  <A>(\n    self: FiberRef.FiberRef<A>,\n    value: A\n  ) => <R, B extends Request.Request<any, any>>(\n    use: RequestResolver.RequestResolver<B, R>\n  ) => RequestResolver.RequestResolver<B, R>,\n  <R, B extends Request.Request<any, any>, A>(\n    use: RequestResolver.RequestResolver<B, R>,\n    self: FiberRef.FiberRef<A>,\n    value: A\n  ) => RequestResolver.RequestResolver<B, R>\n>(3, <R, B extends Request.Request<any, any>, A>(\n  use: RequestResolver.RequestResolver<B, R>,\n  self: FiberRef.FiberRef<A>,\n  value: A\n): RequestResolver.RequestResolver<B, R> =>\n  new RequestResolverImpl<B, R>(\n    (requests) =>\n      fiberRefLocally(\n        use.runAll(requests),\n        self,\n        value\n      ),\n    Chunk.make(\"Locally\", use, self, value)\n  ))\n\n/** @internal */\nexport const requestBlockLocally = <A>(\n  self: BlockedRequests.RequestBlock,\n  ref: FiberRef.FiberRef<A>,\n  value: A\n): BlockedRequests.RequestBlock => blockedRequests_.reduce(self, LocallyReducer(ref, value))\n\nconst LocallyReducer = <A>(\n  ref: FiberRef.FiberRef<A>,\n  value: A\n): BlockedRequests.RequestBlock.Reducer<BlockedRequests.RequestBlock> => ({\n  emptyCase: () => blockedRequests_.empty,\n  parCase: (left, right) => blockedRequests_.par(left, right),\n  seqCase: (left, right) => blockedRequests_.seq(left, right),\n  singleCase: (dataSource, blockedRequest) =>\n    blockedRequests_.single(\n      resolverLocally(dataSource, ref, value),\n      blockedRequest as any\n    )\n})\n\n/* @internal */\nexport const fiberRefLocally: {\n  <A>(self: FiberRef.FiberRef<A>, value: A): <B, E, R>(use: Effect.Effect<B, E, R>) => Effect.Effect<B, E, R>\n  <B, E, R, A>(use: Effect.Effect<B, E, R>, self: FiberRef.FiberRef<A>, value: A): Effect.Effect<B, E, R>\n} = dual(\n  3,\n  <B, E, R, A>(use: Effect.Effect<B, E, R>, self: FiberRef.FiberRef<A>, value: A): Effect.Effect<B, E, R> =>\n    acquireUseRelease(\n      zipLeft(fiberRefGet(self), fiberRefSet(self, value)),\n      () => use,\n      (oldValue) => fiberRefSet(self, oldValue)\n    )\n)\n\n/* @internal */\nexport const fiberRefLocallyWith = dual<\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => <B, E, R>(use: Effect.Effect<B, E, R>) => Effect.Effect<B, E, R>,\n  <B, E, R, A>(use: Effect.Effect<B, E, R>, self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<B, E, R>\n>(3, (use, self, f) => fiberRefGetWith(self, (a) => fiberRefLocally(use, self, f(a))))\n\n/** @internal */\nexport const fiberRefUnsafeMake = <Value>(\n  initial: Value,\n  options?: {\n    readonly fork?: ((a: Value) => Value) | undefined\n    readonly join?: ((left: Value, right: Value) => Value) | undefined\n  }\n): FiberRef.FiberRef<Value> =>\n  fiberRefUnsafeMakePatch(initial, {\n    differ: internalDiffer.update(),\n    fork: options?.fork ?? identity,\n    join: options?.join\n  })\n\n/** @internal */\nexport const fiberRefUnsafeMakeHashSet = <A>(\n  initial: HashSet.HashSet<A>\n): FiberRef.FiberRef<HashSet.HashSet<A>> => {\n  const differ = internalDiffer.hashSet<A>()\n  return fiberRefUnsafeMakePatch(initial, {\n    differ,\n    fork: differ.empty\n  })\n}\n\n/** @internal */\nexport const fiberRefUnsafeMakeReadonlyArray = <A>(\n  initial: ReadonlyArray<A>\n): FiberRef.FiberRef<ReadonlyArray<A>> => {\n  const differ = internalDiffer.readonlyArray(internalDiffer.update<A>())\n  return fiberRefUnsafeMakePatch(initial, {\n    differ,\n    fork: differ.empty\n  })\n}\n\n/** @internal */\nexport const fiberRefUnsafeMakeContext = <A>(\n  initial: Context.Context<A>\n): FiberRef.FiberRef<Context.Context<A>> => {\n  const differ = internalDiffer.environment<A>()\n  return fiberRefUnsafeMakePatch(initial, {\n    differ,\n    fork: differ.empty\n  })\n}\n\n/** @internal */\nexport const fiberRefUnsafeMakePatch = <Value, Patch>(\n  initial: Value,\n  options: {\n    readonly differ: Differ.Differ<Value, Patch>\n    readonly fork: Patch\n    readonly join?: ((oldV: Value, newV: Value) => Value) | undefined\n  }\n): FiberRef.FiberRef<Value> => {\n  const _fiberRef = {\n    ...CommitPrototype,\n    [FiberRefTypeId]: fiberRefVariance,\n    initial,\n    commit() {\n      return fiberRefGet(this)\n    },\n    diff: (oldValue: Value, newValue: Value) => options.differ.diff(oldValue, newValue),\n    combine: (first: Patch, second: Patch) => options.differ.combine(first, second),\n    patch: (patch: Patch) => (oldValue: Value) => options.differ.patch(patch, oldValue),\n    fork: options.fork,\n    join: options.join ?? ((_, n) => n)\n  }\n  return _fiberRef\n}\n\n/** @internal */\nexport const fiberRefUnsafeMakeRuntimeFlags = (\n  initial: RuntimeFlags.RuntimeFlags\n): FiberRef.FiberRef<RuntimeFlags.RuntimeFlags> =>\n  fiberRefUnsafeMakePatch(initial, {\n    differ: runtimeFlags_.differ,\n    fork: runtimeFlags_.differ.empty\n  })\n\n/** @internal */\nexport const currentContext: FiberRef.FiberRef<Context.Context<never>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentContext\"),\n  () => fiberRefUnsafeMakeContext(Context.empty())\n)\n\n/** @internal */\nexport const currentSchedulingPriority: FiberRef.FiberRef<number> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentSchedulingPriority\"),\n  () => fiberRefUnsafeMake(0)\n)\n\n/** @internal */\nexport const currentMaxOpsBeforeYield: FiberRef.FiberRef<number> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentMaxOpsBeforeYield\"),\n  () => fiberRefUnsafeMake(2048)\n)\n\n/** @internal */\nexport const currentLogAnnotations: FiberRef.FiberRef<HashMap.HashMap<string, unknown>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentLogAnnotation\"),\n  () => fiberRefUnsafeMake(HashMap.empty())\n)\n\n/** @internal */\nexport const currentLogLevel: FiberRef.FiberRef<LogLevel.LogLevel> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentLogLevel\"),\n  () => fiberRefUnsafeMake<LogLevel.LogLevel>(logLevelInfo)\n)\n\n/** @internal */\nexport const currentLogSpan: FiberRef.FiberRef<List.List<LogSpan.LogSpan>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentLogSpan\"),\n  () => fiberRefUnsafeMake(List.empty<LogSpan.LogSpan>())\n)\n\n/** @internal */\nexport const withSchedulingPriority = dual<\n  (priority: number) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, priority: number) => Effect.Effect<A, E, R>\n>(2, (self, scheduler) => fiberRefLocally(self, currentSchedulingPriority, scheduler))\n\n/** @internal */\nexport const withMaxOpsBeforeYield = dual<\n  (priority: number) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, priority: number) => Effect.Effect<A, E, R>\n>(2, (self, scheduler) => fiberRefLocally(self, currentMaxOpsBeforeYield, scheduler))\n\n/** @internal */\nexport const currentConcurrency: FiberRef.FiberRef<\"unbounded\" | number> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentConcurrency\"),\n  () => fiberRefUnsafeMake<\"unbounded\" | number>(\"unbounded\")\n)\n\n/**\n * @internal\n */\nexport const currentRequestBatching = globalValue(\n  Symbol.for(\"effect/FiberRef/currentRequestBatching\"),\n  () => fiberRefUnsafeMake(true)\n)\n\n/** @internal */\nexport const currentUnhandledErrorLogLevel: FiberRef.FiberRef<Option.Option<LogLevel.LogLevel>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentUnhandledErrorLogLevel\"),\n  () => fiberRefUnsafeMake(Option.some<LogLevel.LogLevel>(logLevelDebug))\n)\n\n/** @internal */\nexport const currentVersionMismatchErrorLogLevel: FiberRef.FiberRef<Option.Option<LogLevel.LogLevel>> = globalValue(\n  Symbol.for(\"effect/FiberRef/versionMismatchErrorLogLevel\"),\n  () => fiberRefUnsafeMake(Option.some<LogLevel.LogLevel>(logLevelWarning))\n)\n\n/** @internal */\nexport const withUnhandledErrorLogLevel = dual<\n  (level: Option.Option<LogLevel.LogLevel>) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, level: Option.Option<LogLevel.LogLevel>) => Effect.Effect<A, E, R>\n>(2, (self, level) => fiberRefLocally(self, currentUnhandledErrorLogLevel, level))\n\n/** @internal */\nexport const currentMetricLabels: FiberRef.FiberRef<ReadonlyArray<MetricLabel.MetricLabel>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentMetricLabels\"),\n  () => fiberRefUnsafeMakeReadonlyArray(Arr.empty())\n)\n\n/* @internal */\nexport const metricLabels: Effect.Effect<ReadonlyArray<MetricLabel.MetricLabel>> = fiberRefGet(\n  currentMetricLabels\n)\n\n/** @internal */\nexport const currentForkScopeOverride: FiberRef.FiberRef<Option.Option<fiberScope.FiberScope>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentForkScopeOverride\"),\n  () =>\n    fiberRefUnsafeMake(Option.none(), {\n      fork: () => Option.none() as Option.Option<fiberScope.FiberScope>,\n      join: (parent, _) => parent\n    })\n)\n\n/** @internal */\nexport const currentInterruptedCause: FiberRef.FiberRef<Cause.Cause<never>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentInterruptedCause\"),\n  () =>\n    fiberRefUnsafeMake(internalCause.empty, {\n      fork: () => internalCause.empty,\n      join: (parent, _) => parent\n    })\n)\n\n/** @internal */\nexport const currentTracerEnabled: FiberRef.FiberRef<boolean> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentTracerEnabled\"),\n  () => fiberRefUnsafeMake(true)\n)\n\n/** @internal */\nexport const currentTracerTimingEnabled: FiberRef.FiberRef<boolean> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentTracerTiming\"),\n  () => fiberRefUnsafeMake(true)\n)\n\n/** @internal */\nexport const currentTracerSpanAnnotations: FiberRef.FiberRef<HashMap.HashMap<string, unknown>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentTracerSpanAnnotations\"),\n  () => fiberRefUnsafeMake(HashMap.empty())\n)\n\n/** @internal */\nexport const currentTracerSpanLinks: FiberRef.FiberRef<Chunk.Chunk<Tracer.SpanLink>> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentTracerSpanLinks\"),\n  () => fiberRefUnsafeMake(Chunk.empty())\n)\n\n// -----------------------------------------------------------------------------\n// Scope\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const ScopeTypeId: Scope.ScopeTypeId = Symbol.for(\"effect/Scope\") as Scope.ScopeTypeId\n\n/** @internal */\nexport const CloseableScopeTypeId: Scope.CloseableScopeTypeId = Symbol.for(\n  \"effect/CloseableScope\"\n) as Scope.CloseableScopeTypeId\n\n/* @internal */\nexport const scopeAddFinalizer = (\n  self: Scope.Scope,\n  finalizer: Effect.Effect<unknown>\n): Effect.Effect<void> => self.addFinalizer(() => asVoid(finalizer))\n\n/* @internal */\nexport const scopeAddFinalizerExit = (\n  self: Scope.Scope,\n  finalizer: Scope.Scope.Finalizer\n): Effect.Effect<void> => self.addFinalizer(finalizer)\n\n/* @internal */\nexport const scopeClose = (\n  self: Scope.Scope.Closeable,\n  exit: Exit.Exit<unknown, unknown>\n): Effect.Effect<void> => self.close(exit)\n\n/* @internal */\nexport const scopeFork = (\n  self: Scope.Scope,\n  strategy: ExecutionStrategy.ExecutionStrategy\n): Effect.Effect<Scope.Scope.Closeable> => self.fork(strategy)\n\n// -----------------------------------------------------------------------------\n// Cause\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const causeSquash = <E>(self: Cause.Cause<E>): unknown => {\n  return causeSquashWith(identity)(self)\n}\n\n/** @internal */\nexport const causeSquashWith = dual<\n  <E>(f: (error: E) => unknown) => (self: Cause.Cause<E>) => unknown,\n  <E>(self: Cause.Cause<E>, f: (error: E) => unknown) => unknown\n>(2, (self, f) => {\n  const option = pipe(self, internalCause.failureOption, Option.map(f))\n  switch (option._tag) {\n    case \"None\": {\n      return pipe(\n        internalCause.defects(self),\n        Chunk.head,\n        Option.match({\n          onNone: () => {\n            const interrupts = Arr.fromIterable(internalCause.interruptors(self)).flatMap((fiberId) =>\n              Arr.fromIterable(FiberId.ids(fiberId)).map((id) => `#${id}`)\n            )\n            return new InterruptedException(interrupts ? `Interrupted by fibers: ${interrupts.join(\", \")}` : void 0)\n          },\n          onSome: identity\n        })\n      )\n    }\n    case \"Some\": {\n      return option.value\n    }\n  }\n})\n\n// -----------------------------------------------------------------------------\n// Errors\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const YieldableError: new(message?: string, options?: ErrorOptions) => Cause.YieldableError = (function() {\n  class YieldableError extends globalThis.Error {\n    commit() {\n      return fail(this)\n    }\n    toJSON() {\n      const obj = { ...this }\n      if (this.message) obj.message = this.message\n      if (this.cause) obj.cause = this.cause\n      return obj\n    }\n    [NodeInspectSymbol]() {\n      if (this.toString !== globalThis.Error.prototype.toString) {\n        return this.stack ? `${this.toString()}\\n${this.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : this.toString()\n      } else if (\"Bun\" in globalThis) {\n        return internalCause.pretty(internalCause.fail(this), { renderErrorCause: true })\n      }\n      return this\n    }\n  }\n  // @effect-diagnostics-next-line floatingEffect:off\n  Object.assign(YieldableError.prototype, StructuralCommitPrototype)\n  return YieldableError as any\n})()\n\nconst makeException = <T extends { _tag: string; message?: string }>(\n  proto: Omit<T, keyof Cause.YieldableError | \"_tag\">,\n  tag: T[\"_tag\"]\n): new(message?: string | undefined) => T => {\n  class Base extends YieldableError {\n    readonly _tag = tag\n  }\n  Object.assign(Base.prototype, proto)\n  ;(Base.prototype as any).name = tag\n  return Base as any\n}\n\n/** @internal */\nexport const RuntimeExceptionTypeId: Cause.RuntimeExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/RuntimeException\"\n) as Cause.RuntimeExceptionTypeId\n\n/** @internal */\nexport const RuntimeException = makeException<Cause.RuntimeException>({\n  [RuntimeExceptionTypeId]: RuntimeExceptionTypeId\n}, \"RuntimeException\")\n\n/** @internal */\nexport const isRuntimeException = (u: unknown): u is Cause.RuntimeException => hasProperty(u, RuntimeExceptionTypeId)\n\n/** @internal */\nexport const InterruptedExceptionTypeId: Cause.InterruptedExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/InterruptedException\"\n) as Cause.InterruptedExceptionTypeId\n\n/** @internal */\nexport const InterruptedException = makeException<Cause.InterruptedException>({\n  [InterruptedExceptionTypeId]: InterruptedExceptionTypeId\n}, \"InterruptedException\")\n\n/** @internal */\nexport const isInterruptedException = (u: unknown): u is Cause.InterruptedException =>\n  hasProperty(u, InterruptedExceptionTypeId)\n\n/** @internal */\nexport const IllegalArgumentExceptionTypeId: Cause.IllegalArgumentExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/IllegalArgument\"\n) as Cause.IllegalArgumentExceptionTypeId\n\n/** @internal */\nexport const IllegalArgumentException = makeException<Cause.IllegalArgumentException>({\n  [IllegalArgumentExceptionTypeId]: IllegalArgumentExceptionTypeId\n}, \"IllegalArgumentException\")\n\n/** @internal */\nexport const isIllegalArgumentException = (u: unknown): u is Cause.IllegalArgumentException =>\n  hasProperty(u, IllegalArgumentExceptionTypeId)\n\n/** @internal */\nexport const NoSuchElementExceptionTypeId: Cause.NoSuchElementExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/NoSuchElement\"\n) as Cause.NoSuchElementExceptionTypeId\n\n/** @internal */\nexport const NoSuchElementException = makeException<Cause.NoSuchElementException>({\n  [NoSuchElementExceptionTypeId]: NoSuchElementExceptionTypeId\n}, \"NoSuchElementException\")\n\n/** @internal */\nexport const isNoSuchElementException = (u: unknown): u is Cause.NoSuchElementException =>\n  hasProperty(u, NoSuchElementExceptionTypeId)\n\n/** @internal */\nexport const InvalidPubSubCapacityExceptionTypeId: Cause.InvalidPubSubCapacityExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/InvalidPubSubCapacityException\"\n) as Cause.InvalidPubSubCapacityExceptionTypeId\n\n/** @internal */\nexport const InvalidPubSubCapacityException = makeException<Cause.InvalidPubSubCapacityException>({\n  [InvalidPubSubCapacityExceptionTypeId]: InvalidPubSubCapacityExceptionTypeId\n}, \"InvalidPubSubCapacityException\")\n\n/** @internal */\nexport const ExceededCapacityExceptionTypeId: Cause.ExceededCapacityExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/ExceededCapacityException\"\n) as Cause.ExceededCapacityExceptionTypeId\n\n/** @internal */\nexport const ExceededCapacityException = makeException<Cause.ExceededCapacityException>({\n  [ExceededCapacityExceptionTypeId]: ExceededCapacityExceptionTypeId\n}, \"ExceededCapacityException\")\n\n/** @internal */\nexport const isExceededCapacityException = (u: unknown): u is Cause.ExceededCapacityException =>\n  hasProperty(u, ExceededCapacityExceptionTypeId)\n\n/** @internal */\nexport const isInvalidCapacityError = (u: unknown): u is Cause.InvalidPubSubCapacityException =>\n  hasProperty(u, InvalidPubSubCapacityExceptionTypeId)\n\n/** @internal */\nexport const TimeoutExceptionTypeId: Cause.TimeoutExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/Timeout\"\n) as Cause.TimeoutExceptionTypeId\n\n/** @internal */\nexport const TimeoutException = makeException<Cause.TimeoutException>({\n  [TimeoutExceptionTypeId]: TimeoutExceptionTypeId\n}, \"TimeoutException\")\n\n/** @internal */\nexport const timeoutExceptionFromDuration = (duration: Duration.DurationInput): Cause.TimeoutException =>\n  new TimeoutException(`Operation timed out after '${Duration.format(duration)}'`)\n\n/** @internal */\nexport const isTimeoutException = (u: unknown): u is Cause.TimeoutException => hasProperty(u, TimeoutExceptionTypeId)\n\n/** @internal */\nexport const UnknownExceptionTypeId: Cause.UnknownExceptionTypeId = Symbol.for(\n  \"effect/Cause/errors/UnknownException\"\n) as Cause.UnknownExceptionTypeId\n\n/** @internal */\nexport const UnknownException: new(cause: unknown, message?: string | undefined) => Cause.UnknownException =\n  (function() {\n    class UnknownException extends YieldableError {\n      readonly _tag = \"UnknownException\"\n      readonly error: unknown\n      constructor(cause: unknown, message?: string) {\n        super(message ?? \"An unknown error occurred\", { cause })\n        this.error = cause\n      }\n    }\n    Object.assign(UnknownException.prototype, {\n      [UnknownExceptionTypeId]: UnknownExceptionTypeId,\n      name: \"UnknownException\"\n    })\n    return UnknownException as any\n  })()\n\n/** @internal */\nexport const isUnknownException = (u: unknown): u is Cause.UnknownException => hasProperty(u, UnknownExceptionTypeId)\n\n// -----------------------------------------------------------------------------\n// Exit\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const exitIsExit = (u: unknown): u is Exit.Exit<unknown, unknown> =>\n  isEffect(u) && \"_tag\" in u && (u._tag === \"Success\" || u._tag === \"Failure\")\n\n/** @internal */\nexport const exitIsFailure = <A, E>(self: Exit.Exit<A, E>): self is Exit.Failure<A, E> => self._tag === \"Failure\"\n\n/** @internal */\nexport const exitIsSuccess = <A, E>(self: Exit.Exit<A, E>): self is Exit.Success<A, E> => self._tag === \"Success\"\n\n/** @internal */\nexport const exitIsInterrupted = <A, E>(self: Exit.Exit<A, E>): boolean => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return internalCause.isInterrupted(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return false\n  }\n}\n\n/** @internal */\nexport const exitAs = dual<\n  <A2>(value: A2) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<A2, E>,\n  <A, E, A2>(self: Exit.Exit<A, E>, value: A2) => Exit.Exit<A2, E>\n>(2, <A, E, A2>(self: Exit.Exit<A, E>, value: A2): Exit.Exit<A2, E> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE: {\n      return exitFailCause(self.effect_instruction_i0)\n    }\n    case OpCodes.OP_SUCCESS: {\n      return exitSucceed(value) as Exit.Exit<A2, E>\n    }\n  }\n})\n\n/** @internal */\nexport const exitAsVoid = <A, E>(self: Exit.Exit<A, E>): Exit.Exit<void, E> => exitAs(self, void 0)\n\n/** @internal */\nexport const exitCauseOption = <A, E>(self: Exit.Exit<A, E>): Option.Option<Cause.Cause<E>> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return Option.some(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return Option.none()\n  }\n}\n\n/** @internal */\nexport const exitCollectAll = <A, E>(\n  exits: Iterable<Exit.Exit<A, E>>,\n  options?: {\n    readonly parallel?: boolean | undefined\n  }\n): Option.Option<Exit.Exit<Array<A>, E>> =>\n  exitCollectAllInternal(exits, options?.parallel ? internalCause.parallel : internalCause.sequential)\n\n/** @internal */\nexport const exitDie = (defect: unknown): Exit.Exit<never> =>\n  exitFailCause(internalCause.die(defect)) as Exit.Exit<never>\n\n/** @internal */\nexport const exitExists: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): <E>(self: Exit.Exit<A, E>) => self is Exit.Exit<B>\n  <A>(predicate: Predicate<NoInfer<A>>): <E>(self: Exit.Exit<A, E>) => boolean\n  <A, E, B extends A>(self: Exit.Exit<A, E>, refinement: Refinement<A, B>): self is Exit.Exit<B>\n  <A, E>(self: Exit.Exit<A, E>, predicate: Predicate<A>): boolean\n} = dual(2, <A, E, B extends A>(self: Exit.Exit<A, E>, refinement: Refinement<A, B>): self is Exit.Exit<B> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return false\n    case OpCodes.OP_SUCCESS:\n      return refinement(self.effect_instruction_i0)\n  }\n})\n\n/** @internal */\nexport const exitFail = <E>(error: E): Exit.Exit<never, E> =>\n  exitFailCause(internalCause.fail(error)) as Exit.Exit<never, E>\n\n/** @internal */\nexport const exitFailCause = <E>(cause: Cause.Cause<E>): Exit.Exit<never, E> => {\n  const effect = new EffectPrimitiveFailure(OpCodes.OP_FAILURE) as any\n  effect.effect_instruction_i0 = cause\n  return effect\n}\n\n/** @internal */\nexport const exitFlatMap = dual<\n  <A, A2, E2>(f: (a: A) => Exit.Exit<A2, E2>) => <E>(self: Exit.Exit<A, E>) => Exit.Exit<A2, E | E2>,\n  <A, E, E2, A2>(self: Exit.Exit<A, E>, f: (a: A) => Exit.Exit<A2, E2>) => Exit.Exit<A2, E | E2>\n>(2, <A, E, E2, A2>(self: Exit.Exit<A, E>, f: (a: A) => Exit.Exit<A2, E2>): Exit.Exit<A2, E | E2> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE: {\n      return exitFailCause(self.effect_instruction_i0)\n    }\n    case OpCodes.OP_SUCCESS: {\n      return f(self.effect_instruction_i0)\n    }\n  }\n})\n\n/** @internal */\nexport const exitFlatMapEffect: {\n  <A, E, A2, E2, R>(\n    f: (a: A) => Effect.Effect<Exit.Exit<A2, E>, E2, R>\n  ): (self: Exit.Exit<A, E>) => Effect.Effect<Exit.Exit<A2, E>, E2, R>\n  <A, E, A2, E2, R>(\n    self: Exit.Exit<A, E>,\n    f: (a: A) => Effect.Effect<Exit.Exit<A2, E>, E2, R>\n  ): Effect.Effect<Exit.Exit<A2, E>, E2, R>\n} = dual(2, <A, E, A2, E2, R>(\n  self: Exit.Exit<A, E>,\n  f: (a: A) => Effect.Effect<Exit.Exit<A2, E>, E2, R>\n): Effect.Effect<Exit.Exit<A2, E>, E2, R> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE: {\n      return succeed(exitFailCause(self.effect_instruction_i0))\n    }\n    case OpCodes.OP_SUCCESS: {\n      return f(self.effect_instruction_i0)\n    }\n  }\n})\n\n/** @internal */\nexport const exitFlatten = <A, E, E2>(\n  self: Exit.Exit<Exit.Exit<A, E>, E2>\n): Exit.Exit<A, E | E2> => pipe(self, exitFlatMap(identity))\n\n/** @internal */\nexport const exitForEachEffect: {\n  <A, B, E2, R>(\n    f: (a: A) => Effect.Effect<B, E2, R>\n  ): <E>(self: Exit.Exit<A, E>) => Effect.Effect<Exit.Exit<B, E | E2>, never, R>\n  <A, E, B, E2, R>(\n    self: Exit.Exit<A, E>,\n    f: (a: A) => Effect.Effect<B, E2, R>\n  ): Effect.Effect<Exit.Exit<B, E | E2>, never, R>\n} = dual(2, <A, E, B, E2, R>(\n  self: Exit.Exit<A, E>,\n  f: (a: A) => Effect.Effect<B, E2, R>\n): Effect.Effect<Exit.Exit<B, E | E2>, never, R> => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE: {\n      return succeed(exitFailCause(self.effect_instruction_i0))\n    }\n    case OpCodes.OP_SUCCESS: {\n      return exit(f(self.effect_instruction_i0))\n    }\n  }\n})\n\n/** @internal */\nexport const exitFromEither = <R, L>(either: Either.Either<R, L>): Exit.Exit<R, L> => {\n  switch (either._tag) {\n    case \"Left\":\n      return exitFail(either.left)\n    case \"Right\":\n      return exitSucceed(either.right)\n  }\n}\n\n/** @internal */\nexport const exitFromOption = <A>(option: Option.Option<A>): Exit.Exit<A, void> => {\n  switch (option._tag) {\n    case \"None\":\n      return exitFail(void 0)\n    case \"Some\":\n      return exitSucceed(option.value)\n  }\n}\n\n/** @internal */\nexport const exitGetOrElse = dual<\n  <E, A2>(orElse: (cause: Cause.Cause<E>) => A2) => <A>(self: Exit.Exit<A, E>) => A | A2,\n  <A, E, A2>(self: Exit.Exit<A, E>, orElse: (cause: Cause.Cause<E>) => A2) => A | A2\n>(2, (self, orElse) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return orElse(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return self.effect_instruction_i0\n  }\n})\n\n/** @internal */\nexport const exitInterrupt = (fiberId: FiberId.FiberId): Exit.Exit<never> =>\n  exitFailCause(internalCause.interrupt(fiberId))\n\n/** @internal */\nexport const exitMap = dual<\n  <A, B>(f: (a: A) => B) => <E>(self: Exit.Exit<A, E>) => Exit.Exit<B, E>,\n  <A, E, B>(self: Exit.Exit<A, E>, f: (a: A) => B) => Exit.Exit<B, E>\n>(2, (self, f) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return exitFailCause(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return exitSucceed(f(self.effect_instruction_i0))\n  }\n})\n\n/** @internal */\nexport const exitMapBoth = dual<\n  <E, A, E2, A2>(\n    options: {\n      readonly onFailure: (e: E) => E2\n      readonly onSuccess: (a: A) => A2\n    }\n  ) => (self: Exit.Exit<A, E>) => Exit.Exit<A2, E2>,\n  <A, E, E2, A2>(\n    self: Exit.Exit<A, E>,\n    options: {\n      readonly onFailure: (e: E) => E2\n      readonly onSuccess: (a: A) => A2\n    }\n  ) => Exit.Exit<A2, E2>\n>(2, (self, { onFailure, onSuccess }) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return exitFailCause(pipe(self.effect_instruction_i0, internalCause.map(onFailure)))\n    case OpCodes.OP_SUCCESS:\n      return exitSucceed(onSuccess(self.effect_instruction_i0))\n  }\n})\n\n/** @internal */\nexport const exitMapError = dual<\n  <E, E2>(f: (e: E) => E2) => <A>(self: Exit.Exit<A, E>) => Exit.Exit<A, E2>,\n  <A, E, E2>(self: Exit.Exit<A, E>, f: (e: E) => E2) => Exit.Exit<A, E2>\n>(2, (self, f) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return exitFailCause(pipe(self.effect_instruction_i0, internalCause.map(f)))\n    case OpCodes.OP_SUCCESS:\n      return exitSucceed(self.effect_instruction_i0)\n  }\n})\n\n/** @internal */\nexport const exitMapErrorCause = dual<\n  <E, E2>(f: (cause: Cause.Cause<E>) => Cause.Cause<E2>) => <A>(self: Exit.Exit<A, E>) => Exit.Exit<A, E2>,\n  <E, A, E2>(self: Exit.Exit<A, E>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>) => Exit.Exit<A, E2>\n>(2, (self, f) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return exitFailCause(f(self.effect_instruction_i0))\n    case OpCodes.OP_SUCCESS:\n      return exitSucceed(self.effect_instruction_i0)\n  }\n})\n\n/** @internal */\nexport const exitMatch = dual<\n  <E, A, Z1, Z2>(options: {\n    readonly onFailure: (cause: Cause.Cause<E>) => Z1\n    readonly onSuccess: (a: A) => Z2\n  }) => (self: Exit.Exit<A, E>) => Z1 | Z2,\n  <A, E, Z1, Z2>(self: Exit.Exit<A, E>, options: {\n    readonly onFailure: (cause: Cause.Cause<E>) => Z1\n    readonly onSuccess: (a: A) => Z2\n  }) => Z1 | Z2\n>(2, (self, { onFailure, onSuccess }) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return onFailure(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return onSuccess(self.effect_instruction_i0)\n  }\n})\n\n/** @internal */\nexport const exitMatchEffect = dual<\n  <E, A2, E2, R, A, A3, E3, R2>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R2>\n    }\n  ) => (self: Exit.Exit<A, E>) => Effect.Effect<A2 | A3, E2 | E3, R | R2>,\n  <A, E, A2, E2, R, A3, E3, R2>(\n    self: Exit.Exit<A, E>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R2>\n    }\n  ) => Effect.Effect<A2 | A3, E2 | E3, R | R2>\n>(2, (self, { onFailure, onSuccess }) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE:\n      return onFailure(self.effect_instruction_i0)\n    case OpCodes.OP_SUCCESS:\n      return onSuccess(self.effect_instruction_i0)\n  }\n})\n\n/** @internal */\nexport const exitSucceed = <A>(value: A): Exit.Exit<A> => {\n  const effect = new EffectPrimitiveSuccess(OpCodes.OP_SUCCESS) as any\n  effect.effect_instruction_i0 = value\n  return effect\n}\n\n/** @internal */\nexport const exitVoid: Exit.Exit<void> = exitSucceed(void 0)\n\n/** @internal */\nexport const exitZip = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<[A, A2], E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<[A, A2], E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (a, a2) => [a, a2],\n    onFailure: internalCause.sequential\n  }))\n\n/** @internal */\nexport const exitZipLeft = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<A, E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<A, E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (a, _) => a,\n    onFailure: internalCause.sequential\n  }))\n\n/** @internal */\nexport const exitZipRight = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<A2, E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<A2, E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (_, a2) => a2,\n    onFailure: internalCause.sequential\n  }))\n\n/** @internal */\nexport const exitZipPar = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<[A, A2], E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<[A, A2], E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (a, a2) => [a, a2],\n    onFailure: internalCause.parallel\n  }))\n\n/** @internal */\nexport const exitZipParLeft = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<A, E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<A, E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (a, _) => a,\n    onFailure: internalCause.parallel\n  }))\n\n/** @internal */\nexport const exitZipParRight = dual<\n  <A2, E2>(that: Exit.Exit<A2, E2>) => <A, E>(self: Exit.Exit<A, E>) => Exit.Exit<A2, E | E2>,\n  <A, E, A2, E2>(self: Exit.Exit<A, E>, that: Exit.Exit<A2, E2>) => Exit.Exit<A2, E | E2>\n>(2, (self, that) =>\n  exitZipWith(self, that, {\n    onSuccess: (_, a2) => a2,\n    onFailure: internalCause.parallel\n  }))\n\n/** @internal */\nexport const exitZipWith = dual<\n  <B, E2, A, C, E>(\n    that: Exit.Exit<B, E2>,\n    options: {\n      readonly onSuccess: (a: A, b: B) => C\n      readonly onFailure: (cause: Cause.Cause<E>, cause2: Cause.Cause<E2>) => Cause.Cause<E | E2>\n    }\n  ) => (self: Exit.Exit<A, E>) => Exit.Exit<C, E | E2>,\n  <A, E, B, E2, C>(\n    self: Exit.Exit<A, E>,\n    that: Exit.Exit<B, E2>,\n    options: {\n      readonly onSuccess: (a: A, b: B) => C\n      readonly onFailure: (cause: Cause.Cause<E>, cause2: Cause.Cause<E2>) => Cause.Cause<E | E2>\n    }\n  ) => Exit.Exit<C, E | E2>\n>(3, (\n  self,\n  that,\n  { onFailure, onSuccess }\n) => {\n  switch (self._tag) {\n    case OpCodes.OP_FAILURE: {\n      switch (that._tag) {\n        case OpCodes.OP_SUCCESS:\n          return exitFailCause(self.effect_instruction_i0)\n        case OpCodes.OP_FAILURE: {\n          return exitFailCause(onFailure(self.effect_instruction_i0, that.effect_instruction_i0))\n        }\n      }\n    }\n    case OpCodes.OP_SUCCESS: {\n      switch (that._tag) {\n        case OpCodes.OP_SUCCESS:\n          return exitSucceed(onSuccess(self.effect_instruction_i0, that.effect_instruction_i0))\n        case OpCodes.OP_FAILURE:\n          return exitFailCause(that.effect_instruction_i0)\n      }\n    }\n  }\n})\n\nconst exitCollectAllInternal = <A, E>(\n  exits: Iterable<Exit.Exit<A, E>>,\n  combineCauses: (causeA: Cause.Cause<E>, causeB: Cause.Cause<E>) => Cause.Cause<E>\n): Option.Option<Exit.Exit<Array<A>, E>> => {\n  const list = Chunk.fromIterable(exits)\n  if (!Chunk.isNonEmpty(list)) {\n    return Option.none()\n  }\n  return pipe(\n    Chunk.tailNonEmpty(list),\n    Arr.reduce(\n      pipe(Chunk.headNonEmpty(list), exitMap<A, Chunk.Chunk<A>>(Chunk.of)),\n      (accumulator, current) =>\n        pipe(\n          accumulator,\n          exitZipWith(current, {\n            onSuccess: (list, value) => pipe(list, Chunk.prepend(value)),\n            onFailure: combineCauses\n          })\n        )\n    ),\n    exitMap(Chunk.reverse),\n    exitMap((chunk) => Chunk.toReadonlyArray(chunk) as Array<A>),\n    Option.some\n  )\n}\n\n// -----------------------------------------------------------------------------\n// Deferred\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const deferredUnsafeMake = <A, E = never>(fiberId: FiberId.FiberId): Deferred.Deferred<A, E> => {\n  const _deferred = {\n    ...CommitPrototype,\n    [deferred.DeferredTypeId]: deferred.deferredVariance,\n    state: MutableRef.make(deferred.pending<A, E>([])),\n    commit() {\n      return deferredAwait(this)\n    },\n    blockingOn: fiberId\n  }\n  return _deferred\n}\n\n/* @internal */\nexport const deferredMake = <A, E = never>(): Effect.Effect<Deferred.Deferred<A, E>> =>\n  flatMap(fiberId, (id) => deferredMakeAs<A, E>(id))\n\n/* @internal */\nexport const deferredMakeAs = <A, E = never>(fiberId: FiberId.FiberId): Effect.Effect<Deferred.Deferred<A, E>> =>\n  sync(() => deferredUnsafeMake<A, E>(fiberId))\n\n/* @internal */\nexport const deferredAwait = <A, E>(self: Deferred.Deferred<A, E>): Effect.Effect<A, E> =>\n  asyncInterrupt<A, E>((resume) => {\n    const state = MutableRef.get(self.state)\n    switch (state._tag) {\n      case DeferredOpCodes.OP_STATE_DONE: {\n        return resume(state.effect)\n      }\n      case DeferredOpCodes.OP_STATE_PENDING: {\n        // we can push here as the internal state is mutable\n        state.joiners.push(resume)\n        return deferredInterruptJoiner(self, resume)\n      }\n    }\n  }, self.blockingOn)\n\n/* @internal */\nexport const deferredComplete: {\n  <A, E>(effect: Effect.Effect<A, E>): (self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>\n  <A, E>(self: Deferred.Deferred<A, E>, effect: Effect.Effect<A, E>): Effect.Effect<boolean>\n} = dual(\n  2,\n  <A, E>(self: Deferred.Deferred<A, E>, effect: Effect.Effect<A, E>): Effect.Effect<boolean> =>\n    intoDeferred(effect, self)\n)\n\n/* @internal */\nexport const deferredCompleteWith = dual<\n  <A, E>(effect: Effect.Effect<A, E>) => (self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, effect: Effect.Effect<A, E>) => Effect.Effect<boolean>\n>(2, (self, effect) =>\n  sync(() => {\n    const state = MutableRef.get(self.state)\n    switch (state._tag) {\n      case DeferredOpCodes.OP_STATE_DONE: {\n        return false\n      }\n      case DeferredOpCodes.OP_STATE_PENDING: {\n        MutableRef.set(self.state, deferred.done(effect))\n        for (let i = 0, len = state.joiners.length; i < len; i++) {\n          state.joiners[i](effect)\n        }\n        return true\n      }\n    }\n  }))\n\n/* @internal */\nexport const deferredDone = dual<\n  <A, E>(exit: Exit.Exit<A, E>) => (self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, exit: Exit.Exit<A, E>) => Effect.Effect<boolean>\n>(2, (self, exit) => deferredCompleteWith(self, exit))\n\n/* @internal */\nexport const deferredFail = dual<\n  <E>(error: E) => <A>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, error: E) => Effect.Effect<boolean>\n>(2, (self, error) => deferredCompleteWith(self, fail(error)))\n\n/* @internal */\nexport const deferredFailSync = dual<\n  <E>(evaluate: LazyArg<E>) => <A>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, evaluate: LazyArg<E>) => Effect.Effect<boolean>\n>(2, (self, evaluate) => deferredCompleteWith(self, failSync(evaluate)))\n\n/* @internal */\nexport const deferredFailCause = dual<\n  <E>(cause: Cause.Cause<E>) => <A>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, cause: Cause.Cause<E>) => Effect.Effect<boolean>\n>(2, (self, cause) => deferredCompleteWith(self, failCause(cause)))\n\n/* @internal */\nexport const deferredFailCauseSync = dual<\n  <E>(evaluate: LazyArg<Cause.Cause<E>>) => <A>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, evaluate: LazyArg<Cause.Cause<E>>) => Effect.Effect<boolean>\n>(2, (self, evaluate) => deferredCompleteWith(self, failCauseSync(evaluate)))\n\n/* @internal */\nexport const deferredDie = dual<\n  (defect: unknown) => <A, E>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, defect: unknown) => Effect.Effect<boolean>\n>(2, (self, defect) => deferredCompleteWith(self, die(defect)))\n\n/* @internal */\nexport const deferredDieSync = dual<\n  (evaluate: LazyArg<unknown>) => <A, E>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, evaluate: LazyArg<unknown>) => Effect.Effect<boolean>\n>(2, (self, evaluate) => deferredCompleteWith(self, dieSync(evaluate)))\n\n/* @internal */\nexport const deferredInterrupt = <A, E>(self: Deferred.Deferred<A, E>): Effect.Effect<boolean> =>\n  flatMap(fiberId, (fiberId) => deferredCompleteWith(self, interruptWith(fiberId)))\n\n/* @internal */\nexport const deferredInterruptWith = dual<\n  (fiberId: FiberId.FiberId) => <A, E>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, fiberId: FiberId.FiberId) => Effect.Effect<boolean>\n>(2, (self, fiberId) => deferredCompleteWith(self, interruptWith(fiberId)))\n\n/* @internal */\nexport const deferredIsDone = <A, E>(self: Deferred.Deferred<A, E>): Effect.Effect<boolean> =>\n  sync(() => MutableRef.get(self.state)._tag === DeferredOpCodes.OP_STATE_DONE)\n\n/* @internal */\nexport const deferredPoll = <A, E>(\n  self: Deferred.Deferred<A, E>\n): Effect.Effect<Option.Option<Effect.Effect<A, E>>> =>\n  sync(() => {\n    const state = MutableRef.get(self.state)\n    switch (state._tag) {\n      case DeferredOpCodes.OP_STATE_DONE: {\n        return Option.some(state.effect)\n      }\n      case DeferredOpCodes.OP_STATE_PENDING: {\n        return Option.none()\n      }\n    }\n  })\n\n/* @internal */\nexport const deferredSucceed = dual<\n  <A>(value: A) => <E>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, value: A) => Effect.Effect<boolean>\n>(2, (self, value) => deferredCompleteWith(self, succeed(value)))\n\n/* @internal */\nexport const deferredSync = dual<\n  <A>(evaluate: LazyArg<A>) => <E>(self: Deferred.Deferred<A, E>) => Effect.Effect<boolean>,\n  <A, E>(self: Deferred.Deferred<A, E>, evaluate: LazyArg<A>) => Effect.Effect<boolean>\n>(2, (self, evaluate) => deferredCompleteWith(self, sync(evaluate)))\n\n/** @internal */\nexport const deferredUnsafeDone = <A, E>(self: Deferred.Deferred<A, E>, effect: Effect.Effect<A, E>): void => {\n  const state = MutableRef.get(self.state)\n  if (state._tag === DeferredOpCodes.OP_STATE_PENDING) {\n    MutableRef.set(self.state, deferred.done(effect))\n    for (let i = 0, len = state.joiners.length; i < len; i++) {\n      state.joiners[i](effect)\n    }\n  }\n}\n\nconst deferredInterruptJoiner = <A, E>(\n  self: Deferred.Deferred<A, E>,\n  joiner: (effect: Effect.Effect<A, E>) => void\n): Effect.Effect<void> =>\n  sync(() => {\n    const state = MutableRef.get(self.state)\n    if (state._tag === DeferredOpCodes.OP_STATE_PENDING) {\n      const index = state.joiners.indexOf(joiner)\n      if (index >= 0) {\n        // we can splice here as the internal state is mutable\n        state.joiners.splice(index, 1)\n      }\n    }\n  })\n\n// -----------------------------------------------------------------------------\n// Context\n// -----------------------------------------------------------------------------\n\nconst constContext = withFiberRuntime((fiber) => exitSucceed(fiber.currentContext))\n\n/* @internal */\nexport const context = <R>(): Effect.Effect<Context.Context<R>, never, R> => constContext as any\n\n/* @internal */\nexport const contextWith = <R0, A>(\n  f: (context: Context.Context<R0>) => A\n): Effect.Effect<A, never, R0> => map(context<R0>(), f)\n\n/* @internal */\nexport const contextWithEffect = <R2, A, E, R>(\n  f: (context: Context.Context<R2>) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R | R2> => flatMap(context<R2>(), f)\n\n/* @internal */\nexport const provideContext = dual<\n  <R>(context: Context.Context<R>) => <A, E>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, context: Context.Context<R>) => Effect.Effect<A, E>\n>(2, <A, E, R>(self: Effect.Effect<A, E, R>, context: Context.Context<R>) =>\n  fiberRefLocally(\n    currentContext,\n    context\n  )(self as Effect.Effect<A, E>))\n\n/* @internal */\nexport const provideSomeContext = dual<\n  <R>(context: Context.Context<R>) => <A, E, R1>(self: Effect.Effect<A, E, R1>) => Effect.Effect<A, E, Exclude<R1, R>>,\n  <A, E, R1, R>(self: Effect.Effect<A, E, R1>, context: Context.Context<R>) => Effect.Effect<A, E, Exclude<R1, R>>\n>(2, <A, E, R1, R>(self: Effect.Effect<A, E, R1>, context: Context.Context<R>) =>\n  fiberRefLocallyWith(\n    currentContext,\n    (parent) => Context.merge(parent, context)\n  )(self as Effect.Effect<A, E>))\n\n/* @internal */\nexport const mapInputContext = dual<\n  <R2, R>(\n    f: (context: Context.Context<R2>) => Context.Context<R>\n  ) => <A, E>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R2>,\n  <A, E, R, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (context: Context.Context<R2>) => Context.Context<R>\n  ) => Effect.Effect<A, E, R2>\n>(2, <A, E, R, R2>(\n  self: Effect.Effect<A, E, R>,\n  f: (context: Context.Context<R2>) => Context.Context<R>\n) => contextWithEffect((context: Context.Context<R2>) => provideContext(self, f(context))))\n\n// -----------------------------------------------------------------------------\n// Filtering\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const filterEffectOrElse: {\n  <A, E2, R2, A2, E3, R3>(\n    options: {\n      readonly predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n      readonly orElse: (a: NoInfer<A>) => Effect.Effect<A2, E3, R3>\n    }\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A | A2, E | E2 | E3, R | R2 | R3>\n  <A, E, R, E2, R2, A2, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n      readonly orElse: (a: A) => Effect.Effect<A2, E3, R3>\n    }\n  ): Effect.Effect<A | A2, E | E2 | E3, R | R2 | R3>\n} = dual(2, <A, E, R, E2, R2, A2, E3, R3>(\n  self: Effect.Effect<A, E, R>,\n  options: {\n    readonly predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n    readonly orElse: (a: A) => Effect.Effect<A2, E3, R3>\n  }\n): Effect.Effect<A | A2, E | E2 | E3, R | R2 | R3> =>\n  flatMap(\n    self,\n    (a) =>\n      flatMap(\n        options.predicate(a),\n        (pass): Effect.Effect<A | A2, E3, R3> => pass ? succeed(a) : options.orElse(a)\n      )\n  ))\n\n/** @internal */\nexport const filterEffectOrFail: {\n  <A, E2, R2, E3>(\n    options: {\n      readonly predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n      readonly orFailWith: (a: NoInfer<A>) => E3\n    }\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2 | E3, R | R2>\n  <A, E, R, E2, R2, E3>(\n    self: Effect.Effect<A, E, R>,\n    options: {\n      readonly predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n      readonly orFailWith: (a: A) => E3\n    }\n  ): Effect.Effect<A, E | E2 | E3, R | R2>\n} = dual(2, <A, E, R, E2, R2, E3>(\n  self: Effect.Effect<A, E, R>,\n  options: {\n    readonly predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n    readonly orFailWith: (a: A) => E3\n  }\n): Effect.Effect<A, E | E2 | E3, R | R2> =>\n  filterEffectOrElse(self, {\n    predicate: options.predicate,\n    orElse: (a) => fail(options.orFailWith(a))\n  }))\n\n// -----------------------------------------------------------------------------\n// Tracing\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const currentSpanFromFiber = <A, E>(fiber: Fiber.RuntimeFiber<A, E>): Option.Option<Tracer.Span> => {\n  const span = fiber.currentSpan\n  return span !== undefined && span._tag === \"Span\" ? Option.some(span) : Option.none()\n}\n\nconst NoopSpanProto: Omit<Tracer.Span, \"parent\" | \"name\" | \"context\"> = {\n  _tag: \"Span\",\n  spanId: \"noop\",\n  traceId: \"noop\",\n  sampled: false,\n  status: {\n    _tag: \"Ended\",\n    startTime: BigInt(0),\n    endTime: BigInt(0),\n    exit: exitVoid\n  },\n  attributes: new Map(),\n  links: [],\n  kind: \"internal\",\n  attribute() {},\n  event() {},\n  end() {},\n  addLinks() {}\n}\n\n/** @internal */\nexport const noopSpan = (options: {\n  readonly name: string\n  readonly parent: Option.Option<Tracer.AnySpan>\n  readonly context: Context.Context<never>\n}): Tracer.Span => Object.assign(Object.create(NoopSpanProto), options)\n", "/**\n * @since 2.0.0\n */\nimport * as RA from \"./Array.js\"\nimport type { NonEmptyReadonlyArray } from \"./Array.js\"\nimport type { Either } from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport { dual, identity, pipe } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { NonEmptyIterable } from \"./NonEmptyIterable.js\"\nimport type { Option } from \"./Option.js\"\nimport * as O from \"./Option.js\"\nimport * as Order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty, type Predicate, type Refinement } from \"./Predicate.js\"\nimport type { Covariant, NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/Chunk\") as TypeId\n\n/**\n * @category symbol\n * @since 2.0.0\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Chunk<out A> extends Iterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _A: Covariant<A>\n  }\n  readonly length: number\n  /** @internal */\n  right: Chunk<A>\n  /** @internal */\n  left: Chunk<A>\n  /** @internal */\n  backing: Backing<A>\n  /** @internal */\n  depth: number\n}\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport interface NonEmptyChunk<out A> extends Chunk<A>, NonEmptyIterable<A> {}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface ChunkTypeLambda extends TypeLambda {\n  readonly type: Chunk<this[\"Target\"]>\n}\n\ntype Backing<A> =\n  | IArray<A>\n  | IConcat<A>\n  | ISingleton<A>\n  | IEmpty\n  | ISlice<A>\n\ninterface IArray<A> {\n  readonly _tag: \"IArray\"\n  readonly array: ReadonlyArray<A>\n}\n\ninterface IConcat<A> {\n  readonly _tag: \"IConcat\"\n  readonly left: Chunk<A>\n  readonly right: Chunk<A>\n}\n\ninterface ISingleton<A> {\n  readonly _tag: \"ISingleton\"\n  readonly a: A\n}\n\ninterface IEmpty {\n  readonly _tag: \"IEmpty\"\n}\n\ninterface ISlice<A> {\n  readonly _tag: \"ISlice\"\n  readonly chunk: Chunk<A>\n  readonly offset: number\n  readonly length: number\n}\n\nfunction copy<A>(\n  src: ReadonlyArray<A>,\n  srcPos: number,\n  dest: Array<A>,\n  destPos: number,\n  len: number\n) {\n  for (let i = srcPos; i < Math.min(src.length, srcPos + len); i++) {\n    dest[destPos + i - srcPos] = src[i]!\n  }\n  return dest\n}\n\nconst emptyArray: ReadonlyArray<never> = []\n\n/**\n * Compares the two chunks of equal length using the specified function\n *\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <A>(isEquivalent: Equivalence.Equivalence<A>): Equivalence.Equivalence<Chunk<A>> =>\n  Equivalence.make((self, that) =>\n    self.length === that.length && toReadonlyArray(self).every((value, i) => isEquivalent(value, unsafeGet(that, i)))\n  )\n\nconst _equivalence = getEquivalence(Equal.equals)\n\nconst ChunkProto: Omit<Chunk<unknown>, \"backing\" | \"depth\" | \"left\" | \"length\" | \"right\"> = {\n  [TypeId]: {\n    _A: (_: never) => _\n  },\n  toString<A>(this: Chunk<A>) {\n    return format(this.toJSON())\n  },\n  toJSON<A>(this: Chunk<A>) {\n    return {\n      _id: \"Chunk\",\n      values: toReadonlyArray(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]<A>(this: Chunk<A>) {\n    return this.toJSON()\n  },\n  [Equal.symbol]<A>(this: Chunk<A>, that: unknown): boolean {\n    return isChunk(that) && _equivalence(this, that)\n  },\n  [Hash.symbol]<A>(this: Chunk<A>): number {\n    return Hash.cached(this, Hash.array(toReadonlyArray(this)))\n  },\n  [Symbol.iterator]<A>(this: Chunk<A>): Iterator<A> {\n    switch (this.backing._tag) {\n      case \"IArray\": {\n        return this.backing.array[Symbol.iterator]()\n      }\n      case \"IEmpty\": {\n        return emptyArray[Symbol.iterator]()\n      }\n      default: {\n        return toReadonlyArray(this)[Symbol.iterator]()\n      }\n    }\n  },\n  pipe<A>(this: Chunk<A>) {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst makeChunk = <A>(backing: Backing<A>): Chunk<A> => {\n  const chunk = Object.create(ChunkProto)\n  chunk.backing = backing\n  switch (backing._tag) {\n    case \"IEmpty\": {\n      chunk.length = 0\n      chunk.depth = 0\n      chunk.left = chunk\n      chunk.right = chunk\n      break\n    }\n    case \"IConcat\": {\n      chunk.length = backing.left.length + backing.right.length\n      chunk.depth = 1 + Math.max(backing.left.depth, backing.right.depth)\n      chunk.left = backing.left\n      chunk.right = backing.right\n      break\n    }\n    case \"IArray\": {\n      chunk.length = backing.array.length\n      chunk.depth = 0\n      chunk.left = _empty\n      chunk.right = _empty\n      break\n    }\n    case \"ISingleton\": {\n      chunk.length = 1\n      chunk.depth = 0\n      chunk.left = _empty\n      chunk.right = _empty\n      break\n    }\n    case \"ISlice\": {\n      chunk.length = backing.length\n      chunk.depth = backing.chunk.depth + 1\n      chunk.left = _empty\n      chunk.right = _empty\n      break\n    }\n  }\n  return chunk\n}\n\n/**\n * Checks if `u` is a `Chunk<unknown>`\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const isChunk: {\n  /**\n   * Checks if `u` is a `Chunk<unknown>`\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A>(u: Iterable<A>): u is Chunk<A>\n  /**\n   * Checks if `u` is a `Chunk<unknown>`\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  (u: unknown): u is Chunk<unknown>\n} = (u: unknown): u is Chunk<unknown> => hasProperty(u, TypeId)\n\nconst _empty = makeChunk<never>({ _tag: \"IEmpty\" })\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const empty: <A = never>() => Chunk<A> = () => _empty\n\n/**\n * Builds a `NonEmptyChunk` from an non-empty collection of elements.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <As extends readonly [any, ...ReadonlyArray<any>]>(...as: As): NonEmptyChunk<As[number]> =>\n  unsafeFromNonEmptyArray(as)\n\n/**\n * Builds a `NonEmptyChunk` from a single element.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const of = <A>(a: A): NonEmptyChunk<A> => makeChunk({ _tag: \"ISingleton\", a }) as any\n\n/**\n * Creates a new `Chunk` from an iterable collection of values.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterable = <A>(self: Iterable<A>): Chunk<A> =>\n  isChunk(self) ? self : unsafeFromArray(RA.fromIterable(self))\n\nconst copyToArray = <A>(self: Chunk<A>, array: Array<any>, initial: number): void => {\n  switch (self.backing._tag) {\n    case \"IArray\": {\n      copy(self.backing.array, 0, array, initial, self.length)\n      break\n    }\n    case \"IConcat\": {\n      copyToArray(self.left, array, initial)\n      copyToArray(self.right, array, initial + self.left.length)\n      break\n    }\n    case \"ISingleton\": {\n      array[initial] = self.backing.a\n      break\n    }\n    case \"ISlice\": {\n      let i = 0\n      let j = initial\n      while (i < self.length) {\n        array[j] = unsafeGet(self, i)\n        i += 1\n        j += 1\n      }\n      break\n    }\n  }\n}\n\nconst toArray_ = <A>(self: Chunk<A>): Array<A> => toReadonlyArray(self).slice()\n\n/**\n * Converts a `Chunk` into an `Array`. If the provided `Chunk` is non-empty\n * (`NonEmptyChunk`), the function will return a `NonEmptyArray`, ensuring the\n * non-empty property is preserved.\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toArray: <S extends Chunk<any>>(\n  self: S\n) => S extends NonEmptyChunk<any> ? RA.NonEmptyArray<Chunk.Infer<S>> : Array<Chunk.Infer<S>> = toArray_ as any\n\nconst toReadonlyArray_ = <A>(self: Chunk<A>): ReadonlyArray<A> => {\n  switch (self.backing._tag) {\n    case \"IEmpty\": {\n      return emptyArray\n    }\n    case \"IArray\": {\n      return self.backing.array\n    }\n    default: {\n      const arr = new Array<A>(self.length)\n      copyToArray(self, arr, 0)\n      self.backing = {\n        _tag: \"IArray\",\n        array: arr\n      }\n      self.left = _empty\n      self.right = _empty\n      self.depth = 0\n      return arr\n    }\n  }\n}\n\n/**\n * Converts a `Chunk` into a `ReadonlyArray`. If the provided `Chunk` is\n * non-empty (`NonEmptyChunk`), the function will return a\n * `NonEmptyReadonlyArray`, ensuring the non-empty property is preserved.\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toReadonlyArray: <S extends Chunk<any>>(\n  self: S\n) => S extends NonEmptyChunk<any> ? RA.NonEmptyReadonlyArray<Chunk.Infer<S>> : ReadonlyArray<Chunk.Infer<S>> =\n  toReadonlyArray_ as any\n\nconst reverseChunk = <A>(self: Chunk<A>): Chunk<A> => {\n  switch (self.backing._tag) {\n    case \"IEmpty\":\n    case \"ISingleton\":\n      return self\n    case \"IArray\": {\n      return makeChunk({ _tag: \"IArray\", array: RA.reverse(self.backing.array) })\n    }\n    case \"IConcat\": {\n      return makeChunk({ _tag: \"IConcat\", left: reverse(self.backing.right), right: reverse(self.backing.left) })\n    }\n    case \"ISlice\":\n      return unsafeFromArray(RA.reverse(toReadonlyArray(self)))\n  }\n}\n\n/**\n * Reverses the order of elements in a `Chunk`.\n * Importantly, if the input chunk is a `NonEmptyChunk`, the reversed chunk will also be a `NonEmptyChunk`.\n *\n * **Example**\n *\n * ```ts\n * import { Chunk } from \"effect\"\n *\n * const chunk = Chunk.make(1, 2, 3)\n * const result = Chunk.reverse(chunk)\n *\n * console.log(result)\n * // { _id: 'Chunk', values: [ 3, 2, 1 ] }\n * ```\n *\n * @since 2.0.0\n * @category elements\n */\nexport const reverse: <S extends Chunk<any>>(self: S) => Chunk.With<S, Chunk.Infer<S>> = reverseChunk as any\n\n/**\n * This function provides a safe way to read a value at a particular index from a `Chunk`.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const get: {\n  /**\n   * This function provides a safe way to read a value at a particular index from a `Chunk`.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  (index: number): <A>(self: Chunk<A>) => Option<A>\n  /**\n   * This function provides a safe way to read a value at a particular index from a `Chunk`.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, index: number): Option<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, index: number): Option<A> =>\n    index < 0 || index >= self.length ? O.none() : O.some(unsafeGet(self, index))\n)\n\n/**\n * Wraps an array into a chunk without copying, unsafe on mutable arrays\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeFromArray = <A>(self: ReadonlyArray<A>): Chunk<A> =>\n  self.length === 0 ? empty() : self.length === 1 ? of(self[0]) : makeChunk({ _tag: \"IArray\", array: self })\n\n/**\n * Wraps an array into a chunk without copying, unsafe on mutable arrays\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeFromNonEmptyArray = <A>(self: NonEmptyReadonlyArray<A>): NonEmptyChunk<A> =>\n  unsafeFromArray(self) as any\n\n/**\n * Gets an element unsafely, will throw on out of bounds\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  /**\n   * Gets an element unsafely, will throw on out of bounds\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  (index: number): <A>(self: Chunk<A>) => A\n  /**\n   * Gets an element unsafely, will throw on out of bounds\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  <A>(self: Chunk<A>, index: number): A\n} = dual(2, <A>(self: Chunk<A>, index: number): A => {\n  switch (self.backing._tag) {\n    case \"IEmpty\": {\n      throw new Error(`Index out of bounds`)\n    }\n    case \"ISingleton\": {\n      if (index !== 0) {\n        throw new Error(`Index out of bounds`)\n      }\n      return self.backing.a\n    }\n    case \"IArray\": {\n      if (index >= self.length || index < 0) {\n        throw new Error(`Index out of bounds`)\n      }\n      return self.backing.array[index]!\n    }\n    case \"IConcat\": {\n      return index < self.left.length\n        ? unsafeGet(self.left, index)\n        : unsafeGet(self.right, index - self.left.length)\n    }\n    case \"ISlice\": {\n      return unsafeGet(self.backing.chunk, index + self.backing.offset)\n    }\n  }\n})\n\n/**\n * Appends the specified element to the end of the `Chunk`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  /**\n   * Appends the specified element to the end of the `Chunk`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A2>(a: A2): <A>(self: Chunk<A>) => NonEmptyChunk<A2 | A>\n  /**\n   * Appends the specified element to the end of the `Chunk`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, A2>(self: Chunk<A>, a: A2): NonEmptyChunk<A | A2>\n} = dual(2, <A, A2>(self: Chunk<A>, a: A2): NonEmptyChunk<A | A2> => appendAll(self, of(a)))\n\n/**\n * Prepend an element to the front of a `Chunk`, creating a new `NonEmptyChunk`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  /**\n   * Prepend an element to the front of a `Chunk`, creating a new `NonEmptyChunk`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(elem: B): <A>(self: Chunk<A>) => NonEmptyChunk<B | A>\n  /**\n   * Prepend an element to the front of a `Chunk`, creating a new `NonEmptyChunk`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, elem: B): NonEmptyChunk<A | B>\n} = dual(2, <A, B>(self: Chunk<A>, elem: B): NonEmptyChunk<A | B> => appendAll(of(elem), self))\n\n/**\n * Takes the first up to `n` elements from the chunk\n *\n * @since 2.0.0\n */\nexport const take: {\n  /**\n   * Takes the first up to `n` elements from the chunk\n   *\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  /**\n   * Takes the first up to `n` elements from the chunk\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => {\n  if (n <= 0) {\n    return _empty\n  } else if (n >= self.length) {\n    return self\n  } else {\n    switch (self.backing._tag) {\n      case \"ISlice\": {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self.backing.chunk,\n          length: n,\n          offset: self.backing.offset\n        })\n      }\n      case \"IConcat\": {\n        if (n > self.left.length) {\n          return makeChunk({\n            _tag: \"IConcat\",\n            left: self.left,\n            right: take(self.right, n - self.left.length)\n          })\n        }\n\n        return take(self.left, n)\n      }\n      default: {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self,\n          offset: 0,\n          length: n\n        })\n      }\n    }\n  }\n})\n\n/**\n * Drops the first up to `n` elements from the chunk\n *\n * @since 2.0.0\n */\nexport const drop: {\n  /**\n   * Drops the first up to `n` elements from the chunk\n   *\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  /**\n   * Drops the first up to `n` elements from the chunk\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => {\n  if (n <= 0) {\n    return self\n  } else if (n >= self.length) {\n    return _empty\n  } else {\n    switch (self.backing._tag) {\n      case \"ISlice\": {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self.backing.chunk,\n          offset: self.backing.offset + n,\n          length: self.backing.length - n\n        })\n      }\n      case \"IConcat\": {\n        if (n > self.left.length) {\n          return drop(self.right, n - self.left.length)\n        }\n        return makeChunk({\n          _tag: \"IConcat\",\n          left: drop(self.left, n),\n          right: self.right\n        })\n      }\n      default: {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self,\n          offset: n,\n          length: self.length - n\n        })\n      }\n    }\n  }\n})\n\n/**\n * Drops the last `n` elements.\n *\n * @since 2.0.0\n */\nexport const dropRight: {\n  /**\n   * Drops the last `n` elements.\n   *\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  /**\n   * Drops the last `n` elements.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => take(self, Math.max(0, self.length - n)))\n\n/**\n * Drops all elements so long as the predicate returns true.\n *\n * @since 2.0.0\n */\nexport const dropWhile: {\n  /**\n   * Drops all elements so long as the predicate returns true.\n   *\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Chunk<A>\n  /**\n   * Drops all elements so long as the predicate returns true.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A> => {\n  const arr = toReadonlyArray(self)\n  const len = arr.length\n  let i = 0\n  while (i < len && predicate(arr[i]!)) {\n    i++\n  }\n  return drop(self, i)\n})\n\n/**\n * Prepends the specified prefix chunk to the beginning of the specified chunk.\n * If either chunk is non-empty, the result is also a non-empty chunk.\n *\n * **Example**\n *\n * ```ts\n * import { Chunk } from \"effect\"\n *\n * const result = Chunk.make(1, 2).pipe(Chunk.prependAll(Chunk.make(\"a\", \"b\")), Chunk.toArray)\n *\n * console.log(result)\n * // [ \"a\", \"b\", 1, 2 ]\n * ```\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll: {\n  /**\n   * Prepends the specified prefix chunk to the beginning of the specified chunk.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Chunk } from \"effect\"\n   *\n   * const result = Chunk.make(1, 2).pipe(Chunk.prependAll(Chunk.make(\"a\", \"b\")), Chunk.toArray)\n   *\n   * console.log(result)\n   * // [ \"a\", \"b\", 1, 2 ]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <S extends Chunk<any>, T extends Chunk<any>>(that: T): (self: S) => Chunk.OrNonEmpty<S, T, Chunk.Infer<S> | Chunk.Infer<T>>\n  /**\n   * Prepends the specified prefix chunk to the beginning of the specified chunk.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Chunk } from \"effect\"\n   *\n   * const result = Chunk.make(1, 2).pipe(Chunk.prependAll(Chunk.make(\"a\", \"b\")), Chunk.toArray)\n   *\n   * console.log(result)\n   * // [ \"a\", \"b\", 1, 2 ]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, that: NonEmptyChunk<B>): NonEmptyChunk<A | B>\n  /**\n   * Prepends the specified prefix chunk to the beginning of the specified chunk.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Chunk } from \"effect\"\n   *\n   * const result = Chunk.make(1, 2).pipe(Chunk.prependAll(Chunk.make(\"a\", \"b\")), Chunk.toArray)\n   *\n   * console.log(result)\n   * // [ \"a\", \"b\", 1, 2 ]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyChunk<A>, that: Chunk<B>): NonEmptyChunk<A | B>\n  /**\n   * Prepends the specified prefix chunk to the beginning of the specified chunk.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Chunk } from \"effect\"\n   *\n   * const result = Chunk.make(1, 2).pipe(Chunk.prependAll(Chunk.make(\"a\", \"b\")), Chunk.toArray)\n   *\n   * console.log(result)\n   * // [ \"a\", \"b\", 1, 2 ]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B>\n} = dual(2, <A, B>(self: NonEmptyChunk<A>, that: Chunk<B>): Chunk<A | B> => appendAll(that, self))\n\n/**\n * Concatenates two chunks, combining their elements.\n * If either chunk is non-empty, the result is also a non-empty chunk.\n *\n * **Example**\n *\n * ```ts\n * import { Chunk } from \"effect\"\n *\n * const result = Chunk.make(1, 2).pipe(Chunk.appendAll(Chunk.make(\"a\", \"b\")), Chunk.toArray)\n *\n * console.log(result)\n * // [ 1, 2, \"a\", \"b\" ]\n * ```\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll: {\n  /**\n   * Concatenates two chunks, combining their elements.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Chunk } from \"effect\"\n   *\n   * const result = Chunk.make(1, 2).pipe(Chunk.appendAll(Chunk.make(\"a\", \"b\")), Chunk.toArray)\n   *\n   * console.log(result)\n   * // [ 1, 2, \"a\", \"b\" ]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <S extends Chunk<any>, T extends Chunk<any>>(that: T): (self: S) => Chunk.OrNonEmpty<S, T, Chunk.Infer<S> | Chunk.Infer<T>>\n  /**\n   * Concatenates two chunks, combining their elements.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Chunk } from \"effect\"\n   *\n   * const result = Chunk.make(1, 2).pipe(Chunk.appendAll(Chunk.make(\"a\", \"b\")), Chunk.toArray)\n   *\n   * console.log(result)\n   * // [ 1, 2, \"a\", \"b\" ]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, that: NonEmptyChunk<B>): NonEmptyChunk<A | B>\n  /**\n   * Concatenates two chunks, combining their elements.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Chunk } from \"effect\"\n   *\n   * const result = Chunk.make(1, 2).pipe(Chunk.appendAll(Chunk.make(\"a\", \"b\")), Chunk.toArray)\n   *\n   * console.log(result)\n   * // [ 1, 2, \"a\", \"b\" ]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyChunk<A>, that: Chunk<B>): NonEmptyChunk<A | B>\n  /**\n   * Concatenates two chunks, combining their elements.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Chunk } from \"effect\"\n   *\n   * const result = Chunk.make(1, 2).pipe(Chunk.appendAll(Chunk.make(\"a\", \"b\")), Chunk.toArray)\n   *\n   * console.log(result)\n   * // [ 1, 2, \"a\", \"b\" ]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B>\n} = dual(2, <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B> => {\n  if (self.backing._tag === \"IEmpty\") {\n    return that\n  }\n  if (that.backing._tag === \"IEmpty\") {\n    return self\n  }\n  const diff = that.depth - self.depth\n  if (Math.abs(diff) <= 1) {\n    return makeChunk</**\n     * Concatenates two chunks, combining their elements.\n     * If either chunk is non-empty, the result is also a non-empty chunk.\n     *\n     * **Example**\n     *\n     * ```ts\n     * import { Chunk } from \"effect\"\n     *\n     * const result = Chunk.make(1, 2).pipe(Chunk.appendAll(Chunk.make(\"a\", \"b\")), Chunk.toArray)\n     *\n     * console.log(result)\n     * // [ 1, 2, \"a\", \"b\" ]\n     * ```\n     *\n     * @category concatenating\n     * @since 2.0.0\n     */\n    A | B>({ _tag: \"IConcat\", left: self, right: that });\n  } else if (diff < -1) {\n    if (self.left.depth >= self.right.depth) {\n      const nr = appendAll(self.right, that)\n      return makeChunk({ _tag: \"IConcat\", left: self.left, right: nr })\n    } else {\n      const nrr = appendAll(self.right.right, that)\n      if (nrr.depth === self.depth - 3) {\n        const nr = makeChunk({ _tag: \"IConcat\", left: self.right.left, right: nrr })\n        return makeChunk({ _tag: \"IConcat\", left: self.left, right: nr })\n      } else {\n        const nl = makeChunk({ _tag: \"IConcat\", left: self.left, right: self.right.left })\n        return makeChunk({ _tag: \"IConcat\", left: nl, right: nrr })\n      }\n    }\n  } else {\n    if (that.right.depth >= that.left.depth) {\n      const nl = appendAll(self, that.left)\n      return makeChunk({ _tag: \"IConcat\", left: nl, right: that.right })\n    } else {\n      const nll = appendAll(self, that.left.left)\n      if (nll.depth === that.depth - 3) {\n        const nl = makeChunk({ _tag: \"IConcat\", left: nll, right: that.left.right })\n        return makeChunk({ _tag: \"IConcat\", left: nl, right: that.right })\n      } else {\n        const nr = makeChunk({ _tag: \"IConcat\", left: that.left.right, right: that.right })\n        return makeChunk({ _tag: \"IConcat\", left: nll, right: nr })\n      }\n    }\n  }\n})\n\n/**\n * Returns a filtered and mapped subset of the elements.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterMap: {\n  /**\n   * Returns a filtered and mapped subset of the elements.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B>(f: (a: A, i: number) => Option<B>): (self: Chunk<A>) => Chunk<B>\n  /**\n   * Returns a filtered and mapped subset of the elements.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => Option<B>): Chunk<B>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => Option<B>): Chunk<B> => unsafeFromArray(RA.filterMap(self, f))\n)\n\n/**\n * Returns a filtered and mapped subset of the elements.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  /**\n   * Returns a filtered and mapped subset of the elements.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Chunk<B>\n  /**\n   * Returns a filtered and mapped subset of the elements.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Chunk<A>\n  /**\n   * Returns a filtered and mapped subset of the elements.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Chunk<B>\n  /**\n   * Returns a filtered and mapped subset of the elements.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A> => unsafeFromArray(RA.filter(self, predicate))\n)\n\n/**\n * Transforms all elements of the chunk for as long as the specified function returns some value\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterMapWhile: {\n  /**\n   * Transforms all elements of the chunk for as long as the specified function returns some value\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B>(f: (a: A) => Option<B>): (self: Chunk<A>) => Chunk<B>\n  /**\n   * Transforms all elements of the chunk for as long as the specified function returns some value\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B>(self: Chunk<A>, f: (a: A) => Option<B>): Chunk<B>\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A) => Option<B>) => unsafeFromArray(RA.filterMapWhile(self, f)))\n\n/**\n * Filter out optional values\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const compact = <A>(self: Chunk<Option<A>>): Chunk<A> => filterMap(self, identity)\n\n/**\n * Applies a function to each element in a chunk and returns a new chunk containing the concatenated mapped elements.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * Applies a function to each element in a chunk and returns a new chunk containing the concatenated mapped elements.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <S extends Chunk<any>, T extends Chunk<any>>(f: (a: Chunk.Infer<S>, i: number) => T): (self: S) => Chunk.AndNonEmpty<S, T, Chunk.Infer<T>>\n  /**\n   * Applies a function to each element in a chunk and returns a new chunk containing the concatenated mapped elements.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, B>(self: NonEmptyChunk<A>, f: (a: A, i: number) => NonEmptyChunk<B>): NonEmptyChunk<B>\n  /**\n   * Applies a function to each element in a chunk and returns a new chunk containing the concatenated mapped elements.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => Chunk<B>): Chunk<B>\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A, i: number) => Chunk<B>) => {\n  if (self.backing._tag === \"ISingleton\") {\n    return f(self.backing.a, 0)\n  }\n  let out: Chunk<B> = _empty\n  let i = 0\n  for (const k of self) {\n    out = appendAll(out, f(k, i++))\n  }\n  return out\n})\n\n/**\n * Iterates over each element of a `Chunk` and applies a function to it.\n *\n * **Details**\n *\n * This function processes every element of the given `Chunk`, calling the\n * provided function `f` on each element. It does not return a new value;\n * instead, it is primarily used for side effects, such as logging or\n * accumulating data in an external variable.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const forEach: {\n  /**\n   * Iterates over each element of a `Chunk` and applies a function to it.\n   *\n   * **Details**\n   *\n   * This function processes every element of the given `Chunk`, calling the\n   * provided function `f` on each element. It does not return a new value;\n   * instead, it is primarily used for side effects, such as logging or\n   * accumulating data in an external variable.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B>(f: (a: A, index: number) => B): (self: Chunk<A>) => void\n  /**\n   * Iterates over each element of a `Chunk` and applies a function to it.\n   *\n   * **Details**\n   *\n   * This function processes every element of the given `Chunk`, calling the\n   * provided function `f` on each element. It does not return a new value;\n   * instead, it is primarily used for side effects, such as logging or\n   * accumulating data in an external variable.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B>(self: Chunk<A>, f: (a: A, index: number) => B): void\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A) => B): void => toReadonlyArray(self).forEach(f))\n\n/**\n * Flattens a chunk of chunks into a single chunk by concatenating all chunks.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: <S extends Chunk<Chunk<any>>>(self: S) => Chunk.Flatten<S> = flatMap(identity) as any\n\n/**\n * Groups elements in chunks of up to `n` elements.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const chunksOf: {\n  /**\n   * Groups elements in chunks of up to `n` elements.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (n: number): <A>(self: Chunk<A>) => Chunk<Chunk<A>>\n  /**\n   * Groups elements in chunks of up to `n` elements.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: Chunk<A>, n: number): Chunk<Chunk<A>>\n} = dual(2, <A>(self: Chunk<A>, n: number) => {\n  const gr: Array<Chunk<A>> = []\n  let current: Array<A> = []\n  toReadonlyArray(self).forEach((a) => {\n    current.push(a)\n    if (current.length >= n) {\n      gr.push(unsafeFromArray(current))\n      current = []\n    }\n  })\n  if (current.length > 0) {\n    gr.push(unsafeFromArray(current))\n  }\n  return unsafeFromArray(gr)\n})\n\n/**\n * Creates a Chunk of unique values that are included in all given Chunks.\n *\n * The order and references of result values are determined by the Chunk.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const intersection: {\n  /**\n   * Creates a Chunk of unique values that are included in all given Chunks.\n   *\n   * The order and references of result values are determined by the Chunk.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(that: Chunk<A>): <B>(self: Chunk<B>) => Chunk<A & B>\n  /**\n   * Creates a Chunk of unique values that are included in all given Chunks.\n   *\n   * The order and references of result values are determined by the Chunk.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A & B>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A & B> =>\n    unsafeFromArray(RA.intersection(toReadonlyArray(self), toReadonlyArray(that)))\n)\n\n/**\n * Determines if the chunk is empty.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isEmpty = <A>(self: Chunk<A>): boolean => self.length === 0\n\n/**\n * Determines if the chunk is not empty.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isNonEmpty = <A>(self: Chunk<A>): self is NonEmptyChunk<A> => self.length > 0\n\n/**\n * Returns the first element of this chunk if it exists.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const head: <A>(self: Chunk<A>) => Option<A> = get(0)\n\n/**\n * Returns the first element of this chunk.\n *\n * It will throw an error if the chunk is empty.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeHead = <A>(self: Chunk<A>): A => unsafeGet(self, 0)\n\n/**\n * Returns the first element of this non empty chunk.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const headNonEmpty: <A>(self: NonEmptyChunk<A>) => A = unsafeHead\n\n/**\n * Returns the last element of this chunk if it exists.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const last = <A>(self: Chunk<A>): Option<A> => get(self, self.length - 1)\n\n/**\n * Returns the last element of this chunk.\n *\n * It will throw an error if the chunk is empty.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeLast = <A>(self: Chunk<A>): A => unsafeGet(self, self.length - 1)\n\n/**\n * Returns the last element of this non empty chunk.\n *\n * @since 3.4.0\n * @category elements\n */\nexport const lastNonEmpty: <A>(self: NonEmptyChunk<A>) => A = unsafeLast\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Chunk {\n  /**\n   * @since 2.0.0\n   */\n  export type Infer<S extends Chunk<any>> = S extends Chunk<infer A> ? A : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type With<S extends Chunk<any>, A> = S extends NonEmptyChunk<any> ? NonEmptyChunk<A> : Chunk<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type OrNonEmpty<S extends Chunk<any>, T extends Chunk<any>, A> = S extends NonEmptyChunk<any> ?\n    NonEmptyChunk<A>\n    : T extends NonEmptyChunk<any> ? NonEmptyChunk<A>\n    : Chunk<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type AndNonEmpty<S extends Chunk<any>, T extends Chunk<any>, A> = S extends NonEmptyChunk<any> ?\n    T extends NonEmptyChunk<any> ? NonEmptyChunk<A>\n    : Chunk<A> :\n    Chunk<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type Flatten<T extends Chunk<Chunk<any>>> = T extends NonEmptyChunk<NonEmptyChunk<infer A>> ? NonEmptyChunk<A>\n    : T extends Chunk<Chunk<infer A>> ? Chunk<A>\n    : never\n}\n\n/**\n * Transforms the elements of a chunk using the specified mapping function.\n * If the input chunk is non-empty, the resulting chunk will also be non-empty.\n *\n * **Example**\n *\n * ```ts\n * import { Chunk } from \"effect\"\n *\n * const result = Chunk.map(Chunk.make(1, 2), (n) => n + 1)\n *\n * console.log(result)\n * // { _id: 'Chunk', values: [ 2, 3 ] }\n * ```\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Transforms the elements of a chunk using the specified mapping function.\n   * If the input chunk is non-empty, the resulting chunk will also be non-empty.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Chunk } from \"effect\"\n   *\n   * const result = Chunk.map(Chunk.make(1, 2), (n) => n + 1)\n   *\n   * console.log(result)\n   * // { _id: 'Chunk', values: [ 2, 3 ] }\n   * ```\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <S extends Chunk<any>, B>(f: (a: Chunk.Infer<S>, i: number) => B): (self: S) => Chunk.With<S, B>\n  /**\n   * Transforms the elements of a chunk using the specified mapping function.\n   * If the input chunk is non-empty, the resulting chunk will also be non-empty.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Chunk } from \"effect\"\n   *\n   * const result = Chunk.map(Chunk.make(1, 2), (n) => n + 1)\n   *\n   * console.log(result)\n   * // { _id: 'Chunk', values: [ 2, 3 ] }\n   * ```\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B>(self: NonEmptyChunk<A>, f: (a: A, i: number) => B): NonEmptyChunk<B>\n  /**\n   * Transforms the elements of a chunk using the specified mapping function.\n   * If the input chunk is non-empty, the resulting chunk will also be non-empty.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Chunk } from \"effect\"\n   *\n   * const result = Chunk.map(Chunk.make(1, 2), (n) => n + 1)\n   *\n   * console.log(result)\n   * // { _id: 'Chunk', values: [ 2, 3 ] }\n   * ```\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => B): Chunk<B>\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A, i: number) => B): Chunk<B> =>\n  self.backing._tag === \"ISingleton\" ?\n    of(f(self.backing.a, 0)) :\n    unsafeFromArray(pipe(toReadonlyArray(self), RA.map((a, i) => f(a, i)))))\n\n/**\n * Statefully maps over the chunk, producing new elements of type `B`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const mapAccum: {\n  /**\n   * Statefully maps over the chunk, producing new elements of type `B`.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <S, A, B>(s: S, f: (s: S, a: A) => readonly [S, B]): (self: Chunk<A>) => [S, Chunk<B>]\n  /**\n   * Statefully maps over the chunk, producing new elements of type `B`.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <S, A, B>(self: Chunk<A>, s: S, f: (s: S, a: A) => readonly [S, B]): [S, Chunk<B>]\n} = dual(3, <S, A, B>(self: Chunk<A>, s: S, f: (s: S, a: A) => readonly [S, B]): [S, Chunk<B>] => {\n  const [s1, as] = RA.mapAccum(self, s, f)\n  return [s1, unsafeFromArray(as)]\n})\n\n/**\n * Separate elements based on a predicate that also exposes the index of the element.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partition: {\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Chunk<A>) => [excluded: Chunk<Exclude<A, B>>, satisfying: Chunk<B>]\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Chunk<A>) => [excluded: Chunk<A>, satisfying: Chunk<A>]\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Chunk<A>, refinement: (a: A, i: number) => a is B): [excluded: Chunk<Exclude<A, B>>, satisfying: Chunk<B>]\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: (a: A, i: number) => boolean): [excluded: Chunk<A>, satisfying: Chunk<A>]\n} = dual(\n  2,\n  <A>(self: Chunk<A>, predicate: (a: A, i: number) => boolean): [excluded: Chunk<A>, satisfying: Chunk<A>] =>\n    pipe(\n      RA.partition(toReadonlyArray(self), predicate),\n      ([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)]\n    )\n)\n\n/**\n * Partitions the elements of this chunk into two chunks using f.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  /**\n   * Partitions the elements of this chunk into two chunks using f.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(f: (a: A) => Either<C, B>): (self: Chunk<A>) => [left: Chunk<B>, right: Chunk<C>]\n  /**\n   * Partitions the elements of this chunk into two chunks using f.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(self: Chunk<A>, f: (a: A) => Either<C, B>): [left: Chunk<B>, right: Chunk<C>]\n} = dual(2, <A, B, C>(self: Chunk<A>, f: (a: A) => Either<C, B>): [left: Chunk<B>, right: Chunk<C>] =>\n  pipe(\n    RA.partitionMap(toReadonlyArray(self), f),\n    ([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)]\n  ))\n\n/**\n * Partitions the elements of this chunk into two chunks.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const separate = <A, B>(self: Chunk<Either<B, A>>): [Chunk<A>, Chunk<B>] =>\n  pipe(\n    RA.separate(toReadonlyArray(self)),\n    ([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)]\n  )\n\n/**\n * Retireves the size of the chunk\n *\n * @since 2.0.0\n * @category elements\n */\nexport const size = <A>(self: Chunk<A>): number => self.length\n\n/**\n * Sort the elements of a Chunk in increasing order, creating a new Chunk.\n *\n * @since 2.0.0\n * @category sorting\n */\nexport const sort: {\n  /**\n   * Sort the elements of a Chunk in increasing order, creating a new Chunk.\n   *\n   * @since 2.0.0\n   * @category sorting\n   */\n  <B>(O: Order.Order<B>): <A extends B>(self: Chunk<A>) => Chunk<A>\n  /**\n   * Sort the elements of a Chunk in increasing order, creating a new Chunk.\n   *\n   * @since 2.0.0\n   * @category sorting\n   */\n  <A extends B, B>(self: Chunk<A>, O: Order.Order<B>): Chunk<A>\n} = dual(\n  2,\n  <A extends B, B>(self: Chunk<A>, O: Order.Order<B>): Chunk<A> => unsafeFromArray(RA.sort(toReadonlyArray(self), O))\n)\n\n/**\n * @since 2.0.0\n * @category sorting\n */\nexport const sortWith: {\n  /**\n   * @since 2.0.0\n   * @category sorting\n   */\n  <A, B>(f: (a: A) => B, order: Order.Order<B>): (self: Chunk<A>) => Chunk<A>\n  /**\n   * @since 2.0.0\n   * @category sorting\n   */\n  <A, B>(self: Chunk<A>, f: (a: A) => B, order: Order.Order<B>): Chunk<A>\n} = dual(\n  3,\n  <A, B>(self: Chunk<A>, f: (a: A) => B, order: Order.Order<B>): Chunk<A> => sort(self, Order.mapInput(order, f))\n)\n\n/**\n *  Returns two splits of this chunk at the specified index.\n *\n * @since 2.0.0\n * @category splitting\n */\nexport const splitAt: {\n  /**\n   *  Returns two splits of this chunk at the specified index.\n   *\n   * @since 2.0.0\n   * @category splitting\n   */\n  (n: number): <A>(self: Chunk<A>) => [beforeIndex: Chunk<A>, fromIndex: Chunk<A>]\n  /**\n   *  Returns two splits of this chunk at the specified index.\n   *\n   * @since 2.0.0\n   * @category splitting\n   */\n  <A>(self: Chunk<A>, n: number): [beforeIndex: Chunk<A>, fromIndex: Chunk<A>]\n} = dual(2, <A>(self: Chunk<A>, n: number): [Chunk<A>, Chunk<A>] => [take(self, n), drop(self, n)])\n\n/**\n * Splits a `NonEmptyChunk` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` must be `>= 1`.\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitNonEmptyAt: {\n  /**\n   * Splits a `NonEmptyChunk` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` must be `>= 1`.\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: NonEmptyChunk<A>) => [beforeIndex: NonEmptyChunk<A>, fromIndex: Chunk<A>]\n  /**\n   * Splits a `NonEmptyChunk` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` must be `>= 1`.\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyChunk<A>, n: number): [beforeIndex: NonEmptyChunk<A>, fromIndex: Chunk<A>]\n} = dual(2, <A>(self: NonEmptyChunk<A>, n: number): [Chunk<A>, Chunk<A>] => {\n  const _n = Math.max(1, Math.floor(n))\n  return _n >= self.length ?\n    [self, empty()] :\n    [take(self, _n), drop(self, _n)]\n})\n\n/**\n * Splits this chunk into `n` equally sized chunks.\n *\n * @since 2.0.0\n * @category splitting\n */\nexport const split: {\n  /**\n   * Splits this chunk into `n` equally sized chunks.\n   *\n   * @since 2.0.0\n   * @category splitting\n   */\n  (n: number): <A>(self: Chunk<A>) => Chunk<Chunk<A>>\n  /**\n   * Splits this chunk into `n` equally sized chunks.\n   *\n   * @since 2.0.0\n   * @category splitting\n   */\n  <A>(self: Chunk<A>, n: number): Chunk<Chunk<A>>\n} = dual(2, <A>(self: Chunk<A>, n: number) => chunksOf(self, Math.ceil(self.length / Math.floor(n))))\n\n/**\n * Splits this chunk on the first element that matches this predicate.\n * Returns a tuple containing two chunks: the first one is before the match, and the second one is from the match onward.\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitWhere: {\n  /**\n   * Splits this chunk on the first element that matches this predicate.\n   * Returns a tuple containing two chunks: the first one is before the match, and the second one is from the match onward.\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => [beforeMatch: Chunk<A>, fromMatch: Chunk<A>]\n  /**\n   * Splits this chunk on the first element that matches this predicate.\n   * Returns a tuple containing two chunks: the first one is before the match, and the second one is from the match onward.\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): [beforeMatch: Chunk<A>, fromMatch: Chunk<A>]\n} = dual(2, <A>(self: Chunk<A>, predicate: Predicate<A>): [beforeMatch: Chunk<A>, fromMatch: Chunk<A>] => {\n  let i = 0\n  for (const a of toReadonlyArray(self)) {\n    if (predicate(a)) {\n      break\n    } else {\n      i++\n    }\n  }\n  return splitAt(self, i)\n})\n\n/**\n * Returns every elements after the first.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const tail = <A>(self: Chunk<A>): Option<Chunk<A>> => self.length > 0 ? O.some(drop(self, 1)) : O.none()\n\n/**\n * Returns every elements after the first.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const tailNonEmpty = <A>(self: NonEmptyChunk<A>): Chunk<A> => drop(self, 1)\n\n/**\n * Takes the last `n` elements.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const takeRight: {\n  /**\n   * Takes the last `n` elements.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  /**\n   * Takes the last `n` elements.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => drop(self, self.length - n))\n\n/**\n * Takes all elements so long as the predicate returns true.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const takeWhile: {\n  /**\n   * Takes all elements so long as the predicate returns true.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Chunk<B>\n  /**\n   * Takes all elements so long as the predicate returns true.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Chunk<A>\n  /**\n   * Takes all elements so long as the predicate returns true.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Chunk<B>\n  /**\n   * Takes all elements so long as the predicate returns true.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A> => {\n  const out: Array<A> = []\n  for (const a of toReadonlyArray(self)) {\n    if (predicate(a)) {\n      out.push(a)\n    } else {\n      break\n    }\n  }\n  return unsafeFromArray(out)\n})\n\n/**\n * Creates a Chunks of unique values, in order, from all given Chunks.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const union: {\n  /**\n   * Creates a Chunks of unique values, in order, from all given Chunks.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(that: Chunk<A>): <B>(self: Chunk<B>) => Chunk<A | B>\n  /**\n   * Creates a Chunks of unique values, in order, from all given Chunks.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, that: Chunk<B>) => unsafeFromArray(RA.union(toReadonlyArray(self), toReadonlyArray(that)))\n)\n\n/**\n * Remove duplicates from an array, keeping the first occurrence of an element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const dedupe = <A>(self: Chunk<A>): Chunk<A> => unsafeFromArray(RA.dedupe(toReadonlyArray(self)))\n\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const dedupeAdjacent = <A>(self: Chunk<A>): Chunk<A> => unsafeFromArray(RA.dedupeAdjacent(self))\n\n/**\n * Takes a `Chunk` of pairs and return two corresponding `Chunk`s.\n *\n * Note: The function is reverse of `zip`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const unzip = <A, B>(self: Chunk<readonly [A, B]>): [Chunk<A>, Chunk<B>] => {\n  const [left, right] = RA.unzip(self)\n  return [unsafeFromArray(left), unsafeFromArray(right)]\n}\n\n/**\n * Zips this chunk pointwise with the specified chunk using the specified combiner.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  /**\n   * Zips this chunk pointwise with the specified chunk using the specified combiner.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, B, C>(that: Chunk<B>, f: (a: A, b: B) => C): (self: Chunk<A>) => Chunk<C>\n  /**\n   * Zips this chunk pointwise with the specified chunk using the specified combiner.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, B, C>(self: Chunk<A>, that: Chunk<B>, f: (a: A, b: B) => C): Chunk<C>\n} = dual(\n  3,\n  <A, B, C>(self: Chunk<A>, that: Chunk<B>, f: (a: A, b: B) => C): Chunk<C> =>\n    unsafeFromArray(RA.zipWith(self, that, f))\n)\n\n/**\n * Zips this chunk pointwise with the specified chunk.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  /**\n   * Zips this chunk pointwise with the specified chunk.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <B>(that: Chunk<B>): <A>(self: Chunk<A>) => Chunk<[A, B]>\n  /**\n   * Zips this chunk pointwise with the specified chunk.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<[A, B]> => zipWith(self, that, (a, b) => [a, b])\n)\n\n/**\n * Delete the element at the specified index, creating a new `Chunk`.\n *\n * @since 2.0.0\n */\nexport const remove: {\n  /**\n   * Delete the element at the specified index, creating a new `Chunk`.\n   *\n   * @since 2.0.0\n   */\n  (i: number): <A>(self: Chunk<A>) => Chunk<A>\n  /**\n   * Delete the element at the specified index, creating a new `Chunk`.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, i: number): Chunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, i: number): Chunk<A> => {\n    if (i < 0 || i >= self.length) return self\n    return unsafeFromArray(RA.remove(toReadonlyArray(self), i))\n  }\n)\n\n/**\n * @since 3.16.0\n */\nexport const removeOption: {\n  /**\n   * @since 3.16.0\n   */\n  (i: number): <A>(self: Chunk<A>) => Option<Chunk<A>>\n  /**\n   * @since 3.16.0\n   */\n  <A>(self: Chunk<A>, i: number): Option<Chunk<A>>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, i: number): Option<Chunk<A>> => {\n    if (i < 0 || i >= self.length) return O.none()\n    return O.some(unsafeFromArray(RA.remove(toReadonlyArray(self), i)))\n  }\n)\n\n/**\n * @since 2.0.0\n */\nexport const modifyOption: {\n  /**\n   * @since 2.0.0\n   */\n  <A, B>(i: number, f: (a: A) => B): (self: Chunk<A>) => Option<Chunk<A | B>>\n  /**\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Option<Chunk<A | B>>\n} = dual(\n  3,\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Option<Chunk<A | B>> => {\n    if (i < 0 || i >= self.length) return O.none()\n    return O.some(unsafeFromArray(RA.modify(toReadonlyArray(self), i, f)))\n  }\n)\n\n/**\n * Apply a function to the element at the specified index, creating a new `Chunk`,\n * or returning the input if the index is out of bounds.\n *\n * @since 2.0.0\n */\nexport const modify: {\n  /**\n   * Apply a function to the element at the specified index, creating a new `Chunk`,\n   * or returning the input if the index is out of bounds.\n   *\n   * @since 2.0.0\n   */\n  <A, B>(i: number, f: (a: A) => B): (self: Chunk<A>) => Chunk<A | B>\n  /**\n   * Apply a function to the element at the specified index, creating a new `Chunk`,\n   * or returning the input if the index is out of bounds.\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Chunk<A | B>\n} = dual(\n  3,\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Chunk<A | B> => O.getOrElse(modifyOption(self, i, f), () => self)\n)\n\n/**\n * Change the element at the specified index, creating a new `Chunk`,\n * or returning the input if the index is out of bounds.\n *\n * @since 2.0.0\n */\nexport const replace: {\n  /**\n   * Change the element at the specified index, creating a new `Chunk`,\n   * or returning the input if the index is out of bounds.\n   *\n   * @since 2.0.0\n   */\n  <B>(i: number, b: B): <A>(self: Chunk<A>) => Chunk<B | A>\n  /**\n   * Change the element at the specified index, creating a new `Chunk`,\n   * or returning the input if the index is out of bounds.\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, i: number, b: B): Chunk<B | A>\n} = dual(3, <A, B>(self: Chunk<A>, i: number, b: B): Chunk<B | A> => modify(self, i, () => b))\n\n/**\n * @since 2.0.0\n */\nexport const replaceOption: {\n  /**\n   * @since 2.0.0\n   */\n  <B>(i: number, b: B): <A>(self: Chunk<A>) => Option<Chunk<B | A>>\n  /**\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, i: number, b: B): Option<Chunk<B | A>>\n} = dual(3, <A, B>(self: Chunk<A>, i: number, b: B): Option<Chunk<B | A>> => modifyOption(self, i, () => b))\n\n/**\n * Return a Chunk of length n with element i initialized with f(i).\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const makeBy: {\n  /**\n   * Return a Chunk of length n with element i initialized with f(i).\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A>(f: (i: number) => A): (n: number) => NonEmptyChunk<A>\n  /**\n   * Return a Chunk of length n with element i initialized with f(i).\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A>(n: number, f: (i: number) => A): NonEmptyChunk<A>\n} = dual(2, (n, f) => fromIterable(RA.makeBy(n, f)))\n\n/**\n * Create a non empty `Chunk` containing a range of integers, including both endpoints.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const range = (start: number, end: number): NonEmptyChunk<number> =>\n  start <= end ? makeBy(end - start + 1, (i) => start + i) : of(start)\n\n// -------------------------------------------------------------------------------------\n// re-exports from ReadonlyArray\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns a function that checks if a `Chunk` contains a given value using the default `Equivalence`.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains: {\n  // -------------------------------------------------------------------------------------\n  // re-exports from ReadonlyArray\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Returns a function that checks if a `Chunk` contains a given value using the default `Equivalence`.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(a: A): (self: Chunk<A>) => boolean\n  // -------------------------------------------------------------------------------------\n  // re-exports from ReadonlyArray\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Returns a function that checks if a `Chunk` contains a given value using the default `Equivalence`.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, a: A): boolean\n} = RA.contains\n\n/**\n * Returns a function that checks if a `Chunk` contains a given value using a provided `isEquivalent` function.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith: <A>(\n  isEquivalent: (self: A, that: A) => boolean\n) => {\n  (a: A): (self: Chunk<A>) => boolean\n  (self: Chunk<A>, a: A): boolean\n} = RA.containsWith\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Option<A>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<A>\n} = RA.findFirst\n\n/**\n * Return the first index for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirstIndex: {\n  /**\n   * Return the first index for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<A>): (self: Chunk<A>) => Option<number>\n  /**\n   * Return the first index for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<number>\n} = RA.findFirstIndex\n\n/**\n * Find the last element for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLast: {\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Option<B>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Option<A>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Option<B>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<A>\n} = RA.findLast\n\n/**\n * Return the last index for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLastIndex: {\n  /**\n   * Return the last index for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<A>): (self: Chunk<A>) => Option<number>\n  /**\n   * Return the last index for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<number>\n} = RA.findLastIndex\n\n/**\n * Check if a predicate holds true for every `Chunk` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const every: {\n  /**\n   * Check if a predicate holds true for every `Chunk` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => self is Chunk<B>\n  /**\n   * Check if a predicate holds true for every `Chunk` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<A>): (self: Chunk<A>) => boolean\n  /**\n   * Check if a predicate holds true for every `Chunk` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): self is Chunk<B>\n  /**\n   * Check if a predicate holds true for every `Chunk` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): self is Chunk<B> =>\n    RA.fromIterable(self).every(refinement)\n)\n\n/**\n * Check if a predicate holds true for some `Chunk` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const some: {\n  /**\n   * Check if a predicate holds true for some `Chunk` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => self is NonEmptyChunk<A>\n  /**\n   * Check if a predicate holds true for some `Chunk` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): self is NonEmptyChunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, predicate: Predicate<A>): self is NonEmptyChunk<A> => RA.fromIterable(self).some(predicate)\n)\n\n/**\n * Joins the elements together with \"sep\" in the middle.\n *\n * @category folding\n * @since 2.0.0\n */\nexport const join: {\n  /**\n   * Joins the elements together with \"sep\" in the middle.\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  (sep: string): (self: Chunk<string>) => string\n  /**\n   * Joins the elements together with \"sep\" in the middle.\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  (self: Chunk<string>, sep: string): string\n} = RA.join\n\n/**\n * @category folding\n * @since 2.0.0\n */\nexport const reduce: {\n  /**\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Chunk<A>) => B\n  /**\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = RA.reduce\n\n/**\n * @category folding\n * @since 2.0.0\n */\nexport const reduceRight: {\n  /**\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Chunk<A>) => B\n  /**\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = RA.reduceRight\n\n/**\n * Creates a `Chunk` of values not included in the other given `Chunk` using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Chunk`.\n *\n * @since 3.2.0\n */\nexport const differenceWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (that: Chunk<A>): (self: Chunk<A>) => Chunk<A>\n  (self: Chunk<A>, that: Chunk<A>): Chunk<A>\n} => {\n  return dual(\n    2,\n    (self: Chunk<A>, that: Chunk<A>): Chunk<A> => unsafeFromArray(RA.differenceWith(isEquivalent)(that, self))\n  )\n}\n\n/**\n * Creates a `Chunk` of values not included in the other given `Chunk`.\n * The order and references of result values are determined by the first `Chunk`.\n *\n * @since 3.2.0\n */\nexport const difference: {\n  /**\n   * Creates a `Chunk` of values not included in the other given `Chunk`.\n   * The order and references of result values are determined by the first `Chunk`.\n   *\n   * @since 3.2.0\n   */\n  <A>(that: Chunk<A>): (self: Chunk<A>) => Chunk<A>\n  /**\n   * Creates a `Chunk` of values not included in the other given `Chunk`.\n   * The order and references of result values are determined by the first `Chunk`.\n   *\n   * @since 3.2.0\n   */\n  <A>(self: Chunk<A>, that: Chunk<A>): Chunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, that: Chunk<A>): Chunk<A> => unsafeFromArray(RA.difference(that, self))\n)\n", "/**\n * @since 2.0.0\n */\nimport * as Equal from \"./Equal.js\"\nimport type * as equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport { NodeInspectSymbol } from \"./Inspectable.js\"\nimport * as Option from \"./Option.js\"\nimport * as order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty, isBigInt, isNumber, isString } from \"./Predicate.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/Duration\")\n\nconst bigint0 = BigInt(0)\nconst bigint24 = BigInt(24)\nconst bigint60 = BigInt(60)\nconst bigint1e3 = BigInt(1_000)\nconst bigint1e6 = BigInt(1_000_000)\nconst bigint1e9 = BigInt(1_000_000_000)\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Duration extends Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly value: DurationValue\n}\n/**\n * @since 2.0.0\n * @category models\n */\nexport type DurationValue =\n  | {\n    readonly _tag: \"Millis\"\n    readonly millis: number\n  }\n  | {\n    readonly _tag: \"Nanos\"\n    readonly nanos: bigint\n  }\n  | {\n    readonly _tag: \"Infinity\"\n  }\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type Unit =\n  | \"nano\"\n  | \"nanos\"\n  | \"micro\"\n  | \"micros\"\n  | \"milli\"\n  | \"millis\"\n  | \"second\"\n  | \"seconds\"\n  | \"minute\"\n  | \"minutes\"\n  | \"hour\"\n  | \"hours\"\n  | \"day\"\n  | \"days\"\n  | \"week\"\n  | \"weeks\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type DurationInput =\n  | Duration\n  | number // millis\n  | bigint // nanos\n  | readonly [seconds: number, nanos: number]\n  | `${number} ${Unit}`\n\nconst DURATION_REGEX = /^(-?\\d+(?:\\.\\d+)?)\\s+(nanos?|micros?|millis?|seconds?|minutes?|hours?|days?|weeks?)$/\n\n/**\n * @since 2.0.0\n */\nexport const decode = (input: DurationInput): Duration => {\n  if (isDuration(input)) {\n    return input\n  } else if (isNumber(input)) {\n    return millis(input)\n  } else if (isBigInt(input)) {\n    return nanos(input)\n  } else if (Array.isArray(input) && input.length === 2 && input.every(isNumber)) {\n    if (input[0] === -Infinity || input[1] === -Infinity || Number.isNaN(input[0]) || Number.isNaN(input[1])) {\n      return zero\n    }\n\n    if (input[0] === Infinity || input[1] === Infinity) {\n      return infinity\n    }\n\n    return nanos(BigInt(Math.round(input[0] * 1_000_000_000)) + BigInt(Math.round(input[1])))\n  } else if (isString(input)) {\n    const match = DURATION_REGEX.exec(input)\n    if (match) {\n      const [_, valueStr, unit] = match\n      const value = Number(valueStr)\n      switch (unit) {\n        case \"nano\":\n        case \"nanos\":\n          return nanos(BigInt(valueStr))\n        case \"micro\":\n        case \"micros\":\n          return micros(BigInt(valueStr))\n        case \"milli\":\n        case \"millis\":\n          return millis(value)\n        case \"second\":\n        case \"seconds\":\n          return seconds(value)\n        case \"minute\":\n        case \"minutes\":\n          return minutes(value)\n        case \"hour\":\n        case \"hours\":\n          return hours(value)\n        case \"day\":\n        case \"days\":\n          return days(value)\n        case \"week\":\n        case \"weeks\":\n          return weeks(value)\n      }\n    }\n  }\n  throw new Error(\"Invalid DurationInput\")\n}\n\n/**\n * @since 2.5.0\n */\nexport const decodeUnknown: (u: unknown) => Option.Option<Duration> = Option.liftThrowable(decode) as any\n\nconst zeroValue: DurationValue = { _tag: \"Millis\", millis: 0 }\nconst infinityValue: DurationValue = { _tag: \"Infinity\" }\n\nconst DurationProto: Omit<Duration, \"value\"> = {\n  [TypeId]: TypeId,\n  [Hash.symbol](this: Duration) {\n    return Hash.cached(this, Hash.structure(this.value))\n  },\n  [Equal.symbol](this: Duration, that: unknown): boolean {\n    return isDuration(that) && equals(this, that)\n  },\n  toString(this: Duration) {\n    return `Duration(${format(this)})`\n  },\n  toJSON(this: Duration) {\n    switch (this.value._tag) {\n      case \"Millis\":\n        return { _id: \"Duration\", _tag: \"Millis\", millis: this.value.millis }\n      case \"Nanos\":\n        return { _id: \"Duration\", _tag: \"Nanos\", hrtime: toHrTime(this) }\n      case \"Infinity\":\n        return { _id: \"Duration\", _tag: \"Infinity\" }\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n} as const\n\nconst make = (input: number | bigint): Duration => {\n  const duration = Object.create(DurationProto)\n  if (isNumber(input)) {\n    if (isNaN(input) || input <= 0) {\n      duration.value = zeroValue\n    } else if (!Number.isFinite(input)) {\n      duration.value = infinityValue\n    } else if (!Number.isInteger(input)) {\n      duration.value = { _tag: \"Nanos\", nanos: BigInt(Math.round(input * 1_000_000)) }\n    } else {\n      duration.value = { _tag: \"Millis\", millis: input }\n    }\n  } else if (input <= bigint0) {\n    duration.value = zeroValue\n  } else {\n    duration.value = { _tag: \"Nanos\", nanos: input }\n  }\n  return duration\n}\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isDuration = (u: unknown): u is Duration => hasProperty(u, TypeId)\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isFinite = (self: Duration): boolean => self.value._tag !== \"Infinity\"\n\n/**\n * @since 3.5.0\n * @category guards\n */\nexport const isZero = (self: Duration): boolean => {\n  switch (self.value._tag) {\n    case \"Millis\": {\n      return self.value.millis === 0\n    }\n    case \"Nanos\": {\n      return self.value.nanos === bigint0\n    }\n    case \"Infinity\": {\n      return false\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const zero: Duration = make(0)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const infinity: Duration = make(Infinity)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const nanos = (nanos: bigint): Duration => make(nanos)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const micros = (micros: bigint): Duration => make(micros * bigint1e3)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const millis = (millis: number): Duration => make(millis)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const seconds = (seconds: number): Duration => make(seconds * 1000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const minutes = (minutes: number): Duration => make(minutes * 60_000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const hours = (hours: number): Duration => make(hours * 3_600_000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const days = (days: number): Duration => make(days * 86_400_000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const weeks = (weeks: number): Duration => make(weeks * 604_800_000)\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const toMillis = (self: DurationInput): number =>\n  match(self, {\n    onMillis: (millis) => millis,\n    onNanos: (nanos) => Number(nanos) / 1_000_000\n  })\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const toSeconds = (self: DurationInput): number =>\n  match(self, {\n    onMillis: (millis) => millis / 1_000,\n    onNanos: (nanos) => Number(nanos) / 1_000_000_000\n  })\n\n/**\n * @since 3.8.0\n * @category getters\n */\nexport const toMinutes = (self: DurationInput): number =>\n  match(self, {\n    onMillis: (millis) => millis / 60_000,\n    onNanos: (nanos) => Number(nanos) / 60_000_000_000\n  })\n\n/**\n * @since 3.8.0\n * @category getters\n */\nexport const toHours = (self: DurationInput): number =>\n  match(self, {\n    onMillis: (millis) => millis / 3_600_000,\n    onNanos: (nanos) => Number(nanos) / 3_600_000_000_000\n  })\n\n/**\n * @since 3.8.0\n * @category getters\n */\nexport const toDays = (self: DurationInput): number =>\n  match(self, {\n    onMillis: (millis) => millis / 86_400_000,\n    onNanos: (nanos) => Number(nanos) / 86_400_000_000_000\n  })\n\n/**\n * @since 3.8.0\n * @category getters\n */\nexport const toWeeks = (self: DurationInput): number =>\n  match(self, {\n    onMillis: (millis) => millis / 604_800_000,\n    onNanos: (nanos) => Number(nanos) / 604_800_000_000_000\n  })\n\n/**\n * Get the duration in nanoseconds as a bigint.\n *\n * If the duration is infinite, returns `Option.none()`\n *\n * @since 2.0.0\n * @category getters\n */\nexport const toNanos = (self: DurationInput): Option.Option<bigint> => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Infinity\":\n      return Option.none()\n    case \"Nanos\":\n      return Option.some(_self.value.nanos)\n    case \"Millis\":\n      return Option.some(BigInt(Math.round(_self.value.millis * 1_000_000)))\n  }\n}\n\n/**\n * Get the duration in nanoseconds as a bigint.\n *\n * If the duration is infinite, it throws an error.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const unsafeToNanos = (self: DurationInput): bigint => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Infinity\":\n      throw new Error(\"Cannot convert infinite duration to nanos\")\n    case \"Nanos\":\n      return _self.value.nanos\n    case \"Millis\":\n      return BigInt(Math.round(_self.value.millis * 1_000_000))\n  }\n}\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const toHrTime = (self: DurationInput): [seconds: number, nanos: number] => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Infinity\":\n      return [Infinity, 0]\n    case \"Nanos\":\n      return [\n        Number(_self.value.nanos / bigint1e9),\n        Number(_self.value.nanos % bigint1e9)\n      ]\n    case \"Millis\":\n      return [\n        Math.floor(_self.value.millis / 1000),\n        Math.round((_self.value.millis % 1000) * 1_000_000)\n      ]\n  }\n}\n\n/**\n * @since 2.0.0\n * @category pattern matching\n */\nexport const match: {\n  /**\n   * @since 2.0.0\n   * @category pattern matching\n   */\n  <A, B>(\n    options: {\n      readonly onMillis: (millis: number) => A\n      readonly onNanos: (nanos: bigint) => B\n    }\n  ): (self: DurationInput) => A | B\n  /**\n   * @since 2.0.0\n   * @category pattern matching\n   */\n  <A, B>(\n    self: DurationInput,\n    options: {\n      readonly onMillis: (millis: number) => A\n      readonly onNanos: (nanos: bigint) => B\n    }\n  ): A | B\n} = dual(2, <A, B>(\n  self: DurationInput,\n  options: {\n    readonly onMillis: (millis: number) => A\n    readonly onNanos: (nanos: bigint) => B\n  }\n): A | B => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Nanos\":\n      return options.onNanos(_self.value.nanos)\n    case \"Infinity\":\n      return options.onMillis(Infinity)\n    case \"Millis\":\n      return options.onMillis(_self.value.millis)\n  }\n})\n\n/**\n * @since 2.0.0\n * @category pattern matching\n */\nexport const matchWith: {\n  /**\n   * @since 2.0.0\n   * @category pattern matching\n   */\n  <A, B>(\n    that: DurationInput,\n    options: {\n      readonly onMillis: (self: number, that: number) => A\n      readonly onNanos: (self: bigint, that: bigint) => B\n    }\n  ): (self: DurationInput) => A | B\n  /**\n   * @since 2.0.0\n   * @category pattern matching\n   */\n  <A, B>(\n    self: DurationInput,\n    that: DurationInput,\n    options: {\n      readonly onMillis: (self: number, that: number) => A\n      readonly onNanos: (self: bigint, that: bigint) => B\n    }\n  ): A | B\n} = dual(3, <A, B>(\n  self: DurationInput,\n  that: DurationInput,\n  options: {\n    readonly onMillis: (self: number, that: number) => A\n    readonly onNanos: (self: bigint, that: bigint) => B\n  }\n): A | B => {\n  const _self = decode(self)\n  const _that = decode(that)\n  if (_self.value._tag === \"Infinity\" || _that.value._tag === \"Infinity\") {\n    return options.onMillis(\n      toMillis(_self),\n      toMillis(_that)\n    )\n  } else if (_self.value._tag === \"Nanos\" || _that.value._tag === \"Nanos\") {\n    const selfNanos = _self.value._tag === \"Nanos\" ?\n      _self.value.nanos :\n      BigInt(Math.round(_self.value.millis * 1_000_000))\n    const thatNanos = _that.value._tag === \"Nanos\" ?\n      _that.value.nanos :\n      BigInt(Math.round(_that.value.millis * 1_000_000))\n    return options.onNanos(selfNanos, thatNanos)\n  }\n\n  return options.onMillis(\n    _self.value.millis,\n    _that.value.millis\n  )\n})\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Order: order.Order<Duration> = order.make((self, that) =>\n  matchWith(self, that, {\n    onMillis: (self, that) => (self < that ? -1 : self > that ? 1 : 0),\n    onNanos: (self, that) => (self < that ? -1 : self > that ? 1 : 0)\n  })\n)\n\n/**\n * Checks if a `Duration` is between a `minimum` and `maximum` value.\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const between: {\n  /**\n   * Checks if a `Duration` is between a `minimum` and `maximum` value.\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (\n    options: {\n      minimum: DurationInput\n      maximum: DurationInput\n    }\n  ): (self: DurationInput) => boolean\n  /**\n   * Checks if a `Duration` is between a `minimum` and `maximum` value.\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (\n    self: DurationInput,\n    options: {\n      minimum: DurationInput\n      maximum: DurationInput\n    }\n  ): boolean\n} = order.between(order.mapInput(Order, decode))\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Equivalence: equivalence.Equivalence<Duration> = (self, that) =>\n  matchWith(self, that, {\n    onMillis: (self, that) => self === that,\n    onNanos: (self, that) => self === that\n  })\n\nconst _min = order.min(Order)\n\n/**\n * @since 2.0.0\n */\nexport const min: {\n  /**\n   * @since 2.0.0\n   */\n  (that: DurationInput): (self: DurationInput) => Duration\n  /**\n   * @since 2.0.0\n   */\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(2, (self: DurationInput, that: DurationInput): Duration => _min(decode(self), decode(that)))\n\nconst _max = order.max(Order)\n\n/**\n * @since 2.0.0\n * @category order\n */\nexport const max: {\n  /**\n   * @since 2.0.0\n   * @category order\n   */\n  (that: DurationInput): (self: DurationInput) => Duration\n  /**\n   * @since 2.0.0\n   * @category order\n   */\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(2, (self: DurationInput, that: DurationInput): Duration => _max(decode(self), decode(that)))\n\nconst _clamp = order.clamp(Order)\n\n/**\n * @since 2.0.0\n * @category order\n */\nexport const clamp: {\n  /**\n   * @since 2.0.0\n   * @category order\n   */\n  (\n    options: {\n      minimum: DurationInput\n      maximum: DurationInput\n    }\n  ): (self: DurationInput) => Duration\n  /**\n   * @since 2.0.0\n   * @category order\n   */\n  (\n    self: DurationInput,\n    options: {\n      minimum: DurationInput\n      maximum: DurationInput\n    }\n  ): Duration\n} = dual(\n  2,\n  (self: DurationInput, options: {\n    minimum: DurationInput\n    maximum: DurationInput\n  }): Duration =>\n    _clamp(decode(self), {\n      minimum: decode(options.minimum),\n      maximum: decode(options.maximum)\n    })\n)\n\n/**\n * @since 2.4.19\n * @category math\n */\nexport const divide: {\n  /**\n   * @since 2.4.19\n   * @category math\n   */\n  (by: number): (self: DurationInput) => Option.Option<Duration>\n  /**\n   * @since 2.4.19\n   * @category math\n   */\n  (self: DurationInput, by: number): Option.Option<Duration>\n} = dual(\n  2,\n  (self: DurationInput, by: number): Option.Option<Duration> =>\n    match(self, {\n      onMillis: (millis) => {\n        if (by === 0 || isNaN(by) || !Number.isFinite(by)) {\n          return Option.none()\n        }\n        return Option.some(make(millis / by))\n      },\n      onNanos: (nanos) => {\n        if (isNaN(by) || by <= 0 || !Number.isFinite(by)) {\n          return Option.none()\n        }\n        try {\n          return Option.some(make(nanos / BigInt(by)))\n        } catch {\n          return Option.none()\n        }\n      }\n    })\n)\n\n/**\n * @since 2.4.19\n * @category math\n */\nexport const unsafeDivide: {\n  /**\n   * @since 2.4.19\n   * @category math\n   */\n  (by: number): (self: DurationInput) => Duration\n  /**\n   * @since 2.4.19\n   * @category math\n   */\n  (self: DurationInput, by: number): Duration\n} = dual(\n  2,\n  (self: DurationInput, by: number): Duration =>\n    match(self, {\n      onMillis: (millis) => make(millis / by),\n      onNanos: (nanos) => {\n        if (isNaN(by) || by < 0 || Object.is(by, -0)) {\n          return zero\n        } else if (Object.is(by, 0) || !Number.isFinite(by)) {\n          return infinity\n        }\n        return make(nanos / BigInt(by))\n      }\n    })\n)\n\n/**\n * @since 2.0.0\n * @category math\n */\nexport const times: {\n  /**\n   * @since 2.0.0\n   * @category math\n   */\n  (times: number): (self: DurationInput) => Duration\n  /**\n   * @since 2.0.0\n   * @category math\n   */\n  (self: DurationInput, times: number): Duration\n} = dual(\n  2,\n  (self: DurationInput, times: number): Duration =>\n    match(self, {\n      onMillis: (millis) => make(millis * times),\n      onNanos: (nanos) => make(nanos * BigInt(times))\n    })\n)\n\n/**\n * @since 2.0.0\n * @category math\n */\nexport const subtract: {\n  /**\n   * @since 2.0.0\n   * @category math\n   */\n  (that: DurationInput): (self: DurationInput) => Duration\n  /**\n   * @since 2.0.0\n   * @category math\n   */\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): Duration =>\n    matchWith(self, that, {\n      onMillis: (self, that) => make(self - that),\n      onNanos: (self, that) => make(self - that)\n    })\n)\n\n/**\n * @since 2.0.0\n * @category math\n */\nexport const sum: {\n  /**\n   * @since 2.0.0\n   * @category math\n   */\n  (that: DurationInput): (self: DurationInput) => Duration\n  /**\n   * @since 2.0.0\n   * @category math\n   */\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): Duration =>\n    matchWith(self, that, {\n      onMillis: (self, that) => make(self + that),\n      onNanos: (self, that) => make(self + that)\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const lessThan: {\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: DurationInput): (self: DurationInput) => boolean\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self < that,\n      onNanos: (self, that) => self < that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const lessThanOrEqualTo: {\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: DurationInput): (self: DurationInput) => boolean\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self <= that,\n      onNanos: (self, that) => self <= that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const greaterThan: {\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: DurationInput): (self: DurationInput) => boolean\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self > that,\n      onNanos: (self, that) => self > that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const greaterThanOrEqualTo: {\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: DurationInput): (self: DurationInput) => boolean\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self >= that,\n      onNanos: (self, that) => self >= that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const equals: {\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: DurationInput): (self: DurationInput) => boolean\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(2, (self: DurationInput, that: DurationInput): boolean => Equivalence(decode(self), decode(that)))\n\n/**\n * Converts a `Duration` to its parts.\n *\n * @since 3.8.0\n * @category conversions\n */\nexport const parts = (self: DurationInput): {\n  days: number\n  hours: number\n  minutes: number\n  seconds: number\n  millis: number\n  nanos: number\n} => {\n  const duration = decode(self)\n  if (duration.value._tag === \"Infinity\") {\n    return {\n      days: Infinity,\n      hours: Infinity,\n      minutes: Infinity,\n      seconds: Infinity,\n      millis: Infinity,\n      nanos: Infinity\n    }\n  }\n\n  const nanos = unsafeToNanos(duration)\n  const ms = nanos / bigint1e6\n  const sec = ms / bigint1e3\n  const min = sec / bigint60\n  const hr = min / bigint60\n  const days = hr / bigint24\n\n  return {\n    days: Number(days),\n    hours: Number(hr % bigint24),\n    minutes: Number(min % bigint60),\n    seconds: Number(sec % bigint60),\n    millis: Number(ms % bigint1e3),\n    nanos: Number(nanos % bigint1e6)\n  }\n}\n\n/**\n * Converts a `Duration` to a human readable string.\n *\n * @since 2.0.0\n * @category conversions\n * @example\n * ```ts\n * import { Duration } from \"effect\"\n *\n * Duration.format(Duration.millis(1000)) // \"1s\"\n * Duration.format(Duration.millis(1001)) // \"1s 1ms\"\n * ```\n */\nexport const format = (self: DurationInput): string => {\n  const duration = decode(self)\n  if (duration.value._tag === \"Infinity\") {\n    return \"Infinity\"\n  }\n  if (isZero(duration)) {\n    return \"0\"\n  }\n\n  const fragments = parts(duration)\n  const pieces = []\n  if (fragments.days !== 0) {\n    pieces.push(`${fragments.days}d`)\n  }\n\n  if (fragments.hours !== 0) {\n    pieces.push(`${fragments.hours}h`)\n  }\n\n  if (fragments.minutes !== 0) {\n    pieces.push(`${fragments.minutes}m`)\n  }\n\n  if (fragments.seconds !== 0) {\n    pieces.push(`${fragments.seconds}s`)\n  }\n\n  if (fragments.millis !== 0) {\n    pieces.push(`${fragments.millis}ms`)\n  }\n\n  if (fragments.nanos !== 0) {\n    pieces.push(`${fragments.nanos}ns`)\n  }\n\n  return pieces.join(\" \")\n}\n\n/**\n * Formats a Duration into an ISO8601 duration string.\n *\n * Months are assumed to be 30 days and years are assumed to be 365 days.\n *\n * Milliseconds and nanoseconds are expressed as fractional seconds.\n *\n * @example\n * ```ts\n * import { Duration } from \"effect\"\n *\n * Duration.unsafeFormatIso(Duration.days(1)) // => \"P1D\"\n * Duration.unsafeFormatIso(Duration.minutes(90)) // => \"PT1H30M\"\n * Duration.unsafeFormatIso(Duration.millis(1500)) // => \"PT1.5S\"\n * ```\n *\n * @throws `RangeError` If the duration is not finite.\n *\n * @since 3.13.0\n * @category conversions\n */\nexport const unsafeFormatIso = (self: DurationInput): string => {\n  const duration = decode(self)\n  if (!isFinite(duration)) {\n    throw new RangeError(\"Cannot format infinite duration\")\n  }\n\n  const fragments = []\n  const {\n    days,\n    hours,\n    millis,\n    minutes,\n    nanos,\n    seconds\n  } = parts(duration)\n\n  let rest = days\n  if (rest >= 365) {\n    const years = Math.floor(rest / 365)\n    rest %= 365\n    fragments.push(`${years}Y`)\n  }\n\n  if (rest >= 30) {\n    const months = Math.floor(rest / 30)\n    rest %= 30\n    fragments.push(`${months}M`)\n  }\n\n  if (rest >= 7) {\n    const weeks = Math.floor(rest / 7)\n    rest %= 7\n    fragments.push(`${weeks}W`)\n  }\n\n  if (rest > 0) {\n    fragments.push(`${rest}D`)\n  }\n\n  if (hours !== 0 || minutes !== 0 || seconds !== 0 || millis !== 0 || nanos !== 0) {\n    fragments.push(\"T\")\n\n    if (hours !== 0) {\n      fragments.push(`${hours}H`)\n    }\n\n    if (minutes !== 0) {\n      fragments.push(`${minutes}M`)\n    }\n\n    if (seconds !== 0 || millis !== 0 || nanos !== 0) {\n      const total = BigInt(seconds) * bigint1e9 + BigInt(millis) * bigint1e6 + BigInt(nanos)\n      const str = (Number(total) / 1e9).toFixed(9).replace(/\\.?0+$/, \"\")\n      fragments.push(`${str}S`)\n    }\n  }\n\n  return `P${fragments.join(\"\") || \"T0S\"}`\n}\n\n/**\n * Formats a Duration into an ISO8601 duration string.\n *\n * Months are assumed to be 30 days and years are assumed to be 365 days.\n *\n * Returns `Option.none()` if the duration is infinite.\n *\n * @example\n * ```ts\n * import { Duration, Option } from \"effect\"\n *\n * Duration.formatIso(Duration.days(1)) // => Option.some(\"P1D\")\n * Duration.formatIso(Duration.minutes(90)) // => Option.some(\"PT1H30M\")\n * Duration.formatIso(Duration.millis(1500)) // => Option.some(\"PT1.5S\")\n * Duration.formatIso(Duration.infinity) // => Option.none()\n * ```\n *\n * @since 3.13.0\n * @category conversions\n */\nexport const formatIso = (self: DurationInput): Option.Option<string> => {\n  const duration = decode(self)\n  return isFinite(duration) ? Option.some(unsafeFormatIso(duration)) : Option.none()\n}\n\n/**\n * Parses an ISO8601 duration string into a `Duration`.\n *\n * Months are assumed to be 30 days and years are assumed to be 365 days.\n *\n * @example\n * ```ts\n * import { Duration, Option } from \"effect\"\n *\n * Duration.fromIso(\"P1D\") // => Option.some(Duration.days(1))\n * Duration.fromIso(\"PT1H\") // => Option.some(Duration.hours(1))\n * Duration.fromIso(\"PT1M\") // => Option.some(Duration.minutes(1))\n * Duration.fromIso(\"PT1.5S\") // => Option.some(Duration.seconds(1.5))\n * ```\n *\n * @since 3.13.0\n * @category conversions\n */\nexport const fromIso = (iso: string): Option.Option<Duration> => {\n  const result = DURATION_ISO_REGEX.exec(iso)\n  if (result == null) {\n    return Option.none()\n  }\n\n  const [years, months, weeks, days, hours, mins, secs] = result.slice(1, 8).map((_) => _ ? Number(_) : 0)\n  const value = years * 365 * 24 * 60 * 60 +\n    months * 30 * 24 * 60 * 60 +\n    weeks * 7 * 24 * 60 * 60 +\n    days * 24 * 60 * 60 +\n    hours * 60 * 60 +\n    mins * 60 +\n    secs\n\n  return Option.some(seconds(value))\n}\n\nconst DURATION_ISO_REGEX =\n  /^P(?!$)(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)W)?(?:(\\d+)D)?(?:T(?!$)(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/\n", "/**\n * @since 2.0.0\n */\nimport type * as Equal from \"./Equal.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as internal from \"./internal/fiberId.js\"\nimport type * as Option from \"./Option.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberIdTypeId: unique symbol = internal.FiberIdTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberIdTypeId = typeof FiberIdTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type Single = None | Runtime\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type FiberId = Single | Composite\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface None extends Equal.Equal, Inspectable {\n  readonly [FiberIdTypeId]: FiberIdTypeId\n  readonly _tag: \"None\"\n  readonly id: -1\n  readonly startTimeMillis: -1\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Runtime extends Equal.Equal, Inspectable {\n  readonly [FiberIdTypeId]: FiberIdTypeId\n  readonly _tag: \"Runtime\"\n  readonly id: number\n  readonly startTimeMillis: number\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Composite extends Equal.Equal, Inspectable {\n  readonly [FiberIdTypeId]: FiberIdTypeId\n  readonly _tag: \"Composite\"\n  readonly left: FiberId\n  readonly right: FiberId\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const none: None = internal.none\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const runtime: (id: number, startTimeMillis: number) => Runtime = internal.runtime\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const composite: (left: FiberId, right: FiberId) => Composite = internal.composite\n\n/**\n * Returns `true` if the specified unknown value is a `FiberId`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFiberId: (self: unknown) => self is FiberId = internal.isFiberId\n\n/**\n * Returns `true` if the `FiberId` is a `None`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isNone: (self: FiberId) => self is None = internal.isNone\n\n/**\n * Returns `true` if the `FiberId` is a `Runtime`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRuntime: (self: FiberId) => self is Runtime = internal.isRuntime\n\n/**\n * Returns `true` if the `FiberId` is a `Composite`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isComposite: (self: FiberId) => self is Composite = internal.isComposite\n\n/**\n * Combine two `FiberId`s.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const combine: {\n  /**\n   * Combine two `FiberId`s.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  (that: FiberId): (self: FiberId) => FiberId\n  /**\n   * Combine two `FiberId`s.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  (self: FiberId, that: FiberId): FiberId\n} = internal.combine\n\n/**\n * Combines a set of `FiberId`s into a single `FiberId`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const combineAll: (fiberIds: HashSet.HashSet<FiberId>) => FiberId = internal.combineAll\n\n/**\n * Returns this `FiberId` if it is not `None`, otherwise returns that `FiberId`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const getOrElse: {\n  /**\n   * Returns this `FiberId` if it is not `None`, otherwise returns that `FiberId`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (that: FiberId): (self: FiberId) => FiberId\n  /**\n   * Returns this `FiberId` if it is not `None`, otherwise returns that `FiberId`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: FiberId, that: FiberId): FiberId\n} = internal.getOrElse\n\n/**\n * Get the set of identifiers for this `FiberId`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const ids: (self: FiberId) => HashSet.HashSet<number> = internal.ids\n\n/**\n * Creates a new `FiberId`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (id: number, startTimeSeconds: number) => FiberId = internal.make\n\n/**\n * Creates a string representing the name of the current thread of execution\n * represented by the specified `FiberId`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const threadName: (self: FiberId) => string = internal.threadName\n\n/**\n * Convert a `FiberId` into an `Option<FiberId>`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toOption: (self: FiberId) => Option.Option<FiberId> = internal.toOption\n\n/**\n * Convert a `FiberId` into a `HashSet<FiberId>`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toSet: (self: FiberId) => HashSet.HashSet<Runtime> = internal.toSet\n\n/**\n * Unsafely creates a new `FiberId`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: (_: void) => Runtime = internal.unsafeMake\n", "import * as Equal from \"../Equal.js\"\nimport type * as FiberId from \"../FiberId.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as Hash from \"../Hash.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport * as MutableRef from \"../MutableRef.js\"\nimport * as Option from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\n\n/** @internal */\nconst FiberIdSymbolKey = \"effect/FiberId\"\n\n/** @internal */\nexport const FiberIdTypeId: FiberId.FiberIdTypeId = Symbol.for(\n  FiberIdSymbolKey\n) as FiberId.FiberIdTypeId\n\n/** @internal */\nconst OP_NONE = \"None\" as const\n\n/** @internal */\nexport type OP_NONE = typeof OP_NONE\n\n/** @internal */\nconst OP_RUNTIME = \"Runtime\" as const\n\n/** @internal */\nexport type OP_RUNTIME = typeof OP_RUNTIME\n\n/** @internal */\nconst OP_COMPOSITE = \"Composite\" as const\n\n/** @internal */\nexport type OP_COMPOSITE = typeof OP_COMPOSITE\n\nconst emptyHash = Hash.string(`${FiberIdSymbolKey}-${OP_NONE}`)\n\n/** @internal */\nclass None implements FiberId.None {\n  readonly [FiberIdTypeId]: FiberId.FiberIdTypeId = FiberIdTypeId\n  readonly _tag = OP_NONE\n  readonly id = -1\n  readonly startTimeMillis = -1;\n  [Hash.symbol](): number {\n    return emptyHash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFiberId(that) && that._tag === OP_NONE\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  toJSON() {\n    return {\n      _id: \"FiberId\",\n      _tag: this._tag\n    }\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n}\n\n/** @internal */\nclass Runtime implements FiberId.Runtime {\n  readonly [FiberIdTypeId]: FiberId.FiberIdTypeId = FiberIdTypeId\n  readonly _tag = OP_RUNTIME\n  constructor(\n    readonly id: number,\n    readonly startTimeMillis: number\n  ) {}\n  [Hash.symbol](): number {\n    return Hash.cached(this, Hash.string(`${FiberIdSymbolKey}-${this._tag}-${this.id}-${this.startTimeMillis}`))\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFiberId(that) &&\n      that._tag === OP_RUNTIME &&\n      this.id === that.id &&\n      this.startTimeMillis === that.startTimeMillis\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  toJSON() {\n    return {\n      _id: \"FiberId\",\n      _tag: this._tag,\n      id: this.id,\n      startTimeMillis: this.startTimeMillis\n    }\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n}\n\n/** @internal */\nclass Composite implements FiberId.Composite {\n  readonly [FiberIdTypeId]: FiberId.FiberIdTypeId = FiberIdTypeId\n  readonly _tag = OP_COMPOSITE\n  constructor(\n    readonly left: FiberId.FiberId,\n    readonly right: FiberId.FiberId\n  ) {\n  }\n  _hash: number | undefined;\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.string(`${FiberIdSymbolKey}-${this._tag}`),\n      Hash.combine(Hash.hash(this.left)),\n      Hash.combine(Hash.hash(this.right)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFiberId(that) &&\n      that._tag === OP_COMPOSITE &&\n      Equal.equals(this.left, that.left) &&\n      Equal.equals(this.right, that.right)\n  }\n  toString() {\n    return format(this.toJSON())\n  }\n  toJSON() {\n    return {\n      _id: \"FiberId\",\n      _tag: this._tag,\n      left: toJSON(this.left),\n      right: toJSON(this.right)\n    }\n  }\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n}\n\n/** @internal */\nexport const none: FiberId.None = new None()\n\n/** @internal */\nexport const runtime = (id: number, startTimeMillis: number): FiberId.Runtime => {\n  return new Runtime(id, startTimeMillis)\n}\n\n/** @internal */\nexport const composite = (left: FiberId.FiberId, right: FiberId.FiberId): FiberId.Composite => {\n  return new Composite(left, right)\n}\n\n/** @internal */\nexport const isFiberId = (self: unknown): self is FiberId.FiberId => hasProperty(self, FiberIdTypeId)\n\n/** @internal */\nexport const isNone = (self: FiberId.FiberId): self is FiberId.None => {\n  return self._tag === OP_NONE || pipe(toSet(self), HashSet.every((id) => isNone(id)))\n}\n\n/** @internal */\nexport const isRuntime = (self: FiberId.FiberId): self is FiberId.Runtime => {\n  return self._tag === OP_RUNTIME\n}\n\n/** @internal */\nexport const isComposite = (self: FiberId.FiberId): self is FiberId.Composite => {\n  return self._tag === OP_COMPOSITE\n}\n\n/** @internal */\nexport const combine = dual<\n  (that: FiberId.FiberId) => (self: FiberId.FiberId) => FiberId.FiberId,\n  (self: FiberId.FiberId, that: FiberId.FiberId) => FiberId.FiberId\n>(2, (self, that) => {\n  if (self._tag === OP_NONE) {\n    return that\n  }\n  if (that._tag === OP_NONE) {\n    return self\n  }\n  return new Composite(self, that)\n})\n\n/** @internal */\nexport const combineAll = (fiberIds: HashSet.HashSet<FiberId.FiberId>): FiberId.FiberId => {\n  return pipe(fiberIds, HashSet.reduce(none as FiberId.FiberId, (a, b) => combine(b)(a)))\n}\n\n/** @internal */\nexport const getOrElse = dual<\n  (that: FiberId.FiberId) => (self: FiberId.FiberId) => FiberId.FiberId,\n  (self: FiberId.FiberId, that: FiberId.FiberId) => FiberId.FiberId\n>(2, (self, that) => isNone(self) ? that : self)\n\n/** @internal */\nexport const ids = (self: FiberId.FiberId): HashSet.HashSet<number> => {\n  switch (self._tag) {\n    case OP_NONE: {\n      return HashSet.empty()\n    }\n    case OP_RUNTIME: {\n      return HashSet.make(self.id)\n    }\n    case OP_COMPOSITE: {\n      return pipe(ids(self.left), HashSet.union(ids(self.right)))\n    }\n  }\n}\n\nconst _fiberCounter = globalValue(\n  Symbol.for(\"effect/Fiber/Id/_fiberCounter\"),\n  () => MutableRef.make(0)\n)\n\n/** @internal */\nexport const make = (id: number, startTimeSeconds: number): FiberId.FiberId => {\n  return new Runtime(id, startTimeSeconds)\n}\n\n/** @internal */\nexport const threadName = (self: FiberId.FiberId): string => {\n  const identifiers = Array.from(ids(self)).map((n) => `#${n}`).join(\",\")\n  return identifiers\n}\n\n/** @internal */\nexport const toOption = (self: FiberId.FiberId): Option.Option<FiberId.FiberId> => {\n  const fiberIds = toSet(self)\n  if (HashSet.size(fiberIds) === 0) {\n    return Option.none()\n  }\n  let first = true\n  let acc: FiberId.FiberId\n  for (const fiberId of fiberIds) {\n    if (first) {\n      acc = fiberId\n      first = false\n    } else {\n      // @ts-expect-error\n      acc = pipe(acc, combine(fiberId))\n    }\n  }\n  // @ts-expect-error\n  return Option.some(acc)\n}\n\n/** @internal */\nexport const toSet = (self: FiberId.FiberId): HashSet.HashSet<FiberId.Runtime> => {\n  switch (self._tag) {\n    case OP_NONE: {\n      return HashSet.empty()\n    }\n    case OP_RUNTIME: {\n      return HashSet.make(self)\n    }\n    case OP_COMPOSITE: {\n      return pipe(toSet(self.left), HashSet.union(toSet(self.right)))\n    }\n  }\n}\n\n/** @internal */\nexport const unsafeMake = (): FiberId.Runtime => {\n  const id = MutableRef.get(_fiberCounter)\n  pipe(_fiberCounter, MutableRef.set(id + 1))\n  return new Runtime(id, Date.now())\n}\n", "/**\n * # HashSet\n *\n * An immutable `HashSet` provides a collection of unique values with efficient\n * lookup, insertion and removal. Once created, a `HashSet` cannot be modified;\n * any operation that would alter the set instead returns a new `HashSet` with\n * the changes. This immutability offers benefits like predictable state\n * management and easier reasoning about your code.\n *\n * ## What Problem Does It Solve?\n *\n * `HashSet` solves the problem of maintaining an unsorted collection where each\n * value appears exactly once, with fast operations for checking membership and\n * adding/removing values.\n *\n * ## When to Use\n *\n * Use `HashSet` when you need:\n *\n * - A collection with no duplicate values\n * - Efficient membership testing (**`O(1)`** average complexity)\n * - Set operations like union, intersection, and difference\n * - An immutable data structure that preserves functional programming patterns\n *\n * ## Advanced Features\n *\n * HashSet provides operations for:\n *\n * - Transforming sets with map and flatMap\n * - Filtering elements with filter\n * - Combining sets with union, intersection and difference\n * - Performance optimizations via mutable operations in controlled contexts\n *\n * ## Performance Characteristics\n *\n * - **Lookup** operations ({@link module:HashSet.has}): **`O(1)`** average time\n *   complexity\n * - **Insertion** operations ({@link module:HashSet.add}): **`O(1)`** average time\n *   complexity\n * - **Removal** operations ({@link module:HashSet.remove}): **`O(1)`** average\n *   time complexity\n * - **Set** operations ({@link module:HashSet.union},\n *   {@link module:HashSet.intersection}): **`O(n)`** where n is the size of the\n *   smaller set\n * - **Iteration**: **`O(n)`** where n is the size of the set\n *\n * The HashSet data structure implements the following traits:\n *\n * - {@link Iterable}: allows iterating over the values in the set\n * - {@link Equal}: allows comparing two sets for value-based equality\n * - {@link Pipeable}: allows chaining operations with the pipe operator\n * - {@link Inspectable}: allows inspecting the contents of the set\n *\n * ## Operations Reference\n *\n * | Category     | Operation                           | Description                                 | Complexity |\n * | ------------ | ----------------------------------- | ------------------------------------------- | ---------- |\n * | constructors | {@link module:HashSet.empty}        | Creates an empty HashSet                    | O(1)       |\n * | constructors | {@link module:HashSet.fromIterable} | Creates a HashSet from an iterable          | O(n)       |\n * | constructors | {@link module:HashSet.make}         | Creates a HashSet from multiple values      | O(n)       |\n * |              |                                     |                                             |            |\n * | elements     | {@link module:HashSet.has}          | Checks if a value exists in the set         | O(1) avg   |\n * | elements     | {@link module:HashSet.some}         | Checks if any element satisfies a predicate | O(n)       |\n * | elements     | {@link module:HashSet.every}        | Checks if all elements satisfy a predicate  | O(n)       |\n * | elements     | {@link module:HashSet.isSubset}     | Checks if a set is a subset of another      | O(n)       |\n * |              |                                     |                                             |            |\n * | getters      | {@link module:HashSet.values}       | Gets an iterator of all values              | O(1)       |\n * | getters      | {@link module:HashSet.toValues}     | Gets an array of all values                 | O(n)       |\n * | getters      | {@link module:HashSet.size}         | Gets the number of elements                 | O(1)       |\n * |              |                                     |                                             |            |\n * | mutations    | {@link module:HashSet.add}          | Adds a value to the set                     | O(1) avg   |\n * | mutations    | {@link module:HashSet.remove}       | Removes a value from the set                | O(1) avg   |\n * | mutations    | {@link module:HashSet.toggle}       | Toggles a value's presence                  | O(1) avg   |\n * |              |                                     |                                             |            |\n * | operations   | {@link module:HashSet.difference}   | Computes set difference (A - B)             | O(n)       |\n * | operations   | {@link module:HashSet.intersection} | Computes set intersection (A ∩ B)           | O(n)       |\n * | operations   | {@link module:HashSet.union}        | Computes set union (A ∪ B)                  | O(n)       |\n * |              |                                     |                                             |            |\n * | mapping      | {@link module:HashSet.map}          | Transforms each element                     | O(n)       |\n * |              |                                     |                                             |            |\n * | sequencing   | {@link module:HashSet.flatMap}      | Transforms and flattens elements            | O(n)       |\n * |              |                                     |                                             |            |\n * | traversing   | {@link module:HashSet.forEach}      | Applies a function to each element          | O(n)       |\n * |              |                                     |                                             |            |\n * | folding      | {@link module:HashSet.reduce}       | Reduces the set to a single value           | O(n)       |\n * |              |                                     |                                             |            |\n * | filtering    | {@link module:HashSet.filter}       | Keeps elements that satisfy a predicate     | O(n)       |\n * |              |                                     |                                             |            |\n * | partitioning | {@link module:HashSet.partition}    | Splits into two sets by a predicate         | O(n)       |\n *\n * ## Notes\n *\n * ### Composability with the Effect Ecosystem:\n *\n * This `HashSet` is designed to work seamlessly within the Effect ecosystem. It\n * implements the {@link Iterable}, {@link Equal}, {@link Pipeable}, and\n * {@link Inspectable} traits from Effect. This ensures compatibility with other\n * Effect data structures and functionalities. For example, you can easily use\n * Effect's `pipe` method to chain operations on the `HashSet`.\n *\n * **Equality of Elements with Effect's {@link Equal `Equal`} Trait:**\n *\n * This `HashSet` relies on Effect's {@link Equal} trait to determine the\n * uniqueness of elements within the set. The way equality is checked depends on\n * the type of the elements:\n *\n * - **Primitive Values:** For primitive JavaScript values like strings, numbers,\n *   booleans, `null`, and `undefined`, equality is determined by their value\n *   (similar to the `===` operator).\n * - **Objects and Custom Types:** For objects and other custom types, equality is\n *   determined by whether those types implement the {@link Equal} interface\n *   themselves. If an element type implements `Equal`, the `HashSet` will\n *   delegate to that implementation to perform the equality check. This allows\n *   you to define custom logic for determining when two instances of your\n *   objects should be considered equal based on their properties, rather than\n *   just their object identity.\n *\n * ```ts\n * import { Equal, Hash, HashSet } from \"effect\"\n *\n * class Person implements Equal.Equal {\n *   constructor(\n *     readonly id: number, // Unique identifier\n *     readonly name: string,\n *     readonly age: number\n *   ) {}\n *\n *   // Define equality based on id, name, and age\n *   [Equal.symbol](that: Equal.Equal): boolean {\n *     if (that instanceof Person) {\n *       return (\n *         Equal.equals(this.id, that.id) &&\n *         Equal.equals(this.name, that.name) &&\n *         Equal.equals(this.age, that.age)\n *       )\n *     }\n *     return false\n *   }\n *\n *   // Generate a hash code based on the unique id\n *   [Hash.symbol](): number {\n *     return Hash.hash(this.id)\n *   }\n * }\n *\n * // Creating a HashSet with objects that implement the Equal interface\n * const set = HashSet.empty().pipe(\n *   HashSet.add(new Person(1, \"Alice\", 30)),\n *   HashSet.add(new Person(1, \"Alice\", 30))\n * )\n *\n * // HashSet recognizes them as equal, so only one element is stored\n * console.log(HashSet.size(set))\n * // Output: 1\n * ```\n *\n * **Simplifying Equality and Hashing with `Data` and `Schema`:**\n *\n * Effect's {@link Data} and {@link Schema `Schema.Data`} modules offer powerful\n * ways to automatically handle the implementation of both the {@link Equal} and\n * {@link Hash} traits for your custom data structures.\n *\n * - **`Data` Module:** By using constructors like `Data.struct`, `Data.tuple`,\n *   `Data.array`, or `Data.case` to define your data types, Effect\n *   automatically generates the necessary implementations for value-based\n *   equality and consistent hashing. This significantly reduces boilerplate and\n *   ensures correctness.\n *\n * ```ts\n * import { HashSet, Data, Equal } from \"effect\"\n * import assert from \"node:assert/strict\"\n *\n * // Data.* implements the `Equal` traits for us\n * const person1 = Data.struct({ id: 1, name: \"Alice\", age: 30 })\n * const person2 = Data.struct({ id: 1, name: \"Alice\", age: 30 })\n *\n * assert(Equal.equals(person1, person2))\n *\n * const set = HashSet.empty().pipe(\n *   HashSet.add(person1),\n *   HashSet.add(person2)\n * )\n *\n * // HashSet recognizes them as equal, so only one element is stored\n * console.log(HashSet.size(set)) // Output: 1\n * ```\n *\n * - **`Schema` Module:** When defining data schemas using the {@link Schema}\n *   module, you can use `Schema.Data` to automatically include the `Equal` and\n *   `Hash` traits in the decoded objects. This is particularly important when\n *   working with `HashSet`. **For decoded objects to be correctly recognized as\n *   equal within a `HashSet`, ensure that the schema for those objects is\n *   defined using `Schema.Data`.**\n *\n * ```ts\n * import { Equal, HashSet, Schema } from \"effect\"\n * import assert from \"node:assert/strict\"\n *\n * // Schema.Data implements the `Equal` traits for us\n * const PersonSchema = Schema.Data(\n *   Schema.Struct({\n *     id: Schema.Number,\n *     name: Schema.String,\n *     age: Schema.Number\n *   })\n * )\n *\n * const Person = Schema.decode(PersonSchema)\n *\n * const person1 = Person({ id: 1, name: \"Alice\", age: 30 })\n * const person2 = Person({ id: 1, name: \"Alice\", age: 30 })\n *\n * assert(Equal.equals(person1, person2)) // Output: true\n *\n * const set = HashSet.empty().pipe(\n *   HashSet.add(person1),\n *   HashSet.add(person2)\n * )\n *\n * // HashSet thanks to Schema.Data implementation of the `Equal` trait, recognizes the two Person as equal, so only one element is stored\n * console.log(HashSet.size(set)) // Output: 1\n * ```\n *\n * ### Interoperability with the JavaScript Runtime:\n *\n * To interoperate with the regular JavaScript runtime, Effect's `HashSet`\n * provides methods to access its elements in formats readily usable by\n * JavaScript APIs: {@link values `HashSet.values`},\n * {@link toValues `HashSet.toValues`}\n *\n * ```ts\n * import { HashSet } from \"effect\"\n *\n * const hashSet: HashSet.HashSet<number> = HashSet.make(1, 2, 3)\n *\n * // Using HashSet.values to convert HashSet.HashSet<A> to IterableIterator<A>\n * const iterable: IterableIterator<number> = HashSet.values(hashSet)\n *\n * console.log(...iterable) // Logs:  1 2 3\n *\n * // Using HashSet.toValues to convert HashSet.HashSet<A> to Array<A>\n * const array: Array<number> = HashSet.toValues(hashSet)\n *\n * console.log(array) // Logs: [ 1, 2, 3 ]\n * ```\n *\n * Be mindful of performance implications (both time and space complexity) when\n * frequently converting between Effect's immutable HashSet and mutable\n * JavaScript data structures, especially for large collections.\n *\n * @module HashSet\n * @since 2.0.0\n */\n\nimport type { Equal } from \"./Equal.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as HS from \"./internal/hashSet.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type { NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = HS.HashSetTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @memberof HashSet\n * @since 2.0.0\n * @category models\n * @example\n *\n * ```ts\n * // Syntax\n * import { HashSet } from \"effect\"\n *\n * let numberSet: HashSet.HashSet<number>\n * ```\n *\n * @interface\n */\nexport interface HashSet<out A> extends Iterable<A>, Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n}\n\n/**\n * @memberof HashSet\n * @since 2.0.0\n * @category refinements\n */\nexport const isHashSet: {\n  /**\n   * Type guard function to determine if a given iterable is a `HashSet`.\n   *\n   * This overload preserves the type of the iterable's elements.\n   *\n   * @example\n   *\n   * ```ts\n   * import { HashSet } from \"effect\"\n   *\n   * const numberIterable: Iterable<1 | 2 | 3> = [1, 2, 3]\n   *\n   * if (\n   *   // if passed an Iterable<A> the type guard that preserves the type parameter <A>\n   *   HashSet.isHashSet(numberIterable)\n   * ) {\n   *   const HashSet: HashSet.HashSet<1 | 2 | 3> = numberIterable\n   * }\n   * ```\n   *\n   * @param u - The iterable input to be checked.\n   * @returns A boolean indicating whether the provided iterable is a `HashSet`.\n   */\n  <A>(u: Iterable<A>): u is HashSet<A>\n\n  /**\n   * Type guard function that checks if the provided value is a `HashSet` of\n   * unknown type.\n   *\n   * @example\n   *\n   * ```ts\n   * import { HashSet } from \"effect\"\n   * import assert from \"node:assert/strict\"\n   *\n   * // Check if a value is a HashSet\n   * const set = HashSet.make(1, 2, 3)\n   *\n   * assert.equal(HashSet.isHashSet(set), true) // true\n   * assert.equal(HashSet.isHashSet(HashSet.empty()), true)\n   *\n   * // Works with any type\n   * assert.equal(HashSet.isHashSet(null), false) // false\n   * assert.equal(HashSet.isHashSet({}), false) // false\n   * assert.equal(HashSet.isHashSet([1, 2, 3]), false) // false\n   * ```\n   *\n   * @param u - The value to check.\n   * @returns A boolean indicating whether the value is a `HashSet<unknown>`.\n   */\n  (u: unknown): u is HashSet<unknown>\n} = HS.isHashSet\n\n/**\n * Creates an empty `HashSet`.\n *\n * Time complexity: **`O(1)`**\n *\n * @memberof HashSet\n * @since 2.0.0\n * @category constructors\n * @example\n *\n * ```ts\n * import { HashSet, pipe } from \"effect\"\n *\n * console.log(\n *   pipe(\n *     // Provide a type argument to create a HashSet of a specific type\n *     HashSet.empty<number>(),\n *     HashSet.add(1),\n *     HashSet.add(1), // Notice the duplicate\n *     HashSet.add(2),\n *     HashSet.toValues\n *   )\n * ) // Output: [1, 2]\n * ```\n *\n * @see Other `HashSet` constructors are {@link module:HashSet.make} {@link module:HashSet.fromIterable}\n */\nexport const empty: <A = never>() => HashSet<A> = HS.empty\n\n/**\n * Creates a new `HashSet` from an iterable collection of values.\n *\n * Time complexity: **`O(n)`** where n is the number of elements in the iterable\n *\n * @memberof HashSet\n * @since 2.0.0\n * @category constructors\n * @example\n *\n * ```ts\n * // Creating a HashSet from an Array\n * import { HashSet, pipe } from \"effect\"\n *\n * console.log(\n *   pipe(\n *     [1, 2, 3, 4, 5, 1, 2, 3], // Array<number> is an Iterable<number>;  Note the duplicates.\n *     HashSet.fromIterable,\n *     HashSet.toValues\n *   )\n * ) // Output: [1, 2, 3, 4, 5]\n * ```\n *\n * @example\n *\n * ```ts\n * // Creating a HashSet from a Set\n * import { HashSet, pipe } from \"effect\"\n *\n * console.log(\n *   pipe(\n *     new Set([\"apple\", \"banana\", \"orange\", \"apple\"]), // Set<string> is an Iterable<string>\n *     HashSet.fromIterable,\n *     HashSet.toValues\n *   )\n * ) // Output: [\"apple\", \"banana\", \"orange\"]\n * ```\n *\n * @example\n *\n * ```ts\n * // Creating a HashSet from a Generator\n * import { HashSet } from \"effect\"\n *\n * // Generator functions return iterables\n * function* fibonacci(n: number): Generator<number, void, unknown> {\n *   let [a, b] = [0, 1]\n *   for (let i = 0; i < n; i++) {\n *     yield a\n *     ;[a, b] = [b, a + b]\n *   }\n * }\n *\n * // Create a HashSet from the first 10 Fibonacci numbers\n * const fibonacciSet = HashSet.fromIterable(fibonacci(10))\n *\n * console.log(HashSet.toValues(fibonacciSet))\n * // Outputs: [0, 1, 2, 3, 5, 8, 13, 21, 34] but in unsorted order\n * ```\n *\n * @example\n *\n * ```ts\n * //  Creating a HashSet from another HashSet\n * import { HashSet, pipe } from \"effect\"\n *\n * console.log(\n *   pipe(\n *     // since HashSet implements the Iterable interface, we can use it to create a new HashSet\n *     HashSet.make(1, 2, 3, 4),\n *     HashSet.fromIterable,\n *     HashSet.toValues // turns the HashSet back into an array\n *   )\n * ) // Output: [1, 2, 3, 4]\n * ```\n *\n * @example\n *\n * ```ts\n * // Creating a HashSet from other Effect's data structures like Chunk\n * import { Chunk, HashSet, pipe } from \"effect\"\n *\n * console.log(\n *   pipe(\n *     Chunk.make(1, 2, 3, 4), // Iterable<number>\n *     HashSet.fromIterable,\n *     HashSet.toValues // turns the HashSet back into an array\n *   )\n * ) // Outputs: [1, 2, 3, 4]\n * ```\n *\n * @see Other `HashSet` constructors are {@link module:HashSet.empty} {@link module:HashSet.make}\n */\nexport const fromIterable: <A>(elements: Iterable<A>) => HashSet<A> = HS.fromIterable\n\n/**\n * Construct a new `HashSet` from a variable number of values.\n *\n * Time complexity: **`O(n)`** where n is the number of elements\n *\n * @memberof HashSet\n * @since 2.0.0\n * @category constructors\n * @example\n *\n * ```ts\n * import { Equal, Hash, HashSet, pipe } from \"effect\"\n * import assert from \"node:assert/strict\"\n *\n * class Character implements Equal.Equal {\n *   readonly name: string\n *   readonly trait: string\n *\n *   constructor(name: string, trait: string) {\n *     this.name = name\n *     this.trait = trait\n *   }\n *\n *   // Define equality based on name, and trait\n *   [Equal.symbol](that: Equal.Equal): boolean {\n *     if (that instanceof Character) {\n *       return (\n *         Equal.equals(this.name, that.name) &&\n *         Equal.equals(this.trait, that.trait)\n *       )\n *     }\n *     return false\n *   }\n *\n *   // Generate a hash code based on the sum of the character's name and trait\n *   [Hash.symbol](): number {\n *     return Hash.hash(this.name + this.trait)\n *   }\n *\n *   static readonly of = (name: string, trait: string): Character => {\n *     return new Character(name, trait)\n *   }\n * }\n *\n * assert.strictEqual(\n *   Equal.equals(\n *     HashSet.make(\n *       Character.of(\"Alice\", \"Curious\"),\n *       Character.of(\"Alice\", \"Curious\"),\n *       Character.of(\"White Rabbit\", \"Always late\"),\n *       Character.of(\"Mad Hatter\", \"Tea enthusiast\")\n *     ),\n *     // Is the same as adding each character to an empty set\n *     pipe(\n *       HashSet.empty(),\n *       HashSet.add(Character.of(\"Alice\", \"Curious\")),\n *       HashSet.add(Character.of(\"Alice\", \"Curious\")), // Alice tried to attend twice!\n *       HashSet.add(Character.of(\"White Rabbit\", \"Always late\")),\n *       HashSet.add(Character.of(\"Mad Hatter\", \"Tea enthusiast\"))\n *     )\n *   ),\n *   true,\n *   \"`HashSet.make` and `HashSet.empty() + HashSet.add()` should be equal\"\n * )\n *\n * assert.strictEqual(\n *   Equal.equals(\n *     HashSet.make(\n *       Character.of(\"Alice\", \"Curious\"),\n *       Character.of(\"Alice\", \"Curious\"),\n *       Character.of(\"White Rabbit\", \"Always late\"),\n *       Character.of(\"Mad Hatter\", \"Tea enthusiast\")\n *     ),\n *     HashSet.fromIterable([\n *       Character.of(\"Alice\", \"Curious\"),\n *       Character.of(\"Alice\", \"Curious\"),\n *       Character.of(\"White Rabbit\", \"Always late\"),\n *       Character.of(\"Mad Hatter\", \"Tea enthusiast\")\n *     ])\n *   ),\n *   true,\n *   \"`HashSet.make` and `HashSet.fromIterable` should be equal\"\n * )\n * ```\n *\n * @see Other `HashSet` constructors are {@link module:HashSet.fromIterable} {@link module:HashSet.empty}\n */\nexport const make: <As extends ReadonlyArray<any>>(...elements: As) => HashSet<As[number]> = HS.make\n\n/**\n * Checks if the specified value exists in the `HashSet`.\n *\n * Time complexity: **`O(1)`** average\n *\n * @memberof HashSet\n * @since 2.0.0\n * @category elements\n * @example\n *\n * ```ts\n * // Syntax\n * import { HashSet, pipe } from \"effect\"\n *\n * // with `data-last`, a.k.a. `pipeable` API\n * pipe(HashSet.make(0, 1, 2), HashSet.has(3)) // false\n *\n * // or piped with the pipe function\n * HashSet.make(0, 1, 2).pipe(HashSet.has(3)) // false\n *\n * // or with `data-first` API\n * HashSet.has(HashSet.make(0, 1, 2), 3) // false\n * ```\n *\n * @returns A `boolean` signaling the presence of the value in the HashSet\n * @see Other `HashSet` elements are {@link module:HashSet.some} {@link module:HashSet.every} {@link module:HashSet.isSubset}\n */\nexport const has: {\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-last` a.k.a. `pipeable` API\n   * import * as assert from \"node:assert/strict\"\n   * import { HashSet, pipe } from \"effect\"\n   *\n   * const set = HashSet.make(0, 1, 2)\n   *\n   * assert.equal(pipe(set, HashSet.has(0)), true)\n   * assert.equal(pipe(set, HashSet.has(1)), true)\n   * assert.equal(pipe(set, HashSet.has(2)), true)\n   * assert.equal(pipe(set, HashSet.has(3)), false)\n   * ```\n   */\n  <A>(value: A): (self: HashSet<A>) => boolean\n\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-first` API\n   * import * as assert from \"node:assert/strict\"\n   * import { HashSet, pipe } from \"effect\"\n   *\n   * const set = HashSet.make(0, 1, 2)\n   *\n   * assert.equal(HashSet.has(set, 0), true)\n   * assert.equal(HashSet.has(set, 1), true)\n   * assert.equal(HashSet.has(set, 2), true)\n   * assert.equal(HashSet.has(set, 3), false)\n   * ```\n   */\n  <A>(self: HashSet<A>, value: A): boolean\n} = HS.has\n\n/**\n * Check if a predicate holds true for some `HashSet` element.\n *\n * Time complexity: **`O(n)`** where n is the number of elements in the set\n *\n * @memberof HashSet\n * @since 2.0.0\n * @category elements\n * @example\n *\n * ```ts\n * // Syntax\n * import { HashSet, pipe } from \"effect\"\n *\n * const set: HashSet.HashSet<number> = HashSet.make(0, 1, 2)\n *\n * // with `data-last`, a.k.a. `pipeable` API\n * pipe(\n *   set,\n *   HashSet.some((n) => n > 0)\n * ) // true\n *\n * // or piped with the pipe function\n * set.pipe(HashSet.some((n) => n > 0)) // true\n *\n * // or with `data-first` API\n * HashSet.some(set, (n) => n > 0) // true\n * ```\n *\n * @see Other `HashSet` elements are {@link module:HashSet.has} {@link module:HashSet.every} {@link module:HashSet.isSubset}\n */\nexport const some: {\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-last` a.k.a. `pipeable` API\n   * import * as assert from \"node:assert/strict\"\n   * import { HashSet, pipe } from \"effect\"\n   *\n   * const set = HashSet.make(0, 1, 2)\n   *\n   * assert.equal(\n   *   pipe(\n   *     set,\n   *     HashSet.some((n) => n > 0)\n   *   ),\n   *   true\n   * )\n   *\n   * assert.equal(\n   *   pipe(\n   *     set,\n   *     HashSet.some((n) => n > 2)\n   *   ),\n   *   false\n   * )\n   * ```\n   */\n  <A>(f: Predicate<A>): (self: HashSet<A>) => boolean\n\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-first` API\n   * import * as assert from \"node:assert/strict\"\n   * import { HashSet } from \"effect\"\n   *\n   * const set = HashSet.make(0, 1, 2)\n   *\n   * assert.equal(\n   *   HashSet.some(set, (n) => n > 0),\n   *   true\n   * )\n   *\n   * assert.equal(\n   *   HashSet.some(set, (n) => n > 2),\n   *   false\n   * )\n   * ```\n   */\n  <A>(self: HashSet<A>, f: Predicate<A>): boolean\n} = HS.some\n\n/**\n * Check if a predicate holds true for every `HashSet` element.\n *\n * Time complexity is **`O(n)`** as it needs to traverse the whole HashSet\n * collection\n *\n * @memberof HashSet\n * @since 2.0.0\n * @category elements\n * @example\n *\n * ```ts\n * // Syntax with Refinement\n * import { HashSet, pipe, Predicate } from \"effect\"\n *\n * const numberOrString = HashSet.make(1, \"1\", \"one\", \"uno\")\n *\n * // with `data-last`, a.k.a. `pipeable` API and `Refinement`\n * pipe(\n *   numberOrString, // HashSet.HashSet<number | string>\n *   HashSet.every(Predicate.isString)\n * ) // HashSet.HashSet<string>\n *\n * // or piped with the pipe function and  `Refinement`\n * numberOrString // HashSet.HashSet<number | string>\n *   .pipe(HashSet.every(Predicate.isString)) // HashSet.HashSet<string>\n *\n * // or with `data-first` API and `Refinement`\n * HashSet.every(\n *   numberOrString, // HashSet.HashSet<number | string>\n *   Predicate.isString\n * ) // HashSet.HashSet<string>\n * ```\n *\n * @example\n *\n * ```ts\n * // Syntax with Predicate\n * import { HashSet, pipe } from \"effect\"\n *\n * const set = HashSet.make(1, 2, 3)\n *\n * // with `data-last`, a.k.a. `pipeable` API\n * pipe(\n *   set,\n *   HashSet.every((n) => n >= 0)\n * ) // true\n *\n * // or piped with the pipe function\n * set.pipe(HashSet.every((n) => n >= 0)) // true\n *\n * // or with `data-first` API\n * HashSet.every(set, (n) => n >= 0) // true\n * ```\n *\n * @returns A boolean once it has evaluated that whole collection fulfill the\n *   Predicate function\n * @see Other `HashSet` elements are {@link module:HashSet.has} {@link module:HashSet.some} {@link module:HashSet.isSubset}\n */\nexport const every: {\n  /**\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { Effect, HashSet, pipe, Predicate } from \"effect\"\n   *\n   * const numberOrString: HashSet.HashSet<number | string> = HashSet.make(\n   *   1,\n   *   \"1\",\n   *   \"one\",\n   *   \"uno\"\n   * )\n   *\n   * assert.equal(\n   *   pipe(\n   *     numberOrString, // HashSet.HashSet<number | string>\n   *     HashSet.every(Predicate.isString)\n   *   ), // HashSet.HashSet<string>\n   *   false\n   * )\n   * ```\n   */\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): (self: HashSet<A>) => self is HashSet<B>\n\n  /**\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { HashSet, pipe } from \"effect\"\n   *\n   * const set = HashSet.make(0, 1, 2)\n   *\n   * assert.equal(\n   *   pipe(\n   *     set,\n   *     HashSet.every((n) => n >= 0)\n   *   ),\n   *   true\n   * )\n   * ```\n   */\n  <A>(predicate: Predicate<A>): (self: HashSet<A>) => boolean\n\n  /**\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { Effect, HashSet, pipe, Predicate } from \"effect\"\n   *\n   * const numberOrString: HashSet.HashSet<number | string> = HashSet.make(\n   *   1,\n   *   \"1\",\n   *   \"one\",\n   *   \"uno\"\n   * )\n   *\n   * assert.equal(\n   *   HashSet.every(\n   *     numberOrString, // HashSet.HashSet<number | string>\n   *     Predicate.isString\n   *   ), // HashSet.HashSet<string>\n   *   false\n   * )\n   * ```\n   */\n  <A, B extends A>(\n    self: HashSet<A>,\n    refinement: Refinement<A, B>\n  ): self is HashSet<B>\n\n  /**\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { HashSet } from \"effect\"\n   *\n   * const set = HashSet.make(0, 1, 2)\n   *\n   * assert.equal(\n   *   HashSet.every(set, (n) => n >= 0),\n   *   true\n   * )\n   * ```\n   */\n  <A>(self: HashSet<A>, predicate: Predicate<A>): boolean\n} = HS.every\n\n/**\n * Returns `true` if and only if every element in the this `HashSet` is an\n * element of the second set,\n *\n * **NOTE**: the hash and equal of both sets must be the same.\n *\n * Time complexity analysis is of **`O(n)`**\n *\n * @memberof HashSet\n * @since 2.0.0\n * @category elements\n * @example\n *\n * ```ts\n * // Syntax\n * import { HashSet, pipe } from \"effect\"\n *\n * const set1 = HashSet.make(0, 1)\n * const set2 = HashSet.make(1, 2)\n * const set3 = HashSet.make(0, 1, 2)\n *\n * // with `data-last`, a.k.a. `pipeable` API\n * pipe(set1, HashSet.isSubset(set2)) // false\n * pipe(set1, HashSet.isSubset(set3)) // true\n *\n * // or piped with the pipe function\n * set1.pipe(HashSet.isSubset(set2)) // false\n * set1.pipe(HashSet.isSubset(set3)) // true\n *\n * // or with `data-first` API\n * HashSet.isSubset(set1, set2) // false\n * HashSet.isSubset(set1, set3) // true)\n * ```\n *\n * @see Other `HashSet` elements are {@link module:HashSet.has} {@link module:HashSet.some} {@link module:HashSet.every}\n */\nexport const isSubset: {\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet, pipe } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * assert.equal(\n   *   pipe(\n   *     HashSet.make(0, 1), //\n   *     HashSet.isSubset(HashSet.make(1, 2))\n   *   ),\n   *   false\n   * )\n   *\n   * assert.equal(\n   *   pipe(\n   *     HashSet.make(0, 1), //\n   *     HashSet.isSubset(HashSet.make(0, 1, 2))\n   *   ),\n   *   true\n   * )\n   * ```\n   */\n  <A>(that: HashSet<A>): (self: HashSet<A>) => boolean\n\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * assert.equal(HashSet.isSubset(set1, set2), false)\n   *\n   * assert.equal(HashSet.isSubset(set1, set3), true)\n   * ```\n   */\n  <A>(self: HashSet<A>, that: HashSet<A>): boolean\n} = HS.isSubset\n\n/**\n * Returns an `IterableIterator` of the values in the `HashSet`.\n *\n * Time complexity: **`O(1)`**\n *\n * @memberof HashSet\n * @since 2.0.0\n * @category getters\n * @example\n *\n * ```ts\n * import { HashSet, pipe } from \"effect\"\n *\n * const numberIterable = pipe(\n *   HashSet.make(0, 1, 1, 2), // HashSet.HashSet<number>\n *   HashSet.values // takes an HashSet<A> and returns an IterableIterator<A>\n * )\n *\n * for (const number of numberIterable) {\n *   console.log(number) // it will logs: 0, 1, 2\n * }\n * ```\n *\n * @see Other `HashSet` getters are {@link module:HashSet.toValues} {@link module:HashSet.size}\n */\nexport const values: <A>(self: HashSet<A>) => IterableIterator<A> = HS.values\n\n/**\n * Returns an `Array` of the values within the `HashSet`.\n *\n * Time complexity: **`O(n)`** where n is the number of elements in the set\n *\n * @memberof HashSet\n * @since 3.13.0\n * @category getters\n * @example\n *\n * ```ts\n * import { HashSet, pipe } from \"effect\"\n * import { deepStrictEqual } from \"node:assert/strict\"\n *\n * deepStrictEqual(\n *   pipe(\n *     HashSet.make(0, 1, 1, 2), // HashSet<number>\n *     HashSet.toValues // takes an HashSet<A> and returns an Array<A>\n *   ),\n *   Array.of(0, 1, 2)\n * )\n * ```\n *\n * @see Other `HashSet` getters are {@link module:HashSet.values} {@link module:HashSet.size}\n */\nexport const toValues = <A>(self: HashSet<A>): Array<A> => Array.from(values(self))\n\n/**\n * Calculates the number of values in the `HashSet`.\n *\n * Time complexity: **`O(1)`**\n *\n * @memberof HashSet\n * @since 2.0.0\n * @category getters\n * @example\n *\n * ```ts\n * import { HashSet, pipe } from \"effect\"\n * import assert from \"node:assert/strict\"\n *\n * assert.deepStrictEqual(pipe(HashSet.empty(), HashSet.size), 0)\n *\n * assert.deepStrictEqual(\n *   pipe(HashSet.make(1, 2, 2, 3, 4, 3), HashSet.size),\n *   4\n * )\n * ```\n *\n * @see Other `HashSet` getters are {@link module:HashSet.values} {@link module:HashSet.toValues}\n */\nexport const size: <A>(self: HashSet<A>) => number = HS.size\n\n/**\n * Creates a new mutable version of the `HashSet`\n *\n * When a `HashSet` is mutable, operations like {@link add} and {@link remove}\n * modify the data structure in place instead of creating a new one, which is\n * more efficient when performing multiple operations.\n *\n * @memberof HashSet\n * @since 2.0.0\n * @example\n *\n * ```ts\n * import { HashSet } from \"effect\"\n * import assert from \"node:assert/strict\"\n *\n * const UPPER_BOUND = 10_000\n *\n * const immutableSet = HashSet.empty<number>().pipe(HashSet.add(0))\n *\n * // Create a mutable version of the immutableSet\n * const mutableSet = HashSet.beginMutation(immutableSet)\n *\n * for (let i = 1; i < UPPER_BOUND; i++) {\n *   // Operations now modify the set in place instead of creating new instances\n *   // This is more efficient when making multiple changes\n *   const pointerToMutableSet = HashSet.add(mutableSet, i)\n *\n *   // the two sets have the same identity, hence `add` is mutating mutableSet and not returning a new HashSet instance\n *   assert(Object.is(mutableSet, pointerToMutableSet))\n *   assert.equal(HashSet.has(mutableSet, i), true) // `i` is in the mutableSet\n *   assert.equal(HashSet.has(immutableSet, i), false) // `i` is not in the immutableSet\n * }\n *\n * const next = UPPER_BOUND + 1\n * // When done, mark the set as immutable again\n * HashSet.endMutation(mutableSet).pipe(\n *   HashSet.add(next) // since this returns a new HashSet, it will not be logged as part of the mutableSet\n * )\n * assert.equal(HashSet.has(mutableSet, next), false)\n *\n * console.log(HashSet.toValues(immutableSet)) // [0]\n * console.log(HashSet.toValues(mutableSet).sort((a, b) => a - b)) // [0, 1, 2, 3, ...rest]\n * ```\n *\n * @see Other `HashSet` mutations are {@link module:HashSet.add} {@link module:HashSet.remove} {@link module:HashSet.toggle} {@link module:HashSet.endMutation} {@link module:HashSet.mutate}\n */\nexport const beginMutation: <A>(self: HashSet<A>) => HashSet<A> = HS.beginMutation\n\n/**\n * Makes the `HashSet` immutable again.\n *\n * After calling `endMutation`, operations like {@link add} and {@link remove}\n * will create new instances of the `HashSet` instead of modifying the existing\n * one.\n *\n * @memberof HashSet\n * @since 2.0.0\n * @example\n *\n * ```ts\n * import { HashSet } from \"effect\"\n * import assert from \"node:assert/strict\"\n *\n * // Create a mutable set\n * const mutableSet = HashSet.beginMutation(HashSet.empty<number>())\n *\n * // Add some elements to the mutable set\n * HashSet.add(mutableSet, 1)\n * HashSet.add(mutableSet, 2)\n *\n * // Before endMutation, operations modify the set in place\n * const sameSet = HashSet.add(mutableSet, 3)\n * assert(Object.is(mutableSet, sameSet)) // true - same object reference\n * assert.deepStrictEqual(HashSet.toValues(mutableSet).sort(), [1, 2, 3])\n *\n * // Make the set immutable again\n * const immutableSet = HashSet.endMutation(mutableSet)\n *\n * // endMutation returns the same set instance, now made immutable\n * assert(Object.is(mutableSet, immutableSet)) // true - same object reference\n *\n * // After endMutation, operations create new instances\n * const newSet = HashSet.add(immutableSet, 4)\n * assert(!Object.is(immutableSet, newSet)) // false - different object references\n *\n * // The original set remains unchanged\n * assert.deepStrictEqual(HashSet.toValues(immutableSet).sort(), [1, 2, 3])\n *\n * // The new set contains the added element\n * assert.deepStrictEqual(HashSet.toValues(newSet).sort(), [1, 2, 3, 4])\n * ```\n *\n * @see Other `HashSet` mutations are {@link module:HashSet.add} {@link module:HashSet.remove} {@link module:HashSet.toggle} {@link module:HashSet.beginMutation} {@link module:HashSet.mutate}\n */\nexport const endMutation: <A>(self: HashSet<A>) => HashSet<A> = HS.endMutation\n\n/**\n * Mutates the `HashSet` within the context of the provided function.\n *\n * You can consider it a functional abstraction on top of the lower-level\n * mutation primitives of {@link module:HashSet.beginMutation} `->` `mutable\n * context` `->` {@link HashSet.endMutation}.\n *\n * @memberof HashSet\n * @since 2.0.0\n * @example\n *\n * ```ts\n * // Syntax\n * import { HashSet, pipe } from \"effect\"\n *\n * // with data-last, a.k.a. pipeable API\n * pipe(\n *   HashSet.make(1, 2, 3),\n *   HashSet.mutate((set) => {\n *     HashSet.add(set, 4)\n *     HashSet.remove(set, 1)\n *   })\n * )\n *\n * // or piped with the pipe function\n * HashSet.make(1, 2, 3).pipe(\n *   HashSet.mutate((set) => {\n *     HashSet.add(set, 4)\n *     HashSet.remove(set, 1)\n *   })\n * )\n *\n * // or with data-first API\n * HashSet.mutate(HashSet.make(1, 2, 3), (set) => {\n *   HashSet.add(set, 4)\n *   HashSet.remove(set, 1)\n * })\n * ```\n *\n * @see Other `HashSet` mutations are {@link module:HashSet.add} {@link module:HashSet.remove} {@link module:HashSet.toggle} {@link module:HashSet.beginMutation} {@link module:HashSet.endMutation}\n */\nexport const mutate: {\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-last` a.k.a. `pipeable` API\n   * import { HashSet, pipe } from \"effect\"\n   * import assert from \"node:assert/strict\"\n   *\n   * // Create a set with initial values\n   * const immutableSet = HashSet.make(1, 2, 3)\n   *\n   * // Use mutate to perform multiple operations efficiently\n   * const result = pipe(\n   *   immutableSet,\n   *   HashSet.mutate((set) => {\n   *     assert.equal(Object.is(immutableSet, set), false)\n   *\n   *     // The set is temporarily mutable inside this function\n   *     const mod1 = HashSet.add(set, 4)\n   *     const mod2 = HashSet.remove(set, 1)\n   *     assert.equal(Object.is(mod1, mod2), true) // they are the same object by reference\n   *   })\n   * )\n   *\n   * // The original set is unchanged\n   * assert.equal(Object.is(immutableSet, result), false)\n   * assert.deepStrictEqual(\n   *   HashSet.toValues(immutableSet).sort(),\n   *   [1, 2, 3]\n   * )\n   *\n   * // The result contains the mutations\n   * assert.deepStrictEqual(HashSet.toValues(result).sort(), [2, 3, 4])\n   * ```\n   */\n  <A>(f: (set: HashSet<A>) => void): (self: HashSet<A>) => HashSet<A>\n\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-first` API\n   * import { HashSet } from \"effect\"\n   * import assert from \"node:assert/strict\"\n   *\n   * // Create a set with initial values\n   * const immutableSet = HashSet.make(1, 2, 3)\n   *\n   * // Use mutate with data-first API\n   * const result = HashSet.mutate(immutableSet, (set) => {\n   *   // The set is temporarily mutable inside this function\n   *   HashSet.add(set, 4)\n   *   HashSet.remove(set, 1)\n   * })\n   *\n   * // The original set is unchanged\n   * assert.equal(Object.is(immutableSet, result), false)\n   * assert.deepStrictEqual(\n   *   HashSet.toValues(immutableSet).sort(),\n   *   [1, 2, 3]\n   * )\n   *\n   * // The result contains the mutations\n   * assert.deepStrictEqual(HashSet.toValues(result).sort(), [2, 3, 4])\n   * ```\n   */\n  <A>(self: HashSet<A>, f: (set: HashSet<A>) => void): HashSet<A>\n} = HS.mutate\n\n/**\n * Adds a value to the `HashSet`.\n *\n * Time complexity: **`O(1)`** average\n *\n * @remarks\n * Remember that a `HashSet` is a collection of unique values, so adding a value\n * that already exists in the `HashSet` will not add a duplicate.\n *\n * Remember that HashSet is an immutable data structure, so the `add` function,\n * like all other functions that modify the HashSet, will return a new HashSet\n * with the added value.\n * @memberof HashSet\n * @since 2.0.0\n * @example\n *\n * ```ts\n * // Syntax\n * import { HashSet, pipe } from \"effect\"\n *\n * // with data-last, a.k.a. pipeable API\n * pipe(HashSet.empty(), HashSet.add(0), HashSet.add(0))\n *\n * // or piped with the pipe function\n * HashSet.empty().pipe(HashSet.add(0))\n *\n * // or with data-first API\n * HashSet.add(HashSet.empty(), 0)\n * ```\n *\n * @see Other `HashSet` mutations are {@link module:HashSet.remove} {@link module:HashSet.toggle} {@link module:HashSet.beginMutation} {@link module:HashSet.endMutation} {@link module:HashSet.mutate}\n */\nexport const add: {\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-last` a.k.a. `pipeable` API\n   * import { HashSet, pipe } from \"effect\"\n   * import assert from \"node:assert/strict\"\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     HashSet.empty<number>(), // HashSet.HashSet<number>\n   *     HashSet.add(0),\n   *     HashSet.add(1),\n   *     HashSet.add(1),\n   *     HashSet.add(2),\n   *     HashSet.toValues\n   *   ),\n   *   Array.of(0, 1, 2)\n   * )\n   * ```\n   */\n  <A>(value: A): (self: HashSet<A>) => HashSet<A>\n\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-first` API\n   * import { HashSet, pipe } from \"effect\"\n   * import assert from \"node:assert/strict\"\n   *\n   * const empty = HashSet.empty<number>()\n   * const withZero = HashSet.add(empty, 0)\n   * const withOne = HashSet.add(withZero, 1)\n   * const withTwo = HashSet.add(withOne, 2)\n   * const withTwoTwo = HashSet.add(withTwo, 2)\n   *\n   * assert.deepStrictEqual(HashSet.toValues(withTwoTwo), Array.of(0, 1, 2))\n   * ```\n   */\n  <A>(self: HashSet<A>, value: A): HashSet<A>\n} = HS.add\n\n/**\n * Removes a value from the `HashSet`.\n *\n * Time complexity: **`O(1)`** average\n *\n * @memberof HashSet\n * @since 2.0.0\n * @example\n *\n * ```ts\n * // Syntax\n * import { HashSet, pipe } from \"effect\"\n *\n * // with `data-last`, a.k.a. `pipeable` API\n * pipe(HashSet.make(0, 1, 2), HashSet.remove(0))\n *\n * // or piped with the pipe function\n * HashSet.make(0, 1, 2).pipe(HashSet.remove(0))\n *\n * // or with `data-first` API\n * HashSet.remove(HashSet.make(0, 1, 2), 0)\n * ```\n *\n * @see Other `HashSet` mutations are {@link module:HashSet.add} {@link module:HashSet.toggle} {@link module:HashSet.beginMutation} {@link module:HashSet.endMutation} {@link module:HashSet.mutate}\n */\nexport const remove: {\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-last` a.k.a. `pipeable` API\n   * import { HashSet, pipe } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * const set = HashSet.make(0, 1, 2)\n   * const result = pipe(set, HashSet.remove(0))\n   *\n   * assert.equal(pipe(result, HashSet.has(0)), false) // it has correctly removed 0\n   * assert.equal(pipe(set, HashSet.has(0)), true) // it does not mutate the original set\n   * assert.equal(pipe(result, HashSet.has(1)), true)\n   * assert.equal(pipe(result, HashSet.has(2)), true)\n   * ```\n   */\n  <A>(value: A): (self: HashSet<A>) => HashSet<A>\n\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-first` API\n   * import { HashSet, pipe } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * const set = HashSet.make(0, 1, 2)\n   * const result = HashSet.remove(set, 0)\n   *\n   * assert.equal(HashSet.has(result, 0), false) // it has correctly removed 0\n   * assert.equal(HashSet.has(set, 0), true) // it does not mutate the original set\n   * assert.equal(HashSet.has(result, 1), true)\n   * assert.equal(HashSet.has(result, 2), true)\n   * ```\n   */\n  <A>(self: HashSet<A>, value: A): HashSet<A>\n} = HS.remove\n\n/**\n * Computes the set difference `(A - B)` between this `HashSet` and the\n * specified `Iterable<A>`.\n *\n * Time complexity: **`O(n)`** where n is the number of elements in the set\n *\n * **NOTE**: the hash and equal of the values in both the set and the iterable\n * must be the same; meaning we cannot compute a difference between a `HashSet\n * of bananas` and a `HashSet of elephants` as they are not the same type and\n * won't implement the Equal trait in the same way.\n *\n * @memberof HashSet\n * @since 2.0.0\n * @example\n *\n * ```ts\n * // Syntax\n * import { HashSet, pipe } from \"effect\"\n *\n * // with data-last, a.k.a. pipeable API\n * pipe(HashSet.make(1, 2, 3), HashSet.difference(HashSet.make(3, 4, 5)))\n *\n * // or piped with the pipe function\n * HashSet.make(1, 2, 3).pipe(HashSet.difference(HashSet.make(3, 4, 5)))\n *\n * // or with data-first API\n * HashSet.difference(HashSet.make(1, 2, 3), HashSet.make(3, 4, 5))\n * ```\n *\n * @see Other `HashSet` operations are {@link module:HashSet.intersection} {@link module:HashSet.union}\n */\nexport const difference: {\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-last` a.k.a. `pipeable` API\n   * import { HashSet, pipe } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * // Create two sets with some overlapping elements\n   * const thisSet = HashSet.make(1, 2, 3)\n   * const thatIterable = HashSet.make(3, 4, 5)\n   *\n   * // Compute the difference (elements in thisSet that are not in thatIterable)\n   * const result = pipe(thisSet, HashSet.difference(thatIterable))\n   *\n   * // The result contains only elements from thisSet that are not in thatIterable\n   * assert.deepStrictEqual(HashSet.toValues(result).sort(), [1, 2])\n   *\n   * // The original sets are unchanged\n   * assert.deepStrictEqual(HashSet.toValues(thisSet).sort(), [1, 2, 3])\n   * assert.deepStrictEqual(\n   *   HashSet.toValues(thatIterable).sort(),\n   *   [3, 4, 5]\n   * )\n   *\n   * // You can also use arrays or other iterables\n   * const diffWithArray = pipe(thisSet, HashSet.difference([3, 4]))\n   * assert.deepStrictEqual(HashSet.toValues(diffWithArray).sort(), [1, 2])\n   * ```\n   */\n  <A>(that: Iterable<A>): (self: HashSet<A>) => HashSet<A>\n\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-first` API\n   * import { HashSet } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * // Create two sets with some overlapping elements\n   * const thisSet = HashSet.make(1, 2, 3)\n   * const thatIterable = HashSet.make(3, 4, 5)\n   *\n   * // Compute the difference using data-first API\n   * const result = HashSet.difference(thisSet, thatIterable)\n   *\n   * // The result contains only elements from thisSet that are not in thatIterable\n   * assert.deepStrictEqual(HashSet.toValues(result).sort(), [1, 2])\n   *\n   * // The original sets are unchanged\n   * assert.deepStrictEqual(HashSet.toValues(thisSet).sort(), [1, 2, 3])\n   * assert.deepStrictEqual(\n   *   HashSet.toValues(thatIterable).sort(),\n   *   [3, 4, 5]\n   * )\n   *\n   * // You can also compute the difference in the other direction\n   * const reverseResult = HashSet.difference(thatIterable, thisSet)\n   * assert.deepStrictEqual(HashSet.toValues(reverseResult).sort(), [4, 5])\n   * ```\n   */\n  <A>(self: HashSet<A>, that: Iterable<A>): HashSet<A>\n} = HS.difference\n\n/**\n * Returns a `HashSet` of values which are present in both this set and that\n * `Iterable<A>`. Computes set intersection (A ∩ B)\n *\n * Time complexity: **`O(n)`** where n is the number of elements in the smaller\n * set\n *\n * **NOTE**: the hash and equal of the values in both the set and the iterable\n * must be the same.\n *\n * @memberof HashSet\n * @since 2.0.0\n * @example\n *\n * ```ts\n * // Syntax\n * import { HashSet, pipe } from \"effect\"\n *\n * // with data-last, a.k.a. pipeable API\n * pipe(HashSet.make(1, 2, 3), HashSet.intersection(HashSet.make(2, 3, 4)))\n *\n * // or piped with the pipe function\n * HashSet.make(1, 2, 3).pipe(HashSet.intersection(HashSet.make(2, 3, 4)))\n *\n * // or with data-first API\n * HashSet.intersection(HashSet.make(1, 2, 3), HashSet.make(2, 3, 4))\n * ```\n *\n * @see Other `HashSet` operations are {@link module:HashSet.difference} {@link module:HashSet.union}\n */\nexport const intersection: {\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-last` a.k.a. `pipeable` API\n   * import { HashSet, pipe } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * // Create two sets with some overlapping elements\n   * const set1 = HashSet.make(1, 2, 3)\n   * const set2 = HashSet.make(2, 3, 4)\n   *\n   * // Compute the intersection (elements that are in both sets)\n   * const result = pipe(set1, HashSet.intersection(set2))\n   *\n   * // The result contains only elements that are in both sets\n   * assert.deepStrictEqual(HashSet.toValues(result).sort(), [2, 3])\n   *\n   * // The original sets are unchanged\n   * assert.deepStrictEqual(HashSet.toValues(set1).sort(), [1, 2, 3])\n   * assert.deepStrictEqual(HashSet.toValues(set2).sort(), [2, 3, 4])\n   *\n   * // You can also use arrays or other iterables\n   * const intersectWithArray = pipe(set1, HashSet.intersection([2, 3, 5]))\n   * assert.deepStrictEqual(\n   *   HashSet.toValues(intersectWithArray).sort(),\n   *   [2, 3]\n   * )\n   * ```\n   */\n  <A>(that: Iterable<A>): (self: HashSet<A>) => HashSet<A>\n\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-first` API\n   * import { HashSet } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * // Create two sets with some overlapping elements\n   * const set1 = HashSet.make(1, 2, 3)\n   * const set2 = HashSet.make(2, 3, 4)\n   *\n   * // Compute the intersection using data-first API\n   * const result = HashSet.intersection(set1, set2)\n   *\n   * // The result contains only elements that are in both sets\n   * assert.deepStrictEqual(HashSet.toValues(result).sort(), [2, 3])\n   *\n   * // The original sets are unchanged\n   * assert.deepStrictEqual(HashSet.toValues(set1).sort(), [1, 2, 3])\n   * assert.deepStrictEqual(HashSet.toValues(set2).sort(), [2, 3, 4])\n   *\n   * // You can also use arrays or other iterables\n   * const intersectWithArray = HashSet.intersection(set1, [2, 3, 5])\n   * assert.deepStrictEqual(\n   *   HashSet.toValues(intersectWithArray).sort(),\n   *   [2, 3]\n   * )\n   * ```\n   */\n  <A>(self: HashSet<A>, that: Iterable<A>): HashSet<A>\n} = HS.intersection\n\n/**\n * Computes the set union `( self ∪ that )` between this `HashSet` and the\n * specified `Iterable<A>`.\n *\n * Time complexity: **`O(n)`** where n is the number of elements in the set\n *\n * **NOTE**: the hash and equal of the values in both the set and the iterable\n * must be the same.\n *\n * @memberof HashSet\n * @since 2.0.0\n * @example\n *\n * ```ts\n * // Syntax\n * import { HashSet, pipe } from \"effect\"\n *\n * // with data-last, a.k.a. pipeable API\n * pipe(HashSet.make(1, 2, 3), HashSet.union(HashSet.make(3, 4, 5)))\n *\n * // or piped with the pipe function\n * HashSet.make(1, 2, 3).pipe(HashSet.union(HashSet.make(3, 4, 5)))\n *\n * // or with data-first API\n * HashSet.union(HashSet.make(1, 2, 3), HashSet.make(3, 4, 5))\n * ```\n *\n * @see Other `HashSet` operations are {@link module:HashSet.difference} {@link module:HashSet.intersection}\n */\nexport const union: {\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-last` a.k.a. `pipeable` API\n   * import { HashSet, pipe } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * // Create two sets with some overlapping elements\n   * const selfSet = HashSet.make(1, 2, 3)\n   * const thatIterable = HashSet.make(3, 4, 5)\n   *\n   * // Compute the union (all elements from both sets)\n   * const result = pipe(selfSet, HashSet.union(thatIterable))\n   *\n   * // The result contains all elements from both sets (without duplicates)\n   * assert.deepStrictEqual(\n   *   HashSet.toValues(result).sort(),\n   *   [1, 2, 3, 4, 5]\n   * )\n   *\n   * // The original sets are unchanged\n   * assert.deepStrictEqual(HashSet.toValues(selfSet).sort(), [1, 2, 3])\n   * assert.deepStrictEqual(\n   *   HashSet.toValues(thatIterable).sort(),\n   *   [3, 4, 5]\n   * )\n   *\n   * // You can also use arrays or other iterables\n   * const unionWithArray = pipe(selfSet, HashSet.union([4, 5, 6]))\n   * assert.deepStrictEqual(\n   *   HashSet.toValues(unionWithArray).sort(),\n   *   [1, 2, 3, 4, 5, 6]\n   * )\n   * ```\n   */\n  <A>(that: Iterable<A>): (self: HashSet<A>) => HashSet<A>\n\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-first` API\n   * import { HashSet } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * // Create two sets with some overlapping elements\n   * const selfSet = HashSet.make(1, 2, 3)\n   * const thatIterable = HashSet.make(3, 4, 5)\n   *\n   * // Compute the union using data-first API\n   * const result = HashSet.union(selfSet, thatIterable)\n   *\n   * // The result contains all elements from both sets (without duplicates)\n   * assert.deepStrictEqual(\n   *   HashSet.toValues(result).sort(),\n   *   [1, 2, 3, 4, 5]\n   * )\n   *\n   * // The original sets are unchanged\n   * assert.deepStrictEqual(HashSet.toValues(selfSet).sort(), [1, 2, 3])\n   * assert.deepStrictEqual(\n   *   HashSet.toValues(thatIterable).sort(),\n   *   [3, 4, 5]\n   * )\n   *\n   * // You can also use arrays or other iterables\n   * const unionWithArray = HashSet.union(selfSet, [4, 5, 6])\n   * assert.deepStrictEqual(\n   *   HashSet.toValues(unionWithArray).sort(),\n   *   [1, 2, 3, 4, 5, 6]\n   * )\n   * ```\n   */\n  <A>(self: HashSet<A>, that: Iterable<A>): HashSet<A>\n} = HS.union\n\n/**\n * Checks if a value is present in the `HashSet`. If it is present, the value\n * will be removed from the `HashSet`, otherwise the value will be added to the\n * `HashSet`.\n *\n * Time complexity: **`O(1)`** average\n *\n * @memberof HashSet\n * @since 2.0.0\n * @example\n *\n * ```ts\n * // Syntax\n * import { HashSet, pipe } from \"effect\"\n *\n * // with `data-last`, a.k.a. `pipeable` API\n * pipe(HashSet.make(0, 1, 2), HashSet.toggle(0))\n *\n * // or piped with the pipe function\n * HashSet.make(0, 1, 2).pipe(HashSet.toggle(0))\n *\n * // or with `data-first` API\n * HashSet.toggle(HashSet.make(0, 1, 2), 0)\n * ```\n *\n * @returns A new `HashSet` where the toggled value is being either added or\n *   removed based on the initial `HashSet` state.\n * @see Other `HashSet` mutations are {@link module:HashSet.add} {@link module:HashSet.remove} {@link module:HashSet.beginMutation} {@link module:HashSet.endMutation} {@link module:HashSet.mutate}\n */\nexport const toggle: {\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-last` a.k.a. `pipeable` API\n   * import { HashSet, pipe } from \"effect\"\n   * import assert from \"node:assert/strict\"\n   *\n   * // arrange\n   * let set = HashSet.make(0, 1, 2)\n   *\n   * // assert 1: 0 is in the set\n   * assert.equal(pipe(set, HashSet.has(0)), true)\n   *\n   * // act 2: toggle 0 once on the set\n   * set = pipe(set, HashSet.toggle(0))\n   *\n   * // assert 2: 0 is not in the set any longer\n   * assert.equal(pipe(set, HashSet.has(0)), false)\n   *\n   * // act 3: toggle 0 once again on the set\n   * set = pipe(set, HashSet.toggle(0))\n   *\n   * // assert 3: 0 in now back in the set\n   * assert.equal(pipe(set, HashSet.has(0)), true)\n   * ```\n   */\n  <A>(value: A): (self: HashSet<A>) => HashSet<A>\n\n  /**\n   * @example\n   *\n   * ```ts\n   * // `data-first` API\n   * import { HashSet, pipe } from \"effect\"\n   * import assert from \"node:assert/strict\"\n   *\n   * // arrange\n   * let set = HashSet.make(0, 1, 2)\n   *\n   * // assert 1: 0 is in the set\n   * assert.equal(HashSet.has(set, 0), true)\n   *\n   * // act 2: toggle 0 once on the set\n   * set = HashSet.toggle(set, 0)\n   *\n   * // assert 2: 0 is not in the set any longer\n   * assert.equal(HashSet.has(set, 0), false)\n   *\n   * // act 3: toggle 0 once again on the set\n   * set = HashSet.toggle(set, 0)\n   *\n   * // assert 3: 0 in now back in the set\n   * assert.equal(HashSet.has(set, 0), true)\n   * ```\n   */\n  <A>(self: HashSet<A>, value: A): HashSet<A>\n} = HS.toggle\n\n/**\n * Maps over the values of the `HashSet` using the specified function.\n *\n * The time complexity is of **`O(n)`**.\n *\n * @memberof HashSet\n * @since 2.0.0\n * @category mapping\n * @example\n *\n * ```ts\n * // Syntax\n * import { HashSet, pipe } from \"effect\"\n *\n * // with `data-last`, a.k.a. `pipeable` API\n * pipe(\n *   HashSet.make(0, 1, 2), // HashSet.HashSet<number>\n *   HashSet.map(String) // HashSet.HashSet<string>\n * )\n *\n * // or piped with the pipe method\n * HashSet.make(0, 1, 2).pipe(HashSet.map(String))\n *\n * // or with `data-first` API\n * HashSet.map(HashSet.make(0, 1, 2), String)\n * ```\n */\nexport const map: {\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet, pipe } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     HashSet.make(0, 1, 2), //    HashSet.HashSet<number>\n   *     HashSet.map((n) => String(n + 1)) // HashSet.HashSet<String>\n   *   ),\n   *   HashSet.make(\"1\", \"2\", \"3\")\n   * )\n   * ```\n   */\n  <A, B>(f: (a: A) => B): (self: HashSet<A>) => HashSet<B>\n\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet, pipe } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * assert.deepStrictEqual(\n   *   HashSet.map(\n   *     HashSet.make(0, 1, 2), //    HashSet.HashSet<number>\n   *     (n) => String(n + 1)\n   *   ), // HashSet.HashSet<String>\n   *   HashSet.make(\"1\", \"2\", \"3\")\n   * )\n   * ```\n   */\n  <A, B>(self: HashSet<A>, f: (a: A) => B): HashSet<B>\n} = HS.map\n\n/**\n * Chains over the values of the `HashSet` using the specified function.\n *\n * The time complexity is of **`O(n)`**.\n *\n * @memberof HashSet\n * @since 2.0.0\n * @category sequencing\n * @example\n *\n * ```ts\n * // Syntax\n * import { HashSet, pipe } from \"effect\"\n *\n * // with `data-last`, a.k.a. `pipeable` API\n * pipe(\n *   HashSet.make(0, 1, 2), // HashSet.HashSet<number>\n *   HashSet.flatMap((n) => Array.of(String(n))) // HashSet.HashSet<string>\n * )\n *\n * // or piped with the pipe method\n * HashSet.make(0, 1, 2) // HashSet.HashSet<number>\n *   .pipe(\n *     HashSet.flatMap((n) => Array.of(String(n))) // HashSet.HashSet<string>\n *   )\n *\n * // or with `data-first` API\n * HashSet.flatMap(HashSet.make(0, 1, 2), (n) => Array.of(String(n)))\n * ```\n */\nexport const flatMap: {\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet, pipe, List } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     HashSet.make(0, 1, 2),\n   *     HashSet.flatMap((n) => List.of(String(n * n))) // needs to return an Iterable\n   *   ),\n   *   HashSet.make(\"0\", \"1\", \"4\")\n   * )\n   * ```\n   */\n  <A, B>(f: (a: A) => Iterable<B>): (self: HashSet<A>) => HashSet<B>\n\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet, pipe, List } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * assert.deepStrictEqual(\n   *   HashSet.flatMap(HashSet.make(0, 1, 2), (n) =>\n   *     List.of(String(n * n * n))\n   *   ), // needs to return an Iterable\n   *   HashSet.make(\"0\", \"1\", \"8\")\n   * )\n   * ```\n   */\n  <A, B>(self: HashSet<A>, f: (a: A) => Iterable<B>): HashSet<B>\n} = HS.flatMap\n\n/**\n * Applies the specified function to the values of the `HashSet`.\n *\n * The time complexity is of **`O(n)`**.\n *\n * @memberof HashSet\n * @since 2.0.0\n * @category traversing\n * @example\n *\n * ```ts\n * // Syntax\n * import { HashSet, pipe } from \"effect\"\n *\n * // with `data-last`, a.k.a. `pipeable` API\n * pipe(HashSet.make(0, 1, 2), HashSet.forEach(console.log)) // logs: 0 1 2\n *\n * // or piped with the pipe method\n * HashSet.make(0, 1, 2).pipe(HashSet.forEach(console.log)) // logs: 0 1 2\n *\n * // or with `data-first` API\n * HashSet.forEach(HashSet.make(0, 1, 2), console.log) // logs: 0 1 2\n * ```\n */\nexport const forEach: {\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet, pipe } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * const result: Array<number> = []\n   *\n   * pipe(\n   *   HashSet.make(0, 1, 2),\n   *   HashSet.forEach((n): void => {\n   *     result.push(n)\n   *   })\n   * )\n   *\n   * assert.deepStrictEqual(result, [0, 1, 2])\n   * ```\n   */\n  <A>(f: (value: A) => void): (self: HashSet<A>) => void\n\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet, pipe } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * const result: Array<number> = []\n   *\n   * HashSet.forEach(HashSet.make(0, 1, 2), (n): void => {\n   *   result.push(n)\n   * })\n   *\n   * assert.deepStrictEqual(result, [0, 1, 2])\n   * ```\n   */\n  <A>(self: HashSet<A>, f: (value: A) => void): void\n} = HS.forEach\n\n/**\n * Reduces the specified state over the values of the `HashSet`.\n *\n * The time complexity is of **`O(n)`**.\n *\n * @memberof HashSet\n * @since 2.0.0\n * @category folding\n * @example\n *\n * ```ts\n * // Syntax\n * import { HashSet, pipe } from \"effect\"\n *\n * const sum = (a: number, b: number): number => a + b\n *\n * // with `data-last`, a.k.a. `pipeable` API\n * pipe(HashSet.make(0, 1, 2), HashSet.reduce(0, sum))\n *\n * // or with the pipe method\n * HashSet.make(0, 1, 2).pipe(HashSet.reduce(0, sum))\n *\n * // or with `data-first` API\n * HashSet.reduce(HashSet.make(0, 1, 2), 0, sum)\n * ```\n */\nexport const reduce: {\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet, pipe } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * assert.equal(\n   *   pipe(\n   *     HashSet.make(0, 1, 2),\n   *     HashSet.reduce(10, (accumulator, value) => accumulator + value)\n   *   ),\n   *   13\n   * )\n   * ```\n   */\n  <A, Z>(zero: Z, f: (accumulator: Z, value: A) => Z): (self: HashSet<A>) => Z\n\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * assert.equal(\n   *   HashSet.reduce(\n   *     HashSet.make(0, 1, 2),\n   *     -3,\n   *     (accumulator, value) => accumulator + value\n   *   ),\n   *   0\n   * )\n   * ```\n   */\n  <A, Z>(self: HashSet<A>, zero: Z, f: (accumulator: Z, value: A) => Z): Z\n} = HS.reduce\n\n/**\n * Filters values out of a `HashSet` using the specified predicate.\n *\n * The time complexity is of **`O(n)`**.\n *\n * @memberof HashSet\n * @since 2.0.0\n * @category filtering\n * @example\n *\n * ```ts\n * // Syntax with  Predicate\n * import { HashSet, type Predicate, pipe } from \"effect\"\n *\n * const filterPositiveNumbers: Predicate.Predicate<number> = (n) => n > 0\n *\n * // with `data-last`, a.k.a. `pipeable` API\n * pipe(\n *   HashSet.make(-2, -1, 0, 1, 2),\n *   HashSet.filter(filterPositiveNumbers)\n * )\n *\n * // or with the pipe method\n * HashSet.make(-2, -1, 0, 1, 2).pipe(HashSet.filter(filterPositiveNumbers))\n *\n * // or with `data-first` API\n * HashSet.filter(HashSet.make(-2, -1, 0, 1, 2), filterPositiveNumbers)\n * ```\n *\n * @example\n *\n * ```ts\n * /// Syntax with Refinement\n * import { HashSet, pipe } from \"effect\"\n *\n * const stringRefinement = (value: unknown): value is string =>\n *   typeof value === \"string\"\n *\n * // with `data-last`, a.k.a. `pipeable` API\n * pipe(\n *   HashSet.make(1, \"unos\", 2, \"two\", 3, \"trois\", 4, \"vier\"), // // HashSet.HashSet<number | string>\n *   HashSet.filter(stringRefinement)\n * ) // HashSet.HashSet<string>\n *\n * // or with the pipe method\n * HashSet.make(1, \"unos\", 2, \"two\", 3, \"trois\", 4, \"vier\") // HashSet.HashSet<number | string>\n *   .pipe(HashSet.filter(stringRefinement)) // HashSet.HashSet<string>\n *\n * // or with `data-first` API\n * HashSet.filter(\n *   HashSet.make(1, \"unos\", 2, \"two\", 3, \"trois\", 4, \"vier\"), // HashSet.HashSet<number | string>\n *   stringRefinement\n * ) // HashSet.HashSet<string>\n * ```\n */\nexport const filter: {\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet, pipe, Predicate } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * const numbersAndStringsHashSet: HashSet.HashSet<number | string> =\n   *   HashSet.make(1, \"unos\", 2, \"two\", 3, \"trois\", 4, \"vier\")\n   *\n   * const stringRefinement: Predicate.Refinement<\n   *   string | number,\n   *   string\n   * > = (value) => typeof value === \"string\"\n   *\n   * const stringHashSet: HashSet.HashSet<string> = pipe(\n   *   numbersAndStringsHashSet,\n   *   HashSet.filter(stringRefinement)\n   * )\n   *\n   * assert.equal(\n   *   pipe(stringHashSet, HashSet.every(Predicate.isString)),\n   *   true\n   * )\n   * ```\n   */\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): (self: HashSet<A>) => HashSet<B>\n\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet, pipe, type Predicate } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * const filterPositiveNumbers: Predicate.Predicate<number> = (n) => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     HashSet.make(-2, -1, 0, 1, 2),\n   *     HashSet.filter(filterPositiveNumbers)\n   *   ),\n   *   HashSet.make(1, 2)\n   * )\n   * ```\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: HashSet<A>) => HashSet<A>\n\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet, Predicate } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * const numbersAndStringsHashSet: HashSet.HashSet<number | string> =\n   *   HashSet.make(1, \"unos\", 2, \"two\", 3, \"trois\", 4, \"vier\")\n   *\n   * const stringRefinement: Predicate.Refinement<\n   *   string | number,\n   *   string\n   * > = (value) => typeof value === \"string\"\n   *\n   * const stringHashSet: HashSet.HashSet<string> = HashSet.filter(\n   *   numbersAndStringsHashSet,\n   *   stringRefinement\n   * )\n   *\n   * assert.equal(HashSet.every(stringHashSet, Predicate.isString), true)\n   * ```\n   */\n  <A, B extends A>(\n    self: HashSet<A>,\n    refinement: Refinement<A, B>\n  ): HashSet<B>\n\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet, pipe, type Predicate } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * const filterPositiveNumbers: Predicate.Predicate<number> = (n) => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   HashSet.filter(HashSet.make(-2, -1, 0, 1, 2), filterPositiveNumbers),\n   *   HashSet.make(1, 2)\n   * )\n   * ```\n   */\n  <A>(self: HashSet<A>, predicate: Predicate<A>): HashSet<A>\n} = HS.filter\n\n/**\n * Partition the values of a `HashSet` using the specified predicate.\n *\n * If a value matches the predicate, it will be placed into the `HashSet` on the\n * right side of the resulting `Tuple`, otherwise the value will be placed into\n * the left side.\n *\n * Time complexity is of **`O(n)`**.\n *\n * @memberof HashSet\n * @since 2.0.0\n * @category partitioning\n * @example\n *\n * ```ts\n * // Syntax with Predicate\n * import { HashSet, pipe, Predicate } from \"effect\"\n *\n * // with `data-last`, a.k.a. `pipeable` API\n * pipe(\n *   HashSet.make(0, 1, 2, 3, 4, 5),\n *   HashSet.partition((n) => n % 2 === 0)\n * )\n *\n * // or with the pipe method\n * HashSet.make(0, 1, 2, 3, 4, 5).pipe(\n *   HashSet.partition((n) => n % 2 === 0)\n * )\n *\n * // or with `data-first` API\n * HashSet.partition(HashSet.make(0, 1, 2, 3, 4, 5), (n) => n % 2 === 0)\n * ```\n *\n * @example\n *\n * ```ts\n * // Syntax with Refinement\n * import { HashSet, pipe, Predicate } from \"effect\"\n *\n * const stringRefinement: Predicate.Refinement<string | number, string> = (\n *   value\n * ) => typeof value === \"string\"\n *\n * // with `data-last`, a.k.a. `pipeable` API\n * pipe(\n *   HashSet.make(1, \"unos\", 2, \"two\", 3, \"trois\", 4, \"vier\"),\n *   HashSet.partition(stringRefinement)\n * )\n *\n * // or with the pipe method\n * HashSet.make(1, \"unos\", 2, \"two\", 3, \"trois\", 4, \"vier\").pipe(\n *   HashSet.partition(stringRefinement)\n * )\n *\n * // or with `data-first` API\n * HashSet.partition(\n *   HashSet.make(1, \"unos\", 2, \"two\", 3, \"trois\", 4, \"vier\"),\n *   stringRefinement\n * )\n * ```\n */\nexport const partition: {\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet, pipe, Predicate } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * const numbersAndStringsHashSet: HashSet.HashSet<number | string> =\n   *   HashSet.make(1, \"unos\", 2, \"two\", 3, \"trois\", 4, \"vier\")\n   *\n   * const stringRefinement: Predicate.Refinement<\n   *   string | number,\n   *   string\n   * > = (value) => typeof value === \"string\"\n   *\n   * const [\n   *   excluded, // HashSet.HashSet<number>\n   *   satisfying // HashSet.HashSet<string>\n   * ] = pipe(numbersAndStringsHashSet, HashSet.partition(stringRefinement))\n   *\n   * assert.equal(pipe(satisfying, HashSet.every(Predicate.isString)), true)\n   * assert.equal(pipe(excluded, HashSet.every(Predicate.isNumber)), true)\n   *\n   * assert.deepStrictEqual(excluded, HashSet.make(1, 2, 3, 4))\n   * assert.deepStrictEqual(\n   *   satisfying,\n   *   HashSet.make(\"unos\", \"two\", \"trois\", \"vier\")\n   * )\n   * ```\n   */\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): (\n    self: HashSet<A>\n  ) => [excluded: HashSet<Exclude<A, B>>, satisfying: HashSet<B>]\n\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet, pipe } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * const [excluded, satisfying] = pipe(\n   *   HashSet.make(0, 1, 2, 3, 4, 5),\n   *   HashSet.partition((n) => n % 2 === 0)\n   * )\n   *\n   * assert.deepStrictEqual(excluded, HashSet.make(1, 3, 5))\n   * assert.deepStrictEqual(satisfying, HashSet.make(0, 2, 4))\n   * ```\n   */\n  <A>(\n    predicate: Predicate<NoInfer<A>>\n  ): (self: HashSet<A>) => [excluded: HashSet<A>, satisfying: HashSet<A>]\n\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet, pipe, Predicate } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * const numbersAndStringsHashSet: HashSet.HashSet<number | string> =\n   *   HashSet.make(1, \"unos\", 2, \"two\", 3, \"trois\", 4, \"vier\")\n   *\n   * const stringRefinement: Predicate.Refinement<\n   *   string | number,\n   *   string\n   * > = (value) => typeof value === \"string\"\n   *\n   * const [\n   *   excluded, // HashSet.HashSet<number>\n   *   satisfying // HashSet.HashSet<string>\n   * ] = HashSet.partition(numbersAndStringsHashSet, stringRefinement)\n   *\n   * assert.equal(HashSet.every(satisfying, Predicate.isString), true)\n   * assert.equal(HashSet.every(excluded, Predicate.isNumber), true)\n   *\n   * assert.deepStrictEqual(excluded, HashSet.make(1, 2, 3, 4))\n   * assert.deepStrictEqual(\n   *   satisfying,\n   *   HashSet.make(\"unos\", \"two\", \"trois\", \"vier\")\n   * )\n   * ```\n   */\n  <A, B extends A>(\n    self: HashSet<A>,\n    refinement: Refinement<A, B>\n  ): [excluded: HashSet<Exclude<A, B>>, satisfying: HashSet<B>]\n\n  /**\n   * @example\n   *\n   * ```ts\n   * import { HashSet } from \"effect\"\n   * import * as assert from \"node:assert/strict\"\n   *\n   * const [excluded, satisfying] = HashSet.partition(\n   *   HashSet.make(0, 1, 2, 3, 4, 5),\n   *   (n) => n % 2 === 0\n   * )\n   *\n   * assert.deepStrictEqual(excluded, HashSet.make(1, 3, 5))\n   * assert.deepStrictEqual(satisfying, HashSet.make(0, 2, 4))\n   * ```\n   */\n  <A>(\n    self: HashSet<A>,\n    predicate: Predicate<A>\n  ): [excluded: HashSet<A>, satisfying: HashSet<A>]\n} = HS.partition\n", "import * as Equal from \"../Equal.js\"\nimport { dual } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport type { HashMap } from \"../HashMap.js\"\nimport type * as HS from \"../HashSet.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport type { Predicate, Refinement } from \"../Predicate.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type { NoInfer } from \"../Types.js\"\nimport * as HM from \"./hashMap.js\"\n\nconst HashSetSymbolKey = \"effect/HashSet\"\n\n/** @internal */\nexport const HashSetTypeId: HS.TypeId = Symbol.for(HashSetSymbolKey) as HS.TypeId\n\n/** @internal */\nexport interface HashSetImpl<out A> extends HS.HashSet<A> {\n  readonly _keyMap: HashMap<A, unknown>\n}\n\nconst HashSetProto: Omit<HashSetImpl<unknown>, \"_keyMap\"> = {\n  [HashSetTypeId]: HashSetTypeId,\n  [Symbol.iterator]<A>(this: HashSetImpl<A>): Iterator<A> {\n    return HM.keys(this._keyMap)\n  },\n  [Hash.symbol]<A>(this: HashSetImpl<A>): number {\n    return Hash.cached(\n      this,\n      Hash.combine(Hash.hash(this._keyMap))(Hash.hash(HashSetSymbolKey))\n    )\n  },\n  [Equal.symbol]<A>(this: HashSetImpl<A>, that: unknown): boolean {\n    if (isHashSet(that)) {\n      return (\n        HM.size(this._keyMap) === HM.size((that as HashSetImpl<A>)._keyMap) &&\n        Equal.equals(this._keyMap, (that as HashSetImpl<A>)._keyMap)\n      )\n    }\n    return false\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"HashSet\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const makeImpl = <A>(keyMap: HashMap<A, unknown>): HashSetImpl<A> => {\n  const set = Object.create(HashSetProto)\n  set._keyMap = keyMap\n  return set\n}\n\n/** @internal */\nexport const isHashSet: {\n  <A>(u: Iterable<A>): u is HS.HashSet<A>\n  (u: unknown): u is HS.HashSet<unknown>\n} = (u: unknown): u is HS.HashSet<unknown> => hasProperty(u, HashSetTypeId)\n\nconst _empty = makeImpl<never>(HM.empty())\n\n/** @internal */\nexport const empty = <A = never>(): HS.HashSet<A> => _empty\n\n/** @internal */\nexport const fromIterable = <A>(elements: Iterable<A>): HS.HashSet<A> => {\n  const set = beginMutation(empty<A>())\n  for (const value of elements) {\n    add(set, value)\n  }\n  return endMutation(set)\n}\n\n/** @internal */\nexport const make = <As extends ReadonlyArray<any>>(...elements: As): HS.HashSet<As[number]> => {\n  const set = beginMutation(empty<As[number]>())\n  for (const value of elements) {\n    add(set, value)\n  }\n  return endMutation(set)\n}\n\n/** @internal */\nexport const has = dual<\n  <A>(value: A) => (self: HS.HashSet<A>) => boolean,\n  <A>(self: HS.HashSet<A>, value: A) => boolean\n>(2, <A>(self: HS.HashSet<A>, value: A) => HM.has((self as HashSetImpl<A>)._keyMap, value))\n\n/** @internal */\nexport const some = dual<\n  <A>(f: Predicate<A>) => (self: HS.HashSet<A>) => boolean,\n  <A>(self: HS.HashSet<A>, f: Predicate<A>) => boolean\n>(2, (self, f) => {\n  let found = false\n  for (const value of self) {\n    found = f(value)\n    if (found) {\n      break\n    }\n  }\n  return found\n})\n\n/** @internal */\nexport const every: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: HS.HashSet<A>) => self is HS.HashSet<B>\n  <A>(predicate: Predicate<A>): (self: HS.HashSet<A>) => boolean\n  <A, B extends A>(self: HS.HashSet<A>, refinement: Refinement<A, B>): self is HS.HashSet<B>\n  <A>(self: HS.HashSet<A>, predicate: Predicate<A>): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: HS.HashSet<A>, refinement: Refinement<A, B>): self is HS.HashSet<B> =>\n    !some(self, (a) => !refinement(a))\n)\n\n/** @internal */\nexport const isSubset = dual<\n  <A>(that: HS.HashSet<A>) => (self: HS.HashSet<A>) => boolean,\n  <A>(self: HS.HashSet<A>, that: HS.HashSet<A>) => boolean\n>(2, (self, that) => every(self, (value) => has(that, value)))\n\n/** @internal */\nexport const values = <A>(self: HS.HashSet<A>): IterableIterator<A> => HM.keys((self as HashSetImpl<A>)._keyMap)\n\n/** @internal */\nexport const size = <A>(self: HS.HashSet<A>): number => HM.size((self as HashSetImpl<A>)._keyMap)\n\n/** @internal */\nexport const beginMutation = <A>(self: HS.HashSet<A>): HS.HashSet<A> =>\n  makeImpl(HM.beginMutation((self as HashSetImpl<A>)._keyMap))\n\n/** @internal */\nexport const endMutation = <A>(self: HS.HashSet<A>): HS.HashSet<A> => {\n  ;((self as HashSetImpl<A>)._keyMap as HM.HashMapImpl<A, unknown>)._editable = false\n  return self\n}\n\n/** @internal */\nexport const mutate = dual<\n  <A>(f: (set: HS.HashSet<A>) => void) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, f: (set: HS.HashSet<A>) => void) => HS.HashSet<A>\n>(2, (self, f) => {\n  const transient = beginMutation(self)\n  f(transient)\n  return endMutation(transient)\n})\n\n/** @internal */\nexport const add = dual<\n  <A>(value: A) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, value: A) => HS.HashSet<A>\n>(\n  2,\n  <A>(self: HS.HashSet<A>, value: A) =>\n    ((self as HashSetImpl<A>)._keyMap as HM.HashMapImpl<A, unknown>)._editable\n      ? (HM.set(value as A, true as unknown)((self as HashSetImpl<A>)._keyMap), self)\n      : makeImpl(HM.set(value as A, true as unknown)((self as HashSetImpl<A>)._keyMap))\n)\n\n/** @internal */\nexport const remove = dual<\n  <A>(value: A) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, value: A) => HS.HashSet<A>\n>(\n  2,\n  <A>(self: HS.HashSet<A>, value: A) =>\n    (((self as HashSetImpl<A>)._keyMap) as HM.HashMapImpl<A, unknown>)._editable\n      ? (HM.remove(value)((self as HashSetImpl<A>)._keyMap), self)\n      : makeImpl(HM.remove(value)((self as HashSetImpl<A>)._keyMap))\n)\n\n/** @internal */\nexport const difference = dual<\n  <A>(that: Iterable<A>) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, that: Iterable<A>) => HS.HashSet<A>\n>(2, (self, that) =>\n  mutate(self, (set) => {\n    for (const value of that) {\n      remove(set, value)\n    }\n  }))\n\n/** @internal */\nexport const intersection = dual<\n  <A>(that: Iterable<A>) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, that: Iterable<A>) => HS.HashSet<A>\n>(2, (self, that) =>\n  mutate(empty(), (set) => {\n    for (const value of that) {\n      if (has(value)(self)) {\n        add(value)(set)\n      }\n    }\n  }))\n\n/** @internal */\nexport const union = dual<\n  <A>(that: Iterable<A>) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, that: Iterable<A>) => HS.HashSet<A>\n>(2, (self, that) =>\n  mutate(empty(), (set) => {\n    forEach(self, (value) => add(set, value))\n    for (const value of that) {\n      add(set, value)\n    }\n  }))\n\n/** @internal */\nexport const toggle = dual<\n  <A>(value: A) => (self: HS.HashSet<A>) => HS.HashSet<A>,\n  <A>(self: HS.HashSet<A>, value: A) => HS.HashSet<A>\n>(2, (self, value) => has(self, value) ? remove(self, value) : add(self, value))\n\n/** @internal */\nexport const map = dual<\n  <A, B>(f: (a: A) => B) => (self: HS.HashSet<A>) => HS.HashSet<B>,\n  <A, B>(self: HS.HashSet<A>, f: (a: A) => B) => HS.HashSet<B>\n>(2, (self, f) =>\n  mutate(empty(), (set) => {\n    forEach(self, (a) => {\n      const b = f(a)\n      if (!has(set, b)) {\n        add(set, b)\n      }\n    })\n  }))\n\n/** @internal */\nexport const flatMap = dual<\n  <A, B>(f: (a: A) => Iterable<B>) => (self: HS.HashSet<A>) => HS.HashSet<B>,\n  <A, B>(self: HS.HashSet<A>, f: (a: A) => Iterable<B>) => HS.HashSet<B>\n>(2, (self, f) =>\n  mutate(empty(), (set) => {\n    forEach(self, (a) => {\n      for (const b of f(a)) {\n        if (!has(set, b)) {\n          add(set, b)\n        }\n      }\n    })\n  }))\n\n/** @internal */\nexport const forEach = dual<\n  <A>(f: (value: A) => void) => (self: HS.HashSet<A>) => void,\n  <A>(self: HS.HashSet<A>, f: (value: A) => void) => void\n>(2, <A>(self: HS.HashSet<A>, f: (value: A) => void) =>\n  HM.forEach(\n    (self as HashSetImpl<A>)._keyMap,\n    (_, k) => f(k)\n  ))\n\n/** @internal */\nexport const reduce = dual<\n  <A, Z>(zero: Z, f: (accumulator: Z, value: A) => Z) => (self: HS.HashSet<A>) => Z,\n  <A, Z>(self: HS.HashSet<A>, zero: Z, f: (accumulator: Z, value: A) => Z) => Z\n>(3, <A, Z>(self: HS.HashSet<A>, zero: Z, f: (accumulator: Z, value: A) => Z) =>\n  HM.reduce(\n    (self as HashSetImpl<A>)._keyMap,\n    zero,\n    (z, _, a) => f(z, a)\n  ))\n\n/** @internal */\nexport const filter: {\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: HS.HashSet<A>) => HS.HashSet<B>\n  <A>(predicate: Predicate<NoInfer<A>>): (self: HS.HashSet<A>) => HS.HashSet<A>\n  <A, B extends A>(self: HS.HashSet<A>, refinement: Refinement<A, B>): HS.HashSet<B>\n  <A>(self: HS.HashSet<A>, predicate: Predicate<A>): HS.HashSet<A>\n} = dual(2, <A>(self: HS.HashSet<A>, f: Predicate<A>) => {\n  return mutate(empty(), (set) => {\n    const iterator = values(self)\n    let next: IteratorResult<A, any>\n    while (!(next = iterator.next()).done) {\n      const value = next.value\n      if (f(value)) {\n        add(set, value)\n      }\n    }\n  })\n})\n\n/** @internal */\nexport const partition: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): (self: HS.HashSet<A>) => [excluded: HS.HashSet<Exclude<A, B>>, satisfying: HS.HashSet<B>]\n  <A>(\n    predicate: Predicate<NoInfer<A>>\n  ): (self: HS.HashSet<A>) => [excluded: HS.HashSet<A>, satisfying: HS.HashSet<A>]\n  <A, B extends A>(\n    self: HS.HashSet<A>,\n    refinement: Refinement<A, B>\n  ): [excluded: HS.HashSet<Exclude<A, B>>, satisfying: HS.HashSet<B>]\n  <A>(self: HS.HashSet<A>, predicate: Predicate<A>): [excluded: HS.HashSet<A>, satisfying: HS.HashSet<A>]\n} = dual(2, <A>(self: HS.HashSet<A>, predicate: Predicate<A>): [excluded: HS.HashSet<A>, satisfying: HS.HashSet<A>] => {\n  const iterator = values(self)\n  let next: IteratorResult<A, any>\n  const right = beginMutation(empty<A>())\n  const left = beginMutation(empty<A>())\n  while (!(next = iterator.next()).done) {\n    const value = next.value\n    if (predicate(value)) {\n      add(right, value)\n    } else {\n      add(left, value)\n    }\n  }\n  return [endMutation(left), endMutation(right)]\n})\n", "import * as Equal from \"../Equal.js\"\nimport * as Dual from \"../Function.js\"\nimport { identity, pipe } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport type * as HM from \"../HashMap.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type { NoInfer } from \"../Types.js\"\nimport { fromBitmap, hashFragment, toBitmap } from \"./hashMap/bitwise.js\"\nimport { SIZE } from \"./hashMap/config.js\"\nimport * as Node from \"./hashMap/node.js\"\n\nconst HashMapSymbolKey = \"effect/HashMap\"\n\n/** @internal */\nexport const HashMapTypeId: HM.TypeId = Symbol.for(HashMapSymbolKey) as HM.TypeId\n\ntype TraversalFn<K, V, A> = (k: K, v: V) => A\n\ntype Cont<K, V, A> =\n  | [\n    len: number,\n    children: Array<Node.Node<K, V>>,\n    i: number,\n    f: TraversalFn<K, V, A>,\n    cont: Cont<K, V, A>\n  ]\n  | undefined\n\ninterface VisitResult<K, V, A> {\n  value: A\n  cont: Cont<K, V, A>\n}\n\n/** @internal */\nexport interface HashMapImpl<out K, out V> extends HM.HashMap<K, V> {\n  _editable: boolean // mutable by design\n  _edit: number // mutable by design\n  _root: Node.Node<K, V> // mutable by design\n  _size: number // mutable by design\n}\n\nconst HashMapProto: HM.HashMap<unknown, unknown> = {\n  [HashMapTypeId]: HashMapTypeId,\n  [Symbol.iterator]<K, V>(this: HashMapImpl<K, V>): Iterator<[K, V]> {\n    return new HashMapIterator(this, (k, v) => [k, v])\n  },\n  [Hash.symbol](this: HM.HashMap<unknown, unknown>): number {\n    let hash = Hash.hash(HashMapSymbolKey)\n    for (const item of this) {\n      hash ^= pipe(Hash.hash(item[0]), Hash.combine(Hash.hash(item[1])))\n    }\n    return Hash.cached(this, hash)\n  },\n  [Equal.symbol]<K, V>(this: HashMapImpl<K, V>, that: unknown): boolean {\n    if (isHashMap(that)) {\n      if ((that as HashMapImpl<K, V>)._size !== this._size) {\n        return false\n      }\n      for (const item of this) {\n        const elem = pipe(\n          that as HM.HashMap<K, V>,\n          getHash(item[0], Hash.hash(item[0]))\n        )\n        if (Option.isNone(elem)) {\n          return false\n        } else {\n          if (!Equal.equals(item[1], elem.value)) {\n            return false\n          }\n        }\n      }\n      return true\n    }\n    return false\n  },\n  toString<K, V>(this: HashMapImpl<K, V>) {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"HashMap\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst makeImpl = <K, V>(\n  editable: boolean,\n  edit: number,\n  root: Node.Node<K, V>,\n  size: number\n): HashMapImpl<K, V> => {\n  const map = Object.create(HashMapProto)\n  map._editable = editable\n  map._edit = edit\n  map._root = root\n  map._size = size\n  return map\n}\n\nclass HashMapIterator<in out K, in out V, out T> implements IterableIterator<T> {\n  v: Option.Option<VisitResult<K, V, T>>\n\n  constructor(readonly map: HashMapImpl<K, V>, readonly f: TraversalFn<K, V, T>) {\n    this.v = visitLazy(this.map._root, this.f, undefined)\n  }\n\n  next(): IteratorResult<T> {\n    if (Option.isNone(this.v)) {\n      return { done: true, value: undefined }\n    }\n    const v0 = this.v.value\n    this.v = applyCont(v0.cont)\n    return { done: false, value: v0.value }\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return new HashMapIterator(this.map, this.f)\n  }\n}\n\nconst applyCont = <K, V, A>(cont: Cont<K, V, A>): Option.Option<VisitResult<K, V, A>> =>\n  cont\n    ? visitLazyChildren(cont[0], cont[1], cont[2], cont[3], cont[4])\n    : Option.none()\n\nconst visitLazy = <K, V, A>(\n  node: Node.Node<K, V>,\n  f: TraversalFn<K, V, A>,\n  cont: Cont<K, V, A> = undefined\n): Option.Option<VisitResult<K, V, A>> => {\n  switch (node._tag) {\n    case \"LeafNode\": {\n      if (Option.isSome(node.value)) {\n        return Option.some({\n          value: f(node.key, node.value.value),\n          cont\n        })\n      }\n      return applyCont(cont)\n    }\n    case \"CollisionNode\":\n    case \"ArrayNode\":\n    case \"IndexedNode\": {\n      const children = node.children\n      return visitLazyChildren(children.length, children, 0, f, cont)\n    }\n    default: {\n      return applyCont(cont)\n    }\n  }\n}\n\nconst visitLazyChildren = <K, V, A>(\n  len: number,\n  children: Array<Node.Node<K, V>>,\n  i: number,\n  f: TraversalFn<K, V, A>,\n  cont: Cont<K, V, A>\n): Option.Option<VisitResult<K, V, A>> => {\n  while (i < len) {\n    const child = children[i++]\n    if (child && !Node.isEmptyNode(child)) {\n      return visitLazy(child, f, [len, children, i, f, cont])\n    }\n  }\n  return applyCont(cont)\n}\n\nconst _empty = makeImpl<never, never>(false, 0, new Node.EmptyNode(), 0)\n\n/** @internal */\nexport const empty = <K = never, V = never>(): HM.HashMap<K, V> => _empty\n\n/** @internal */\nexport const make = <Entries extends ReadonlyArray<readonly [any, any]>>(\n  ...entries: Entries\n): HM.HashMap<\n  Entries[number] extends readonly [infer K, any] ? K : never,\n  Entries[number] extends readonly [any, infer V] ? V : never\n> => fromIterable(entries)\n\n/** @internal */\nexport const fromIterable = <K, V>(entries: Iterable<readonly [K, V]>): HM.HashMap<K, V> => {\n  const map = beginMutation(empty<K, V>())\n  for (const entry of entries) {\n    set(map, entry[0], entry[1])\n  }\n  return endMutation(map)\n}\n\n/** @internal */\nexport const isHashMap: {\n  <K, V>(u: Iterable<readonly [K, V]>): u is HM.HashMap<K, V>\n  (u: unknown): u is HM.HashMap<unknown, unknown>\n} = (u: unknown): u is HM.HashMap<unknown, unknown> => hasProperty(u, HashMapTypeId)\n\n/** @internal */\nexport const isEmpty = <K, V>(self: HM.HashMap<K, V>): boolean =>\n  self && Node.isEmptyNode((self as HashMapImpl<K, V>)._root)\n\n/** @internal */\nexport const get = Dual.dual<\n  <K1 extends K, K>(key: K1) => <V>(self: HM.HashMap<K, V>) => Option.Option<V>,\n  <K, V, K1 extends K>(self: HM.HashMap<K, V>, key: K1) => Option.Option<V>\n>(2, (self, key) => getHash(self, key, Hash.hash(key)))\n\n/** @internal */\nexport const getHash = Dual.dual<\n  <K1 extends K, K>(key: K1, hash: number) => <V>(self: HM.HashMap<K, V>) => Option.Option<V>,\n  <K, V, K1 extends K>(self: HM.HashMap<K, V>, key: K1, hash: number) => Option.Option<V>\n>(3, <K, V, K1 extends K>(self: HM.HashMap<K, V>, key: K1, hash: number) => {\n  let node = (self as HashMapImpl<K, V>)._root\n  let shift = 0\n\n  while (true) {\n    switch (node._tag) {\n      case \"LeafNode\": {\n        return Equal.equals(key, node.key) ? node.value : Option.none()\n      }\n      case \"CollisionNode\": {\n        if (hash === node.hash) {\n          const children = node.children\n          for (let i = 0, len = children.length; i < len; ++i) {\n            const child = children[i]!\n            if (\"key\" in child && Equal.equals(key, child.key)) {\n              return child.value\n            }\n          }\n        }\n        return Option.none()\n      }\n      case \"IndexedNode\": {\n        const frag = hashFragment(shift, hash)\n        const bit = toBitmap(frag)\n        if (node.mask & bit) {\n          node = node.children[fromBitmap(node.mask, bit)]!\n          shift += SIZE\n          break\n        }\n        return Option.none()\n      }\n      case \"ArrayNode\": {\n        node = node.children[hashFragment(shift, hash)]!\n        if (node) {\n          shift += SIZE\n          break\n        }\n        return Option.none()\n      }\n      default:\n        return Option.none()\n    }\n  }\n})\n\n/** @internal */\nexport const unsafeGet = Dual.dual<\n  <K1 extends K, K>(key: K1) => <V>(self: HM.HashMap<K, V>) => V,\n  <K, V, K1 extends K>(self: HM.HashMap<K, V>, key: K1) => V\n>(2, (self, key) => {\n  const element = getHash(self, key, Hash.hash(key))\n  if (Option.isNone(element)) {\n    throw new Error(\"Expected map to contain key\")\n  }\n  return element.value\n})\n\n/** @internal */\nexport const has = Dual.dual<\n  <K1 extends K, K>(key: K1) => <V>(self: HM.HashMap<K, V>) => boolean,\n  <K, V, K1 extends K>(self: HM.HashMap<K, V>, key: K1) => boolean\n>(2, (self, key) => Option.isSome(getHash(self, key, Hash.hash(key))))\n\n/** @internal */\nexport const hasHash = Dual.dual<\n  <K1 extends K, K>(key: K1, hash: number) => <V>(self: HM.HashMap<K, V>) => boolean,\n  <K, V, K1 extends K>(self: HM.HashMap<K, V>, key: K1, hash: number) => boolean\n>(3, (self, key, hash) => Option.isSome(getHash(self, key, hash)))\n\n/** @internal */\nexport const hasBy = Dual.dual<\n  <K, V>(predicate: (value: NoInfer<V>, key: NoInfer<K>) => boolean) => (self: HM.HashMap<K, V>) => boolean,\n  <K, V>(self: HM.HashMap<K, V>, predicate: (value: NoInfer<V>, key: NoInfer<K>) => boolean) => boolean\n>(2, (self, predicate) => Option.isSome(findFirst(self, predicate)))\n\n/** @internal */\nexport const set = Dual.dual<\n  <K, V>(key: K, value: V) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, key: K, value: V) => HM.HashMap<K, V>\n>(3, (self, key, value) => modifyAt(self, key, () => Option.some(value)))\n\n/** @internal */\nexport const setTree = Dual.dual<\n  <K, V>(newRoot: Node.Node<K, V>, newSize: number) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, newRoot: Node.Node<K, V>, newSize: number) => HM.HashMap<K, V>\n>(3, <K, V>(self: HM.HashMap<K, V>, newRoot: Node.Node<K, V>, newSize: number) => {\n  if ((self as HashMapImpl<K, V>)._editable) {\n    ;(self as HashMapImpl<K, V>)._root = newRoot\n    ;(self as HashMapImpl<K, V>)._size = newSize\n    return self\n  }\n  return newRoot === (self as HashMapImpl<K, V>)._root\n    ? self\n    : makeImpl(\n      (self as HashMapImpl<K, V>)._editable,\n      (self as HashMapImpl<K, V>)._edit,\n      newRoot,\n      newSize\n    )\n})\n\n/** @internal */\nexport const keys = <K, V>(self: HM.HashMap<K, V>): IterableIterator<K> =>\n  new HashMapIterator(self as HashMapImpl<K, V>, (key) => key)\n\n/** @internal */\nexport const values = <K, V>(self: HM.HashMap<K, V>): IterableIterator<V> =>\n  new HashMapIterator(self as HashMapImpl<K, V>, (_, value) => value)\n\n/** @internal */\nexport const entries = <K, V>(self: HM.HashMap<K, V>): IterableIterator<[K, V]> =>\n  new HashMapIterator(self as HashMapImpl<K, V>, (key, value) => [key, value])\n\n/** @internal */\nexport const size = <K, V>(self: HM.HashMap<K, V>): number => (self as HashMapImpl<K, V>)._size\n\n/** @internal */\nexport const countBy = Dual.dual<\n  <K, V>(predicate: (value: NoInfer<V>, key: NoInfer<K>) => boolean) => (self: HM.HashMap<K, V>) => number,\n  <K, V>(self: HM.HashMap<K, V>, predicate: (value: NoInfer<V>, key: NoInfer<K>) => boolean) => number\n>(2, (self, f) => {\n  let count = 0\n  for (const [k, a] of self) {\n    if (f(a, k)) {\n      count++\n    }\n  }\n  return count\n})\n\n/** @internal */\nexport const beginMutation = <K, V>(self: HM.HashMap<K, V>): HM.HashMap<K, V> =>\n  makeImpl(\n    true,\n    (self as HashMapImpl<K, V>)._edit + 1,\n    (self as HashMapImpl<K, V>)._root,\n    (self as HashMapImpl<K, V>)._size\n  )\n\n/** @internal */\nexport const endMutation = <K, V>(self: HM.HashMap<K, V>): HM.HashMap<K, V> => {\n  ;(self as HashMapImpl<K, V>)._editable = false\n  return self\n}\n\n/** @internal */\nexport const mutate = Dual.dual<\n  <K, V>(f: (self: HM.HashMap<K, V>) => void) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, f: (self: HM.HashMap<K, V>) => void) => HM.HashMap<K, V>\n>(2, (self, f) => {\n  const transient = beginMutation(self)\n  f(transient)\n  return endMutation(transient)\n})\n\n/** @internal */\nexport const modifyAt = Dual.dual<\n  <K, V>(key: K, f: HM.HashMap.UpdateFn<V>) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, key: K, f: HM.HashMap.UpdateFn<V>) => HM.HashMap<K, V>\n>(3, (self, key, f) => modifyHash(self, key, Hash.hash(key), f))\n\n/** @internal */\nexport const modifyHash = Dual.dual<\n  <K, V>(key: K, hash: number, f: HM.HashMap.UpdateFn<V>) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, key: K, hash: number, f: HM.HashMap.UpdateFn<V>) => HM.HashMap<K, V>\n>(4, <K, V>(self: HM.HashMap<K, V>, key: K, hash: number, f: HM.HashMap.UpdateFn<V>) => {\n  const size = { value: (self as HashMapImpl<K, V>)._size }\n  const newRoot = (self as HashMapImpl<K, V>)._root.modify(\n    (self as HashMapImpl<K, V>)._editable ?\n      (self as HashMapImpl<K, V>)._edit :\n      NaN,\n    0,\n    f,\n    hash,\n    key,\n    size\n  )\n  return pipe(self, setTree(newRoot, size.value))\n})\n\n/** @internal */\nexport const modify = Dual.dual<\n  <K, V>(key: K, f: (v: V) => V) => (self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, key: K, f: (v: V) => V) => HM.HashMap<K, V>\n>(3, (self, key, f) => modifyAt(self, key, Option.map(f)))\n\n/** @internal */\nexport const union = Dual.dual<\n  <K1, V1>(\n    that: HM.HashMap<K1, V1>\n  ) => <K0, V0>(self: HM.HashMap<K0, V0>) => HM.HashMap<K0 | K1, V0 | V1>,\n  <K0, V0, K1, V1>(\n    self: HM.HashMap<K0, V0>,\n    that: HM.HashMap<K1, V1>\n  ) => HM.HashMap<K0 | K1, V0 | V1>\n>(2, <K0, V0, K1, V1>(self: HM.HashMap<K0, V0>, that: HM.HashMap<K1, V1>) => {\n  const result: HM.HashMap<K0 | K1, V0 | V1> = beginMutation(self)\n  forEach(that, (v, k) => set(result, k, v))\n  return endMutation(result)\n})\n\n/** @internal */\nexport const remove = Dual.dual<\n  <K>(key: K) => <V>(self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, key: K) => HM.HashMap<K, V>\n>(2, (self, key) => modifyAt(self, key, Option.none))\n\n/** @internal */\nexport const removeMany = Dual.dual<\n  <K>(keys: Iterable<K>) => <V>(self: HM.HashMap<K, V>) => HM.HashMap<K, V>,\n  <K, V>(self: HM.HashMap<K, V>, keys: Iterable<K>) => HM.HashMap<K, V>\n>(2, (self, keys) =>\n  mutate(self, (map) => {\n    for (const key of keys) {\n      remove(key)(map)\n    }\n  }))\n\n/**\n * Maps over the entries of the `HashMap` using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map = Dual.dual<\n  <A, V, K>(f: (value: V, key: K) => A) => (self: HM.HashMap<K, V>) => HM.HashMap<K, A>,\n  <K, V, A>(self: HM.HashMap<K, V>, f: (value: V, key: K) => A) => HM.HashMap<K, A>\n>(2, (self, f) =>\n  reduce(\n    self,\n    empty(),\n    (map, value, key) => set(map, key, f(value, key))\n  ))\n\n/** @internal */\nexport const flatMap = Dual.dual<\n  <A, K, B>(\n    f: (value: A, key: K) => HM.HashMap<K, B>\n  ) => (self: HM.HashMap<K, A>) => HM.HashMap<K, B>,\n  <K, A, B>(self: HM.HashMap<K, A>, f: (value: A, key: K) => HM.HashMap<K, B>) => HM.HashMap<K, B>\n>(\n  2,\n  (self, f) =>\n    reduce(self, empty(), (zero, value, key) =>\n      mutate(\n        zero,\n        (map) => forEach(f(value, key), (value, key) => set(map, key, value))\n      ))\n)\n\n/** @internal */\nexport const forEach = Dual.dual<\n  <V, K>(f: (value: V, key: K) => void) => (self: HM.HashMap<K, V>) => void,\n  <V, K>(self: HM.HashMap<K, V>, f: (value: V, key: K) => void) => void\n>(2, (self, f) => reduce(self, void 0 as void, (_, value, key) => f(value, key)))\n\n/** @internal */\nexport const reduce = Dual.dual<\n  <Z, V, K>(zero: Z, f: (accumulator: Z, value: V, key: K) => Z) => (self: HM.HashMap<K, V>) => Z,\n  <Z, V, K>(self: HM.HashMap<K, V>, zero: Z, f: (accumulator: Z, value: V, key: K) => Z) => Z\n>(3, <Z, V, K>(self: HM.HashMap<K, V>, zero: Z, f: (accumulator: Z, value: V, key: K) => Z) => {\n  const root = (self as HashMapImpl<K, V>)._root\n  if (root._tag === \"LeafNode\") {\n    return Option.isSome(root.value) ? f(zero, root.value.value, root.key) : zero\n  }\n  if (root._tag === \"EmptyNode\") {\n    return zero\n  }\n  const toVisit = [root.children]\n  let children\n  while ((children = toVisit.pop())) {\n    for (let i = 0, len = children.length; i < len;) {\n      const child = children[i++]\n      if (child && !Node.isEmptyNode(child)) {\n        if (child._tag === \"LeafNode\") {\n          if (Option.isSome(child.value)) {\n            zero = f(zero, child.value.value, child.key)\n          }\n        } else {\n          toVisit.push(child.children)\n        }\n      }\n    }\n  }\n  return zero\n})\n\n/** @internal */\nexport const filter: {\n  <K, A, B extends A>(f: (a: NoInfer<A>, k: K) => a is B): (self: HM.HashMap<K, A>) => HM.HashMap<K, B>\n  <K, A>(f: (a: NoInfer<A>, k: K) => boolean): (self: HM.HashMap<K, A>) => HM.HashMap<K, A>\n  <K, A, B extends A>(self: HM.HashMap<K, A>, f: (a: A, k: K) => a is B): HM.HashMap<K, B>\n  <K, A>(self: HM.HashMap<K, A>, f: (a: A, k: K) => boolean): HM.HashMap<K, A>\n} = Dual.dual(\n  2,\n  <K, A>(self: HM.HashMap<K, A>, f: (a: A, k: K) => boolean): HM.HashMap<K, A> =>\n    mutate(empty(), (map) => {\n      for (const [k, a] of self) {\n        if (f(a, k)) {\n          set(map, k, a)\n        }\n      }\n    })\n)\n\n/** @internal */\nexport const compact = <K, A>(self: HM.HashMap<K, Option.Option<A>>) => filterMap(self, identity)\n\n/** @internal */\nexport const filterMap = Dual.dual<\n  <A, K, B>(\n    f: (value: A, key: K) => Option.Option<B>\n  ) => (self: HM.HashMap<K, A>) => HM.HashMap<K, B>,\n  <K, A, B>(self: HM.HashMap<K, A>, f: (value: A, key: K) => Option.Option<B>) => HM.HashMap<K, B>\n>(2, (self, f) =>\n  mutate(empty(), (map) => {\n    for (const [k, a] of self) {\n      const option = f(a, k)\n      if (Option.isSome(option)) {\n        set(map, k, option.value)\n      }\n    }\n  }))\n\n/** @internal */\nexport const findFirst: {\n  <K, A, B extends A>(predicate: (a: NoInfer<A>, k: K) => a is B): (self: HM.HashMap<K, A>) => Option.Option<[K, B]>\n  <K, A>(predicate: (a: NoInfer<A>, k: K) => boolean): (self: HM.HashMap<K, A>) => Option.Option<[K, A]>\n  <K, A, B extends A>(self: HM.HashMap<K, A>, predicate: (a: A, k: K) => a is B): Option.Option<[K, B]>\n  <K, A>(self: HM.HashMap<K, A>, predicate: (a: A, k: K) => boolean): Option.Option<[K, A]>\n} = Dual.dual(\n  2,\n  <K, A>(self: HM.HashMap<K, A>, predicate: (a: A, k: K) => boolean): Option.Option<[K, A]> => {\n    for (const ka of self) {\n      if (predicate(ka[1], ka[0])) {\n        return Option.some(ka)\n      }\n    }\n    return Option.none()\n  }\n)\n\n/** @internal */\nexport const some: {\n  <K, A>(predicate: (a: NoInfer<A>, k: K) => boolean): (self: HM.HashMap<K, A>) => boolean\n  <K, A>(self: HM.HashMap<K, A>, predicate: (a: A, k: K) => boolean): boolean\n} = Dual.dual(\n  2,\n  <K, A>(self: HM.HashMap<K, A>, predicate: (a: A, k: K) => boolean): boolean => {\n    for (const ka of self) {\n      if (predicate(ka[1], ka[0])) {\n        return true\n      }\n    }\n    return false\n  }\n)\n\n/** @internal */\nexport const every: {\n  <K, A>(predicate: (a: NoInfer<A>, k: K) => boolean): (self: HM.HashMap<K, A>) => boolean\n  <K, A>(self: HM.HashMap<K, A>, predicate: (a: A, k: K) => boolean): boolean\n} = Dual.dual(\n  2,\n  <K, A>(self: HM.HashMap<K, A>, predicate: (a: A, k: K) => boolean): boolean => !some(self, (a, k) => !predicate(a, k))\n)\n", "import { MASK } from \"./config.js\"\n\n/**\n * Hamming weight.\n *\n * Taken from: http://jsperf.com/hamming-weight\n *\n * @internal\n */\nexport function popcount(x: number) {\n  x -= (x >> 1) & 0x55555555\n  x = (x & 0x33333333) + ((x >> 2) & 0x33333333)\n  x = (x + (x >> 4)) & 0x0f0f0f0f\n  x += x >> 8\n  x += x >> 16\n  return x & 0x7f\n}\n\n/** @internal */\nexport function hashFragment(shift: number, h: number) {\n  return (h >>> shift) & MASK\n}\n\n/** @internal */\nexport function toBitmap(x: number) {\n  return 1 << x\n}\n\n/** @internal */\nexport function fromBitmap(bitmap: number, bit: number) {\n  return popcount(bitmap & (bit - 1))\n}\n", "/** @internal */\nexport const SIZE = 5\n\n/** @internal */\nexport const BUCKET_SIZE = Math.pow(2, SIZE)\n\n/** @internal */\nexport const MASK = BUCKET_SIZE - 1\n\n/** @internal */\nexport const MAX_INDEX_NODE = BUCKET_SIZE / 2\n\n/** @internal */\nexport const MIN_ARRAY_NODE = BUCKET_SIZE / 4\n", "import { equals } from \"../../Equal.js\"\nimport type { HashMap } from \"../../HashMap.js\"\nimport * as O from \"../../Option.js\"\nimport { isTagged } from \"../../Predicate.js\"\nimport * as Stack from \"../stack.js\"\nimport { arraySpliceIn, arraySpliceOut, arrayUpdate } from \"./array.js\"\nimport { fromBitmap, hashFragment, toBitmap } from \"./bitwise.js\"\nimport { MAX_INDEX_NODE, MIN_ARRAY_NODE, SIZE } from \"./config.js\"\n\n/** @internal */\nexport type Node<K, V> =\n  | EmptyNode<K, V>\n  | LeafNode<K, V>\n  | CollisionNode<K, V>\n  | IndexedNode<K, V>\n  | ArrayNode<K, V>\n\n/** @internal */\nexport interface SizeRef {\n  value: number // mutable by design\n}\n\n/** @internal */\nexport class EmptyNode<out K, out V> {\n  readonly _tag = \"EmptyNode\"\n\n  modify(\n    edit: number,\n    _shift: number,\n    f: HashMap.UpdateFn<V>,\n    hash: number,\n    key: K,\n    size: SizeRef\n  ): Node<K, V> {\n    const v = f(O.none())\n    if (O.isNone(v)) return new EmptyNode()\n    ++size.value\n    return new LeafNode(edit, hash, key, v)\n  }\n}\n\n/** @internal */\nexport function isEmptyNode(a: unknown): a is EmptyNode<unknown, unknown> {\n  return isTagged(a, \"EmptyNode\")\n}\n\n/** @internal */\nexport function isLeafNode<K, V>(\n  node: Node<K, V>\n): node is EmptyNode<K, V> | LeafNode<K, V> | CollisionNode<K, V> {\n  return isEmptyNode(node) || node._tag === \"LeafNode\" || node._tag === \"CollisionNode\"\n}\n\n/** @internal */\nexport function canEditNode<K, V>(node: Node<K, V>, edit: number): boolean {\n  return isEmptyNode(node) ? false : edit === node.edit\n}\n\n/** @internal */\nexport class LeafNode<out K, out V> {\n  readonly _tag = \"LeafNode\"\n\n  constructor(\n    readonly edit: number,\n    readonly hash: number,\n    readonly key: K,\n    public value: O.Option<V>\n  ) {}\n\n  modify(\n    edit: number,\n    shift: number,\n    f: HashMap.UpdateFn<V>,\n    hash: number,\n    key: K,\n    size: SizeRef\n  ): Node<K, V> {\n    if (equals(key, this.key)) {\n      const v = f(this.value)\n      if (v === this.value) return this\n      else if (O.isNone(v)) {\n        --size.value\n        return new EmptyNode()\n      }\n      if (canEditNode(this, edit)) {\n        this.value = v\n        return this\n      }\n      return new LeafNode(edit, hash, key, v)\n    }\n    const v = f(O.none())\n    if (O.isNone(v)) return this\n    ++size.value\n    return mergeLeaves(\n      edit,\n      shift,\n      this.hash,\n      this,\n      hash,\n      new LeafNode(edit, hash, key, v)\n    )\n  }\n}\n\n/** @internal */\nexport class CollisionNode<out K, out V> {\n  readonly _tag = \"CollisionNode\"\n\n  constructor(\n    readonly edit: number,\n    readonly hash: number,\n    readonly children: Array<Node<K, V>>\n  ) {}\n\n  modify(\n    edit: number,\n    shift: number,\n    f: HashMap.UpdateFn<V>,\n    hash: number,\n    key: K,\n    size: SizeRef\n  ): Node<K, V> {\n    if (hash === this.hash) {\n      const canEdit = canEditNode(this, edit)\n      const list = this.updateCollisionList(\n        canEdit,\n        edit,\n        this.hash,\n        this.children,\n        f,\n        key,\n        size\n      )\n      if (list === this.children) return this\n\n      return list.length > 1 ? new CollisionNode(edit, this.hash, list) : list[0]! // collapse single element collision list\n    }\n    const v = f(O.none())\n    if (O.isNone(v)) return this\n    ++size.value\n    return mergeLeaves(\n      edit,\n      shift,\n      this.hash,\n      this,\n      hash,\n      new LeafNode(edit, hash, key, v)\n    )\n  }\n\n  updateCollisionList(\n    mutate: boolean,\n    edit: number,\n    hash: number,\n    list: Array<Node<K, V>>,\n    f: HashMap.UpdateFn<V>,\n    key: K,\n    size: SizeRef\n  ) {\n    const len = list.length\n    for (let i = 0; i < len; ++i) {\n      const child = list[i]!\n      if (\"key\" in child && equals(key, child.key)) {\n        const value = child.value\n        const newValue = f(value)\n        if (newValue === value) return list\n        if (O.isNone(newValue)) {\n          --size.value\n          return arraySpliceOut(mutate, i, list)\n        }\n        return arrayUpdate(mutate, i, new LeafNode(edit, hash, key, newValue), list)\n      }\n    }\n\n    const newValue = f(O.none())\n    if (O.isNone(newValue)) return list\n    ++size.value\n    return arrayUpdate(mutate, len, new LeafNode(edit, hash, key, newValue), list)\n  }\n}\n\n/** @internal */\nexport class IndexedNode<out K, out V> {\n  readonly _tag = \"IndexedNode\"\n\n  constructor(\n    readonly edit: number,\n    public mask: number,\n    public children: Array<Node<K, V>>\n  ) {}\n\n  modify(\n    edit: number,\n    shift: number,\n    f: HashMap.UpdateFn<V>,\n    hash: number,\n    key: K,\n    size: SizeRef\n  ): Node<K, V> {\n    const mask = this.mask\n    const children = this.children\n    const frag = hashFragment(shift, hash)\n    const bit = toBitmap(frag)\n    const indx = fromBitmap(mask, bit)\n    const exists = mask & bit\n    const canEdit = canEditNode(this, edit)\n\n    if (!exists) {\n      const _newChild = new EmptyNode<K, V>().modify(edit, shift + SIZE, f, hash, key, size)\n      if (!_newChild) return this\n      return children.length >= MAX_INDEX_NODE ?\n        expand(edit, frag, _newChild, mask, children) :\n        new IndexedNode(edit, mask | bit, arraySpliceIn(canEdit, indx, _newChild, children))\n    }\n\n    const current = children[indx]!\n    const child = current.modify(edit, shift + SIZE, f, hash, key, size)\n\n    if (current === child) return this\n    let bitmap = mask\n    let newChildren\n    if (isEmptyNode(child)) {\n      // remove\n      bitmap &= ~bit\n      if (!bitmap) return new EmptyNode()\n      if (children.length <= 2 && isLeafNode(children[indx ^ 1]!)) {\n        return children[indx ^ 1]! // collapse\n      }\n\n      newChildren = arraySpliceOut(canEdit, indx, children)\n    } else {\n      // modify\n      newChildren = arrayUpdate(canEdit, indx, child, children)\n    }\n\n    if (canEdit) {\n      this.mask = bitmap\n      this.children = newChildren\n      return this\n    }\n\n    return new IndexedNode(edit, bitmap, newChildren)\n  }\n}\n\n/** @internal */\nexport class ArrayNode<out K, out V> {\n  readonly _tag = \"ArrayNode\"\n\n  constructor(\n    readonly edit: number,\n    public size: number,\n    public children: Array<Node<K, V>>\n  ) {}\n\n  modify(\n    edit: number,\n    shift: number,\n    f: HashMap.UpdateFn<V>,\n    hash: number,\n    key: K,\n    size: SizeRef\n  ): Node<K, V> {\n    let count = this.size\n    const children = this.children\n    const frag = hashFragment(shift, hash)\n    const child = children[frag]\n    const newChild = (child || new EmptyNode<K, V>()).modify(\n      edit,\n      shift + SIZE,\n      f,\n      hash,\n      key,\n      size\n    )\n\n    if (child === newChild) return this\n\n    const canEdit = canEditNode(this, edit)\n    let newChildren\n    if (isEmptyNode(child) && !isEmptyNode(newChild)) {\n      // add\n      ++count\n      newChildren = arrayUpdate(canEdit, frag, newChild, children)\n    } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {\n      // remove\n      --count\n      if (count <= MIN_ARRAY_NODE) {\n        return pack(edit, count, frag, children)\n      }\n      newChildren = arrayUpdate(canEdit, frag, new EmptyNode<K, V>(), children)\n    } else {\n      // modify\n      newChildren = arrayUpdate(canEdit, frag, newChild, children)\n    }\n\n    if (canEdit) {\n      this.size = count\n      this.children = newChildren\n      return this\n    }\n    return new ArrayNode(edit, count, newChildren)\n  }\n}\n\nfunction pack<K, V>(\n  edit: number,\n  count: number,\n  removed: number,\n  elements: Array<Node<K, V>>\n) {\n  const children = new Array<Node<K, V>>(count - 1)\n  let g = 0\n  let bitmap = 0\n  for (let i = 0, len = elements.length; i < len; ++i) {\n    if (i !== removed) {\n      const elem = elements[i]\n      if (elem && !isEmptyNode(elem)) {\n        children[g++] = elem\n        bitmap |= 1 << i\n      }\n    }\n  }\n  return new IndexedNode(edit, bitmap, children)\n}\n\nfunction expand<K, V>(\n  edit: number,\n  frag: number,\n  child: Node<K, V>,\n  bitmap: number,\n  subNodes: Array<Node<K, V>>\n) {\n  const arr = []\n  let bit = bitmap\n  let count = 0\n  for (let i = 0; bit; ++i) {\n    if (bit & 1) arr[i] = subNodes[count++]!\n    bit >>>= 1\n  }\n  arr[frag] = child\n  return new ArrayNode(edit, count + 1, arr)\n}\n\nfunction mergeLeavesInner<K, V>(\n  edit: number,\n  shift: number,\n  h1: number,\n  n1: Node<K, V>,\n  h2: number,\n  n2: Node<K, V>\n): Node<K, V> | ((child: Node<K, V>) => Node<K, V>) {\n  if (h1 === h2) return new CollisionNode(edit, h1, [n2, n1])\n  const subH1 = hashFragment(shift, h1)\n  const subH2 = hashFragment(shift, h2)\n\n  if (subH1 === subH2) {\n    return (child) => new IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), [child])\n  } else {\n    const children = subH1 < subH2 ? [n1, n2] : [n2, n1]\n    return new IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), children)\n  }\n}\n\nfunction mergeLeaves<K, V>(\n  edit: number,\n  shift: number,\n  h1: number,\n  n1: Node<K, V>,\n  h2: number,\n  n2: Node<K, V>\n): Node<K, V> {\n  let stack: Stack.Stack<(node: Node<K, V>) => Node<K, V>> | undefined = undefined\n  let currentShift = shift\n\n  while (true) {\n    const res = mergeLeavesInner(edit, currentShift, h1, n1, h2, n2)\n\n    if (typeof res === \"function\") {\n      stack = Stack.make(res, stack)\n      currentShift = currentShift + SIZE\n    } else {\n      let final = res\n      while (stack != null) {\n        final = stack.value(final)\n        stack = stack.previous\n      }\n      return final\n    }\n  }\n}\n", "/** @internal */\nexport interface Stack<out A> {\n  readonly value: A\n  readonly previous: Stack<A> | undefined\n}\n\nexport const make = <A>(value: A, previous?: Stack<A>): Stack<A> => ({\n  value,\n  previous\n})\n", "/** @internal */\nexport function arrayUpdate<A>(mutate: boolean, at: number, v: A, arr: Array<A>) {\n  let out = arr\n  if (!mutate) {\n    const len = arr.length\n    out = new Array(len)\n    for (let i = 0; i < len; ++i) out[i] = arr[i]!\n  }\n  out[at] = v\n  return out\n}\n\n/** @internal */\nexport function arraySpliceOut<A>(mutate: boolean, at: number, arr: Array<A>) {\n  const newLen = arr.length - 1\n  let i = 0\n  let g = 0\n  let out = arr\n  if (mutate) {\n    i = g = at\n  } else {\n    out = new Array(newLen)\n    while (i < at) out[g++] = arr[i++]!\n  }\n  ++i\n  while (i <= newLen) out[g++] = arr[i++]!\n  if (mutate) {\n    out.length = newLen\n  }\n  return out\n}\n\n/** @internal */\nexport function arraySpliceIn<A>(mutate: boolean, at: number, v: A, arr: Array<A>) {\n  const len = arr.length\n  if (mutate) {\n    let i = len\n    while (i >= at) arr[i--] = arr[i]!\n    arr[at] = v\n    return arr\n  }\n  let i = 0,\n    g = 0\n  const out = new Array<A>(len + 1)\n  while (i < at) out[g++] = arr[i++]!\n  out[at] = v\n  while (i < len) out[++g] = arr[i++]!\n  return out\n}\n", "/**\n * @since 2.0.0\n */\nimport * as Equal from \"./Equal.js\"\nimport * as Dual from \"./Function.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/MutableRef\") as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface MutableRef<out T> extends Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  current: T\n}\n\nconst MutableRefProto: Omit<MutableRef<unknown>, \"current\"> = {\n  [TypeId]: TypeId,\n  toString<A>(this: MutableRef<A>): string {\n    return format(this.toJSON())\n  },\n  toJSON<A>(this: MutableRef<A>) {\n    return {\n      _id: \"MutableRef\",\n      current: toJSON(this.current)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make = <T>(value: T): MutableRef<T> => {\n  const ref = Object.create(MutableRefProto)\n  ref.current = value\n  return ref\n}\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const compareAndSet: {\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(oldValue: T, newValue: T): (self: MutableRef<T>) => boolean\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(self: MutableRef<T>, oldValue: T, newValue: T): boolean\n} = Dual.dual<\n  <T>(oldValue: T, newValue: T) => (self: MutableRef<T>) => boolean,\n  <T>(self: MutableRef<T>, oldValue: T, newValue: T) => boolean\n>(3, (self, oldValue, newValue) => {\n  if (Equal.equals(oldValue, self.current)) {\n    self.current = newValue\n    return true\n  }\n  return false\n})\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const decrement = (self: MutableRef<number>): MutableRef<number> => update(self, (n) => n - 1)\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const decrementAndGet = (self: MutableRef<number>): number => updateAndGet(self, (n) => n - 1)\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const get = <T>(self: MutableRef<T>): T => self.current\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const getAndDecrement = (self: MutableRef<number>): number => getAndUpdate(self, (n) => n - 1)\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const getAndIncrement = (self: MutableRef<number>): number => getAndUpdate(self, (n) => n + 1)\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const getAndSet: {\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(value: T): (self: MutableRef<T>) => T\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(self: MutableRef<T>, value: T): T\n} = Dual.dual<\n  <T>(value: T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, value: T) => T\n>(2, (self, value) => {\n  const ret = self.current\n  self.current = value\n  return ret\n})\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const getAndUpdate: {\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(f: (value: T) => T): (self: MutableRef<T>) => T\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(self: MutableRef<T>, f: (value: T) => T): T\n} = Dual.dual<\n  <T>(f: (value: T) => T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, f: (value: T) => T) => T\n>(2, (self, f) => getAndSet(self, f(get(self))))\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const increment = (self: MutableRef<number>): MutableRef<number> => update(self, (n) => n + 1)\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const incrementAndGet = (self: MutableRef<number>): number => updateAndGet(self, (n) => n + 1)\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const set: {\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(value: T): (self: MutableRef<T>) => MutableRef<T>\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(self: MutableRef<T>, value: T): MutableRef<T>\n} = Dual.dual<\n  <T>(value: T) => (self: MutableRef<T>) => MutableRef<T>,\n  <T>(self: MutableRef<T>, value: T) => MutableRef<T>\n>(2, (self, value) => {\n  self.current = value\n  return self\n})\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const setAndGet: {\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(value: T): (self: MutableRef<T>) => T\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(self: MutableRef<T>, value: T): T\n} = Dual.dual<\n  <T>(value: T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, value: T) => T\n>(2, (self, value) => {\n  self.current = value\n  return self.current\n})\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const update: {\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(f: (value: T) => T): (self: MutableRef<T>) => MutableRef<T>\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(self: MutableRef<T>, f: (value: T) => T): MutableRef<T>\n} = Dual.dual<\n  <T>(f: (value: T) => T) => (self: MutableRef<T>) => MutableRef<T>,\n  <T>(self: MutableRef<T>, f: (value: T) => T) => MutableRef<T>\n>(2, (self, f) => set(self, f(get(self))))\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const updateAndGet: {\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(f: (value: T) => T): (self: MutableRef<T>) => T\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(self: MutableRef<T>, f: (value: T) => T): T\n} = Dual.dual<\n  <T>(f: (value: T) => T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, f: (value: T) => T) => T\n>(2, (self, f) => setAndGet(self, f(get(self))))\n\n/**\n * @since 2.0.0\n * @category boolean\n */\nexport const toggle = (self: MutableRef<boolean>): MutableRef<boolean> => update(self, (_) => !_)\n", "/**\n * @since 2.0.0\n */\n\nimport type { Equal } from \"./Equal.js\"\nimport type { HashSet } from \"./HashSet.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as HM from \"./internal/hashMap.js\"\nimport * as keySet_ from \"./internal/hashMap/keySet.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = HM.HashMapTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface HashMap<out Key, out Value> extends Iterable<[Key, Value]>, Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace HashMap {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export type UpdateFn<V> = (option: Option<V>) => Option<V>\n  /**\n   * This type-level utility extracts the key type `K` from a `HashMap<K, V>` type.\n   *\n   * @example\n   * ```ts\n   * import { HashMap } from \"effect\"\n   *\n   * declare const hm: HashMap.HashMap<string, number>\n   *\n   * // $ExpectType string\n   * type K = HashMap.HashMap.Key<typeof hm>\n   *\n   * ```\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Key<T extends HashMap<any, any>> = [T] extends [HashMap<infer _K, infer _V>] ? _K : never\n  /**\n   * This type-level utility extracts the value type `V` from a `HashMap<K, V>` type.\n   *\n   * @example\n   * ```ts\n   * import { HashMap } from \"effect\"\n   *\n   * declare const hm: HashMap.HashMap<string, number>\n   *\n   * // $ExpectType number\n   * type V = HashMap.HashMap.Value<typeof hm>\n   *\n   * ```\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Value<T extends HashMap<any, any>> = [T] extends [HashMap<infer _K, infer _V>] ? _V : never\n\n  /**\n   * This type-level utility extracts the entry type `[K, V]` from a `HashMap<K, V>` type.\n   *\n   * @example\n   * ```ts\n   * import { HashMap } from \"effect\"\n   *\n   * declare const hm: HashMap.HashMap<string, number>\n   *\n   * // $ExpectType [string, number]\n   * type V = HashMap.HashMap.Entry<typeof hm>\n   *\n   * ```\n   * @since 3.9.0\n   * @category type-level\n   */\n  export type Entry<T extends HashMap<any, any>> = [Key<T>, Value<T>]\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isHashMap: {\n  /**\n   * @since 2.0.0\n   * @category refinements\n   */\n  <K, V>(u: Iterable<readonly [K, V]>): u is HashMap<K, V>\n  /**\n   * @since 2.0.0\n   * @category refinements\n   */\n  (u: unknown): u is HashMap<unknown, unknown>\n} = HM.isHashMap\n\n/**\n * Creates a new `HashMap`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: <K = never, V = never>() => HashMap<K, V> = HM.empty\n\n/**\n * Constructs a new `HashMap` from an array of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <Entries extends ReadonlyArray<readonly [any, any]>>(\n  ...entries: Entries\n) => HashMap<\n  Entries[number] extends readonly [infer K, any] ? K : never,\n  Entries[number] extends readonly [any, infer V] ? V : never\n> = HM.make\n\n/**\n * Creates a new `HashMap` from an iterable collection of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: <K, V>(entries: Iterable<readonly [K, V]>) => HashMap<K, V> = HM.fromIterable\n\n/**\n * Checks if the `HashMap` contains any entries.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isEmpty: <K, V>(self: HashMap<K, V>) => boolean = HM.isEmpty\n\n/**\n * Safely lookup the value for the specified key in the `HashMap` using the\n * internal hashing function.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const get: {\n  /**\n   * Safely lookup the value for the specified key in the `HashMap` using the\n   * internal hashing function.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K1 extends K, K>(key: K1): <V>(self: HashMap<K, V>) => Option<V>\n  /**\n   * Safely lookup the value for the specified key in the `HashMap` using the\n   * internal hashing function.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K1 extends K, K, V>(self: HashMap<K, V>, key: K1): Option<V>\n} = HM.get\n\n/**\n * Lookup the value for the specified key in the `HashMap` using a custom hash.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const getHash: {\n  /**\n   * Lookup the value for the specified key in the `HashMap` using a custom hash.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K1 extends K, K>(key: K1, hash: number): <V>(self: HashMap<K, V>) => Option<V>\n  /**\n   * Lookup the value for the specified key in the `HashMap` using a custom hash.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K1 extends K, K, V>(self: HashMap<K, V>, key: K1, hash: number): Option<V>\n} = HM.getHash\n\n/**\n * Unsafely lookup the value for the specified key in the `HashMap` using the\n * internal hashing function.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  /**\n   * Unsafely lookup the value for the specified key in the `HashMap` using the\n   * internal hashing function.\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  <K1 extends K, K>(key: K1): <V>(self: HashMap<K, V>) => V\n  /**\n   * Unsafely lookup the value for the specified key in the `HashMap` using the\n   * internal hashing function.\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  <K1 extends K, K, V>(self: HashMap<K, V>, key: K1): V\n} = HM.unsafeGet\n\n/**\n * Checks if the specified key has an entry in the `HashMap`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  /**\n   * Checks if the specified key has an entry in the `HashMap`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K1 extends K, K>(key: K1): <K, V>(self: HashMap<K, V>) => boolean\n  /**\n   * Checks if the specified key has an entry in the `HashMap`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K1 extends K, K, V>(self: HashMap<K, V>, key: K1): boolean\n} = HM.has\n\n/**\n * Checks if the specified key has an entry in the `HashMap` using a custom\n * hash.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const hasHash: {\n  /**\n   * Checks if the specified key has an entry in the `HashMap` using a custom\n   * hash.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K1 extends K, K>(key: K1, hash: number): <V>(self: HashMap<K, V>) => boolean\n  /**\n   * Checks if the specified key has an entry in the `HashMap` using a custom\n   * hash.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K1 extends K, K, V>(self: HashMap<K, V>, key: K1, hash: number): boolean\n} = HM.hasHash\n\n/**\n * Checks if an element matching the given predicate exists in the given `HashMap`.\n *\n * @example\n * ```ts\n * import { HashMap } from \"effect\"\n *\n * const hm = HashMap.make([1, 'a'])\n * HashMap.hasBy(hm, (value, key) => value === 'a' && key === 1); // -> true\n * HashMap.hasBy(hm, (value) => value === 'b'); // -> false\n *\n * ```\n *\n * @since 3.16.0\n * @category elements\n */\nexport const hasBy: {\n  /**\n   * Checks if an element matching the given predicate exists in the given `HashMap`.\n   *\n   * @example\n   * ```ts\n   * import { HashMap } from \"effect\"\n   *\n   * const hm = HashMap.make([1, 'a'])\n   * HashMap.hasBy(hm, (value, key) => value === 'a' && key === 1); // -> true\n   * HashMap.hasBy(hm, (value) => value === 'b'); // -> false\n   *\n   * ```\n   *\n   * @since 3.16.0\n   * @category elements\n   */\n  <K, V>(predicate: (value: NoInfer<V>, key: NoInfer<K>) => boolean): (self: HashMap<K, V>) => boolean\n  /**\n   * Checks if an element matching the given predicate exists in the given `HashMap`.\n   *\n   * @example\n   * ```ts\n   * import { HashMap } from \"effect\"\n   *\n   * const hm = HashMap.make([1, 'a'])\n   * HashMap.hasBy(hm, (value, key) => value === 'a' && key === 1); // -> true\n   * HashMap.hasBy(hm, (value) => value === 'b'); // -> false\n   *\n   * ```\n   *\n   * @since 3.16.0\n   * @category elements\n   */\n  <K, V>(\n   self: HashMap<K, V>,\n   predicate: (value: NoInfer<V>, key: NoInfer<K>) => boolean\n  ): boolean\n} = HM.hasBy\n\n/**\n * Sets the specified key to the specified value using the internal hashing\n * function.\n *\n * @since 2.0.0\n */\nexport const set: {\n  /**\n   * Sets the specified key to the specified value using the internal hashing\n   * function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, value: V): (self: HashMap<K, V>) => HashMap<K, V>\n  /**\n   * Sets the specified key to the specified value using the internal hashing\n   * function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: HashMap<K, V>, key: K, value: V): HashMap<K, V>\n} = HM.set\n\n/**\n * Returns an `IterableIterator` of the keys within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const keys: <K, V>(self: HashMap<K, V>) => IterableIterator<K> = HM.keys\n\n/**\n * Returns a `HashSet` of keys within the `HashMap`.\n *\n * @since 2.0.0\n * @category getter\n */\nexport const keySet: <K, V>(self: HashMap<K, V>) => HashSet<K> = keySet_.keySet\n\n/**\n * Returns an `IterableIterator` of the values within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const values: <K, V>(self: HashMap<K, V>) => IterableIterator<V> = HM.values\n\n/**\n * Returns an `Array` of the values within the `HashMap`.\n *\n * @since 3.13.0\n * @category getters\n */\nexport const toValues = <K, V>(self: HashMap<K, V>): Array<V> => Array.from(values(self))\n\n/**\n * Returns an `IterableIterator` of the entries within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const entries: <K, V>(self: HashMap<K, V>) => IterableIterator<[K, V]> = HM.entries\n\n/**\n * Returns an `Array<[K, V]>` of the entries within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const toEntries = <K, V>(self: HashMap<K, V>): Array<[K, V]> => Array.from(entries(self))\n\n/**\n * Returns the number of entries within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <K, V>(self: HashMap<K, V>) => number = HM.size\n\n/**\n * Counts all the element of the given HashMap that pass the given predicate\n *\n * **Example**\n *\n * ```ts\n * import { HashMap } from \"effect\"\n *\n * const map = HashMap.make([1, \"a\"], [2, \"b\"], [3, \"c\"])\n * const result = HashMap.countBy(map, (_v, key) => key % 2 === 1)\n * console.log(result) // 2\n * ```\n *\n * @since 3.17.0\n * @category folding\n */\nexport const countBy: {\n  /**\n   * Counts all the element of the given HashMap that pass the given predicate\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { HashMap } from \"effect\"\n   *\n   * const map = HashMap.make([1, \"a\"], [2, \"b\"], [3, \"c\"])\n   * const result = HashMap.countBy(map, (_v, key) => key % 2 === 1)\n   * console.log(result) // 2\n   * ```\n   *\n   * @since 3.17.0\n   * @category folding\n   */\n  <K, V>(predicate: (value: NoInfer<V>, key: NoInfer<K>) => boolean): (self: HashMap<K, V>) => number\n  /**\n   * Counts all the element of the given HashMap that pass the given predicate\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { HashMap } from \"effect\"\n   *\n   * const map = HashMap.make([1, \"a\"], [2, \"b\"], [3, \"c\"])\n   * const result = HashMap.countBy(map, (_v, key) => key % 2 === 1)\n   * console.log(result) // 2\n   * ```\n   *\n   * @since 3.17.0\n   * @category folding\n   */\n  <K, V>(\n   self: HashMap<K, V>,\n   predicate: (value: NoInfer<V>, key: NoInfer<K>) => boolean\n  ): number\n} = HM.countBy\n\n/**\n * Marks the `HashMap` as mutable.\n *\n * @since 2.0.0\n */\nexport const beginMutation: <K, V>(self: HashMap<K, V>) => HashMap<K, V> = HM.beginMutation\n\n/**\n * Marks the `HashMap` as immutable.\n *\n * @since 2.0.0\n */\nexport const endMutation: <K, V>(self: HashMap<K, V>) => HashMap<K, V> = HM.endMutation\n\n/**\n * Mutates the `HashMap` within the context of the provided function.\n *\n * @since 2.0.0\n */\nexport const mutate: {\n  /**\n   * Mutates the `HashMap` within the context of the provided function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(f: (self: HashMap<K, V>) => void): (self: HashMap<K, V>) => HashMap<K, V>\n  /**\n   * Mutates the `HashMap` within the context of the provided function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: HashMap<K, V>, f: (self: HashMap<K, V>) => void): HashMap<K, V>\n} = HM.mutate\n\n/**\n * Set or remove the specified key in the `HashMap` using the specified\n * update function. The value of the specified key will be computed using the\n * provided hash.\n *\n * The update function will be invoked with the current value of the key if it\n * exists, or `None` if no such value exists.\n *\n * @since 2.0.0\n */\nexport const modifyAt: {\n  /**\n   * Set or remove the specified key in the `HashMap` using the specified\n   * update function. The value of the specified key will be computed using the\n   * provided hash.\n   *\n   * The update function will be invoked with the current value of the key if it\n   * exists, or `None` if no such value exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, f: HashMap.UpdateFn<V>): (self: HashMap<K, V>) => HashMap<K, V>\n  /**\n   * Set or remove the specified key in the `HashMap` using the specified\n   * update function. The value of the specified key will be computed using the\n   * provided hash.\n   *\n   * The update function will be invoked with the current value of the key if it\n   * exists, or `None` if no such value exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: HashMap<K, V>, key: K, f: HashMap.UpdateFn<V>): HashMap<K, V>\n} = HM.modifyAt\n\n/**\n * Alter the value of the specified key in the `HashMap` using the specified\n * update function. The value of the specified key will be computed using the\n * provided hash.\n *\n * The update function will be invoked with the current value of the key if it\n * exists, or `None` if no such value exists.\n *\n * This function will always either update or insert a value into the `HashMap`.\n *\n * @since 2.0.0\n */\nexport const modifyHash: {\n  /**\n   * Alter the value of the specified key in the `HashMap` using the specified\n   * update function. The value of the specified key will be computed using the\n   * provided hash.\n   *\n   * The update function will be invoked with the current value of the key if it\n   * exists, or `None` if no such value exists.\n   *\n   * This function will always either update or insert a value into the `HashMap`.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, hash: number, f: HashMap.UpdateFn<V>): (self: HashMap<K, V>) => HashMap<K, V>\n  /**\n   * Alter the value of the specified key in the `HashMap` using the specified\n   * update function. The value of the specified key will be computed using the\n   * provided hash.\n   *\n   * The update function will be invoked with the current value of the key if it\n   * exists, or `None` if no such value exists.\n   *\n   * This function will always either update or insert a value into the `HashMap`.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: HashMap<K, V>, key: K, hash: number, f: HashMap.UpdateFn<V>): HashMap<K, V>\n} = HM.modifyHash\n\n/**\n * Updates the value of the specified key within the `HashMap` if it exists.\n *\n * @since 2.0.0\n */\nexport const modify: {\n  /**\n   * Updates the value of the specified key within the `HashMap` if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, f: (v: V) => V): (self: HashMap<K, V>) => HashMap<K, V>\n  /**\n   * Updates the value of the specified key within the `HashMap` if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: HashMap<K, V>, key: K, f: (v: V) => V): HashMap<K, V>\n} = HM.modify\n\n/**\n * Performs a union of this `HashMap` and that `HashMap`.\n *\n * @since 2.0.0\n */\nexport const union: {\n  /**\n   * Performs a union of this `HashMap` and that `HashMap`.\n   *\n   * @since 2.0.0\n   */\n  <K1, V1>(that: HashMap<K1, V1>): <K0, V0>(self: HashMap<K0, V0>) => HashMap<K1 | K0, V1 | V0>\n  /**\n   * Performs a union of this `HashMap` and that `HashMap`.\n   *\n   * @since 2.0.0\n   */\n  <K0, V0, K1, V1>(self: HashMap<K0, V0>, that: HashMap<K1, V1>): HashMap<K0 | K1, V0 | V1>\n} = HM.union\n\n/**\n * Remove the entry for the specified key in the `HashMap` using the internal\n * hashing function.\n *\n * @since 2.0.0\n */\nexport const remove: {\n  /**\n   * Remove the entry for the specified key in the `HashMap` using the internal\n   * hashing function.\n   *\n   * @since 2.0.0\n   */\n  <K>(key: K): <V>(self: HashMap<K, V>) => HashMap<K, V>\n  /**\n   * Remove the entry for the specified key in the `HashMap` using the internal\n   * hashing function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: HashMap<K, V>, key: K): HashMap<K, V>\n} = HM.remove\n\n/**\n * Removes all entries in the `HashMap` which have the specified keys.\n *\n * @since 2.0.0\n */\nexport const removeMany: {\n  /**\n   * Removes all entries in the `HashMap` which have the specified keys.\n   *\n   * @since 2.0.0\n   */\n  <K>(keys: Iterable<K>): <V>(self: HashMap<K, V>) => HashMap<K, V>\n  /**\n   * Removes all entries in the `HashMap` which have the specified keys.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: HashMap<K, V>, keys: Iterable<K>): HashMap<K, V>\n} = HM.removeMany\n\n/**\n * Maps over the entries of the `HashMap` using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Maps over the entries of the `HashMap` using the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, V, K>(f: (value: V, key: K) => A): (self: HashMap<K, V>) => HashMap<K, A>\n  /**\n   * Maps over the entries of the `HashMap` using the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <K, V, A>(self: HashMap<K, V>, f: (value: V, key: K) => A): HashMap<K, A>\n} = HM.map\n\n/**\n * Chains over the entries of the `HashMap` using the specified function.\n *\n * **NOTE**: the hash and equal of both maps have to be the same.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * Chains over the entries of the `HashMap` using the specified function.\n   *\n   * **NOTE**: the hash and equal of both maps have to be the same.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, K, B>(f: (value: A, key: K) => HashMap<K, B>): (self: HashMap<K, A>) => HashMap<K, B>\n  /**\n   * Chains over the entries of the `HashMap` using the specified function.\n   *\n   * **NOTE**: the hash and equal of both maps have to be the same.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <K, A, B>(self: HashMap<K, A>, f: (value: A, key: K) => HashMap<K, B>): HashMap<K, B>\n} = HM.flatMap\n\n/**\n * Applies the specified function to the entries of the `HashMap`.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  /**\n   * Applies the specified function to the entries of the `HashMap`.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <V, K>(f: (value: V, key: K) => void): (self: HashMap<K, V>) => void\n  /**\n   * Applies the specified function to the entries of the `HashMap`.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <V, K>(self: HashMap<K, V>, f: (value: V, key: K) => void): void\n} = HM.forEach\n\n/**\n * Reduces the specified state over the entries of the `HashMap`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  /**\n   * Reduces the specified state over the entries of the `HashMap`.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, V, K>(zero: Z, f: (accumulator: Z, value: V, key: K) => Z): (self: HashMap<K, V>) => Z\n  /**\n   * Reduces the specified state over the entries of the `HashMap`.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <K, V, Z>(self: HashMap<K, V>, zero: Z, f: (accumulator: Z, value: V, key: K) => Z): Z\n} = HM.reduce\n\n/**\n * Filters entries out of a `HashMap` using the specified predicate.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  /**\n   * Filters entries out of a `HashMap` using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <K, A, B extends A>(f: (a: NoInfer<A>, k: K) => a is B): (self: HashMap<K, A>) => HashMap<K, B>\n  /**\n   * Filters entries out of a `HashMap` using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <K, A>(f: (a: NoInfer<A>, k: K) => boolean): (self: HashMap<K, A>) => HashMap<K, A>\n  /**\n   * Filters entries out of a `HashMap` using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <K, A, B extends A>(self: HashMap<K, A>, f: (a: A, k: K) => a is B): HashMap<K, B>\n  /**\n   * Filters entries out of a `HashMap` using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <K, A>(self: HashMap<K, A>, f: (a: A, k: K) => boolean): HashMap<K, A>\n} = HM.filter\n\n/**\n * Filters out `None` values from a `HashMap` of `Options`s.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const compact: <K, A>(self: HashMap<K, Option<A>>) => HashMap<K, A> = HM.compact\n\n/**\n * Maps over the entries of the `HashMap` using the specified partial function\n * and filters out `None` values.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterMap: {\n  /**\n   * Maps over the entries of the `HashMap` using the specified partial function\n   * and filters out `None` values.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, K, B>(f: (value: A, key: K) => Option<B>): (self: HashMap<K, A>) => HashMap<K, B>\n  /**\n   * Maps over the entries of the `HashMap` using the specified partial function\n   * and filters out `None` values.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <K, A, B>(self: HashMap<K, A>, f: (value: A, key: K) => Option<B>): HashMap<K, B>\n} = HM.filterMap\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <K, A, B extends A>(predicate: (a: NoInfer<A>, k: K) => a is B): (self: HashMap<K, A>) => Option<[K, B]>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <K, A>(predicate: (a: NoInfer<A>, k: K) => boolean): (self: HashMap<K, A>) => Option<[K, A]>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <K, A, B extends A>(self: HashMap<K, A>, predicate: (a: A, k: K) => a is B): Option<[K, B]>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <K, A>(self: HashMap<K, A>, predicate: (a: A, k: K) => boolean): Option<[K, A]>\n} = HM.findFirst\n\n/**\n * Checks if any entry in a hashmap meets a specific condition.\n *\n * @since 3.13.0\n * @category elements\n */\nexport const some: {\n  /**\n   * Checks if any entry in a hashmap meets a specific condition.\n   *\n   * @since 3.13.0\n   * @category elements\n   */\n  <K, A>(predicate: (a: NoInfer<A>, k: K) => boolean): (self: HashMap<K, A>) => boolean\n  /**\n   * Checks if any entry in a hashmap meets a specific condition.\n   *\n   * @since 3.13.0\n   * @category elements\n   */\n  <K, A>(self: HashMap<K, A>, predicate: (a: A, k: K) => boolean): boolean\n} = HM.some\n\n/**\n * Checks if all entries in a hashmap meets a specific condition.\n *\n * @param self - The hashmap to check.\n * @param predicate - The condition to test entries (value, key).\n *\n * @since 3.14.0\n * @category elements\n */\nexport const every: {\n  /**\n   * Checks if all entries in a hashmap meets a specific condition.\n   *\n   * @param self - The hashmap to check.\n   * @param predicate - The condition to test entries (value, key).\n   *\n   * @since 3.14.0\n   * @category elements\n   */\n  <K, A>(predicate: (a: NoInfer<A>, k: K) => boolean): (self: HashMap<K, A>) => boolean\n  /**\n   * Checks if all entries in a hashmap meets a specific condition.\n   *\n   * @param self - The hashmap to check.\n   * @param predicate - The condition to test entries (value, key).\n   *\n   * @since 3.14.0\n   * @category elements\n   */\n  <K, A>(self: HashMap<K, A>, predicate: (a: A, k: K) => boolean): boolean\n} = HM.every\n", "/**\n * A data type for immutable linked lists representing ordered collections of elements of type `A`.\n *\n * This data type is optimal for last-in-first-out (LIFO), stack-like access patterns. If you need another access pattern, for example, random access or FIFO, consider using a collection more suited to this than `List`.\n *\n * **Performance**\n *\n * - Time: `List` has `O(1)` prepend and head/tail access. Most other operations are `O(n)` on the number of elements in the list. This includes the index-based lookup of elements, `length`, `append` and `reverse`.\n * - Space: `List` implements structural sharing of the tail list. This means that many operations are either zero- or constant-memory cost.\n *\n * @since 2.0.0\n */\n\n/**\n * This file is ported from\n *\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n */\nimport * as Arr from \"./Array.js\"\nimport * as Chunk from \"./Chunk.js\"\nimport * as Either from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport { dual, identity, unsafeCoerce } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { nonEmpty, NonEmptyIterable } from \"./NonEmptyIterable.js\"\nimport * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty, type Predicate, type Refinement } from \"./Predicate.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * Represents an immutable linked list of elements of type `A`.\n *\n * A `List` is optimal for last-in-first-out (LIFO), stack-like access patterns.\n * If you need another access pattern, for example, random access or FIFO,\n * consider using a collection more suited for that other than `List`.\n *\n * @since 2.0.0\n * @category models\n */\nexport type List<A> = Cons<A> | Nil<A>\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/List\")\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Nil<out A> extends Iterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly _tag: \"Nil\"\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Cons<out A> extends NonEmptyIterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly _tag: \"Cons\"\n  readonly head: A\n  readonly tail: List<A>\n}\n\n/**\n * Converts the specified `List` to an `Array`.\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toArray = <A>(self: List<A>): Array<A> => Arr.fromIterable(self)\n\n/**\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <A>(isEquivalent: Equivalence.Equivalence<A>): Equivalence.Equivalence<List<A>> =>\n  Equivalence.mapInput(Arr.getEquivalence(isEquivalent), toArray<A>)\n\nconst _equivalence = getEquivalence(Equal.equals)\n\nconst ConsProto: Omit<Cons<unknown>, \"head\" | \"tail\" | typeof nonEmpty> = {\n  [TypeId]: TypeId,\n  _tag: \"Cons\",\n  toString(this: Cons<unknown>) {\n    return format(this.toJSON())\n  },\n  toJSON(this: Cons<unknown>) {\n    return {\n      _id: \"List\",\n      _tag: \"Cons\",\n      values: toArray(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  [Equal.symbol](this: Cons<unknown>, that: unknown): boolean {\n    return isList(that) &&\n      this._tag === that._tag &&\n      _equivalence(this, that)\n  },\n  [Hash.symbol](this: Cons<unknown>): number {\n    return Hash.cached(this, Hash.array(toArray(this)))\n  },\n  [Symbol.iterator](this: Cons<unknown>): Iterator<unknown> {\n    let done = false\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let self: List<unknown> = this\n    return {\n      next() {\n        if (done) {\n          return this.return!()\n        }\n        if (self._tag === \"Nil\") {\n          done = true\n          return this.return!()\n        }\n        const value: unknown = self.head\n        self = self.tail\n        return { done, value }\n      },\n      return(value?: unknown) {\n        if (!done) {\n          done = true\n        }\n        return { done: true, value }\n      }\n    }\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\ninterface MutableCons<A> extends Cons<A> {\n  head: A\n  tail: List<A>\n}\n\nconst makeCons = <A>(head: A, tail: List<A>): MutableCons<A> => {\n  const cons = Object.create(ConsProto)\n  cons.head = head\n  cons.tail = tail\n  return cons\n}\n\nconst NilHash = Hash.string(\"Nil\")\nconst NilProto: Nil<unknown> = {\n  [TypeId]: TypeId,\n  _tag: \"Nil\",\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"List\",\n      _tag: \"Nil\"\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  [Hash.symbol](): number {\n    return NilHash\n  },\n  [Equal.symbol](that: unknown): boolean {\n    return isList(that) && this._tag === that._tag\n  },\n  [Symbol.iterator](): Iterator<unknown> {\n    return {\n      next() {\n        return { done: true, value: undefined }\n      }\n    }\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n} as const\n\nconst _Nil = Object.create(NilProto) as Nil<never>\n\n/**\n * Returns `true` if the specified value is a `List`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isList: {\n  /**\n   * Returns `true` if the specified value is a `List`, `false` otherwise.\n   *\n   * @since 2.0.0\n   * @category refinements\n   */\n  <A>(u: Iterable<A>): u is List<A>\n  /**\n   * Returns `true` if the specified value is a `List`, `false` otherwise.\n   *\n   * @since 2.0.0\n   * @category refinements\n   */\n  (u: unknown): u is List<unknown>\n} = (u: unknown): u is List<unknown> => hasProperty(u, TypeId)\n\n/**\n * Returns `true` if the specified value is a `List.Nil<A>`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isNil = <A>(self: List<A>): self is Nil<A> => self._tag === \"Nil\"\n\n/**\n * Returns `true` if the specified value is a `List.Cons<A>`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isCons = <A>(self: List<A>): self is Cons<A> => self._tag === \"Cons\"\n\n/**\n * Returns the number of elements contained in the specified `List`\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size = <A>(self: List<A>): number => {\n  let these = self\n  let len = 0\n  while (!isNil(these)) {\n    len += 1\n    these = these.tail\n  }\n  return len\n}\n\n/**\n * Constructs a new empty `List<A>`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const nil = <A = never>(): List<A> => _Nil\n\n/**\n * Constructs a new `List.Cons<A>` from the specified `head` and `tail` values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const cons = <A>(head: A, tail: List<A>): Cons<A> => makeCons(head, tail)\n\n/**\n * Constructs a new empty `List<A>`.\n *\n * Alias of {@link nil}.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = nil\n\n/**\n * Constructs a new `List<A>` from the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const of = <A>(value: A): Cons<A> => makeCons(value, _Nil)\n\n/**\n * Creates a new `List` from an iterable collection of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable = <A>(prefix: Iterable<A>): List<A> => {\n  const iterator = prefix[Symbol.iterator]()\n  let next: IteratorResult<A>\n  if ((next = iterator.next()) && !next.done) {\n    const result = makeCons(next.value, _Nil)\n    let curr = result\n    while ((next = iterator.next()) && !next.done) {\n      const temp = makeCons(next.value, _Nil)\n      curr.tail = temp\n      curr = temp\n    }\n    return result\n  } else {\n    return _Nil\n  }\n}\n\n/**\n * Constructs a new `List<A>` from the specified values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make = <Elements extends readonly [any, ...Array<any>]>(\n  ...elements: Elements\n): Cons<Elements[number]> => fromIterable(elements) as any\n\n/**\n * Appends the specified element to the end of the `List`, creating a new `Cons`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  /**\n   * Appends the specified element to the end of the `List`, creating a new `Cons`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(element: B): <A>(self: List<A>) => Cons<A | B>\n  /**\n   * Appends the specified element to the end of the `List`, creating a new `Cons`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: List<A>, element: B): Cons<A | B>\n} = dual(2, <A, B>(self: List<A>, element: B): Cons<A | B> => appendAll(self, of(element)))\n\n/**\n * Concatenates two lists, combining their elements.\n * If either list is non-empty, the result is also a non-empty list.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { List } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   List.make(1, 2).pipe(List.appendAll(List.make(\"a\", \"b\")), List.toArray),\n *   [1, 2, \"a\", \"b\"]\n * )\n * ```\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll: {\n  /**\n   * Concatenates two lists, combining their elements.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.appendAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [1, 2, \"a\", \"b\"]\n   * )\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <S extends List<any>, T extends List<any>>(that: T): (self: S) => List.OrNonEmpty<S, T, List.Infer<S> | List.Infer<T>>\n  /**\n   * Concatenates two lists, combining their elements.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.appendAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [1, 2, \"a\", \"b\"]\n   * )\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: List<A>, that: Cons<B>): Cons<A | B>\n  /**\n   * Concatenates two lists, combining their elements.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.appendAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [1, 2, \"a\", \"b\"]\n   * )\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Cons<A>, that: List<B>): Cons<A | B>\n  /**\n   * Concatenates two lists, combining their elements.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.appendAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [1, 2, \"a\", \"b\"]\n   * )\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: List<A>, that: List<B>): List<A | B>\n} = dual(2, <A, B>(self: List<A>, that: List<B>): List<A | B> => prependAll(that, self))\n\n/**\n * Prepends the specified element to the beginning of the list.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  /**\n   * Prepends the specified element to the beginning of the list.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(element: B): <A>(self: List<A>) => Cons<A | B>\n  /**\n   * Prepends the specified element to the beginning of the list.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: List<A>, element: B): Cons<A | B>\n} = dual(2, <A, B>(self: List<A>, element: B): Cons<A | B> => cons</**\n * Prepends the specified element to the beginning of the list.\n *\n * @category concatenating\n * @since 2.0.0\n */\nA | B>(element, self))\n\n/**\n * Prepends the specified prefix list to the beginning of the specified list.\n * If either list is non-empty, the result is also a non-empty list.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { List } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n *   [\"a\", \"b\", 1, 2]\n * )\n * ```\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll: {\n  /**\n   * Prepends the specified prefix list to the beginning of the specified list.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <S extends List<any>, T extends List<any>>(that: T): (self: S) => List.OrNonEmpty<S, T, List.Infer<S> | List.Infer<T>>\n  /**\n   * Prepends the specified prefix list to the beginning of the specified list.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: List<A>, that: Cons<B>): Cons<A | B>\n  /**\n   * Prepends the specified prefix list to the beginning of the specified list.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Cons<A>, that: List<B>): Cons<A | B>\n  /**\n   * Prepends the specified prefix list to the beginning of the specified list.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: List<A>, that: List<B>): List<A | B>\n} = dual(2, <A, B>(self: List<A>, prefix: List<B>): List<A | B> => {\n  if (isNil(self)) {\n    return prefix\n  } else if (isNil(prefix)) {\n    return self\n  } else {\n    const result = makeCons</**\n     * Prepends the specified prefix list to the beginning of the specified list.\n     * If either list is non-empty, the result is also a non-empty list.\n     *\n     * @example\n     * ```ts\n     * import * as assert from \"node:assert\"\n     * import { List } from \"effect\"\n     *\n     * assert.deepStrictEqual(\n     *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n     *   [\"a\", \"b\", 1, 2]\n     * )\n     * ```\n     *\n     * @category concatenating\n     * @since 2.0.0\n     */\n    A | B>(prefix.head, self)\n    let curr = result\n    let that = prefix.tail\n    while (!isNil(that)) {\n      const temp = makeCons</**\n       * Prepends the specified prefix list to the beginning of the specified list.\n       * If either list is non-empty, the result is also a non-empty list.\n       *\n       * @example\n       * ```ts\n       * import * as assert from \"node:assert\"\n       * import { List } from \"effect\"\n       *\n       * assert.deepStrictEqual(\n       *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n       *   [\"a\", \"b\", 1, 2]\n       * )\n       * ```\n       *\n       * @category concatenating\n       * @since 2.0.0\n       */\n      A | B>(that.head, self)\n      curr.tail = temp\n      curr = temp\n      that = that.tail\n    }\n    return result\n  }\n})\n\n/**\n * Prepends the specified prefix list (in reverse order) to the beginning of the\n * specified list.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAllReversed: {\n  /**\n   * Prepends the specified prefix list (in reverse order) to the beginning of the\n   * specified list.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(prefix: List<B>): <A>(self: List<A>) => List<A | B>\n  /**\n   * Prepends the specified prefix list (in reverse order) to the beginning of the\n   * specified list.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: List<A>, prefix: List<B>): List<A | B>\n} = dual(2, <A, B>(self: List<A>, prefix: List<B>): List<A | B> => {\n  let out: List<A | B> = self\n  let pres = prefix\n  while (isCons(pres)) {\n    out = makeCons(pres.head, out)\n    pres = pres.tail\n  }\n  return out\n})\n\n/**\n * Drops the first `n` elements from the specified list.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const drop: {\n  /**\n   * Drops the first `n` elements from the specified list.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  (n: number): <A>(self: List<A>) => List<A>\n  /**\n   * Drops the first `n` elements from the specified list.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A>(self: List<A>, n: number): List<A>\n} = dual(2, <A>(self: List<A>, n: number): List<A> => {\n  if (n <= 0) {\n    return self\n  }\n  if (n >= size(self)) {\n    return _Nil\n  }\n  let these = self\n  let i = 0\n  while (!isNil(these) && i < n) {\n    these = these.tail\n    i += 1\n  }\n  return these\n})\n\n/**\n * Check if a predicate holds true for every `List` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const every: {\n  /**\n   * Check if a predicate holds true for every `List` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: List<A>) => self is List<B>\n  /**\n   * Check if a predicate holds true for every `List` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(predicate: Predicate<A>): (self: List<A>) => boolean\n  /**\n   * Check if a predicate holds true for every `List` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): self is List<B>\n  /**\n   * Check if a predicate holds true for every `List` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: List<A>, predicate: Predicate<A>): boolean\n} = dual(2, <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): self is List<B> => {\n  for (const a of self) {\n    if (!refinement(a)) {\n      return false\n    }\n  }\n  return true\n})\n\n/**\n * Check if a predicate holds true for some `List` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const some: {\n  /**\n   * Check if a predicate holds true for some `List` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => self is Cons<A>\n  /**\n   * Check if a predicate holds true for some `List` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: List<A>, predicate: Predicate<A>): self is Cons<A>\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): self is Cons<A> => {\n  let these = self\n  while (!isNil(these)) {\n    if (predicate(these.head)) {\n      return true\n    }\n    these = these.tail\n  }\n  return false\n})\n\n/**\n * Filters a list using the specified predicate.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const filter: {\n  /**\n   * Filters a list using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: List<A>) => List<B>\n  /**\n   * Filters a list using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => List<A>\n  /**\n   * Filters a list using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): List<B>\n  /**\n   * Filters a list using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A>(self: List<A>, predicate: Predicate<A>): List<A>\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): List<A> => noneIn(self, predicate, false))\n\n// everything seen so far is not included\nconst noneIn = <A>(\n  self: List<A>,\n  predicate: Predicate<A>,\n  isFlipped: boolean\n): List<A> => {\n  while (true) {\n    if (isNil(self)) {\n      return _Nil\n    } else {\n      if (predicate(self.head) !== isFlipped) {\n        return allIn(self, self.tail, predicate, isFlipped)\n      } else {\n        self = self.tail\n      }\n    }\n  }\n}\n\n// everything from 'start' is included, if everything from this point is in we can return the origin\n// start otherwise if we discover an element that is out we must create a new partial list.\nconst allIn = <A>(\n  start: List<A>,\n  remaining: List<A>,\n  predicate: Predicate<A>,\n  isFlipped: boolean\n): List<A> => {\n  while (true) {\n    if (isNil(remaining)) {\n      return start\n    } else {\n      if (predicate(remaining.head) !== isFlipped) {\n        remaining = remaining.tail\n      } else {\n        return partialFill(start, remaining, predicate, isFlipped)\n      }\n    }\n  }\n}\n\n// we have seen elements that should be included then one that should be excluded, start building\nconst partialFill = <A>(\n  origStart: List<A>,\n  firstMiss: List<A>,\n  predicate: Predicate<A>,\n  isFlipped: boolean\n): List<A> => {\n  const newHead = makeCons<A>(unsafeHead(origStart)!, _Nil)\n  let toProcess = unsafeTail(origStart)! as Cons<A>\n  let currentLast = newHead\n\n  // we know that all elements are :: until at least firstMiss.tail\n  while (!(toProcess === firstMiss)) {\n    const newElem = makeCons(unsafeHead(toProcess)!, _Nil)\n    currentLast.tail = newElem\n    currentLast = unsafeCoerce(newElem)\n    toProcess = unsafeCoerce(toProcess.tail)\n  }\n\n  // at this point newHead points to a list which is a duplicate of all the 'in' elements up to the first miss.\n  // currentLast is the last element in that list.\n\n  // now we are going to try and share as much of the tail as we can, only moving elements across when we have to.\n  let next = firstMiss.tail\n  let nextToCopy: Cons<A> = unsafeCoerce(next) // the next element we would need to copy to our list if we cant share.\n  while (!isNil(next)) {\n    // generally recommended is next.isNonEmpty but this incurs an extra method call.\n    const head = unsafeHead(next)!\n    if (predicate(head) !== isFlipped) {\n      next = next.tail\n    } else {\n      // its not a match - do we have outstanding elements?\n      while (!(nextToCopy === next)) {\n        const newElem = makeCons(unsafeHead(nextToCopy)!, _Nil)\n        currentLast.tail = newElem\n        currentLast = newElem\n        nextToCopy = unsafeCoerce(nextToCopy.tail)\n      }\n      nextToCopy = unsafeCoerce(next.tail)\n      next = next.tail\n    }\n  }\n\n  // we have remaining elements - they are unchanged attach them to the end\n  if (!isNil(nextToCopy)) {\n    currentLast.tail = nextToCopy\n  }\n  return newHead\n}\n\n/**\n * Filters and maps a list using the specified partial function. The resulting\n * list may be smaller than the input list due to the possibility of the partial\n * function not being defined for some elements.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const filterMap: {\n  /**\n   * Filters and maps a list using the specified partial function. The resulting\n   * list may be smaller than the input list due to the possibility of the partial\n   * function not being defined for some elements.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B>(f: (a: A) => Option.Option<B>): (self: List<A>) => List<B>\n  /**\n   * Filters and maps a list using the specified partial function. The resulting\n   * list may be smaller than the input list due to the possibility of the partial\n   * function not being defined for some elements.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B>(self: List<A>, f: (a: A) => Option.Option<B>): List<B>\n} = dual(2, <A, B>(self: List<A>, f: (a: A) => Option.Option<B>): List<B> => {\n  const bs: Array<B> = []\n  for (const a of self) {\n    const oa = f(a)\n    if (Option.isSome(oa)) {\n      bs.push(oa.value)\n    }\n  }\n  return fromIterable(bs)\n})\n\n/**\n * Removes all `None` values from the specified list.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const compact = <A>(self: List<Option.Option<A>>): List<A> => filterMap(self, identity)\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: List<A>) => Option.Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => Option.Option<A>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): Option.Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: List<A>, predicate: Predicate<A>): Option.Option<A>\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): Option.Option<A> => {\n  let these = self\n  while (!isNil(these)) {\n    if (predicate(these.head)) {\n      return Option.some(these.head)\n    }\n    these = these.tail\n  }\n  return Option.none()\n})\n\n/**\n * Applies a function to each element in a list and returns a new list containing the concatenated mapped elements.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * Applies a function to each element in a list and returns a new list containing the concatenated mapped elements.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <S extends List<any>, T extends List<any>>(f: (a: List.Infer<S>, i: number) => T): (self: S) => List.AndNonEmpty<S, T, List.Infer<T>>\n  /**\n   * Applies a function to each element in a list and returns a new list containing the concatenated mapped elements.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, B>(self: Cons<A>, f: (a: A, i: number) => Cons<B>): Cons<B>\n  /**\n   * Applies a function to each element in a list and returns a new list containing the concatenated mapped elements.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, B>(self: List<A>, f: (a: A, i: number) => List<B>): List<B>\n} = dual(2, <A, B>(self: List<A>, f: (a: A) => List<B>): List<B> => {\n  let rest = self\n  let head: MutableCons<B> | undefined = undefined\n  let tail: MutableCons<B> | undefined = undefined\n  while (!isNil(rest)) {\n    let bs = f(rest.head)\n    while (!isNil(bs)) {\n      const next = makeCons(bs.head, _Nil)\n      if (tail === undefined) {\n        head = next\n      } else {\n        tail.tail = next\n      }\n      tail = next\n      bs = bs.tail\n    }\n    rest = rest.tail\n  }\n  if (head === undefined) {\n    return _Nil\n  }\n  return head\n})\n\n/**\n * Applies the specified function to each element of the `List`.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const forEach: {\n  /**\n   * Applies the specified function to each element of the `List`.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B>(f: (a: A) => B): (self: List<A>) => void\n  /**\n   * Applies the specified function to each element of the `List`.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B>(self: List<A>, f: (a: A) => B): void\n} = dual(2, <A, B>(self: List<A>, f: (a: A) => B): void => {\n  let these = self\n  while (!isNil(these)) {\n    f(these.head)\n    these = these.tail\n  }\n})\n\n/**\n * Returns the first element of the specified list, or `None` if the list is\n * empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const head = <A>(self: List<A>): Option.Option<A> => isNil(self) ? Option.none() : Option.some(self.head)\n\n/**\n * Returns the last element of the specified list, or `None` if the list is\n * empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const last = <A>(self: List<A>): Option.Option<A> => isNil(self) ? Option.none() : Option.some(unsafeLast(self)!)\n\n/**\n * @since 2.0.0\n */\nexport declare namespace List {\n  /**\n   * @since 2.0.0\n   */\n  export type Infer<S extends List<any>> = S extends List<infer A> ? A : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type With<S extends List<any>, A> = S extends Cons<any> ? Cons<A> : List<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type OrNonEmpty<S extends List<any>, T extends List<any>, A> = S extends Cons<any> ? Cons<A>\n    : T extends Cons<any> ? Cons<A>\n    : List<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type AndNonEmpty<S extends List<any>, T extends List<any>, A> = S extends Cons<any> ?\n    T extends Cons<any> ? Cons<A>\n    : List<A> :\n    List<A>\n}\n\n/**\n * Applies the specified mapping function to each element of the list.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Applies the specified mapping function to each element of the list.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <S extends List<any>, B>(f: (a: List.Infer<S>, i: number) => B): (self: S) => List.With<S, B>\n  /**\n   * Applies the specified mapping function to each element of the list.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <S extends List<any>, B>(self: S, f: (a: List.Infer<S>, i: number) => B): List.With<S, B>\n} = dual(2, <A, B>(self: List<A>, f: (a: A, i: number) => B): List<B> => {\n  if (isNil(self)) {\n    return self as unknown as List<B>\n  } else {\n    let i = 0\n    const head = makeCons(f(self.head, i++), _Nil)\n    let nextHead = head\n    let rest = self.tail\n    while (!isNil(rest)) {\n      const next = makeCons(f(rest.head, i++), _Nil)\n      nextHead.tail = next\n      nextHead = next\n      rest = rest.tail\n    }\n    return head\n  }\n})\n\n/**\n * Partition a list into two lists, where the first list contains all elements\n * that did not satisfy the specified predicate, and the second list contains\n * all elements that did satisfy the specified predicate.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const partition: {\n  /**\n   * Partition a list into two lists, where the first list contains all elements\n   * that did not satisfy the specified predicate, and the second list contains\n   * all elements that did satisfy the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: List<A>) => [excluded: List<Exclude<A, B>>, satisfying: List<B>]\n  /**\n   * Partition a list into two lists, where the first list contains all elements\n   * that did not satisfy the specified predicate, and the second list contains\n   * all elements that did satisfy the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => [excluded: List<A>, satisfying: List<A>]\n  /**\n   * Partition a list into two lists, where the first list contains all elements\n   * that did not satisfy the specified predicate, and the second list contains\n   * all elements that did satisfy the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): [excluded: List<Exclude<A, B>>, satisfying: List<B>]\n  /**\n   * Partition a list into two lists, where the first list contains all elements\n   * that did not satisfy the specified predicate, and the second list contains\n   * all elements that did satisfy the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A>(self: List<A>, predicate: Predicate<A>): [excluded: List<A>, satisfying: List<A>]\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): [excluded: List<A>, satisfying: List<A>] => {\n  const left: Array<A> = []\n  const right: Array<A> = []\n  for (const a of self) {\n    if (predicate(a)) {\n      right.push(a)\n    } else {\n      left.push(a)\n    }\n  }\n  return [fromIterable(left), fromIterable(right)]\n})\n\n/**\n * Partition a list into two lists, where the first list contains all elements\n * for which the specified function returned a `Left`, and the second list\n * contains all elements for which the specified function returned a `Right`.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const partitionMap: {\n  /**\n   * Partition a list into two lists, where the first list contains all elements\n   * for which the specified function returned a `Left`, and the second list\n   * contains all elements for which the specified function returned a `Right`.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B, C>(f: (a: A) => Either.Either<C, B>): (self: List<A>) => [left: List<B>, right: List<C>]\n  /**\n   * Partition a list into two lists, where the first list contains all elements\n   * for which the specified function returned a `Left`, and the second list\n   * contains all elements for which the specified function returned a `Right`.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B, C>(self: List<A>, f: (a: A) => Either.Either<C, B>): [left: List<B>, right: List<C>]\n} = dual(2, <A, B, C>(self: List<A>, f: (a: A) => Either.Either<C, B>): [left: List<B>, right: List<C>] => {\n  const left: Array<B> = []\n  const right: Array<C> = []\n  for (const a of self) {\n    const e = f(a)\n    if (Either.isLeft(e)) {\n      left.push(e.left)\n    } else {\n      right.push(e.right)\n    }\n  }\n  return [fromIterable(left), fromIterable(right)]\n})\n\n/**\n * Folds over the elements of the list using the specified function, using the\n * specified initial value.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  /**\n   * Folds over the elements of the list using the specified function, using the\n   * specified initial value.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, A>(zero: Z, f: (b: Z, a: A) => Z): (self: List<A>) => Z\n  /**\n   * Folds over the elements of the list using the specified function, using the\n   * specified initial value.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <A, Z>(self: List<A>, zero: Z, f: (b: Z, a: A) => Z): Z\n} = dual(3, <A, Z>(self: List<A>, zero: Z, f: (b: Z, a: A) => Z): Z => {\n  let acc = zero\n  let these = self\n  while (!isNil(these)) {\n    acc = f(acc, these.head)\n    these = these.tail\n  }\n  return acc\n})\n\n/**\n * Folds over the elements of the list using the specified function, beginning\n * with the last element of the list, using the specified initial value.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduceRight: {\n  /**\n   * Folds over the elements of the list using the specified function, beginning\n   * with the last element of the list, using the specified initial value.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, A>(zero: Z, f: (accumulator: Z, value: A) => Z): (self: List<A>) => Z\n  /**\n   * Folds over the elements of the list using the specified function, beginning\n   * with the last element of the list, using the specified initial value.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, A>(self: List<A>, zero: Z, f: (accumulator: Z, value: A) => Z): Z\n} = dual(3, <Z, A>(self: List<A>, zero: Z, f: (accumulator: Z, value: A) => Z): Z => {\n  let acc = zero\n  let these = reverse(self)\n  while (!isNil(these)) {\n    acc = f(acc, these.head)\n    these = these.tail\n  }\n  return acc\n})\n\n/**\n * Returns a new list with the elements of the specified list in reverse order.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const reverse = <A>(self: List<A>): List<A> => {\n  let result = empty<A>()\n  let these = self\n  while (!isNil(these)) {\n    result = prepend(result, these.head)\n    these = these.tail\n  }\n  return result\n}\n\n/**\n * Splits the specified list into two lists at the specified index.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const splitAt: {\n  /**\n   * Splits the specified list into two lists at the specified index.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  (n: number): <A>(self: List<A>) => [beforeIndex: List<A>, fromIndex: List<A>]\n  /**\n   * Splits the specified list into two lists at the specified index.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A>(self: List<A>, n: number): [beforeIndex: List<A>, fromIndex: List<A>]\n} = dual(2, <A>(self: List<A>, n: number): [List<A>, List<A>] => [take(self, n), drop(self, n)])\n\n/**\n * Returns the tail of the specified list, or `None` if the list is empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const tail = <A>(self: List<A>): Option.Option<List<A>> => isNil(self) ? Option.none() : Option.some(self.tail)\n\n/**\n * Takes the specified number of elements from the beginning of the specified\n * list.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const take: {\n  /**\n   * Takes the specified number of elements from the beginning of the specified\n   * list.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  (n: number): <A>(self: List<A>) => List<A>\n  /**\n   * Takes the specified number of elements from the beginning of the specified\n   * list.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A>(self: List<A>, n: number): List<A>\n} = dual(2, <A>(self: List<A>, n: number): List<A> => {\n  if (n <= 0) {\n    return _Nil\n  }\n  if (n >= size(self)) {\n    return self\n  }\n  let these = make(unsafeHead(self))\n  let current = unsafeTail(self)!\n  for (let i = 1; i < n; i++) {\n    these = makeCons(unsafeHead(current), these)\n    current = unsafeTail(current!)\n  }\n  return reverse(these)\n})\n\n/**\n * Converts the specified `List` to a `Chunk`.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const toChunk = <A>(self: List<A>): Chunk.Chunk<A> => Chunk.fromIterable(self)\n\nconst getExpectedListToBeNonEmptyErrorMessage = \"Expected List to be non-empty\"\n\n/**\n * Unsafely returns the first element of the specified `List`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeHead = <A>(self: List<A>): A => {\n  if (isNil(self)) {\n    throw new Error(getExpectedListToBeNonEmptyErrorMessage)\n  }\n  return self.head\n}\n\n/**\n * Unsafely returns the last element of the specified `List`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeLast = <A>(self: List<A>): A => {\n  if (isNil(self)) {\n    throw new Error(getExpectedListToBeNonEmptyErrorMessage)\n  }\n  let these = self\n  let scout = self.tail\n  while (!isNil(scout)) {\n    these = scout\n    scout = scout.tail\n  }\n  return these.head\n}\n\n/**\n * Unsafely returns the tail of the specified `List`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeTail = <A>(self: List<A>): List<A> => {\n  if (isNil(self)) {\n    throw new Error(getExpectedListToBeNonEmptyErrorMessage)\n  }\n  return self.tail\n}\n", "/**\n * @since 2.0.0\n */\nimport * as runtimeFlags from \"./internal/runtimeFlags.js\"\nimport * as internal from \"./internal/runtimeFlagsPatch.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type RuntimeFlagsPatch = number & {\n  readonly RuntimeFlagsPatch: unique symbol\n}\n\n/**\n * The empty `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: RuntimeFlagsPatch = internal.empty\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (active: number, enabled: number) => RuntimeFlagsPatch = internal.make\n\n/**\n * Creates a `RuntimeFlagsPatch` describing enabling the provided `RuntimeFlag`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const enable: (flag: RuntimeFlags.RuntimeFlag) => RuntimeFlagsPatch = internal.enable\n\n/**\n * Creates a `RuntimeFlagsPatch` describing disabling the provided `RuntimeFlag`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const disable: (flag: RuntimeFlags.RuntimeFlag) => RuntimeFlagsPatch = internal.disable\n\n/**\n * Returns `true` if the specified `RuntimeFlagsPatch` is empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty: (patch: RuntimeFlagsPatch) => boolean = internal.isEmpty\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n * `RuntimeFlag` as active.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isActive: {\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n   * `RuntimeFlag` as active.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (flag: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => boolean\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n   * `RuntimeFlag` as active.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (self: RuntimeFlagsPatch, flag: RuntimeFlagsPatch): boolean\n} = internal.isActive\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n * `RuntimeFlag` as enabled.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isEnabled: {\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n   * `RuntimeFlag` as enabled.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (flag: RuntimeFlags.RuntimeFlag): (self: RuntimeFlagsPatch) => boolean\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n   * `RuntimeFlag` as enabled.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (self: RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag): boolean\n} = internal.isEnabled\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n * `RuntimeFlag` as disabled.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isDisabled: {\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n   * `RuntimeFlag` as disabled.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (flag: RuntimeFlags.RuntimeFlag): (self: RuntimeFlagsPatch) => boolean\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n   * `RuntimeFlag` as disabled.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (self: RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag): boolean\n} = internal.isDisabled\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` includes the specified\n * `RuntimeFlag`, `false` otherwise.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const includes: {\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` includes the specified\n   * `RuntimeFlag`, `false` otherwise.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (flag: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => boolean\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` includes the specified\n   * `RuntimeFlag`, `false` otherwise.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (self: RuntimeFlagsPatch, flag: RuntimeFlagsPatch): boolean\n} = internal.isActive\n\n/**\n * Creates a `RuntimeFlagsPatch` describing the application of the `self` patch,\n * followed by `that` patch.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const andThen: {\n  /**\n   * Creates a `RuntimeFlagsPatch` describing the application of the `self` patch,\n   * followed by `that` patch.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (that: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  /**\n   * Creates a `RuntimeFlagsPatch` describing the application of the `self` patch,\n   * followed by `that` patch.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: RuntimeFlagsPatch, that: RuntimeFlagsPatch): RuntimeFlagsPatch\n} = internal.andThen\n\n/**\n * Creates a `RuntimeFlagsPatch` describing application of both the `self` patch\n * and `that` patch.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const both: {\n  /**\n   * Creates a `RuntimeFlagsPatch` describing application of both the `self` patch\n   * and `that` patch.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (that: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  /**\n   * Creates a `RuntimeFlagsPatch` describing application of both the `self` patch\n   * and `that` patch.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: RuntimeFlagsPatch, that: RuntimeFlagsPatch): RuntimeFlagsPatch\n} = internal.both\n\n/**\n * Creates a `RuntimeFlagsPatch` describing application of either the `self`\n * patch or `that` patch.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const either: {\n  /**\n   * Creates a `RuntimeFlagsPatch` describing application of either the `self`\n   * patch or `that` patch.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (that: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  /**\n   * Creates a `RuntimeFlagsPatch` describing application of either the `self`\n   * patch or `that` patch.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: RuntimeFlagsPatch, that: RuntimeFlagsPatch): RuntimeFlagsPatch\n} = internal.either\n\n/**\n * Creates a `RuntimeFlagsPatch` which describes exclusion of the specified\n * `RuntimeFlag` from the set of `RuntimeFlags`.\n *\n * @category utils\n * @since 2.0.0\n */\nexport const exclude: {\n  /**\n   * Creates a `RuntimeFlagsPatch` which describes exclusion of the specified\n   * `RuntimeFlag` from the set of `RuntimeFlags`.\n   *\n   * @category utils\n   * @since 2.0.0\n   */\n  (flag: RuntimeFlags.RuntimeFlag): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  /**\n   * Creates a `RuntimeFlagsPatch` which describes exclusion of the specified\n   * `RuntimeFlag` from the set of `RuntimeFlags`.\n   *\n   * @category utils\n   * @since 2.0.0\n   */\n  (self: RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag): RuntimeFlagsPatch\n} = internal.exclude\n\n/**\n * Creates a `RuntimeFlagsPatch` which describes the inverse of the patch\n * specified by the provided `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const inverse: (patch: RuntimeFlagsPatch) => RuntimeFlagsPatch = internal.inverse\n\n/**\n * Returns a `ReadonlySet<number>` containing the `RuntimeFlags` described as\n * enabled by the specified `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const enabledSet: (self: RuntimeFlagsPatch) => ReadonlySet<RuntimeFlags.RuntimeFlag> = runtimeFlags.enabledSet\n\n/**\n * Returns a `ReadonlySet<number>` containing the `RuntimeFlags` described as\n * disabled by the specified `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const disabledSet: (self: RuntimeFlagsPatch) => ReadonlySet<RuntimeFlags.RuntimeFlag> = runtimeFlags.disabledSet\n\n/**\n * Renders the provided `RuntimeFlagsPatch` to a string.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const render: (self: RuntimeFlagsPatch) => string = runtimeFlags.renderPatch\n", "import type * as Differ from \"../Differ.js\"\nimport { dual } from \"../Function.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport type * as RuntimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\nimport * as internalDiffer from \"./differ.js\"\nimport * as runtimeFlagsPatch from \"./runtimeFlagsPatch.js\"\n\n/** @internal */\nexport const None: RuntimeFlags.RuntimeFlag = 0 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const Interruption: RuntimeFlags.RuntimeFlag = 1 << 0 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const OpSupervision: RuntimeFlags.RuntimeFlag = 1 << 1 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const RuntimeMetrics: RuntimeFlags.RuntimeFlag = 1 << 2 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const WindDown: RuntimeFlags.RuntimeFlag = 1 << 4 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const CooperativeYielding: RuntimeFlags.RuntimeFlag = 1 << 5 as RuntimeFlags.RuntimeFlag\n\n/** @internal */\nexport const allFlags: ReadonlyArray<RuntimeFlags.RuntimeFlag> = [\n  None,\n  Interruption,\n  OpSupervision,\n  RuntimeMetrics,\n  WindDown,\n  CooperativeYielding\n]\n\nconst print = (flag: RuntimeFlags.RuntimeFlag) => {\n  switch (flag) {\n    case CooperativeYielding: {\n      return \"CooperativeYielding\"\n    }\n    case WindDown: {\n      return \"WindDown\"\n    }\n    case RuntimeMetrics: {\n      return \"RuntimeMetrics\"\n    }\n    case OpSupervision: {\n      return \"OpSupervision\"\n    }\n    case Interruption: {\n      return \"Interruption\"\n    }\n    case None: {\n      return \"None\"\n    }\n  }\n}\n\n/** @internal */\nexport const cooperativeYielding = (self: RuntimeFlags.RuntimeFlags): boolean => isEnabled(self, CooperativeYielding)\n\n/** @internal */\nexport const disable = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags,\n  (self: RuntimeFlags.RuntimeFlags, flag: RuntimeFlags.RuntimeFlag) => RuntimeFlags.RuntimeFlags\n>(2, (self, flag) => (self & ~flag) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const disableAll = dual<\n  (flags: RuntimeFlags.RuntimeFlags) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags,\n  (self: RuntimeFlags.RuntimeFlags, flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags\n>(2, (self, flags) => (self & ~flags) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const enable = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags,\n  (self: RuntimeFlags.RuntimeFlags, flag: RuntimeFlags.RuntimeFlag) => RuntimeFlags.RuntimeFlags\n>(2, (self, flag) => (self | flag) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const enableAll = dual<\n  (flags: RuntimeFlags.RuntimeFlags) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags,\n  (self: RuntimeFlags.RuntimeFlags, flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags\n>(2, (self, flags) => (self | flags) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const interruptible = (self: RuntimeFlags.RuntimeFlags): boolean => interruption(self) && !windDown(self)\n\n/** @internal */\nexport const interruption = (self: RuntimeFlags.RuntimeFlags): boolean => isEnabled(self, Interruption)\n\n/** @internal */\nexport const isDisabled = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlags.RuntimeFlags) => boolean,\n  (self: RuntimeFlags.RuntimeFlags, flag: RuntimeFlags.RuntimeFlag) => boolean\n>(2, (self, flag) => !isEnabled(self, flag))\n\n/** @internal */\nexport const isEnabled = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlags.RuntimeFlags) => boolean,\n  (self: RuntimeFlags.RuntimeFlags, flag: RuntimeFlags.RuntimeFlag) => boolean\n>(2, (self, flag) => (self & flag) !== 0)\n\n/** @internal */\nexport const make = (...flags: ReadonlyArray<RuntimeFlags.RuntimeFlag>): RuntimeFlags.RuntimeFlags =>\n  flags.reduce((a, b) => a | b, 0) as RuntimeFlags.RuntimeFlags\n\n/** @internal */\nexport const none: RuntimeFlags.RuntimeFlags = make(None)\n\n/** @internal */\nexport const opSupervision = (self: RuntimeFlags.RuntimeFlags): boolean => isEnabled(self, OpSupervision)\n\n/** @internal */\nexport const render = (self: RuntimeFlags.RuntimeFlags): string => {\n  const active: Array<string> = []\n  allFlags.forEach((flag) => {\n    if (isEnabled(self, flag)) {\n      active.push(`${print(flag)}`)\n    }\n  })\n  return `RuntimeFlags(${active.join(\", \")})`\n}\n\n/** @internal */\nexport const runtimeMetrics = (self: RuntimeFlags.RuntimeFlags): boolean => isEnabled(self, RuntimeMetrics)\n\n/** @internal */\nexport const toSet = (self: RuntimeFlags.RuntimeFlags): ReadonlySet<RuntimeFlags.RuntimeFlag> =>\n  new Set(allFlags.filter((flag) => isEnabled(self, flag)))\n\nexport const windDown = (self: RuntimeFlags.RuntimeFlags): boolean => isEnabled(self, WindDown)\n\n// circular with RuntimeFlagsPatch\n\n/** @internal */\nexport const enabledSet = (self: RuntimeFlagsPatch.RuntimeFlagsPatch): ReadonlySet<RuntimeFlags.RuntimeFlag> =>\n  toSet((runtimeFlagsPatch.active(self) & runtimeFlagsPatch.enabled(self)) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const disabledSet = (self: RuntimeFlagsPatch.RuntimeFlagsPatch): ReadonlySet<RuntimeFlags.RuntimeFlag> =>\n  toSet((runtimeFlagsPatch.active(self) & ~runtimeFlagsPatch.enabled(self)) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const diff = dual<\n  (that: RuntimeFlags.RuntimeFlags) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlagsPatch.RuntimeFlagsPatch,\n  (self: RuntimeFlags.RuntimeFlags, that: RuntimeFlags.RuntimeFlags) => RuntimeFlagsPatch.RuntimeFlagsPatch\n>(2, (self, that) => runtimeFlagsPatch.make(self ^ that, that))\n\n/** @internal */\nexport const patch = dual<\n  (patch: RuntimeFlagsPatch.RuntimeFlagsPatch) => (self: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags,\n  (self: RuntimeFlags.RuntimeFlags, patch: RuntimeFlagsPatch.RuntimeFlagsPatch) => RuntimeFlags.RuntimeFlags\n>(2, (self, patch) =>\n  (\n    (self & (runtimeFlagsPatch.invert(runtimeFlagsPatch.active(patch)) | runtimeFlagsPatch.enabled(patch))) |\n    (runtimeFlagsPatch.active(patch) & runtimeFlagsPatch.enabled(patch))\n  ) as RuntimeFlags.RuntimeFlags)\n\n/** @internal */\nexport const renderPatch = (self: RuntimeFlagsPatch.RuntimeFlagsPatch): string => {\n  const enabled = Array.from(enabledSet(self))\n    .map((flag) => print(flag))\n    .join(\", \")\n  const disabled = Array.from(disabledSet(self))\n    .map((flag) => print(flag))\n    .join(\", \")\n  return `RuntimeFlagsPatch(enabled = (${enabled}), disabled = (${disabled}))`\n}\n\n/** @internal */\nexport const differ: Differ.Differ<RuntimeFlags.RuntimeFlags, RuntimeFlagsPatch.RuntimeFlagsPatch> = internalDiffer\n  .make({\n    empty: runtimeFlagsPatch.empty,\n    diff: (oldValue, newValue) => diff(oldValue, newValue),\n    combine: (first, second) => runtimeFlagsPatch.andThen(second)(first),\n    patch: (_patch, oldValue) => patch(oldValue, _patch)\n  })\n", "import type { Chunk } from \"../Chunk.js\"\nimport type { Context } from \"../Context.js\"\nimport type * as Differ from \"../Differ.js\"\nimport type { Either } from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport * as Dual from \"../Function.js\"\nimport { constant, identity } from \"../Function.js\"\nimport type { HashMap } from \"../HashMap.js\"\nimport type { HashSet } from \"../HashSet.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as ChunkPatch from \"./differ/chunkPatch.js\"\nimport * as ContextPatch from \"./differ/contextPatch.js\"\nimport * as HashMapPatch from \"./differ/hashMapPatch.js\"\nimport * as HashSetPatch from \"./differ/hashSetPatch.js\"\nimport * as OrPatch from \"./differ/orPatch.js\"\nimport * as ReadonlyArrayPatch from \"./differ/readonlyArrayPatch.js\"\n\n/** @internal */\nexport const DifferTypeId: Differ.TypeId = Symbol.for(\"effect/Differ\") as Differ.TypeId\n\n/** @internal */\nexport const DifferProto = {\n  [DifferTypeId]: {\n    _P: identity,\n    _V: identity\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const make = <Value, Patch>(\n  params: {\n    readonly empty: Patch\n    readonly diff: (oldValue: Value, newValue: Value) => Patch\n    readonly combine: (first: Patch, second: Patch) => Patch\n    readonly patch: (patch: Patch, oldValue: Value) => Value\n  }\n): Differ.Differ<Value, Patch> => {\n  const differ = Object.create(DifferProto)\n  differ.empty = params.empty\n  differ.diff = params.diff\n  differ.combine = params.combine\n  differ.patch = params.patch\n  return differ\n}\n\n/** @internal */\nexport const environment = <A>(): Differ.Differ<Context<A>, Differ.Differ.Context.Patch<A, A>> =>\n  make({\n    empty: ContextPatch.empty(),\n    combine: (first, second) => ContextPatch.combine(second)(first),\n    diff: (oldValue, newValue) => ContextPatch.diff(oldValue, newValue),\n    patch: (patch, oldValue) => ContextPatch.patch(oldValue)(patch)\n  })\n\n/** @internal */\nexport const chunk = <Value, Patch>(\n  differ: Differ.Differ<Value, Patch>\n): Differ.Differ<Chunk<Value>, Differ.Differ.Chunk.Patch<Value, Patch>> =>\n  make({\n    empty: ChunkPatch.empty(),\n    combine: (first, second) => ChunkPatch.combine(second)(first),\n    diff: (oldValue, newValue) => ChunkPatch.diff({ oldValue, newValue, differ }),\n    patch: (patch, oldValue) => ChunkPatch.patch(oldValue, differ)(patch)\n  })\n\n/** @internal */\nexport const hashMap = <Key, Value, Patch>(\n  differ: Differ.Differ<Value, Patch>\n): Differ.Differ<HashMap<Key, Value>, Differ.Differ.HashMap.Patch<Key, Value, Patch>> =>\n  make({\n    empty: HashMapPatch.empty(),\n    combine: (first, second) => HashMapPatch.combine(second)(first),\n    diff: (oldValue, newValue) => HashMapPatch.diff({ oldValue, newValue, differ }),\n    patch: (patch, oldValue) => HashMapPatch.patch(oldValue, differ)(patch)\n  })\n\n/** @internal */\nexport const hashSet = <Value>(): Differ.Differ<HashSet<Value>, Differ.Differ.HashSet.Patch<Value>> =>\n  make({\n    empty: HashSetPatch.empty(),\n    combine: (first, second) => HashSetPatch.combine(second)(first),\n    diff: (oldValue, newValue) => HashSetPatch.diff(oldValue, newValue),\n    patch: (patch, oldValue) => HashSetPatch.patch(oldValue)(patch)\n  })\n\n/** @internal */\nexport const orElseEither = Dual.dual<\n  <Value2, Patch2>(that: Differ.Differ<Value2, Patch2>) => <Value, Patch>(\n    self: Differ.Differ<Value, Patch>\n  ) => Differ.Differ<Either<Value2, Value>, Differ.Differ.Or.Patch<Value, Value2, Patch, Patch2>>,\n  <Value, Patch, Value2, Patch2>(\n    self: Differ.Differ<Value, Patch>,\n    that: Differ.Differ<Value2, Patch2>\n  ) => Differ.Differ<Either<Value2, Value>, Differ.Differ.Or.Patch<Value, Value2, Patch, Patch2>>\n>(2, (self, that) =>\n  make({\n    empty: OrPatch.empty(),\n    combine: (first, second) => OrPatch.combine(first, second),\n    diff: (oldValue, newValue) =>\n      OrPatch.diff({\n        oldValue,\n        newValue,\n        left: self,\n        right: that\n      }),\n    patch: (patch, oldValue) =>\n      OrPatch.patch(patch, {\n        oldValue,\n        left: self,\n        right: that\n      })\n  }))\n\n/** @internal */\nexport const readonlyArray = <Value, Patch>(\n  differ: Differ.Differ<Value, Patch>\n): Differ.Differ<ReadonlyArray<Value>, Differ.Differ.ReadonlyArray.Patch<Value, Patch>> =>\n  make({\n    empty: ReadonlyArrayPatch.empty(),\n    combine: (first, second) => ReadonlyArrayPatch.combine(first, second),\n    diff: (oldValue, newValue) => ReadonlyArrayPatch.diff({ oldValue, newValue, differ }),\n    patch: (patch, oldValue) => ReadonlyArrayPatch.patch(patch, oldValue, differ)\n  })\n\n/** @internal */\nexport const transform = Dual.dual<\n  <Value, Value2>(\n    options: {\n      readonly toNew: (value: Value) => Value2\n      readonly toOld: (value: Value2) => Value\n    }\n  ) => <Patch>(self: Differ.Differ<Value, Patch>) => Differ.Differ<Value2, Patch>,\n  <Value, Patch, Value2>(\n    self: Differ.Differ<Value, Patch>,\n    options: {\n      readonly toNew: (value: Value) => Value2\n      readonly toOld: (value: Value2) => Value\n    }\n  ) => Differ.Differ<Value2, Patch>\n>(2, (self, { toNew, toOld }) =>\n  make({\n    empty: self.empty,\n    combine: (first, second) => self.combine(first, second),\n    diff: (oldValue, newValue) => self.diff(toOld(oldValue), toOld(newValue)),\n    patch: (patch, oldValue) => toNew(self.patch(patch, toOld(oldValue)))\n  }))\n\n/** @internal */\nexport const update = <A>(): Differ.Differ<A, (a: A) => A> => updateWith((_, a) => a)\n\n/** @internal */\nexport const updateWith = <A>(f: (x: A, y: A) => A): Differ.Differ<A, (a: A) => A> =>\n  make({\n    empty: identity,\n    combine: (first, second) => {\n      if (first === identity) {\n        return second\n      }\n      if (second === identity) {\n        return first\n      }\n      return (a) => second(first(a))\n    },\n    diff: (oldValue, newValue) => {\n      if (Equal.equals(oldValue, newValue)) {\n        return identity\n      }\n      return constant(newValue)\n    },\n    patch: (patch, oldValue) => f(oldValue, patch(oldValue))\n  })\n\n/** @internal */\nexport const zip = Dual.dual<\n  <Value2, Patch2>(that: Differ.Differ<Value2, Patch2>) => <Value, Patch>(\n    self: Differ.Differ<Value, Patch>\n  ) => Differ.Differ<readonly [Value, Value2], readonly [Patch, Patch2]>,\n  <Value, Patch, Value2, Patch2>(\n    self: Differ.Differ<Value, Patch>,\n    that: Differ.Differ<Value2, Patch2>\n  ) => Differ.Differ<readonly [Value, Value2], readonly [Patch, Patch2]>\n>(2, (self, that) =>\n  make({\n    empty: [self.empty, that.empty] as const,\n    combine: (first, second) => [\n      self.combine(first[0], second[0]),\n      that.combine(first[1], second[1])\n    ],\n    diff: (oldValue, newValue) => [\n      self.diff(oldValue[0], newValue[0]),\n      that.diff(oldValue[1], newValue[1])\n    ],\n    patch: (patch, oldValue) => [\n      self.patch(patch[0], oldValue[0]),\n      that.patch(patch[1], oldValue[1])\n    ]\n  }))\n", "import * as Equal from \"../Equal.js\"\nimport * as Hash from \"../Hash.js\"\nimport type * as Types from \"../Types.js\"\nimport { StructuralPrototype } from \"./effectable.js\"\n\n/** @internal */\nexport const ArrayProto: Equal.Equal = Object.assign(Object.create(Array.prototype), {\n  [Hash.symbol](this: Array<any>) {\n    return Hash.cached(this, Hash.array(this))\n  },\n  [Equal.symbol](this: Array<any>, that: Equal.Equal) {\n    if (Array.isArray(that) && this.length === that.length) {\n      return this.every((v, i) => Equal.equals(v, (that as Array<any>)[i]))\n    } else {\n      return false\n    }\n  }\n})\n\n/** @internal */\nexport const Structural: new<A>(\n  args: Types.Equals<Omit<A, keyof Equal.Equal>, {}> extends true ? void\n    : { readonly [P in keyof A as P extends keyof Equal.Equal ? never : P]: A[P] }\n) => {} = (function() {\n  function Structural(this: any, args: any) {\n    if (args) {\n      Object.assign(this, args)\n    }\n  }\n  Structural.prototype = StructuralPrototype\n  return Structural as any\n})()\n\n/** @internal */\nexport const struct = <As extends Readonly<Record<string, any>>>(as: As): As =>\n  Object.assign(Object.create(StructuralPrototype), as)\n", "import * as Chunk from \"../../Chunk.js\"\nimport type { Context } from \"../../Context.js\"\nimport type { Differ } from \"../../Differ.js\"\nimport * as Equal from \"../../Equal.js\"\nimport * as Dual from \"../../Function.js\"\nimport { makeContext } from \"../context.js\"\nimport { Structural } from \"../data.js\"\n\n/** @internal */\nexport const ContextPatchTypeId: Differ.Context.TypeId = Symbol.for(\n  \"effect/DifferContextPatch\"\n) as Differ.Context.TypeId\n\nfunction variance<A, B>(a: A): B {\n  return a as unknown as B\n}\n\n/** @internal */\nconst PatchProto = {\n  ...Structural.prototype,\n  [ContextPatchTypeId]: {\n    _Value: variance,\n    _Patch: variance\n  }\n}\n\ninterface Empty<Input, Output> extends Differ.Context.Patch<Input, Output> {\n  readonly _tag: \"Empty\"\n}\n\nconst EmptyProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Empty\"\n})\n\nconst _empty = Object.create(EmptyProto)\n\n/**\n * @internal\n */\nexport const empty = <Input, Output>(): Differ.Context.Patch<Input, Output> => _empty\n\n/** @internal */\nexport interface AndThen<in out Input, in out Output, in out Output2> extends Differ.Context.Patch<Input, Output2> {\n  readonly _tag: \"AndThen\"\n  readonly first: Differ.Context.Patch<Input, Output>\n  readonly second: Differ.Context.Patch<Output, Output2>\n}\n\nconst AndThenProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"AndThen\"\n})\n\nconst makeAndThen = <Input, Output, Output2>(\n  first: Differ.Context.Patch<Input, Output>,\n  second: Differ.Context.Patch<Output, Output2>\n): Differ.Context.Patch<Input, Output2> => {\n  const o = Object.create(AndThenProto)\n  o.first = first\n  o.second = second\n  return o\n}\n\n/** @internal */\nexport interface AddService<in out Env, in out T, in out I> extends Differ.Context.Patch<Env, Env | I> {\n  readonly _tag: \"AddService\"\n  readonly key: string\n  readonly service: T\n}\n\nconst AddServiceProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"AddService\"\n})\n\nconst makeAddService = <Env, I, T>(\n  key: string,\n  service: T\n): Differ.Context.Patch<Env, Env | I> => {\n  const o = Object.create(AddServiceProto)\n  o.key = key\n  o.service = service\n  return o\n}\n\n/** @internal */\nexport interface RemoveService<in out Env, in out I> extends Differ.Context.Patch<Env, Exclude<Env, I>> {\n  readonly _tag: \"RemoveService\"\n  readonly key: string\n}\n\nconst RemoveServiceProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"RemoveService\"\n})\n\nconst makeRemoveService = <Env, I>(\n  key: string\n): Differ.Context.Patch<Env, Exclude<Env, I>> => {\n  const o = Object.create(RemoveServiceProto)\n  o.key = key\n  return o\n}\n\n/** @internal */\nexport interface UpdateService<in out Env, in out T, in out I> extends Differ.Context.Patch<Env | I, Env | I> {\n  readonly _tag: \"UpdateService\"\n  readonly key: string\n  update(service: T): T\n}\n\nconst UpdateServiceProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"UpdateService\"\n})\n\nconst makeUpdateService = <Env, I, T>(\n  key: string,\n  update: (service: T) => T\n): Differ.Context.Patch<Env | I, Env | I> => {\n  const o = Object.create(UpdateServiceProto)\n  o.key = key\n  o.update = update\n  return o\n}\n\ntype Instruction =\n  | Empty<any, any>\n  | AndThen<any, any, any>\n  | AddService<any, any, any>\n  | RemoveService<any, any>\n  | UpdateService<any, any, any>\n\n/** @internal */\nexport const diff = <Input, Output>(\n  oldValue: Context<Input>,\n  newValue: Context<Output>\n): Differ.Context.Patch<Input, Output> => {\n  const missingServices = new Map(oldValue.unsafeMap)\n  let patch = empty<any, any>()\n  for (const [tag, newService] of newValue.unsafeMap.entries()) {\n    if (missingServices.has(tag)) {\n      const old = missingServices.get(tag)!\n      missingServices.delete(tag)\n      if (!Equal.equals(old, newService)) {\n        patch = combine(makeUpdateService(tag, () => newService))(patch)\n      }\n    } else {\n      missingServices.delete(tag)\n      patch = combine(makeAddService(tag, newService))(patch)\n    }\n  }\n  for (const [tag] of missingServices.entries()) {\n    patch = combine(makeRemoveService(tag))(patch)\n  }\n  return patch\n}\n\n/** @internal */\nexport const combine = Dual.dual<\n  <Output, Output2>(\n    that: Differ.Context.Patch<Output, Output2>\n  ) => <Input>(\n    self: Differ.Context.Patch<Input, Output>\n  ) => Differ.Context.Patch<Input, Output2>,\n  <Input, Output, Output2>(\n    self: Differ.Context.Patch<Input, Output>,\n    that: Differ.Context.Patch<Output, Output2>\n  ) => Differ.Context.Patch<Input, Output2>\n>(2, (self, that) => makeAndThen(self, that))\n\n/** @internal */\nexport const patch = Dual.dual<\n  <Input>(\n    context: Context<Input>\n  ) => <Output>(\n    self: Differ.Context.Patch<Input, Output>\n  ) => Context<Output>,\n  <Input, Output>(\n    self: Differ.Context.Patch<Input, Output>,\n    context: Context<Input>\n  ) => Context<Output>\n>(2, <Input, Output>(self: Differ.Context.Patch<Input, Output>, context: Context<Input>) => {\n  if ((self as Instruction)._tag === \"Empty\") {\n    return context as any\n  }\n  let wasServiceUpdated = false\n  let patches: Chunk.Chunk<Differ.Context.Patch<unknown, unknown>> = Chunk.of(\n    self as Differ.Context.Patch<unknown, unknown>\n  )\n  const updatedContext: Map<string, unknown> = new Map(context.unsafeMap)\n  while (Chunk.isNonEmpty(patches)) {\n    const head: Instruction = Chunk.headNonEmpty(patches) as Instruction\n    const tail = Chunk.tailNonEmpty(patches)\n    switch (head._tag) {\n      case \"Empty\": {\n        patches = tail\n        break\n      }\n      case \"AddService\": {\n        updatedContext.set(head.key, head.service)\n        patches = tail\n        break\n      }\n      case \"AndThen\": {\n        patches = Chunk.prepend(Chunk.prepend(tail, head.second), head.first)\n        break\n      }\n      case \"RemoveService\": {\n        updatedContext.delete(head.key)\n        patches = tail\n        break\n      }\n      case \"UpdateService\": {\n        updatedContext.set(head.key, head.update(updatedContext.get(head.key)))\n        wasServiceUpdated = true\n        patches = tail\n        break\n      }\n    }\n  }\n  if (!wasServiceUpdated) {\n    return makeContext(updatedContext) as Context<Output>\n  }\n  const map = new Map()\n  for (const [tag] of context.unsafeMap) {\n    if (updatedContext.has(tag)) {\n      map.set(tag, updatedContext.get(tag))\n      updatedContext.delete(tag)\n    }\n  }\n  for (const [tag, s] of updatedContext) {\n    map.set(tag, s)\n  }\n  return makeContext(map) as Context<Output>\n})\n", "import * as Chunk from \"../../Chunk.js\"\nimport type { Differ } from \"../../Differ.js\"\nimport * as Dual from \"../../Function.js\"\nimport * as HashSet from \"../../HashSet.js\"\nimport { Structural } from \"../data.js\"\n\n/** @internal */\nexport const HashSetPatchTypeId: Differ.HashSet.TypeId = Symbol.for(\n  \"effect/DifferHashSetPatch\"\n) as Differ.HashSet.TypeId\n\nfunction variance<A, B>(a: A): B {\n  return a as unknown as B\n}\n\n/** @internal */\nconst PatchProto = {\n  ...Structural.prototype,\n  [HashSetPatchTypeId]: {\n    _Value: variance,\n    _Key: variance,\n    _Patch: variance\n  }\n}\n\ninterface Empty<Value> extends Differ.HashSet.Patch<Value> {\n  readonly _tag: \"Empty\"\n}\n\nconst EmptyProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Empty\"\n})\n\nconst _empty = Object.create(EmptyProto)\n\n/** @internal */\nexport const empty = <Value>(): Differ.HashSet.Patch<Value> => _empty\n\ninterface AndThen<Value> extends Differ.HashSet.Patch<Value> {\n  readonly _tag: \"AndThen\"\n  readonly first: Differ.HashSet.Patch<Value>\n  readonly second: Differ.HashSet.Patch<Value>\n}\n\nconst AndThenProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"AndThen\"\n})\n\n/** @internal */\nexport const makeAndThen = <Value>(\n  first: Differ.HashSet.Patch<Value>,\n  second: Differ.HashSet.Patch<Value>\n): Differ.HashSet.Patch<Value> => {\n  const o = Object.create(AndThenProto)\n  o.first = first\n  o.second = second\n  return o\n}\n\ninterface Add<Value> extends Differ.HashSet.Patch<Value> {\n  readonly _tag: \"Add\"\n  readonly value: Value\n}\n\nconst AddProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Add\"\n})\n\n/** @internal */\nexport const makeAdd = <Value>(\n  value: Value\n): Differ.HashSet.Patch<Value> => {\n  const o = Object.create(AddProto)\n  o.value = value\n  return o\n}\n\ninterface Remove<Value> extends Differ.HashSet.Patch<Value> {\n  readonly _tag: \"Remove\"\n  readonly value: Value\n}\n\nconst RemoveProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Remove\"\n})\n\n/** @internal */\nexport const makeRemove = <Value>(\n  value: Value\n): Differ.HashSet.Patch<Value> => {\n  const o = Object.create(RemoveProto)\n  o.value = value\n  return o\n}\n\ntype Instruction =\n  | Add<any>\n  | AndThen<any>\n  | Empty<any>\n  | Remove<any>\n\n/** @internal */\nexport const diff = <Value>(\n  oldValue: HashSet.HashSet<Value>,\n  newValue: HashSet.HashSet<Value>\n): Differ.HashSet.Patch<Value> => {\n  const [removed, patch] = HashSet.reduce(\n    [oldValue, empty<Value>()] as const,\n    ([set, patch], value: Value) => {\n      if (HashSet.has(value)(set)) {\n        return [HashSet.remove(value)(set), patch] as const\n      }\n      return [set, combine(makeAdd(value))(patch)] as const\n    }\n  )(newValue)\n  return HashSet.reduce(patch, (patch, value: Value) => combine(makeRemove(value))(patch))(removed)\n}\n\n/** @internal */\nexport const combine = Dual.dual<\n  <Value>(\n    that: Differ.HashSet.Patch<Value>\n  ) => (\n    self: Differ.HashSet.Patch<Value>\n  ) => Differ.HashSet.Patch<Value>,\n  <Value>(\n    self: Differ.HashSet.Patch<Value>,\n    that: Differ.HashSet.Patch<Value>\n  ) => Differ.HashSet.Patch<Value>\n>(2, (self, that) => makeAndThen(self, that))\n\n/** @internal */\nexport const patch = Dual.dual<\n  <Value>(\n    oldValue: HashSet.HashSet<Value>\n  ) => (\n    self: Differ.HashSet.Patch<Value>\n  ) => HashSet.HashSet<Value>,\n  <Value>(\n    self: Differ.HashSet.Patch<Value>,\n    oldValue: HashSet.HashSet<Value>\n  ) => HashSet.HashSet<Value>\n>(2, <Value>(\n  self: Differ.HashSet.Patch<Value>,\n  oldValue: HashSet.HashSet<Value>\n) => {\n  if ((self as Instruction)._tag === \"Empty\") {\n    return oldValue\n  }\n  let set = oldValue\n  let patches: Chunk.Chunk<Differ.HashSet.Patch<Value>> = Chunk.of(self)\n  while (Chunk.isNonEmpty(patches)) {\n    const head: Instruction = Chunk.headNonEmpty(patches) as Instruction\n    const tail = Chunk.tailNonEmpty(patches)\n    switch (head._tag) {\n      case \"Empty\": {\n        patches = tail\n        break\n      }\n      case \"AndThen\": {\n        patches = Chunk.prepend(head.first)(Chunk.prepend(head.second)(tail))\n        break\n      }\n      case \"Add\": {\n        set = HashSet.add(head.value)(set)\n        patches = tail\n        break\n      }\n      case \"Remove\": {\n        set = HashSet.remove(head.value)(set)\n        patches = tail\n      }\n    }\n  }\n  return set\n})\n", "import * as Arr from \"../../Array.js\"\nimport type * as Differ from \"../../Differ.js\"\nimport * as Equal from \"../../Equal.js\"\nimport * as Dual from \"../../Function.js\"\nimport * as Data from \"../data.js\"\n\n/** @internal */\nexport const ReadonlyArrayPatchTypeId: Differ.Differ.ReadonlyArray.TypeId = Symbol.for(\n  \"effect/DifferReadonlyArrayPatch\"\n) as Differ.Differ.ReadonlyArray.TypeId\n\nfunction variance<A, B>(a: A): B {\n  return a as unknown as B\n}\n\nconst PatchProto = {\n  ...Data.Structural.prototype,\n  [ReadonlyArrayPatchTypeId]: {\n    _Value: variance,\n    _Patch: variance\n  }\n}\n\ninterface Empty<Value, Patch> extends Differ.Differ.ReadonlyArray.Patch<Value, Patch> {\n  readonly _tag: \"Empty\"\n}\n\nconst EmptyProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Empty\"\n})\n\nconst _empty = Object.create(EmptyProto)\n\n/**\n * @internal\n */\nexport const empty = <Value, Patch>(): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => _empty\n\ninterface AndThen<Value, Patch> extends Differ.Differ.ReadonlyArray.Patch<Value, Patch> {\n  readonly _tag: \"AndThen\"\n  readonly first: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n  readonly second: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n}\n\nconst AndThenProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"AndThen\"\n})\n\nconst makeAndThen = <Value, Patch>(\n  first: Differ.Differ.ReadonlyArray.Patch<Value, Patch>,\n  second: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => {\n  const o = Object.create(AndThenProto)\n  o.first = first\n  o.second = second\n  return o\n}\n\ninterface Append<Value, Patch> extends Differ.Differ.ReadonlyArray.Patch<Value, Patch> {\n  readonly _tag: \"Append\"\n  readonly values: ReadonlyArray<Value>\n}\n\nconst AppendProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Append\"\n})\n\nconst makeAppend = <Value, Patch>(values: ReadonlyArray<Value>): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => {\n  const o = Object.create(AppendProto)\n  o.values = values\n  return o\n}\n\ninterface Slice<Value, Patch> extends Differ.Differ.ReadonlyArray.Patch<Value, Patch> {\n  readonly _tag: \"Slice\"\n  readonly from: number\n  readonly until: number\n}\n\nconst SliceProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Slice\"\n})\n\nconst makeSlice = <Value, Patch>(from: number, until: number): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => {\n  const o = Object.create(SliceProto)\n  o.from = from\n  o.until = until\n  return o\n}\n\ninterface Update<Value, Patch> extends Differ.Differ.ReadonlyArray.Patch<Value, Patch> {\n  readonly _tag: \"Update\"\n  readonly index: number\n  readonly patch: Patch\n}\n\nconst UpdateProto = Object.assign(Object.create(PatchProto), {\n  _tag: \"Update\"\n})\n\nconst makeUpdate = <Value, Patch>(index: number, patch: Patch): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => {\n  const o = Object.create(UpdateProto)\n  o.index = index\n  o.patch = patch\n  return o\n}\n\ntype Instruction =\n  | Empty<any, any>\n  | AndThen<any, any>\n  | Append<any, any>\n  | Slice<any, any>\n  | Update<any, any>\n\n/** @internal */\nexport const diff = <Value, Patch>(\n  options: {\n    readonly oldValue: ReadonlyArray<Value>\n    readonly newValue: ReadonlyArray<Value>\n    readonly differ: Differ.Differ<Value, Patch>\n  }\n): Differ.Differ.ReadonlyArray.Patch<Value, Patch> => {\n  let i = 0\n  let patch = empty<Value, Patch>()\n  while (i < options.oldValue.length && i < options.newValue.length) {\n    const oldElement = options.oldValue[i]!\n    const newElement = options.newValue[i]!\n    const valuePatch = options.differ.diff(oldElement, newElement)\n    if (!Equal.equals(valuePatch, options.differ.empty)) {\n      patch = combine(patch, makeUpdate(i, valuePatch))\n    }\n    i = i + 1\n  }\n  if (i < options.oldValue.length) {\n    patch = combine(patch, makeSlice(0, i))\n  }\n  if (i < options.newValue.length) {\n    patch = combine(patch, makeAppend(Arr.drop(i)(options.newValue)))\n  }\n  return patch\n}\n\n/** @internal */\nexport const combine = Dual.dual<\n  <Value, Patch>(\n    that: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n  ) => (\n    self: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n  ) => Differ.Differ.ReadonlyArray.Patch<Value, Patch>,\n  <Value, Patch>(\n    self: Differ.Differ.ReadonlyArray.Patch<Value, Patch>,\n    that: Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n  ) => Differ.Differ.ReadonlyArray.Patch<Value, Patch>\n>(2, (self, that) => makeAndThen(self, that))\n\n/** @internal */\nexport const patch = Dual.dual<\n  <Value, Patch>(\n    oldValue: ReadonlyArray<Value>,\n    differ: Differ.Differ<Value, Patch>\n  ) => (self: Differ.Differ.ReadonlyArray.Patch<Value, Patch>) => ReadonlyArray<Value>,\n  <Value, Patch>(\n    self: Differ.Differ.ReadonlyArray.Patch<Value, Patch>,\n    oldValue: ReadonlyArray<Value>,\n    differ: Differ.Differ<Value, Patch>\n  ) => ReadonlyArray<Value>\n>(3, <Value, Patch>(\n  self: Differ.Differ.ReadonlyArray.Patch<Value, Patch>,\n  oldValue: ReadonlyArray<Value>,\n  differ: Differ.Differ<Value, Patch>\n) => {\n  if ((self as Instruction)._tag === \"Empty\") {\n    return oldValue\n  }\n  let readonlyArray = oldValue.slice()\n  let patches: Array<Differ.Differ.ReadonlyArray.Patch<Value, Patch>> = Arr.of(self)\n  while (Arr.isNonEmptyArray(patches)) {\n    const head: Instruction = Arr.headNonEmpty(patches) as Instruction\n    const tail = Arr.tailNonEmpty(patches)\n    switch (head._tag) {\n      case \"Empty\": {\n        patches = tail\n        break\n      }\n      case \"AndThen\": {\n        tail.unshift(head.first, head.second)\n        patches = tail\n        break\n      }\n      case \"Append\": {\n        for (const value of head.values) {\n          readonlyArray.push(value)\n        }\n        patches = tail\n        break\n      }\n      case \"Slice\": {\n        readonlyArray = readonlyArray.slice(head.from, head.until)\n        patches = tail\n        break\n      }\n      case \"Update\": {\n        readonlyArray[head.index] = differ.patch(head.patch, readonlyArray[head.index]!)\n        patches = tail\n        break\n      }\n    }\n  }\n  return readonlyArray\n})\n", "import { dual } from \"../Function.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport type * as RuntimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\n\n/** @internal */\nconst BIT_MASK = 0xff\n\n/** @internal */\nconst BIT_SHIFT = 0x08\n\n/** @internal */\nexport const active = (patch: RuntimeFlagsPatch.RuntimeFlagsPatch): number => patch & BIT_MASK\n\n/** @internal */\nexport const enabled = (patch: RuntimeFlagsPatch.RuntimeFlagsPatch): number => (patch >> BIT_SHIFT) & BIT_MASK\n\n/** @internal */\nexport const make = (active: number, enabled: number): RuntimeFlagsPatch.RuntimeFlagsPatch =>\n  ((active & BIT_MASK) + (((enabled & active) & BIT_MASK) << BIT_SHIFT)) as RuntimeFlagsPatch.RuntimeFlagsPatch\n\n/** @internal */\nexport const empty = make(0, 0)\n\n/** @internal */\nexport const enable = (flag: RuntimeFlags.RuntimeFlag): RuntimeFlagsPatch.RuntimeFlagsPatch => make(flag, flag)\n\n/** @internal */\nexport const disable = (flag: RuntimeFlags.RuntimeFlag): RuntimeFlagsPatch.RuntimeFlagsPatch => make(flag, 0)\n\n/** @internal */\nexport const isEmpty = (patch: RuntimeFlagsPatch.RuntimeFlagsPatch): boolean => patch === 0\n\n/** @internal */\nexport const isActive = dual<\n  (flag: RuntimeFlagsPatch.RuntimeFlagsPatch) => (self: RuntimeFlagsPatch.RuntimeFlagsPatch) => boolean,\n  (self: RuntimeFlagsPatch.RuntimeFlagsPatch, flag: RuntimeFlagsPatch.RuntimeFlagsPatch) => boolean\n>(2, (self, flag) => (active(self) & flag) !== 0)\n\n/** @internal */\nexport const isEnabled = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlagsPatch.RuntimeFlagsPatch) => boolean,\n  (self: RuntimeFlagsPatch.RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag) => boolean\n>(2, (self, flag) => (enabled(self) & flag) !== 0)\n\n/** @internal */\nexport const isDisabled = dual<\n  (flag: RuntimeFlags.RuntimeFlag) => (self: RuntimeFlagsPatch.RuntimeFlagsPatch) => boolean,\n  (self: RuntimeFlagsPatch.RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag) => boolean\n>(2, (self, flag) => ((active(self) & flag) !== 0) && ((enabled(self) & flag) === 0))\n\n/** @internal */\nexport const exclude = dual<\n  (\n    flag: RuntimeFlags.RuntimeFlag\n  ) => (self: RuntimeFlagsPatch.RuntimeFlagsPatch) => RuntimeFlagsPatch.RuntimeFlagsPatch,\n  (self: RuntimeFlagsPatch.RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag) => RuntimeFlagsPatch.RuntimeFlagsPatch\n>(2, (self, flag) => make(active(self) & ~flag, enabled(self)))\n\n/** @internal */\nexport const both = dual<\n  (\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch,\n  (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch,\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch\n>(2, (self, that) => make(active(self) | active(that), enabled(self) & enabled(that)))\n\n/** @internal */\nexport const either = dual<\n  (\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch,\n  (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch,\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch\n>(2, (self, that) => make(active(self) | active(that), enabled(self) | enabled(that)))\n\n/** @internal */\nexport const andThen = dual<\n  (\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch,\n  (\n    self: RuntimeFlagsPatch.RuntimeFlagsPatch,\n    that: RuntimeFlagsPatch.RuntimeFlagsPatch\n  ) => RuntimeFlagsPatch.RuntimeFlagsPatch\n>(2, (self, that) => (self | that) as RuntimeFlagsPatch.RuntimeFlagsPatch)\n\n/** @internal */\nexport const inverse = (patch: RuntimeFlagsPatch.RuntimeFlagsPatch): RuntimeFlagsPatch.RuntimeFlagsPatch =>\n  make(enabled(patch), invert(active(patch)))\n\n/** @internal */\nexport const invert = (n: number): number => (~n >>> 0) & BIT_MASK\n", "import * as Chunk from \"../Chunk.js\"\nimport type * as Deferred from \"../Deferred.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport type { FiberId } from \"../FiberId.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as List from \"../List.js\"\nimport * as Option from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as Request from \"../Request.js\"\nimport type * as RequestBlock from \"../RequestBlock.js\"\nimport type * as RequestResolver from \"../RequestResolver.js\"\n\n/** @internal */\nexport const empty: RequestBlock.RequestBlock = {\n  _tag: \"Empty\"\n}\n\n/**\n * Combines this collection of blocked requests with the specified collection\n * of blocked requests, in parallel.\n *\n * @internal\n */\nexport const par = (\n  self: RequestBlock.RequestBlock,\n  that: RequestBlock.RequestBlock\n): RequestBlock.RequestBlock => ({\n  _tag: \"Par\",\n  left: self,\n  right: that\n})\n\n/**\n * Combines this collection of blocked requests with the specified collection\n * of blocked requests, in sequence.\n *\n * @internal\n */\nexport const seq = (\n  self: RequestBlock.RequestBlock,\n  that: RequestBlock.RequestBlock\n): RequestBlock.RequestBlock => ({\n  _tag: \"Seq\",\n  left: self,\n  right: that\n})\n\n/**\n * Constructs a collection of blocked requests from the specified blocked\n * request and data source.\n *\n * @internal\n */\nexport const single = <A>(\n  dataSource: RequestResolver.RequestResolver<A>,\n  blockedRequest: Request.Entry<A>\n): RequestBlock.RequestBlock => ({\n  _tag: \"Single\",\n  dataSource: dataSource as any,\n  blockedRequest\n})\n\n/** @internal */\nexport const MapRequestResolversReducer = <A>(\n  f: (dataSource: RequestResolver.RequestResolver<A>) => RequestResolver.RequestResolver<A>\n): RequestBlock.RequestBlock.Reducer<RequestBlock.RequestBlock> => ({\n  emptyCase: () => empty,\n  parCase: (left, right) => par(left, right),\n  seqCase: (left, right) => seq(left, right),\n  singleCase: (dataSource, blockedRequest) => single(f(dataSource), blockedRequest as any)\n})\n\ntype BlockedRequestsCase = ParCase | SeqCase\n\ninterface ParCase {\n  readonly _tag: \"ParCase\"\n}\n\ninterface SeqCase {\n  readonly _tag: \"SeqCase\"\n}\n\n/**\n * Transforms all data sources with the specified data source aspect, which\n * can change the environment type of data sources but must preserve the\n * request type of each data source.\n *\n * @internal\n */\nexport const mapRequestResolvers = <A>(\n  self: RequestBlock.RequestBlock,\n  f: (dataSource: RequestResolver.RequestResolver<A>) => RequestResolver.RequestResolver<A>\n): RequestBlock.RequestBlock => reduce(self, MapRequestResolversReducer(f))\n\n/**\n * Folds over the cases of this collection of blocked requests with the\n * specified functions.\n *\n * @internal\n */\nexport const reduce = <Z>(\n  self: RequestBlock.RequestBlock,\n  reducer: RequestBlock.RequestBlock.Reducer<Z>\n): Z => {\n  let input: List.List<RequestBlock.RequestBlock> = List.of(self)\n  let output = List.empty<Either.Either<Z, BlockedRequestsCase>>()\n  while (List.isCons(input)) {\n    const current: RequestBlock.RequestBlock = input.head\n    switch (current._tag) {\n      case \"Empty\": {\n        output = List.cons(Either.right(reducer.emptyCase()), output)\n        input = input.tail\n        break\n      }\n      case \"Par\": {\n        output = List.cons(Either.left({ _tag: \"ParCase\" }), output)\n        input = List.cons(current.left, List.cons(current.right, input.tail))\n        break\n      }\n      case \"Seq\": {\n        output = List.cons(Either.left({ _tag: \"SeqCase\" }), output)\n        input = List.cons(current.left, List.cons(current.right, input.tail))\n        break\n      }\n      case \"Single\": {\n        const result = reducer.singleCase(current.dataSource, current.blockedRequest)\n        output = List.cons(Either.right(result), output)\n        input = input.tail\n        break\n      }\n    }\n  }\n  const result = List.reduce(output, List.empty<Z>(), (acc, current) => {\n    switch (current._tag) {\n      case \"Left\": {\n        const left = List.unsafeHead(acc)\n        const right = List.unsafeHead(List.unsafeTail(acc))\n        const tail = List.unsafeTail(List.unsafeTail(acc))\n        switch (current.left._tag) {\n          case \"ParCase\": {\n            return List.cons(reducer.parCase(left, right), tail)\n          }\n          case \"SeqCase\": {\n            return List.cons(reducer.seqCase(left, right), tail)\n          }\n        }\n      }\n      case \"Right\": {\n        return List.cons(current.right, acc)\n      }\n    }\n  })\n  if (List.isNil(result)) {\n    throw new Error(\n      \"BUG: BlockedRequests.reduce - please report an issue at https://github.com/Effect-TS/effect/issues\"\n    )\n  }\n  return result.head\n}\n\n/**\n * Flattens a collection of blocked requests into a collection of pipelined\n * and batched requests that can be submitted for execution.\n *\n * @internal\n */\nexport const flatten = (\n  self: RequestBlock.RequestBlock\n): List.List<SequentialCollection> => {\n  let current = List.of(self)\n  let updated = List.empty<SequentialCollection>()\n  // eslint-disable-next-line no-constant-condition\n  while (1) {\n    const [parallel, sequential] = List.reduce(\n      current,\n      [parallelCollectionEmpty(), List.empty<RequestBlock.RequestBlock>()] as const,\n      ([parallel, sequential], blockedRequest) => {\n        const [par, seq] = step(blockedRequest)\n        return [\n          parallelCollectionCombine(parallel, par),\n          List.appendAll(sequential, seq)\n        ]\n      }\n    )\n    updated = merge(updated, parallel)\n    if (List.isNil(sequential)) {\n      return List.reverse(updated)\n    }\n    current = sequential\n  }\n  throw new Error(\n    \"BUG: BlockedRequests.flatten - please report an issue at https://github.com/Effect-TS/effect/issues\"\n  )\n}\n\n/**\n * Takes one step in evaluating a collection of blocked requests, returning a\n * collection of blocked requests that can be performed in parallel and a list\n * of blocked requests that must be performed sequentially after those\n * requests.\n */\nconst step = (\n  requests: RequestBlock.RequestBlock\n): [ParallelCollection, List.List<RequestBlock.RequestBlock>] => {\n  let current: RequestBlock.RequestBlock = requests\n  let parallel = parallelCollectionEmpty()\n  let stack = List.empty<RequestBlock.RequestBlock>()\n  let sequential = List.empty<RequestBlock.RequestBlock>()\n  // eslint-disable-next-line no-constant-condition\n  while (1) {\n    switch (current._tag) {\n      case \"Empty\": {\n        if (List.isNil(stack)) {\n          return [parallel, sequential]\n        }\n        current = stack.head\n        stack = stack.tail\n        break\n      }\n      case \"Par\": {\n        stack = List.cons(current.right, stack)\n        current = current.left\n        break\n      }\n      case \"Seq\": {\n        const left = current.left\n        const right = current.right\n        switch (left._tag) {\n          case \"Empty\": {\n            current = right\n            break\n          }\n          case \"Par\": {\n            const l = left.left\n            const r = left.right\n            current = par(seq(l, right), seq(r, right))\n            break\n          }\n          case \"Seq\": {\n            const l = left.left\n            const r = left.right\n            current = seq(l, seq(r, right))\n            break\n          }\n          case \"Single\": {\n            current = left\n            sequential = List.cons(right, sequential)\n            break\n          }\n        }\n        break\n      }\n      case \"Single\": {\n        parallel = parallelCollectionAdd(\n          parallel,\n          current\n        )\n        if (List.isNil(stack)) {\n          return [parallel, sequential]\n        }\n        current = stack.head\n        stack = stack.tail\n        break\n      }\n    }\n  }\n  throw new Error(\n    \"BUG: BlockedRequests.step - please report an issue at https://github.com/Effect-TS/effect/issues\"\n  )\n}\n\n/**\n * Merges a collection of requests that must be executed sequentially with a\n * collection of requests that can be executed in parallel. If the collections\n * are both from the same single data source then the requests can be\n * pipelined while preserving ordering guarantees.\n */\nconst merge = (\n  sequential: List.List<SequentialCollection>,\n  parallel: ParallelCollection\n): List.List<SequentialCollection> => {\n  if (List.isNil(sequential)) {\n    return List.of(parallelCollectionToSequentialCollection(parallel))\n  }\n  if (parallelCollectionIsEmpty(parallel)) {\n    return sequential\n  }\n  const seqHeadKeys = sequentialCollectionKeys(sequential.head)\n  const parKeys = parallelCollectionKeys(parallel)\n  if (\n    seqHeadKeys.length === 1 &&\n    parKeys.length === 1 &&\n    Equal.equals(seqHeadKeys[0], parKeys[0])\n  ) {\n    return List.cons(\n      sequentialCollectionCombine(\n        sequential.head,\n        parallelCollectionToSequentialCollection(parallel)\n      ),\n      sequential.tail\n    )\n  }\n  return List.cons(parallelCollectionToSequentialCollection(parallel), sequential)\n}\n\n//\n// circular\n//\n\n/** @internal */\nexport const EntryTypeId: Request.EntryTypeId = Symbol.for(\n  \"effect/RequestBlock/Entry\"\n) as Request.EntryTypeId\n\n/** @internal */\nclass EntryImpl<A extends Request.Request<any, any>> implements Request.Entry<A> {\n  readonly [EntryTypeId] = blockedRequestVariance\n  constructor(\n    readonly request: A,\n    readonly result: Deferred.Deferred<Request.Request.Success<A>, Request.Request.Error<A>>,\n    readonly listeners: Request.Listeners,\n    readonly ownerId: FiberId,\n    readonly state: {\n      completed: boolean\n    }\n  ) {}\n}\n\nconst blockedRequestVariance = {\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\n/** @internal */\nexport const isEntry = (u: unknown): u is Request.Entry<unknown> => hasProperty(u, EntryTypeId)\n\n/** @internal */\nexport const makeEntry = <A extends Request.Request<any, any>>(\n  options: {\n    readonly request: A\n    readonly result: Deferred.Deferred<Request.Request.Success<A>, Request.Request.Error<A>>\n    readonly listeners: Request.Listeners\n    readonly ownerId: FiberId\n    readonly state: { completed: boolean }\n  }\n): Request.Entry<A> => new EntryImpl(options.request, options.result, options.listeners, options.ownerId, options.state)\n\n/** @internal */\nexport const RequestBlockParallelTypeId = Symbol.for(\n  \"effect/RequestBlock/RequestBlockParallel\"\n)\n\nconst parallelVariance = {\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\nclass ParallelImpl implements ParallelCollection {\n  readonly [RequestBlockParallelTypeId] = parallelVariance\n  constructor(\n    readonly map: HashMap.HashMap<\n      RequestResolver.RequestResolver<unknown, unknown>,\n      Chunk.Chunk<Request.Entry<unknown>>\n    >\n  ) {}\n}\n\n/** @internal */\nexport const parallelCollectionEmpty = (): ParallelCollection => new ParallelImpl(HashMap.empty())\n\n/** @internal */\nexport const parallelCollectionMake = <A>(\n  dataSource: RequestResolver.RequestResolver<A>,\n  blockedRequest: Request.Entry<A>\n): ParallelCollection => new ParallelImpl(HashMap.make([dataSource, Chunk.of(blockedRequest)]) as any)\n\n/** @internal */\nexport const parallelCollectionAdd = (\n  self: ParallelCollection,\n  blockedRequest: RequestBlock.Single\n): ParallelCollection =>\n  new ParallelImpl(HashMap.modifyAt(\n    self.map,\n    blockedRequest.dataSource,\n    (_) =>\n      Option.orElseSome(\n        Option.map(_, Chunk.append(blockedRequest.blockedRequest)),\n        () => Chunk.of(blockedRequest.blockedRequest)\n      )\n  ))\n\n/** @internal */\nexport const parallelCollectionCombine = (\n  self: ParallelCollection,\n  that: ParallelCollection\n): ParallelCollection =>\n  new ParallelImpl(HashMap.reduce(self.map, that.map, (map, value, key) =>\n    HashMap.set(\n      map,\n      key,\n      Option.match(HashMap.get(map, key), {\n        onNone: () => value,\n        onSome: (other) => Chunk.appendAll(value, other)\n      })\n    )))\n\n/** @internal */\nexport const parallelCollectionIsEmpty = (self: ParallelCollection): boolean => HashMap.isEmpty(self.map)\n\n/** @internal */\nexport const parallelCollectionKeys = (\n  self: ParallelCollection\n): Array<RequestResolver.RequestResolver<unknown>> => Array.from(HashMap.keys(self.map)) as any\n\n/** @internal */\nexport const parallelCollectionToSequentialCollection = (\n  self: ParallelCollection\n): SequentialCollection => sequentialCollectionMake(HashMap.map(self.map, (x) => Chunk.of(x)) as any)\n\n// TODO\n// /** @internal */\n// export const parallelCollectionToChunk = <R>(\n//   self: ParallelCollection<R>\n// ): Array<[RequestResolver.RequestResolver<unknown, R>, Array<Request.Entry<unknown>>]> => Array.from(self.map) as any\n\n/** @internal */\nexport const SequentialCollectionTypeId = Symbol.for(\n  \"effect/RequestBlock/RequestBlockSequential\"\n)\n\nconst sequentialVariance = {\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\nclass SequentialImpl implements SequentialCollection {\n  readonly [SequentialCollectionTypeId] = sequentialVariance\n  constructor(\n    readonly map: HashMap.HashMap<\n      RequestResolver.RequestResolver<unknown, unknown>,\n      Chunk.Chunk<Chunk.Chunk<Request.Entry<unknown>>>\n    >\n  ) {}\n}\n\n/** @internal */\nexport const sequentialCollectionMake = <A, R>(\n  map: HashMap.HashMap<\n    RequestResolver.RequestResolver<A, R>,\n    Chunk.Chunk<Chunk.Chunk<Request.Entry<A>>>\n  >\n): SequentialCollection => new SequentialImpl(map as any)\n\n/** @internal */\nexport const sequentialCollectionCombine = (\n  self: SequentialCollection,\n  that: SequentialCollection\n): SequentialCollection =>\n  new SequentialImpl(HashMap.reduce(that.map, self.map, (map, value, key) =>\n    HashMap.set(\n      map,\n      key,\n      Option.match(HashMap.get(map, key), {\n        onNone: () => Chunk.empty(),\n        onSome: (a) => Chunk.appendAll(a, value)\n      })\n    )))\n\n/** @internal */\nexport const sequentialCollectionIsEmpty = (self: SequentialCollection): boolean => HashMap.isEmpty(self.map)\n\n/** @internal */\nexport const sequentialCollectionKeys = (\n  self: SequentialCollection\n): Array<RequestResolver.RequestResolver<unknown>> => Array.from(HashMap.keys(self.map)) as any\n\n/** @internal */\nexport const sequentialCollectionToChunk = (\n  self: SequentialCollection\n): Array<[RequestResolver.RequestResolver<unknown>, Chunk.Chunk<Chunk.Chunk<Request.Entry<unknown>>>]> =>\n  Array.from(self.map) as any\n\n/** @internal */\nexport type RequestBlockParallelTypeId = typeof RequestBlockParallelTypeId\n\n/** @internal */\nexport interface ParallelCollection extends ParallelCollection.Variance {\n  readonly map: HashMap.HashMap<\n    RequestResolver.RequestResolver<unknown, unknown>,\n    Chunk.Chunk<Request.Entry<unknown>>\n  >\n}\n\n/** @internal */\nexport declare namespace ParallelCollection {\n  /** @internal */\n  export interface Variance {\n    readonly [RequestBlockParallelTypeId]: {}\n  }\n}\n\n/** @internal */\nexport type SequentialCollectionTypeId = typeof SequentialCollectionTypeId\n\n/** @internal */\nexport interface SequentialCollection extends SequentialCollection.Variance {\n  readonly map: HashMap.HashMap<\n    RequestResolver.RequestResolver<unknown, unknown>,\n    Chunk.Chunk<Chunk.Chunk<Request.Entry<unknown>>>\n  >\n}\n\n/** @internal */\nexport declare namespace SequentialCollection {\n  /** @internal */\n  export interface Variance {\n    readonly [SequentialCollectionTypeId]: {}\n  }\n}\n", "import * as Arr from \"../Array.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport type * as FiberId from \"../FiberId.js\"\nimport { constFalse, constTrue, dual, identity, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as Hash from \"../Hash.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport { NodeInspectSymbol, stringifyCircular, toJSON } from \"../Inspectable.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport type { Predicate, Refinement } from \"../Predicate.js\"\nimport { hasProperty, isFunction } from \"../Predicate.js\"\nimport type { AnySpan, Span } from \"../Tracer.js\"\nimport type { NoInfer } from \"../Types.js\"\nimport { getBugErrorMessage } from \"./errors.js\"\nimport * as OpCodes from \"./opCodes/cause.js\"\n\n// -----------------------------------------------------------------------------\n// Models\n// -----------------------------------------------------------------------------\n\n/** @internal */\nconst CauseSymbolKey = \"effect/Cause\"\n\n/** @internal */\nexport const CauseTypeId: Cause.CauseTypeId = Symbol.for(\n  CauseSymbolKey\n) as Cause.CauseTypeId\n\nconst variance = {\n  /* c8 ignore next */\n  _E: (_: never) => _\n}\n\n/** @internal */\nconst proto = {\n  [CauseTypeId]: variance,\n  [Hash.symbol](this: Cause.Cause<any>): number {\n    return pipe(\n      Hash.hash(CauseSymbolKey),\n      Hash.combine(Hash.hash(flattenCause(this))),\n      Hash.cached(this)\n    )\n  },\n  [Equal.symbol](this: Cause.Cause<any>, that: unknown): boolean {\n    return isCause(that) && causeEquals(this, that)\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  toJSON<E>(this: Cause.Cause<E>) {\n    switch (this._tag) {\n      case \"Empty\":\n        return { _id: \"Cause\", _tag: this._tag }\n      case \"Die\":\n        return { _id: \"Cause\", _tag: this._tag, defect: toJSON(this.defect) }\n      case \"Interrupt\":\n        return { _id: \"Cause\", _tag: this._tag, fiberId: this.fiberId.toJSON() }\n      case \"Fail\":\n        return { _id: \"Cause\", _tag: this._tag, failure: toJSON(this.error) }\n      case \"Sequential\":\n      case \"Parallel\":\n        return { _id: \"Cause\", _tag: this._tag, left: toJSON(this.left), right: toJSON(this.right) }\n    }\n  },\n  toString<E>(this: Cause.Cause<E>) {\n    return pretty(this)\n  },\n  [NodeInspectSymbol]<E>(this: Cause.Cause<E>) {\n    return this.toJSON()\n  }\n}\n\n// -----------------------------------------------------------------------------\n// Constructors\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const empty: Cause.Cause<never> = (() => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_EMPTY\n  return o\n})()\n\n/** @internal */\nexport const fail = <E>(error: E): Cause.Cause<E> => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_FAIL\n  o.error = error\n  return o\n}\n\n/** @internal */\nexport const die = (defect: unknown): Cause.Cause<never> => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_DIE\n  o.defect = defect\n  return o\n}\n\n/** @internal */\nexport const interrupt = (fiberId: FiberId.FiberId): Cause.Cause<never> => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_INTERRUPT\n  o.fiberId = fiberId\n  return o\n}\n\n/** @internal */\nexport const parallel = <E, E2>(left: Cause.Cause<E>, right: Cause.Cause<E2>): Cause.Cause<E | E2> => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_PARALLEL\n  o.left = left\n  o.right = right\n  return o\n}\n\n/** @internal */\nexport const sequential = <E, E2>(left: Cause.Cause<E>, right: Cause.Cause<E2>): Cause.Cause<E | E2> => {\n  const o = Object.create(proto)\n  o._tag = OpCodes.OP_SEQUENTIAL\n  o.left = left\n  o.right = right\n  return o\n}\n\n// -----------------------------------------------------------------------------\n// Refinements\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const isCause = (u: unknown): u is Cause.Cause<unknown> => hasProperty(u, CauseTypeId)\n\n/** @internal */\nexport const isEmptyType = <E>(self: Cause.Cause<E>): self is Cause.Empty => self._tag === OpCodes.OP_EMPTY\n\n/** @internal */\nexport const isFailType = <E>(self: Cause.Cause<E>): self is Cause.Fail<E> => self._tag === OpCodes.OP_FAIL\n\n/** @internal */\nexport const isDieType = <E>(self: Cause.Cause<E>): self is Cause.Die => self._tag === OpCodes.OP_DIE\n\n/** @internal */\nexport const isInterruptType = <E>(self: Cause.Cause<E>): self is Cause.Interrupt => self._tag === OpCodes.OP_INTERRUPT\n\n/** @internal */\nexport const isSequentialType = <E>(self: Cause.Cause<E>): self is Cause.Sequential<E> =>\n  self._tag === OpCodes.OP_SEQUENTIAL\n\n/** @internal */\nexport const isParallelType = <E>(self: Cause.Cause<E>): self is Cause.Parallel<E> => self._tag === OpCodes.OP_PARALLEL\n\n// -----------------------------------------------------------------------------\n// Getters\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const size = <E>(self: Cause.Cause<E>): number => reduceWithContext(self, void 0, SizeCauseReducer)\n\n/** @internal */\nexport const isEmpty = <E>(self: Cause.Cause<E>): boolean => {\n  if (self._tag === OpCodes.OP_EMPTY) {\n    return true\n  }\n  return reduce(self, true, (acc, cause) => {\n    switch (cause._tag) {\n      case OpCodes.OP_EMPTY: {\n        return Option.some(acc)\n      }\n      case OpCodes.OP_DIE:\n      case OpCodes.OP_FAIL:\n      case OpCodes.OP_INTERRUPT: {\n        return Option.some(false)\n      }\n      default: {\n        return Option.none()\n      }\n    }\n  })\n}\n\n/** @internal */\nexport const isFailure = <E>(self: Cause.Cause<E>): boolean => Option.isSome(failureOption(self))\n\n/** @internal */\nexport const isDie = <E>(self: Cause.Cause<E>): boolean => Option.isSome(dieOption(self))\n\n/** @internal */\nexport const isInterrupted = <E>(self: Cause.Cause<E>): boolean => Option.isSome(interruptOption(self))\n\n/** @internal */\nexport const isInterruptedOnly = <E>(self: Cause.Cause<E>): boolean =>\n  reduceWithContext(undefined, IsInterruptedOnlyCauseReducer)(self)\n\n/** @internal */\nexport const failures = <E>(self: Cause.Cause<E>): Chunk.Chunk<E> =>\n  Chunk.reverse(\n    reduce<Chunk.Chunk<E>, E>(\n      self,\n      Chunk.empty<E>(),\n      (list, cause) =>\n        cause._tag === OpCodes.OP_FAIL ?\n          Option.some(pipe(list, Chunk.prepend(cause.error))) :\n          Option.none()\n    )\n  )\n\n/** @internal */\nexport const defects = <E>(self: Cause.Cause<E>): Chunk.Chunk<unknown> =>\n  Chunk.reverse(\n    reduce<Chunk.Chunk<unknown>, E>(\n      self,\n      Chunk.empty<unknown>(),\n      (list, cause) =>\n        cause._tag === OpCodes.OP_DIE ?\n          Option.some(pipe(list, Chunk.prepend(cause.defect))) :\n          Option.none()\n    )\n  )\n\n/** @internal */\nexport const interruptors = <E>(self: Cause.Cause<E>): HashSet.HashSet<FiberId.FiberId> =>\n  reduce(self, HashSet.empty<FiberId.FiberId>(), (set, cause) =>\n    cause._tag === OpCodes.OP_INTERRUPT ?\n      Option.some(pipe(set, HashSet.add(cause.fiberId))) :\n      Option.none())\n\n/** @internal */\nexport const failureOption = <E>(self: Cause.Cause<E>): Option.Option<E> =>\n  find<E, E>(self, (cause) =>\n    cause._tag === OpCodes.OP_FAIL ?\n      Option.some(cause.error) :\n      Option.none())\n\n/** @internal */\nexport const failureOrCause = <E>(self: Cause.Cause<E>): Either.Either<Cause.Cause<never>, E> => {\n  const option = failureOption(self)\n  switch (option._tag) {\n    case \"None\": {\n      // no `E` inside this `Cause`, so it can be safely cast to `never`\n      return Either.right(self as Cause.Cause<never>)\n    }\n    case \"Some\": {\n      return Either.left(option.value)\n    }\n  }\n}\n\n/** @internal */\nexport const dieOption = <E>(self: Cause.Cause<E>): Option.Option<unknown> =>\n  find(self, (cause) =>\n    cause._tag === OpCodes.OP_DIE ?\n      Option.some(cause.defect) :\n      Option.none())\n\n/** @internal */\nexport const flipCauseOption = <E>(self: Cause.Cause<Option.Option<E>>): Option.Option<Cause.Cause<E>> =>\n  match(self, {\n    onEmpty: Option.some<Cause.Cause<E>>(empty),\n    onFail: Option.map(fail),\n    onDie: (defect) => Option.some(die(defect)),\n    onInterrupt: (fiberId) => Option.some(interrupt(fiberId)),\n    onSequential: Option.mergeWith(sequential),\n    onParallel: Option.mergeWith(parallel)\n  })\n\n/** @internal */\nexport const interruptOption = <E>(self: Cause.Cause<E>): Option.Option<FiberId.FiberId> =>\n  find(self, (cause) =>\n    cause._tag === OpCodes.OP_INTERRUPT ?\n      Option.some(cause.fiberId) :\n      Option.none())\n\n/** @internal */\nexport const keepDefects = <E>(self: Cause.Cause<E>): Option.Option<Cause.Cause<never>> =>\n  match(self, {\n    onEmpty: Option.none(),\n    onFail: () => Option.none(),\n    onDie: (defect) => Option.some(die(defect)),\n    onInterrupt: () => Option.none(),\n    onSequential: Option.mergeWith(sequential),\n    onParallel: Option.mergeWith(parallel)\n  })\n\n/** @internal */\nexport const keepDefectsAndElectFailures = <E>(self: Cause.Cause<E>): Option.Option<Cause.Cause<never>> =>\n  match(self, {\n    onEmpty: Option.none(),\n    onFail: (failure) => Option.some(die(failure)),\n    onDie: (defect) => Option.some(die(defect)),\n    onInterrupt: () => Option.none(),\n    onSequential: Option.mergeWith(sequential),\n    onParallel: Option.mergeWith(parallel)\n  })\n\n/** @internal */\nexport const linearize = <E>(self: Cause.Cause<E>): HashSet.HashSet<Cause.Cause<E>> =>\n  match(self, {\n    onEmpty: HashSet.empty(),\n    onFail: (error) => HashSet.make(fail(error)),\n    onDie: (defect) => HashSet.make(die(defect)),\n    onInterrupt: (fiberId) => HashSet.make(interrupt(fiberId)),\n    onSequential: (leftSet, rightSet) =>\n      HashSet.flatMap(leftSet, (leftCause) => HashSet.map(rightSet, (rightCause) => sequential(leftCause, rightCause))),\n    onParallel: (leftSet, rightSet) =>\n      HashSet.flatMap(leftSet, (leftCause) => HashSet.map(rightSet, (rightCause) => parallel(leftCause, rightCause)))\n  })\n\n/** @internal */\nexport const stripFailures = <E>(self: Cause.Cause<E>): Cause.Cause<never> =>\n  match(self, {\n    onEmpty: empty,\n    onFail: () => empty,\n    onDie: die,\n    onInterrupt: interrupt,\n    onSequential: sequential,\n    onParallel: parallel\n  })\n\n/** @internal */\nexport const electFailures = <E>(self: Cause.Cause<E>): Cause.Cause<never> =>\n  match(self, {\n    onEmpty: empty,\n    onFail: die,\n    onDie: die,\n    onInterrupt: interrupt,\n    onSequential: sequential,\n    onParallel: parallel\n  })\n\n/** @internal */\nexport const stripSomeDefects = dual<\n  (pf: (defect: unknown) => Option.Option<unknown>) => <E>(self: Cause.Cause<E>) => Option.Option<Cause.Cause<E>>,\n  <E>(self: Cause.Cause<E>, pf: (defect: unknown) => Option.Option<unknown>) => Option.Option<Cause.Cause<E>>\n>(\n  2,\n  <E>(self: Cause.Cause<E>, pf: (defect: unknown) => Option.Option<unknown>): Option.Option<Cause.Cause<E>> =>\n    match(self, {\n      onEmpty: Option.some<Cause.Cause<E>>(empty),\n      onFail: (error) => Option.some(fail(error)),\n      onDie: (defect) => {\n        const option = pf(defect)\n        return Option.isSome(option) ? Option.none() : Option.some(die(defect))\n      },\n      onInterrupt: (fiberId) => Option.some(interrupt(fiberId)),\n      onSequential: Option.mergeWith(sequential),\n      onParallel: Option.mergeWith(parallel)\n    })\n)\n\n// -----------------------------------------------------------------------------\n// Mapping\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const as = dual<\n  <E2>(error: E2) => <E>(self: Cause.Cause<E>) => Cause.Cause<E2>,\n  <E, E2>(self: Cause.Cause<E>, error: E2) => Cause.Cause<E2>\n>(2, (self, error) => map(self, () => error))\n\n/** @internal */\nexport const map = dual<\n  <E, E2>(f: (e: E) => E2) => (self: Cause.Cause<E>) => Cause.Cause<E2>,\n  <E, E2>(self: Cause.Cause<E>, f: (e: E) => E2) => Cause.Cause<E2>\n>(2, (self, f) => flatMap(self, (e) => fail(f(e))))\n\n// -----------------------------------------------------------------------------\n// Sequencing\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const flatMap = dual<\n  <E, E2>(f: (e: E) => Cause.Cause<E2>) => (self: Cause.Cause<E>) => Cause.Cause<E2>,\n  <E, E2>(self: Cause.Cause<E>, f: (e: E) => Cause.Cause<E2>) => Cause.Cause<E2>\n>(2, (self, f) =>\n  match(self, {\n    onEmpty: empty,\n    onFail: (error) => f(error),\n    onDie: (defect) => die(defect),\n    onInterrupt: (fiberId) => interrupt(fiberId),\n    onSequential: (left, right) => sequential(left, right),\n    onParallel: (left, right) => parallel(left, right)\n  }))\n\n/** @internal */\nexport const flatten = <E>(self: Cause.Cause<Cause.Cause<E>>): Cause.Cause<E> => flatMap(self, identity)\n\n/** @internal */\nexport const andThen: {\n  <E, E2>(f: (e: E) => Cause.Cause<E2>): (self: Cause.Cause<E>) => Cause.Cause<E2>\n  <E2>(f: Cause.Cause<E2>): <E>(self: Cause.Cause<E>) => Cause.Cause<E2>\n  <E, E2>(self: Cause.Cause<E>, f: (e: E) => Cause.Cause<E2>): Cause.Cause<E2>\n  <E, E2>(self: Cause.Cause<E>, f: Cause.Cause<E2>): Cause.Cause<E2>\n} = dual(\n  2,\n  <E, E2>(self: Cause.Cause<E>, f: ((e: E) => Cause.Cause<E2>) | Cause.Cause<E2>): Cause.Cause<E2> =>\n    isFunction(f) ? flatMap(self, f) : flatMap(self, () => f)\n)\n\n// -----------------------------------------------------------------------------\n// Equality\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const contains = dual<\n  <E2>(that: Cause.Cause<E2>) => <E>(self: Cause.Cause<E>) => boolean,\n  <E, E2>(self: Cause.Cause<E>, that: Cause.Cause<E2>) => boolean\n>(2, (self, that) => {\n  if (that._tag === OpCodes.OP_EMPTY || self === that) {\n    return true\n  }\n  return reduce(self, false, (accumulator, cause) => {\n    return Option.some(accumulator || causeEquals(cause, that))\n  })\n})\n\n/** @internal */\nconst causeEquals = (left: Cause.Cause<unknown>, right: Cause.Cause<unknown>): boolean => {\n  let leftStack: Chunk.Chunk<Cause.Cause<unknown>> = Chunk.of(left)\n  let rightStack: Chunk.Chunk<Cause.Cause<unknown>> = Chunk.of(right)\n  while (Chunk.isNonEmpty(leftStack) && Chunk.isNonEmpty(rightStack)) {\n    const [leftParallel, leftSequential] = pipe(\n      Chunk.headNonEmpty(leftStack),\n      reduce(\n        [HashSet.empty<unknown>(), Chunk.empty<Cause.Cause<unknown>>()] as const,\n        ([parallel, sequential], cause) => {\n          const [par, seq] = evaluateCause(cause)\n          return Option.some(\n            [\n              pipe(parallel, HashSet.union(par)),\n              pipe(sequential, Chunk.appendAll(seq))\n            ] as const\n          )\n        }\n      )\n    )\n    const [rightParallel, rightSequential] = pipe(\n      Chunk.headNonEmpty(rightStack),\n      reduce(\n        [HashSet.empty<unknown>(), Chunk.empty<Cause.Cause<unknown>>()] as const,\n        ([parallel, sequential], cause) => {\n          const [par, seq] = evaluateCause(cause)\n          return Option.some(\n            [\n              pipe(parallel, HashSet.union(par)),\n              pipe(sequential, Chunk.appendAll(seq))\n            ] as const\n          )\n        }\n      )\n    )\n    if (!Equal.equals(leftParallel, rightParallel)) {\n      return false\n    }\n    leftStack = leftSequential\n    rightStack = rightSequential\n  }\n  return true\n}\n\n// -----------------------------------------------------------------------------\n// Flattening\n// -----------------------------------------------------------------------------\n\n/**\n * Flattens a cause to a sequence of sets of causes, where each set represents\n * causes that fail in parallel and sequential sets represent causes that fail\n * after each other.\n *\n * @internal\n */\nconst flattenCause = (cause: Cause.Cause<unknown>): Chunk.Chunk<HashSet.HashSet<unknown>> => {\n  return flattenCauseLoop(Chunk.of(cause), Chunk.empty())\n}\n\n/** @internal */\nconst flattenCauseLoop = (\n  causes: Chunk.Chunk<Cause.Cause<unknown>>,\n  flattened: Chunk.Chunk<HashSet.HashSet<unknown>>\n): Chunk.Chunk<HashSet.HashSet<unknown>> => {\n  // eslint-disable-next-line no-constant-condition\n  while (1) {\n    const [parallel, sequential] = pipe(\n      causes,\n      Arr.reduce(\n        [HashSet.empty<unknown>(), Chunk.empty<Cause.Cause<unknown>>()] as const,\n        ([parallel, sequential], cause) => {\n          const [par, seq] = evaluateCause(cause)\n          return [\n            pipe(parallel, HashSet.union(par)),\n            pipe(sequential, Chunk.appendAll(seq))\n          ]\n        }\n      )\n    )\n    const updated = HashSet.size(parallel) > 0 ?\n      pipe(flattened, Chunk.prepend(parallel)) :\n      flattened\n    if (Chunk.isEmpty(sequential)) {\n      return Chunk.reverse(updated)\n    }\n    causes = sequential\n    flattened = updated\n  }\n  throw new Error(getBugErrorMessage(\"Cause.flattenCauseLoop\"))\n}\n\n// -----------------------------------------------------------------------------\n// Finding\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const find = dual<\n  <E, Z>(pf: (cause: Cause.Cause<E>) => Option.Option<Z>) => (self: Cause.Cause<E>) => Option.Option<Z>,\n  <E, Z>(self: Cause.Cause<E>, pf: (cause: Cause.Cause<E>) => Option.Option<Z>) => Option.Option<Z>\n>(2, <E, Z>(self: Cause.Cause<E>, pf: (cause: Cause.Cause<E>) => Option.Option<Z>) => {\n  const stack: Array<Cause.Cause<E>> = [self]\n  while (stack.length > 0) {\n    const item = stack.pop()!\n    const option = pf(item)\n    switch (option._tag) {\n      case \"None\": {\n        switch (item._tag) {\n          case OpCodes.OP_SEQUENTIAL:\n          case OpCodes.OP_PARALLEL: {\n            stack.push(item.right)\n            stack.push(item.left)\n            break\n          }\n        }\n        break\n      }\n      case \"Some\": {\n        return option\n      }\n    }\n  }\n  return Option.none()\n})\n\n// -----------------------------------------------------------------------------\n// Filtering\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const filter: {\n  <E, EB extends E>(\n    refinement: Refinement<Cause.Cause<NoInfer<E>>, Cause.Cause<EB>>\n  ): (self: Cause.Cause<E>) => Cause.Cause<EB>\n  <E>(predicate: Predicate<Cause.Cause<NoInfer<E>>>): (self: Cause.Cause<E>) => Cause.Cause<E>\n  <E, EB extends E>(self: Cause.Cause<E>, refinement: Refinement<Cause.Cause<E>, Cause.Cause<EB>>): Cause.Cause<EB>\n  <E>(self: Cause.Cause<E>, predicate: Predicate<Cause.Cause<E>>): Cause.Cause<E>\n} = dual(\n  2,\n  <E>(self: Cause.Cause<E>, predicate: Predicate<Cause.Cause<E>>): Cause.Cause<E> =>\n    reduceWithContext(self, void 0, FilterCauseReducer(predicate))\n)\n\n// -----------------------------------------------------------------------------\n// Evaluation\n// -----------------------------------------------------------------------------\n\n/**\n * Takes one step in evaluating a cause, returning a set of causes that fail\n * in parallel and a list of causes that fail sequentially after those causes.\n *\n * @internal\n */\nconst evaluateCause = (\n  self: Cause.Cause<unknown>\n): [HashSet.HashSet<unknown>, Chunk.Chunk<Cause.Cause<unknown>>] => {\n  let cause: Cause.Cause<unknown> | undefined = self\n  const stack: Array<Cause.Cause<unknown>> = []\n  let _parallel = HashSet.empty<unknown>()\n  let _sequential = Chunk.empty<Cause.Cause<unknown>>()\n  while (cause !== undefined) {\n    switch (cause._tag) {\n      case OpCodes.OP_EMPTY: {\n        if (stack.length === 0) {\n          return [_parallel, _sequential]\n        }\n        cause = stack.pop()\n        break\n      }\n      case OpCodes.OP_FAIL: {\n        _parallel = HashSet.add(_parallel, Chunk.make(cause._tag, cause.error))\n        if (stack.length === 0) {\n          return [_parallel, _sequential]\n        }\n        cause = stack.pop()\n        break\n      }\n      case OpCodes.OP_DIE: {\n        _parallel = HashSet.add(_parallel, Chunk.make(cause._tag, cause.defect))\n        if (stack.length === 0) {\n          return [_parallel, _sequential]\n        }\n        cause = stack.pop()\n        break\n      }\n      case OpCodes.OP_INTERRUPT: {\n        _parallel = HashSet.add(_parallel, Chunk.make(cause._tag, cause.fiberId as unknown))\n        if (stack.length === 0) {\n          return [_parallel, _sequential]\n        }\n        cause = stack.pop()\n        break\n      }\n      case OpCodes.OP_SEQUENTIAL: {\n        switch (cause.left._tag) {\n          case OpCodes.OP_EMPTY: {\n            cause = cause.right\n            break\n          }\n          case OpCodes.OP_SEQUENTIAL: {\n            cause = sequential(cause.left.left, sequential(cause.left.right, cause.right))\n            break\n          }\n          case OpCodes.OP_PARALLEL: {\n            cause = parallel(\n              sequential(cause.left.left, cause.right),\n              sequential(cause.left.right, cause.right)\n            )\n            break\n          }\n          default: {\n            _sequential = Chunk.prepend(_sequential, cause.right)\n            cause = cause.left\n            break\n          }\n        }\n        break\n      }\n      case OpCodes.OP_PARALLEL: {\n        stack.push(cause.right)\n        cause = cause.left\n        break\n      }\n    }\n  }\n  throw new Error(getBugErrorMessage(\"Cause.evaluateCauseLoop\"))\n}\n\n// -----------------------------------------------------------------------------\n// Reducing\n// -----------------------------------------------------------------------------\n\n/** @internal */\nconst SizeCauseReducer: Cause.CauseReducer<unknown, unknown, number> = {\n  emptyCase: () => 0,\n  failCase: () => 1,\n  dieCase: () => 1,\n  interruptCase: () => 1,\n  sequentialCase: (_, left, right) => left + right,\n  parallelCase: (_, left, right) => left + right\n}\n\n/** @internal */\nconst IsInterruptedOnlyCauseReducer: Cause.CauseReducer<unknown, unknown, boolean> = {\n  emptyCase: constTrue,\n  failCase: constFalse,\n  dieCase: constFalse,\n  interruptCase: constTrue,\n  sequentialCase: (_, left, right) => left && right,\n  parallelCase: (_, left, right) => left && right\n}\n\n/** @internal */\nconst FilterCauseReducer = <E>(\n  predicate: Predicate<Cause.Cause<E>>\n): Cause.CauseReducer<unknown, E, Cause.Cause<E>> => ({\n  emptyCase: () => empty,\n  failCase: (_, error) => fail(error),\n  dieCase: (_, defect) => die(defect),\n  interruptCase: (_, fiberId) => interrupt(fiberId),\n  sequentialCase: (_, left, right) => {\n    if (predicate(left)) {\n      if (predicate(right)) {\n        return sequential(left, right)\n      }\n      return left\n    }\n    if (predicate(right)) {\n      return right\n    }\n    return empty\n  },\n  parallelCase: (_, left, right) => {\n    if (predicate(left)) {\n      if (predicate(right)) {\n        return parallel(left, right)\n      }\n      return left\n    }\n    if (predicate(right)) {\n      return right\n    }\n    return empty\n  }\n})\n\n/** @internal */\ntype CauseCase = SequentialCase | ParallelCase\n\nconst OP_SEQUENTIAL_CASE = \"SequentialCase\"\n\nconst OP_PARALLEL_CASE = \"ParallelCase\"\n\n/** @internal */\ninterface SequentialCase {\n  readonly _tag: typeof OP_SEQUENTIAL_CASE\n}\n\n/** @internal */\ninterface ParallelCase {\n  readonly _tag: typeof OP_PARALLEL_CASE\n}\n\n/** @internal */\nexport const match = dual<\n  <Z, E>(\n    options: {\n      readonly onEmpty: Z\n      readonly onFail: (error: E) => Z\n      readonly onDie: (defect: unknown) => Z\n      readonly onInterrupt: (fiberId: FiberId.FiberId) => Z\n      readonly onSequential: (left: Z, right: Z) => Z\n      readonly onParallel: (left: Z, right: Z) => Z\n    }\n  ) => (self: Cause.Cause<E>) => Z,\n  <Z, E>(\n    self: Cause.Cause<E>,\n    options: {\n      readonly onEmpty: Z\n      readonly onFail: (error: E) => Z\n      readonly onDie: (defect: unknown) => Z\n      readonly onInterrupt: (fiberId: FiberId.FiberId) => Z\n      readonly onSequential: (left: Z, right: Z) => Z\n      readonly onParallel: (left: Z, right: Z) => Z\n    }\n  ) => Z\n>(2, (self, { onDie, onEmpty, onFail, onInterrupt, onParallel, onSequential }) => {\n  return reduceWithContext(self, void 0, {\n    emptyCase: () => onEmpty,\n    failCase: (_, error) => onFail(error),\n    dieCase: (_, defect) => onDie(defect),\n    interruptCase: (_, fiberId) => onInterrupt(fiberId),\n    sequentialCase: (_, left, right) => onSequential(left, right),\n    parallelCase: (_, left, right) => onParallel(left, right)\n  })\n})\n\n/** @internal */\nexport const reduce = dual<\n  <Z, E>(zero: Z, pf: (accumulator: Z, cause: Cause.Cause<E>) => Option.Option<Z>) => (self: Cause.Cause<E>) => Z,\n  <Z, E>(self: Cause.Cause<E>, zero: Z, pf: (accumulator: Z, cause: Cause.Cause<E>) => Option.Option<Z>) => Z\n>(3, <Z, E>(self: Cause.Cause<E>, zero: Z, pf: (accumulator: Z, cause: Cause.Cause<E>) => Option.Option<Z>) => {\n  let accumulator: Z = zero\n  let cause: Cause.Cause<E> | undefined = self\n  const causes: Array<Cause.Cause<E>> = []\n  while (cause !== undefined) {\n    const option = pf(accumulator, cause)\n    accumulator = Option.isSome(option) ? option.value : accumulator\n    switch (cause._tag) {\n      case OpCodes.OP_SEQUENTIAL: {\n        causes.push(cause.right)\n        cause = cause.left\n        break\n      }\n      case OpCodes.OP_PARALLEL: {\n        causes.push(cause.right)\n        cause = cause.left\n        break\n      }\n      default: {\n        cause = undefined\n        break\n      }\n    }\n    if (cause === undefined && causes.length > 0) {\n      cause = causes.pop()!\n    }\n  }\n  return accumulator\n})\n\n/** @internal */\nexport const reduceWithContext = dual<\n  <C, E, Z>(context: C, reducer: Cause.CauseReducer<C, E, Z>) => (self: Cause.Cause<E>) => Z,\n  <C, E, Z>(self: Cause.Cause<E>, context: C, reducer: Cause.CauseReducer<C, E, Z>) => Z\n>(3, <C, E, Z>(self: Cause.Cause<E>, context: C, reducer: Cause.CauseReducer<C, E, Z>) => {\n  const input: Array<Cause.Cause<E>> = [self]\n  const output: Array<Either.Either<Z, CauseCase>> = []\n  while (input.length > 0) {\n    const cause = input.pop()!\n    switch (cause._tag) {\n      case OpCodes.OP_EMPTY: {\n        output.push(Either.right(reducer.emptyCase(context)))\n        break\n      }\n      case OpCodes.OP_FAIL: {\n        output.push(Either.right(reducer.failCase(context, cause.error)))\n        break\n      }\n      case OpCodes.OP_DIE: {\n        output.push(Either.right(reducer.dieCase(context, cause.defect)))\n        break\n      }\n      case OpCodes.OP_INTERRUPT: {\n        output.push(Either.right(reducer.interruptCase(context, cause.fiberId)))\n        break\n      }\n      case OpCodes.OP_SEQUENTIAL: {\n        input.push(cause.right)\n        input.push(cause.left)\n        output.push(Either.left({ _tag: OP_SEQUENTIAL_CASE }))\n        break\n      }\n      case OpCodes.OP_PARALLEL: {\n        input.push(cause.right)\n        input.push(cause.left)\n        output.push(Either.left({ _tag: OP_PARALLEL_CASE }))\n        break\n      }\n    }\n  }\n  const accumulator: Array<Z> = []\n  while (output.length > 0) {\n    const either = output.pop()!\n    switch (either._tag) {\n      case \"Left\": {\n        switch (either.left._tag) {\n          case OP_SEQUENTIAL_CASE: {\n            const left = accumulator.pop()!\n            const right = accumulator.pop()!\n            const value = reducer.sequentialCase(context, left, right)\n            accumulator.push(value)\n            break\n          }\n          case OP_PARALLEL_CASE: {\n            const left = accumulator.pop()!\n            const right = accumulator.pop()!\n            const value = reducer.parallelCase(context, left, right)\n            accumulator.push(value)\n            break\n          }\n        }\n        break\n      }\n      case \"Right\": {\n        accumulator.push(either.right)\n        break\n      }\n    }\n  }\n  if (accumulator.length === 0) {\n    throw new Error(\n      \"BUG: Cause.reduceWithContext - please report an issue at https://github.com/Effect-TS/effect/issues\"\n    )\n  }\n  return accumulator.pop()!\n})\n\n// -----------------------------------------------------------------------------\n// Pretty Printing\n// -----------------------------------------------------------------------------\n\n/** @internal */\nexport const pretty = <E>(cause: Cause.Cause<E>, options?: {\n  readonly renderErrorCause?: boolean | undefined\n}): string => {\n  if (isInterruptedOnly(cause)) {\n    return \"All fibers interrupted without errors.\"\n  }\n  return prettyErrors<E>(cause).map(function(e) {\n    if (options?.renderErrorCause !== true || e.cause === undefined) {\n      return e.stack\n    }\n    return `${e.stack} {\\n${renderErrorCause(e.cause as PrettyError, \"  \")}\\n}`\n  }).join(\"\\n\")\n}\n\nconst renderErrorCause = (cause: PrettyError, prefix: string) => {\n  const lines = cause.stack!.split(\"\\n\")\n  let stack = `${prefix}[cause]: ${lines[0]}`\n  for (let i = 1, len = lines.length; i < len; i++) {\n    stack += `\\n${prefix}${lines[i]}`\n  }\n  if (cause.cause) {\n    stack += ` {\\n${renderErrorCause(cause.cause as PrettyError, `${prefix}  `)}\\n${prefix}}`\n  }\n  return stack\n}\n\n/** @internal */\nexport class PrettyError extends globalThis.Error implements Cause.PrettyError {\n  span: undefined | Span = undefined\n  constructor(originalError: unknown) {\n    const originalErrorIsObject = typeof originalError === \"object\" && originalError !== null\n    const prevLimit = Error.stackTraceLimit\n    Error.stackTraceLimit = 1\n    super(\n      prettyErrorMessage(originalError),\n      originalErrorIsObject && \"cause\" in originalError && typeof originalError.cause !== \"undefined\"\n        ? { cause: new PrettyError(originalError.cause) }\n        : undefined\n    )\n    if (this.message === \"\") {\n      this.message = \"An error has occurred\"\n    }\n    Error.stackTraceLimit = prevLimit\n    this.name = originalError instanceof Error ? originalError.name : \"Error\"\n    if (originalErrorIsObject) {\n      if (spanSymbol in originalError) {\n        this.span = originalError[spanSymbol] as Span\n      }\n      Object.keys(originalError).forEach((key) => {\n        if (!(key in this)) {\n          // @ts-expect-error\n          this[key] = originalError[key]\n        }\n      })\n    }\n    this.stack = prettyErrorStack(\n      `${this.name}: ${this.message}`,\n      originalError instanceof Error && originalError.stack\n        ? originalError.stack\n        : \"\",\n      this.span\n    )\n  }\n}\n\n/**\n * A utility function for generating human-readable error messages from a generic error of type `unknown`.\n *\n * Rules:\n *\n * 1) If the input `u` is already a string, it's considered a message.\n * 2) If `u` is an Error instance with a message defined, it uses the message.\n * 3) If `u` has a user-defined `toString()` method, it uses that method.\n * 4) Otherwise, it uses `Inspectable.stringifyCircular` to produce a string representation and uses it as the error message,\n *   with \"Error\" added as a prefix.\n *\n * @internal\n */\nexport const prettyErrorMessage = (u: unknown): string => {\n  // 1)\n  if (typeof u === \"string\") {\n    return u\n  }\n  // 2)\n  if (typeof u === \"object\" && u !== null && u instanceof Error) {\n    return u.message\n  }\n  // 3)\n  try {\n    if (\n      hasProperty(u, \"toString\") &&\n      isFunction(u[\"toString\"]) &&\n      u[\"toString\"] !== Object.prototype.toString &&\n      u[\"toString\"] !== globalThis.Array.prototype.toString\n    ) {\n      return u[\"toString\"]()\n    }\n  } catch {\n    // something's off, rollback to json\n  }\n  // 4)\n  return stringifyCircular(u)\n}\n\nconst locationRegex = /\\((.*)\\)/g\n\n/** @internal */\nexport const spanToTrace = globalValue(\"effect/Tracer/spanToTrace\", () => new WeakMap())\n\nconst prettyErrorStack = (message: string, stack: string, span?: Span | undefined): string => {\n  const out: Array<string> = [message]\n  const lines = stack.startsWith(message) ? stack.slice(message.length).split(\"\\n\") : stack.split(\"\\n\")\n\n  for (let i = 1; i < lines.length; i++) {\n    if (lines[i].includes(\" at new BaseEffectError\") || lines[i].includes(\" at new YieldableError\")) {\n      i++\n      continue\n    }\n    if (lines[i].includes(\"Generator.next\")) {\n      break\n    }\n    if (lines[i].includes(\"effect_internal_function\")) {\n      break\n    }\n    out.push(\n      lines[i]\n        .replace(/at .*effect_instruction_i.*\\((.*)\\)/, \"at $1\")\n        .replace(/EffectPrimitive\\.\\w+/, \"<anonymous>\")\n    )\n  }\n\n  if (span) {\n    let current: Span | AnySpan | undefined = span\n    let i = 0\n    while (current && current._tag === \"Span\" && i < 10) {\n      const stackFn = spanToTrace.get(current)\n      if (typeof stackFn === \"function\") {\n        const stack = stackFn()\n        if (typeof stack === \"string\") {\n          const locationMatchAll = stack.matchAll(locationRegex)\n          let match = false\n          for (const [, location] of locationMatchAll) {\n            match = true\n            out.push(`    at ${current.name} (${location})`)\n          }\n          if (!match) {\n            out.push(`    at ${current.name} (${stack.replace(/^at /, \"\")})`)\n          }\n        } else {\n          out.push(`    at ${current.name}`)\n        }\n      } else {\n        out.push(`    at ${current.name}`)\n      }\n      current = Option.getOrUndefined(current.parent)\n      i++\n    }\n  }\n\n  return out.join(\"\\n\")\n}\n\n/** @internal */\nexport const spanSymbol = Symbol.for(\"effect/SpanAnnotation\")\n\n/** @internal */\nexport const prettyErrors = <E>(cause: Cause.Cause<E>): Array<PrettyError> =>\n  reduceWithContext(cause, void 0, {\n    emptyCase: (): Array<PrettyError> => [],\n    dieCase: (_, unknownError) => {\n      return [new PrettyError(unknownError)]\n    },\n    failCase: (_, error) => {\n      return [new PrettyError(error)]\n    },\n    interruptCase: () => [],\n    parallelCase: (_, l, r) => [...l, ...r],\n    sequentialCase: (_, l, r) => [...l, ...r]\n  })\n", "/** @internal */\nexport const OP_DIE = \"Die\" as const\n\n/** @internal */\nexport type OP_DIE = typeof OP_DIE\n\n/** @internal */\nexport const OP_EMPTY = \"Empty\" as const\n\n/** @internal */\nexport type OP_EMPTY = typeof OP_EMPTY\n\n/** @internal */\nexport const OP_FAIL = \"Fail\" as const\n\n/** @internal */\nexport type OP_FAIL = typeof OP_FAIL\n\n/** @internal */\nexport const OP_INTERRUPT = \"Interrupt\" as const\n\n/** @internal */\nexport type OP_INTERRUPT = typeof OP_INTERRUPT\n\n/** @internal */\nexport const OP_PARALLEL = \"Parallel\" as const\n\n/** @internal */\nexport type OP_PARALLEL = typeof OP_PARALLEL\n\n/** @internal */\nexport const OP_SEQUENTIAL = \"Sequential\" as const\n\n/** @internal */\nexport type OP_SEQUENTIAL = typeof OP_SEQUENTIAL\n", "import type * as Deferred from \"../Deferred.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as OpCodes from \"./opCodes/deferred.js\"\n\n/** @internal */\nconst DeferredSymbolKey = \"effect/Deferred\"\n\n/** @internal */\nexport const DeferredTypeId: Deferred.DeferredTypeId = Symbol.for(\n  DeferredSymbolKey\n) as Deferred.DeferredTypeId\n\n/** @internal */\nexport const deferredVariance = {\n  /* c8 ignore next */\n  _E: (_: any) => _,\n  /* c8 ignore next */\n  _A: (_: any) => _\n}\n\n/** @internal */\nexport type State</* in out */ A, /* in out */ E> = Pending<A, E> | Done<A, E>\n\n/** @internal */\nexport interface Pending<in A, in E> {\n  readonly _tag: \"Pending\"\n  readonly joiners: Array<(effect: Effect.Effect<A, E>) => void>\n}\n\n/** @internal */\nexport interface Done<out A, out E> {\n  readonly _tag: \"Done\"\n  readonly effect: Effect.Effect<A, E>\n}\n\n/** @internal */\nexport const pending = <A, E>(\n  joiners: Array<(effect: Effect.Effect<A, E>) => void>\n): State<A, E> => {\n  return { _tag: OpCodes.OP_STATE_PENDING, joiners }\n}\n\n/** @internal */\nexport const done = <A, E>(effect: Effect.Effect<A, E>): State<A, E> => {\n  return { _tag: OpCodes.OP_STATE_DONE, effect }\n}\n", "/** @internal */\nexport const OP_STATE_PENDING = \"Pending\" as const\n\n/** @internal */\nexport type OP_STATE_PENDING = typeof OP_STATE_PENDING\n\n/** @internal */\nexport const OP_STATE_DONE = \"Done\" as const\n\n/** @internal */\nexport type OP_STATE_DONE = typeof OP_STATE_DONE\n", "/** @internal */\nexport class SingleShotGen<T, A> implements Generator<T, A> {\n  called = false\n\n  constructor(readonly self: T) {\n  }\n\n  next(a: A): IteratorResult<T, A> {\n    return this.called ?\n      ({\n        value: a,\n        done: true\n      }) :\n      (this.called = true,\n        ({\n          value: this.self,\n          done: false\n        }))\n  }\n\n  return(a: A): IteratorResult<T, A> {\n    return ({\n      value: a,\n      done: true\n    })\n  }\n\n  throw(e: unknown): IteratorResult<T, A> {\n    throw e\n  }\n\n  [Symbol.iterator](): Generator<T, A> {\n    return new SingleShotGen<T, A>(this.self)\n  }\n}\n", "/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as core from \"./internal/core.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type { NoInfer } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\n/**\n * An `Exit<A, E = never>` describes the result of a executing an `Effect` workflow.\n *\n * There are two possible values for an `Exit<A, E>`:\n *   - `Exit.Success` contain a success value of type `A`\n *   - `Exit.Failure` contains a failure `Cause` of type `E`\n *\n * @since 2.0.0\n * @category models\n */\nexport type Exit<A, E = never> = Success<A, E> | Failure<A, E>\n\n/**\n * Represents a failed `Effect` workflow containing the `Cause` of the failure\n * of type `E`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Failure<out A, out E> extends Effect.Effect<A, E>, Pipeable, Inspectable {\n  readonly _tag: \"Failure\"\n  readonly _op: \"Failure\"\n  readonly cause: Cause.Cause<E>\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: ExitUnify<this>\n  [Unify.ignoreSymbol]?: ExitUnifyIgnore\n  /** @internal */\n  readonly effect_instruction_i0: Cause.Cause<E>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface ExitUnify<A extends { [Unify.typeSymbol]?: any }> extends Effect.EffectUnify<A> {\n  Exit?: () => A[Unify.typeSymbol] extends Exit<infer A0, infer E0> | infer _ ? Exit<A0, E0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface ExitUnifyIgnore extends Effect.EffectUnifyIgnore {\n  Effect?: true\n}\n\n/**\n * Represents a successful `Effect` workflow and containing the returned value\n * of type `A`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Success<out A, out E> extends Effect.Effect<A, E>, Pipeable, Inspectable {\n  readonly _tag: \"Success\"\n  readonly _op: \"Success\"\n  readonly value: A\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: ExitUnify<this>\n  [Unify.ignoreSymbol]?: ExitUnifyIgnore\n  /** @internal */\n  readonly effect_instruction_i0: A\n}\n\n/**\n * Returns `true` if the specified value is an `Exit`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isExit: (u: unknown) => u is Exit<unknown, unknown> = core.exitIsExit\n\n/**\n * Returns `true` if the specified `Exit` is a `Failure`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFailure: <A, E>(self: Exit<A, E>) => self is Failure<A, E> = core.exitIsFailure\n\n/**\n * Returns `true` if the specified `Exit` is a `Success`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSuccess: <A, E>(self: Exit<A, E>) => self is Success<A, E> = core.exitIsSuccess\n\n/**\n * Returns `true` if the specified exit is a `Failure` **and** the `Cause` of\n * the failure was due to interruption, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isInterrupted: <A, E>(self: Exit<A, E>) => boolean = core.exitIsInterrupted\n\n/**\n * Maps the `Success` value of the specified exit to the provided constant\n * value.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const as: {\n  /**\n   * Maps the `Success` value of the specified exit to the provided constant\n   * value.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A2>(value: A2): <A, E>(self: Exit<A, E>) => Exit<A2, E>\n  /**\n   * Maps the `Success` value of the specified exit to the provided constant\n   * value.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, A2>(self: Exit<A, E>, value: A2): Exit<A2, E>\n} = core.exitAs\n\n/**\n * Maps the `Success` value of the specified exit to a void.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const asVoid: <A, E>(self: Exit<A, E>) => Exit<void, E> = core.exitAsVoid\n\n/**\n * Returns a `Some<Cause<E>>` if the specified exit is a `Failure`, `None`\n * otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const causeOption: <A, E>(self: Exit<A, E>) => Option.Option<Cause.Cause<E>> = core.exitCauseOption\n\n/**\n * Collects all of the specified exit values into a `Some<Exit<List<A>, E>>`. If\n * the provided iterable contains no elements, `None` will be returned.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const all: <A, E>(\n  exits: Iterable<Exit<A, E>>,\n  options?: { readonly parallel?: boolean | undefined } | undefined\n) => Option.Option<Exit<Array<A>, E>> = core.exitCollectAll\n\n/**\n * Constructs a new `Exit.Failure` from the specified unrecoverable defect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const die: (defect: unknown) => Exit<never> = core.exitDie\n\n/**\n * Executes the predicate on the value of the specified exit if it is a\n * `Success`, otherwise returns `false`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const exists: {\n  /**\n   * Executes the predicate on the value of the specified exit if it is a\n   * `Success`, otherwise returns `false`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): <E>(self: Exit<A, E>) => self is Exit<B>\n  /**\n   * Executes the predicate on the value of the specified exit if it is a\n   * `Success`, otherwise returns `false`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): <E>(self: Exit<A, E>) => boolean\n  /**\n   * Executes the predicate on the value of the specified exit if it is a\n   * `Success`, otherwise returns `false`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, E, B extends A>(self: Exit<A, E>, refinement: Refinement<A, B>): self is Exit<B>\n  /**\n   * Executes the predicate on the value of the specified exit if it is a\n   * `Success`, otherwise returns `false`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, E>(self: Exit<A, E>, predicate: Predicate<A>): boolean\n} = core.exitExists\n\n/**\n * Constructs a new `Exit.Failure` from the specified recoverable error of type\n * `E`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Exit<never, E> = core.exitFail\n\n/**\n * Constructs a new `Exit.Failure` from the specified `Cause` of type `E`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Exit<never, E> = core.exitFailCause\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, A2, E2>(f: (a: A) => Exit<A2, E2>): <E>(self: Exit<A, E>) => Exit<A2, E2 | E>\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, E2, A2>(self: Exit<A, E>, f: (a: A) => Exit<A2, E2>): Exit<A2, E | E2>\n} = core.exitFlatMap\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMapEffect: {\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, A2, E2, R>(f: (a: A) => Effect.Effect<Exit<A2, E>, E2, R>): (self: Exit<A, E>) => Effect.Effect<Exit<A2, E>, E2, R>\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, A2, E2, R>(self: Exit<A, E>, f: (a: A) => Effect.Effect<Exit<A2, E>, E2, R>): Effect.Effect<Exit<A2, E>, E2, R>\n} = core.exitFlatMapEffect\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: <A, E, E2>(self: Exit<Exit<A, E>, E2>) => Exit<A, E | E2> = core.exitFlatten\n\n/**\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachEffect: {\n  /**\n   * @since 2.0.0\n   * @category traversing\n   */\n  <A, B, E2, R>(f: (a: A) => Effect.Effect<B, E2, R>): <E>(self: Exit<A, E>) => Effect.Effect<Exit<B, E2 | E>, never, R>\n  /**\n   * @since 2.0.0\n   * @category traversing\n   */\n  <A, E, B, E2, R>(self: Exit<A, E>, f: (a: A) => Effect.Effect<B, E2, R>): Effect.Effect<Exit<B, E | E2>, never, R>\n} = core.exitForEachEffect\n\n/**\n * Converts an `Either<R, L>` into an `Exit<R, L>`.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const fromEither: <R, L>(either: Either.Either<R, L>) => Exit<R, L> = core.exitFromEither\n\n/**\n * Converts an `Option<A>` into an `Exit<void, A>`.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const fromOption: <A>(option: Option.Option<A>) => Exit<A, void> = core.exitFromOption\n\n/**\n * Returns the `A` if specified exit is a `Success`, otherwise returns the\n * alternate `A` value computed from the specified function which receives the\n * `Cause<E>` of the exit `Failure`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOrElse: {\n  /**\n   * Returns the `A` if specified exit is a `Success`, otherwise returns the\n   * alternate `A` value computed from the specified function which receives the\n   * `Cause<E>` of the exit `Failure`.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <E, A2>(orElse: (cause: Cause.Cause<E>) => A2): <A>(self: Exit<A, E>) => A2 | A\n  /**\n   * Returns the `A` if specified exit is a `Success`, otherwise returns the\n   * alternate `A` value computed from the specified function which receives the\n   * `Cause<E>` of the exit `Failure`.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <A, E, A2>(self: Exit<A, E>, orElse: (cause: Cause.Cause<E>) => A2): A | A2\n} = core.exitGetOrElse\n\n/**\n * Constructs a new `Exit.Failure` from the specified `FiberId` indicating that\n * the `Fiber` running an `Effect` workflow was terminated due to interruption.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const interrupt: (fiberId: FiberId.FiberId) => Exit<never> = core.exitInterrupt\n\n/**\n * Maps over the `Success` value of the specified exit using the provided\n * function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Maps over the `Success` value of the specified exit using the provided\n   * function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B>(f: (a: A) => B): <E>(self: Exit<A, E>) => Exit<B, E>\n  /**\n   * Maps over the `Success` value of the specified exit using the provided\n   * function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, B>(self: Exit<A, E>, f: (a: A) => B): Exit<B, E>\n} = core.exitMap\n\n/**\n * Maps over the `Success` and `Failure` cases of the specified exit using the\n * provided functions.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapBoth: {\n  /**\n   * Maps over the `Success` and `Failure` cases of the specified exit using the\n   * provided functions.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, A, E2, A2>(\n   options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): (self: Exit<A, E>) => Exit<A2, E2>\n  /**\n   * Maps over the `Success` and `Failure` cases of the specified exit using the\n   * provided functions.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, E2, A2>(\n   self: Exit<A, E>,\n   options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): Exit<A2, E2>\n} = core.exitMapBoth\n\n/**\n * Maps over the error contained in the `Failure` of the specified exit using\n * the provided function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapError: {\n  /**\n   * Maps over the error contained in the `Failure` of the specified exit using\n   * the provided function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, E2>(f: (e: E) => E2): <A>(self: Exit<A, E>) => Exit<A, E2>\n  /**\n   * Maps over the error contained in the `Failure` of the specified exit using\n   * the provided function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, E2>(self: Exit<A, E>, f: (e: E) => E2): Exit<A, E2>\n} = core.exitMapError\n\n/**\n * Maps over the `Cause` contained in the `Failure` of the specified exit using\n * the provided function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapErrorCause: {\n  /**\n   * Maps over the `Cause` contained in the `Failure` of the specified exit using\n   * the provided function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, E2>(f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): <A>(self: Exit<A, E>) => Exit<A, E2>\n  /**\n   * Maps over the `Cause` contained in the `Failure` of the specified exit using\n   * the provided function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, A, E2>(self: Exit<A, E>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Exit<A, E2>\n} = core.exitMapErrorCause\n\n/**\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  /**\n   * @since 2.0.0\n   * @category folding\n   */\n  <E, A, Z1, Z2>(\n   options: { readonly onFailure: (cause: Cause.Cause<E>) => Z1; readonly onSuccess: (a: A) => Z2 }\n  ): (self: Exit<A, E>) => Z1 | Z2\n  /**\n   * @since 2.0.0\n   * @category folding\n   */\n  <A, E, Z1, Z2>(\n   self: Exit<A, E>,\n   options: { readonly onFailure: (cause: Cause.Cause<E>) => Z1; readonly onSuccess: (a: A) => Z2 }\n  ): Z1 | Z2\n} = core.exitMatch\n\n/**\n * @since 2.0.0\n * @category folding\n */\nexport const matchEffect: {\n  /**\n   * @since 2.0.0\n   * @category folding\n   */\n  <E, A2, E2, R, A, A3, E3, R2>(\n   options: {\n     readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R>\n     readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R2>\n   }\n  ): (self: Exit<A, E>) => Effect.Effect<A2 | A3, E2 | E3, R | R2>\n  /**\n   * @since 2.0.0\n   * @category folding\n   */\n  <A, E, A2, E2, R, A3, E3, R2>(\n   self: Exit<A, E>,\n   options: {\n     readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R>\n     readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R2>\n   }\n  ): Effect.Effect<A2 | A3, E2 | E3, R | R2>\n} = core.exitMatchEffect\n\n/**\n * Constructs a new `Exit.Success` containing the specified value of type `A`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Exit<A> = core.exitSucceed\n\nconst void_: Exit<void> = core.exitVoid\nexport {\n  /**\n   * Represents an `Exit` which succeeds with `undefined`.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  void_ as void\n}\n\n/**\n * Sequentially zips the this result with the specified result or else returns\n * the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  /**\n   * Sequentially zips the this result with the specified result or else returns\n   * the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<[A, A2], E2 | E>\n  /**\n   * Sequentially zips the this result with the specified result or else returns\n   * the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<[A, A2], E | E2>\n} = core.exitZip\n\n/**\n * Sequentially zips the this result with the specified result discarding the\n * second element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  /**\n   * Sequentially zips the this result with the specified result discarding the\n   * second element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A, E2 | E>\n  /**\n   * Sequentially zips the this result with the specified result discarding the\n   * second element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A, E | E2>\n} = core.exitZipLeft\n\n/**\n * Sequentially zips the this result with the specified result discarding the\n * first element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  /**\n   * Sequentially zips the this result with the specified result discarding the\n   * first element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A2, E2 | E>\n  /**\n   * Sequentially zips the this result with the specified result discarding the\n   * first element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A2, E | E2>\n} = core.exitZipRight\n\n/**\n * Parallelly zips the this result with the specified result or else returns\n * the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipPar: {\n  /**\n   * Parallelly zips the this result with the specified result or else returns\n   * the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<[A, A2], E2 | E>\n  /**\n   * Parallelly zips the this result with the specified result or else returns\n   * the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<[A, A2], E | E2>\n} = core.exitZipPar\n\n/**\n * Parallelly zips the this result with the specified result discarding the\n * second element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipParLeft: {\n  /**\n   * Parallelly zips the this result with the specified result discarding the\n   * second element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A, E2 | E>\n  /**\n   * Parallelly zips the this result with the specified result discarding the\n   * second element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A, E | E2>\n} = core.exitZipParLeft\n\n/**\n * Parallelly zips the this result with the specified result discarding the\n * first element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipParRight: {\n  /**\n   * Parallelly zips the this result with the specified result discarding the\n   * first element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A2, E2 | E>\n  /**\n   * Parallelly zips the this result with the specified result discarding the\n   * first element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A2, E | E2>\n} = core.exitZipParRight\n\n/**\n * Zips this exit together with that exit using the specified combination\n * functions.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  /**\n   * Zips this exit together with that exit using the specified combination\n   * functions.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <B, E2, A, C, E>(\n   that: Exit<B, E2>,\n   options: {\n     readonly onSuccess: (a: A, b: B) => C\n     readonly onFailure: (cause: Cause.Cause<E>, cause2: Cause.Cause<E2>) => Cause.Cause<any>\n   }\n  ): (self: Exit<A, E>) => Exit<C, any>\n  /**\n   * Zips this exit together with that exit using the specified combination\n   * functions.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, B, E2, C>(\n   self: Exit<A, E>,\n   that: Exit<B, E2>,\n   options: {\n     readonly onSuccess: (a: A, b: B) => C\n     readonly onFailure: (cause: Cause.Cause<E>, cause2: Cause.Cause<E2>) => Cause.Cause<E | E2>\n   }\n  ): Exit<C, E | E2>\n} = core.exitZipWith\n", "/**\n * @since 2.0.0\n */\nimport type { NonEmptyArray } from \"./Array.js\"\nimport * as Equal from \"./Equal.js\"\nimport { dual } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/MutableHashMap\") as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface MutableHashMap<out K, out V> extends Iterable<[K, V]>, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  /** @internal */\n  readonly referential: Map<K, V>\n  /** @internal */\n  readonly buckets: Map<number, NonEmptyArray<readonly [K & Equal.Equal, V]>>\n  /** @internal */\n  bucketsSize: number\n}\n\nconst MutableHashMapProto: Omit<MutableHashMap<unknown, unknown>, \"referential\" | \"buckets\" | \"bucketsSize\"> = {\n  [TypeId]: TypeId,\n  [Symbol.iterator](this: MutableHashMap<unknown, unknown>): Iterator<[unknown, unknown]> {\n    return new MutableHashMapIterator(this)\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"MutableHashMap\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nclass MutableHashMapIterator<K, V> implements IterableIterator<[K, V]> {\n  readonly referentialIterator: Iterator<[K, V]>\n  bucketIterator: Iterator<[K, V]> | undefined\n\n  constructor(readonly self: MutableHashMap<K, V>) {\n    this.referentialIterator = self.referential[Symbol.iterator]()\n  }\n  next(): IteratorResult<[K, V]> {\n    if (this.bucketIterator !== undefined) {\n      return this.bucketIterator.next()\n    }\n    const result = this.referentialIterator.next()\n    if (result.done) {\n      this.bucketIterator = new BucketIterator(this.self.buckets.values())\n      return this.next()\n    }\n    return result\n  }\n\n  [Symbol.iterator](): IterableIterator<[K, V]> {\n    return new MutableHashMapIterator(this.self)\n  }\n}\n\nclass BucketIterator<K, V> implements Iterator<[K, V]> {\n  constructor(readonly backing: Iterator<NonEmptyArray<readonly [K, V]>>) {}\n  currentBucket: Iterator<readonly [K, V]> | undefined\n  next(): IteratorResult<[K, V]> {\n    if (this.currentBucket === undefined) {\n      const result = this.backing.next()\n      if (result.done) {\n        return result\n      }\n      this.currentBucket = result.value[Symbol.iterator]()\n    }\n    const result = this.currentBucket.next()\n    if (result.done) {\n      this.currentBucket = undefined\n      return this.next()\n    }\n    return result as IteratorResult<[K, V]>\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = <K = never, V = never>(): MutableHashMap<K, V> => {\n  const self = Object.create(MutableHashMapProto)\n  self.referential = new Map()\n  self.buckets = new Map()\n  self.bucketsSize = 0\n  return self\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <Entries extends Array<readonly [any, any]>>(\n  ...entries: Entries\n) => MutableHashMap<\n  Entries[number] extends readonly [infer K, any] ? K : never,\n  Entries[number] extends readonly [any, infer V] ? V : never\n> = (...entries) => fromIterable(entries)\n\n/**\n * Creates a new `MutableHashMap` from an iterable collection of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable = <K, V>(entries: Iterable<readonly [K, V]>): MutableHashMap<K, V> => {\n  const self = empty<K, V>()\n  for (const [key, value] of entries) {\n    set(self, key, value)\n  }\n  return self\n}\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const get: {\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K>(key: K): <V>(self: MutableHashMap<K, V>) => Option.Option<V>\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K): Option.Option<V>\n} = dual<\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K>(key: K) => <V>(self: MutableHashMap<K, V>) => Option.Option<V>,\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K) => Option.Option<V>\n>(2, <K, V>(self: MutableHashMap<K, V>, key: K): Option.Option<V> => {\n  if (Equal.isEqual(key) === false) {\n    return self.referential.has(key) ? Option.some(self.referential.get(key)!) : Option.none()\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    return Option.none()\n  }\n\n  return getFromBucket(self, bucket, key)\n})\n\n/**\n * @since 3.8.0\n * @category elements\n */\nexport const keys = <K, V>(self: MutableHashMap<K, V>): Array<K> => {\n  const keys = Array.from(self.referential.keys())\n  for (const bucket of self.buckets.values()) {\n    for (let i = 0, len = bucket.length; i < len; i++) {\n      keys.push(bucket[i][0])\n    }\n  }\n  return keys\n}\n\n/**\n * @since 3.8.0\n * @category elements\n */\nexport const values = <K, V>(self: MutableHashMap<K, V>): Array<V> => {\n  const values = Array.from(self.referential.values())\n  for (const bucket of self.buckets.values()) {\n    for (let i = 0, len = bucket.length; i < len; i++) {\n      values.push(bucket[i][1])\n    }\n  }\n  return values\n}\n\nconst getFromBucket = <K, V>(\n  self: MutableHashMap<K, V>,\n  bucket: NonEmptyArray<readonly [K & Equal.Equal, V]>,\n  key: K & Equal.Equal,\n  remove = false\n): Option.Option<V> => {\n  for (let i = 0, len = bucket.length; i < len; i++) {\n    if (key[Equal.symbol](bucket[i][0])) {\n      const value = bucket[i][1]\n      if (remove) {\n        bucket.splice(i, 1)\n        self.bucketsSize--\n      }\n      return Option.some(value)\n    }\n  }\n\n  return Option.none()\n}\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K>(key: K): <V>(self: MutableHashMap<K, V>) => boolean\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K): boolean\n} = dual<\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K>(key: K) => <V>(self: MutableHashMap<K, V>) => boolean,\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K) => boolean\n>(2, (self, key) => Option.isSome(get(self, key)))\n\n/**\n * @since 2.0.0\n */\nexport const set: {\n  /**\n   * @since 2.0.0\n   */\n  <K, V>(key: K, value: V): (self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  /**\n   * @since 2.0.0\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K, value: V): MutableHashMap<K, V>\n} = dual<\n  /**\n   * @since 2.0.0\n   */\n  <K, V>(key: K, value: V) => (self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  /**\n   * @since 2.0.0\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K, value: V) => MutableHashMap<K, V>\n>(3, <K, V>(self: MutableHashMap<K, V>, key: K, value: V) => {\n  if (Equal.isEqual(key) === false) {\n    self.referential.set(key, value)\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    self.buckets.set(hash, [[key, value]])\n    self.bucketsSize++\n    return self\n  }\n\n  removeFromBucket(self, bucket, key)\n  bucket.push([key, value])\n  self.bucketsSize++\n  return self\n})\n\nconst removeFromBucket = <K, V>(\n  self: MutableHashMap<K, V>,\n  bucket: NonEmptyArray<readonly [K & Equal.Equal, V]>,\n  key: K & Equal.Equal\n) => {\n  for (let i = 0, len = bucket.length; i < len; i++) {\n    if (key[Equal.symbol](bucket[i][0])) {\n      bucket.splice(i, 1)\n      self.bucketsSize--\n      return\n    }\n  }\n}\n\n/**\n * Updates the value of the specified key within the `MutableHashMap` if it exists.\n *\n * @since 2.0.0\n */\nexport const modify: {\n  /**\n   * Updates the value of the specified key within the `MutableHashMap` if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, f: (v: V) => V): (self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  /**\n   * Updates the value of the specified key within the `MutableHashMap` if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K, f: (v: V) => V): MutableHashMap<K, V>\n} = dual<\n  /**\n   * Updates the value of the specified key within the `MutableHashMap` if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, f: (v: V) => V) => (self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  /**\n   * Updates the value of the specified key within the `MutableHashMap` if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K, f: (v: V) => V) => MutableHashMap<K, V>\n>(3, <K, V>(self: MutableHashMap<K, V>, key: K, f: (v: V) => V) => {\n  if (Equal.isEqual(key) === false) {\n    if (self.referential.has(key)) {\n      self.referential.set(key, f(self.referential.get(key)!))\n    }\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    return self\n  }\n\n  const value = getFromBucket(self, bucket, key, true)\n  if (Option.isNone(value)) {\n    return self\n  }\n  bucket.push([key, f(value.value)])\n  self.bucketsSize++\n  return self\n})\n\n/**\n * Set or remove the specified key in the `MutableHashMap` using the specified\n * update function.\n *\n * @since 2.0.0\n */\nexport const modifyAt: {\n  /**\n   * Set or remove the specified key in the `MutableHashMap` using the specified\n   * update function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, f: (value: Option.Option<V>) => Option.Option<V>): (self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  /**\n   * Set or remove the specified key in the `MutableHashMap` using the specified\n   * update function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(\n    self: MutableHashMap<K, V>,\n    key: K,\n    f: (value: Option.Option<V>) => Option.Option<V>\n  ): MutableHashMap<K, V>\n} = dual<\n  /**\n   * Set or remove the specified key in the `MutableHashMap` using the specified\n   * update function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, f: (value: Option.Option<V>) => Option.Option<V>) => (self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  /**\n   * Set or remove the specified key in the `MutableHashMap` using the specified\n   * update function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(\n    self: MutableHashMap<K, V>,\n    key: K,\n    f: (value: Option.Option<V>) => Option.Option<V>\n  ) => MutableHashMap<K, V>\n>(3, (self, key, f) => {\n  if (Equal.isEqual(key) === false) {\n    const result = f(get(self, key))\n    if (Option.isSome(result)) {\n      set(self, key, result.value)\n    } else {\n      remove(self, key)\n    }\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    const result = f(Option.none())\n    return Option.isSome(result) ? set(self, key, result.value) : self\n  }\n\n  const result = f(getFromBucket(self, bucket, key, true))\n  if (Option.isNone(result)) {\n    if (bucket.length === 0) {\n      self.buckets.delete(hash)\n    }\n    return self\n  }\n  bucket.push([key, result.value])\n  self.bucketsSize++\n  return self\n})\n\n/**\n * @since 2.0.0\n */\nexport const remove: {\n  /**\n   * @since 2.0.0\n   */\n  <K>(key: K): <V>(self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  /**\n   * @since 2.0.0\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K): MutableHashMap<K, V>\n} = dual<\n  /**\n   * @since 2.0.0\n   */\n  <K>(key: K) => <V>(self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  /**\n   * @since 2.0.0\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K) => MutableHashMap<K, V>\n>(2, <K, V>(self: MutableHashMap<K, V>, key: K) => {\n  if (Equal.isEqual(key) === false) {\n    self.referential.delete(key)\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    return self\n  }\n  removeFromBucket(self, bucket, key)\n  if (bucket.length === 0) {\n    self.buckets.delete(hash)\n  }\n  return self\n})\n\n/**\n * @since 2.0.0\n */\nexport const clear = <K, V>(self: MutableHashMap<K, V>) => {\n  self.referential.clear()\n  self.buckets.clear()\n  self.bucketsSize = 0\n  return self\n}\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const size = <K, V>(self: MutableHashMap<K, V>): number => {\n  return self.referential.size + self.bucketsSize\n}\n\n/**\n * @since 2.0.0\n */\nexport const isEmpty = <K, V>(self: MutableHashMap<K, V>): boolean => size(self) === 0\n\n/**\n * @since 2.0.0\n */\nexport const forEach: {\n  /**\n   * @since 2.0.0\n   */\n  <K, V>(f: (value: V, key: K) => void): (self: MutableHashMap<K, V>) => void\n  /**\n   * @since 2.0.0\n   */\n  <K, V>(self: MutableHashMap<K, V>, f: (value: V, key: K) => void): void\n} = dual(2, <K, V>(self: MutableHashMap<K, V>, f: (value: V, key: K) => void) => {\n  self.referential.forEach(f)\n  for (const bucket of self.buckets.values()) {\n    for (const [key, value] of bucket) {\n      f(value, key)\n    }\n  }\n})\n", "import type * as Clock from \"../Clock.js\"\nimport * as Context from \"../Context.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { constFalse } from \"../Function.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nconst ClockSymbolKey = \"effect/Clock\"\n\n/** @internal */\nexport const ClockTypeId: Clock.ClockTypeId = Symbol.for(ClockSymbolKey) as Clock.ClockTypeId\n\n/** @internal */\nexport const clockTag: Context.Tag<Clock.Clock, Clock.Clock> = Context.GenericTag(\"effect/Clock\")\n\n/** @internal */\nexport const MAX_TIMER_MILLIS = 2 ** 31 - 1\n\n/** @internal */\nexport const globalClockScheduler: Clock.ClockScheduler = {\n  unsafeSchedule(task: Clock.Task, duration: Duration.Duration): Clock.CancelToken {\n    const millis = Duration.toMillis(duration)\n    // If the duration is greater than the value allowable by the JS timer\n    // functions, treat the value as an infinite duration\n    if (millis > MAX_TIMER_MILLIS) {\n      return constFalse\n    }\n    let completed = false\n    const handle = setTimeout(() => {\n      completed = true\n      task()\n    }, millis)\n    return () => {\n      clearTimeout(handle)\n      return !completed\n    }\n  }\n}\n\nconst performanceNowNanos = (function() {\n  const bigint1e6 = BigInt(1_000_000)\n  if (typeof performance === \"undefined\") {\n    return () => BigInt(Date.now()) * bigint1e6\n  }\n  let origin: bigint\n  return () => {\n    if (origin === undefined) {\n      origin = (BigInt(Date.now()) * bigint1e6) - BigInt(Math.round(performance.now() * 1_000_000))\n    }\n    return origin + BigInt(Math.round(performance.now() * 1000000))\n  }\n})()\nconst processOrPerformanceNow = (function() {\n  const processHrtime =\n    typeof process === \"object\" && \"hrtime\" in process && typeof process.hrtime.bigint === \"function\" ?\n      process.hrtime :\n      undefined\n  if (!processHrtime) {\n    return performanceNowNanos\n  }\n  const origin = performanceNowNanos() - processHrtime.bigint()\n  return () => origin + processHrtime.bigint()\n})()\n\n/** @internal */\nclass ClockImpl implements Clock.Clock {\n  readonly [ClockTypeId]: Clock.ClockTypeId = ClockTypeId\n\n  unsafeCurrentTimeMillis(): number {\n    return Date.now()\n  }\n\n  unsafeCurrentTimeNanos(): bigint {\n    return processOrPerformanceNow()\n  }\n\n  currentTimeMillis: Effect.Effect<number> = core.sync(() => this.unsafeCurrentTimeMillis())\n\n  currentTimeNanos: Effect.Effect<bigint> = core.sync(() => this.unsafeCurrentTimeNanos())\n\n  scheduler(): Effect.Effect<Clock.ClockScheduler> {\n    return core.succeed(globalClockScheduler)\n  }\n\n  sleep(duration: Duration.Duration): Effect.Effect<void> {\n    return core.async<void>((resume) => {\n      const canceler = globalClockScheduler.unsafeSchedule(() => resume(core.void), duration)\n      return core.asVoid(core.sync(canceler))\n    })\n  }\n}\n\n/** @internal */\nexport const make = (): Clock.Clock => new ClockImpl()\n", "import * as Array from \"../Array.js\"\nimport type * as Chunk from \"../Chunk.js\"\nimport type * as Clock from \"../Clock.js\"\nimport type * as Config from \"../Config.js\"\nimport type * as ConfigProvider from \"../ConfigProvider.js\"\nimport * as Context from \"../Context.js\"\nimport type * as DefaultServices from \"../DefaultServices.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport type * as Random from \"../Random.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport * as clock from \"./clock.js\"\nimport * as configProvider from \"./configProvider.js\"\nimport * as core from \"./core.js\"\nimport * as console_ from \"./defaultServices/console.js\"\nimport * as random from \"./random.js\"\nimport * as tracer from \"./tracer.js\"\n\n/** @internal */\nexport const liveServices: Context.Context<DefaultServices.DefaultServices> = pipe(\n  Context.empty(),\n  Context.add(clock.clockTag, clock.make()),\n  Context.add(console_.consoleTag, console_.defaultConsole),\n  Context.add(random.randomTag, random.make(Math.random())),\n  Context.add(configProvider.configProviderTag, configProvider.fromEnv()),\n  Context.add(tracer.tracerTag, tracer.nativeTracer)\n)\n\n/**\n * The `FiberRef` holding the default `Effect` services.\n *\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentServices = globalValue(\n  Symbol.for(\"effect/DefaultServices/currentServices\"),\n  () => core.fiberRefUnsafeMakeContext(liveServices)\n)\n\n// circular with Clock\n\n/** @internal */\nexport const sleep = (duration: Duration.DurationInput): Effect.Effect<void> => {\n  const decodedDuration = Duration.decode(duration)\n  return clockWith((clock) => clock.sleep(decodedDuration))\n}\n\n/** @internal */\nexport const defaultServicesWith = <A, E, R>(\n  f: (services: Context.Context<DefaultServices.DefaultServices>) => Effect.Effect<A, E, R>\n) => core.withFiberRuntime<A, E, R>((fiber) => f(fiber.currentDefaultServices))\n\n/** @internal */\nexport const clockWith = <A, E, R>(f: (clock: Clock.Clock) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  defaultServicesWith((services) => f(services.unsafeMap.get(clock.clockTag.key)))\n\n/** @internal */\nexport const currentTimeMillis: Effect.Effect<number> = clockWith((clock) => clock.currentTimeMillis)\n\n/** @internal */\nexport const currentTimeNanos: Effect.Effect<bigint> = clockWith((clock) => clock.currentTimeNanos)\n\n/** @internal */\nexport const withClock = dual<\n  <C extends Clock.Clock>(clock: C) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <C extends Clock.Clock, A, E, R>(effect: Effect.Effect<A, E, R>, clock: C) => Effect.Effect<A, E, R>\n>(2, (effect, c) =>\n  core.fiberRefLocallyWith(\n    currentServices,\n    Context.add(clock.clockTag, c)\n  )(effect))\n\n// circular with ConfigProvider\n\n/** @internal */\nexport const withConfigProvider = dual<\n  (provider: ConfigProvider.ConfigProvider) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, provider: ConfigProvider.ConfigProvider) => Effect.Effect<A, E, R>\n>(2, (self, provider) =>\n  core.fiberRefLocallyWith(\n    currentServices,\n    Context.add(configProvider.configProviderTag, provider)\n  )(self))\n\n/** @internal */\nexport const configProviderWith = <A, E, R>(\n  f: (provider: ConfigProvider.ConfigProvider) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> =>\n  defaultServicesWith((services) => f(services.unsafeMap.get(configProvider.configProviderTag.key)))\n\n/** @internal */\nexport const config = <A>(config: Config.Config<A>) => configProviderWith((_) => _.load(config))\n\n/** @internal */\nexport const configOrDie = <A>(config: Config.Config<A>) => core.orDie(configProviderWith((_) => _.load(config)))\n\n// circular with Random\n\n/** @internal */\nexport const randomWith = <A, E, R>(f: (random: Random.Random) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  defaultServicesWith((services) => f(services.unsafeMap.get(random.randomTag.key)))\n\n/** @internal */\nexport const withRandom = dual<\n  <X extends Random.Random>(value: X) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <X extends Random.Random, A, E, R>(effect: Effect.Effect<A, E, R>, value: X) => Effect.Effect<A, E, R>\n>(2, (effect, value) =>\n  core.fiberRefLocallyWith(\n    currentServices,\n    Context.add(random.randomTag, value)\n  )(effect))\n\n/** @internal */\nexport const next: Effect.Effect<number> = randomWith((random) => random.next)\n\n/** @internal */\nexport const nextInt: Effect.Effect<number> = randomWith((random) => random.nextInt)\n\n/** @internal */\nexport const nextBoolean: Effect.Effect<boolean> = randomWith((random) => random.nextBoolean)\n\n/** @internal */\nexport const nextRange = (min: number, max: number): Effect.Effect<number> =>\n  randomWith((random) => random.nextRange(min, max))\n\n/** @internal */\nexport const nextIntBetween = (min: number, max: number): Effect.Effect<number> =>\n  randomWith((random) => random.nextIntBetween(min, max))\n\n/** @internal */\nexport const shuffle = <A>(elements: Iterable<A>): Effect.Effect<Chunk.Chunk<A>> =>\n  randomWith((random) => random.shuffle(elements))\n\n/** @internal */\nexport const choice = <Self extends Iterable<unknown>>(\n  elements: Self\n) => {\n  const array = Array.fromIterable(elements)\n  return core.map(\n    array.length === 0\n      ? core.fail(new core.NoSuchElementException(\"Cannot select a random element from an empty array\"))\n      : randomWith((random) => random.nextIntBetween(0, array.length)),\n    (i) => array[i]\n  ) as any\n}\n\n// circular with Tracer\n\n/** @internal */\nexport const tracerWith = <A, E, R>(f: (tracer: Tracer.Tracer) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  defaultServicesWith((services) => f(services.unsafeMap.get(tracer.tracerTag.key)))\n\n/** @internal */\nexport const withTracer = dual<\n  (value: Tracer.Tracer) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, value: Tracer.Tracer) => Effect.Effect<A, E, R>\n>(2, (effect, value) =>\n  core.fiberRefLocallyWith(\n    currentServices,\n    Context.add(tracer.tracerTag, value)\n  )(effect))\n", "import * as Arr from \"../Array.js\"\nimport type * as Config from \"../Config.js\"\nimport type * as ConfigError from \"../ConfigError.js\"\nimport type * as ConfigProvider from \"../ConfigProvider.js\"\nimport type * as PathPatch from \"../ConfigProviderPathPatch.js\"\nimport * as Context from \"../Context.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as number from \"../Number.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Predicate from \"../Predicate.js\"\nimport * as regexp from \"../RegExp.js\"\nimport type * as _config from \"./config.js\"\nimport * as configError from \"./configError.js\"\nimport * as pathPatch from \"./configProvider/pathPatch.js\"\nimport * as core from \"./core.js\"\nimport * as OpCodes from \"./opCodes/config.js\"\nimport * as StringUtils from \"./string-utils.js\"\n\ntype KeyComponent = ConfigProvider.ConfigProvider.KeyComponent\n\nconst concat = <A, B>(l: ReadonlyArray<A>, r: ReadonlyArray<B>): ReadonlyArray<A | B> => [...l, ...r]\n\n/** @internal */\nconst ConfigProviderSymbolKey = \"effect/ConfigProvider\"\n\n/** @internal */\nexport const ConfigProviderTypeId: ConfigProvider.ConfigProviderTypeId = Symbol.for(\n  ConfigProviderSymbolKey\n) as ConfigProvider.ConfigProviderTypeId\n\n/** @internal */\nexport const configProviderTag: Context.Tag<ConfigProvider.ConfigProvider, ConfigProvider.ConfigProvider> = Context\n  .GenericTag(\n    \"effect/ConfigProvider\"\n  )\n\n/** @internal */\nconst FlatConfigProviderSymbolKey = \"effect/ConfigProviderFlat\"\n\n/** @internal */\nexport const FlatConfigProviderTypeId: ConfigProvider.FlatConfigProviderTypeId = Symbol.for(\n  FlatConfigProviderSymbolKey\n) as ConfigProvider.FlatConfigProviderTypeId\n\n/** @internal */\nexport const make = (\n  options: {\n    readonly load: <A>(config: Config.Config<A>) => Effect.Effect<A, ConfigError.ConfigError>\n    readonly flattened: ConfigProvider.ConfigProvider.Flat\n  }\n): ConfigProvider.ConfigProvider => ({\n  [ConfigProviderTypeId]: ConfigProviderTypeId,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  ...options\n})\n\n/** @internal */\nexport const makeFlat = (\n  options: {\n    readonly load: <A>(\n      path: ReadonlyArray<string>,\n      config: Config.Config.Primitive<A>,\n      split: boolean\n    ) => Effect.Effect<Array<A>, ConfigError.ConfigError>\n    readonly enumerateChildren: (\n      path: ReadonlyArray<string>\n    ) => Effect.Effect<HashSet.HashSet<string>, ConfigError.ConfigError>\n    readonly patch: PathPatch.PathPatch\n  }\n): ConfigProvider.ConfigProvider.Flat => ({\n  [FlatConfigProviderTypeId]: FlatConfigProviderTypeId,\n  patch: options.patch,\n  load: (path, config, split = true) => options.load(path, config, split),\n  enumerateChildren: options.enumerateChildren\n})\n\n/** @internal */\nexport const fromFlat = (flat: ConfigProvider.ConfigProvider.Flat): ConfigProvider.ConfigProvider =>\n  make({\n    load: (config) =>\n      core.flatMap(fromFlatLoop(flat, Arr.empty(), config, false), (chunk) =>\n        Option.match(Arr.head(chunk), {\n          onNone: () =>\n            core.fail(\n              configError.MissingData(\n                Arr.empty(),\n                `Expected a single value having structure: ${config}`\n              )\n            ),\n          onSome: core.succeed\n        })),\n    flattened: flat\n  })\n\n/** @internal */\nexport const fromEnv = (\n  options?: Partial<ConfigProvider.ConfigProvider.FromEnvConfig>\n): ConfigProvider.ConfigProvider => {\n  const { pathDelim, seqDelim } = Object.assign({}, { pathDelim: \"_\", seqDelim: \",\" }, options)\n  const makePathString = (path: ReadonlyArray<string>): string => pipe(path, Arr.join(pathDelim))\n  const unmakePathString = (pathString: string): ReadonlyArray<string> => pathString.split(pathDelim)\n\n  const getEnv = () =>\n    typeof process !== \"undefined\" && \"env\" in process && typeof process.env === \"object\" ? process.env : {}\n\n  const load = <A>(\n    path: ReadonlyArray<string>,\n    primitive: Config.Config.Primitive<A>,\n    split = true\n  ): Effect.Effect<Array<A>, ConfigError.ConfigError> => {\n    const pathString = makePathString(path)\n    const current = getEnv()\n    const valueOpt = pathString in current ? Option.some(current[pathString]!) : Option.none()\n    return pipe(\n      valueOpt,\n      core.mapError(() => configError.MissingData(path, `Expected ${pathString} to exist in the process context`)),\n      core.flatMap((value) => parsePrimitive(value, path, primitive, seqDelim, split))\n    )\n  }\n\n  const enumerateChildren = (\n    path: ReadonlyArray<string>\n  ): Effect.Effect<HashSet.HashSet<string>, ConfigError.ConfigError> =>\n    core.sync(() => {\n      const current = getEnv()\n      const keys = Object.keys(current)\n      const keyPaths = keys.map((value) => unmakePathString(value.toUpperCase()))\n      const filteredKeyPaths = keyPaths.filter((keyPath) => {\n        for (let i = 0; i < path.length; i++) {\n          const pathComponent = pipe(path, Arr.unsafeGet(i))\n          const currentElement = keyPath[i]\n          if (currentElement === undefined || pathComponent !== currentElement) {\n            return false\n          }\n        }\n        return true\n      }).flatMap((keyPath) => keyPath.slice(path.length, path.length + 1))\n      return HashSet.fromIterable(filteredKeyPaths)\n    })\n\n  return fromFlat(makeFlat({ load, enumerateChildren, patch: pathPatch.empty }))\n}\n\n/** @internal */\nexport const fromMap = (\n  map: Map<string, string>,\n  config?: Partial<ConfigProvider.ConfigProvider.FromMapConfig>\n): ConfigProvider.ConfigProvider => {\n  const { pathDelim, seqDelim } = Object.assign({ seqDelim: \",\", pathDelim: \".\" }, config)\n  const makePathString = (path: ReadonlyArray<string>): string => pipe(path, Arr.join(pathDelim))\n  const unmakePathString = (pathString: string): ReadonlyArray<string> => pathString.split(pathDelim)\n  const mapWithIndexSplit = splitIndexInKeys(\n    map,\n    (str) => unmakePathString(str),\n    makePathString\n  )\n  const load = <A>(\n    path: ReadonlyArray<string>,\n    primitive: Config.Config.Primitive<A>,\n    split = true\n  ): Effect.Effect<Array<A>, ConfigError.ConfigError> => {\n    const pathString = makePathString(path)\n    const valueOpt = mapWithIndexSplit.has(pathString) ?\n      Option.some(mapWithIndexSplit.get(pathString)!) :\n      Option.none()\n    return pipe(\n      valueOpt,\n      core.mapError(() => configError.MissingData(path, `Expected ${pathString} to exist in the provided map`)),\n      core.flatMap((value) => parsePrimitive(value, path, primitive, seqDelim, split))\n    )\n  }\n  const enumerateChildren = (\n    path: ReadonlyArray<string>\n  ): Effect.Effect<HashSet.HashSet<string>, ConfigError.ConfigError> =>\n    core.sync(() => {\n      const keyPaths = Arr.fromIterable(mapWithIndexSplit.keys()).map(unmakePathString)\n      const filteredKeyPaths = keyPaths.filter((keyPath) => {\n        for (let i = 0; i < path.length; i++) {\n          const pathComponent = pipe(path, Arr.unsafeGet(i))\n          const currentElement = keyPath[i]\n          if (currentElement === undefined || pathComponent !== currentElement) {\n            return false\n          }\n        }\n        return true\n      }).flatMap((keyPath) => keyPath.slice(path.length, path.length + 1))\n      return HashSet.fromIterable(filteredKeyPaths)\n    })\n\n  return fromFlat(makeFlat({ load, enumerateChildren, patch: pathPatch.empty }))\n}\n\nconst extend = <A, B>(\n  leftDef: (n: number) => A,\n  rightDef: (n: number) => B,\n  left: ReadonlyArray<A>,\n  right: ReadonlyArray<B>\n): [ReadonlyArray<A>, ReadonlyArray<B>] => {\n  const leftPad = Arr.unfold(\n    left.length,\n    (index) =>\n      index >= right.length ?\n        Option.none() :\n        Option.some([leftDef(index), index + 1])\n  )\n  const rightPad = Arr.unfold(\n    right.length,\n    (index) =>\n      index >= left.length ?\n        Option.none() :\n        Option.some([rightDef(index), index + 1])\n  )\n  const leftExtension = concat(left, leftPad)\n  const rightExtension = concat(right, rightPad)\n  return [leftExtension, rightExtension]\n}\n\nconst appendConfigPath = (path: ReadonlyArray<string>, config: Config.Config<unknown>): ReadonlyArray<string> => {\n  let op = config as _config.ConfigPrimitive\n  if (op._tag === \"Nested\") {\n    const out = path.slice()\n    while (op._tag === \"Nested\") {\n      out.push(op.name)\n      op = op.config as _config.ConfigPrimitive\n    }\n    return out\n  }\n  return path\n}\n\nconst fromFlatLoop = <A>(\n  flat: ConfigProvider.ConfigProvider.Flat,\n  prefix: ReadonlyArray<string>,\n  config: Config.Config<A>,\n  split: boolean\n): Effect.Effect<Array<A>, ConfigError.ConfigError> => {\n  const op = config as _config.ConfigPrimitive\n  switch (op._tag) {\n    case OpCodes.OP_CONSTANT: {\n      return core.succeed(Arr.of(op.value)) as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_DESCRIBED: {\n      return core.suspend(\n        () => fromFlatLoop(flat, prefix, op.config, split)\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_FAIL: {\n      return core.fail(configError.MissingData(prefix, op.message)) as Effect.Effect<\n        Array<A>,\n        ConfigError.ConfigError\n      >\n    }\n    case OpCodes.OP_FALLBACK: {\n      return pipe(\n        core.suspend(() => fromFlatLoop(flat, prefix, op.first, split)),\n        core.catchAll((error1) => {\n          if (op.condition(error1)) {\n            return pipe(\n              fromFlatLoop(flat, prefix, op.second, split),\n              core.catchAll((error2) => core.fail(configError.Or(error1, error2)))\n            )\n          }\n          return core.fail(error1)\n        })\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_LAZY: {\n      return core.suspend(() => fromFlatLoop(flat, prefix, op.config(), split)) as Effect.Effect<\n        Array<A>,\n        ConfigError.ConfigError\n      >\n    }\n    case OpCodes.OP_MAP_OR_FAIL: {\n      return core.suspend(() =>\n        pipe(\n          fromFlatLoop(flat, prefix, op.original, split),\n          core.flatMap(\n            core.forEachSequential((a) =>\n              pipe(\n                op.mapOrFail(a),\n                core.mapError(configError.prefixed(appendConfigPath(prefix, op.original)))\n              )\n            )\n          )\n        )\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_NESTED: {\n      return core.suspend(() =>\n        fromFlatLoop(\n          flat,\n          concat(prefix, Arr.of(op.name)),\n          op.config,\n          split\n        )\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_PRIMITIVE: {\n      return pipe(\n        pathPatch.patch(prefix, flat.patch),\n        core.flatMap((prefix) =>\n          pipe(\n            flat.load(prefix, op, split),\n            core.flatMap((values) => {\n              if (values.length === 0) {\n                const name = pipe(Arr.last(prefix), Option.getOrElse(() => \"<n/a>\"))\n                return core.fail(configError.MissingData([], `Expected ${op.description} with name ${name}`))\n              }\n              return core.succeed(values)\n            })\n          )\n        )\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_SEQUENCE: {\n      return pipe(\n        pathPatch.patch(prefix, flat.patch),\n        core.flatMap((patchedPrefix) =>\n          pipe(\n            flat.enumerateChildren(patchedPrefix),\n            core.flatMap(indicesFrom),\n            core.flatMap((indices) => {\n              if (indices.length === 0) {\n                return core.suspend(() =>\n                  core.map(fromFlatLoop(flat, prefix, op.config, true), Arr.of)\n                ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n              }\n              return pipe(\n                core.forEachSequential(\n                  indices,\n                  (index) => fromFlatLoop(flat, Arr.append(prefix, `[${index}]`), op.config, true)\n                ),\n                core.map((chunkChunk) => {\n                  const flattened = Arr.flatten(chunkChunk)\n                  if (flattened.length === 0) {\n                    return Arr.of(Arr.empty<A>())\n                  }\n                  return Arr.of(flattened)\n                })\n              ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n            })\n          )\n        )\n      )\n    }\n    case OpCodes.OP_HASHMAP: {\n      return core.suspend(() =>\n        pipe(\n          pathPatch.patch(prefix, flat.patch),\n          core.flatMap((prefix) =>\n            pipe(\n              flat.enumerateChildren(prefix),\n              core.flatMap((keys) => {\n                return pipe(\n                  keys,\n                  core.forEachSequential((key) =>\n                    fromFlatLoop(\n                      flat,\n                      concat(prefix, Arr.of(key)),\n                      op.valueConfig,\n                      split\n                    )\n                  ),\n                  core.map((matrix) => {\n                    if (matrix.length === 0) {\n                      return Arr.of(HashMap.empty())\n                    }\n                    return pipe(\n                      transpose(matrix),\n                      Arr.map((values) => HashMap.fromIterable(Arr.zip(Arr.fromIterable(keys), values)))\n                    )\n                  })\n                )\n              })\n            )\n          )\n        )\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n    case OpCodes.OP_ZIP_WITH: {\n      return core.suspend(() =>\n        pipe(\n          fromFlatLoop(flat, prefix, op.left, split),\n          core.either,\n          core.flatMap((left) =>\n            pipe(\n              fromFlatLoop(flat, prefix, op.right, split),\n              core.either,\n              core.flatMap((right) => {\n                if (Either.isLeft(left) && Either.isLeft(right)) {\n                  return core.fail(configError.And(left.left, right.left))\n                }\n                if (Either.isLeft(left) && Either.isRight(right)) {\n                  return core.fail(left.left)\n                }\n                if (Either.isRight(left) && Either.isLeft(right)) {\n                  return core.fail(right.left)\n                }\n                if (Either.isRight(left) && Either.isRight(right)) {\n                  const path = pipe(prefix, Arr.join(\".\"))\n                  const fail = fromFlatLoopFail(prefix, path)\n                  const [lefts, rights] = extend(\n                    fail,\n                    fail,\n                    pipe(left.right, Arr.map(Either.right)),\n                    pipe(right.right, Arr.map(Either.right))\n                  )\n                  return pipe(\n                    lefts,\n                    Arr.zip(rights),\n                    core.forEachSequential(([left, right]) =>\n                      pipe(\n                        core.zip(left, right),\n                        core.map(([left, right]) => op.zip(left, right))\n                      )\n                    )\n                  )\n                }\n                throw new Error(\n                  \"BUG: ConfigProvider.fromFlatLoop - please report an issue at https://github.com/Effect-TS/effect/issues\"\n                )\n              })\n            )\n          )\n        )\n      ) as unknown as Effect.Effect<Array<A>, ConfigError.ConfigError>\n    }\n  }\n}\n\nconst fromFlatLoopFail =\n  (prefix: ReadonlyArray<string>, path: string) => (index: number): Either.Either<unknown, ConfigError.ConfigError> =>\n    Either.left(\n      configError.MissingData(\n        prefix,\n        `The element at index ${index} in a sequence at path \"${path}\" was missing`\n      )\n    )\n\n/** @internal */\nexport const mapInputPath = dual<\n  (f: (path: string) => string) => (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider,\n  (self: ConfigProvider.ConfigProvider, f: (path: string) => string) => ConfigProvider.ConfigProvider\n>(2, (self, f) => fromFlat(mapInputPathFlat(self.flattened, f)))\n\nconst mapInputPathFlat = (\n  self: ConfigProvider.ConfigProvider.Flat,\n  f: (path: string) => string\n): ConfigProvider.ConfigProvider.Flat =>\n  makeFlat({\n    load: (path, config, split = true) => self.load(path, config, split),\n    enumerateChildren: (path) => self.enumerateChildren(path),\n    patch: pathPatch.mapName(self.patch, f)\n  })\n\n/** @internal */\nexport const nested = dual<\n  (name: string) => (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider,\n  (self: ConfigProvider.ConfigProvider, name: string) => ConfigProvider.ConfigProvider\n>(2, (self, name) =>\n  fromFlat(makeFlat({\n    load: (path, config) => self.flattened.load(path, config, true),\n    enumerateChildren: (path) => self.flattened.enumerateChildren(path),\n    patch: pathPatch.nested(self.flattened.patch, name)\n  })))\n\n/** @internal */\nexport const unnested = dual<\n  (name: string) => (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider,\n  (self: ConfigProvider.ConfigProvider, name: string) => ConfigProvider.ConfigProvider\n>(2, (self, name) =>\n  fromFlat(makeFlat({\n    load: (path, config) => self.flattened.load(path, config, true),\n    enumerateChildren: (path) => self.flattened.enumerateChildren(path),\n    patch: pathPatch.unnested(self.flattened.patch, name)\n  })))\n\n/** @internal */\nexport const orElse = dual<\n  (\n    that: LazyArg<ConfigProvider.ConfigProvider>\n  ) => (\n    self: ConfigProvider.ConfigProvider\n  ) => ConfigProvider.ConfigProvider,\n  (\n    self: ConfigProvider.ConfigProvider,\n    that: LazyArg<ConfigProvider.ConfigProvider>\n  ) => ConfigProvider.ConfigProvider\n>(2, (self, that) => fromFlat(orElseFlat(self.flattened, () => that().flattened)))\n\nconst orElseFlat = (\n  self: ConfigProvider.ConfigProvider.Flat,\n  that: LazyArg<ConfigProvider.ConfigProvider.Flat>\n): ConfigProvider.ConfigProvider.Flat =>\n  makeFlat({\n    load: (path, config, split) =>\n      pipe(\n        pathPatch.patch(path, self.patch),\n        core.flatMap((patch) => self.load(patch, config, split)),\n        core.catchAll((error1) =>\n          pipe(\n            core.sync(that),\n            core.flatMap((that) =>\n              pipe(\n                pathPatch.patch(path, that.patch),\n                core.flatMap((patch) => that.load(patch, config, split)),\n                core.catchAll((error2) => core.fail(configError.Or(error1, error2)))\n              )\n            )\n          )\n        )\n      ),\n    enumerateChildren: (path) =>\n      pipe(\n        pathPatch.patch(path, self.patch),\n        core.flatMap((patch) => self.enumerateChildren(patch)),\n        core.either,\n        core.flatMap((left) =>\n          pipe(\n            core.sync(that),\n            core.flatMap((that) =>\n              pipe(\n                pathPatch.patch(path, that.patch),\n                core.flatMap((patch) => that.enumerateChildren(patch)),\n                core.either,\n                core.flatMap((right) => {\n                  if (Either.isLeft(left) && Either.isLeft(right)) {\n                    return core.fail(configError.And(left.left, right.left))\n                  }\n                  if (Either.isLeft(left) && Either.isRight(right)) {\n                    return core.succeed(right.right)\n                  }\n                  if (Either.isRight(left) && Either.isLeft(right)) {\n                    return core.succeed(left.right)\n                  }\n                  if (Either.isRight(left) && Either.isRight(right)) {\n                    return core.succeed(pipe(left.right, HashSet.union(right.right)))\n                  }\n                  throw new Error(\n                    \"BUG: ConfigProvider.orElseFlat - please report an issue at https://github.com/Effect-TS/effect/issues\"\n                  )\n                })\n              )\n            )\n          )\n        )\n      ),\n    patch: pathPatch.empty\n  })\n\n/** @internal */\nexport const constantCase = (self: ConfigProvider.ConfigProvider): ConfigProvider.ConfigProvider =>\n  mapInputPath(self, StringUtils.constantCase)\n\n/** @internal */\nexport const kebabCase = (self: ConfigProvider.ConfigProvider): ConfigProvider.ConfigProvider =>\n  mapInputPath(self, StringUtils.kebabCase)\n\n/** @internal */\nexport const lowerCase = (self: ConfigProvider.ConfigProvider): ConfigProvider.ConfigProvider =>\n  mapInputPath(self, StringUtils.lowerCase)\n\n/** @internal */\nexport const snakeCase = (self: ConfigProvider.ConfigProvider): ConfigProvider.ConfigProvider =>\n  mapInputPath(self, StringUtils.snakeCase)\n\n/** @internal */\nexport const upperCase = (self: ConfigProvider.ConfigProvider): ConfigProvider.ConfigProvider =>\n  mapInputPath(self, StringUtils.upperCase)\n\n/** @internal */\nexport const within = dual<\n  (\n    path: ReadonlyArray<string>,\n    f: (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider\n  ) => (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider,\n  (\n    self: ConfigProvider.ConfigProvider,\n    path: ReadonlyArray<string>,\n    f: (self: ConfigProvider.ConfigProvider) => ConfigProvider.ConfigProvider\n  ) => ConfigProvider.ConfigProvider\n>(3, (self, path, f) => {\n  const unnest = Arr.reduce(path, self, (provider, name) => unnested(provider, name))\n  const nest = Arr.reduceRight(path, f(unnest), (provider, name) => nested(provider, name))\n  return orElse(nest, () => self)\n})\n\nconst splitPathString = (text: string, delim: string): Array<string> => {\n  const split = text.split(new RegExp(`\\\\s*${regexp.escape(delim)}\\\\s*`))\n  return split\n}\n\nconst parsePrimitive = <A>(\n  text: string,\n  path: ReadonlyArray<string>,\n  primitive: Config.Config.Primitive<A>,\n  delimiter: string,\n  split: boolean\n): Effect.Effect<Array<A>, ConfigError.ConfigError> => {\n  if (!split) {\n    return pipe(\n      primitive.parse(text),\n      core.mapBoth({\n        onFailure: configError.prefixed(path),\n        onSuccess: Arr.of\n      })\n    )\n  }\n  return pipe(\n    splitPathString(text, delimiter),\n    core.forEachSequential((char) => primitive.parse(char.trim())),\n    core.mapError(configError.prefixed(path))\n  )\n}\n\nconst transpose = <A>(array: ReadonlyArray<ReadonlyArray<A>>): Array<Array<A>> => {\n  return Object.keys(array[0]).map((column) => array.map((row) => row[column as any]))\n}\n\nconst indicesFrom = (quotedIndices: HashSet.HashSet<string>): Effect.Effect<Array<number>> =>\n  pipe(\n    core.forEachSequential(quotedIndices, parseQuotedIndex),\n    core.mapBoth({\n      onFailure: () => Arr.empty<number>(),\n      onSuccess: Arr.sort(number.Order)\n    }),\n    core.either,\n    core.map(Either.merge)\n  )\n\nconst STR_INDEX_REGEX = /(^.+)(\\[(\\d+)\\])$/\nconst QUOTED_INDEX_REGEX = /^(\\[(\\d+)\\])$/\n\nconst parseQuotedIndex = (str: string): Option.Option<number> => {\n  const match = str.match(QUOTED_INDEX_REGEX)\n  if (match !== null) {\n    const matchedIndex = match[2]\n    return pipe(\n      matchedIndex !== undefined && matchedIndex.length > 0 ?\n        Option.some(matchedIndex) :\n        Option.none(),\n      Option.flatMap(parseInteger)\n    )\n  }\n  return Option.none()\n}\n\nconst splitIndexInKeys = (\n  map: Map<string, string>,\n  unmakePathString: (str: string) => ReadonlyArray<string>,\n  makePathString: (chunk: ReadonlyArray<string>) => string\n): Map<string, string> => {\n  const newMap: Map<string, string> = new Map()\n  for (const [pathString, value] of map) {\n    const keyWithIndex = pipe(\n      unmakePathString(pathString),\n      Arr.flatMap((key) =>\n        Option.match(splitIndexFrom(key), {\n          onNone: () => Arr.of(key),\n          onSome: ([key, index]) => Arr.make(key, `[${index}]`)\n        })\n      )\n    )\n    newMap.set(makePathString(keyWithIndex), value)\n  }\n  return newMap\n}\n\nconst splitIndexFrom = (key: string): Option.Option<[string, number]> => {\n  const match = key.match(STR_INDEX_REGEX)\n  if (match !== null) {\n    const matchedString = match[1]\n    const matchedIndex = match[3]\n    const optionalString = matchedString !== undefined && matchedString.length > 0 ?\n      Option.some(matchedString) :\n      Option.none()\n    const optionalIndex = pipe(\n      matchedIndex !== undefined && matchedIndex.length > 0 ?\n        Option.some(matchedIndex) :\n        Option.none(),\n      Option.flatMap(parseInteger)\n    )\n    return Option.all([optionalString, optionalIndex])\n  }\n  return Option.none()\n}\n\nconst parseInteger = (str: string): Option.Option<number> => {\n  const parsedIndex = Number.parseInt(str)\n  return Number.isNaN(parsedIndex) ?\n    Option.none() :\n    Option.some(parsedIndex)\n}\n\nconst keyName = (name: string): KeyComponent => ({\n  _tag: \"KeyName\",\n  name\n})\n\nconst keyIndex = (index: number): KeyComponent => ({\n  _tag: \"KeyIndex\",\n  index\n})\n\ninterface JsonMap {\n  [member: string]: string | number | boolean | null | JsonArray | JsonMap\n}\ninterface JsonArray extends Array<string | number | boolean | null | JsonArray | JsonMap> {}\n\n/** @internal */\nexport const fromJson = (json: unknown): ConfigProvider.ConfigProvider => {\n  const hiddenDelimiter = \"\\ufeff\"\n  const indexedEntries = Arr.map(\n    getIndexedEntries(json as JsonMap),\n    ([key, value]): [string, string] => [configPathToString(key).join(hiddenDelimiter), value]\n  )\n  return fromMap(new Map(indexedEntries), {\n    pathDelim: hiddenDelimiter,\n    seqDelim: hiddenDelimiter\n  })\n}\n\nconst configPathToString = (path: ReadonlyArray<KeyComponent>): ReadonlyArray<string> => {\n  const output: Array<string> = []\n  let i = 0\n  while (i < path.length) {\n    const component = path[i]\n    if (component._tag === \"KeyName\") {\n      if (i + 1 < path.length) {\n        const nextComponent = path[i + 1]\n        if (nextComponent._tag === \"KeyIndex\") {\n          output.push(`${component.name}[${nextComponent.index}]`)\n          i += 2\n        } else {\n          output.push(component.name)\n          i += 1\n        }\n      } else {\n        output.push(component.name)\n        i += 1\n      }\n    }\n  }\n  return output\n}\n\nconst getIndexedEntries = (\n  config: JsonMap\n): ReadonlyArray<[path: ReadonlyArray<KeyComponent>, value: string]> => {\n  const loopAny = (\n    path: ReadonlyArray<KeyComponent>,\n    value: string | number | boolean | JsonMap | JsonArray | null\n  ): ReadonlyArray<[path: ReadonlyArray<KeyComponent>, value: string]> => {\n    if (typeof value === \"string\") {\n      return Arr.make([path, value] as [ReadonlyArray<KeyComponent>, string])\n    }\n    if (typeof value === \"number\" || typeof value === \"boolean\") {\n      return Arr.make([path, String(value)] as [ReadonlyArray<KeyComponent>, string])\n    }\n    if (Arr.isArray(value)) {\n      return loopArray(path, value)\n    }\n    if (typeof value === \"object\" && value !== null) {\n      return loopObject(path, value)\n    }\n    return Arr.empty<[ReadonlyArray<KeyComponent>, string]>()\n  }\n  const loopArray = (\n    path: ReadonlyArray<KeyComponent>,\n    values: JsonArray\n  ): ReadonlyArray<[path: ReadonlyArray<KeyComponent>, value: string]> =>\n    Arr.match(values, {\n      onEmpty: () => Arr.make([path, \"<nil>\"] as [ReadonlyArray<KeyComponent>, string]),\n      onNonEmpty: Arr.flatMap((value, index) => loopAny(Arr.append(path, keyIndex(index)), value))\n    })\n  const loopObject = (\n    path: ReadonlyArray<KeyComponent>,\n    value: JsonMap\n  ): ReadonlyArray<[path: ReadonlyArray<KeyComponent>, value: string]> =>\n    Object.entries(value)\n      .filter(([, value]) => Predicate.isNotNullable(value))\n      .flatMap(([key, value]) => {\n        const newPath = Arr.append(path, keyName(key))\n        const result = loopAny(newPath, value)\n        if (Arr.isEmptyReadonlyArray(result)) {\n          return Arr.make([newPath, \"\"] as [ReadonlyArray<KeyComponent>, string])\n        }\n        return result\n      })\n  return loopObject(Arr.empty(), config)\n}\n", "import * as RA from \"../Array.js\"\nimport type * as Cause from \"../Cause.js\"\nimport type * as ConfigError from \"../ConfigError.js\"\nimport * as Either from \"../Either.js\"\nimport { constFalse, constTrue, dual, pipe } from \"../Function.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport * as OpCodes from \"./opCodes/configError.js\"\n\n/** @internal */\nconst ConfigErrorSymbolKey = \"effect/ConfigError\"\n\n/** @internal */\nexport const ConfigErrorTypeId: ConfigError.ConfigErrorTypeId = Symbol.for(\n  ConfigErrorSymbolKey\n) as ConfigError.ConfigErrorTypeId\n\n/** @internal */\nexport const proto = {\n  _tag: \"ConfigError\",\n  [ConfigErrorTypeId]: ConfigErrorTypeId\n}\n\n/** @internal */\nexport const And = (self: ConfigError.ConfigError, that: ConfigError.ConfigError): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_AND\n  error.left = self\n  error.right = that\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.And) {\n      return `${this.left} and ${this.right}`\n    }\n  })\n  Object.defineProperty(error, \"message\", {\n    enumerable: false,\n    get(this: ConfigError.And) {\n      return this.toString()\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const Or = (self: ConfigError.ConfigError, that: ConfigError.ConfigError): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_OR\n  error.left = self\n  error.right = that\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.Or) {\n      return `${this.left} or ${this.right}`\n    }\n  })\n  Object.defineProperty(error, \"message\", {\n    enumerable: false,\n    get(this: ConfigError.Or) {\n      return this.toString()\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const InvalidData = (\n  path: ReadonlyArray<string>,\n  message: string,\n  options: ConfigError.Options = { pathDelim: \".\" }\n): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_INVALID_DATA\n  error.path = path\n  error.message = message\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.InvalidData) {\n      const path = pipe(this.path, RA.join(options.pathDelim))\n      return `(Invalid data at ${path}: \"${this.message}\")`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const MissingData = (\n  path: ReadonlyArray<string>,\n  message: string,\n  options: ConfigError.Options = { pathDelim: \".\" }\n): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_MISSING_DATA\n  error.path = path\n  error.message = message\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.MissingData) {\n      const path = pipe(this.path, RA.join(options.pathDelim))\n      return `(Missing data at ${path}: \"${this.message}\")`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const SourceUnavailable = (\n  path: ReadonlyArray<string>,\n  message: string,\n  cause: Cause.Cause<unknown>,\n  options: ConfigError.Options = { pathDelim: \".\" }\n): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_SOURCE_UNAVAILABLE\n  error.path = path\n  error.message = message\n  error.cause = cause\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.SourceUnavailable) {\n      const path = pipe(this.path, RA.join(options.pathDelim))\n      return `(Source unavailable at ${path}: \"${this.message}\")`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const Unsupported = (\n  path: ReadonlyArray<string>,\n  message: string,\n  options: ConfigError.Options = { pathDelim: \".\" }\n): ConfigError.ConfigError => {\n  const error = Object.create(proto)\n  error._op = OpCodes.OP_UNSUPPORTED\n  error.path = path\n  error.message = message\n  Object.defineProperty(error, \"toString\", {\n    enumerable: false,\n    value(this: ConfigError.Unsupported) {\n      const path = pipe(this.path, RA.join(options.pathDelim))\n      return `(Unsupported operation at ${path}: \"${this.message}\")`\n    }\n  })\n  return error\n}\n\n/** @internal */\nexport const isConfigError = (u: unknown): u is ConfigError.ConfigError => hasProperty(u, ConfigErrorTypeId)\n\n/** @internal */\nexport const isAnd = (self: ConfigError.ConfigError): self is ConfigError.And => self._op === OpCodes.OP_AND\n\n/** @internal */\nexport const isOr = (self: ConfigError.ConfigError): self is ConfigError.Or => self._op === OpCodes.OP_OR\n\n/** @internal */\nexport const isInvalidData = (self: ConfigError.ConfigError): self is ConfigError.InvalidData =>\n  self._op === OpCodes.OP_INVALID_DATA\n\n/** @internal */\nexport const isMissingData = (self: ConfigError.ConfigError): self is ConfigError.MissingData =>\n  self._op === OpCodes.OP_MISSING_DATA\n\n/** @internal */\nexport const isSourceUnavailable = (self: ConfigError.ConfigError): self is ConfigError.SourceUnavailable =>\n  self._op === OpCodes.OP_SOURCE_UNAVAILABLE\n\n/** @internal */\nexport const isUnsupported = (self: ConfigError.ConfigError): self is ConfigError.Unsupported =>\n  self._op === OpCodes.OP_UNSUPPORTED\n\n/** @internal */\nexport const prefixed: {\n  (prefix: ReadonlyArray<string>): (self: ConfigError.ConfigError) => ConfigError.ConfigError\n  (self: ConfigError.ConfigError, prefix: ReadonlyArray<string>): ConfigError.ConfigError\n} = dual<\n  (prefix: ReadonlyArray<string>) => (self: ConfigError.ConfigError) => ConfigError.ConfigError,\n  (self: ConfigError.ConfigError, prefix: ReadonlyArray<string>) => ConfigError.ConfigError\n>(2, (self, prefix) => {\n  switch (self._op) {\n    case OpCodes.OP_AND: {\n      return And(prefixed(self.left, prefix), prefixed(self.right, prefix))\n    }\n    case OpCodes.OP_OR: {\n      return Or(prefixed(self.left, prefix), prefixed(self.right, prefix))\n    }\n    case OpCodes.OP_INVALID_DATA: {\n      return InvalidData([...prefix, ...self.path], self.message)\n    }\n    case OpCodes.OP_MISSING_DATA: {\n      return MissingData([...prefix, ...self.path], self.message)\n    }\n    case OpCodes.OP_SOURCE_UNAVAILABLE: {\n      return SourceUnavailable([...prefix, ...self.path], self.message, self.cause)\n    }\n    case OpCodes.OP_UNSUPPORTED: {\n      return Unsupported([...prefix, ...self.path], self.message)\n    }\n  }\n})\n\n/** @internal */\nconst IsMissingDataOnlyReducer: ConfigError.ConfigErrorReducer<unknown, boolean> = {\n  andCase: (_, left, right) => left && right,\n  orCase: (_, left, right) => left && right,\n  invalidDataCase: constFalse,\n  missingDataCase: constTrue,\n  sourceUnavailableCase: constFalse,\n  unsupportedCase: constFalse\n}\n\n/** @internal */\ntype ConfigErrorCase = AndCase | OrCase\n\n/** @internal */\ninterface AndCase {\n  readonly _op: \"AndCase\"\n}\n\n/** @internal */\ninterface OrCase {\n  readonly _op: \"OrCase\"\n}\n\n/** @internal */\nexport const reduceWithContext = dual<\n  <C, Z>(context: C, reducer: ConfigError.ConfigErrorReducer<C, Z>) => (self: ConfigError.ConfigError) => Z,\n  <C, Z>(self: ConfigError.ConfigError, context: C, reducer: ConfigError.ConfigErrorReducer<C, Z>) => Z\n>(3, <C, Z>(self: ConfigError.ConfigError, context: C, reducer: ConfigError.ConfigErrorReducer<C, Z>) => {\n  const input: Array<ConfigError.ConfigError> = [self]\n  const output: Array<Either.Either<Z, ConfigErrorCase>> = []\n  while (input.length > 0) {\n    const error = input.pop()!\n    switch (error._op) {\n      case OpCodes.OP_AND: {\n        input.push(error.right)\n        input.push(error.left)\n        output.push(Either.left({ _op: \"AndCase\" }))\n        break\n      }\n      case OpCodes.OP_OR: {\n        input.push(error.right)\n        input.push(error.left)\n        output.push(Either.left({ _op: \"OrCase\" }))\n        break\n      }\n      case OpCodes.OP_INVALID_DATA: {\n        output.push(Either.right(reducer.invalidDataCase(context, error.path, error.message)))\n        break\n      }\n      case OpCodes.OP_MISSING_DATA: {\n        output.push(Either.right(reducer.missingDataCase(context, error.path, error.message)))\n        break\n      }\n      case OpCodes.OP_SOURCE_UNAVAILABLE: {\n        output.push(Either.right(reducer.sourceUnavailableCase(context, error.path, error.message, error.cause)))\n        break\n      }\n      case OpCodes.OP_UNSUPPORTED: {\n        output.push(Either.right(reducer.unsupportedCase(context, error.path, error.message)))\n        break\n      }\n    }\n  }\n  const accumulator: Array<Z> = []\n  while (output.length > 0) {\n    const either = output.pop()!\n    switch (either._op) {\n      case \"Left\": {\n        switch (either.left._op) {\n          case \"AndCase\": {\n            const left = accumulator.pop()!\n            const right = accumulator.pop()!\n            const value = reducer.andCase(context, left, right)\n            accumulator.push(value)\n            break\n          }\n          case \"OrCase\": {\n            const left = accumulator.pop()!\n            const right = accumulator.pop()!\n            const value = reducer.orCase(context, left, right)\n            accumulator.push(value)\n            break\n          }\n        }\n        break\n      }\n      case \"Right\": {\n        accumulator.push(either.right)\n        break\n      }\n    }\n  }\n  if (accumulator.length === 0) {\n    throw new Error(\n      \"BUG: ConfigError.reduceWithContext - please report an issue at https://github.com/Effect-TS/effect/issues\"\n    )\n  }\n  return accumulator.pop()!\n})\n\n/** @internal */\nexport const isMissingDataOnly = (self: ConfigError.ConfigError): boolean =>\n  reduceWithContext(self, void 0, IsMissingDataOnlyReducer)\n", "/** @internal */\nexport type OP_AND = typeof OP_AND\n\n/** @internal */\nexport const OP_AND = \"And\" as const\n\n/** @internal */\nexport type OP_OR = typeof OP_OR\n\n/** @internal */\nexport const OP_OR = \"Or\" as const\n\n/** @internal */\nexport type OP_INVALID_DATA = typeof OP_INVALID_DATA\n\n/** @internal */\nexport const OP_INVALID_DATA = \"InvalidData\" as const\n\n/** @internal */\nexport type OP_MISSING_DATA = typeof OP_MISSING_DATA\n\n/** @internal */\nexport const OP_MISSING_DATA = \"MissingData\" as const\n\n/** @internal */\nexport type OP_SOURCE_UNAVAILABLE = typeof OP_SOURCE_UNAVAILABLE\n\n/** @internal */\nexport const OP_SOURCE_UNAVAILABLE = \"SourceUnavailable\" as const\n\n/** @internal */\nexport type OP_UNSUPPORTED = typeof OP_UNSUPPORTED\n\n/** @internal */\nexport const OP_UNSUPPORTED = \"Unsupported\" as const\n", "import * as RA from \"../../Array.js\"\nimport type * as ConfigError from \"../../ConfigError.js\"\nimport type * as PathPatch from \"../../ConfigProviderPathPatch.js\"\nimport * as Either from \"../../Either.js\"\nimport { dual, pipe } from \"../../Function.js\"\nimport * as List from \"../../List.js\"\nimport * as Option from \"../../Option.js\"\nimport * as configError from \"../configError.js\"\n\n/** @internal */\nexport const empty: PathPatch.PathPatch = {\n  _tag: \"Empty\"\n}\n\n/** @internal */\nexport const andThen = dual<\n  (that: PathPatch.PathPatch) => (self: PathPatch.PathPatch) => PathPatch.PathPatch,\n  (self: PathPatch.PathPatch, that: PathPatch.PathPatch) => PathPatch.PathPatch\n>(2, (self, that) => ({\n  _tag: \"AndThen\",\n  first: self,\n  second: that\n}))\n\n/** @internal */\nexport const mapName = dual<\n  (f: (string: string) => string) => (self: PathPatch.PathPatch) => PathPatch.PathPatch,\n  (self: PathPatch.PathPatch, f: (string: string) => string) => PathPatch.PathPatch\n>(2, (self, f) => andThen(self, { _tag: \"MapName\", f }))\n\n/** @internal */\nexport const nested = dual<\n  (name: string) => (self: PathPatch.PathPatch) => PathPatch.PathPatch,\n  (self: PathPatch.PathPatch, name: string) => PathPatch.PathPatch\n>(2, (self, name) => andThen(self, { _tag: \"Nested\", name }))\n\n/** @internal */\nexport const unnested = dual<\n  (name: string) => (self: PathPatch.PathPatch) => PathPatch.PathPatch,\n  (self: PathPatch.PathPatch, name: string) => PathPatch.PathPatch\n>(2, (self, name) => andThen(self, { _tag: \"Unnested\", name }))\n\n/** @internal */\nexport const patch = dual<\n  (\n    patch: PathPatch.PathPatch\n  ) => (\n    path: ReadonlyArray<string>\n  ) => Either.Either<ReadonlyArray<string>, ConfigError.ConfigError>,\n  (\n    path: ReadonlyArray<string>,\n    patch: PathPatch.PathPatch\n  ) => Either.Either<ReadonlyArray<string>, ConfigError.ConfigError>\n>(2, (path, patch) => {\n  let input: List.List<PathPatch.PathPatch> = List.of(patch)\n  let output: ReadonlyArray<string> = path\n  while (List.isCons(input)) {\n    const patch: PathPatch.PathPatch = input.head\n    switch (patch._tag) {\n      case \"Empty\": {\n        input = input.tail\n        break\n      }\n      case \"AndThen\": {\n        input = List.cons(patch.first, List.cons(patch.second, input.tail))\n        break\n      }\n      case \"MapName\": {\n        output = RA.map(output, patch.f)\n        input = input.tail\n        break\n      }\n      case \"Nested\": {\n        output = RA.prepend(output, patch.name)\n        input = input.tail\n        break\n      }\n      case \"Unnested\": {\n        const containsName = pipe(\n          RA.head(output),\n          Option.contains(patch.name)\n        )\n        if (containsName) {\n          output = RA.tailNonEmpty(output as RA.NonEmptyArray<string>)\n          input = input.tail\n        } else {\n          return Either.left(configError.MissingData(\n            output,\n            `Expected ${patch.name} to be in path in ConfigProvider#unnested`\n          ))\n        }\n        break\n      }\n    }\n  }\n  return Either.right(output)\n})\n", "/** @internal */\nexport type OP_CONSTANT = typeof OP_CONSTANT\n\n/** @internal */\nexport const OP_CONSTANT = \"Constant\" as const\n\n/** @internal */\nexport type OP_FAIL = typeof OP_FAIL\n\n/** @internal */\nexport const OP_FAIL = \"Fail\" as const\n\n/** @internal */\nexport type OP_FALLBACK = typeof OP_FALLBACK\n\n/** @internal */\nexport const OP_FALLBACK = \"Fallback\" as const\n\n/** @internal */\nexport type OP_DESCRIBED = typeof OP_DESCRIBED\n\n/** @internal */\nexport const OP_DESCRIBED = \"Described\" as const\n\n/** @internal */\nexport type OP_LAZY = typeof OP_LAZY\n\n/** @internal */\nexport const OP_LAZY = \"Lazy\" as const\n\n/** @internal */\nexport type OP_MAP_OR_FAIL = typeof OP_MAP_OR_FAIL\n\n/** @internal */\nexport const OP_MAP_OR_FAIL = \"MapOrFail\" as const\n\n/** @internal */\nexport type OP_NESTED = typeof OP_NESTED\n\n/** @internal */\nexport const OP_NESTED = \"Nested\" as const\n\n/** @internal */\nexport type OP_PRIMITIVE = typeof OP_PRIMITIVE\n\n/** @internal */\nexport const OP_PRIMITIVE = \"Primitive\" as const\n\n/** @internal */\nexport type OP_SEQUENCE = typeof OP_SEQUENCE\n\n/** @internal */\nexport const OP_SEQUENCE = \"Sequence\" as const\n\n/** @internal */\nexport type OP_HASHMAP = typeof OP_HASHMAP\n\n/** @internal */\nexport const OP_HASHMAP = \"HashMap\" as const\n\n/** @internal */\nexport type OP_ZIP_WITH = typeof OP_ZIP_WITH\n\n/** @internal */\nexport const OP_ZIP_WITH = \"ZipWith\" as const\n", "/* eslint-disable no-console */\nimport type * as Console from \"../../Console.js\"\nimport * as Context from \"../../Context.js\"\nimport * as core from \"../core.js\"\n\n/** @internal */\nexport const TypeId: Console.TypeId = Symbol.for(\"effect/Console\") as Console.TypeId\n\n/** @internal */\nexport const consoleTag: Context.Tag<Console.Console, Console.Console> = Context.GenericTag<Console.Console>(\n  \"effect/Console\"\n)\n\n/** @internal */\nexport const defaultConsole: Console.Console = {\n  [TypeId]: TypeId,\n  assert(condition, ...args) {\n    return core.sync(() => {\n      console.assert(condition, ...args)\n    })\n  },\n  clear: core.sync(() => {\n    console.clear()\n  }),\n  count(label) {\n    return core.sync(() => {\n      console.count(label)\n    })\n  },\n  countReset(label) {\n    return core.sync(() => {\n      console.countReset(label)\n    })\n  },\n  debug(...args) {\n    return core.sync(() => {\n      console.debug(...args)\n    })\n  },\n  dir(item, options) {\n    return core.sync(() => {\n      console.dir(item, options)\n    })\n  },\n  dirxml(...args) {\n    return core.sync(() => {\n      console.dirxml(...args)\n    })\n  },\n  error(...args) {\n    return core.sync(() => {\n      console.error(...args)\n    })\n  },\n  group(options) {\n    return options?.collapsed ?\n      core.sync(() => console.groupCollapsed(options?.label)) :\n      core.sync(() => console.group(options?.label))\n  },\n  groupEnd: core.sync(() => {\n    console.groupEnd()\n  }),\n  info(...args) {\n    return core.sync(() => {\n      console.info(...args)\n    })\n  },\n  log(...args) {\n    return core.sync(() => {\n      console.log(...args)\n    })\n  },\n  table(tabularData, properties) {\n    return core.sync(() => {\n      console.table(tabularData, properties)\n    })\n  },\n  time(label) {\n    return core.sync(() => console.time(label))\n  },\n  timeEnd(label) {\n    return core.sync(() => console.timeEnd(label))\n  },\n  timeLog(label, ...args) {\n    return core.sync(() => {\n      console.timeLog(label, ...args)\n    })\n  },\n  trace(...args) {\n    return core.sync(() => {\n      console.trace(...args)\n    })\n  },\n  warn(...args) {\n    return core.sync(() => {\n      console.warn(...args)\n    })\n  },\n  unsafe: console\n}\n", "import type * as Arr from \"../Array.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport * as Context from \"../Context.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { pipe } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport type * as Random from \"../Random.js\"\nimport * as PCGRandom from \"../Utils.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nconst RandomSymbolKey = \"effect/Random\"\n\n/** @internal */\nexport const RandomTypeId: Random.RandomTypeId = Symbol.for(\n  RandomSymbolKey\n) as Random.RandomTypeId\n\n/** @internal */\nexport const randomTag: Context.Tag<Random.Random, Random.Random> = Context.GenericTag(\"effect/Random\")\n/** @internal */\nclass RandomImpl implements Random.Random {\n  readonly [RandomTypeId]: Random.RandomTypeId = RandomTypeId\n\n  readonly PRNG: PCGRandom.PCGRandom\n\n  constructor(readonly seed: number) {\n    this.PRNG = new PCGRandom.PCGRandom(seed)\n  }\n\n  get next(): Effect.Effect<number> {\n    return core.sync(() => this.PRNG.number())\n  }\n\n  get nextBoolean(): Effect.Effect<boolean> {\n    return core.map(this.next, (n) => n > 0.5)\n  }\n\n  get nextInt(): Effect.Effect<number> {\n    return core.sync(() => this.PRNG.integer(Number.MAX_SAFE_INTEGER))\n  }\n\n  nextRange(min: number, max: number): Effect.Effect<number> {\n    return core.map(this.next, (n) => (max - min) * n + min)\n  }\n\n  nextIntBetween(min: number, max: number): Effect.Effect<number> {\n    return core.sync(() => this.PRNG.integer(max - min) + min)\n  }\n\n  shuffle<A>(elements: Iterable<A>): Effect.Effect<Chunk.Chunk<A>> {\n    return shuffleWith(elements, (n) => this.nextIntBetween(0, n))\n  }\n}\n\nconst shuffleWith = <A>(\n  elements: Iterable<A>,\n  nextIntBounded: (n: number) => Effect.Effect<number>\n): Effect.Effect<Chunk.Chunk<A>> => {\n  return core.suspend(() =>\n    pipe(\n      core.sync(() => Array.from(elements)),\n      core.flatMap((buffer) => {\n        const numbers: Array<number> = []\n        for (let i = buffer.length; i >= 2; i = i - 1) {\n          numbers.push(i)\n        }\n        return pipe(\n          numbers,\n          core.forEachSequentialDiscard((n) =>\n            pipe(\n              nextIntBounded(n),\n              core.map((k) => swap(buffer, n - 1, k))\n            )\n          ),\n          core.as(Chunk.fromIterable(buffer))\n        )\n      })\n    )\n  )\n}\n\nconst swap = <A>(buffer: Array<A>, index1: number, index2: number): Array<A> => {\n  const tmp = buffer[index1]!\n  buffer[index1] = buffer[index2]!\n  buffer[index2] = tmp\n  return buffer\n}\n\nexport const make = <A>(seed: A): Random.Random => new RandomImpl(Hash.hash(seed))\n\n/** @internal */\nclass FixedRandomImpl implements Random.Random {\n  readonly [RandomTypeId]: Random.RandomTypeId = RandomTypeId\n\n  private index = 0\n\n  constructor(readonly values: Arr.NonEmptyArray<any>) {\n    if (values.length === 0) {\n      throw new Error(\"Requires at least one value\")\n    }\n  }\n\n  private getNextValue(): any {\n    const value = this.values[this.index]\n    this.index = (this.index + 1) % this.values.length\n    return value\n  }\n\n  get next(): Effect.Effect<number> {\n    return core.sync(() => {\n      const value = this.getNextValue()\n      if (typeof value === \"number\") {\n        return Math.max(0, Math.min(1, value))\n      }\n      return Hash.hash(value) / 2147483647\n    })\n  }\n\n  get nextBoolean(): Effect.Effect<boolean> {\n    return core.sync(() => {\n      const value = this.getNextValue()\n      if (typeof value === \"boolean\") {\n        return value\n      }\n      return Hash.hash(value) % 2 === 0\n    })\n  }\n\n  get nextInt(): Effect.Effect<number> {\n    return core.sync(() => {\n      const value = this.getNextValue()\n      if (typeof value === \"number\" && Number.isFinite(value)) {\n        return Math.round(value)\n      }\n      return Math.abs(Hash.hash(value))\n    })\n  }\n\n  nextRange(min: number, max: number): Effect.Effect<number> {\n    return core.map(this.next, (n) => (max - min) * n + min)\n  }\n\n  nextIntBetween(min: number, max: number): Effect.Effect<number> {\n    return core.sync(() => {\n      const value = this.getNextValue()\n      if (typeof value === \"number\" && Number.isFinite(value)) {\n        return Math.max(min, Math.min(max - 1, Math.round(value)))\n      }\n      const hash = Math.abs(Hash.hash(value))\n      return min + (hash % (max - min))\n    })\n  }\n\n  shuffle<A>(elements: Iterable<A>): Effect.Effect<Chunk.Chunk<A>> {\n    return shuffleWith(elements, (n) => this.nextIntBetween(0, n))\n  }\n}\n\n/** @internal */\nexport const fixed = <T extends Arr.NonEmptyArray<any>>(values: T): Random.Random => new FixedRandomImpl(values)\n", "/**\n * @since 2.0.0\n */\nimport * as Context from \"../Context.js\"\nimport type * as Exit from \"../Exit.js\"\nimport { constFalse } from \"../Function.js\"\nimport type * as Option from \"../Option.js\"\nimport type * as Tracer from \"../Tracer.js\"\n\n/** @internal */\nexport const TracerTypeId: Tracer.TracerTypeId = Symbol.for(\"effect/Tracer\") as Tracer.TracerTypeId\n\n/** @internal */\nexport const make = (options: Omit<Tracer.Tracer, Tracer.TracerTypeId>): Tracer.Tracer => ({\n  [TracerTypeId]: TracerTypeId,\n  ...options\n})\n\n/** @internal */\nexport const tracerTag = Context.GenericTag<Tracer.Tracer>(\"effect/Tracer\")\n\n/** @internal */\nexport const spanTag = Context.GenericTag<Tracer.ParentSpan, Tracer.AnySpan>(\"effect/ParentSpan\")\n\nconst randomHexString = (function() {\n  const characters = \"abcdef0123456789\"\n  const charactersLength = characters.length\n  return function(length: number) {\n    let result = \"\"\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength))\n    }\n    return result\n  }\n})()\n\n/** @internal */\nexport class NativeSpan implements Tracer.Span {\n  readonly _tag = \"Span\"\n  readonly spanId: string\n  readonly traceId: string = \"native\"\n  readonly sampled = true\n\n  status: Tracer.SpanStatus\n  attributes: Map<string, unknown>\n  events: Array<[name: string, startTime: bigint, attributes: Record<string, unknown>]> = []\n  links: Array<Tracer.SpanLink>\n\n  constructor(\n    readonly name: string,\n    readonly parent: Option.Option<Tracer.AnySpan>,\n    readonly context: Context.Context<never>,\n    links: Iterable<Tracer.SpanLink>,\n    readonly startTime: bigint,\n    readonly kind: Tracer.SpanKind\n  ) {\n    this.status = {\n      _tag: \"Started\",\n      startTime\n    }\n    this.attributes = new Map()\n    this.traceId = parent._tag === \"Some\" ? parent.value.traceId : randomHexString(32)\n    this.spanId = randomHexString(16)\n    this.links = Array.from(links)\n  }\n\n  end(endTime: bigint, exit: Exit.Exit<unknown, unknown>): void {\n    this.status = {\n      _tag: \"Ended\",\n      endTime,\n      exit,\n      startTime: this.status.startTime\n    }\n  }\n\n  attribute(key: string, value: unknown): void {\n    this.attributes.set(key, value)\n  }\n\n  event(name: string, startTime: bigint, attributes?: Record<string, unknown>): void {\n    this.events.push([name, startTime, attributes ?? {}])\n  }\n\n  addLinks(links: ReadonlyArray<Tracer.SpanLink>): void {\n    // eslint-disable-next-line no-restricted-syntax\n    this.links.push(...links)\n  }\n}\n\n/** @internal */\nexport const nativeTracer: Tracer.Tracer = make({\n  span: (name, parent, context, links, startTime, kind) =>\n    new NativeSpan(\n      name,\n      parent,\n      context,\n      links,\n      startTime,\n      kind\n    ),\n  context: (f) => f()\n})\n\n/** @internal */\nexport const externalSpan = (options: {\n  readonly spanId: string\n  readonly traceId: string\n  readonly sampled?: boolean | undefined\n  readonly context?: Context.Context<never> | undefined\n}): Tracer.ExternalSpan => ({\n  _tag: \"ExternalSpan\",\n  spanId: options.spanId,\n  traceId: options.traceId,\n  sampled: options.sampled ?? true,\n  context: options.context ?? Context.empty()\n})\n\n/** @internal */\nexport const addSpanStackTrace = (options: Tracer.SpanOptions | undefined): Tracer.SpanOptions => {\n  if (options?.captureStackTrace === false) {\n    return options\n  } else if (options?.captureStackTrace !== undefined && typeof options.captureStackTrace !== \"boolean\") {\n    return options\n  }\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 3\n  const traceError = new Error()\n  Error.stackTraceLimit = limit\n  let cache: false | string = false\n  return {\n    ...options,\n    captureStackTrace: () => {\n      if (cache !== false) {\n        return cache\n      }\n      if (traceError.stack !== undefined) {\n        const stack = traceError.stack.split(\"\\n\")\n        if (stack[3] !== undefined) {\n          cache = stack[3].trim()\n          return cache\n        }\n      }\n    }\n  }\n}\n\n/** @internal */\nexport const DisablePropagation = Context.Reference<Tracer.DisablePropagation>()(\"effect/Tracer/DisablePropagation\", {\n  defaultValue: constFalse\n})\n", "/**\n * @since 2.0.0\n */\nimport type * as Arr from \"./Array.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as FiberRef from \"./FiberRef.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport * as internal from \"./internal/fiberRefs.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberRefsSym: unique symbol = internal.FiberRefsSym\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberRefsSym = typeof FiberRefsSym\n\n/**\n * `FiberRefs` is a data type that represents a collection of `FiberRef` values.\n *\n * This allows safely propagating `FiberRef` values across fiber boundaries, for\n * example between an asynchronous producer and consumer.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface FiberRefs extends Pipeable {\n  readonly [FiberRefsSym]: FiberRefsSym\n  readonly locals: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>\n}\n\nconst delete_: {\n  <A>(fiberRef: FiberRef.FiberRef<A>): (self: FiberRefs) => FiberRefs\n  <A>(self: FiberRefs, fiberRef: FiberRef.FiberRef<A>): FiberRefs\n} = internal.delete_\n\nexport {\n  /**\n   * Deletes the specified `FiberRef` from the `FibterRefs`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  delete_ as delete\n}\n\n/**\n * Returns a set of each `FiberRef` in this collection.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const fiberRefs: (self: FiberRefs) => HashSet.HashSet<FiberRef.FiberRef<any>> = internal.fiberRefs\n\n/**\n * Forks this collection of fiber refs as the specified child fiber id. This\n * will potentially modify the value of the fiber refs, as determined by the\n * individual fiber refs that make up the collection.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const forkAs: {\n  /**\n   * Forks this collection of fiber refs as the specified child fiber id. This\n   * will potentially modify the value of the fiber refs, as determined by the\n   * individual fiber refs that make up the collection.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (childId: FiberId.Single): (self: FiberRefs) => FiberRefs\n  /**\n   * Forks this collection of fiber refs as the specified child fiber id. This\n   * will potentially modify the value of the fiber refs, as determined by the\n   * individual fiber refs that make up the collection.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: FiberRefs, childId: FiberId.Single): FiberRefs\n} = internal.forkAs\n\n/**\n * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n * values if it exists or `None` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const get: {\n  /**\n   * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n   * values if it exists or `None` otherwise.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <A>(fiberRef: FiberRef.FiberRef<A>): (self: FiberRefs) => Option.Option<A>\n  /**\n   * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n   * values if it exists or `None` otherwise.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <A>(self: FiberRefs, fiberRef: FiberRef.FiberRef<A>): Option.Option<A>\n} = internal.get\n\n/**\n * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n * values if it exists or the `initial` value of the `FiberRef` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOrDefault: {\n  /**\n   * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n   * values if it exists or the `initial` value of the `FiberRef` otherwise.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <A>(fiberRef: FiberRef.FiberRef<A>): (self: FiberRefs) => A\n  /**\n   * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n   * values if it exists or the `initial` value of the `FiberRef` otherwise.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <A>(self: FiberRefs, fiberRef: FiberRef.FiberRef<A>): A\n} = internal.getOrDefault\n\n/**\n * Joins this collection of fiber refs to the specified collection, as the\n * specified fiber id. This will perform diffing and merging to ensure\n * preservation of maximum information from both child and parent refs.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const joinAs: {\n  /**\n   * Joins this collection of fiber refs to the specified collection, as the\n   * specified fiber id. This will perform diffing and merging to ensure\n   * preservation of maximum information from both child and parent refs.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (fiberId: FiberId.Single, that: FiberRefs): (self: FiberRefs) => FiberRefs\n  /**\n   * Joins this collection of fiber refs to the specified collection, as the\n   * specified fiber id. This will perform diffing and merging to ensure\n   * preservation of maximum information from both child and parent refs.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: FiberRefs, fiberId: FiberId.Single, that: FiberRefs): FiberRefs\n} = internal.joinAs\n\n/**\n * Set each ref to either its value or its default.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const setAll: (self: FiberRefs) => Effect.Effect<void> = internal.setAll\n\n/**\n * Updates the value of the specified `FiberRef` using the provided `FiberId`\n *\n * @since 2.0.0\n * @category utils\n */\nexport const updateAs: {\n  /**\n   * Updates the value of the specified `FiberRef` using the provided `FiberId`\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(\n    options: {\n      readonly fiberId: FiberId.Single\n      readonly fiberRef: FiberRef.FiberRef<A>\n      readonly value: A\n    }\n  ): (self: FiberRefs) => FiberRefs\n  /**\n   * Updates the value of the specified `FiberRef` using the provided `FiberId`\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(\n    self: FiberRefs,\n    options: {\n      readonly fiberId: FiberId.Single\n      readonly fiberRef: FiberRef.FiberRef<A>\n      readonly value: A\n    }\n  ): FiberRefs\n} = internal.updateAs\n\n/**\n * Updates the values of the specified `FiberRef` & value pairs using the provided `FiberId`\n *\n * @since 2.0.0\n * @category utils\n */\nexport const updateManyAs: {\n  /**\n   * Updates the values of the specified `FiberRef` & value pairs using the provided `FiberId`\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (\n    options: {\n      readonly forkAs?: FiberId.Single | undefined\n      readonly entries: readonly [\n        readonly [\n          FiberRef.FiberRef<any>,\n          readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n        ],\n        ...Array<\n          readonly [\n            FiberRef.FiberRef<any>,\n            readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n          ]\n        >\n      ]\n    }\n  ): (self: FiberRefs) => FiberRefs\n  /**\n   * Updates the values of the specified `FiberRef` & value pairs using the provided `FiberId`\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (\n    self: FiberRefs,\n    options: {\n      readonly forkAs?: FiberId.Single | undefined\n      readonly entries: readonly [\n        readonly [\n          FiberRef.FiberRef<any>,\n          readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n        ],\n        ...Array<\n          readonly [\n            FiberRef.FiberRef<any>,\n            readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n          ]\n        >\n      ]\n    }\n  ): FiberRefs\n} = internal.updateManyAs\n\n/**\n * Note: it will not copy the provided Map, make sure to provide a fresh one.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: (\n  fiberRefLocals: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>\n) => FiberRefs = internal.unsafeMake\n\n/**\n * The empty collection of `FiberRef` values.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const empty: () => FiberRefs = internal.empty\n", "import * as Arr from \"../Array.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Equal from \"../Equal.js\"\nimport type * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport type * as FiberRefs from \"../FiberRefs.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nexport function unsafeMake(\n  fiberRefLocals: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>\n): FiberRefs.FiberRefs {\n  return new FiberRefsImpl(fiberRefLocals)\n}\n\n/** @internal */\nexport function empty(): FiberRefs.FiberRefs {\n  return unsafeMake(new Map())\n}\n\n/** @internal */\nexport const FiberRefsSym: FiberRefs.FiberRefsSym = Symbol.for(\"effect/FiberRefs\") as FiberRefs.FiberRefsSym\n\n/** @internal */\nexport class FiberRefsImpl implements FiberRefs.FiberRefs {\n  readonly [FiberRefsSym]: FiberRefs.FiberRefsSym = FiberRefsSym\n  constructor(\n    readonly locals: Map<\n      FiberRef.FiberRef<any>,\n      Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>\n    >\n  ) {}\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nconst findAncestor = (\n  _ref: FiberRef.FiberRef<any>,\n  _parentStack: ReadonlyArray<readonly [FiberId.Single, unknown]>,\n  _childStack: ReadonlyArray<readonly [FiberId.Single, unknown]>,\n  _childModified = false\n): readonly [unknown, boolean] => {\n  const ref = _ref\n  let parentStack = _parentStack\n  let childStack = _childStack\n  let childModified = _childModified\n  let ret: readonly [unknown, boolean] | undefined = undefined\n  while (ret === undefined) {\n    if (Arr.isNonEmptyReadonlyArray(parentStack) && Arr.isNonEmptyReadonlyArray(childStack)) {\n      const parentFiberId = Arr.headNonEmpty(parentStack)[0]\n      const parentAncestors = Arr.tailNonEmpty(parentStack)\n      const childFiberId = Arr.headNonEmpty(childStack)[0]\n      const childRefValue = Arr.headNonEmpty(childStack)[1]\n      const childAncestors = Arr.tailNonEmpty(childStack)\n      if (parentFiberId.startTimeMillis < childFiberId.startTimeMillis) {\n        childStack = childAncestors\n        childModified = true\n      } else if (parentFiberId.startTimeMillis > childFiberId.startTimeMillis) {\n        parentStack = parentAncestors\n      } else {\n        if (parentFiberId.id < childFiberId.id) {\n          childStack = childAncestors\n          childModified = true\n        } else if (parentFiberId.id > childFiberId.id) {\n          parentStack = parentAncestors\n        } else {\n          ret = [childRefValue, childModified] as const\n        }\n      }\n    } else {\n      ret = [ref.initial, true] as const\n    }\n  }\n  return ret\n}\n\n/** @internal */\nexport const joinAs = dual<\n  (fiberId: FiberId.Single, that: FiberRefs.FiberRefs) => (self: FiberRefs.FiberRefs) => FiberRefs.FiberRefs,\n  (self: FiberRefs.FiberRefs, fiberId: FiberId.Single, that: FiberRefs.FiberRefs) => FiberRefs.FiberRefs\n>(3, (self, fiberId, that) => {\n  const parentFiberRefs = new Map(self.locals)\n  that.locals.forEach((childStack, fiberRef) => {\n    const childValue = childStack[0][1]\n    if (!childStack[0][0][Equal.symbol](fiberId)) {\n      if (!parentFiberRefs.has(fiberRef)) {\n        if (Equal.equals(childValue, fiberRef.initial)) {\n          return\n        }\n        parentFiberRefs.set(\n          fiberRef,\n          [[fiberId, fiberRef.join(fiberRef.initial, childValue)]]\n        )\n        return\n      }\n      const parentStack = parentFiberRefs.get(fiberRef)!\n      const [ancestor, wasModified] = findAncestor(\n        fiberRef,\n        parentStack,\n        childStack\n      )\n      if (wasModified) {\n        const patch = fiberRef.diff(ancestor, childValue)\n        const oldValue = parentStack[0][1]\n        const newValue = fiberRef.join(oldValue, fiberRef.patch(patch)(oldValue))\n        if (!Equal.equals(oldValue, newValue)) {\n          let newStack: Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, unknown]>\n          const parentFiberId = parentStack[0][0]\n          if (parentFiberId[Equal.symbol](fiberId)) {\n            newStack = [[parentFiberId, newValue] as const, ...parentStack.slice(1)]\n          } else {\n            newStack = [[fiberId, newValue] as const, ...parentStack]\n          }\n          parentFiberRefs.set(fiberRef, newStack)\n        }\n      }\n    }\n  })\n  return new FiberRefsImpl(parentFiberRefs)\n})\n\n/** @internal */\nexport const forkAs = dual<\n  (childId: FiberId.Single) => (self: FiberRefs.FiberRefs) => FiberRefs.FiberRefs,\n  (self: FiberRefs.FiberRefs, childId: FiberId.Single) => FiberRefs.FiberRefs\n>(2, (self, childId) => {\n  const map = new Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, unknown]>>()\n  unsafeForkAs(self, map, childId)\n  return new FiberRefsImpl(map)\n})\n\nconst unsafeForkAs = (\n  self: FiberRefs.FiberRefs,\n  map: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>,\n  fiberId: FiberId.Single\n) => {\n  self.locals.forEach((stack, fiberRef) => {\n    const oldValue = stack[0][1]\n    const newValue = fiberRef.patch(fiberRef.fork)(oldValue)\n    if (Equal.equals(oldValue, newValue)) {\n      map.set(fiberRef, stack)\n    } else {\n      map.set(fiberRef, [[fiberId, newValue] as const, ...stack])\n    }\n  })\n}\n\n/** @internal */\nexport const fiberRefs = (self: FiberRefs.FiberRefs) => HashSet.fromIterable(self.locals.keys())\n\n/** @internal */\nexport const setAll = (self: FiberRefs.FiberRefs): Effect.Effect<void> =>\n  core.forEachSequentialDiscard(\n    fiberRefs(self),\n    (fiberRef) => core.fiberRefSet(fiberRef, getOrDefault(self, fiberRef))\n  )\n\n/** @internal */\nexport const delete_ = dual<\n  <A>(fiberRef: FiberRef.FiberRef<A>) => (self: FiberRefs.FiberRefs) => FiberRefs.FiberRefs,\n  <A>(self: FiberRefs.FiberRefs, fiberRef: FiberRef.FiberRef<A>) => FiberRefs.FiberRefs\n>(2, (self, fiberRef) => {\n  const locals = new Map(self.locals)\n  locals.delete(fiberRef)\n  return new FiberRefsImpl(locals)\n})\n\n/** @internal */\nexport const get = dual<\n  <A>(fiberRef: FiberRef.FiberRef<A>) => (self: FiberRefs.FiberRefs) => Option.Option<A>,\n  <A>(self: FiberRefs.FiberRefs, fiberRef: FiberRef.FiberRef<A>) => Option.Option<A>\n>(2, (self, fiberRef) => {\n  if (!self.locals.has(fiberRef)) {\n    return Option.none()\n  }\n  return Option.some(Arr.headNonEmpty(self.locals.get(fiberRef)!)[1])\n})\n\n/** @internal */\nexport const getOrDefault = dual<\n  <A>(fiberRef: FiberRef.FiberRef<A>) => (self: FiberRefs.FiberRefs) => A,\n  <A>(self: FiberRefs.FiberRefs, fiberRef: FiberRef.FiberRef<A>) => A\n>(2, (self, fiberRef) => pipe(get(self, fiberRef), Option.getOrElse(() => fiberRef.initial)))\n\n/** @internal */\nexport const updateAs = dual<\n  <A>(\n    options: {\n      readonly fiberId: FiberId.Single\n      readonly fiberRef: FiberRef.FiberRef<A>\n      readonly value: A\n    }\n  ) => (self: FiberRefs.FiberRefs) => FiberRefs.FiberRefs,\n  <A>(\n    self: FiberRefs.FiberRefs,\n    options: {\n      readonly fiberId: FiberId.Single\n      readonly fiberRef: FiberRef.FiberRef<A>\n      readonly value: A\n    }\n  ) => FiberRefs.FiberRefs\n>(2, <A>(self: FiberRefs.FiberRefs, { fiberId, fiberRef, value }: {\n  readonly fiberId: FiberId.Single\n  readonly fiberRef: FiberRef.FiberRef<A>\n  readonly value: A\n}) => {\n  if (self.locals.size === 0) {\n    return new FiberRefsImpl(new Map([[fiberRef, [[fiberId, value] as const]]]))\n  }\n  const locals = new Map(self.locals)\n  unsafeUpdateAs(locals, fiberId, fiberRef, value)\n  return new FiberRefsImpl(locals)\n})\n\nconst unsafeUpdateAs = (\n  locals: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>,\n  fiberId: FiberId.Single,\n  fiberRef: FiberRef.FiberRef<any>,\n  value: any\n) => {\n  const oldStack: ReadonlyArray<readonly [FiberId.Single, any]> = locals.get(fiberRef) ?? []\n  let newStack: Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]> | undefined\n\n  if (Arr.isNonEmptyReadonlyArray(oldStack)) {\n    const [currentId, currentValue] = Arr.headNonEmpty(oldStack)\n    if (currentId[Equal.symbol](fiberId)) {\n      if (Equal.equals(currentValue, value)) {\n        return\n      } else {\n        newStack = [\n          [fiberId, value] as const,\n          ...oldStack.slice(1)\n        ]\n      }\n    } else {\n      newStack = [\n        [fiberId, value] as const,\n        ...oldStack\n      ]\n    }\n  } else {\n    newStack = [[fiberId, value] as const]\n  }\n\n  locals.set(fiberRef, newStack)\n}\n\n/** @internal */\nexport const updateManyAs = dual<\n  (\n    options: {\n      readonly forkAs?: FiberId.Single | undefined\n      readonly entries: Arr.NonEmptyReadonlyArray<\n        readonly [FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>]\n      >\n    }\n  ) => (self: FiberRefs.FiberRefs) => FiberRefs.FiberRefs,\n  (\n    self: FiberRefs.FiberRefs,\n    options: {\n      readonly forkAs?: FiberId.Single | undefined\n      readonly entries: Arr.NonEmptyReadonlyArray<\n        readonly [FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>]\n      >\n    }\n  ) => FiberRefs.FiberRefs\n>(2, (self: FiberRefs.FiberRefs, { entries, forkAs }: {\n  readonly forkAs?: FiberId.Single | undefined\n  readonly entries: Arr.NonEmptyReadonlyArray<\n    readonly [FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>]\n  >\n}) => {\n  if (self.locals.size === 0) {\n    return new FiberRefsImpl(new Map(entries))\n  }\n\n  const locals = new Map(self.locals)\n  if (forkAs !== undefined) {\n    unsafeForkAs(self, locals, forkAs)\n  }\n  entries.forEach(([fiberRef, values]) => {\n    if (values.length === 1) {\n      unsafeUpdateAs(locals, values[0][0], fiberRef, values[0][1])\n    } else {\n      values.forEach(([fiberId, value]) => {\n        unsafeUpdateAs(locals, fiberId, fiberRef, value)\n      })\n    }\n  })\n  return new FiberRefsImpl(locals)\n})\n", "/**\n * @since 2.0.0\n */\nimport type * as Effect from \"./Effect.js\"\nimport { dual, pipe } from \"./Function.js\"\nimport * as core from \"./internal/core.js\"\nimport * as number from \"./Number.js\"\nimport * as order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\n\n/**\n * A `LogLevel` represents the log level associated with an individual logging\n * operation. Log levels are used both to describe the granularity (or\n * importance) of individual log statements, as well as to enable tuning\n * verbosity of log output.\n *\n * @since 2.0.0\n * @category model\n * @property ordinal - The priority of the log message. Larger values indicate higher priority.\n * @property label - A label associated with the log level.\n * @property syslog -The syslog severity level of the log level.\n */\nexport type LogLevel = All | Fatal | Error | Warning | Info | Debug | Trace | None\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport type Literal = LogLevel[\"_tag\"]\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface All extends Pipeable {\n  readonly _tag: \"All\"\n  readonly label: \"ALL\"\n  readonly syslog: 0\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Fatal extends Pipeable {\n  readonly _tag: \"Fatal\"\n  readonly label: \"FATAL\"\n  readonly syslog: 2\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Error extends Pipeable {\n  readonly _tag: \"Error\"\n  readonly label: \"ERROR\"\n  readonly syslog: 3\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Warning extends Pipeable {\n  readonly _tag: \"Warning\"\n  readonly label: \"WARN\"\n  readonly syslog: 4\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Info extends Pipeable {\n  readonly _tag: \"Info\"\n  readonly label: \"INFO\"\n  readonly syslog: 6\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Debug extends Pipeable {\n  readonly _tag: \"Debug\"\n  readonly label: \"DEBUG\"\n  readonly syslog: 7\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Trace extends Pipeable {\n  readonly _tag: \"Trace\"\n  readonly label: \"TRACE\"\n  readonly syslog: 7\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface None extends Pipeable {\n  readonly _tag: \"None\"\n  readonly label: \"OFF\"\n  readonly syslog: 7\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const All: LogLevel = core.logLevelAll\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Fatal: LogLevel = core.logLevelFatal\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Error: LogLevel = core.logLevelError\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Warning: LogLevel = core.logLevelWarning\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Info: LogLevel = core.logLevelInfo\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Debug: LogLevel = core.logLevelDebug\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Trace: LogLevel = core.logLevelTrace\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const None: LogLevel = core.logLevelNone\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const allLevels = core.allLogLevels\n\n/**\n * Temporarily sets a `LogLevel` for an `Effect` workflow.\n *\n * **Details**\n *\n * This function allows you to apply a specific `LogLevel` locally to an\n * `Effect` workflow. Once the workflow completes, the `LogLevel` reverts to its\n * previous state.\n *\n * **When to Use**\n *\n * This is particularly useful when you want to adjust the verbosity of logging\n * for specific parts of your program without affecting the global log level.\n *\n * @example\n * ```ts\n * import { Effect, LogLevel } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.log(\"message1\")\n *   yield* Effect.gen(function*() {\n *     yield* Effect.log(\"message2\")\n *     yield* Effect.log(\"message3\")\n *   }).pipe(LogLevel.locally(LogLevel.Warning))\n * })\n *\n * Effect.runFork(program)\n * // timestamp=... level=INFO fiber=#0 message=message1\n * // timestamp=... level=WARN fiber=#0 message=message2\n * // timestamp=... level=WARN fiber=#0 message=message3\n * ```\n *\n * @since 2.0.0\n * @category utils\n */\nexport const locally: {\n  /**\n   * Temporarily sets a `LogLevel` for an `Effect` workflow.\n   *\n   * **Details**\n   *\n   * This function allows you to apply a specific `LogLevel` locally to an\n   * `Effect` workflow. Once the workflow completes, the `LogLevel` reverts to its\n   * previous state.\n   *\n   * **When to Use**\n   *\n   * This is particularly useful when you want to adjust the verbosity of logging\n   * for specific parts of your program without affecting the global log level.\n   *\n   * @example\n   * ```ts\n   * import { Effect, LogLevel } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"message1\")\n   *   yield* Effect.gen(function*() {\n   *     yield* Effect.log(\"message2\")\n   *     yield* Effect.log(\"message3\")\n   *   }).pipe(LogLevel.locally(LogLevel.Warning))\n   * })\n   *\n   * Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=message1\n   * // timestamp=... level=WARN fiber=#0 message=message2\n   * // timestamp=... level=WARN fiber=#0 message=message3\n   * ```\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: LogLevel): <A, E, R>(use: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  /**\n   * Temporarily sets a `LogLevel` for an `Effect` workflow.\n   *\n   * **Details**\n   *\n   * This function allows you to apply a specific `LogLevel` locally to an\n   * `Effect` workflow. Once the workflow completes, the `LogLevel` reverts to its\n   * previous state.\n   *\n   * **When to Use**\n   *\n   * This is particularly useful when you want to adjust the verbosity of logging\n   * for specific parts of your program without affecting the global log level.\n   *\n   * @example\n   * ```ts\n   * import { Effect, LogLevel } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"message1\")\n   *   yield* Effect.gen(function*() {\n   *     yield* Effect.log(\"message2\")\n   *     yield* Effect.log(\"message3\")\n   *   }).pipe(LogLevel.locally(LogLevel.Warning))\n   * })\n   *\n   * Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=message1\n   * // timestamp=... level=WARN fiber=#0 message=message2\n   * // timestamp=... level=WARN fiber=#0 message=message3\n   * ```\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(use: Effect.Effect<A, E, R>, self: LogLevel): Effect.Effect<A, E, R>\n} = dual(\n  2,\n  <A, E, R>(use: Effect.Effect<A, E, R>, self: LogLevel): Effect.Effect<A, E, R> =>\n    core.fiberRefLocally(use, core.currentLogLevel, self)\n)\n\n/**\n * @since 2.0.0\n * @category instances\n */\nexport const Order: order.Order<LogLevel> = pipe(\n  number.Order,\n  order.mapInput((level: LogLevel) => level.ordinal)\n)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const lessThan: {\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (that: LogLevel): (self: LogLevel) => boolean\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (self: LogLevel, that: LogLevel): boolean\n} = order.lessThan(Order)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const lessThanEqual: {\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (that: LogLevel): (self: LogLevel) => boolean\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (self: LogLevel, that: LogLevel): boolean\n} = order.lessThanOrEqualTo(Order)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const greaterThan: {\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (that: LogLevel): (self: LogLevel) => boolean\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (self: LogLevel, that: LogLevel): boolean\n} = order.greaterThan(Order)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const greaterThanEqual: {\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (that: LogLevel): (self: LogLevel) => boolean\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (self: LogLevel, that: LogLevel): boolean\n} = order.greaterThanOrEqualTo(Order)\n\n/**\n * @since 2.0.0\n * @category conversions\n */\nexport const fromLiteral = (literal: Literal): LogLevel => {\n  switch (literal) {\n    case \"All\":\n      return All\n    case \"Debug\":\n      return Debug\n    case \"Error\":\n      return Error\n    case \"Fatal\":\n      return Fatal\n    case \"Info\":\n      return Info\n    case \"Trace\":\n      return Trace\n    case \"None\":\n      return None\n    case \"Warning\":\n      return Warning\n  }\n}\n", "import type * as LogSpan from \"../LogSpan.js\"\n\n/** @internal */\nexport const make = (label: string, startTime: number): LogSpan.LogSpan => ({\n  label,\n  startTime\n})\n\n/**\n * Sanitize a given string by replacing spaces, equal signs, and double quotes with underscores.\n *\n * @internal\n */\nexport const formatLabel = (key: string) => key.replace(/[\\s=\"]/g, \"_\")\n\n/** @internal */\nexport const render = (now: number) => (self: LogSpan.LogSpan): string => {\n  const label = formatLabel(self.label)\n  return `${label}=${now - self.startTime}ms`\n}\n", "/**\n * @since 2.0.0\n */\nimport type * as Channel from \"./Channel.js\"\nimport type * as Effect from \"./Effect.js\"\nimport * as internal from \"./internal/effectable.js\"\nimport type * as Sink from \"./Sink.js\"\nimport type * as Stream from \"./Stream.js\"\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const EffectTypeId: Effect.EffectTypeId = internal.EffectTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type EffectTypeId = Effect.EffectTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const StreamTypeId: Stream.StreamTypeId = internal.StreamTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type StreamTypeId = Stream.StreamTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const SinkTypeId: Sink.SinkTypeId = internal.SinkTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type SinkTypeId = Sink.SinkTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const ChannelTypeId: Channel.ChannelTypeId = internal.ChannelTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type ChannelTypeId = Channel.ChannelTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface CommitPrimitive {\n  new<A, E = never, R = never>(): Effect.Effect<A, E, R>\n}\n\n/**\n * @since 2.0.0\n * @category prototypes\n */\nexport const EffectPrototype: Effect.Effect<never> = internal.EffectPrototype\n\n/**\n * @since 2.0.0\n * @category prototypes\n */\nexport const CommitPrototype: Effect.Effect<never> = internal.CommitPrototype\n\n/**\n * @since 2.0.0\n * @category prototypes\n */\nexport const StructuralCommitPrototype: Effect.Effect<never> = internal.StructuralCommitPrototype\n\nconst Base: CommitPrimitive = internal.Base\nconst StructuralBase: CommitPrimitive = internal.StructuralBase\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport abstract class Class<A, E = never, R = never> extends Base<A, E, R> {\n  /**\n   * @since 2.0.0\n   */\n  abstract commit(): Effect.Effect<A, E, R>\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport abstract class StructuralClass<A, E = never, R = never> extends StructuralBase<A, E, R> {\n  /**\n   * @since 2.0.0\n   */\n  abstract commit(): Effect.Effect<A, E, R>\n}\n", "import * as Arr from \"../../Array.js\"\nimport { equals } from \"../../Equal.js\"\nimport type * as FiberId from \"../../FiberId.js\"\nimport type * as FiberRefs from \"../../FiberRefs.js\"\nimport type * as FiberRefsPatch from \"../../FiberRefsPatch.js\"\nimport { dual } from \"../../Function.js\"\nimport * as fiberRefs_ from \"../fiberRefs.js\"\n\n/** @internal */\nexport const OP_EMPTY = \"Empty\" as const\n\n/** @internal */\nexport type OP_EMPTY = typeof OP_EMPTY\n\n/** @internal */\nexport const OP_ADD = \"Add\" as const\n\n/** @internal */\nexport type OP_ADD = typeof OP_ADD\n\n/** @internal */\nexport const OP_REMOVE = \"Remove\" as const\n\n/** @internal */\nexport type OP_REMOVE = typeof OP_REMOVE\n\n/** @internal */\nexport const OP_UPDATE = \"Update\" as const\n\n/** @internal */\nexport type OP_UPDATE = typeof OP_UPDATE\n\n/** @internal */\nexport const OP_AND_THEN = \"AndThen\" as const\n\n/** @internal */\nexport type OP_AND_THEN = typeof OP_AND_THEN\n\n/** @internal */\nexport const empty: FiberRefsPatch.FiberRefsPatch = ({\n  _tag: OP_EMPTY\n}) as FiberRefsPatch.FiberRefsPatch\n\n/** @internal */\nexport const diff = (\n  oldValue: FiberRefs.FiberRefs,\n  newValue: FiberRefs.FiberRefs\n): FiberRefsPatch.FiberRefsPatch => {\n  const missingLocals = new Map(oldValue.locals)\n  let patch = empty\n  for (const [fiberRef, pairs] of newValue.locals.entries()) {\n    const newValue = Arr.headNonEmpty(pairs)[1]\n    const old = missingLocals.get(fiberRef)\n    if (old !== undefined) {\n      const oldValue = Arr.headNonEmpty(old)[1]\n      if (!equals(oldValue, newValue)) {\n        patch = combine({\n          _tag: OP_UPDATE,\n          fiberRef,\n          patch: fiberRef.diff(oldValue, newValue)\n        })(patch)\n      }\n    } else {\n      patch = combine({\n        _tag: OP_ADD,\n        fiberRef,\n        value: newValue\n      })(patch)\n    }\n    missingLocals.delete(fiberRef)\n  }\n  for (const [fiberRef] of missingLocals.entries()) {\n    patch = combine({\n      _tag: OP_REMOVE,\n      fiberRef\n    })(patch)\n  }\n  return patch\n}\n\n/** @internal */\nexport const combine = dual<\n  (that: FiberRefsPatch.FiberRefsPatch) => (self: FiberRefsPatch.FiberRefsPatch) => FiberRefsPatch.FiberRefsPatch,\n  (self: FiberRefsPatch.FiberRefsPatch, that: FiberRefsPatch.FiberRefsPatch) => FiberRefsPatch.FiberRefsPatch\n>(2, (self, that) => ({\n  _tag: OP_AND_THEN,\n  first: self,\n  second: that\n}))\n\n/** @internal */\nexport const patch = dual<\n  (\n    fiberId: FiberId.Runtime,\n    oldValue: FiberRefs.FiberRefs\n  ) => (self: FiberRefsPatch.FiberRefsPatch) => FiberRefs.FiberRefs,\n  (\n    self: FiberRefsPatch.FiberRefsPatch,\n    fiberId: FiberId.Runtime,\n    oldValue: FiberRefs.FiberRefs\n  ) => FiberRefs.FiberRefs\n>(3, (self, fiberId, oldValue) => {\n  let fiberRefs: FiberRefs.FiberRefs = oldValue\n  let patches: ReadonlyArray<FiberRefsPatch.FiberRefsPatch> = Arr.of(self)\n  while (Arr.isNonEmptyReadonlyArray(patches)) {\n    const head = Arr.headNonEmpty(patches)\n    const tail = Arr.tailNonEmpty(patches)\n    switch (head._tag) {\n      case OP_EMPTY: {\n        patches = tail\n        break\n      }\n      case OP_ADD: {\n        fiberRefs = fiberRefs_.updateAs(fiberRefs, {\n          fiberId,\n          fiberRef: head.fiberRef,\n          value: head.value\n        })\n        patches = tail\n        break\n      }\n      case OP_REMOVE: {\n        fiberRefs = fiberRefs_.delete_(fiberRefs, head.fiberRef)\n        patches = tail\n        break\n      }\n      case OP_UPDATE: {\n        const value = fiberRefs_.getOrDefault(fiberRefs, head.fiberRef)\n        fiberRefs = fiberRefs_.updateAs(fiberRefs, {\n          fiberId,\n          fiberRef: head.fiberRef,\n          value: head.fiberRef.patch(head.patch)(value)\n        })\n        patches = tail\n        break\n      }\n      case OP_AND_THEN: {\n        patches = Arr.prepend(head.first)(Arr.prepend(head.second)(tail))\n        break\n      }\n    }\n  }\n  return fiberRefs\n})\n", "import * as Equal from \"../../Equal.js\"\nimport * as Hash from \"../../Hash.js\"\nimport type * as MetricLabel from \"../../MetricLabel.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport { hasProperty } from \"../../Predicate.js\"\n\n/** @internal */\nconst MetricLabelSymbolKey = \"effect/MetricLabel\"\n\n/** @internal */\nexport const MetricLabelTypeId: MetricLabel.MetricLabelTypeId = Symbol.for(\n  MetricLabelSymbolKey\n) as MetricLabel.MetricLabelTypeId\n\n/** @internal */\nclass MetricLabelImpl implements MetricLabel.MetricLabel {\n  readonly [MetricLabelTypeId]: MetricLabel.MetricLabelTypeId = MetricLabelTypeId\n  readonly _hash: number\n  constructor(readonly key: string, readonly value: string) {\n    this._hash = Hash.string(MetricLabelSymbolKey + this.key + this.value)\n  }\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isMetricLabel(that) &&\n      this.key === that.key &&\n      this.value === that.value\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const make = (key: string, value: string): MetricLabel.MetricLabel => {\n  return new MetricLabelImpl(key, value)\n}\n\n/** @internal */\nexport const isMetricLabel = (u: unknown): u is MetricLabel.MetricLabel => hasProperty(u, MetricLabelTypeId)\n", "import * as RA from \"../Array.js\"\nimport * as Boolean from \"../Boolean.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport type * as Clock from \"../Clock.js\"\nimport type { ConfigProvider } from \"../ConfigProvider.js\"\nimport * as Context from \"../Context.js\"\nimport type { DefaultServices } from \"../DefaultServices.js\"\nimport type * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Effectable from \"../Effectable.js\"\nimport type * as Either from \"../Either.js\"\nimport * as ExecutionStrategy from \"../ExecutionStrategy.js\"\nimport type * as Exit from \"../Exit.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport * as FiberRefs from \"../FiberRefs.js\"\nimport * as FiberRefsPatch from \"../FiberRefsPatch.js\"\nimport * as FiberStatus from \"../FiberStatus.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { dual, identity, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as Inspectable from \"../Inspectable.js\"\nimport type { Logger } from \"../Logger.js\"\nimport * as LogLevel from \"../LogLevel.js\"\nimport type * as MetricLabel from \"../MetricLabel.js\"\nimport * as Micro from \"../Micro.js\"\nimport * as MRef from \"../MutableRef.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Predicate from \"../Predicate.js\"\nimport type * as Random from \"../Random.js\"\nimport * as Ref from \"../Ref.js\"\nimport type { Entry, Request } from \"../Request.js\"\nimport type * as RequestBlock from \"../RequestBlock.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport * as RuntimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\nimport { currentScheduler, type Scheduler } from \"../Scheduler.js\"\nimport type * as Scope from \"../Scope.js\"\nimport type * as Supervisor from \"../Supervisor.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport type { Concurrency, NoExcessProperties, NoInfer } from \"../Types.js\"\nimport { internalCall, yieldWrapGet } from \"../Utils.js\"\nimport * as RequestBlock_ from \"./blockedRequests.js\"\nimport * as internalCause from \"./cause.js\"\nimport * as clock from \"./clock.js\"\nimport { currentRequestMap } from \"./completedRequestMap.js\"\nimport * as concurrency from \"./concurrency.js\"\nimport { configProviderTag } from \"./configProvider.js\"\nimport * as internalEffect from \"./core-effect.js\"\nimport * as core from \"./core.js\"\nimport * as defaultServices from \"./defaultServices.js\"\nimport { consoleTag } from \"./defaultServices/console.js\"\nimport * as executionStrategy from \"./executionStrategy.js\"\nimport * as internalFiber from \"./fiber.js\"\nimport * as FiberMessage from \"./fiberMessage.js\"\nimport * as fiberRefs from \"./fiberRefs.js\"\nimport * as fiberScope from \"./fiberScope.js\"\nimport * as internalLogger from \"./logger.js\"\nimport * as metric from \"./metric.js\"\nimport * as metricBoundaries from \"./metric/boundaries.js\"\nimport * as metricLabel from \"./metric/label.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport { randomTag } from \"./random.js\"\nimport { complete } from \"./request.js\"\nimport * as runtimeFlags_ from \"./runtimeFlags.js\"\nimport { OpSupervision } from \"./runtimeFlags.js\"\nimport * as supervisor from \"./supervisor.js\"\nimport * as SupervisorPatch from \"./supervisor/patch.js\"\nimport * as tracer from \"./tracer.js\"\nimport * as version from \"./version.js\"\n\n/** @internal */\nexport const fiberStarted = metric.counter(\"effect_fiber_started\", { incremental: true })\n/** @internal */\nexport const fiberActive = metric.counter(\"effect_fiber_active\")\n/** @internal */\nexport const fiberSuccesses = metric.counter(\"effect_fiber_successes\", { incremental: true })\n/** @internal */\nexport const fiberFailures = metric.counter(\"effect_fiber_failures\", { incremental: true })\n/** @internal */\nexport const fiberLifetimes = metric.tagged(\n  metric.histogram(\n    \"effect_fiber_lifetimes\",\n    metricBoundaries.exponential({\n      start: 0.5,\n      factor: 2,\n      count: 35\n    })\n  ),\n  \"time_unit\",\n  \"milliseconds\"\n)\n\n/** @internal */\ntype EvaluationSignal =\n  | EvaluationSignalContinue\n  | EvaluationSignalDone\n  | EvaluationSignalYieldNow\n\n/** @internal */\nconst EvaluationSignalContinue = \"Continue\" as const\n\n/** @internal */\ntype EvaluationSignalContinue = typeof EvaluationSignalContinue\n\n/** @internal */\nconst EvaluationSignalDone = \"Done\" as const\n\n/** @internal */\ntype EvaluationSignalDone = typeof EvaluationSignalDone\n\n/** @internal */\nconst EvaluationSignalYieldNow = \"Yield\" as const\n\n/** @internal */\ntype EvaluationSignalYieldNow = typeof EvaluationSignalYieldNow\n\nconst runtimeFiberVariance = {\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _\n}\n\nconst absurd = (_: never): never => {\n  throw new Error(\n    `BUG: FiberRuntime - ${\n      Inspectable.toStringUnknown(_)\n    } - please report an issue at https://github.com/Effect-TS/effect/issues`\n  )\n}\n\nconst YieldedOp = Symbol.for(\"effect/internal/fiberRuntime/YieldedOp\")\ntype YieldedOp = typeof YieldedOp\nconst yieldedOpChannel: {\n  currentOp: core.Primitive | null\n} = globalValue(\"effect/internal/fiberRuntime/yieldedOpChannel\", () => ({\n  currentOp: null\n}))\n\nconst contOpSuccess = {\n  [OpCodes.OP_ON_SUCCESS]: (\n    _: FiberRuntime<any, any>,\n    cont: core.OnSuccess,\n    value: unknown\n  ) => {\n    return internalCall(() => cont.effect_instruction_i1(value))\n  },\n  [\"OnStep\"]: (\n    _: FiberRuntime<any, any>,\n    _cont: core.OnStep,\n    value: unknown\n  ) => {\n    return core.exitSucceed(core.exitSucceed(value))\n  },\n  [OpCodes.OP_ON_SUCCESS_AND_FAILURE]: (\n    _: FiberRuntime<any, any>,\n    cont: core.OnSuccessAndFailure,\n    value: unknown\n  ) => {\n    return internalCall(() => cont.effect_instruction_i2(value))\n  },\n  [OpCodes.OP_REVERT_FLAGS]: (\n    self: FiberRuntime<any, any>,\n    cont: core.RevertFlags,\n    value: unknown\n  ) => {\n    self.patchRuntimeFlags(self.currentRuntimeFlags, cont.patch)\n    if (runtimeFlags_.interruptible(self.currentRuntimeFlags) && self.isInterrupted()) {\n      return core.exitFailCause(self.getInterruptedCause())\n    } else {\n      return core.exitSucceed(value)\n    }\n  },\n  [OpCodes.OP_WHILE]: (\n    self: FiberRuntime<any, any>,\n    cont: core.While,\n    value: unknown\n  ) => {\n    internalCall(() => cont.effect_instruction_i2(value))\n    if (internalCall(() => cont.effect_instruction_i0())) {\n      self.pushStack(cont)\n      return internalCall(() => cont.effect_instruction_i1())\n    } else {\n      return core.void\n    }\n  },\n  [OpCodes.OP_ITERATOR]: (\n    self: FiberRuntime<any, any>,\n    cont: core.FromIterator,\n    value: unknown\n  ) => {\n    const state = internalCall(() => cont.effect_instruction_i0.next(value))\n    if (state.done) return core.exitSucceed(state.value)\n    self.pushStack(cont)\n    return yieldWrapGet(state.value)\n  }\n}\n\nconst drainQueueWhileRunningTable = {\n  [FiberMessage.OP_INTERRUPT_SIGNAL]: (\n    self: FiberRuntime<any, any>,\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur: Effect.Effect<any, any, any>,\n    message: FiberMessage.FiberMessage & { _tag: FiberMessage.OP_INTERRUPT_SIGNAL }\n  ) => {\n    self.processNewInterruptSignal(message.cause)\n    return runtimeFlags_.interruptible(runtimeFlags) ? core.exitFailCause(message.cause) : cur\n  },\n  [FiberMessage.OP_RESUME]: (\n    _self: FiberRuntime<any, any>,\n    _runtimeFlags: RuntimeFlags.RuntimeFlags,\n    _cur: Effect.Effect<any, any, any>,\n    _message: FiberMessage.FiberMessage\n  ) => {\n    throw new Error(\"It is illegal to have multiple concurrent run loops in a single fiber\")\n  },\n  [FiberMessage.OP_STATEFUL]: (\n    self: FiberRuntime<any, any>,\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur: Effect.Effect<any, any, any>,\n    message: FiberMessage.FiberMessage & { _tag: FiberMessage.OP_STATEFUL }\n  ) => {\n    message.onFiber(self, FiberStatus.running(runtimeFlags))\n    return cur\n  },\n  [FiberMessage.OP_YIELD_NOW]: (\n    _self: FiberRuntime<any, any>,\n    _runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur: Effect.Effect<any, any, any>,\n    _message: FiberMessage.FiberMessage & { _tag: FiberMessage.OP_YIELD_NOW }\n  ) => {\n    return core.flatMap(core.yieldNow(), () => cur)\n  }\n}\n\n/**\n * Executes all requests, submitting requests to each data source in parallel.\n */\nconst runBlockedRequests = (self: RequestBlock.RequestBlock) =>\n  core.forEachSequentialDiscard(\n    RequestBlock_.flatten(self),\n    (requestsByRequestResolver) =>\n      forEachConcurrentDiscard(\n        RequestBlock_.sequentialCollectionToChunk(requestsByRequestResolver),\n        ([dataSource, sequential]) => {\n          const map = new Map<Request<any, any>, Entry<any>>()\n          const arr: Array<Array<Entry<any>>> = []\n          for (const block of sequential) {\n            arr.push(Chunk.toReadonlyArray(block) as any)\n            for (const entry of block) {\n              map.set(entry.request as Request<any, any>, entry)\n            }\n          }\n          const flat = arr.flat()\n          return core.fiberRefLocally(\n            invokeWithInterrupt(dataSource.runAll(arr), flat, () =>\n              flat.forEach((entry) => {\n                entry.listeners.interrupted = true\n              })),\n            currentRequestMap,\n            map\n          )\n        },\n        false,\n        false\n      )\n  )\n\n/** @internal */\nexport interface Snapshot {\n  refs: FiberRefs.FiberRefs\n  flags: RuntimeFlags.RuntimeFlags\n}\n\nconst _version = version.getCurrentVersion()\n\n/** @internal */\nexport class FiberRuntime<in out A, in out E = never> extends Effectable.Class<A, E>\n  implements Fiber.RuntimeFiber<A, E>\n{\n  readonly [internalFiber.FiberTypeId] = internalFiber.fiberVariance\n  readonly [internalFiber.RuntimeFiberTypeId] = runtimeFiberVariance\n  private _fiberRefs: FiberRefs.FiberRefs\n  private _fiberId: FiberId.Runtime\n  private _queue = new Array<FiberMessage.FiberMessage>()\n  private _children: Set<FiberRuntime<any, any>> | null = null\n  private _observers = new Array<(exit: Exit.Exit<A, E>) => void>()\n  private _running = false\n  private _stack: Array<core.Continuation> = []\n  private _asyncInterruptor: ((effect: Effect.Effect<any, any, any>) => any) | null = null\n  private _asyncBlockingOn: FiberId.FiberId | null = null\n  private _exitValue: Exit.Exit<A, E> | null = null\n  private _steps: Array<Snapshot> = []\n  private _isYielding = false\n\n  public currentRuntimeFlags: RuntimeFlags.RuntimeFlags\n  public currentOpCount: number = 0\n  public currentSupervisor!: Supervisor.Supervisor<any>\n  public currentScheduler!: Scheduler\n  public currentTracer!: Tracer.Tracer\n  public currentSpan!: Tracer.AnySpan | undefined\n  public currentContext!: Context.Context<never>\n  public currentDefaultServices!: Context.Context<DefaultServices>\n\n  constructor(\n    fiberId: FiberId.Runtime,\n    fiberRefs0: FiberRefs.FiberRefs,\n    runtimeFlags0: RuntimeFlags.RuntimeFlags\n  ) {\n    super()\n    this.currentRuntimeFlags = runtimeFlags0\n    this._fiberId = fiberId\n    this._fiberRefs = fiberRefs0\n    if (runtimeFlags_.runtimeMetrics(runtimeFlags0)) {\n      const tags = this.getFiberRef(core.currentMetricLabels)\n      fiberStarted.unsafeUpdate(1, tags)\n      fiberActive.unsafeUpdate(1, tags)\n    }\n    this.refreshRefCache()\n  }\n\n  commit(): Effect.Effect<A, E, never> {\n    return internalFiber.join(this)\n  }\n\n  /**\n   * The identity of the fiber.\n   */\n  id(): FiberId.Runtime {\n    return this._fiberId\n  }\n\n  /**\n   * Begins execution of the effect associated with this fiber on in the\n   * background. This can be called to \"kick off\" execution of a fiber after\n   * it has been created.\n   */\n  resume<A, E>(effect: Effect.Effect<A, E, any>): void {\n    this.tell(FiberMessage.resume(effect))\n  }\n\n  /**\n   * The status of the fiber.\n   */\n  get status(): Effect.Effect<FiberStatus.FiberStatus> {\n    return this.ask((_, status) => status)\n  }\n\n  /**\n   * Gets the fiber runtime flags.\n   */\n  get runtimeFlags(): Effect.Effect<RuntimeFlags.RuntimeFlags> {\n    return this.ask((state, status) => {\n      if (FiberStatus.isDone(status)) {\n        return state.currentRuntimeFlags\n      }\n      return status.runtimeFlags\n    })\n  }\n\n  /**\n   * Returns the current `FiberScope` for the fiber.\n   */\n  scope(): fiberScope.FiberScope {\n    return fiberScope.unsafeMake(this)\n  }\n\n  /**\n   * Retrieves the immediate children of the fiber.\n   */\n  get children(): Effect.Effect<Array<Fiber.RuntimeFiber<any, any>>> {\n    return this.ask((fiber) => Array.from(fiber.getChildren()))\n  }\n\n  /**\n   * Gets the fiber's set of children.\n   */\n  getChildren(): Set<FiberRuntime<any, any>> {\n    if (this._children === null) {\n      this._children = new Set()\n    }\n    return this._children\n  }\n\n  /**\n   * Retrieves the interrupted cause of the fiber, which will be `Cause.empty`\n   * if the fiber has not been interrupted.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  getInterruptedCause() {\n    return this.getFiberRef(core.currentInterruptedCause)\n  }\n\n  /**\n   * Retrieves the whole set of fiber refs.\n   */\n  fiberRefs(): Effect.Effect<FiberRefs.FiberRefs> {\n    return this.ask((fiber) => fiber.getFiberRefs())\n  }\n\n  /**\n   * Returns an effect that will contain information computed from the fiber\n   * state and status while running on the fiber.\n   *\n   * This allows the outside world to interact safely with mutable fiber state\n   * without locks or immutable data.\n   */\n  ask<Z>(\n    f: (runtime: FiberRuntime<any, any>, status: FiberStatus.FiberStatus) => Z\n  ): Effect.Effect<Z> {\n    return core.suspend(() => {\n      const deferred = core.deferredUnsafeMake<Z>(this._fiberId)\n      this.tell(\n        FiberMessage.stateful((fiber, status) => {\n          core.deferredUnsafeDone(deferred, core.sync(() => f(fiber, status)))\n        })\n      )\n      return core.deferredAwait(deferred)\n    })\n  }\n\n  /**\n   * Adds a message to be processed by the fiber on the fiber.\n   */\n  tell(message: FiberMessage.FiberMessage): void {\n    this._queue.push(message)\n    if (!this._running) {\n      this._running = true\n      this.drainQueueLaterOnExecutor()\n    }\n  }\n\n  get await(): Effect.Effect<Exit.Exit<A, E>> {\n    return core.async((resume) => {\n      const cb = (exit: Exit.Exit<A, E>) => resume(core.succeed(exit))\n      this.tell(\n        FiberMessage.stateful((fiber, _) => {\n          if (fiber._exitValue !== null) {\n            cb(this._exitValue!)\n          } else {\n            fiber.addObserver(cb)\n          }\n        })\n      )\n      return core.sync(() =>\n        this.tell(\n          FiberMessage.stateful((fiber, _) => {\n            fiber.removeObserver(cb)\n          })\n        )\n      )\n    }, this.id())\n  }\n\n  get inheritAll(): Effect.Effect<void> {\n    return core.withFiberRuntime((parentFiber, parentStatus) => {\n      const parentFiberId = parentFiber.id()\n      const parentFiberRefs = parentFiber.getFiberRefs()\n      const parentRuntimeFlags = parentStatus.runtimeFlags\n      const childFiberRefs = this.getFiberRefs()\n      const updatedFiberRefs = fiberRefs.joinAs(parentFiberRefs, parentFiberId, childFiberRefs)\n\n      parentFiber.setFiberRefs(updatedFiberRefs)\n\n      const updatedRuntimeFlags = parentFiber.getFiberRef(currentRuntimeFlags)\n\n      const patch = pipe(\n        runtimeFlags_.diff(parentRuntimeFlags, updatedRuntimeFlags),\n        // Do not inherit WindDown or Interruption!\n        RuntimeFlagsPatch.exclude(runtimeFlags_.Interruption),\n        RuntimeFlagsPatch.exclude(runtimeFlags_.WindDown)\n      )\n\n      return core.updateRuntimeFlags(patch)\n    })\n  }\n\n  /**\n   * Tentatively observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  get poll(): Effect.Effect<Option.Option<Exit.Exit<A, E>>> {\n    return core.sync(() => Option.fromNullable(this._exitValue))\n  }\n\n  /**\n   * Unsafely observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  unsafePoll(): Exit.Exit<A, E> | null {\n    return this._exitValue\n  }\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the specified fiber.\n   */\n  interruptAsFork(fiberId: FiberId.FiberId): Effect.Effect<void> {\n    return core.sync(() => this.tell(FiberMessage.interruptSignal(internalCause.interrupt(fiberId))))\n  }\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the specified fiber.\n   */\n  unsafeInterruptAsFork(fiberId: FiberId.FiberId) {\n    this.tell(FiberMessage.interruptSignal(internalCause.interrupt(fiberId)))\n  }\n\n  /**\n   * Adds an observer to the list of observers.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  addObserver(observer: (exit: Exit.Exit<A, E>) => void): void {\n    if (this._exitValue !== null) {\n      observer(this._exitValue!)\n    } else {\n      this._observers.push(observer)\n    }\n  }\n\n  /**\n   * Removes the specified observer from the list of observers that will be\n   * notified when the fiber exits.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  removeObserver(observer: (exit: Exit.Exit<A, E>) => void): void {\n    this._observers = this._observers.filter((o) => o !== observer)\n  }\n  /**\n   * Retrieves all fiber refs of the fiber.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  getFiberRefs(): FiberRefs.FiberRefs {\n    this.setFiberRef(currentRuntimeFlags, this.currentRuntimeFlags)\n    return this._fiberRefs\n  }\n\n  /**\n   * Deletes the specified fiber ref.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  unsafeDeleteFiberRef<X>(fiberRef: FiberRef.FiberRef<X>): void {\n    this._fiberRefs = fiberRefs.delete_(this._fiberRefs, fiberRef)\n  }\n\n  /**\n   * Retrieves the state of the fiber ref, or else its initial value.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  getFiberRef<X>(fiberRef: FiberRef.FiberRef<X>): X {\n    if (this._fiberRefs.locals.has(fiberRef)) {\n      return this._fiberRefs.locals.get(fiberRef)![0][1] as X\n    }\n    return fiberRef.initial\n  }\n\n  /**\n   * Sets the fiber ref to the specified value.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  setFiberRef<X>(fiberRef: FiberRef.FiberRef<X>, value: X): void {\n    this._fiberRefs = fiberRefs.updateAs(this._fiberRefs, {\n      fiberId: this._fiberId,\n      fiberRef,\n      value\n    })\n    this.refreshRefCache()\n  }\n\n  refreshRefCache() {\n    this.currentDefaultServices = this.getFiberRef(defaultServices.currentServices)\n    this.currentTracer = this.currentDefaultServices.unsafeMap.get(tracer.tracerTag.key)\n    this.currentSupervisor = this.getFiberRef(currentSupervisor)\n    this.currentScheduler = this.getFiberRef(currentScheduler)\n    this.currentContext = this.getFiberRef(core.currentContext)\n    this.currentSpan = this.currentContext.unsafeMap.get(tracer.spanTag.key)\n  }\n\n  /**\n   * Wholesale replaces all fiber refs of this fiber.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  setFiberRefs(fiberRefs: FiberRefs.FiberRefs): void {\n    this._fiberRefs = fiberRefs\n    this.refreshRefCache()\n  }\n\n  /**\n   * Adds a reference to the specified fiber inside the children set.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  addChild(child: FiberRuntime<any, any>) {\n    this.getChildren().add(child)\n  }\n\n  /**\n   * Removes a reference to the specified fiber inside the children set.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  removeChild(child: FiberRuntime<any, any>) {\n    this.getChildren().delete(child)\n  }\n\n  /**\n   * Transfers all children of this fiber that are currently running to the\n   * specified fiber scope.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself after it has\n   * evaluated the effects but prior to exiting.\n   */\n  transferChildren(scope: fiberScope.FiberScope) {\n    const children = this._children\n    // Clear the children of the current fiber\n    this._children = null\n    if (children !== null && children.size > 0) {\n      for (const child of children) {\n        // If the child is still running, add it to the scope\n        if (child._exitValue === null) {\n          scope.add(this.currentRuntimeFlags, child)\n        }\n      }\n    }\n  }\n\n  /**\n   * On the current thread, executes all messages in the fiber's inbox. This\n   * method may return before all work is done, in the event the fiber executes\n   * an asynchronous operation.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  drainQueueOnCurrentThread() {\n    let recurse = true\n    while (recurse) {\n      let evaluationSignal: EvaluationSignal = EvaluationSignalContinue\n      const prev = (globalThis as any)[internalFiber.currentFiberURI]\n      ;(globalThis as any)[internalFiber.currentFiberURI] = this\n      try {\n        while (evaluationSignal === EvaluationSignalContinue) {\n          evaluationSignal = this._queue.length === 0 ?\n            EvaluationSignalDone :\n            this.evaluateMessageWhileSuspended(this._queue.splice(0, 1)[0]!)\n        }\n      } finally {\n        this._running = false\n        ;(globalThis as any)[internalFiber.currentFiberURI] = prev\n      }\n      // Maybe someone added something to the queue between us checking, and us\n      // giving up the drain. If so, we need to restart the draining, but only\n      // if we beat everyone else to the restart:\n      if (this._queue.length > 0 && !this._running) {\n        this._running = true\n        if (evaluationSignal === EvaluationSignalYieldNow) {\n          this.drainQueueLaterOnExecutor()\n          recurse = false\n        } else {\n          recurse = true\n        }\n      } else {\n        recurse = false\n      }\n    }\n  }\n\n  /**\n   * Schedules the execution of all messages in the fiber's inbox.\n   *\n   * This method will return immediately after the scheduling\n   * operation is completed, but potentially before such messages have been\n   * executed.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  drainQueueLaterOnExecutor() {\n    this.currentScheduler.scheduleTask(\n      this.run,\n      this.getFiberRef(core.currentSchedulingPriority)\n    )\n  }\n\n  /**\n   * Drains the fiber's message queue while the fiber is actively running,\n   * returning the next effect to execute, which may be the input effect if no\n   * additional effect needs to be executed.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  drainQueueWhileRunning(\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur0: Effect.Effect<any, any, any>\n  ) {\n    let cur = cur0\n    while (this._queue.length > 0) {\n      const message = this._queue.splice(0, 1)[0]\n      // @ts-expect-error\n      cur = drainQueueWhileRunningTable[message._tag](this, runtimeFlags, cur, message)\n    }\n    return cur\n  }\n\n  /**\n   * Determines if the fiber is interrupted.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  isInterrupted(): boolean {\n    return !internalCause.isEmpty(this.getFiberRef(core.currentInterruptedCause))\n  }\n\n  /**\n   * Adds an interruptor to the set of interruptors that are interrupting this\n   * fiber.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  addInterruptedCause(cause: Cause.Cause<never>) {\n    const oldSC = this.getFiberRef(core.currentInterruptedCause)\n    this.setFiberRef(core.currentInterruptedCause, internalCause.sequential(oldSC, cause))\n  }\n\n  /**\n   * Processes a new incoming interrupt signal.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  processNewInterruptSignal(cause: Cause.Cause<never>): void {\n    this.addInterruptedCause(cause)\n    this.sendInterruptSignalToAllChildren()\n  }\n\n  /**\n   * Interrupts all children of the current fiber, returning an effect that will\n   * await the exit of the children. This method will return null if the fiber\n   * has no children.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  sendInterruptSignalToAllChildren(): boolean {\n    if (this._children === null || this._children.size === 0) {\n      return false\n    }\n    let told = false\n    for (const child of this._children) {\n      child.tell(FiberMessage.interruptSignal(internalCause.interrupt(this.id())))\n      told = true\n    }\n    return told\n  }\n\n  /**\n   * Interrupts all children of the current fiber, returning an effect that will\n   * await the exit of the children. This method will return null if the fiber\n   * has no children.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  interruptAllChildren() {\n    if (this.sendInterruptSignalToAllChildren()) {\n      const it = this._children!.values()\n      this._children = null\n      let isDone = false\n      const body = () => {\n        const next = it.next()\n        if (!next.done) {\n          return core.asVoid(next.value.await)\n        } else {\n          return core.sync(() => {\n            isDone = true\n          })\n        }\n      }\n      return core.whileLoop({\n        while: () => !isDone,\n        body,\n        step: () => {\n          //\n        }\n      })\n    }\n    return null\n  }\n\n  reportExitValue(exit: Exit.Exit<A, E>) {\n    if (runtimeFlags_.runtimeMetrics(this.currentRuntimeFlags)) {\n      const tags = this.getFiberRef(core.currentMetricLabels)\n      const startTimeMillis = this.id().startTimeMillis\n      const endTimeMillis = Date.now()\n      fiberLifetimes.unsafeUpdate(endTimeMillis - startTimeMillis, tags)\n      fiberActive.unsafeUpdate(-1, tags)\n      switch (exit._tag) {\n        case OpCodes.OP_SUCCESS: {\n          fiberSuccesses.unsafeUpdate(1, tags)\n          break\n        }\n        case OpCodes.OP_FAILURE: {\n          fiberFailures.unsafeUpdate(1, tags)\n          break\n        }\n      }\n    }\n    if (exit._tag === \"Failure\") {\n      const level = this.getFiberRef(core.currentUnhandledErrorLogLevel)\n      if (!internalCause.isInterruptedOnly(exit.cause) && level._tag === \"Some\") {\n        this.log(\"Fiber terminated with an unhandled error\", exit.cause, level)\n      }\n    }\n  }\n\n  setExitValue(exit: Exit.Exit<A, E>) {\n    this._exitValue = exit\n    this.reportExitValue(exit)\n    for (let i = this._observers.length - 1; i >= 0; i--) {\n      this._observers[i](exit)\n    }\n    this._observers = []\n  }\n\n  getLoggers() {\n    return this.getFiberRef(currentLoggers)\n  }\n\n  log(\n    message: unknown,\n    cause: Cause.Cause<any>,\n    overrideLogLevel: Option.Option<LogLevel.LogLevel>\n  ): void {\n    const logLevel = Option.isSome(overrideLogLevel) ?\n      overrideLogLevel.value :\n      this.getFiberRef(core.currentLogLevel)\n    const minimumLogLevel = this.getFiberRef(currentMinimumLogLevel)\n    if (LogLevel.greaterThan(minimumLogLevel, logLevel)) {\n      return\n    }\n    const spans = this.getFiberRef(core.currentLogSpan)\n    const annotations = this.getFiberRef(core.currentLogAnnotations)\n    const loggers = this.getLoggers()\n    const contextMap = this.getFiberRefs()\n    if (HashSet.size(loggers) > 0) {\n      const clockService = Context.get(this.getFiberRef(defaultServices.currentServices), clock.clockTag)\n      const date = new Date(clockService.unsafeCurrentTimeMillis())\n      Inspectable.withRedactableContext(contextMap, () => {\n        for (const logger of loggers) {\n          logger.log({\n            fiberId: this.id(),\n            logLevel,\n            message,\n            cause,\n            context: contextMap,\n            spans,\n            annotations,\n            date\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Evaluates a single message on the current thread, while the fiber is\n   * suspended. This method should only be called while evaluation of the\n   * fiber's effect is suspended due to an asynchronous operation.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  evaluateMessageWhileSuspended(message: FiberMessage.FiberMessage): EvaluationSignal {\n    switch (message._tag) {\n      case FiberMessage.OP_YIELD_NOW: {\n        return EvaluationSignalYieldNow\n      }\n      case FiberMessage.OP_INTERRUPT_SIGNAL: {\n        this.processNewInterruptSignal(message.cause)\n        if (this._asyncInterruptor !== null) {\n          this._asyncInterruptor(core.exitFailCause(message.cause))\n          this._asyncInterruptor = null\n        }\n        return EvaluationSignalContinue\n      }\n      case FiberMessage.OP_RESUME: {\n        this._asyncInterruptor = null\n        this._asyncBlockingOn = null\n        this.evaluateEffect(message.effect)\n        return EvaluationSignalContinue\n      }\n      case FiberMessage.OP_STATEFUL: {\n        message.onFiber(\n          this,\n          this._exitValue !== null ?\n            FiberStatus.done :\n            FiberStatus.suspended(this.currentRuntimeFlags, this._asyncBlockingOn!)\n        )\n        return EvaluationSignalContinue\n      }\n      default: {\n        return absurd(message)\n      }\n    }\n  }\n\n  /**\n   * Evaluates an effect until completion, potentially asynchronously.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  evaluateEffect(effect0: Effect.Effect<any, any, any>) {\n    this.currentSupervisor.onResume(this)\n    try {\n      let effect: Effect.Effect<any, any, any> | null =\n        runtimeFlags_.interruptible(this.currentRuntimeFlags) && this.isInterrupted() ?\n          core.exitFailCause(this.getInterruptedCause()) :\n          effect0\n      while (effect !== null) {\n        const eff: Effect.Effect<any, any, any> = effect\n        const exit = this.runLoop(eff)\n        if (exit === YieldedOp) {\n          const op = yieldedOpChannel.currentOp!\n          yieldedOpChannel.currentOp = null\n          if (op._op === OpCodes.OP_YIELD) {\n            if (runtimeFlags_.cooperativeYielding(this.currentRuntimeFlags)) {\n              this.tell(FiberMessage.yieldNow())\n              this.tell(FiberMessage.resume(core.exitVoid))\n              effect = null\n            } else {\n              effect = core.exitVoid\n            }\n          } else if (op._op === OpCodes.OP_ASYNC) {\n            // Terminate this evaluation, async resumption will continue evaluation:\n            effect = null\n          }\n        } else {\n          this.currentRuntimeFlags = pipe(this.currentRuntimeFlags, runtimeFlags_.enable(runtimeFlags_.WindDown))\n          const interruption = this.interruptAllChildren()\n          if (interruption !== null) {\n            effect = core.flatMap(interruption, () => exit)\n          } else {\n            if (this._queue.length === 0) {\n              // No more messages to process, so we will allow the fiber to end life:\n              this.setExitValue(exit)\n            } else {\n              // There are messages, possibly added by the final op executed by\n              // the fiber. To be safe, we should execute those now before we\n              // allow the fiber to end life:\n              this.tell(FiberMessage.resume(exit))\n            }\n            effect = null\n          }\n        }\n      }\n    } finally {\n      this.currentSupervisor.onSuspend(this)\n    }\n  }\n\n  /**\n   * Begins execution of the effect associated with this fiber on the current\n   * thread. This can be called to \"kick off\" execution of a fiber after it has\n   * been created, in hopes that the effect can be executed synchronously.\n   *\n   * This is not the normal way of starting a fiber, but it is useful when the\n   * express goal of executing the fiber is to synchronously produce its exit.\n   */\n  start<R>(effect: Effect.Effect<A, E, R>): void {\n    if (!this._running) {\n      this._running = true\n      const prev = (globalThis as any)[internalFiber.currentFiberURI]\n      ;(globalThis as any)[internalFiber.currentFiberURI] = this\n      try {\n        this.evaluateEffect(effect)\n      } finally {\n        this._running = false\n        ;(globalThis as any)[internalFiber.currentFiberURI] = prev\n        // Because we're special casing `start`, we have to be responsible\n        // for spinning up the fiber if there were new messages added to\n        // the queue between the completion of the effect and the transition\n        // to the not running state.\n        if (this._queue.length > 0) {\n          this.drainQueueLaterOnExecutor()\n        }\n      }\n    } else {\n      this.tell(FiberMessage.resume(effect))\n    }\n  }\n\n  /**\n   * Begins execution of the effect associated with this fiber on in the\n   * background, and on the correct thread pool. This can be called to \"kick\n   * off\" execution of a fiber after it has been created, in hopes that the\n   * effect can be executed synchronously.\n   */\n  startFork<R>(effect: Effect.Effect<A, E, R>): void {\n    this.tell(FiberMessage.resume(effect))\n  }\n\n  /**\n   * Takes the current runtime flags, patches them to return the new runtime\n   * flags, and then makes any changes necessary to fiber state based on the\n   * specified patch.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  patchRuntimeFlags(oldRuntimeFlags: RuntimeFlags.RuntimeFlags, patch: RuntimeFlagsPatch.RuntimeFlagsPatch) {\n    const newRuntimeFlags = runtimeFlags_.patch(oldRuntimeFlags, patch)\n    ;(globalThis as any)[internalFiber.currentFiberURI] = this\n    this.currentRuntimeFlags = newRuntimeFlags\n    return newRuntimeFlags\n  }\n\n  /**\n   * Initiates an asynchronous operation, by building a callback that will\n   * resume execution, and then feeding that callback to the registration\n   * function, handling error cases and repeated resumptions appropriately.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  initiateAsync(\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    asyncRegister: (resume: (effect: Effect.Effect<any, any, any>) => void) => void\n  ) {\n    let alreadyCalled = false\n    const callback = (effect: Effect.Effect<any, any, any>) => {\n      if (!alreadyCalled) {\n        alreadyCalled = true\n        this.tell(FiberMessage.resume(effect))\n      }\n    }\n    if (runtimeFlags_.interruptible(runtimeFlags)) {\n      this._asyncInterruptor = callback\n    }\n    try {\n      asyncRegister(callback)\n    } catch (e) {\n      callback(core.failCause(internalCause.die(e)))\n    }\n  }\n\n  pushStack(cont: core.Continuation) {\n    this._stack.push(cont)\n    if (cont._op === \"OnStep\") {\n      this._steps.push({ refs: this.getFiberRefs(), flags: this.currentRuntimeFlags })\n    }\n  }\n\n  popStack() {\n    const item = this._stack.pop()\n    if (item) {\n      if (item._op === \"OnStep\") {\n        this._steps.pop()\n      }\n      return item\n    }\n    return\n  }\n\n  getNextSuccessCont() {\n    let frame = this.popStack()\n    while (frame) {\n      if (frame._op !== OpCodes.OP_ON_FAILURE) {\n        return frame\n      }\n      frame = this.popStack()\n    }\n  }\n\n  getNextFailCont() {\n    let frame = this.popStack()\n    while (frame) {\n      if (frame._op !== OpCodes.OP_ON_SUCCESS && frame._op !== OpCodes.OP_WHILE && frame._op !== OpCodes.OP_ITERATOR) {\n        return frame\n      }\n      frame = this.popStack()\n    }\n  }\n\n  [OpCodes.OP_TAG](op: core.Primitive & { _op: OpCodes.OP_SYNC }) {\n    return core.sync(() => Context.unsafeGet(this.currentContext, op as unknown as Context.Tag<any, any>))\n  }\n\n  [\"Left\"](op: core.Primitive & { _op: \"Left\" }) {\n    return core.fail(op.left)\n  }\n\n  [\"None\"](_: core.Primitive & { _op: \"None\" }) {\n    return core.fail(new core.NoSuchElementException())\n  }\n\n  [\"Right\"](op: core.Primitive & { _op: \"Right\" }) {\n    return core.exitSucceed(op.right)\n  }\n\n  [\"Some\"](op: core.Primitive & { _op: \"Some\" }) {\n    return core.exitSucceed(op.value)\n  }\n\n  [\"Micro\"](op: Micro.Micro<any, any, never> & { _op: \"Micro\" }) {\n    return core.unsafeAsync<any, any>((microResume) => {\n      let resume = microResume\n      const fiber = Micro.runFork(Micro.provideContext(op, this.currentContext))\n      fiber.addObserver((exit) => {\n        if (exit._tag === \"Success\") {\n          return resume(core.exitSucceed(exit.value))\n        }\n        switch (exit.cause._tag) {\n          case \"Interrupt\": {\n            return resume(core.exitFailCause(internalCause.interrupt(FiberId.none)))\n          }\n          case \"Fail\": {\n            return resume(core.fail(exit.cause.error))\n          }\n          case \"Die\": {\n            return resume(core.die(exit.cause.defect))\n          }\n        }\n      })\n      return core.unsafeAsync<void>((abortResume) => {\n        resume = (_: any) => {\n          abortResume(core.void)\n        }\n        fiber.unsafeInterrupt()\n      })\n    })\n  }\n\n  [OpCodes.OP_SYNC](op: core.Primitive & { _op: OpCodes.OP_SYNC }) {\n    const value = internalCall(() => op.effect_instruction_i0())\n    const cont = this.getNextSuccessCont()\n    if (cont !== undefined) {\n      if (!(cont._op in contOpSuccess)) {\n        // @ts-expect-error\n        absurd(cont)\n      }\n      // @ts-expect-error\n      return contOpSuccess[cont._op](this, cont, value)\n    } else {\n      yieldedOpChannel.currentOp = core.exitSucceed(value) as any\n      return YieldedOp\n    }\n  }\n\n  [OpCodes.OP_SUCCESS](op: core.Primitive & { _op: OpCodes.OP_SUCCESS }) {\n    const oldCur = op\n    const cont = this.getNextSuccessCont()\n    if (cont !== undefined) {\n      if (!(cont._op in contOpSuccess)) {\n        // @ts-expect-error\n        absurd(cont)\n      }\n      // @ts-expect-error\n      return contOpSuccess[cont._op](this, cont, oldCur.effect_instruction_i0)\n    } else {\n      yieldedOpChannel.currentOp = oldCur\n      return YieldedOp\n    }\n  }\n\n  [OpCodes.OP_FAILURE](op: core.Primitive & { _op: OpCodes.OP_FAILURE }) {\n    const cause = op.effect_instruction_i0\n    const cont = this.getNextFailCont()\n    if (cont !== undefined) {\n      switch (cont._op) {\n        case OpCodes.OP_ON_FAILURE:\n        case OpCodes.OP_ON_SUCCESS_AND_FAILURE: {\n          if (!(runtimeFlags_.interruptible(this.currentRuntimeFlags) && this.isInterrupted())) {\n            return internalCall(() => cont.effect_instruction_i1(cause))\n          } else {\n            return core.exitFailCause(internalCause.stripFailures(cause))\n          }\n        }\n        case \"OnStep\": {\n          if (!(runtimeFlags_.interruptible(this.currentRuntimeFlags) && this.isInterrupted())) {\n            return core.exitSucceed(core.exitFailCause(cause))\n          } else {\n            return core.exitFailCause(internalCause.stripFailures(cause))\n          }\n        }\n        case OpCodes.OP_REVERT_FLAGS: {\n          this.patchRuntimeFlags(this.currentRuntimeFlags, cont.patch)\n          if (runtimeFlags_.interruptible(this.currentRuntimeFlags) && this.isInterrupted()) {\n            return core.exitFailCause(internalCause.sequential(cause, this.getInterruptedCause()))\n          } else {\n            return core.exitFailCause(cause)\n          }\n        }\n        default: {\n          absurd(cont)\n        }\n      }\n    } else {\n      yieldedOpChannel.currentOp = core.exitFailCause(cause) as any\n      return YieldedOp\n    }\n  }\n\n  [OpCodes.OP_WITH_RUNTIME](op: core.Primitive & { _op: OpCodes.OP_WITH_RUNTIME }) {\n    return internalCall(() =>\n      op.effect_instruction_i0(\n        this as FiberRuntime<unknown, unknown>,\n        FiberStatus.running(this.currentRuntimeFlags) as FiberStatus.Running\n      )\n    )\n  }\n\n  [\"Blocked\"](op: core.Primitive & { _op: \"Blocked\" }) {\n    const refs = this.getFiberRefs()\n    const flags = this.currentRuntimeFlags\n    if (this._steps.length > 0) {\n      const frames: Array<core.Continuation> = []\n      const snap = this._steps[this._steps.length - 1]\n      let frame = this.popStack()\n      while (frame && frame._op !== \"OnStep\") {\n        frames.push(frame)\n        frame = this.popStack()\n      }\n      this.setFiberRefs(snap.refs)\n      this.currentRuntimeFlags = snap.flags\n      const patchRefs = FiberRefsPatch.diff(snap.refs, refs)\n      const patchFlags = runtimeFlags_.diff(snap.flags, flags)\n      return core.exitSucceed(core.blocked(\n        op.effect_instruction_i0,\n        core.withFiberRuntime<unknown, unknown>((newFiber) => {\n          while (frames.length > 0) {\n            newFiber.pushStack(frames.pop()!)\n          }\n          newFiber.setFiberRefs(\n            FiberRefsPatch.patch(newFiber.id(), newFiber.getFiberRefs())(patchRefs)\n          )\n          newFiber.currentRuntimeFlags = runtimeFlags_.patch(patchFlags)(newFiber.currentRuntimeFlags)\n          return op.effect_instruction_i1\n        })\n      ))\n    }\n    return core.uninterruptibleMask((restore) =>\n      core.flatMap(\n        forkDaemon(core.runRequestBlock(op.effect_instruction_i0)),\n        () => restore(op.effect_instruction_i1)\n      )\n    )\n  }\n\n  [\"RunBlocked\"](op: core.Primitive & { _op: \"RunBlocked\" }) {\n    return runBlockedRequests(op.effect_instruction_i0)\n  }\n\n  [OpCodes.OP_UPDATE_RUNTIME_FLAGS](op: core.Primitive & { _op: OpCodes.OP_UPDATE_RUNTIME_FLAGS }) {\n    const updateFlags = op.effect_instruction_i0\n    const oldRuntimeFlags = this.currentRuntimeFlags\n    const newRuntimeFlags = runtimeFlags_.patch(oldRuntimeFlags, updateFlags)\n    // One more chance to short circuit: if we're immediately going\n    // to interrupt. Interruption will cause immediate reversion of\n    // the flag, so as long as we \"peek ahead\", there's no need to\n    // set them to begin with.\n    if (runtimeFlags_.interruptible(newRuntimeFlags) && this.isInterrupted()) {\n      return core.exitFailCause(this.getInterruptedCause())\n    } else {\n      // Impossible to short circuit, so record the changes\n      this.patchRuntimeFlags(this.currentRuntimeFlags, updateFlags)\n      if (op.effect_instruction_i1) {\n        // Since we updated the flags, we need to revert them\n        const revertFlags = runtimeFlags_.diff(newRuntimeFlags, oldRuntimeFlags)\n        this.pushStack(new core.RevertFlags(revertFlags, op))\n        return internalCall(() => op.effect_instruction_i1!(oldRuntimeFlags))\n      } else {\n        return core.exitVoid\n      }\n    }\n  }\n\n  [OpCodes.OP_ON_SUCCESS](op: core.Primitive & { _op: OpCodes.OP_ON_SUCCESS }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [\"OnStep\"](op: core.Primitive & { _op: \"OnStep\" }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [OpCodes.OP_ON_FAILURE](op: core.Primitive & { _op: OpCodes.OP_ON_FAILURE }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [OpCodes.OP_ON_SUCCESS_AND_FAILURE](op: core.Primitive & { _op: OpCodes.OP_ON_SUCCESS_AND_FAILURE }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [OpCodes.OP_ASYNC](op: core.Primitive & { _op: OpCodes.OP_ASYNC }) {\n    this._asyncBlockingOn = op.effect_instruction_i1\n    this.initiateAsync(this.currentRuntimeFlags, op.effect_instruction_i0)\n    yieldedOpChannel.currentOp = op\n    return YieldedOp\n  }\n\n  [OpCodes.OP_YIELD](op: core.Primitive & { op: OpCodes.OP_YIELD }) {\n    this._isYielding = false\n    yieldedOpChannel.currentOp = op\n    return YieldedOp\n  }\n\n  [OpCodes.OP_WHILE](op: core.Primitive & { _op: OpCodes.OP_WHILE }) {\n    const check = op.effect_instruction_i0\n    const body = op.effect_instruction_i1\n    if (check()) {\n      this.pushStack(op)\n      return body()\n    } else {\n      return core.exitVoid\n    }\n  }\n\n  [OpCodes.OP_ITERATOR](op: core.Primitive & { _op: OpCodes.OP_ITERATOR }) {\n    return contOpSuccess[OpCodes.OP_ITERATOR](this, op, undefined)\n  }\n\n  [OpCodes.OP_COMMIT](op: core.Primitive & { _op: OpCodes.OP_COMMIT }) {\n    return internalCall(() => op.commit())\n  }\n\n  /**\n   * The main run-loop for evaluating effects.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  runLoop(effect0: Effect.Effect<any, any, any>): Exit.Exit<any, any> | YieldedOp {\n    let cur: Effect.Effect<any, any, any> | YieldedOp = effect0\n    this.currentOpCount = 0\n\n    while (true) {\n      if ((this.currentRuntimeFlags & OpSupervision) !== 0) {\n        this.currentSupervisor.onEffect(this, cur)\n      }\n      if (this._queue.length > 0) {\n        cur = this.drainQueueWhileRunning(this.currentRuntimeFlags, cur)\n      }\n      if (!this._isYielding) {\n        this.currentOpCount += 1\n        const shouldYield = this.currentScheduler.shouldYield(this)\n        if (shouldYield !== false) {\n          this._isYielding = true\n          this.currentOpCount = 0\n          const oldCur = cur\n          cur = core.flatMap(core.yieldNow({ priority: shouldYield }), () => oldCur)\n        }\n      }\n      try {\n        // @ts-expect-error\n        cur = this.currentTracer.context(\n          () => {\n            if (_version !== (cur as core.Primitive)[core.EffectTypeId]._V) {\n              const level = this.getFiberRef(core.currentVersionMismatchErrorLogLevel)\n              if (level._tag === \"Some\") {\n                const effectVersion = (cur as core.Primitive)[core.EffectTypeId]._V\n                this.log(\n                  `Executing an Effect versioned ${effectVersion} with a Runtime of version ${version.getCurrentVersion()}, you may want to dedupe the effect dependencies, you can use the language service plugin to detect this at compile time: https://github.com/Effect-TS/language-service`,\n                  internalCause.empty,\n                  level\n                )\n              }\n            }\n            // @ts-expect-error\n            return this[(cur as core.Primitive)._op](cur as core.Primitive)\n          },\n          this\n        )\n\n        if (cur === YieldedOp) {\n          const op = yieldedOpChannel.currentOp!\n          if (\n            op._op === OpCodes.OP_YIELD ||\n            op._op === OpCodes.OP_ASYNC\n          ) {\n            return YieldedOp\n          }\n\n          yieldedOpChannel.currentOp = null\n          return (\n              op._op === OpCodes.OP_SUCCESS ||\n              op._op === OpCodes.OP_FAILURE\n            ) ?\n            op as unknown as Exit.Exit<A, E> :\n            core.exitFailCause(internalCause.die(op))\n        }\n      } catch (e) {\n        if (cur !== YieldedOp && !Predicate.hasProperty(cur, \"_op\") || !((cur as core.Primitive)._op in this)) {\n          cur = core.dieMessage(`Not a valid effect: ${Inspectable.toStringUnknown(cur)}`)\n        } else if (core.isInterruptedException(e)) {\n          cur = core.exitFailCause(\n            internalCause.sequential(internalCause.die(e), internalCause.interrupt(FiberId.none))\n          )\n        } else {\n          cur = core.die(e)\n        }\n      }\n    }\n  }\n\n  run = () => {\n    this.drainQueueOnCurrentThread()\n  }\n}\n\n// circular with Logger\n\n/** @internal */\nexport const currentMinimumLogLevel: FiberRef.FiberRef<LogLevel.LogLevel> = globalValue(\n  \"effect/FiberRef/currentMinimumLogLevel\",\n  () => core.fiberRefUnsafeMake<LogLevel.LogLevel>(LogLevel.fromLiteral(\"Info\"))\n)\n\n/** @internal */\nexport const loggerWithConsoleLog = <M, O>(self: Logger<M, O>): Logger<M, void> =>\n  internalLogger.makeLogger((opts) => {\n    const services = FiberRefs.getOrDefault(opts.context, defaultServices.currentServices)\n    Context.get(services, consoleTag).unsafe.log(self.log(opts))\n  })\n\n/** @internal */\nexport const loggerWithLeveledLog = <M, O>(self: Logger<M, O>): Logger<M, void> =>\n  internalLogger.makeLogger((opts) => {\n    const services = FiberRefs.getOrDefault(opts.context, defaultServices.currentServices)\n    const unsafeLogger = Context.get(services, consoleTag).unsafe\n    switch (opts.logLevel._tag) {\n      case \"Debug\":\n        return unsafeLogger.debug(self.log(opts))\n      case \"Info\":\n        return unsafeLogger.info(self.log(opts))\n      case \"Trace\":\n        return unsafeLogger.trace(self.log(opts))\n      case \"Warning\":\n        return unsafeLogger.warn(self.log(opts))\n      case \"Error\":\n      case \"Fatal\":\n        return unsafeLogger.error(self.log(opts))\n      default:\n        return unsafeLogger.log(self.log(opts))\n    }\n  })\n\n/** @internal */\nexport const loggerWithConsoleError = <M, O>(self: Logger<M, O>): Logger<M, void> =>\n  internalLogger.makeLogger((opts) => {\n    const services = FiberRefs.getOrDefault(opts.context, defaultServices.currentServices)\n    Context.get(services, consoleTag).unsafe.error(self.log(opts))\n  })\n\n/** @internal */\nexport const defaultLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/defaultLogger\"),\n  () => loggerWithConsoleLog(internalLogger.stringLogger)\n)\n\n/** @internal */\nexport const jsonLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/jsonLogger\"),\n  () => loggerWithConsoleLog(internalLogger.jsonLogger)\n)\n\n/** @internal */\nexport const logFmtLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/logFmtLogger\"),\n  () => loggerWithConsoleLog(internalLogger.logfmtLogger)\n)\n\n/** @internal */\nexport const prettyLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/prettyLogger\"),\n  () => internalLogger.prettyLoggerDefault\n)\n\n/** @internal */\nexport const structuredLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/structuredLogger\"),\n  () => loggerWithConsoleLog(internalLogger.structuredLogger)\n)\n\n/** @internal */\nexport const tracerLogger = globalValue(\n  Symbol.for(\"effect/Logger/tracerLogger\"),\n  () =>\n    internalLogger.makeLogger<unknown, void>(({\n      annotations,\n      cause,\n      context,\n      fiberId,\n      logLevel,\n      message\n    }) => {\n      const span = Context.getOption(\n        fiberRefs.getOrDefault(context, core.currentContext),\n        tracer.spanTag\n      )\n      if (span._tag === \"None\" || span.value._tag === \"ExternalSpan\") {\n        return\n      }\n      const clockService = Context.unsafeGet(\n        fiberRefs.getOrDefault(context, defaultServices.currentServices),\n        clock.clockTag\n      )\n\n      const attributes: Record<string, unknown> = {}\n      for (const [key, value] of annotations) {\n        attributes[key] = value\n      }\n      attributes[\"effect.fiberId\"] = FiberId.threadName(fiberId)\n      attributes[\"effect.logLevel\"] = logLevel.label\n\n      if (cause !== null && cause._tag !== \"Empty\") {\n        attributes[\"effect.cause\"] = internalCause.pretty(cause, { renderErrorCause: true })\n      }\n\n      span.value.event(\n        Inspectable.toStringUnknown(Array.isArray(message) && message.length === 1 ? message[0] : message),\n        clockService.unsafeCurrentTimeNanos(),\n        attributes\n      )\n    })\n)\n\n/** @internal */\nexport const loggerWithSpanAnnotations = <Message, Output>(self: Logger<Message, Output>): Logger<Message, Output> =>\n  internalLogger.mapInputOptions(self, (options: Logger.Options<Message>) => {\n    const span = Option.flatMap(fiberRefs.get(options.context, core.currentContext), Context.getOption(tracer.spanTag))\n    if (span._tag === \"None\") {\n      return options\n    }\n    return {\n      ...options,\n      annotations: pipe(\n        options.annotations,\n        HashMap.set(\"effect.traceId\", span.value.traceId as unknown),\n        HashMap.set(\"effect.spanId\", span.value.spanId as unknown),\n        span.value._tag === \"Span\" ? HashMap.set(\"effect.spanName\", span.value.name as unknown) : identity\n      )\n    }\n  })\n\n/** @internal */\nexport const currentLoggers: FiberRef.FiberRef<\n  HashSet.HashSet<Logger<unknown, any>>\n> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentLoggers\"),\n  () => core.fiberRefUnsafeMakeHashSet(HashSet.make(defaultLogger, tracerLogger))\n)\n\n/** @internal */\nexport const batchedLogger = dual<\n  <Output, R>(\n    window: Duration.DurationInput,\n    f: (messages: Array<NoInfer<Output>>) => Effect.Effect<void, never, R>\n  ) => <Message>(\n    self: Logger<Message, Output>\n  ) => Effect.Effect<Logger<Message, void>, never, Scope.Scope | R>,\n  <Message, Output, R>(\n    self: Logger<Message, Output>,\n    window: Duration.DurationInput,\n    f: (messages: Array<NoInfer<Output>>) => Effect.Effect<void, never, R>\n  ) => Effect.Effect<Logger<Message, void>, never, Scope.Scope | R>\n>(3, <Message, Output, R>(\n  self: Logger<Message, Output>,\n  window: Duration.DurationInput,\n  f: (messages: Array<NoInfer<Output>>) => Effect.Effect<void, never, R>\n): Effect.Effect<Logger<Message, void>, never, Scope.Scope | R> =>\n  core.flatMap(scope, (scope) => {\n    let buffer: Array<Output> = []\n    const flush = core.suspend(() => {\n      if (buffer.length === 0) {\n        return core.void\n      }\n      const arr = buffer\n      buffer = []\n      return f(arr)\n    })\n\n    return core.uninterruptibleMask((restore) =>\n      pipe(\n        internalEffect.sleep(window),\n        core.zipRight(flush),\n        internalEffect.forever,\n        restore,\n        forkDaemon,\n        core.flatMap((fiber) => core.scopeAddFinalizer(scope, core.interruptFiber(fiber))),\n        core.zipRight(addFinalizer(() => flush)),\n        core.as(\n          internalLogger.makeLogger((options) => {\n            buffer.push(self.log(options))\n          })\n        )\n      )\n    )\n  }))\n\nexport const annotateLogsScoped: {\n  (key: string, value: unknown): Effect.Effect<void, never, Scope.Scope>\n  (values: Record<string, unknown>): Effect.Effect<void, never, Scope.Scope>\n} = function() {\n  if (typeof arguments[0] === \"string\") {\n    return fiberRefLocallyScopedWith(\n      core.currentLogAnnotations,\n      HashMap.set(arguments[0], arguments[1])\n    )\n  }\n  const entries = Object.entries(arguments[0])\n  return fiberRefLocallyScopedWith(\n    core.currentLogAnnotations,\n    HashMap.mutate((annotations) => {\n      for (let i = 0; i < entries.length; i++) {\n        const [key, value] = entries[i]\n        HashMap.set(annotations, key, value)\n      }\n      return annotations\n    })\n  )\n}\n\n/** @internal */\nexport const whenLogLevel = dual<\n  (\n    level: LogLevel.LogLevel | LogLevel.Literal\n  ) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<Option.Option<A>, E, R>,\n  <A, E, R>(\n    effect: Effect.Effect<A, E, R>,\n    level: LogLevel.LogLevel | LogLevel.Literal\n  ) => Effect.Effect<Option.Option<A>, E, R>\n>(2, (effect, level) => {\n  const requiredLogLevel = typeof level === \"string\" ? LogLevel.fromLiteral(level) : level\n\n  return core.withFiberRuntime((fiberState) => {\n    const minimumLogLevel = fiberState.getFiberRef(currentMinimumLogLevel)\n\n    // Imitate the behaviour of `FiberRuntime.log`\n    if (LogLevel.greaterThan(minimumLogLevel, requiredLogLevel)) {\n      return core.succeed(Option.none())\n    }\n\n    return core.map(effect, Option.some)\n  })\n})\n\n// circular with Effect\n\n/* @internal */\nexport const acquireRelease: {\n  <A, X, R2>(\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): <E, R>(acquire: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R2 | R | Scope.Scope>\n  <A, E, R, X, R2>(\n    acquire: Effect.Effect<A, E, R>,\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, R2 | R | Scope.Scope>\n} = dual((args) => core.isEffect(args[0]), (acquire, release) =>\n  core.uninterruptible(\n    core.tap(acquire, (a) => addFinalizer((exit) => release(a, exit)))\n  ))\n\n/* @internal */\nexport const acquireReleaseInterruptible: {\n  <X, R2>(\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): <A, E, R>(acquire: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Scope.Scope | R2 | R>\n  <A, E, R, X, R2>(\n    acquire: Effect.Effect<A, E, R>,\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, Scope.Scope | R2 | R>\n} = dual((args) => core.isEffect(args[0]), (acquire, release) =>\n  ensuring(\n    acquire,\n    addFinalizer((exit) => release(exit))\n  ))\n\n/* @internal */\nexport const addFinalizer = <X, R>(\n  finalizer: (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R>\n): Effect.Effect<void, never, R | Scope.Scope> =>\n  core.withFiberRuntime(\n    (runtime) => {\n      const acquireRefs = runtime.getFiberRefs()\n      const acquireFlags = runtimeFlags_.disable(runtime.currentRuntimeFlags, runtimeFlags_.Interruption)\n      return core.flatMap(scope, (scope) =>\n        core.scopeAddFinalizerExit(scope, (exit) =>\n          core.withFiberRuntime((runtimeFinalizer) => {\n            const preRefs = runtimeFinalizer.getFiberRefs()\n            const preFlags = runtimeFinalizer.currentRuntimeFlags\n            const patchRefs = FiberRefsPatch.diff(preRefs, acquireRefs)\n            const patchFlags = runtimeFlags_.diff(preFlags, acquireFlags)\n            const inverseRefs = FiberRefsPatch.diff(acquireRefs, preRefs)\n            runtimeFinalizer.setFiberRefs(\n              FiberRefsPatch.patch(patchRefs, runtimeFinalizer.id(), acquireRefs)\n            )\n\n            return ensuring(\n              core.withRuntimeFlags(finalizer(exit) as Effect.Effect<X>, patchFlags),\n              core.sync(() => {\n                runtimeFinalizer.setFiberRefs(\n                  FiberRefsPatch.patch(inverseRefs, runtimeFinalizer.id(), runtimeFinalizer.getFiberRefs())\n                )\n              })\n            )\n          })))\n    }\n  )\n\n/* @internal */\nexport const daemonChildren = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> => {\n  const forkScope = core.fiberRefLocally(core.currentForkScopeOverride, Option.some(fiberScope.globalScope))\n  return forkScope(self)\n}\n\n/** @internal */\nconst _existsParFound = Symbol.for(\"effect/Effect/existsPar/found\")\n\n/* @internal */\nexport const exists: {\n  <A, E, R>(predicate: (a: A, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }): (elements: Iterable<A>) => Effect.Effect<boolean, E, R>\n  <A, E, R>(elements: Iterable<A>, predicate: (a: A, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }): Effect.Effect<boolean, E, R>\n} = dual(\n  (args) => Predicate.isIterable(args[0]) && !core.isEffect(args[0]),\n  <A, E, R>(elements: Iterable<A>, predicate: (a: A, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }) =>\n    concurrency.matchSimple(\n      options?.concurrency,\n      () => core.suspend(() => existsLoop(elements[Symbol.iterator](), 0, predicate)),\n      () =>\n        core.matchEffect(\n          forEach(\n            elements,\n            (a, i) => core.if_(predicate(a, i), { onTrue: () => core.fail(_existsParFound), onFalse: () => core.void }),\n            options\n          ),\n          {\n            onFailure: (e) => e === _existsParFound ? core.succeed(true) : core.fail(e),\n            onSuccess: () => core.succeed(false)\n          }\n        )\n    )\n)\n\nconst existsLoop = <A, E, R>(\n  iterator: Iterator<A>,\n  index: number,\n  f: (a: A, i: number) => Effect.Effect<boolean, E, R>\n): Effect.Effect<boolean, E, R> => {\n  const next = iterator.next()\n  if (next.done) {\n    return core.succeed(false)\n  }\n  return core.flatMap(\n    f(next.value, index),\n    (b) => b ? core.succeed(b) : existsLoop(iterator, index + 1, f)\n  )\n}\n\n/* @internal */\nexport const filter = dual<\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly negate?: boolean | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => (elements: Iterable<A>) => Effect.Effect<Array<A>, E, R>,\n  <A, E, R>(elements: Iterable<A>, predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly negate?: boolean | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }) => Effect.Effect<Array<A>, E, R>\n>(\n  (args) => Predicate.isIterable(args[0]) && !core.isEffect(args[0]),\n  <A, E, R>(elements: Iterable<A>, predicate: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly negate?: boolean | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }) => {\n    const predicate_ = options?.negate ? (a: A, i: number) => core.map(predicate(a, i), Boolean.not) : predicate\n    return concurrency.matchSimple(\n      options?.concurrency,\n      () =>\n        core.suspend(() =>\n          RA.fromIterable(elements).reduceRight(\n            (effect, a, i) =>\n              core.zipWith(\n                effect,\n                core.suspend(() => predicate_(a, i)),\n                (list, b) => b ? [a, ...list] : list\n              ),\n            core.sync(() => new Array<A>()) as Effect.Effect<Array<A>, E, R>\n          )\n        ),\n      () =>\n        core.map(\n          forEach(\n            elements,\n            (a, i) => core.map(predicate_(a, i), (b) => (b ? Option.some(a) : Option.none())),\n            options\n          ),\n          RA.getSomes\n        )\n    )\n  }\n)\n\n// === all\n\nconst allResolveInput = (\n  input: Iterable<Effect.Effect<any, any, any>> | Record<string, Effect.Effect<any, any, any>>\n): [Iterable<Effect.Effect<any, any, any>>, Option.Option<(as: ReadonlyArray<any>) => any>] => {\n  if (Array.isArray(input) || Predicate.isIterable(input)) {\n    return [input, Option.none()]\n  }\n  const keys = Object.keys(input)\n  const size = keys.length\n  return [\n    keys.map((k) => input[k]),\n    Option.some((values: ReadonlyArray<any>) => {\n      const res = {}\n      for (let i = 0; i < size; i++) {\n        ;(res as any)[keys[i]] = values[i]\n      }\n      return res\n    })\n  ]\n}\n\nconst allValidate = (\n  effects: Iterable<Effect.Effect<any, any, any>>,\n  reconcile: Option.Option<(as: ReadonlyArray<any>) => any>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n) => {\n  const eitherEffects: Array<Effect.Effect<Either.Either<unknown, unknown>, never, unknown>> = []\n  for (const effect of effects) {\n    eitherEffects.push(core.either(effect))\n  }\n  return core.flatMap(\n    forEach(eitherEffects, identity, {\n      concurrency: options?.concurrency,\n      batching: options?.batching,\n      concurrentFinalizers: options?.concurrentFinalizers\n    }),\n    (eithers) => {\n      const none = Option.none()\n      const size = eithers.length\n      const errors: Array<unknown> = new Array(size)\n      const successes: Array<unknown> = new Array(size)\n      let errored = false\n      for (let i = 0; i < size; i++) {\n        const either = eithers[i] as Either.Either<unknown, unknown>\n        if (either._tag === \"Left\") {\n          errors[i] = Option.some(either.left)\n          errored = true\n        } else {\n          successes[i] = either.right\n          errors[i] = none\n        }\n      }\n      if (errored) {\n        return reconcile._tag === \"Some\" ?\n          core.fail(reconcile.value(errors)) :\n          core.fail(errors)\n      } else if (options?.discard) {\n        return core.void\n      }\n      return reconcile._tag === \"Some\" ?\n        core.succeed(reconcile.value(successes)) :\n        core.succeed(successes)\n    }\n  )\n}\n\nconst allEither = (\n  effects: Iterable<Effect.Effect<any, any, any>>,\n  reconcile: Option.Option<(as: ReadonlyArray<any>) => any>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n) => {\n  const eitherEffects: Array<Effect.Effect<Either.Either<unknown, unknown>, never, unknown>> = []\n  for (const effect of effects) {\n    eitherEffects.push(core.either(effect))\n  }\n\n  if (options?.discard) {\n    return forEach(eitherEffects, identity, {\n      concurrency: options?.concurrency,\n      batching: options?.batching,\n      discard: true,\n      concurrentFinalizers: options?.concurrentFinalizers\n    })\n  }\n\n  return core.map(\n    forEach(eitherEffects, identity, {\n      concurrency: options?.concurrency,\n      batching: options?.batching,\n      concurrentFinalizers: options?.concurrentFinalizers\n    }),\n    (eithers) =>\n      reconcile._tag === \"Some\" ?\n        reconcile.value(eithers) :\n        eithers\n  )\n}\n\n/* @internal */\nexport const all = <\n  const Arg extends Iterable<Effect.Effect<any, any, any>> | Record<string, Effect.Effect<any, any, any>>,\n  O extends NoExcessProperties<{\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }, O>\n>(\n  arg: Arg,\n  options?: O\n): Effect.All.Return<Arg, O> => {\n  const [effects, reconcile] = allResolveInput(arg)\n\n  if (options?.mode === \"validate\") {\n    return allValidate(effects, reconcile, options) as any\n  } else if (options?.mode === \"either\") {\n    return allEither(effects, reconcile, options) as any\n  }\n\n  return options?.discard !== true && reconcile._tag === \"Some\"\n    ? core.map(\n      forEach(effects, identity, options as any),\n      reconcile.value\n    ) as any\n    : forEach(effects, identity, options as any) as any\n}\n\n/* @internal */\nexport const allWith = <\n  O extends NoExcessProperties<{\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }, O>\n>(options?: O) =>\n<const Arg extends Iterable<Effect.Effect<any, any, any>> | Record<string, Effect.Effect<any, any, any>>>(\n  arg: Arg\n): Effect.All.Return<Arg, O> => all(arg, options)\n\n/* @internal */\nexport const allSuccesses = <Eff extends Effect.Effect<any, any, any>>(\n  elements: Iterable<Eff>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n): Effect.Effect<Array<Effect.Effect.Success<Eff>>, never, Effect.Effect.Context<Eff>> =>\n  core.map(\n    all(RA.fromIterable(elements).map(core.exit), options),\n    RA.filterMap((exit) => core.exitIsSuccess(exit) ? Option.some(exit.effect_instruction_i0) : Option.none())\n  )\n\n/* @internal */\nexport const replicate = dual<\n  (n: number) => <A, E, R>(self: Effect.Effect<A, E, R>) => Array<Effect.Effect<A, E, R>>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, n: number) => Array<Effect.Effect<A, E, R>>\n>(2, (self, n) => Array.from({ length: n }, () => self))\n\n/* @internal */\nexport const replicateEffect: {\n  (\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Array<A>, E, R>\n  (\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<void, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect.Effect<Array<A>, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect.Effect<void, E, R>\n} = dual(\n  (args) => core.isEffect(args[0]),\n  (self, n, options) => all(replicate(self, n), options)\n)\n\n/* @internal */\nexport const forEach: {\n  <B, E, R, S extends Iterable<any>>(\n    f: (a: RA.ReadonlyArray.Infer<S>, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): (\n    self: S\n  ) => Effect.Effect<RA.ReadonlyArray.With<S, B>, E, R>\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): (self: Iterable<A>) => Effect.Effect<void, E, R>\n  <A, B, E, R>(\n    self: RA.NonEmptyReadonlyArray<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): Effect.Effect<RA.NonEmptyArray<B>, E, R>\n  <A, B, E, R>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): Effect.Effect<Array<B>, E, R>\n  <A, B, E, R>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect.Effect<void, E, R>\n} = dual((args) => Predicate.isIterable(args[0]), <A, R, E, B>(\n  self: Iterable<A>,\n  f: (a: A, i: number) => Effect.Effect<B, E, R>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n) =>\n  core.withFiberRuntime<A | void, E, R>((r) => {\n    const isRequestBatchingEnabled = options?.batching === true ||\n      (options?.batching === \"inherit\" && r.getFiberRef(core.currentRequestBatching))\n\n    if (options?.discard) {\n      return concurrency.match(\n        options.concurrency,\n        () =>\n          finalizersMaskInternal(ExecutionStrategy.sequential, options?.concurrentFinalizers)((restore) =>\n            isRequestBatchingEnabled\n              ? forEachConcurrentDiscard(self, (a, i) => restore(f(a, i)), true, false, 1)\n              : core.forEachSequentialDiscard(self, (a, i) => restore(f(a, i)))\n          ),\n        () =>\n          finalizersMaskInternal(ExecutionStrategy.parallel, options?.concurrentFinalizers)((restore) =>\n            forEachConcurrentDiscard(self, (a, i) => restore(f(a, i)), isRequestBatchingEnabled, false)\n          ),\n        (n) =>\n          finalizersMaskInternal(ExecutionStrategy.parallelN(n), options?.concurrentFinalizers)((restore) =>\n            forEachConcurrentDiscard(self, (a, i) => restore(f(a, i)), isRequestBatchingEnabled, false, n)\n          )\n      )\n    }\n\n    return concurrency.match(\n      options?.concurrency,\n      () =>\n        finalizersMaskInternal(ExecutionStrategy.sequential, options?.concurrentFinalizers)((restore) =>\n          isRequestBatchingEnabled\n            ? forEachParN(self, 1, (a, i) => restore(f(a, i)), true)\n            : core.forEachSequential(self, (a, i) => restore(f(a, i)))\n        ),\n      () =>\n        finalizersMaskInternal(ExecutionStrategy.parallel, options?.concurrentFinalizers)((restore) =>\n          forEachParUnbounded(self, (a, i) => restore(f(a, i)), isRequestBatchingEnabled)\n        ),\n      (n) =>\n        finalizersMaskInternal(ExecutionStrategy.parallelN(n), options?.concurrentFinalizers)((restore) =>\n          forEachParN(self, n, (a, i) => restore(f(a, i)), isRequestBatchingEnabled)\n        )\n    )\n  }))\n\n/* @internal */\nexport const forEachParUnbounded = <A, B, E, R>(\n  self: Iterable<A>,\n  f: (a: A, i: number) => Effect.Effect<B, E, R>,\n  batching: boolean\n): Effect.Effect<Array<B>, E, R> =>\n  core.suspend(() => {\n    const as = RA.fromIterable(self)\n    const array = new Array<B>(as.length)\n    const fn = (a: A, i: number) => core.flatMap(f(a, i), (b) => core.sync(() => array[i] = b))\n    return core.zipRight(forEachConcurrentDiscard(as, fn, batching, false), core.succeed(array))\n  })\n\n/** @internal */\nexport const forEachConcurrentDiscard = <A, X, E, R>(\n  self: Iterable<A>,\n  f: (a: A, i: number) => Effect.Effect<X, E, R>,\n  batching: boolean,\n  processAll: boolean,\n  n?: number\n): Effect.Effect<void, E, R> =>\n  core.uninterruptibleMask((restore) =>\n    core.transplant((graft) =>\n      core.withFiberRuntime<void, E, R>((parent) => {\n        let todos = Array.from(self).reverse()\n        let target = todos.length\n        if (target === 0) {\n          return core.void\n        }\n        let counter = 0\n        let interrupted = false\n        const fibersCount = n ? Math.min(todos.length, n) : todos.length\n        const fibers = new Set<FiberRuntime<Exit.Exit<X, E> | Effect.Blocked<X, E>>>()\n        const results = new Array()\n        const interruptAll = () =>\n          fibers.forEach((fiber) => {\n            fiber.currentScheduler.scheduleTask(() => {\n              fiber.unsafeInterruptAsFork(parent.id())\n            }, 0)\n          })\n        const startOrder = new Array<FiberRuntime<Exit.Exit<X, E> | Effect.Blocked<X, E>>>()\n        const joinOrder = new Array<FiberRuntime<Exit.Exit<X, E> | Effect.Blocked<X, E>>>()\n        const residual = new Array<core.Blocked>()\n        const collectExits = () => {\n          const exits: Array<Exit.Exit<any, E>> = results\n            .filter(({ exit }) => exit._tag === \"Failure\")\n            .sort((a, b) => a.index < b.index ? -1 : a.index === b.index ? 0 : 1)\n            .map(({ exit }) => exit)\n          if (exits.length === 0) {\n            exits.push(core.exitVoid)\n          }\n          return exits\n        }\n        const runFiber = <A, E, R>(eff: Effect.Effect<A, E, R>, interruptImmediately = false) => {\n          const runnable = core.uninterruptible(graft(eff))\n          const fiber = unsafeForkUnstarted(\n            runnable,\n            parent,\n            parent.currentRuntimeFlags,\n            fiberScope.globalScope\n          )\n          parent.currentScheduler.scheduleTask(() => {\n            if (interruptImmediately) {\n              fiber.unsafeInterruptAsFork(parent.id())\n            }\n            fiber.resume(runnable)\n          }, 0)\n          return fiber\n        }\n        const onInterruptSignal = () => {\n          if (!processAll) {\n            target -= todos.length\n            todos = []\n          }\n          interrupted = true\n          interruptAll()\n        }\n        const stepOrExit = batching ? core.step : core.exit\n        const processingFiber = runFiber(\n          core.async<any, any, any>((resume) => {\n            const pushResult = <X, E>(res: Exit.Exit<X, E> | Effect.Blocked<X, E>, index: number) => {\n              if (res._op === \"Blocked\") {\n                residual.push(res as core.Blocked)\n              } else {\n                results.push({ index, exit: res })\n                if (res._op === \"Failure\" && !interrupted) {\n                  onInterruptSignal()\n                }\n              }\n            }\n            const next = () => {\n              if (todos.length > 0) {\n                const a = todos.pop()!\n                let index = counter++\n                const returnNextElement = () => {\n                  const a = todos.pop()!\n                  index = counter++\n                  return core.flatMap(core.yieldNow(), () =>\n                    core.flatMap(\n                      stepOrExit(restore(f(a, index))),\n                      onRes\n                    ))\n                }\n                const onRes = (\n                  res: Exit.Exit<X, E> | Effect.Blocked<X, E>\n                ): Effect.Effect<Exit.Exit<X, E> | Effect.Blocked<X, E>, never, R> => {\n                  if (todos.length > 0) {\n                    pushResult(res, index)\n                    if (todos.length > 0) {\n                      return returnNextElement()\n                    }\n                  }\n                  return core.succeed(res)\n                }\n                const todo = core.flatMap(\n                  stepOrExit(restore(f(a, index))),\n                  onRes\n                )\n                const fiber = runFiber(todo)\n                startOrder.push(fiber)\n                fibers.add(fiber)\n                if (interrupted) {\n                  fiber.currentScheduler.scheduleTask(() => {\n                    fiber.unsafeInterruptAsFork(parent.id())\n                  }, 0)\n                }\n                fiber.addObserver((wrapped) => {\n                  let exit: Exit.Exit<any, any> | core.Blocked\n                  if (wrapped._op === \"Failure\") {\n                    exit = wrapped\n                  } else {\n                    exit = wrapped.effect_instruction_i0 as any\n                  }\n                  joinOrder.push(fiber)\n                  fibers.delete(fiber)\n                  pushResult(exit, index)\n                  if (results.length === target) {\n                    resume(core.succeed(Option.getOrElse(\n                      core.exitCollectAll(collectExits(), { parallel: true }),\n                      () => core.exitVoid\n                    )))\n                  } else if (residual.length + results.length === target) {\n                    const exits = collectExits()\n                    const requests = residual.map((blocked) => blocked.effect_instruction_i0).reduce(RequestBlock_.par)\n                    resume(core.succeed(core.blocked(\n                      requests,\n                      forEachConcurrentDiscard(\n                        [\n                          Option.getOrElse(\n                            core.exitCollectAll(exits, { parallel: true }),\n                            () => core.exitVoid\n                          ),\n                          ...residual.map((blocked) => blocked.effect_instruction_i1)\n                        ],\n                        (i) => i,\n                        batching,\n                        true,\n                        n\n                      )\n                    )))\n                  } else {\n                    next()\n                  }\n                })\n              }\n            }\n            for (let i = 0; i < fibersCount; i++) {\n              next()\n            }\n          })\n        )\n        return core.asVoid(\n          core.onExit(\n            core.flatten(restore(internalFiber.join(processingFiber))),\n            core.exitMatch({\n              onFailure: (cause) => {\n                onInterruptSignal()\n                const target = residual.length + 1\n                const concurrency = Math.min(typeof n === \"number\" ? n : residual.length, residual.length)\n                const toPop = Array.from(residual)\n                return core.async<any, any>((cb) => {\n                  const exits: Array<Exit.Exit<any, any>> = []\n                  let count = 0\n                  let index = 0\n                  const check = (index: number, hitNext: boolean) => (exit: Exit.Exit<any, any>) => {\n                    exits[index] = exit\n                    count++\n                    if (count === target) {\n                      cb(core.exitSucceed(core.exitFailCause(cause)))\n                    }\n                    if (toPop.length > 0 && hitNext) {\n                      next()\n                    }\n                  }\n                  const next = () => {\n                    runFiber(toPop.pop()!, true).addObserver(check(index, true))\n                    index++\n                  }\n                  processingFiber.addObserver(check(index, false))\n                  index++\n                  for (let i = 0; i < concurrency; i++) {\n                    next()\n                  }\n                }) as any\n              },\n              onSuccess: () => core.forEachSequential(joinOrder, (f) => f.inheritAll)\n            })\n          )\n        )\n      })\n    )\n  )\n\n/* @internal */\nexport const forEachParN = <A, B, E, R>(\n  self: Iterable<A>,\n  n: number,\n  f: (a: A, i: number) => Effect.Effect<B, E, R>,\n  batching: boolean\n): Effect.Effect<Array<B>, E, R> =>\n  core.suspend(() => {\n    const as = RA.fromIterable(self)\n    const array = new Array<B>(as.length)\n    const fn = (a: A, i: number) => core.map(f(a, i), (b) => array[i] = b)\n    return core.zipRight(forEachConcurrentDiscard(as, fn, batching, false, n), core.succeed(array))\n  })\n\n/* @internal */\nexport const fork = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R> =>\n  core.withFiberRuntime((state, status) => core.succeed(unsafeFork(self, state, status.runtimeFlags)))\n\n/* @internal */\nexport const forkDaemon = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R> =>\n  forkWithScopeOverride(self, fiberScope.globalScope)\n\n/* @internal */\nexport const forkWithErrorHandler = dual<\n  <E, X>(\n    handler: (e: E) => Effect.Effect<X>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R>,\n  <A, E, R, X>(\n    self: Effect.Effect<A, E, R>,\n    handler: (e: E) => Effect.Effect<X>\n  ) => Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R>\n>(2, (self, handler) =>\n  fork(core.onError(self, (cause) => {\n    const either = internalCause.failureOrCause(cause)\n    switch (either._tag) {\n      case \"Left\":\n        return handler(either.left)\n      case \"Right\":\n        return core.failCause(either.right)\n    }\n  })))\n\n/** @internal */\nexport const unsafeFork = <A, E, R, E2, B>(\n  effect: Effect.Effect<A, E, R>,\n  parentFiber: FiberRuntime<B, E2>,\n  parentRuntimeFlags: RuntimeFlags.RuntimeFlags,\n  overrideScope: fiberScope.FiberScope | null = null\n): FiberRuntime<A, E> => {\n  const childFiber = unsafeMakeChildFiber(effect, parentFiber, parentRuntimeFlags, overrideScope)\n  childFiber.resume(effect)\n  return childFiber\n}\n\n/** @internal */\nexport const unsafeForkUnstarted = <A, E, R, E2, B>(\n  effect: Effect.Effect<A, E, R>,\n  parentFiber: FiberRuntime<B, E2>,\n  parentRuntimeFlags: RuntimeFlags.RuntimeFlags,\n  overrideScope: fiberScope.FiberScope | null = null\n): FiberRuntime<A, E> => {\n  const childFiber = unsafeMakeChildFiber(effect, parentFiber, parentRuntimeFlags, overrideScope)\n  return childFiber\n}\n\n/** @internal */\nexport const unsafeMakeChildFiber = <A, E, R, E2, B>(\n  effect: Effect.Effect<A, E, R>,\n  parentFiber: FiberRuntime<B, E2>,\n  parentRuntimeFlags: RuntimeFlags.RuntimeFlags,\n  overrideScope: fiberScope.FiberScope | null = null\n): FiberRuntime<A, E> => {\n  const childId = FiberId.unsafeMake()\n  const parentFiberRefs = parentFiber.getFiberRefs()\n  const childFiberRefs = fiberRefs.forkAs(parentFiberRefs, childId)\n  const childFiber = new FiberRuntime<A, E>(childId, childFiberRefs, parentRuntimeFlags)\n  const childContext = fiberRefs.getOrDefault(\n    childFiberRefs,\n    core.currentContext as unknown as FiberRef.FiberRef<Context.Context<R>>\n  )\n  const supervisor = childFiber.currentSupervisor\n\n  supervisor.onStart(\n    childContext,\n    effect,\n    Option.some(parentFiber),\n    childFiber\n  )\n\n  childFiber.addObserver((exit) => supervisor.onEnd(exit, childFiber))\n\n  const parentScope = overrideScope !== null ? overrideScope : pipe(\n    parentFiber.getFiberRef(core.currentForkScopeOverride),\n    Option.getOrElse(() => parentFiber.scope())\n  )\n\n  parentScope.add(parentRuntimeFlags, childFiber)\n\n  return childFiber\n}\n\n/* @internal */\nconst forkWithScopeOverride = <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  scopeOverride: fiberScope.FiberScope\n): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R> =>\n  core.withFiberRuntime((parentFiber, parentStatus) =>\n    core.succeed(unsafeFork(self, parentFiber, parentStatus.runtimeFlags, scopeOverride))\n  )\n\n/* @internal */\nexport const mergeAll = dual<\n  <Z, Eff extends Effect.Effect<any, any, any>>(\n    zero: Z,\n    f: (z: Z, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => (elements: Iterable<Eff>) => Effect.Effect<Z, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>>,\n  <Eff extends Effect.Effect<any, any, any>, Z>(\n    elements: Iterable<Eff>,\n    zero: Z,\n    f: (z: Z, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<Z, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>>\n>(\n  (args) => Predicate.isFunction(args[2]),\n  <A, E, R, Z>(elements: Iterable<Effect.Effect<A, E, R>>, zero: Z, f: (z: Z, a: A, i: number) => Z, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }) =>\n    concurrency.matchSimple(\n      options?.concurrency,\n      () =>\n        RA.fromIterable(elements).reduce(\n          (acc, a, i) => core.zipWith(acc, a, (acc, a) => f(acc, a, i)),\n          core.succeed(zero) as Effect.Effect<Z, E, R>\n        ),\n      () =>\n        core.flatMap(Ref.make(zero), (acc) =>\n          core.flatMap(\n            forEach(\n              elements,\n              (effect, i) => core.flatMap(effect, (a) => Ref.update(acc, (b) => f(b, a, i))),\n              options\n            ),\n            () => Ref.get(acc)\n          ))\n    )\n)\n\n/* @internal */\nexport const partition = dual<\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => (elements: Iterable<A>) => Effect.Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>,\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>\n>((args) => Predicate.isIterable(args[0]), (elements, f, options) =>\n  pipe(\n    forEach(elements, (a, i) => core.either(f(a, i)), options),\n    core.map((chunk) => core.partitionMap(chunk, identity))\n  ))\n\n/* @internal */\nexport const validateAll = dual<\n  {\n    <A, B, E, R>(\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options?: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard?: false | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n    ): (elements: Iterable<A>) => Effect.Effect<Array<B>, RA.NonEmptyArray<E>, R>\n    <A, B, E, R>(\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard: true\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n    ): (elements: Iterable<A>) => Effect.Effect<void, RA.NonEmptyArray<E>, R>\n  },\n  {\n    <A, B, E, R>(\n      elements: Iterable<A>,\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options?: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard?: false | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n    ): Effect.Effect<Array<B>, RA.NonEmptyArray<E>, R>\n    <A, B, E, R>(\n      elements: Iterable<A>,\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard: true\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n    ): Effect.Effect<void, RA.NonEmptyArray<E>, R>\n  }\n>(\n  (args) => Predicate.isIterable(args[0]),\n  <A, B, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }): Effect.Effect<any, RA.NonEmptyArray<E>, R> =>\n    core.flatMap(\n      partition(elements, f, {\n        concurrency: options?.concurrency,\n        batching: options?.batching,\n        concurrentFinalizers: options?.concurrentFinalizers\n      }),\n      ([es, bs]) =>\n        RA.isNonEmptyArray(es)\n          ? core.fail(es)\n          : options?.discard\n          ? core.void\n          : core.succeed(bs)\n    )\n)\n\n/* @internal */\nexport const raceAll: <Eff extends Effect.Effect<any, any, any>>(\n  all: Iterable<Eff>\n) => Effect.Effect<Effect.Effect.Success<Eff>, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>> = <\n  A,\n  E,\n  R\n>(all: Iterable<Effect.Effect<A, E, R>>): Effect.Effect<A, E, R> =>\n  core.withFiberRuntime((state, status) =>\n    core.async<A, E, R>((resume) => {\n      const fibers = new Set<FiberRuntime<A, E>>()\n      let winner: FiberRuntime<A, E> | undefined\n      let failures: Cause.Cause<E> = internalCause.empty\n      const interruptAll = () => {\n        for (const fiber of fibers) {\n          fiber.unsafeInterruptAsFork(state.id())\n        }\n      }\n      let latch = false\n      let empty = true\n      for (const self of all) {\n        empty = false\n        const fiber = unsafeFork(\n          core.interruptible(self),\n          state,\n          status.runtimeFlags\n        )\n        fibers.add(fiber)\n        fiber.addObserver((exit) => {\n          fibers.delete(fiber)\n          if (!winner) {\n            if (exit._tag === \"Success\") {\n              latch = true\n              winner = fiber\n              failures = internalCause.empty\n              interruptAll()\n            } else {\n              failures = internalCause.parallel(exit.cause, failures)\n            }\n          }\n          if (latch && fibers.size === 0) {\n            resume(\n              winner ? core.zipRight(internalFiber.inheritAll(winner), winner.unsafePoll()!) : core.failCause(failures)\n            )\n          }\n        })\n        if (winner) break\n      }\n      if (empty) {\n        return resume(core.dieSync(() => new core.IllegalArgumentException(`Received an empty collection of effects`)))\n      }\n      latch = true\n      return internalFiber.interruptAllAs(fibers, state.id())\n    })\n  )\n\n/* @internal */\nexport const reduceEffect = dual<\n  <Z, E, R, Eff extends Effect.Effect<any, any, any>>(\n    zero: Effect.Effect<Z, E, R>,\n    f: (z: NoInfer<Z>, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => (elements: Iterable<Eff>) => Effect.Effect<Z, E | Effect.Effect.Error<Eff>, R | Effect.Effect.Context<Eff>>,\n  <Eff extends Effect.Effect<any, any, any>, Z, E, R>(\n    elements: Iterable<Eff>,\n    zero: Effect.Effect<Z, E, R>,\n    f: (z: NoInfer<Z>, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<Z, E | Effect.Effect.Error<Eff>, R | Effect.Effect.Context<Eff>>\n>((args) => Predicate.isIterable(args[0]) && !core.isEffect(args[0]), <A, E, R, Z>(\n  elements: Iterable<Effect.Effect<A, E, R>>,\n  zero: Effect.Effect<Z, E, R>,\n  f: (z: NoInfer<Z>, a: NoInfer<A>, i: number) => Z,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n) =>\n  concurrency.matchSimple(\n    options?.concurrency,\n    () => RA.fromIterable(elements).reduce((acc, a, i) => core.zipWith(acc, a, (acc, a) => f(acc, a, i)), zero),\n    () =>\n      core.suspend(() =>\n        pipe(\n          mergeAll(\n            [zero, ...elements],\n            Option.none<Z>(),\n            (acc, elem, i) => {\n              switch (acc._tag) {\n                case \"None\": {\n                  return Option.some(elem as Z)\n                }\n                case \"Some\": {\n                  return Option.some(f(acc.value, elem as A, i))\n                }\n              }\n            },\n            options\n          ),\n          core.map((option) => {\n            switch (option._tag) {\n              case \"None\": {\n                throw new Error(\n                  \"BUG: Effect.reduceEffect - please report an issue at https://github.com/Effect-TS/effect/issues\"\n                )\n              }\n              case \"Some\": {\n                return option.value\n              }\n            }\n          })\n        )\n      )\n  ))\n\n/* @internal */\nexport const parallelFinalizers = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.contextWithEffect((context) =>\n    Option.match(Context.getOption(context, scopeTag), {\n      onNone: () => self,\n      onSome: (scope) => {\n        switch (scope.strategy._tag) {\n          case \"Parallel\":\n            return self\n          case \"Sequential\":\n          case \"ParallelN\":\n            return core.flatMap(\n              core.scopeFork(scope, ExecutionStrategy.parallel),\n              (inner) => scopeExtend(self, inner)\n            )\n        }\n      }\n    })\n  )\n\n/* @internal */\nexport const parallelNFinalizers =\n  (parallelism: number) => <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n    core.contextWithEffect((context) =>\n      Option.match(Context.getOption(context, scopeTag), {\n        onNone: () => self,\n        onSome: (scope) => {\n          if (scope.strategy._tag === \"ParallelN\" && scope.strategy.parallelism === parallelism) {\n            return self\n          }\n          return core.flatMap(\n            core.scopeFork(scope, ExecutionStrategy.parallelN(parallelism)),\n            (inner) => scopeExtend(self, inner)\n          )\n        }\n      })\n    )\n\n/* @internal */\nexport const finalizersMask = (strategy: ExecutionStrategy.ExecutionStrategy) =>\n<A, E, R>(\n  self: (\n    restore: <A1, E1, R1>(self: Effect.Effect<A1, E1, R1>) => Effect.Effect<A1, E1, R1>\n  ) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => finalizersMaskInternal(strategy, true)(self)\n\n/* @internal */\nexport const finalizersMaskInternal =\n  (strategy: ExecutionStrategy.ExecutionStrategy, concurrentFinalizers?: boolean | undefined) =>\n  <A, E, R>(\n    self: (\n      restore: <A1, E1, R1>(self: Effect.Effect<A1, E1, R1>) => Effect.Effect<A1, E1, R1>\n    ) => Effect.Effect<A, E, R>\n  ): Effect.Effect<A, E, R> =>\n    core.contextWithEffect((context) =>\n      Option.match(Context.getOption(context, scopeTag), {\n        onNone: () => self(identity),\n        onSome: (scope) => {\n          if (concurrentFinalizers === true) {\n            const patch = strategy._tag === \"Parallel\"\n              ? parallelFinalizers\n              : strategy._tag === \"Sequential\"\n              ? sequentialFinalizers\n              : parallelNFinalizers(strategy.parallelism)\n            switch (scope.strategy._tag) {\n              case \"Parallel\":\n                return patch(self(parallelFinalizers))\n              case \"Sequential\":\n                return patch(self(sequentialFinalizers))\n              case \"ParallelN\":\n                return patch(self(parallelNFinalizers(scope.strategy.parallelism)))\n            }\n          } else {\n            return self(identity)\n          }\n        }\n      })\n    )\n\n/* @internal */\nexport const scopeWith = <A, E, R>(\n  f: (scope: Scope.Scope) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R | Scope.Scope> => core.flatMap(scopeTag, f)\n\n/** @internal */\nexport const scopedWith = <A, E, R>(\n  f: (scope: Scope.Scope) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => core.flatMap(scopeMake(), (scope) => core.onExit(f(scope), (exit) => scope.close(exit)))\n\n/* @internal */\nexport const scopedEffect = <A, E, R>(effect: Effect.Effect<A, E, R>): Effect.Effect<A, E, Exclude<R, Scope.Scope>> =>\n  core.flatMap(scopeMake(), (scope) => scopeUse(effect, scope))\n\n/* @internal */\nexport const sequentialFinalizers = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.contextWithEffect((context) =>\n    Option.match(Context.getOption(context, scopeTag), {\n      onNone: () => self,\n      onSome: (scope) => {\n        switch (scope.strategy._tag) {\n          case \"Sequential\":\n            return self\n          case \"Parallel\":\n          case \"ParallelN\":\n            return core.flatMap(\n              core.scopeFork(scope, ExecutionStrategy.sequential),\n              (inner) => scopeExtend(self, inner)\n            )\n        }\n      }\n    })\n  )\n\n/* @internal */\nexport const tagMetricsScoped = (key: string, value: string): Effect.Effect<void, never, Scope.Scope> =>\n  labelMetricsScoped([metricLabel.make(key, value)])\n\n/* @internal */\nexport const labelMetricsScoped = (\n  labels: Iterable<MetricLabel.MetricLabel>\n): Effect.Effect<void, never, Scope.Scope> =>\n  fiberRefLocallyScopedWith(core.currentMetricLabels, (old) => RA.union(old, labels))\n\n/* @internal */\nexport const using = dual<\n  <A, A2, E2, R2>(\n    use: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E | E2, Exclude<R, Scope.Scope> | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    use: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A2, E | E2, Exclude<R, Scope.Scope> | R2>\n>(2, (self, use) => scopedWith((scope) => core.flatMap(scopeExtend(self, scope), use)))\n\n/** @internal */\nexport const validate = dual<\n  <B, E1, R1>(\n    that: Effect.Effect<B, E1, R1>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<[A, B], E | E1, R | R1>,\n  <A, E, R, B, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<B, E1, R1>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<[A, B], E | E1, R | R1>\n>(\n  (args) => core.isEffect(args[1]),\n  (self, that, options) => validateWith(self, that, (a, b) => [a, b], options)\n)\n\n/** @internal */\nexport const validateWith = dual<\n  <B, E1, R1, A, C>(\n    that: Effect.Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<C, E | E1, R | R1>,\n  <A, E, R, B, E1, R1, C>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<C, E | E1, R | R1>\n>((args) => core.isEffect(args[1]), (self, that, f, options) =>\n  core.flatten(zipWithOptions(\n    core.exit(self),\n    core.exit(that),\n    (ea, eb) =>\n      core.exitZipWith(ea, eb, {\n        onSuccess: f,\n        onFailure: (ca, cb) => options?.concurrent ? internalCause.parallel(ca, cb) : internalCause.sequential(ca, cb)\n      }),\n    options\n  )))\n\n/* @internal */\nexport const validateAllPar = dual<\n  <A, B, E, R>(\n    f: (a: A) => Effect.Effect<B, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<Array<B>, Array<E>, R>,\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A) => Effect.Effect<B, E, R>\n  ) => Effect.Effect<Array<B>, Array<E>, R>\n>(2, (elements, f) =>\n  core.flatMap(\n    partition(elements, f),\n    ([es, bs]) =>\n      es.length === 0\n        ? core.succeed(bs)\n        : core.fail(es)\n  ))\n\n/* @internal */\nexport const validateAllParDiscard = dual<\n  <A, B, E, R>(\n    f: (a: A) => Effect.Effect<B, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<void, Array<E>, R>,\n  <A, B, E, R>(elements: Iterable<A>, f: (a: A) => Effect.Effect<B, E, R>) => Effect.Effect<void, Array<E>, R>\n>(2, (elements, f) =>\n  core.flatMap(\n    partition(elements, f),\n    ([es, _]) =>\n      es.length === 0\n        ? core.void\n        : core.fail(es)\n  ))\n\n/* @internal */\nexport const validateFirst = dual<\n  <A, B, E, R>(f: (a: A, i: number) => Effect.Effect<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }) => (elements: Iterable<A>) => Effect.Effect<B, Array<E>, R>,\n  <A, B, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }) => Effect.Effect<B, Array<E>, R>\n>(\n  (args) => Predicate.isIterable(args[0]),\n  (elements, f, options) => core.flip(forEach(elements, (a, i) => core.flip(f(a, i)), options))\n)\n\n/* @internal */\nexport const withClockScoped = <C extends Clock.Clock>(c: C) =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(clock.clockTag, c))\n\n/* @internal */\nexport const withRandomScoped = <A extends Random.Random>(value: A) =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(randomTag, value))\n\n/* @internal */\nexport const withConfigProviderScoped = (provider: ConfigProvider) =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(configProviderTag, provider))\n\n/* @internal */\nexport const withEarlyRelease = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<[Effect.Effect<void>, A], E, R | Scope.Scope> =>\n  scopeWith((parent) =>\n    core.flatMap(core.scopeFork(parent, executionStrategy.sequential), (child) =>\n      pipe(\n        self,\n        scopeExtend(child),\n        core.map((value) => [\n          core.fiberIdWith((fiberId) => core.scopeClose(child, core.exitInterrupt(fiberId))),\n          value\n        ])\n      ))\n  )\n\n/** @internal */\nexport const zipOptions = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>\n>((args) => core.isEffect(args[1]), (\n  self,\n  that,\n  options\n) => zipWithOptions(self, that, (a, b) => [a, b], options))\n\n/** @internal */\nexport const zipLeftOptions = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<A, E | E2, R | R2>\n>(\n  (args) => core.isEffect(args[1]),\n  (self, that, options) => {\n    if (options?.concurrent !== true && (options?.batching === undefined || options.batching === false)) {\n      return core.zipLeft(self, that)\n    }\n    return zipWithOptions(self, that, (a, _) => a, options)\n  }\n)\n\n/** @internal */\nexport const zipRightOptions: {\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect.Effect<A2, E2 | E, R2 | R>\n} = dual((args) => core.isEffect(args[1]), <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>,\n  options?: {\n    readonly concurrent?: boolean | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n): Effect.Effect<A2, E2 | E, R2 | R> => {\n  if (options?.concurrent !== true && (options?.batching === undefined || options.batching === false)) {\n    return core.zipRight(self, that)\n  }\n  return zipWithOptions(self, that, (_, b) => b, options)\n})\n\n/** @internal */\nexport const zipWithOptions: {\n  <A2, E2, R2, A, B>(\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2, B>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect.Effect<B, E2 | E, R2 | R>\n} = dual((args) => core.isEffect(args[1]), <A, E, R, A2, E2, R2, B>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>,\n  f: (a: A, b: A2) => B,\n  options?: {\n    readonly concurrent?: boolean | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n): Effect.Effect<B, E2 | E, R2 | R> =>\n  core.map(\n    all([self, that], {\n      concurrency: options?.concurrent ? 2 : 1,\n      batching: options?.batching,\n      concurrentFinalizers: options?.concurrentFinalizers\n    }),\n    ([a, a2]) => f(a, a2)\n  ))\n\n/* @internal */\nexport const withRuntimeFlagsScoped = (\n  update: RuntimeFlagsPatch.RuntimeFlagsPatch\n): Effect.Effect<void, never, Scope.Scope> => {\n  if (update === RuntimeFlagsPatch.empty) {\n    return core.void\n  }\n  return pipe(\n    core.runtimeFlags,\n    core.flatMap((runtimeFlags) => {\n      const updatedRuntimeFlags = runtimeFlags_.patch(runtimeFlags, update)\n      const revertRuntimeFlags = runtimeFlags_.diff(updatedRuntimeFlags, runtimeFlags)\n      return pipe(\n        core.updateRuntimeFlags(update),\n        core.zipRight(addFinalizer(() => core.updateRuntimeFlags(revertRuntimeFlags))),\n        core.asVoid\n      )\n    }),\n    core.uninterruptible\n  )\n}\n\n// circular with Scope\n\n/** @internal */\nexport const scopeTag = Context.GenericTag<Scope.Scope>(\"effect/Scope\")\n\n/* @internal */\nexport const scope: Effect.Effect<Scope.Scope, never, Scope.Scope> = scopeTag\n\n/** @internal */\nexport interface ScopeImpl extends Scope.CloseableScope {\n  state: {\n    readonly _tag: \"Open\"\n    readonly finalizers: Map<{}, Scope.Scope.Finalizer>\n  } | {\n    readonly _tag: \"Closed\"\n    readonly exit: Exit.Exit<unknown, unknown>\n  }\n}\n\nconst scopeUnsafeAddFinalizer = (scope: ScopeImpl, fin: Scope.Scope.Finalizer): void => {\n  if (scope.state._tag === \"Open\") {\n    scope.state.finalizers.set({}, fin)\n  }\n}\n\nconst ScopeImplProto: Omit<ScopeImpl, \"strategy\" | \"state\"> = {\n  [core.ScopeTypeId]: core.ScopeTypeId,\n  [core.CloseableScopeTypeId]: core.CloseableScopeTypeId,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  fork(this: ScopeImpl, strategy) {\n    return core.sync(() => {\n      const newScope = scopeUnsafeMake(strategy)\n      if (this.state._tag === \"Closed\") {\n        newScope.state = this.state\n        return newScope\n      }\n      const key = {}\n      const fin = (exit: Exit.Exit<unknown, unknown>) => newScope.close(exit)\n      this.state.finalizers.set(key, fin)\n      scopeUnsafeAddFinalizer(newScope, (_) =>\n        core.sync(() => {\n          if (this.state._tag === \"Open\") {\n            this.state.finalizers.delete(key)\n          }\n        }))\n      return newScope\n    })\n  },\n  close(this: ScopeImpl, exit) {\n    return core.suspend(() => {\n      if (this.state._tag === \"Closed\") {\n        return core.void\n      }\n      const finalizers = Array.from(this.state.finalizers.values()).reverse()\n      this.state = { _tag: \"Closed\", exit }\n      if (finalizers.length === 0) {\n        return core.void\n      }\n      return executionStrategy.isSequential(this.strategy) ?\n        pipe(\n          core.forEachSequential(finalizers, (fin) => core.exit(fin(exit))),\n          core.flatMap((results) =>\n            pipe(\n              core.exitCollectAll(results),\n              Option.map(core.exitAsVoid),\n              Option.getOrElse(() => core.exitVoid)\n            )\n          )\n        ) :\n        executionStrategy.isParallel(this.strategy) ?\n        pipe(\n          forEachParUnbounded(finalizers, (fin) => core.exit(fin(exit)), false),\n          core.flatMap((results) =>\n            pipe(\n              core.exitCollectAll(results, { parallel: true }),\n              Option.map(core.exitAsVoid),\n              Option.getOrElse(() => core.exitVoid)\n            )\n          )\n        ) :\n        pipe(\n          forEachParN(finalizers, this.strategy.parallelism, (fin) => core.exit(fin(exit)), false),\n          core.flatMap((results) =>\n            pipe(\n              core.exitCollectAll(results, { parallel: true }),\n              Option.map(core.exitAsVoid),\n              Option.getOrElse(() => core.exitVoid)\n            )\n          )\n        )\n    })\n  },\n  addFinalizer(this: ScopeImpl, fin) {\n    return core.suspend(() => {\n      if (this.state._tag === \"Closed\") {\n        return fin(this.state.exit)\n      }\n      this.state.finalizers.set({}, fin)\n      return core.void\n    })\n  }\n}\n\nconst scopeUnsafeMake = (\n  strategy: ExecutionStrategy.ExecutionStrategy = executionStrategy.sequential\n): ScopeImpl => {\n  const scope = Object.create(ScopeImplProto)\n  scope.strategy = strategy\n  scope.state = { _tag: \"Open\", finalizers: new Map() }\n  return scope\n}\n\n/* @internal */\nexport const scopeMake = (\n  strategy: ExecutionStrategy.ExecutionStrategy = executionStrategy.sequential\n): Effect.Effect<Scope.Scope.Closeable> => core.sync(() => scopeUnsafeMake(strategy))\n\n/* @internal */\nexport const scopeExtend = dual<\n  (scope: Scope.Scope) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: Scope.Scope) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>\n>(\n  2,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: Scope.Scope) =>\n    core.mapInputContext<A, E, R, Exclude<R, Scope.Scope>>(\n      effect,\n      // @ts-expect-error\n      Context.merge(Context.make(scopeTag, scope))\n    )\n)\n\n/* @internal */\nexport const scopeUse = dual<\n  (\n    scope: Scope.Scope.Closeable\n  ) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>,\n  <A, E, R>(\n    effect: Effect.Effect<A, E, R>,\n    scope: Scope.Scope.Closeable\n  ) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>\n>(2, (effect, scope) =>\n  pipe(\n    effect,\n    scopeExtend(scope),\n    core.onExit((exit) => scope.close(exit))\n  ))\n\n// circular with Supervisor\n\n/** @internal */\nexport const fiberRefUnsafeMakeSupervisor = (\n  initial: Supervisor.Supervisor<any>\n): FiberRef.FiberRef<Supervisor.Supervisor<any>> =>\n  core.fiberRefUnsafeMakePatch(initial, {\n    differ: SupervisorPatch.differ,\n    fork: SupervisorPatch.empty\n  })\n\n// circular with FiberRef\n\n/* @internal */\nexport const fiberRefLocallyScoped = dual<\n  <A>(value: A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void, never, Scope.Scope>,\n  <A>(self: FiberRef.FiberRef<A>, value: A) => Effect.Effect<void, never, Scope.Scope>\n>(2, (self, value) =>\n  core.asVoid(\n    acquireRelease(\n      core.flatMap(\n        core.fiberRefGet(self),\n        (oldValue) => core.as(core.fiberRefSet(self, value), oldValue)\n      ),\n      (oldValue) => core.fiberRefSet(self, oldValue)\n    )\n  ))\n\n/* @internal */\nexport const fiberRefLocallyScopedWith = dual<\n  <A>(f: (a: A) => A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void, never, Scope.Scope>,\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<void, never, Scope.Scope>\n>(2, (self, f) => core.fiberRefGetWith(self, (a) => fiberRefLocallyScoped(self, f(a))))\n\n/* @internal */\nexport const fiberRefMake = <A>(\n  initial: A,\n  options?: {\n    readonly fork?: ((a: A) => A) | undefined\n    readonly join?: ((left: A, right: A) => A) | undefined\n  }\n): Effect.Effect<FiberRef.FiberRef<A>, never, Scope.Scope> =>\n  fiberRefMakeWith(() => core.fiberRefUnsafeMake(initial, options))\n\n/* @internal */\nexport const fiberRefMakeWith = <Value>(\n  ref: LazyArg<FiberRef.FiberRef<Value>>\n): Effect.Effect<FiberRef.FiberRef<Value>, never, Scope.Scope> =>\n  acquireRelease(\n    core.tap(core.sync(ref), (ref) => core.fiberRefUpdate(ref, identity)),\n    (fiberRef) => core.fiberRefDelete(fiberRef)\n  )\n\n/* @internal */\nexport const fiberRefMakeContext = <A>(\n  initial: Context.Context<A>\n): Effect.Effect<FiberRef.FiberRef<Context.Context<A>>, never, Scope.Scope> =>\n  fiberRefMakeWith(() => core.fiberRefUnsafeMakeContext(initial))\n\n/* @internal */\nexport const fiberRefMakeRuntimeFlags = (\n  initial: RuntimeFlags.RuntimeFlags\n): Effect.Effect<FiberRef.FiberRef<RuntimeFlags.RuntimeFlags>, never, Scope.Scope> =>\n  fiberRefMakeWith(() => core.fiberRefUnsafeMakeRuntimeFlags(initial))\n\n/** @internal */\nexport const currentRuntimeFlags: FiberRef.FiberRef<RuntimeFlags.RuntimeFlags> = core.fiberRefUnsafeMakeRuntimeFlags(\n  runtimeFlags_.none\n)\n\n/** @internal */\nexport const currentSupervisor: FiberRef.FiberRef<Supervisor.Supervisor<any>> = fiberRefUnsafeMakeSupervisor(\n  supervisor.none\n)\n\n// circular with Fiber\n\n/* @internal */\nexport const fiberAwaitAll = <const T extends Iterable<Fiber.Fiber<any, any>>>(\n  fibers: T\n): Effect.Effect<\n  [T] extends [ReadonlyArray<infer U>]\n    ? number extends T[\"length\"] ? Array<U extends Fiber.Fiber<infer A, infer E> ? Exit.Exit<A, E> : never>\n    : { -readonly [K in keyof T]: T[K] extends Fiber.Fiber<infer A, infer E> ? Exit.Exit<A, E> : never }\n    : Array<T extends Iterable<infer U> ? U extends Fiber.Fiber<infer A, infer E> ? Exit.Exit<A, E> : never : never>\n> => forEach(fibers, internalFiber._await) as any\n\n/** @internal */\nexport const fiberAll = <A, E>(fibers: Iterable<Fiber.Fiber<A, E>>): Fiber.Fiber<Array<A>, E> => {\n  const _fiberAll = {\n    ...Effectable.CommitPrototype,\n    commit() {\n      return internalFiber.join(this)\n    },\n    [internalFiber.FiberTypeId]: internalFiber.fiberVariance,\n    id: () =>\n      RA.fromIterable(fibers).reduce((id, fiber) => FiberId.combine(id, fiber.id()), FiberId.none as FiberId.FiberId),\n    await: core.exit(forEachParUnbounded(fibers, (fiber) => core.flatten(fiber.await), false)),\n    children: core.map(forEachParUnbounded(fibers, (fiber) => fiber.children, false), RA.flatten),\n    inheritAll: core.forEachSequentialDiscard(fibers, (fiber) => fiber.inheritAll),\n    poll: core.map(\n      core.forEachSequential(fibers, (fiber) => fiber.poll),\n      RA.reduceRight(\n        Option.some<Exit.Exit<Array<A>, E>>(core.exitSucceed(new Array())),\n        (optionB, optionA) => {\n          switch (optionA._tag) {\n            case \"None\": {\n              return Option.none()\n            }\n            case \"Some\": {\n              switch (optionB._tag) {\n                case \"None\": {\n                  return Option.none()\n                }\n                case \"Some\": {\n                  return Option.some(\n                    core.exitZipWith(optionA.value, optionB.value, {\n                      onSuccess: (a, chunk) => [a, ...chunk],\n                      onFailure: internalCause.parallel\n                    })\n                  )\n                }\n              }\n            }\n          }\n        }\n      )\n    ),\n    interruptAsFork: (fiberId: FiberId.FiberId) =>\n      core.forEachSequentialDiscard(fibers, (fiber) => fiber.interruptAsFork(fiberId))\n  }\n  return _fiberAll\n}\n\n/* @internal */\nexport const fiberInterruptFork = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<void> =>\n  core.asVoid(forkDaemon(core.interruptFiber(self)))\n\n/* @internal */\nexport const fiberJoinAll = <A, E>(fibers: Iterable<Fiber.Fiber<A, E>>): Effect.Effect<Array<A>, E> =>\n  internalFiber.join(fiberAll(fibers))\n\n/* @internal */\nexport const fiberScoped = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<Fiber.Fiber<A, E>, never, Scope.Scope> =>\n  acquireRelease(core.succeed(self), core.interruptFiber)\n\n//\n// circular race\n//\n\n/** @internal */\nexport const raceWith = dual<\n  <A1, E1, R1, E, A, A2, E2, R2, A3, E3, R3>(\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect.Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect.Effect<A3, E3, R3>\n    }\n  ) => <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>,\n  <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect.Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect.Effect<A3, E3, R3>\n    }\n  ) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>\n>(3, (self, other, options) =>\n  raceFibersWith(self, other, {\n    onSelfWin: (winner, loser) =>\n      core.flatMap(winner.await, (exit) => {\n        switch (exit._tag) {\n          case OpCodes.OP_SUCCESS: {\n            return core.flatMap(\n              winner.inheritAll,\n              () => options.onSelfDone(exit, loser)\n            )\n          }\n          case OpCodes.OP_FAILURE: {\n            return options.onSelfDone(exit, loser)\n          }\n        }\n      }),\n    onOtherWin: (winner, loser) =>\n      core.flatMap(winner.await, (exit) => {\n        switch (exit._tag) {\n          case OpCodes.OP_SUCCESS: {\n            return core.flatMap(\n              winner.inheritAll,\n              () => options.onOtherDone(exit, loser)\n            )\n          }\n          case OpCodes.OP_FAILURE: {\n            return options.onOtherDone(exit, loser)\n          }\n        }\n      })\n  }))\n\n/** @internal */\nexport const disconnect = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.uninterruptibleMask((restore) =>\n    core.fiberIdWith((fiberId) =>\n      core.flatMap(forkDaemon(restore(self)), (fiber) =>\n        pipe(\n          restore(internalFiber.join(fiber)),\n          core.onInterrupt(() => pipe(fiber, internalFiber.interruptAsFork(fiberId)))\n        ))\n    )\n  )\n\n/** @internal */\nexport const race = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A | A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A | A2, E | E2, R | R2>\n>(\n  2,\n  (self, that) =>\n    core.fiberIdWith((parentFiberId) =>\n      raceWith(self, that, {\n        onSelfDone: (exit, right) =>\n          core.exitMatchEffect(exit, {\n            onFailure: (cause) =>\n              pipe(\n                internalFiber.join(right),\n                internalEffect.mapErrorCause((cause2) => internalCause.parallel(cause, cause2))\n              ),\n            onSuccess: (value) =>\n              pipe(\n                right,\n                core.interruptAsFiber(parentFiberId),\n                core.as(value)\n              )\n          }),\n        onOtherDone: (exit, left) =>\n          core.exitMatchEffect(exit, {\n            onFailure: (cause) =>\n              pipe(\n                internalFiber.join(left),\n                internalEffect.mapErrorCause((cause2) => internalCause.parallel(cause2, cause))\n              ),\n            onSuccess: (value) =>\n              pipe(\n                left,\n                core.interruptAsFiber(parentFiberId),\n                core.as(value)\n              )\n          })\n      })\n    )\n)\n\n/** @internal */\nexport const raceFibersWith = dual<\n  <A1, E1, R1, E, A, A2, E2, R2, A3, E3, R3>(\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfWin: (\n        winner: Fiber.RuntimeFiber<A, E>,\n        loser: Fiber.RuntimeFiber<A1, E1>\n      ) => Effect.Effect<A2, E2, R2>\n      readonly onOtherWin: (\n        winner: Fiber.RuntimeFiber<A1, E1>,\n        loser: Fiber.RuntimeFiber<A, E>\n      ) => Effect.Effect<A3, E3, R3>\n      readonly selfScope?: fiberScope.FiberScope | undefined\n      readonly otherScope?: fiberScope.FiberScope | undefined\n    }\n  ) => <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>,\n  <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfWin: (\n        winner: Fiber.RuntimeFiber<A, E>,\n        loser: Fiber.RuntimeFiber<A1, E1>\n      ) => Effect.Effect<A2, E2, R2>\n      readonly onOtherWin: (\n        winner: Fiber.RuntimeFiber<A1, E1>,\n        loser: Fiber.RuntimeFiber<A, E>\n      ) => Effect.Effect<A3, E3, R3>\n      readonly selfScope?: fiberScope.FiberScope | undefined\n      readonly otherScope?: fiberScope.FiberScope | undefined\n    }\n  ) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>\n>(3, <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n  self: Effect.Effect<A, E, R>,\n  other: Effect.Effect<A1, E1, R1>,\n  options: {\n    readonly onSelfWin: (\n      winner: Fiber.RuntimeFiber<A, E>,\n      loser: Fiber.RuntimeFiber<A1, E1>\n    ) => Effect.Effect<A2, E2, R2>\n    readonly onOtherWin: (\n      winner: Fiber.RuntimeFiber<A1, E1>,\n      loser: Fiber.RuntimeFiber<A, E>\n    ) => Effect.Effect<A3, E3, R3>\n    readonly selfScope?: fiberScope.FiberScope | undefined\n    readonly otherScope?: fiberScope.FiberScope | undefined\n  }\n) =>\n  core.withFiberRuntime((parentFiber, parentStatus) => {\n    const parentRuntimeFlags = parentStatus.runtimeFlags\n    const raceIndicator = MRef.make(true)\n    const leftFiber: FiberRuntime<A, E> = unsafeMakeChildFiber(\n      self,\n      parentFiber,\n      parentRuntimeFlags,\n      options.selfScope\n    )\n    const rightFiber: FiberRuntime<A1, E1> = unsafeMakeChildFiber(\n      other,\n      parentFiber,\n      parentRuntimeFlags,\n      options.otherScope\n    )\n    return core.async((cb) => {\n      leftFiber.addObserver(() => completeRace(leftFiber, rightFiber, options.onSelfWin, raceIndicator, cb))\n      rightFiber.addObserver(() => completeRace(rightFiber, leftFiber, options.onOtherWin, raceIndicator, cb))\n      leftFiber.startFork(self)\n      rightFiber.startFork(other)\n    }, FiberId.combine(leftFiber.id(), rightFiber.id()))\n  }))\n\nconst completeRace = <A2, A3, E2, E3, R, R1, R2, R3>(\n  winner: Fiber.RuntimeFiber<any, any>,\n  loser: Fiber.RuntimeFiber<any, any>,\n  cont: (winner: Fiber.RuntimeFiber<any, any>, loser: Fiber.RuntimeFiber<any, any>) => Effect.Effect<any, any, any>,\n  ab: MRef.MutableRef<boolean>,\n  cb: (_: Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>) => void\n): void => {\n  if (MRef.compareAndSet(true, false)(ab)) {\n    cb(cont(winner, loser))\n  }\n}\n\n/** @internal */\nexport const ensuring: {\n  <X, R1>(\n    finalizer: Effect.Effect<X, never, R1>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R1 | R>\n  <A, E, R, X, R1>(self: Effect.Effect<A, E, R>, finalizer: Effect.Effect<X, never, R1>): Effect.Effect<A, E, R1 | R>\n} = dual(\n  2,\n  <A, E, R, X, R1>(self: Effect.Effect<A, E, R>, finalizer: Effect.Effect<X, never, R1>): Effect.Effect<A, E, R1 | R> =>\n    core.uninterruptibleMask((restore) =>\n      core.matchCauseEffect(restore(self), {\n        onFailure: (cause1) =>\n          core.matchCauseEffect(finalizer, {\n            onFailure: (cause2) => core.failCause(internalCause.sequential(cause1, cause2)),\n            onSuccess: () => core.failCause(cause1)\n          }),\n        onSuccess: (a) => core.as(finalizer, a)\n      })\n    )\n)\n\n/** @internal */\nexport const invokeWithInterrupt: <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  entries: ReadonlyArray<Entry<unknown>>,\n  onInterrupt?: () => void\n) => Effect.Effect<void, E, R> = <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  entries: ReadonlyArray<Entry<unknown>>,\n  onInterrupt?: () => void\n) =>\n  core.fiberIdWith((id) =>\n    core.flatMap(\n      core.flatMap(\n        forkDaemon(core.interruptible(self)),\n        (processing) =>\n          core.async<void, E>((cb) => {\n            const counts = entries.map((_) => _.listeners.count)\n            const checkDone = () => {\n              if (counts.every((count) => count === 0)) {\n                if (\n                  entries.every((_) => {\n                    if (_.result.state.current._tag === \"Pending\") {\n                      return true\n                    } else if (\n                      _.result.state.current._tag === \"Done\" &&\n                      core.exitIsExit(_.result.state.current.effect) &&\n                      _.result.state.current.effect._tag === \"Failure\" &&\n                      internalCause.isInterrupted(_.result.state.current.effect.cause)\n                    ) {\n                      return true\n                    } else {\n                      return false\n                    }\n                  })\n                ) {\n                  cleanup.forEach((f) => f())\n                  onInterrupt?.()\n                  cb(core.interruptFiber(processing))\n                }\n              }\n            }\n            processing.addObserver((exit) => {\n              cleanup.forEach((f) => f())\n              cb(exit)\n            })\n            const cleanup = entries.map((r, i) => {\n              const observer = (count: number) => {\n                counts[i] = count\n                checkDone()\n              }\n              r.listeners.addObserver(observer)\n              return () => r.listeners.removeObserver(observer)\n            })\n            checkDone()\n            return core.sync(() => {\n              cleanup.forEach((f) => f())\n            })\n          })\n      ),\n      () =>\n        core.suspend(() => {\n          const residual = entries.flatMap((entry) => {\n            if (!entry.state.completed) {\n              return [entry]\n            }\n            return []\n          })\n          return core.forEachSequentialDiscard(\n            residual,\n            (entry) => complete(entry.request as any, core.exitInterrupt(id))\n          )\n        })\n    )\n  )\n\n/** @internal */\nexport const interruptWhenPossible = dual<\n  (all: Iterable<Request<any, any>>) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<void, E, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    all: Iterable<Request<any, any>>\n  ) => Effect.Effect<void, E, R>\n>(2, (self, all) =>\n  core.fiberRefGetWith(\n    currentRequestMap,\n    (map) =>\n      core.suspend(() => {\n        const entries = RA.fromIterable(all).flatMap((_) => map.has(_) ? [map.get(_)!] : [])\n        return invokeWithInterrupt(self, entries)\n      })\n  ))\n\n// circular Tracer\n\n/** @internal */\nexport const makeSpanScoped = (\n  name: string,\n  options?: Tracer.SpanOptions | undefined\n): Effect.Effect<Tracer.Span, never, Scope.Scope> => {\n  options = tracer.addSpanStackTrace(options)\n  return core.uninterruptible(\n    core.withFiberRuntime((fiber) => {\n      const scope = Context.unsafeGet(fiber.getFiberRef(core.currentContext), scopeTag)\n      const span = internalEffect.unsafeMakeSpan(fiber, name, options)\n      const timingEnabled = fiber.getFiberRef(core.currentTracerTimingEnabled)\n      const clock_ = Context.get(fiber.getFiberRef(defaultServices.currentServices), clock.clockTag)\n      return core.as(\n        core.scopeAddFinalizerExit(scope, (exit) => internalEffect.endSpan(span, exit, clock_, timingEnabled)),\n        span\n      )\n    })\n  )\n}\n\n/* @internal */\nexport const withTracerScoped = (value: Tracer.Tracer): Effect.Effect<void, never, Scope.Scope> =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(tracer.tracerTag, value))\n\n/** @internal */\nexport const withSpanScoped: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Scope.Scope | Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions\n  ): Effect.Effect<A, E, Scope.Scope | Exclude<R, Tracer.ParentSpan>>\n} = function() {\n  const dataFirst = typeof arguments[0] !== \"string\"\n  const name = dataFirst ? arguments[1] : arguments[0]\n  const options = tracer.addSpanStackTrace(dataFirst ? arguments[2] : arguments[1])\n  if (dataFirst) {\n    const self = arguments[0]\n    return core.flatMap(\n      makeSpanScoped(name, tracer.addSpanStackTrace(options)),\n      (span) => internalEffect.provideService(self, tracer.spanTag, span)\n    )\n  }\n  return (self: Effect.Effect<any, any, any>) =>\n    core.flatMap(\n      makeSpanScoped(name, tracer.addSpanStackTrace(options)),\n      (span) => internalEffect.provideService(self, tracer.spanTag, span)\n    )\n} as any\n", "/**\n * @since 2.0.0\n */\nimport type { LazyArg } from \"./Function.js\"\nimport * as internal from \"./internal/executionStrategy.js\"\n\n/**\n * Describes a strategy for evaluating multiple effects, potentially in\n * parallel.\n *\n * There are 3 possible execution strategies: `Sequential`, `Parallel`,\n * `ParallelN`.\n *\n * @since 2.0.0\n * @category models\n */\nexport type ExecutionStrategy = Sequential | Parallel | ParallelN\n\n/**\n * Execute effects sequentially.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Sequential {\n  readonly _tag: \"Sequential\"\n}\n\n/**\n * Execute effects in parallel.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Parallel {\n  readonly _tag: \"Parallel\"\n}\n\n/**\n * Execute effects in parallel, up to the specified number of concurrent fibers.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface ParallelN {\n  readonly _tag: \"ParallelN\"\n  readonly parallelism: number\n}\n\n/**\n * Execute effects sequentially.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sequential: ExecutionStrategy = internal.sequential\n\n/**\n * Execute effects in parallel.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const parallel: ExecutionStrategy = internal.parallel\n\n/**\n * Execute effects in parallel, up to the specified number of concurrent fibers.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const parallelN: (parallelism: number) => ExecutionStrategy = internal.parallelN\n\n/**\n * Returns `true` if the specified `ExecutionStrategy` is an instance of\n * `Sequential`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSequential: (self: ExecutionStrategy) => self is Sequential = internal.isSequential\n\n/**\n * Returns `true` if the specified `ExecutionStrategy` is an instance of\n * `Sequential`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isParallel: (self: ExecutionStrategy) => self is Parallel = internal.isParallel\n\n/**\n * Returns `true` if the specified `ExecutionStrategy` is an instance of\n * `Sequential`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isParallelN: (self: ExecutionStrategy) => self is ParallelN = internal.isParallelN\n\n/**\n * Folds over the specified `ExecutionStrategy` using the provided case\n * functions.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  /**\n   * Folds over the specified `ExecutionStrategy` using the provided case\n   * functions.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <A>(\n   options: {\n     readonly onSequential: LazyArg<A>\n     readonly onParallel: LazyArg<A>\n     readonly onParallelN: (n: number) => A\n   }\n  ): (self: ExecutionStrategy) => A\n  /**\n   * Folds over the specified `ExecutionStrategy` using the provided case\n   * functions.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <A>(\n   self: ExecutionStrategy,\n   options: {\n     readonly onSequential: LazyArg<A>\n     readonly onParallel: LazyArg<A>\n     readonly onParallelN: (n: number) => A\n   }\n  ): A\n} = internal.match\n", "import type * as ExecutionStrategy from \"../ExecutionStrategy.js\"\nimport { dual } from \"../Function.js\"\nimport type { LazyArg } from \"../Function.js\"\n\n/** @internal */\nexport const OP_SEQUENTIAL = \"Sequential\" as const\n\n/** @internal */\nexport type OP_SEQUENTIAL = typeof OP_SEQUENTIAL\n\n/** @internal */\nexport const OP_PARALLEL = \"Parallel\" as const\n\n/** @internal */\nexport type OP_PARALLEL = typeof OP_PARALLEL\n\n/** @internal */\nexport const OP_PARALLEL_N = \"ParallelN\" as const\n\n/** @internal */\nexport type OP_PARALLEL_N = typeof OP_PARALLEL_N\n\n/** @internal */\nexport const sequential: ExecutionStrategy.ExecutionStrategy = { _tag: OP_SEQUENTIAL }\n\n/** @internal */\nexport const parallel: ExecutionStrategy.ExecutionStrategy = { _tag: OP_PARALLEL }\n\n/** @internal */\nexport const parallelN = (parallelism: number): ExecutionStrategy.ExecutionStrategy => ({\n  _tag: OP_PARALLEL_N,\n  parallelism\n})\n\n/** @internal */\nexport const isSequential = (self: ExecutionStrategy.ExecutionStrategy): self is ExecutionStrategy.Sequential =>\n  self._tag === OP_SEQUENTIAL\n\n/** @internal */\nexport const isParallel = (self: ExecutionStrategy.ExecutionStrategy): self is ExecutionStrategy.Parallel =>\n  self._tag === OP_PARALLEL\n\n/** @internal */\nexport const isParallelN = (self: ExecutionStrategy.ExecutionStrategy): self is ExecutionStrategy.ParallelN =>\n  self._tag === OP_PARALLEL_N\n\n/** @internal */\nexport const match = dual<\n  <A>(options: {\n    readonly onSequential: LazyArg<A>\n    readonly onParallel: LazyArg<A>\n    readonly onParallelN: (n: number) => A\n  }) => (self: ExecutionStrategy.ExecutionStrategy) => A,\n  <A>(\n    self: ExecutionStrategy.ExecutionStrategy,\n    options: {\n      readonly onSequential: LazyArg<A>\n      readonly onParallel: LazyArg<A>\n      readonly onParallelN: (n: number) => A\n    }\n  ) => A\n>(2, (self, options) => {\n  switch (self._tag) {\n    case OP_SEQUENTIAL: {\n      return options.onSequential()\n    }\n    case OP_PARALLEL: {\n      return options.onParallel()\n    }\n    case OP_PARALLEL_N: {\n      return options.onParallelN(self.parallelism)\n    }\n  }\n})\n", "/**\n * @since 2.0.0\n */\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as FiberRef from \"./FiberRef.js\"\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport * as internal from \"./internal/fiberRefs/patch.js\"\n\n/**\n * A `FiberRefsPatch` captures the changes in `FiberRef` values made by a single\n * fiber as a value. This allows fibers to apply the changes made by a workflow\n * without inheriting all the `FiberRef` values of the fiber that executed the\n * workflow.\n *\n * @since 2.0.0\n * @category models\n */\nexport type FiberRefsPatch = Empty | Add | Remove | Update | AndThen\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Empty {\n  readonly _tag: \"Empty\"\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Add {\n  readonly _tag: \"Add\"\n  readonly fiberRef: FiberRef.FiberRef<unknown>\n  readonly value: unknown\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Remove {\n  readonly _tag: \"Remove\"\n  readonly fiberRef: FiberRef.FiberRef<unknown>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Update {\n  readonly _tag: \"Update\"\n  readonly fiberRef: FiberRef.FiberRef<unknown>\n  readonly patch: unknown\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface AndThen {\n  readonly _tag: \"AndThen\"\n  readonly first: FiberRefsPatch\n  readonly second: FiberRefsPatch\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: FiberRefsPatch = internal.empty\n\n/**\n * Constructs a patch that describes the changes between the specified\n * collections of `FiberRef`\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const diff: (oldValue: FiberRefs.FiberRefs, newValue: FiberRefs.FiberRefs) => FiberRefsPatch = internal.diff\n\n/**\n * Combines this patch and the specified patch to create a new patch that\n * describes applying the changes from this patch and the specified patch\n * sequentially.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const combine: {\n  /**\n   * Combines this patch and the specified patch to create a new patch that\n   * describes applying the changes from this patch and the specified patch\n   * sequentially.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  (that: FiberRefsPatch): (self: FiberRefsPatch) => FiberRefsPatch\n  /**\n   * Combines this patch and the specified patch to create a new patch that\n   * describes applying the changes from this patch and the specified patch\n   * sequentially.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  (self: FiberRefsPatch, that: FiberRefsPatch): FiberRefsPatch\n} = internal.combine\n\n/**\n * Applies the changes described by this patch to the specified collection\n * of `FiberRef` values.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const patch: {\n  /**\n   * Applies the changes described by this patch to the specified collection\n   * of `FiberRef` values.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  (fiberId: FiberId.Runtime, oldValue: FiberRefs.FiberRefs): (self: FiberRefsPatch) => FiberRefs.FiberRefs\n  /**\n   * Applies the changes described by this patch to the specified collection\n   * of `FiberRef` values.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  (\n   self: FiberRefsPatch,\n   fiberId: FiberId.Runtime,\n   oldValue: FiberRefs.FiberRefs\n  ): FiberRefs.FiberRefs\n} = internal.patch\n", "/**\n * @since 2.0.0\n */\nimport type * as Equal from \"./Equal.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport * as internal from \"./internal/fiberStatus.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberStatusTypeId: unique symbol = internal.FiberStatusTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberStatusTypeId = typeof FiberStatusTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type FiberStatus = Done | Running | Suspended\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Done extends Equal.Equal {\n  readonly _tag: \"Done\"\n  readonly [FiberStatusTypeId]: FiberStatusTypeId\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Running extends Equal.Equal {\n  readonly _tag: \"Running\"\n  readonly [FiberStatusTypeId]: FiberStatusTypeId\n  readonly runtimeFlags: RuntimeFlags.RuntimeFlags\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Suspended extends Equal.Equal {\n  readonly _tag: \"Suspended\"\n  readonly [FiberStatusTypeId]: FiberStatusTypeId\n  readonly runtimeFlags: RuntimeFlags.RuntimeFlags\n  readonly blockingOn: FiberId.FiberId\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const done: FiberStatus = internal.done\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const running: (runtimeFlags: RuntimeFlags.RuntimeFlags) => FiberStatus = internal.running\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const suspended: (runtimeFlags: RuntimeFlags.RuntimeFlags, blockingOn: FiberId.FiberId) => FiberStatus =\n  internal.suspended\n\n/**\n * Returns `true` if the specified value is a `FiberStatus`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFiberStatus: (u: unknown) => u is FiberStatus = internal.isFiberStatus\n\n/**\n * Returns `true` if the specified `FiberStatus` is `Done`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isDone: (self: FiberStatus) => self is Done = internal.isDone\n\n/**\n * Returns `true` if the specified `FiberStatus` is `Running`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRunning: (self: FiberStatus) => self is Running = internal.isRunning\n\n/**\n * Returns `true` if the specified `FiberStatus` is `Suspended`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSuspended: (self: FiberStatus) => self is Suspended = internal.isSuspended\n", "import * as Equal from \"../Equal.js\"\nimport type { FiberId } from \"../FiberId.js\"\nimport type * as FiberStatus from \"../FiberStatus.js\"\nimport { pipe } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type { RuntimeFlags } from \"../RuntimeFlags.js\"\n\nconst FiberStatusSymbolKey = \"effect/FiberStatus\"\n\n/** @internal */\nexport const FiberStatusTypeId: FiberStatus.FiberStatusTypeId = Symbol.for(\n  FiberStatusSymbolKey\n) as FiberStatus.FiberStatusTypeId\n\n/** @internal */\nexport const OP_DONE = \"Done\" as const\n\n/** @internal */\nexport type OP_DONE = typeof OP_DONE\n\n/** @internal */\nexport const OP_RUNNING = \"Running\" as const\n\n/** @internal */\nexport type OP_RUNNING = typeof OP_RUNNING\n\n/** @internal */\nexport const OP_SUSPENDED = \"Suspended\" as const\n\n/** @internal */\nexport type OP_SUSPENDED = typeof OP_SUSPENDED\n\nconst DoneHash = Hash.string(`${FiberStatusSymbolKey}-${OP_DONE}`)\n\n/** @internal */\nclass Done implements FiberStatus.Done {\n  readonly [FiberStatusTypeId]: FiberStatus.FiberStatusTypeId = FiberStatusTypeId\n  readonly _tag = OP_DONE;\n  [Hash.symbol](): number {\n    return DoneHash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFiberStatus(that) && that._tag === OP_DONE\n  }\n}\n\n/** @internal */\nclass Running implements FiberStatus.Running {\n  readonly [FiberStatusTypeId]: FiberStatus.FiberStatusTypeId = FiberStatusTypeId\n  readonly _tag = OP_RUNNING\n  constructor(readonly runtimeFlags: RuntimeFlags) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(FiberStatusSymbolKey),\n      Hash.combine(Hash.hash(this._tag)),\n      Hash.combine(Hash.hash(this.runtimeFlags)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return (\n      isFiberStatus(that) &&\n      that._tag === OP_RUNNING &&\n      this.runtimeFlags === that.runtimeFlags\n    )\n  }\n}\n\n/** @internal */\nclass Suspended implements FiberStatus.Suspended {\n  readonly [FiberStatusTypeId]: FiberStatus.FiberStatusTypeId = FiberStatusTypeId\n  readonly _tag = OP_SUSPENDED\n  constructor(\n    readonly runtimeFlags: RuntimeFlags,\n    readonly blockingOn: FiberId\n  ) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(FiberStatusSymbolKey),\n      Hash.combine(Hash.hash(this._tag)),\n      Hash.combine(Hash.hash(this.runtimeFlags)),\n      Hash.combine(Hash.hash(this.blockingOn)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return (\n      isFiberStatus(that) &&\n      that._tag === OP_SUSPENDED &&\n      this.runtimeFlags === that.runtimeFlags &&\n      Equal.equals(this.blockingOn, that.blockingOn)\n    )\n  }\n}\n\n/** @internal */\nexport const done: FiberStatus.FiberStatus = new Done()\n\n/** @internal */\nexport const running = (runtimeFlags: RuntimeFlags): FiberStatus.FiberStatus => new Running(runtimeFlags)\n\n/** @internal */\nexport const suspended = (\n  runtimeFlags: RuntimeFlags,\n  blockingOn: FiberId\n): FiberStatus.FiberStatus => new Suspended(runtimeFlags, blockingOn)\n\n/** @internal */\nexport const isFiberStatus = (u: unknown): u is FiberStatus.FiberStatus => hasProperty(u, FiberStatusTypeId)\n\n/** @internal */\nexport const isDone = (self: FiberStatus.FiberStatus): self is FiberStatus.Done => self._tag === OP_DONE\n\n/** @internal */\nexport const isRunning = (self: FiberStatus.FiberStatus): self is FiberStatus.Running => self._tag === OP_RUNNING\n\n/** @internal */\nexport const isSuspended = (self: FiberStatus.FiberStatus): self is FiberStatus.Suspended => self._tag === OP_SUSPENDED\n", "/**\n * A lightweight alternative to the `Effect` data type, with a subset of the functionality.\n *\n * @since 3.4.0\n * @experimental\n */\nimport * as Arr from \"./Array.js\"\nimport type { Channel } from \"./Channel.js\"\nimport * as Context from \"./Context.js\"\nimport type { Effect, EffectUnify, EffectUnifyIgnore } from \"./Effect.js\"\nimport * as Effectable from \"./Effectable.js\"\nimport * as Either from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { constTrue, constVoid, dual, identity } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport * as Hash from \"./Hash.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport { format, NodeInspectSymbol, toStringUnknown } from \"./Inspectable.js\"\nimport * as InternalContext from \"./internal/context.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport { StructuralPrototype } from \"./internal/effectable.js\"\nimport * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport { hasProperty, isIterable, isTagged } from \"./Predicate.js\"\nimport type { Sink } from \"./Sink.js\"\nimport type { Stream } from \"./Stream.js\"\nimport type { Concurrency, Covariant, Equals, NoExcessProperties, NotFunction, Simplify } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport { SingleShotGen, YieldWrap, yieldWrapGet } from \"./Utils.js\"\n\n/**\n * @since 3.4.0\n * @experimental\n * @category type ids\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/Micro\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category type ids\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category MicroExit\n */\nexport const MicroExitTypeId: unique symbol = Symbol.for(\n  \"effect/Micro/MicroExit\"\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category MicroExit\n */\nexport type MicroExitTypeId = typeof TypeId\n\n/**\n * A lightweight alternative to the `Effect` data type, with a subset of the functionality.\n *\n * @since 3.4.0\n * @experimental\n * @category models\n */\nexport interface Micro<out A, out E = never, out R = never> extends Effect<A, E, R> {\n  readonly [TypeId]: Micro.Variance<A, E, R>\n  [Symbol.iterator](): MicroIterator<Micro<A, E, R>>\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: MicroUnify<this>\n  [Unify.ignoreSymbol]?: MicroUnifyIgnore\n}\n\n/**\n * @category models\n * @since 3.4.3\n */\nexport interface MicroUnify<A extends { [Unify.typeSymbol]?: any }> extends EffectUnify<A> {\n  Micro?: () => A[Unify.typeSymbol] extends Micro<infer A0, infer E0, infer R0> | infer _ ? Micro<A0, E0, R0> : never\n}\n\n/**\n * @category models\n * @since 3.4.3\n */\nexport interface MicroUnifyIgnore extends EffectUnifyIgnore {\n  Effect?: true\n}\n/**\n * @category type lambdas\n * @since 3.4.1\n */\nexport interface MicroTypeLambda extends TypeLambda {\n  readonly type: Micro<this[\"Target\"], this[\"Out1\"], this[\"Out2\"]>\n}\n\n/**\n * @since 3.4.0\n * @experimental\n */\nexport declare namespace Micro {\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export interface Variance<A, E, R> {\n    _A: Covariant<A>\n    _E: Covariant<E>\n    _R: Covariant<R>\n  }\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Success<T> = T extends Micro<infer _A, infer _E, infer _R> ? _A : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Error<T> = T extends Micro<infer _A, infer _E, infer _R> ? _E : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Context<T> = T extends Micro<infer _A, infer _E, infer _R> ? _R : never\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category guards\n */\nexport const isMicro = (u: unknown): u is Micro<any, any, any> => typeof u === \"object\" && u !== null && TypeId in u\n\n/**\n * @since 3.4.0\n * @experimental\n * @category models\n */\nexport interface MicroIterator<T extends Micro<any, any, any>> {\n  next(...args: ReadonlyArray<any>): IteratorResult<YieldWrap<T>, Micro.Success<T>>\n}\n\n// ----------------------------------------------------------------------------\n// MicroCause\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const MicroCauseTypeId = Symbol.for(\"effect/Micro/MicroCause\")\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport type MicroCauseTypeId = typeof MicroCauseTypeId\n\n/**\n * A `MicroCause` is a data type that represents the different ways a `Micro` can fail.\n *\n * **Details**\n *\n * `MicroCause` comes in three forms:\n *\n * - `Die`: Indicates an unforeseen defect that wasn't planned for in the system's logic.\n * - `Fail`: Covers anticipated errors that are recognized and typically handled within the application.\n * - `Interrupt`: Signifies an operation that has been purposefully stopped.\n *\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport type MicroCause<E> =\n  | MicroCause.Die\n  | MicroCause.Fail<E>\n  | MicroCause.Interrupt\n\n/**\n * @since 3.6.6\n * @experimental\n * @category guards\n */\nexport const isMicroCause = (self: unknown): self is MicroCause<unknown> => hasProperty(self, MicroCauseTypeId)\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport declare namespace MicroCause {\n  /**\n   * @since 3.4.6\n   * @experimental\n   */\n  export type Error<T> = T extends MicroCause.Fail<infer E> ? E : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export interface Proto<Tag extends string, E> extends Pipeable, globalThis.Error {\n    readonly [MicroCauseTypeId]: {\n      _E: Covariant<E>\n    }\n    readonly _tag: Tag\n    readonly traces: ReadonlyArray<string>\n  }\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  export interface Die extends Proto<\"Die\", never> {\n    readonly defect: unknown\n  }\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  export interface Fail<E> extends Proto<\"Fail\", E> {\n    readonly error: E\n  }\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  export interface Interrupt extends Proto<\"Interrupt\", never> {}\n}\n\nconst microCauseVariance = {\n  _E: identity\n}\n\nabstract class MicroCauseImpl<Tag extends string, E> extends globalThis.Error implements MicroCause.Proto<Tag, E> {\n  readonly [MicroCauseTypeId]: {\n    _E: Covariant<E>\n  }\n  constructor(\n    readonly _tag: Tag,\n    originalError: unknown,\n    readonly traces: ReadonlyArray<string>\n  ) {\n    const causeName = `MicroCause.${_tag}`\n    let name: string\n    let message: string\n    let stack: string\n    if (originalError instanceof globalThis.Error) {\n      name = `(${causeName}) ${originalError.name}`\n      message = originalError.message as string\n      const messageLines = message.split(\"\\n\").length\n      stack = originalError.stack\n        ? `(${causeName}) ${\n          originalError.stack\n            .split(\"\\n\")\n            .slice(0, messageLines + 3)\n            .join(\"\\n\")\n        }`\n        : `${name}: ${message}`\n    } else {\n      name = causeName\n      message = toStringUnknown(originalError, 0)\n      stack = `${name}: ${message}`\n    }\n    if (traces.length > 0) {\n      stack += `\\n    ${traces.join(\"\\n    \")}`\n    }\n    super(message)\n    this[MicroCauseTypeId] = microCauseVariance\n    this.name = name\n    this.stack = stack\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n  toString() {\n    return this.stack\n  }\n  [NodeInspectSymbol]() {\n    return this.stack\n  }\n}\n\nclass Fail<E> extends MicroCauseImpl<\"Fail\", E> implements MicroCause.Fail<E> {\n  constructor(\n    readonly error: E,\n    traces: ReadonlyArray<string> = []\n  ) {\n    super(\"Fail\", error, traces)\n  }\n}\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeFail = <E>(\n  error: E,\n  traces: ReadonlyArray<string> = []\n): MicroCause<E> => new Fail(error, traces)\n\nclass Die extends MicroCauseImpl<\"Die\", never> implements MicroCause.Die {\n  constructor(\n    readonly defect: unknown,\n    traces: ReadonlyArray<string> = []\n  ) {\n    super(\"Die\", defect, traces)\n  }\n}\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeDie = (\n  defect: unknown,\n  traces: ReadonlyArray<string> = []\n): MicroCause<never> => new Die(defect, traces)\n\nclass Interrupt extends MicroCauseImpl<\"Interrupt\", never> implements MicroCause.Interrupt {\n  constructor(traces: ReadonlyArray<string> = []) {\n    super(\"Interrupt\", \"interrupted\", traces)\n  }\n}\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeInterrupt = (\n  traces: ReadonlyArray<string> = []\n): MicroCause<never> => new Interrupt(traces)\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeIsFail = <E>(\n  self: MicroCause<E>\n): self is MicroCause.Fail<E> => self._tag === \"Fail\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeIsDie = <E>(self: MicroCause<E>): self is MicroCause.Die => self._tag === \"Die\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeIsInterrupt = <E>(\n  self: MicroCause<E>\n): self is MicroCause.Interrupt => self._tag === \"Interrupt\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeSquash = <E>(self: MicroCause<E>): unknown =>\n  self._tag === \"Fail\" ? self.error : self._tag === \"Die\" ? self.defect : self\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeWithTrace: {\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  (trace: string): <E>(self: MicroCause<E>) => MicroCause<E>\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  <E>(self: MicroCause<E>, trace: string): MicroCause<E>\n} = dual(2, <E>(self: MicroCause<E>, trace: string): MicroCause<E> => {\n  const traces = [...self.traces, trace]\n  switch (self._tag) {\n    case \"Die\":\n      return causeDie(self.defect, traces)\n    case \"Interrupt\":\n      return causeInterrupt(traces)\n    case \"Fail\":\n      return causeFail(self.error, traces)\n  }\n})\n\n// ----------------------------------------------------------------------------\n// MicroFiber\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.11.0\n * @experimental\n * @category MicroFiber\n */\nexport const MicroFiberTypeId = Symbol.for(\"effect/Micro/MicroFiber\")\n\n/**\n * @since 3.11.0\n * @experimental\n * @category MicroFiber\n */\nexport type MicroFiberTypeId = typeof MicroFiberTypeId\n\n/**\n * @since 3.11.0\n * @experimental\n * @category MicroFiber\n */\nexport interface MicroFiber<out A, out E = never> {\n  readonly [MicroFiberTypeId]: MicroFiber.Variance<A, E>\n\n  readonly currentOpCount: number\n  readonly getRef: <I, A>(ref: Context.Reference<I, A>) => A\n  readonly context: Context.Context<never>\n  readonly addObserver: (cb: (exit: MicroExit<A, E>) => void) => () => void\n  readonly unsafeInterrupt: () => void\n  readonly unsafePoll: () => MicroExit<A, E> | undefined\n}\n\n/**\n * @since 3.11.0\n * @experimental\n * @category MicroFiber\n */\nexport declare namespace MicroFiber {\n  /**\n   * @since 3.11.0\n   * @experimental\n   * @category MicroFiber\n   */\n  export interface Variance<out A, out E = never> {\n    readonly _A: Covariant<A>\n    readonly _E: Covariant<E>\n  }\n}\n\nconst fiberVariance = {\n  _A: identity,\n  _E: identity\n}\n\nclass MicroFiberImpl<in out A = any, in out E = any> implements MicroFiber<A, E> {\n  readonly [MicroFiberTypeId]: MicroFiber.Variance<A, E>\n\n  readonly _stack: Array<Primitive> = []\n  readonly _observers: Array<(exit: MicroExit<A, E>) => void> = []\n  _exit: MicroExit<A, E> | undefined\n  public _children: Set<MicroFiberImpl<any, any>> | undefined\n\n  public currentOpCount = 0\n\n  constructor(\n    public context: Context.Context<never>,\n    public interruptible = true\n  ) {\n    this[MicroFiberTypeId] = fiberVariance\n  }\n\n  getRef<I, A>(ref: Context.Reference<I, A>): A {\n    return InternalContext.unsafeGetReference(this.context, ref)\n  }\n\n  addObserver(cb: (exit: MicroExit<A, E>) => void): () => void {\n    if (this._exit) {\n      cb(this._exit)\n      return constVoid\n    }\n    this._observers.push(cb)\n    return () => {\n      const index = this._observers.indexOf(cb)\n      if (index >= 0) {\n        this._observers.splice(index, 1)\n      }\n    }\n  }\n\n  _interrupted = false\n  unsafeInterrupt(): void {\n    if (this._exit) {\n      return\n    }\n    this._interrupted = true\n    if (this.interruptible) {\n      this.evaluate(exitInterrupt as any)\n    }\n  }\n\n  unsafePoll(): MicroExit<A, E> | undefined {\n    return this._exit\n  }\n\n  evaluate(effect: Primitive): void {\n    if (this._exit) {\n      return\n    } else if (this._yielded !== undefined) {\n      const yielded = this._yielded as () => void\n      this._yielded = undefined\n      yielded()\n    }\n    const exit = this.runLoop(effect)\n    if (exit === Yield) {\n      return\n    }\n\n    // the interruptChildren middlware is added in Micro.fork, so it can be\n    // tree-shaken if not used\n    const interruptChildren = fiberMiddleware.interruptChildren && fiberMiddleware.interruptChildren(this)\n    if (interruptChildren !== undefined) {\n      return this.evaluate(flatMap(interruptChildren, () => exit) as any)\n    }\n\n    this._exit = exit\n    for (let i = 0; i < this._observers.length; i++) {\n      this._observers[i](exit)\n    }\n    this._observers.length = 0\n  }\n\n  runLoop(effect: Primitive): MicroExit<A, E> | Yield {\n    let yielding = false\n    let current: Primitive | Yield = effect\n    this.currentOpCount = 0\n    try {\n      while (true) {\n        this.currentOpCount++\n        if (!yielding && this.getRef(CurrentScheduler).shouldYield(this as any)) {\n          yielding = true\n          const prev = current\n          current = flatMap(yieldNow, () => prev as any) as any\n        }\n        current = (current as any)[evaluate](this)\n        if (current === Yield) {\n          const yielded = this._yielded!\n          if (MicroExitTypeId in yielded) {\n            this._yielded = undefined\n            return yielded\n          }\n          return Yield\n        }\n      }\n    } catch (error) {\n      if (!hasProperty(current, evaluate)) {\n        return exitDie(`MicroFiber.runLoop: Not a valid effect: ${String(current)}`)\n      }\n      return exitDie(error)\n    }\n  }\n\n  getCont<S extends successCont | failureCont>(\n    symbol: S\n  ): Primitive & Record<S, (value: any, fiber: MicroFiberImpl) => Primitive> | undefined {\n    while (true) {\n      const op = this._stack.pop()\n      if (!op) return undefined\n      const cont = op[ensureCont] && op[ensureCont](this)\n      if (cont) return { [symbol]: cont } as any\n      if (op[symbol]) return op as any\n    }\n  }\n\n  // cancel the yielded operation, or for the yielded exit value\n  _yielded: MicroExit<any, any> | (() => void) | undefined = undefined\n  yieldWith(value: MicroExit<any, any> | (() => void)): Yield {\n    this._yielded = value\n    return Yield\n  }\n\n  children(): Set<MicroFiber<any, any>> {\n    return this._children ??= new Set()\n  }\n}\n\nconst fiberMiddleware = globalValue(\"effect/Micro/fiberMiddleware\", () => ({\n  interruptChildren: undefined as ((fiber: MicroFiberImpl) => Micro<void> | undefined) | undefined\n}))\n\nconst fiberInterruptChildren = (fiber: MicroFiberImpl) => {\n  if (fiber._children === undefined || fiber._children.size === 0) {\n    return undefined\n  }\n  return fiberInterruptAll(fiber._children)\n}\n\n/**\n * @since 3.11.0\n * @experimental\n * @category MicroFiber\n */\nexport const fiberAwait = <A, E>(self: MicroFiber<A, E>): Micro<MicroExit<A, E>> =>\n  async((resume) => sync(self.addObserver((exit) => resume(succeed(exit)))))\n\n/**\n * @since 3.11.2\n * @experimental\n * @category MicroFiber\n */\nexport const fiberJoin = <A, E>(self: MicroFiber<A, E>): Micro<A, E> => flatten(fiberAwait(self))\n\n/**\n * @since 3.11.0\n * @experimental\n * @category MicroFiber\n */\nexport const fiberInterrupt = <A, E>(self: MicroFiber<A, E>): Micro<void> =>\n  suspend(() => {\n    self.unsafeInterrupt()\n    return asVoid(fiberAwait(self))\n  })\n\n/**\n * @since 3.11.0\n * @experimental\n * @category MicroFiber\n */\nexport const fiberInterruptAll = <A extends Iterable<MicroFiber<any, any>>>(fibers: A): Micro<void> =>\n  suspend(() => {\n    for (const fiber of fibers) fiber.unsafeInterrupt()\n    const iter = fibers[Symbol.iterator]()\n    const wait: Micro<void> = suspend(() => {\n      let result = iter.next()\n      while (!result.done) {\n        if (result.value.unsafePoll()) {\n          result = iter.next()\n          continue\n        }\n        const fiber = result.value\n        return async((resume) => {\n          fiber.addObserver((_) => {\n            resume(wait)\n          })\n        })\n      }\n      return exitVoid\n    })\n    return wait\n  })\n\nconst identifier = Symbol.for(\"effect/Micro/identifier\")\ntype identifier = typeof identifier\n\nconst args = Symbol.for(\"effect/Micro/args\")\ntype args = typeof args\n\nconst evaluate = Symbol.for(\"effect/Micro/evaluate\")\ntype evaluate = typeof evaluate\n\nconst successCont = Symbol.for(\"effect/Micro/successCont\")\ntype successCont = typeof successCont\n\nconst failureCont = Symbol.for(\"effect/Micro/failureCont\")\ntype failureCont = typeof failureCont\n\nconst ensureCont = Symbol.for(\"effect/Micro/ensureCont\")\ntype ensureCont = typeof ensureCont\n\nconst Yield = Symbol.for(\"effect/Micro/Yield\")\ntype Yield = typeof Yield\n\ninterface Primitive {\n  readonly [identifier]: string\n  readonly [successCont]: ((value: unknown, fiber: MicroFiberImpl) => Primitive | Yield) | undefined\n  readonly [failureCont]:\n    | ((cause: MicroCause<unknown>, fiber: MicroFiberImpl) => Primitive | Yield)\n    | undefined\n  readonly [ensureCont]:\n    | ((fiber: MicroFiberImpl) =>\n      | ((value: unknown, fiber: MicroFiberImpl) => Primitive | Yield)\n      | undefined)\n    | undefined\n  [evaluate](fiber: MicroFiberImpl): Primitive | Yield\n}\n\nconst microVariance = {\n  _A: identity,\n  _E: identity,\n  _R: identity\n}\n\nconst MicroProto = {\n  ...Effectable.EffectPrototype,\n  _op: \"Micro\",\n  [TypeId]: microVariance,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this)) as any\n  },\n  toJSON(this: Primitive) {\n    return {\n      _id: \"Micro\",\n      op: this[identifier],\n      ...(args in this ? { args: this[args] } : undefined)\n    }\n  },\n  toString() {\n    return format(this)\n  },\n  [NodeInspectSymbol]() {\n    return format(this)\n  }\n}\n\nfunction defaultEvaluate(_fiber: MicroFiberImpl): Primitive | Yield {\n  return exitDie(`Micro.evaluate: Not implemented`) as any\n}\n\nconst makePrimitiveProto = <Op extends string>(options: {\n  readonly op: Op\n  readonly eval?: (fiber: MicroFiberImpl) => Primitive | Micro<any, any, any> | Yield\n  readonly contA?: (this: Primitive, value: any, fiber: MicroFiberImpl) => Primitive | Micro<any, any, any> | Yield\n  readonly contE?: (\n    this: Primitive,\n    cause: MicroCause<any>,\n    fiber: MicroFiberImpl\n  ) => Primitive | Micro<any, any, any> | Yield\n  readonly ensure?: (this: Primitive, fiber: MicroFiberImpl) => void | ((value: any, fiber: MicroFiberImpl) => void)\n}): Primitive => ({\n  ...MicroProto,\n  [identifier]: options.op,\n  [evaluate]: options.eval ?? defaultEvaluate,\n  [successCont]: options.contA,\n  [failureCont]: options.contE,\n  [ensureCont]: options.ensure\n} as any)\n\nconst makePrimitive = <Fn extends (...args: Array<any>) => any, Single extends boolean = true>(options: {\n  readonly op: string\n  readonly single?: Single\n  readonly eval?: (\n    this: Primitive & { readonly [args]: Single extends true ? Parameters<Fn>[0] : Parameters<Fn> },\n    fiber: MicroFiberImpl\n  ) => Primitive | Micro<any, any, any> | Yield\n  readonly contA?: (\n    this: Primitive & { readonly [args]: Single extends true ? Parameters<Fn>[0] : Parameters<Fn> },\n    value: any,\n    fiber: MicroFiberImpl\n  ) => Primitive | Micro<any, any, any> | Yield\n  readonly contE?: (\n    this: Primitive & { readonly [args]: Single extends true ? Parameters<Fn>[0] : Parameters<Fn> },\n    cause: MicroCause<any>,\n    fiber: MicroFiberImpl\n  ) => Primitive | Micro<any, any, any> | Yield\n  readonly ensure?: (\n    this: Primitive & { readonly [args]: Single extends true ? Parameters<Fn>[0] : Parameters<Fn> },\n    fiber: MicroFiberImpl\n  ) => void | ((value: any, fiber: MicroFiberImpl) => void)\n}): Fn => {\n  const Proto = makePrimitiveProto(options as any)\n  return function() {\n    const self = Object.create(Proto)\n    self[args] = options.single === false ? arguments : arguments[0]\n    return self\n  } as Fn\n}\n\nconst makeExit = <Fn extends (...args: Array<any>) => any, Prop extends string>(options: {\n  readonly op: \"Success\" | \"Failure\"\n  readonly prop: Prop\n  readonly eval: (\n    this:\n      & MicroExit<unknown, unknown>\n      & { [args]: Parameters<Fn>[0] },\n    fiber: MicroFiberImpl<unknown, unknown>\n  ) => Primitive | Yield\n}): Fn => {\n  const Proto = {\n    ...makePrimitiveProto(options),\n    [MicroExitTypeId]: MicroExitTypeId,\n    _tag: options.op,\n    get [options.prop](): any {\n      return (this as any)[args]\n    },\n    toJSON(this: any) {\n      return {\n        _id: \"MicroExit\",\n        _tag: options.op,\n        [options.prop]: this[args]\n      }\n    },\n    [Equal.symbol](this: any, that: any): boolean {\n      return isMicroExit(that) && that._tag === options.op &&\n        Equal.equals(this[args], (that as any)[args])\n    },\n    [Hash.symbol](this: any): number {\n      return Hash.cached(this, Hash.combine(Hash.string(options.op))(Hash.hash(this[args])))\n    }\n  }\n  return function(value: unknown) {\n    const self = Object.create(Proto)\n    self[args] = value\n    self[successCont] = undefined\n    self[failureCont] = undefined\n    self[ensureCont] = undefined\n    return self\n  } as Fn\n}\n\n/**\n * Creates a `Micro` effect that will succeed with the specified constant value.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Micro<A> = makeExit({\n  op: \"Success\",\n  prop: \"value\",\n  eval(fiber) {\n    const cont = fiber.getCont(successCont)\n    return cont ? cont[successCont](this[args], fiber) : fiber.yieldWith(this)\n  }\n})\n\n/**\n * Creates a `Micro` effect that will fail with the specified `MicroCause`.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const failCause: <E>(cause: MicroCause<E>) => Micro<never, E> = makeExit({\n  op: \"Failure\",\n  prop: \"cause\",\n  eval(fiber) {\n    let cont = fiber.getCont(failureCont)\n    while (causeIsInterrupt(this[args]) && cont && fiber.interruptible) {\n      cont = fiber.getCont(failureCont)\n    }\n    return cont ? cont[failureCont](this[args], fiber) : fiber.yieldWith(this)\n  }\n})\n\n/**\n * Creates a `Micro` effect that fails with the given error.\n *\n * This results in a `Fail` variant of the `MicroCause` type, where the error is\n * tracked at the type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const fail = <E>(error: E): Micro<never, E> => failCause(causeFail(error))\n\n/**\n * Creates a `Micro` effect that succeeds with a lazily evaluated value.\n *\n * If the evaluation of the value throws an error, the effect will fail with a\n * `Die` variant of the `MicroCause` type.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const sync: <A>(evaluate: LazyArg<A>) => Micro<A> = makePrimitive({\n  op: \"Sync\",\n  eval(fiber): Primitive | Yield {\n    const value = this[args]()\n    const cont = fiber.getCont(successCont)\n    return cont ? cont[successCont](value, fiber) : fiber.yieldWith(exitSucceed(value))\n  }\n})\n\n/**\n * Lazily creates a `Micro` effect from the given side-effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const suspend: <A, E, R>(evaluate: LazyArg<Micro<A, E, R>>) => Micro<A, E, R> = makePrimitive({\n  op: \"Suspend\",\n  eval(_fiber) {\n    return this[args]()\n  }\n})\n\n/**\n * Pause the execution of the current `Micro` effect, and resume it on the next\n * scheduler tick.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const yieldNowWith: (priority?: number) => Micro<void> = makePrimitive({\n  op: \"Yield\",\n  eval(fiber) {\n    let resumed = false\n    fiber.getRef(CurrentScheduler).scheduleTask(() => {\n      if (resumed) return\n      fiber.evaluate(exitVoid as any)\n    }, this[args] ?? 0)\n    return fiber.yieldWith(() => {\n      resumed = true\n    })\n  }\n})\n\n/**\n * Pause the execution of the current `Micro` effect, and resume it on the next\n * scheduler tick.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const yieldNow: Micro<void> = yieldNowWith(0)\n\n/**\n * Creates a `Micro` effect that will succeed with the value wrapped in `Some`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const succeedSome = <A>(a: A): Micro<Option.Option<A>> => succeed(Option.some(a))\n\n/**\n * Creates a `Micro` effect that succeeds with `None`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const succeedNone: Micro<Option.Option<never>> = succeed(Option.none())\n\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated `MicroCause`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const failCauseSync = <E>(evaluate: LazyArg<MicroCause<E>>): Micro<never, E> =>\n  suspend(() => failCause(evaluate()))\n\n/**\n * Creates a `Micro` effect that will die with the specified error.\n *\n * This results in a `Die` variant of the `MicroCause` type, where the error is\n * not tracked at the type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const die = (defect: unknown): Micro<never> => exitDie(defect)\n\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated error.\n *\n * This results in a `Fail` variant of the `MicroCause` type, where the error is\n * tracked at the type level.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const failSync = <E>(error: LazyArg<E>): Micro<never, E> => suspend(() => fail(error()))\n\n/**\n * Converts an `Option` into a `Micro` effect, that will fail with\n * `NoSuchElementException` if the option is `None`. Otherwise, it will succeed with the\n * value of the option.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const fromOption = <A>(option: Option.Option<A>): Micro<A, NoSuchElementException> =>\n  option._tag === \"Some\" ? succeed(option.value) : fail(new NoSuchElementException({}))\n\n/**\n * Converts an `Either` into a `Micro` effect, that will fail with the left side\n * of the either if it is a `Left`. Otherwise, it will succeed with the right\n * side of the either.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const fromEither = <R, L>(either: Either.Either<R, L>): Micro<R, L> =>\n  either._tag === \"Right\" ? succeed(either.right) : fail(either.left)\n\nconst void_: Micro<void> = succeed(void 0)\nexport {\n  /**\n   * A `Micro` effect that will succeed with `void` (`undefined`).\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category constructors\n   */\n  void_ as void\n}\n\nconst try_ = <A, E>(options: {\n  try: LazyArg<A>\n  catch: (error: unknown) => E\n}): Micro<A, E> =>\n  suspend(() => {\n    try {\n      return succeed(options.try())\n    } catch (err) {\n      return fail(options.catch(err))\n    }\n  })\nexport {\n  /**\n   * The `Micro` equivalent of a try / catch block, which allows you to map\n   * thrown errors to a specific error type.\n   *\n   * @example\n   * ```ts\n   * import { Micro } from \"effect\"\n   *\n   * Micro.try({\n   *   try: () => { throw new Error(\"boom\") },\n   *   catch: (cause) => new Error(\"caught\", { cause })\n   * })\n   * ```\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category constructors\n   */\n  try_ as try\n}\n\n/**\n * Wrap a `Promise` into a `Micro` effect.\n *\n * Any errors will result in a `Die` variant of the `MicroCause` type, where the\n * error is not tracked at the type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const promise = <A>(evaluate: (signal: AbortSignal) => PromiseLike<A>): Micro<A> =>\n  asyncOptions<A>(function(resume, signal) {\n    evaluate(signal!).then(\n      (a) => resume(succeed(a)),\n      (e) => resume(die(e))\n    )\n  }, evaluate.length !== 0)\n\n/**\n * Wrap a `Promise` into a `Micro` effect. Any errors will be caught and\n * converted into a specific error type.\n *\n * @example\n * ```ts\n * import { Micro } from \"effect\"\n *\n * Micro.tryPromise({\n *   try: () => Promise.resolve(\"success\"),\n *   catch: (cause) => new Error(\"caught\", { cause })\n * })\n * ```\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const tryPromise = <A, E>(options: {\n  readonly try: (signal: AbortSignal) => PromiseLike<A>\n  readonly catch: (error: unknown) => E\n}): Micro<A, E> =>\n  asyncOptions<A, E>(function(resume, signal) {\n    try {\n      options.try(signal!).then(\n        (a) => resume(succeed(a)),\n        (e) => resume(fail(options.catch(e)))\n      )\n    } catch (err) {\n      resume(fail(options.catch(err)))\n    }\n  }, options.try.length !== 0)\n\n/**\n * Create a `Micro` effect using the current `MicroFiber`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const withMicroFiber: <A, E = never, R = never>(\n  evaluate: (fiber: MicroFiberImpl<A, E>) => Micro<A, E, R>\n) => Micro<A, E, R> = makePrimitive({\n  op: \"WithMicroFiber\",\n  eval(fiber) {\n    return this[args](fiber)\n  }\n})\n\n/**\n * Flush any yielded effects that are waiting to be executed.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const yieldFlush: Micro<void> = withMicroFiber((fiber) => {\n  fiber.getRef(CurrentScheduler).flush()\n  return exitVoid\n})\n\nconst asyncOptions: <A, E = never, R = never>(\n  register: (\n    resume: (effect: Micro<A, E, R>) => void,\n    signal?: AbortSignal\n  ) => void | Micro<void, never, R>,\n  withSignal: boolean\n) => Micro<A, E, R> = makePrimitive({\n  op: \"Async\",\n  single: false,\n  eval(fiber) {\n    const register = this[args][0]\n    let resumed = false\n    let yielded: boolean | Primitive = false\n    const controller = this[args][1] ? new AbortController() : undefined\n    const onCancel = register((effect) => {\n      if (resumed) return\n      resumed = true\n      if (yielded) {\n        fiber.evaluate(effect as any)\n      } else {\n        yielded = effect as any\n      }\n    }, controller?.signal)\n    if (yielded !== false) return yielded\n    yielded = true\n    fiber._yielded = () => {\n      resumed = true\n    }\n    if (controller === undefined && onCancel === undefined) {\n      return Yield\n    }\n    fiber._stack.push(asyncFinalizer(() => {\n      resumed = true\n      controller?.abort()\n      return onCancel ?? exitVoid\n    }))\n    return Yield\n  }\n})\nconst asyncFinalizer: (onInterrupt: () => Micro<void, any, any>) => Primitive = makePrimitive({\n  op: \"AsyncFinalizer\",\n  ensure(fiber) {\n    if (fiber.interruptible) {\n      fiber.interruptible = false\n      fiber._stack.push(setInterruptible(true))\n    }\n  },\n  contE(cause, _fiber) {\n    return causeIsInterrupt(cause)\n      ? flatMap(this[args](), () => failCause(cause))\n      : failCause(cause)\n  }\n})\n\n/**\n * Create a `Micro` effect from an asynchronous computation.\n *\n * You can return a cleanup effect that will be run when the effect is aborted.\n * It is also passed an `AbortSignal` that is triggered when the effect is\n * aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const async = <A, E = never, R = never>(\n  register: (\n    resume: (effect: Micro<A, E, R>) => void,\n    signal: AbortSignal\n  ) => void | Micro<void, never, R>\n): Micro<A, E, R> => asyncOptions(register as any, register.length >= 2)\n\n/**\n * A `Micro` that will never succeed or fail. It wraps `setInterval` to prevent\n * the Javascript runtime from exiting.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const never: Micro<never> = async<never>(function() {\n  const interval = setInterval(constVoid, 2147483646)\n  return sync(() => clearInterval(interval))\n})\n\n/**\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const gen = <Self, Eff extends YieldWrap<Micro<any, any, any>>, AEff>(\n  ...args:\n    | [self: Self, body: (this: Self) => Generator<Eff, AEff, never>]\n    | [body: () => Generator<Eff, AEff, never>]\n): Micro<\n  AEff,\n  [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Micro<infer _A, infer E, infer _R>>] ? E : never,\n  [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Micro<infer _A, infer _E, infer R>>] ? R : never\n> => suspend(() => fromIterator(args.length === 1 ? args[0]() : args[1].call(args[0]) as any))\n\nconst fromIterator: (\n  iterator: Iterator<any, YieldWrap<Micro<any, any, any>>>\n) => Micro<any, any, any> = makePrimitive({\n  op: \"Iterator\",\n  contA(value, fiber) {\n    const state = this[args].next(value)\n    if (state.done) return succeed(state.value)\n    fiber._stack.push(this)\n    return yieldWrapGet(state.value)\n  },\n  eval(this: any, fiber: MicroFiberImpl) {\n    return this[successCont](undefined, fiber)\n  }\n})\n\n// ----------------------------------------------------------------------------\n// mapping & sequencing\n// ----------------------------------------------------------------------------\n\n/**\n * Create a `Micro` effect that will replace the success value of the given\n * effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const as: {\n  // ----------------------------------------------------------------------------\n  // mapping & sequencing\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Create a `Micro` effect that will replace the success value of the given\n   * effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, B>(value: B): <E, R>(self: Micro<A, E, R>) => Micro<B, E, R>\n  // ----------------------------------------------------------------------------\n  // mapping & sequencing\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Create a `Micro` effect that will replace the success value of the given\n   * effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, E, R, B>(self: Micro<A, E, R>, value: B): Micro<B, E, R>\n} = dual(2, <A, E, R, B>(self: Micro<A, E, R>, value: B): Micro<B, E, R> => map(self, (_) => value))\n\n/**\n * Wrap the success value of this `Micro` effect in a `Some`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const asSome = <A, E, R>(self: Micro<A, E, R>): Micro<Option.Option<A>, E, R> => map(self, Option.some)\n\n/**\n * Swap the error and success types of the `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const flip = <A, E, R>(self: Micro<A, E, R>): Micro<E, A, R> =>\n  matchEffect(self, {\n    onFailure: succeed,\n    onSuccess: fail\n  })\n\n/**\n * A more flexible version of `flatMap` that combines `map` and `flatMap` into a\n * single API.\n *\n * It also lets you directly pass a `Micro` effect, which will be executed after\n * the current effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const andThen: {\n  /**\n   * A more flexible version of `flatMap` that combines `map` and `flatMap` into a\n   * single API.\n   *\n   * It also lets you directly pass a `Micro` effect, which will be executed after\n   * the current effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, X>(f: (a: A) => X): <E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n  /**\n   * A more flexible version of `flatMap` that combines `map` and `flatMap` into a\n   * single API.\n   *\n   * It also lets you directly pass a `Micro` effect, which will be executed after\n   * the current effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <X>(f: NotFunction<X>): <A, E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n  /**\n   * A more flexible version of `flatMap` that combines `map` and `flatMap` into a\n   * single API.\n   *\n   * It also lets you directly pass a `Micro` effect, which will be executed after\n   * the current effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, E, R, X>(self: Micro<A, E, R>, f: (a: A) => X): [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n  /**\n   * A more flexible version of `flatMap` that combines `map` and `flatMap` into a\n   * single API.\n   *\n   * It also lets you directly pass a `Micro` effect, which will be executed after\n   * the current effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, E, R, X>(self: Micro<A, E, R>, f: NotFunction<X>): [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: any): Micro<B, E | E2, R | R2> =>\n    flatMap(self, (a) => {\n      const value = isMicro(f) ? f : typeof f === \"function\" ? f(a) : f\n      return isMicro(value) ? value : succeed(value)\n    })\n)\n\n/**\n * Execute a side effect from the success value of the `Micro` effect.\n *\n * It is similar to the `andThen` api, but the success value is ignored.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const tap: {\n  /**\n   * Execute a side effect from the success value of the `Micro` effect.\n   *\n   * It is similar to the `andThen` api, but the success value is ignored.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, X>(f: (a: NoInfer<A>) => X): <E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n  /**\n   * Execute a side effect from the success value of the `Micro` effect.\n   *\n   * It is similar to the `andThen` api, but the success value is ignored.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <X>(f: NotFunction<X>): <A, E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n  /**\n   * Execute a side effect from the success value of the `Micro` effect.\n   *\n   * It is similar to the `andThen` api, but the success value is ignored.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, E, R, X>(self: Micro<A, E, R>, f: (a: NoInfer<A>) => X): [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n  /**\n   * Execute a side effect from the success value of the `Micro` effect.\n   *\n   * It is similar to the `andThen` api, but the success value is ignored.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, E, R, X>(self: Micro<A, E, R>, f: NotFunction<X>): [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (a: A) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2> =>\n    flatMap(self, (a) => {\n      const value = isMicro(f) ? f : typeof f === \"function\" ? f(a) : f\n      return isMicro(value) ? as(value, a) : succeed(a)\n    })\n)\n\n/**\n * Replace the success value of the `Micro` effect with `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const asVoid = <A, E, R>(self: Micro<A, E, R>): Micro<void, E, R> => flatMap(self, (_) => exitVoid)\n\n/**\n * Access the `MicroExit` of the given `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category mapping & sequencing\n */\nexport const exit = <A, E, R>(self: Micro<A, E, R>): Micro<MicroExit<A, E>, never, R> =>\n  matchCause(self, {\n    onFailure: exitFailCause,\n    onSuccess: exitSucceed\n  })\n\n/**\n * Replace the error type of the given `Micro` with the full `MicroCause` object.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const sandbox = <A, E, R>(self: Micro<A, E, R>): Micro<A, MicroCause<E>, R> => catchAllCause(self, fail)\n\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed with a value. Losers of\n * the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const raceAll = <Eff extends Micro<any, any, any>>(\n  all: Iterable<Eff>\n): Micro<Micro.Success<Eff>, Micro.Error<Eff>, Micro.Context<Eff>> =>\n  withMicroFiber((parent) =>\n    async((resume) => {\n      const effects = Arr.fromIterable(all)\n      const len = effects.length\n      let doneCount = 0\n      let done = false\n      const fibers = new Set<MicroFiber<any, any>>()\n      const causes: Array<MicroCause<any>> = []\n      const onExit = (exit: MicroExit<any, any>) => {\n        doneCount++\n        if (exit._tag === \"Failure\") {\n          causes.push(exit.cause)\n          if (doneCount >= len) {\n            resume(failCause(causes[0]))\n          }\n          return\n        }\n        done = true\n        resume(fibers.size === 0 ? exit : flatMap(uninterruptible(fiberInterruptAll(fibers)), () => exit))\n      }\n\n      for (let i = 0; i < len; i++) {\n        if (done) break\n        const fiber = unsafeFork(parent, interruptible(effects[i]), true, true)\n        fibers.add(fiber)\n        fiber.addObserver((exit) => {\n          fibers.delete(fiber)\n          onExit(exit)\n        })\n      }\n\n      return fiberInterruptAll(fibers)\n    })\n  )\n\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed or fail. Losers of\n * the race will be interrupted immediately.\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const raceAllFirst = <Eff extends Micro<any, any, any>>(\n  all: Iterable<Eff>\n): Micro<Micro.Success<Eff>, Micro.Error<Eff>, Micro.Context<Eff>> =>\n  withMicroFiber((parent) =>\n    async((resume) => {\n      let done = false\n      const fibers = new Set<MicroFiber<any, any>>()\n      const onExit = (exit: MicroExit<any, any>) => {\n        done = true\n        resume(fibers.size === 0 ? exit : flatMap(fiberInterruptAll(fibers), () => exit))\n      }\n\n      for (const effect of all) {\n        if (done) break\n        const fiber = unsafeFork(parent, interruptible(effect), true, true)\n        fibers.add(fiber)\n        fiber.addObserver((exit) => {\n          fibers.delete(fiber)\n          onExit(exit)\n        })\n      }\n\n      return fiberInterruptAll(fibers)\n    })\n  )\n\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed. Losers of the race will be interrupted immediately.\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const race: {\n  /**\n   * Returns an effect that races two effects, yielding the value of the first\n   * effect to succeed. Losers of the race will be interrupted immediately.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category sequencing\n   */\n  <A2, E2, R2>(that: Micro<A2, E2, R2>): <A, E, R>(self: Micro<A, E, R>) => Micro<A | A2, E | E2, R | R2>\n  /**\n   * Returns an effect that races two effects, yielding the value of the first\n   * effect to succeed. Losers of the race will be interrupted immediately.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category sequencing\n   */\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2> =>\n    raceAll([self, that])\n)\n\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed *or* fail. Losers of the race will be interrupted immediately.\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const raceFirst: {\n  /**\n   * Returns an effect that races two effects, yielding the value of the first\n   * effect to succeed *or* fail. Losers of the race will be interrupted immediately.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category sequencing\n   */\n  <A2, E2, R2>(that: Micro<A2, E2, R2>): <A, E, R>(self: Micro<A, E, R>) => Micro<A | A2, E | E2, R | R2>\n  /**\n   * Returns an effect that races two effects, yielding the value of the first\n   * effect to succeed *or* fail. Losers of the race will be interrupted immediately.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category sequencing\n   */\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2> =>\n    raceAllFirst([self, that])\n)\n\n/**\n * Map the success value of this `Micro` effect to another `Micro` effect, then\n * flatten the result.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const flatMap: {\n  /**\n   * Map the success value of this `Micro` effect to another `Micro` effect, then\n   * flatten the result.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, B, E2, R2>(f: (a: A) => Micro<B, E2, R2>): <E, R>(self: Micro<A, E, R>) => Micro<B, E | E2, R | R2>\n  /**\n   * Map the success value of this `Micro` effect to another `Micro` effect, then\n   * flatten the result.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (a: A) => Micro<B, E2, R2>): Micro<B, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (a: A) => Micro<B, E2, R2>\n  ): Micro<B, E | E2, R | R2> => {\n    const onSuccess = Object.create(OnSuccessProto)\n    onSuccess[args] = self\n    onSuccess[successCont] = f\n    return onSuccess\n  }\n)\nconst OnSuccessProto = makePrimitiveProto({\n  op: \"OnSuccess\",\n  eval(this: any, fiber: MicroFiberImpl): Primitive {\n    fiber._stack.push(this)\n    return this[args]\n  }\n})\n\n// ----------------------------------------------------------------------------\n// mapping & sequencing\n// ----------------------------------------------------------------------------\n\n/**\n * Flattens any nested `Micro` effects, merging the error and requirement types.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const flatten = <A, E, R, E2, R2>(\n  self: Micro<Micro<A, E, R>, E2, R2>\n): Micro<A, E | E2, R | R2> => flatMap(self, identity)\n\n/**\n * Transforms the success value of the `Micro` effect with the specified\n * function.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const map: {\n  /**\n   * Transforms the success value of the `Micro` effect with the specified\n   * function.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, B>(f: (a: A) => B): <E, R>(self: Micro<A, E, R>) => Micro<B, E, R>\n  /**\n   * Transforms the success value of the `Micro` effect with the specified\n   * function.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, E, R, B>(self: Micro<A, E, R>, f: (a: A) => B): Micro<B, E, R>\n} = dual(\n  2,\n  <A, E, R, B>(self: Micro<A, E, R>, f: (a: A) => B): Micro<B, E, R> => flatMap(self, (a) => succeed(f(a)))\n)\n\n// ----------------------------------------------------------------------------\n// MicroExit\n// ----------------------------------------------------------------------------\n\n/**\n * The `MicroExit` type is used to represent the result of a `Micro` computation. It\n * can either be successful, containing a value of type `A`, or it can fail,\n * containing an error of type `E` wrapped in a `MicroCause`.\n *\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport type MicroExit<A, E = never> =\n  | MicroExit.Success<A, E>\n  | MicroExit.Failure<A, E>\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport declare namespace MicroExit {\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroExit\n   */\n  export interface Proto<out A, out E = never> extends Micro<A, E> {\n    readonly [MicroExitTypeId]: MicroExitTypeId\n  }\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroExit\n   */\n  export interface Success<out A, out E> extends Proto<A, E> {\n    readonly _tag: \"Success\"\n    readonly value: A\n  }\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroExit\n   */\n  export interface Failure<out A, out E> extends Proto<A, E> {\n    readonly _tag: \"Failure\"\n    readonly cause: MicroCause<E>\n  }\n}\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const isMicroExit = (u: unknown): u is MicroExit<unknown, unknown> => hasProperty(u, MicroExitTypeId)\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitSucceed: <A>(a: A) => MicroExit<A, never> = succeed as any\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitFailCause: <E>(cause: MicroCause<E>) => MicroExit<never, E> = failCause as any\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitInterrupt: MicroExit<never> = exitFailCause(causeInterrupt())\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitFail = <E>(e: E): MicroExit<never, E> => exitFailCause(causeFail(e))\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitDie = (defect: unknown): MicroExit<never> => exitFailCause(causeDie(defect))\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsSuccess = <A, E>(\n  self: MicroExit<A, E>\n): self is MicroExit.Success<A, E> => self._tag === \"Success\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsFailure = <A, E>(\n  self: MicroExit<A, E>\n): self is MicroExit.Failure<A, E> => self._tag === \"Failure\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsInterrupt = <A, E>(\n  self: MicroExit<A, E>\n): self is MicroExit.Failure<A, E> & {\n  readonly cause: MicroCause.Interrupt\n} => exitIsFailure(self) && self.cause._tag === \"Interrupt\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsFail = <A, E>(\n  self: MicroExit<A, E>\n): self is MicroExit.Failure<A, E> & {\n  readonly cause: MicroCause.Fail<E>\n} => exitIsFailure(self) && self.cause._tag === \"Fail\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsDie = <A, E>(\n  self: MicroExit<A, E>\n): self is MicroExit.Failure<A, E> & {\n  readonly cause: MicroCause.Die\n} => exitIsFailure(self) && self.cause._tag === \"Die\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitVoid: MicroExit<void> = exitSucceed(void 0)\n\n/**\n * @since 3.11.0\n * @experimental\n * @category MicroExit\n */\nexport const exitVoidAll = <I extends Iterable<MicroExit<any, any>>>(\n  exits: I\n): MicroExit<void, I extends Iterable<MicroExit<infer _A, infer _E>> ? _E : never> => {\n  for (const exit of exits) {\n    if (exit._tag === \"Failure\") {\n      return exit\n    }\n  }\n  return exitVoid\n}\n\n// ----------------------------------------------------------------------------\n// scheduler\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.5.9\n * @experimental\n * @category scheduler\n */\nexport interface MicroScheduler {\n  readonly scheduleTask: (task: () => void, priority: number) => void\n  readonly shouldYield: (fiber: MicroFiber<unknown, unknown>) => boolean\n  readonly flush: () => void\n}\n\nconst setImmediate = \"setImmediate\" in globalThis\n  ? globalThis.setImmediate\n  : (f: () => void) => setTimeout(f, 0)\n\n/**\n * @since 3.5.9\n * @experimental\n * @category scheduler\n */\nexport class MicroSchedulerDefault implements MicroScheduler {\n  private tasks: Array<() => void> = []\n  private running = false\n\n  /**\n   * @since 3.5.9\n   */\n  scheduleTask(task: () => void, _priority: number) {\n    this.tasks.push(task)\n    if (!this.running) {\n      this.running = true\n      setImmediate(this.afterScheduled)\n    }\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  afterScheduled = () => {\n    this.running = false\n    this.runTasks()\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  runTasks() {\n    const tasks = this.tasks\n    this.tasks = []\n    for (let i = 0, len = tasks.length; i < len; i++) {\n      tasks[i]()\n    }\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  shouldYield(fiber: MicroFiber<unknown, unknown>) {\n    return fiber.currentOpCount >= fiber.getRef(MaxOpsBeforeYield)\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  flush() {\n    while (this.tasks.length > 0) {\n      this.runTasks()\n    }\n  }\n}\n\n/**\n * Access the given `Context.Tag` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const service: {\n  /**\n   * Access the given `Context.Tag` from the environment.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <I, S>(tag: Context.Reference<I, S>): Micro<S>\n  /**\n   * Access the given `Context.Tag` from the environment.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <I, S>(tag: Context.Tag<I, S>): Micro<S, never, I>\n} =\n  (<I, S>(tag: Context.Tag<I, S>): Micro<S, never, I> =>\n    withMicroFiber((fiber) => succeed(Context.unsafeGet(fiber.context, tag)))) as any\n\n/**\n * Access the given `Context.Tag` from the environment, without tracking the\n * dependency at the type level.\n *\n * It will return an `Option` of the service, depending on whether it is\n * available in the environment or not.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const serviceOption = <I, S>(\n  tag: Context.Tag<I, S>\n): Micro<Option.Option<S>> => withMicroFiber((fiber) => succeed(Context.getOption(fiber.context, tag)))\n\n/**\n * Update the Context with the given mapping function.\n *\n * @since 3.11.0\n * @experimental\n * @category environment\n */\nexport const updateContext: {\n  /**\n   * Update the Context with the given mapping function.\n   *\n   * @since 3.11.0\n   * @experimental\n   * @category environment\n   */\n  <R2, R>(f: (context: Context.Context<R2>) => Context.Context<NoInfer<R>>): <A, E>(self: Micro<A, E, R>) => Micro<A, E, R2>\n  /**\n   * Update the Context with the given mapping function.\n   *\n   * @since 3.11.0\n   * @experimental\n   * @category environment\n   */\n  <A, E, R, R2>(\n    self: Micro<A, E, R>,\n    f: (context: Context.Context<R2>) => Context.Context<NoInfer<R>>\n  ): Micro<A, E, R2>\n} = dual(\n  2,\n  <A, E, R, R2>(\n    self: Micro<A, E, R>,\n    f: (context: Context.Context<R2>) => Context.Context<NoInfer<R>>\n  ): Micro<A, E, R2> =>\n    withMicroFiber</**\n     * Update the Context with the given mapping function.\n     *\n     * @since 3.11.0\n     * @experimental\n     * @category environment\n     */\n    A, /**\n     * Update the Context with the given mapping function.\n     *\n     * @since 3.11.0\n     * @experimental\n     * @category environment\n     */\n    E, /**\n     * Update the Context with the given mapping function.\n     *\n     * @since 3.11.0\n     * @experimental\n     * @category environment\n     */\n    R2>((fiber) => {\n      const prev = fiber.context as Context.Context<R2>\n      fiber.context = f(prev)\n      return onExit(\n        self as any,\n        () => {\n          fiber.context = prev\n          return void_\n        }\n      )\n    })\n)\n\n/**\n * Update the service for the given `Context.Tag` in the environment.\n *\n * @since 3.11.0\n * @experimental\n * @category environment\n */\nexport const updateService: {\n  /**\n   * Update the service for the given `Context.Tag` in the environment.\n   *\n   * @since 3.11.0\n   * @experimental\n   * @category environment\n   */\n  <I, A>(tag: Context.Reference<I, A>, f: (value: A) => A): <XA, E, R>(self: Micro<XA, E, R>) => Micro<XA, E, R>\n  /**\n   * Update the service for the given `Context.Tag` in the environment.\n   *\n   * @since 3.11.0\n   * @experimental\n   * @category environment\n   */\n  <I, A>(tag: Context.Tag<I, A>, f: (value: A) => A): <XA, E, R>(self: Micro<XA, E, R>) => Micro<XA, E, R | I>\n  /**\n   * Update the service for the given `Context.Tag` in the environment.\n   *\n   * @since 3.11.0\n   * @experimental\n   * @category environment\n   */\n  <XA, E, R, I, A>(self: Micro<XA, E, R>, tag: Context.Reference<I, A>, f: (value: A) => A): Micro<XA, E, R>\n  /**\n   * Update the service for the given `Context.Tag` in the environment.\n   *\n   * @since 3.11.0\n   * @experimental\n   * @category environment\n   */\n  <XA, E, R, I, A>(self: Micro<XA, E, R>, tag: Context.Tag<I, A>, f: (value: A) => A): Micro<XA, E, R | I>\n} = dual(\n  3,\n  <XA, E, R, I, A>(\n    self: Micro<XA, E, R>,\n    tag: Context.Reference<I, A>,\n    f: (value: A) => A\n  ): Micro<XA, E, R> =>\n    withMicroFiber((fiber) => {\n      const prev = Context.unsafeGet(fiber.context, tag)\n      fiber.context = Context.add(fiber.context, tag, f(prev))\n      return onExit(\n        self,\n        () => {\n          fiber.context = Context.add(fiber.context, tag, prev)\n          return void_\n        }\n      )\n    })\n)\n\n/**\n * Access the current `Context` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const context = <R>(): Micro<Context.Context<R>> => getContext as any\nconst getContext = withMicroFiber((fiber) => succeed(fiber.context))\n\n/**\n * Merge the given `Context` with the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const provideContext: {\n  /**\n   * Merge the given `Context` with the current context.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <XR>(context: Context.Context<XR>): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, Exclude<R, XR>>\n  /**\n   * Merge the given `Context` with the current context.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <A, E, R, XR>(self: Micro<A, E, R>, context: Context.Context<XR>): Micro<A, E, Exclude<R, XR>>\n} = dual(\n  2,\n  <A, E, R, XR>(\n    self: Micro<A, E, R>,\n    provided: Context.Context<XR>\n  ): Micro<A, E, Exclude<R, XR>> => updateContext(self, Context.merge(provided)) as any\n)\n\n/**\n * Add the provided service to the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const provideService: {\n  /**\n   * Add the provided service to the current context.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <I, S>(tag: Context.Tag<I, S>, service: S): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, Exclude<R, I>>\n  /**\n   * Add the provided service to the current context.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <A, E, R, I, S>(self: Micro<A, E, R>, tag: Context.Tag<I, S>, service: S): Micro<A, E, Exclude<R, I>>\n} = dual(\n  3,\n  <A, E, R, I, S>(\n    self: Micro<A, E, R>,\n    tag: Context.Tag<I, S>,\n    service: S\n  ): Micro<A, E, Exclude<R, I>> => updateContext(self, Context.add(tag, service)) as any\n)\n\n/**\n * Create a service using the provided `Micro` effect, and add it to the\n * current context.\n *\n * @since 3.4.6\n * @experimental\n * @category environment\n */\nexport const provideServiceEffect: {\n  /**\n   * Create a service using the provided `Micro` effect, and add it to the\n   * current context.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category environment\n   */\n  <I, S, E2, R2>(tag: Context.Tag<I, S>, acquire: Micro<S, E2, R2>): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | E2, Exclude<R, I> | R2>\n  /**\n   * Create a service using the provided `Micro` effect, and add it to the\n   * current context.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category environment\n   */\n  <A, E, R, I, S, E2, R2>(self: Micro<A, E, R>, tag: Context.Tag<I, S>, acquire: Micro<S, E2, R2>): Micro<A, E | E2, Exclude<R, I> | R2>\n} = dual(\n  3,\n  <A, E, R, I, S, E2, R2>(\n    self: Micro<A, E, R>,\n    tag: Context.Tag<I, S>,\n    acquire: Micro<S, E2, R2>\n  ): Micro<A, E | E2, Exclude<R, I> | R2> => flatMap(acquire, (service) => provideService(self, tag, service))\n)\n\n// ========================================================================\n// References\n// ========================================================================\n\n/**\n * @since 3.11.0\n * @experimental\n * @category references\n */\nexport class MaxOpsBeforeYield extends Context.Reference<MaxOpsBeforeYield>()<\n  \"effect/Micro/currentMaxOpsBeforeYield\",\n  number\n>(\n  \"effect/Micro/currentMaxOpsBeforeYield\",\n  { defaultValue: () => 2048 }\n) {}\n\n/**\n * @since 3.11.0\n * @experimental\n * @category environment refs\n */\nexport class CurrentConcurrency extends Context.Reference<CurrentConcurrency>()<\n  \"effect/Micro/currentConcurrency\",\n  \"unbounded\" | number\n>(\n  \"effect/Micro/currentConcurrency\",\n  { defaultValue: () => \"unbounded\" }\n) {}\n\n/**\n * @since 3.11.0\n * @experimental\n * @category environment refs\n */\nexport class CurrentScheduler extends Context.Reference<CurrentScheduler>()<\n  \"effect/Micro/currentScheduler\",\n  MicroScheduler\n>(\n  \"effect/Micro/currentScheduler\",\n  { defaultValue: () => new MicroSchedulerDefault() }\n) {}\n\n/**\n * If you have a `Micro` that uses `concurrency: \"inherit\"`, you can use this\n * api to control the concurrency of that `Micro` when it is run.\n *\n * @example\n * ```ts\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.forEach([1, 2, 3], (n) => Micro.succeed(n), {\n *   concurrency: \"inherit\"\n * }).pipe(\n *   Micro.withConcurrency(2) // use a concurrency of 2\n * )\n * ```\n *\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const withConcurrency: {\n  /**\n   * If you have a `Micro` that uses `concurrency: \"inherit\"`, you can use this\n   * api to control the concurrency of that `Micro` when it is run.\n   *\n   * @example\n   * ```ts\n   * import * as Micro from \"effect/Micro\"\n   *\n   * Micro.forEach([1, 2, 3], (n) => Micro.succeed(n), {\n   *   concurrency: \"inherit\"\n   * }).pipe(\n   *   Micro.withConcurrency(2) // use a concurrency of 2\n   * )\n   * ```\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment refs\n   */\n  (concurrency: \"unbounded\" | number): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  /**\n   * If you have a `Micro` that uses `concurrency: \"inherit\"`, you can use this\n   * api to control the concurrency of that `Micro` when it is run.\n   *\n   * @example\n   * ```ts\n   * import * as Micro from \"effect/Micro\"\n   *\n   * Micro.forEach([1, 2, 3], (n) => Micro.succeed(n), {\n   *   concurrency: \"inherit\"\n   * }).pipe(\n   *   Micro.withConcurrency(2) // use a concurrency of 2\n   * )\n   * ```\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment refs\n   */\n  <A, E, R>(self: Micro<A, E, R>, concurrency: \"unbounded\" | number): Micro<A, E, R>\n} = dual(\n  2,\n  <A, E, R>(\n    self: Micro<A, E, R>,\n    concurrency: \"unbounded\" | number\n  ): Micro<A, E, R> => provideService(self, CurrentConcurrency, concurrency)\n)\n\n// ----------------------------------------------------------------------------\n// zipping\n// ----------------------------------------------------------------------------\n\n/**\n * Combine two `Micro` effects into a single effect that produces a tuple of\n * their results.\n *\n * @since 3.4.0\n * @experimental\n * @category zipping\n */\nexport const zip: {\n  // ----------------------------------------------------------------------------\n  // zipping\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Combine two `Micro` effects into a single effect that produces a tuple of\n   * their results.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category zipping\n   */\n  <A2, E2, R2>(\n    that: Micro<A2, E2, R2>,\n    options?:\n      | { readonly concurrent?: boolean | undefined }\n      | undefined\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<[A, A2], E2 | E, R2 | R>\n  // ----------------------------------------------------------------------------\n  // zipping\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Combine two `Micro` effects into a single effect that produces a tuple of\n   * their results.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category zipping\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    that: Micro<A2, E2, R2>,\n    options?: { readonly concurrent?: boolean | undefined }\n  ): Micro<[A, A2], E | E2, R | R2>\n} = dual((args) => isMicro(args[1]), <A, E, R, A2, E2, R2>(\n  self: Micro<A, E, R>,\n  that: Micro<A2, E2, R2>,\n  options?: { readonly concurrent?: boolean | undefined }\n): Micro<[A, A2], E | E2, R | R2> => zipWith(self, that, (a, a2) => [a, a2], options))\n\n/**\n * The `Micro.zipWith` function combines two `Micro` effects and allows you to\n * apply a function to the results of the combined effects, transforming them\n * into a single value.\n *\n * @since 3.4.3\n * @experimental\n * @category zipping\n */\nexport const zipWith: {\n  /**\n   * The `Micro.zipWith` function combines two `Micro` effects and allows you to\n   * apply a function to the results of the combined effects, transforming them\n   * into a single value.\n   *\n   * @since 3.4.3\n   * @experimental\n   * @category zipping\n   */\n  <A2, E2, R2, A, B>(\n    that: Micro<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: { readonly concurrent?: boolean | undefined }\n  ): <E, R>(self: Micro<A, E, R>) => Micro<B, E2 | E, R2 | R>\n  /**\n   * The `Micro.zipWith` function combines two `Micro` effects and allows you to\n   * apply a function to the results of the combined effects, transforming them\n   * into a single value.\n   *\n   * @since 3.4.3\n   * @experimental\n   * @category zipping\n   */\n  <A, E, R, A2, E2, R2, B>(\n    self: Micro<A, E, R>,\n    that: Micro<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: { readonly concurrent?: boolean | undefined }\n  ): Micro<B, E2 | E, R2 | R>\n} = dual((args) => isMicro(args[1]), <A, E, R, A2, E2, R2, B>(\n  self: Micro<A, E, R>,\n  that: Micro<A2, E2, R2>,\n  f: (a: A, b: A2) => B,\n  options?: { readonly concurrent?: boolean | undefined }\n): Micro<B, E2 | E, R2 | R> =>\n  options?.concurrent\n    // Use `all` exclusively for concurrent cases, as it introduces additional overhead due to the management of concurrency\n    ? map(all([self, that], { concurrency: 2 }), ([a, a2]) => f(a, a2))\n    : flatMap(self, (a) => map(that, (a2) => f(a, a2))))\n\n// ----------------------------------------------------------------------------\n// filtering & conditionals\n// ----------------------------------------------------------------------------\n\n/**\n * Filter the specified effect with the provided function, failing with specified\n * `MicroCause` if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nexport const filterOrFailCause: {\n  // ----------------------------------------------------------------------------\n  // filtering & conditionals\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * `MicroCause` if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, B extends A, E2>(\n    refinement: Refinement<A, B>,\n    orFailWith: (a: NoInfer<A>) => MicroCause<E2>\n  ): <E, R>(self: Micro<A, E, R>) => Micro<B, E2 | E, R>\n  // ----------------------------------------------------------------------------\n  // filtering & conditionals\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * `MicroCause` if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, E2>(\n    predicate: Predicate<NoInfer<A>>,\n    orFailWith: (a: NoInfer<A>) => MicroCause<E2>\n  ): <E, R>(self: Micro<A, E, R>) => Micro<A, E2 | E, R>\n  // ----------------------------------------------------------------------------\n  // filtering & conditionals\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * `MicroCause` if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, E, R, B extends A, E2>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<A, B>,\n    orFailWith: (a: A) => MicroCause<E2>\n  ): Micro<B, E | E2, R>\n  // ----------------------------------------------------------------------------\n  // filtering & conditionals\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * `MicroCause` if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, E, R, E2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<A>,\n    orFailWith: (a: A) => MicroCause<E2>\n  ): Micro<A, E | E2, R>\n} = dual((args) => isMicro(args[0]), <A, E, R, B extends A, E2>(\n  self: Micro<A, E, R>,\n  refinement: Refinement<A, B>,\n  orFailWith: (a: A) => MicroCause<E2>\n): Micro<B, E | E2, R> => flatMap(self, (a) => refinement(a) ? succeed(a) : failCause(orFailWith(a))))\n\n/**\n * Filter the specified effect with the provided function, failing with specified\n * error if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nexport const filterOrFail: {\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, B extends A, E2>(refinement: Refinement<A, B>, orFailWith: (a: NoInfer<A>) => E2): <E, R>(self: Micro<A, E, R>) => Micro<B, E2 | E, R>\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, E2>(predicate: Predicate<NoInfer<A>>, orFailWith: (a: NoInfer<A>) => E2): <E, R>(self: Micro<A, E, R>) => Micro<A, E2 | E, R>\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, E, R, B extends A, E2>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<A, B>,\n    orFailWith: (a: A) => E2\n  ): Micro<B, E | E2, R>\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, E, R, E2>(self: Micro<A, E, R>, predicate: Predicate<A>, orFailWith: (a: A) => E2): Micro<A, E | E2, R>\n} = dual((args) => isMicro(args[0]), <A, E, R, B extends A, E2>(\n  self: Micro<A, E, R>,\n  refinement: Refinement<A, B>,\n  orFailWith: (a: A) => E2\n): Micro<B, E | E2, R> => flatMap(self, (a) => refinement(a) ? succeed(a) : fail(orFailWith(a))))\n\n/**\n * The moral equivalent of `if (p) exp`.\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nexport const when: {\n  /**\n   * The moral equivalent of `if (p) exp`.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <E2 = never, R2 = never>(condition: LazyArg<boolean> | Micro<boolean, E2, R2>): <A, E, R>(self: Micro<A, E, R>) => Micro<Option.Option<A>, E | E2, R | R2>\n  /**\n   * The moral equivalent of `if (p) exp`.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, E, R, E2 = never, R2 = never>(self: Micro<A, E, R>, condition: LazyArg<boolean> | Micro<boolean, E2, R2>): Micro<Option.Option<A>, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, E2 = never, R2 = never>(\n    self: Micro<A, E, R>,\n    condition: LazyArg<boolean> | Micro<boolean, E2, R2>\n  ): Micro<Option.Option<A>, E | E2, R | R2> =>\n    flatMap(isMicro(condition) ? condition : sync(condition), (pass) => pass ? asSome(self) : succeedNone)\n)\n\n// ----------------------------------------------------------------------------\n// repetition\n// ----------------------------------------------------------------------------\n\n/**\n * Repeat the given `Micro` using the provided options.\n *\n * The `while` predicate will be checked after each iteration, and can use the\n * fall `MicroExit` of the effect to determine if the repetition should continue.\n *\n * @since 3.4.6\n * @experimental\n * @category repetition\n */\nexport const repeatExit: {\n  // ----------------------------------------------------------------------------\n  // repetition\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Repeat the given `Micro` using the provided options.\n   *\n   * The `while` predicate will be checked after each iteration, and can use the\n   * fall `MicroExit` of the effect to determine if the repetition should continue.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category repetition\n   */\n  <A, E>(\n    options: {\n      while: Predicate<MicroExit<A, E>>\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  // ----------------------------------------------------------------------------\n  // repetition\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Repeat the given `Micro` using the provided options.\n   *\n   * The `while` predicate will be checked after each iteration, and can use the\n   * fall `MicroExit` of the effect to determine if the repetition should continue.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category repetition\n   */\n  <A, E, R>(\n    self: Micro<A, E, R>,\n    options: {\n      while: Predicate<MicroExit<A, E>>\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    }\n  ): Micro<A, E, R>\n} = dual(2, <A, E, R>(self: Micro<A, E, R>, options: {\n  while: Predicate<MicroExit<A, E>>\n  times?: number | undefined\n  schedule?: MicroSchedule | undefined\n}): Micro<A, E, R> =>\n  suspend(() => {\n    const startedAt = options.schedule ? Date.now() : 0\n    let attempt = 0\n\n    const loop: Micro<A, E, R> = flatMap(exit(self), (exit) => {\n      if (options.while !== undefined && !options.while(exit)) {\n        return exit\n      } else if (options.times !== undefined && attempt >= options.times) {\n        return exit\n      }\n      attempt++\n      let delayEffect = yieldNow\n      if (options.schedule !== undefined) {\n        const elapsed = Date.now() - startedAt\n        const duration = options.schedule(attempt, elapsed)\n        if (Option.isNone(duration)) {\n          return exit\n        }\n        delayEffect = sleep(duration.value)\n      }\n      return flatMap(delayEffect, () => loop)\n    })\n\n    return loop\n  }))\n\n/**\n * Repeat the given `Micro` effect using the provided options. Only successful\n * results will be repeated.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */\nexport const repeat: {\n  /**\n   * Repeat the given `Micro` effect using the provided options. Only successful\n   * results will be repeated.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category repetition\n   */\n  <A, E>(\n    options?: {\n      while?: Predicate<A> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  /**\n   * Repeat the given `Micro` effect using the provided options. Only successful\n   * results will be repeated.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category repetition\n   */\n  <A, E, R>(\n    self: Micro<A, E, R>,\n    options?: {\n      while?: Predicate<A> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): Micro<A, E, R>\n} = dual((args) => isMicro(args[0]), <A, E, R>(\n  self: Micro<A, E, R>,\n  options?: {\n    while?: Predicate<A> | undefined\n    times?: number | undefined\n    schedule?: MicroSchedule | undefined\n  } | undefined\n): Micro<A, E, R> =>\n  repeatExit(self, {\n    ...options,\n    while: (exit) => exit._tag === \"Success\" && (options?.while === undefined || options.while(exit.value))\n  }))\n\n/**\n * Replicates the given effect `n` times.\n *\n * @since 3.11.0\n * @experimental\n * @category repetition\n */\nexport const replicate: {\n  /**\n   * Replicates the given effect `n` times.\n   *\n   * @since 3.11.0\n   * @experimental\n   * @category repetition\n   */\n  (n: number): <A, E, R>(self: Micro<A, E, R>) => Array<Micro<A, E, R>>\n  /**\n   * Replicates the given effect `n` times.\n   *\n   * @since 3.11.0\n   * @experimental\n   * @category repetition\n   */\n  <A, E, R>(self: Micro<A, E, R>, n: number): Array<Micro<A, E, R>>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, n: number): Array<Micro<A, E, R>> => Array.from({ length: n }, () => self)\n)\n\n/**\n * Performs this effect the specified number of times and collects the\n * results.\n *\n * @since 3.11.0\n * @category repetition\n */\nexport const replicateEffect: {\n  /**\n   * Performs this effect the specified number of times and collects the\n   * results.\n   *\n   * @since 3.11.0\n   * @category repetition\n   */\n  (\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly discard?: false | undefined\n    }\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<Array<A>, E, R>\n  /**\n   * Performs this effect the specified number of times and collects the\n   * results.\n   *\n   * @since 3.11.0\n   * @category repetition\n   */\n  (\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly discard: true\n    }\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<void, E, R>\n  /**\n   * Performs this effect the specified number of times and collects the\n   * results.\n   *\n   * @since 3.11.0\n   * @category repetition\n   */\n  <A, E, R>(\n    self: Micro<A, E, R>,\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly discard?: false | undefined\n    }\n  ): Micro<Array<A>, E, R>\n  /**\n   * Performs this effect the specified number of times and collects the\n   * results.\n   *\n   * @since 3.11.0\n   * @category repetition\n   */\n  <A, E, R>(\n    self: Micro<A, E, R>,\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly discard: true\n    }\n  ): Micro<void, E, R>\n} = dual(\n  (args) => isMicro(args[0]),\n  <A, E, R>(\n    self: Micro<A, E, R>,\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly discard: true\n    }\n  ): Micro<void, E, R> => all(replicate(self, n), options)\n)\n\n/**\n * Repeat the given `Micro` effect forever, only stopping if the effect fails.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */\nexport const forever = <A, E, R>(self: Micro<A, E, R>): Micro<never, E, R> => repeat(self) as any\n\n// ----------------------------------------------------------------------------\n// scheduling\n// ----------------------------------------------------------------------------\n\n/**\n * The `MicroSchedule` type represents a function that can be used to calculate\n * the delay between repeats.\n *\n * The function takes the current attempt number and the elapsed time since the\n * first attempt, and returns the delay for the next attempt. If the function\n * returns `None`, the repetition will stop.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport type MicroSchedule = (attempt: number, elapsed: number) => Option.Option<number>\n\n/**\n * Create a `MicroSchedule` that will stop repeating after the specified number\n * of attempts.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleRecurs = (n: number): MicroSchedule => (attempt) => attempt <= n ? Option.some(0) : Option.none()\n\n/**\n * Create a `MicroSchedule` that will generate a constant delay.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleSpaced = (millis: number): MicroSchedule => () => Option.some(millis)\n\n/**\n * Create a `MicroSchedule` that will generate a delay with an exponential backoff.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleExponential = (baseMillis: number, factor = 2): MicroSchedule => (attempt) =>\n  Option.some(Math.pow(factor, attempt) * baseMillis)\n\n/**\n * Returns a new `MicroSchedule` with an added calculated delay to each delay\n * returned by this schedule.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleAddDelay: {\n  /**\n   * Returns a new `MicroSchedule` with an added calculated delay to each delay\n   * returned by this schedule.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (f: () => number): (self: MicroSchedule) => MicroSchedule\n  /**\n   * Returns a new `MicroSchedule` with an added calculated delay to each delay\n   * returned by this schedule.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (self: MicroSchedule, f: () => number): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, f: () => number): MicroSchedule => (attempt, elapsed) =>\n    Option.map(self(attempt, elapsed), (duration) => duration + f())\n)\n\n/**\n * Transform a `MicroSchedule` to one that will have a delay that will never exceed\n * the specified maximum.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleWithMaxDelay: {\n  /**\n   * Transform a `MicroSchedule` to one that will have a delay that will never exceed\n   * the specified maximum.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (max: number): (self: MicroSchedule) => MicroSchedule\n  /**\n   * Transform a `MicroSchedule` to one that will have a delay that will never exceed\n   * the specified maximum.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (self: MicroSchedule, max: number): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, max: number): MicroSchedule => (attempt, elapsed) =>\n    Option.map(self(attempt, elapsed), (duration) => Math.min(duration, max))\n)\n\n/**\n * Transform a `MicroSchedule` to one that will stop repeating after the specified\n * amount of time.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleWithMaxElapsed: {\n  /**\n   * Transform a `MicroSchedule` to one that will stop repeating after the specified\n   * amount of time.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (max: number): (self: MicroSchedule) => MicroSchedule\n  /**\n   * Transform a `MicroSchedule` to one that will stop repeating after the specified\n   * amount of time.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (self: MicroSchedule, max: number): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, max: number): MicroSchedule => (attempt, elapsed) =>\n    elapsed < max ? self(attempt, elapsed) : Option.none()\n)\n\n/**\n * Combines two `MicroSchedule`s, by recurring if either schedule wants to\n * recur, using the minimum of the two durations between recurrences.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleUnion: {\n  /**\n   * Combines two `MicroSchedule`s, by recurring if either schedule wants to\n   * recur, using the minimum of the two durations between recurrences.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (that: MicroSchedule): (self: MicroSchedule) => MicroSchedule\n  /**\n   * Combines two `MicroSchedule`s, by recurring if either schedule wants to\n   * recur, using the minimum of the two durations between recurrences.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule => (attempt, elapsed) =>\n    Option.zipWith(self(attempt, elapsed), that(attempt, elapsed), (d1, d2) => Math.min(d1, d2))\n)\n\n/**\n * Combines two `MicroSchedule`s, by recurring only if both schedules want to\n * recur, using the maximum of the two durations between recurrences.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleIntersect: {\n  /**\n   * Combines two `MicroSchedule`s, by recurring only if both schedules want to\n   * recur, using the maximum of the two durations between recurrences.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (that: MicroSchedule): (self: MicroSchedule) => MicroSchedule\n  /**\n   * Combines two `MicroSchedule`s, by recurring only if both schedules want to\n   * recur, using the maximum of the two durations between recurrences.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule => (attempt, elapsed) =>\n    Option.zipWith(self(attempt, elapsed), that(attempt, elapsed), (d1, d2) => Math.max(d1, d2))\n)\n\n// ----------------------------------------------------------------------------\n// error handling\n// ----------------------------------------------------------------------------\n\n/**\n * Catch the full `MicroCause` object of the given `Micro` effect, allowing you to\n * recover from any kind of cause.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchAllCause: {\n  // ----------------------------------------------------------------------------\n  // error handling\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Catch the full `MicroCause` object of the given `Micro` effect, allowing you to\n   * recover from any kind of cause.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E2, R | R2>\n  // ----------------------------------------------------------------------------\n  // error handling\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Catch the full `MicroCause` object of the given `Micro` effect, allowing you to\n   * recover from any kind of cause.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A | B, E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A | B, E2, R | R2> => {\n    const onFailure = Object.create(OnFailureProto)\n    onFailure[args] = self\n    onFailure[failureCont] = f\n    return onFailure\n  }\n)\nconst OnFailureProto = makePrimitiveProto({\n  op: \"OnFailure\",\n  eval(this: any, fiber: MicroFiberImpl): Primitive {\n    fiber._stack.push(this as any)\n    return this[args]\n  }\n})\n\n/**\n * Selectively catch a `MicroCause` object of the given `Micro` effect,\n * using the provided predicate to determine if the failure should be caught.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchCauseIf: {\n  /**\n   * Selectively catch a `MicroCause` object of the given `Micro` effect,\n   * using the provided predicate to determine if the failure should be caught.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2, EB extends MicroCause<E>>(\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (cause: EB) => Micro<B, E2, R2>\n  ): <A, R>(\n    self: Micro<A, E, R>\n  ) => Micro<A | B, Exclude<E, MicroCause.Error<EB>> | E2, R | R2>\n  /**\n   * Selectively catch a `MicroCause` object of the given `Micro` effect,\n   * using the provided predicate to determine if the failure should be caught.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(\n    predicate: Predicate<MicroCause<NoInfer<E>>>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E | E2, R | R2>\n  /**\n   * Selectively catch a `MicroCause` object of the given `Micro` effect,\n   * using the provided predicate to determine if the failure should be caught.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2, EB extends MicroCause<E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (cause: EB) => Micro<B, E2, R2>\n  ): Micro<A | B, Exclude<E, MicroCause.Error<EB>> | E2, R | R2>\n  /**\n   * Selectively catch a `MicroCause` object of the given `Micro` effect,\n   * using the provided predicate to determine if the failure should be caught.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<MicroCause<NoInfer<E>>>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A | B, E | E2, R | R2>\n} = dual(\n  3,\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<MicroCause<E>>,\n    f: (cause: MicroCause<E>) => Micro<B, E2, R2>\n  ): Micro<A | B, E | E2, R | R2> =>\n    catchAllCause(self, (cause) => predicate(cause) ? f(cause) : failCause(cause) as any)\n)\n\n/**\n * Catch the error of the given `Micro` effect, allowing you to recover from it.\n *\n * It only catches expected errors.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchAll: {\n  /**\n   * Catch the error of the given `Micro` effect, allowing you to recover from it.\n   *\n   * It only catches expected errors.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(f: (e: NoInfer<E>) => Micro<B, E2, R2>): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E2, R | R2>\n  /**\n   * Catch the error of the given `Micro` effect, allowing you to recover from it.\n   *\n   * It only catches expected errors.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (e: NoInfer<E>) => Micro<B, E2, R2>): Micro<A | B, E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (a: NoInfer<E>) => Micro<B, E2, R2>\n  ): Micro<A | B, E2, R | R2> => catchCauseIf(self, causeIsFail, (cause) => f(cause.error))\n)\n\n/**\n * Catch any unexpected errors of the given `Micro` effect, allowing you to recover from them.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchAllDefect: {\n  /**\n   * Catch any unexpected errors of the given `Micro` effect, allowing you to recover from them.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(f: (defect: unknown) => Micro<B, E2, R2>): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E | E2, R | R2>\n  /**\n   * Catch any unexpected errors of the given `Micro` effect, allowing you to recover from them.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A | B, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A | B, E | E2, R | R2> =>\n    catchCauseIf(self, causeIsDie, (die) => f(die.defect))\n)\n\n/**\n * Perform a side effect using the full `MicroCause` object of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const tapErrorCause: {\n  /**\n   * Perform a side effect using the full `MicroCause` object of the given `Micro`.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  /**\n   * Perform a side effect using the full `MicroCause` object of the given `Micro`.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2> => tapErrorCauseIf(self, constTrue, f)\n)\n\n/**\n * Perform a side effect using if a `MicroCause` object matches the specified\n * predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const tapErrorCauseIf: {\n  /**\n   * Perform a side effect using if a `MicroCause` object matches the specified\n   * predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2, EB extends MicroCause<E>>(refinement: Refinement<MicroCause<E>, EB>, f: (a: EB) => Micro<B, E2, R2>): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  /**\n   * Perform a side effect using if a `MicroCause` object matches the specified\n   * predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(\n    predicate: (cause: NoInfer<MicroCause<E>>) => boolean,\n    f: (a: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  /**\n   * Perform a side effect using if a `MicroCause` object matches the specified\n   * predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2, EB extends MicroCause<E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (a: EB) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2>\n  /**\n   * Perform a side effect using if a `MicroCause` object matches the specified\n   * predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: (cause: NoInfer<MicroCause<E>>) => boolean,\n    f: (a: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2>\n} = dual(\n  3,\n  <A, E, R, B, E2, R2, EB extends MicroCause<E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (a: EB) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2> => catchCauseIf(self, refinement, (cause) => andThen(f(cause), failCause(cause)))\n)\n\n/**\n * Perform a side effect from expected errors of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const tapError: {\n  /**\n   * Perform a side effect from expected errors of the given `Micro`.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(f: (e: NoInfer<E>) => Micro<B, E2, R2>): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  /**\n   * Perform a side effect from expected errors of the given `Micro`.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (e: NoInfer<E>) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (e: NoInfer<E>) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2> =>\n    tapErrorCauseIf(self, causeIsFail, (fail) => f(fail.error))\n)\n\n/**\n * Perform a side effect from unexpected errors of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const tapDefect: {\n  /**\n   * Perform a side effect from unexpected errors of the given `Micro`.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(f: (defect: unknown) => Micro<B, E2, R2>): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  /**\n   * Perform a side effect from unexpected errors of the given `Micro`.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2> =>\n    tapErrorCauseIf(self, causeIsDie, (die) => f(die.defect))\n)\n\n/**\n * Catch any expected errors that match the specified predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const catchIf: {\n  /**\n   * Catch any expected errors that match the specified predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <E, EB extends E, A2, E2, R2>(refinement: Refinement<NoInfer<E>, EB>, f: (e: EB) => Micro<A2, E2, R2>): <A, R>(self: Micro<A, E, R>) => Micro<A2 | A, E2 | Exclude<E, EB>, R2 | R>\n  /**\n   * Catch any expected errors that match the specified predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <E, A2, E2, R2>(predicate: Predicate<NoInfer<E>>, f: (e: NoInfer<E>) => Micro<A2, E2, R2>): <A, R>(self: Micro<A, E, R>) => Micro<A2 | A, E | E2, R2 | R>\n  /**\n   * Catch any expected errors that match the specified predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, EB extends E, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<E, EB>,\n    f: (e: EB) => Micro<A2, E2, R2>\n  ): Micro<A | A2, E2 | Exclude<E, EB>, R | R2>\n  /**\n   * Catch any expected errors that match the specified predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<E>,\n    f: (e: E) => Micro<A2, E2, R2>\n  ): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<E>,\n    f: (e: E) => Micro<A2, E2, R2>\n  ): Micro<A | A2, E | E2, R | R2> =>\n    catchCauseIf(\n      self,\n      (f): f is MicroCause.Fail<E> => causeIsFail(f) && predicate(f.error),\n      (fail) => f(fail.error)\n    )\n)\n\n/**\n * Recovers from the specified tagged error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const catchTag: {\n  /**\n   * Recovers from the specified tagged error.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <K extends E extends { _tag: string } ? E[\"_tag\"] : never, E, A1, E1, R1>(k: K, f: (e: Extract<E, { _tag: K }>) => Micro<A1, E1, R1>): <A, R>(self: Micro<A, E, R>) => Micro<A1 | A, E1 | Exclude<E, { _tag: K }>, R1 | R>\n  /**\n   * Recovers from the specified tagged error.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, K extends E extends { _tag: string } ? E[\"_tag\"] : never, R1, E1, A1>(\n    self: Micro<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Micro<A1, E1, R1>\n  ): Micro<A | A1, E1 | Exclude<E, { _tag: K }>, R | R1>\n} = dual(3, <A, E, R, K extends E extends { _tag: string } ? E[\"_tag\"] : never, R1, E1, A1>(\n  self: Micro<A, E, R>,\n  k: K,\n  f: (e: Extract<E, { _tag: K }>) => Micro<A1, E1, R1>\n): Micro<A | A1, E1 | Exclude<E, { _tag: K }>, R | R1> =>\n  catchIf(self, isTagged(k) as Refinement<E, Extract<E, { _tag: K }>>, f) as any)\n\n/**\n * Transform the full `MicroCause` object of the given `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const mapErrorCause: {\n  /**\n   * Transform the full `MicroCause` object of the given `Micro` effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, E2>(f: (e: MicroCause<E>) => MicroCause<E2>): <A, R>(self: Micro<A, E, R>) => Micro<A, E2, R>\n  /**\n   * Transform the full `MicroCause` object of the given `Micro` effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: MicroCause<E>) => MicroCause<E2>): Micro<A, E2, R>\n} = dual(\n  2,\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: MicroCause<E>) => MicroCause<E2>): Micro<A, E2, R> =>\n    catchAllCause(self, (cause) => failCause(f(cause)))\n)\n\n/**\n * Transform any expected errors of the given `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const mapError: {\n  /**\n   * Transform any expected errors of the given `Micro` effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <E, E2>(f: (e: E) => E2): <A, R>(self: Micro<A, E, R>) => Micro<A, E2, R>\n  /**\n   * Transform any expected errors of the given `Micro` effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: E) => E2): Micro<A, E2, R>\n} = dual(\n  2,\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: E) => E2): Micro<A, E2, R> => catchAll(self, (error) => fail(f(error)))\n)\n\n/**\n * Elevate any expected errors of the given `Micro` effect to unexpected errors,\n * resulting in an error type of `never`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const orDie = <A, E, R>(self: Micro<A, E, R>): Micro<A, never, R> => catchAll(self, die)\n\n/**\n * Recover from all errors by succeeding with the given value.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const orElseSucceed: {\n  /**\n   * Recover from all errors by succeeding with the given value.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <B>(f: LazyArg<B>): <A, E, R>(self: Micro<A, E, R>) => Micro<A | B, never, R>\n  /**\n   * Recover from all errors by succeeding with the given value.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B>(self: Micro<A, E, R>, f: LazyArg<B>): Micro<A | B, never, R>\n} = dual(\n  2,\n  <A, E, R, B>(self: Micro<A, E, R>, f: LazyArg<B>): Micro<A | B, never, R> => catchAll(self, (_) => sync(f))\n)\n\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const ignore = <A, E, R>(self: Micro<A, E, R>): Micro<void, never, R> =>\n  matchEffect(self, { onFailure: (_) => void_, onSuccess: (_) => void_ })\n\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const ignoreLogged = <A, E, R>(self: Micro<A, E, R>): Micro<void, never, R> =>\n  matchEffect(self, {\n    // eslint-disable-next-line no-console\n    onFailure: (error) => sync(() => console.error(error)),\n    onSuccess: (_) => void_\n  })\n\n/**\n * Replace the success value of the given `Micro` effect with an `Option`,\n * wrapping the success value in `Some` and returning `None` if the effect fails\n * with an expected error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const option = <A, E, R>(self: Micro<A, E, R>): Micro<Option.Option<A>, never, R> =>\n  match(self, { onFailure: Option.none, onSuccess: Option.some })\n\n/**\n * Replace the success value of the given `Micro` effect with an `Either`,\n * wrapping the success value in `Right` and wrapping any expected errors with\n * a `Left`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const either = <A, E, R>(self: Micro<A, E, R>): Micro<Either.Either<A, E>, never, R> =>\n  match(self, { onFailure: Either.left, onSuccess: Either.right })\n\n/**\n * Retry the given `Micro` effect using the provided options.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const retry: {\n  /**\n   * Retry the given `Micro` effect using the provided options.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E>(\n    options?: {\n      while?: Predicate<E> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  /**\n   * Retry the given `Micro` effect using the provided options.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R>(\n    self: Micro<A, E, R>,\n    options?: {\n      while?: Predicate<E> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): Micro<A, E, R>\n} = dual((args) => isMicro(args[0]), <A, E, R>(\n  self: Micro<A, E, R>,\n  options?: {\n    while?: Predicate<E> | undefined\n    times?: number | undefined\n    schedule?: MicroSchedule | undefined\n  } | undefined\n): Micro<A, E, R> =>\n  repeatExit(self, {\n    ...options,\n    while: (exit) =>\n      exit._tag === \"Failure\" && exit.cause._tag === \"Fail\" &&\n      (options?.while === undefined || options.while(exit.cause.error))\n  }))\n\n/**\n * Add a stack trace to any failures that occur in the effect. The trace will be\n * added to the `traces` field of the `MicroCause` object.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const withTrace: {\n  /**\n   * Add a stack trace to any failures that occur in the effect. The trace will be\n   * added to the `traces` field of the `MicroCause` object.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  (name: string): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  /**\n   * Add a stack trace to any failures that occur in the effect. The trace will be\n   * added to the `traces` field of the `MicroCause` object.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R>(self: Micro<A, E, R>, name: string): Micro<A, E, R>\n} = function() {\n  const prevLimit = globalThis.Error.stackTraceLimit\n  globalThis.Error.stackTraceLimit = 2\n  const error = new globalThis.Error()\n  globalThis.Error.stackTraceLimit = prevLimit\n  function generate(name: string, cause: MicroCause<any>) {\n    const stack = error.stack\n    if (!stack) {\n      return cause\n    }\n    const line = stack.split(\"\\n\")[2]?.trim().replace(/^at /, \"\")\n    if (!line) {\n      return cause\n    }\n    const lineMatch = line.match(/\\((.*)\\)$/)\n    return causeWithTrace(cause, `at ${name} (${lineMatch ? lineMatch[1] : line})`)\n  }\n  const f = (name: string) => (self: Micro<any, any, any>) => onError(self, (cause) => failCause(generate(name, cause)))\n  if (arguments.length === 2) {\n    return f(arguments[1])(arguments[0])\n  }\n  return f(arguments[0])\n} as any\n\n// ----------------------------------------------------------------------------\n// pattern matching\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nexport const matchCauseEffect: {\n  // ----------------------------------------------------------------------------\n  // pattern matching\n  // ----------------------------------------------------------------------------\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category pattern matching\n   */\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n  // ----------------------------------------------------------------------------\n  // pattern matching\n  // ----------------------------------------------------------------------------\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category pattern matching\n   */\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R> => {\n    const primitive = Object.create(OnSuccessAndFailureProto)\n    primitive[args] = self\n    primitive[successCont] = options.onSuccess\n    primitive[failureCont] = options.onFailure\n    return primitive\n  }\n)\nconst OnSuccessAndFailureProto = makePrimitiveProto({\n  op: \"OnSuccessAndFailure\",\n  eval(this: any, fiber: MicroFiberImpl): Primitive {\n    fiber._stack.push(this)\n    return this[args]\n  }\n})\n\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nexport const matchCause: {\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category pattern matching\n   */\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, never, R>\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category pattern matching\n   */\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): Micro<A2 | A3, never, R>\n} = dual(\n  2,\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): Micro<A2 | A3, never, R> =>\n    matchCauseEffect(self, {\n      onFailure: (cause) => sync(() => options.onFailure(cause)),\n      onSuccess: (value) => sync(() => options.onSuccess(value))\n    })\n)\n\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nexport const matchEffect: {\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category pattern matching\n   */\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (e: E) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category pattern matching\n   */\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R> =>\n    matchCauseEffect(self, {\n      onFailure: (cause) => cause._tag === \"Fail\" ? options.onFailure(cause.error) : failCause(cause),\n      onSuccess: options.onSuccess\n    })\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category pattern matching\n */\nexport const match: {\n  /**\n   * @since 3.4.0\n   * @experimental\n   * @category pattern matching\n   */\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, never, R>\n  /**\n   * @since 3.4.0\n   * @experimental\n   * @category pattern matching\n   */\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): Micro<A2 | A3, never, R>\n} = dual(\n  2,\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): Micro<A2 | A3, never, R> =>\n    matchEffect(self, {\n      onFailure: (error) => sync(() => options.onFailure(error)),\n      onSuccess: (value) => sync(() => options.onSuccess(value))\n    })\n)\n\n// ----------------------------------------------------------------------------\n// delays & timeouts\n// ----------------------------------------------------------------------------\n\n/**\n * Create a `Micro` effect that will sleep for the specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const sleep = (millis: number): Micro<void> =>\n  async((resume) => {\n    const timeout = setTimeout(() => {\n      resume(void_)\n    }, millis)\n    return sync(() => {\n      clearTimeout(timeout)\n    })\n  })\n\n/**\n * Returns an effect that will delay the execution of this effect by the\n * specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const delay: {\n  /**\n   * Returns an effect that will delay the execution of this effect by the\n   * specified duration.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  (millis: number): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  /**\n   * Returns an effect that will delay the execution of this effect by the\n   * specified duration.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E, R> => andThen(sleep(millis), self)\n)\n\n/**\n * Returns an effect that will timeout this effect, that will execute the\n * fallback effect if the timeout elapses before the effect has produced a value.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const timeoutOrElse: {\n  /**\n   * Returns an effect that will timeout this effect, that will execute the\n   * fallback effect if the timeout elapses before the effect has produced a value.\n   *\n   * If the timeout elapses, the running effect will be safely interrupted.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  <A2, E2, R2>(\n    options: {\n      readonly duration: number\n      readonly onTimeout: LazyArg<Micro<A2, E2, R2>>\n    }\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<A | A2, E | E2, R | R2>\n  /**\n   * Returns an effect that will timeout this effect, that will execute the\n   * fallback effect if the timeout elapses before the effect has produced a value.\n   *\n   * If the timeout elapses, the running effect will be safely interrupted.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly duration: number\n      readonly onTimeout: LazyArg<Micro<A2, E2, R2>>\n    }\n  ): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, options: {\n    readonly duration: number\n    readonly onTimeout: LazyArg<Micro<A2, E2, R2>>\n  }): Micro<A | A2, E | E2, R | R2> =>\n    raceFirst(self, andThen(interruptible(sleep(options.duration)), options.onTimeout))\n)\n\n/**\n * Returns an effect that will timeout this effect, that will fail with a\n * `TimeoutException` if the timeout elapses before the effect has produced a\n * value.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const timeout: {\n  /**\n   * Returns an effect that will timeout this effect, that will fail with a\n   * `TimeoutException` if the timeout elapses before the effect has produced a\n   * value.\n   *\n   * If the timeout elapses, the running effect will be safely interrupted.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  (millis: number): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | TimeoutException, R>\n  /**\n   * Returns an effect that will timeout this effect, that will fail with a\n   * `TimeoutException` if the timeout elapses before the effect has produced a\n   * value.\n   *\n   * If the timeout elapses, the running effect will be safely interrupted.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E | TimeoutException, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E | TimeoutException, R> =>\n    timeoutOrElse(self, { duration: millis, onTimeout: () => fail(new TimeoutException()) })\n)\n\n/**\n * Returns an effect that will timeout this effect, succeeding with a `None`\n * if the timeout elapses before the effect has produced a value; and `Some` of\n * the produced value otherwise.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const timeoutOption: {\n  /**\n   * Returns an effect that will timeout this effect, succeeding with a `None`\n   * if the timeout elapses before the effect has produced a value; and `Some` of\n   * the produced value otherwise.\n   *\n   * If the timeout elapses, the running effect will be safely interrupted.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  (millis: number): <A, E, R>(self: Micro<A, E, R>) => Micro<Option.Option<A>, E, R>\n  /**\n   * Returns an effect that will timeout this effect, succeeding with a `None`\n   * if the timeout elapses before the effect has produced a value; and `Some` of\n   * the produced value otherwise.\n   *\n   * If the timeout elapses, the running effect will be safely interrupted.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<Option.Option<A>, E, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<Option.Option<A>, E, R> =>\n    raceFirst(\n      asSome(self),\n      as(interruptible(sleep(millis)), Option.none())\n    )\n)\n\n// ----------------------------------------------------------------------------\n// resources & finalization\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const MicroScopeTypeId: unique symbol = Symbol.for(\"effect/Micro/MicroScope\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport type MicroScopeTypeId = typeof MicroScopeTypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport interface MicroScope {\n  readonly [MicroScopeTypeId]: MicroScopeTypeId\n  readonly addFinalizer: (finalizer: (exit: MicroExit<unknown, unknown>) => Micro<void>) => Micro<void>\n  readonly fork: Micro<MicroScope.Closeable>\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport declare namespace MicroScope {\n  /**\n   * @since 3.4.0\n   * @experimental\n   * @category resources & finalization\n   */\n  export interface Closeable extends MicroScope {\n    readonly close: (exit: MicroExit<any, any>) => Micro<void>\n  }\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const MicroScope: Context.Tag<MicroScope, MicroScope> = Context.GenericTag<MicroScope>(\"effect/Micro/MicroScope\")\n\nclass MicroScopeImpl implements MicroScope.Closeable {\n  readonly [MicroScopeTypeId]: MicroScopeTypeId\n  state: {\n    readonly _tag: \"Open\"\n    readonly finalizers: Set<(exit: MicroExit<any, any>) => Micro<void>>\n  } | {\n    readonly _tag: \"Closed\"\n    readonly exit: MicroExit<any, any>\n  } = { _tag: \"Open\", finalizers: new Set() }\n\n  constructor() {\n    this[MicroScopeTypeId] = MicroScopeTypeId\n  }\n\n  unsafeAddFinalizer(finalizer: (exit: MicroExit<any, any>) => Micro<void>): void {\n    if (this.state._tag === \"Open\") {\n      this.state.finalizers.add(finalizer)\n    }\n  }\n  addFinalizer(finalizer: (exit: MicroExit<any, any>) => Micro<void>): Micro<void> {\n    return suspend(() => {\n      if (this.state._tag === \"Open\") {\n        this.state.finalizers.add(finalizer)\n        return void_\n      }\n      return finalizer(this.state.exit)\n    })\n  }\n  unsafeRemoveFinalizer(finalizer: (exit: MicroExit<any, any>) => Micro<void>): void {\n    if (this.state._tag === \"Open\") {\n      this.state.finalizers.delete(finalizer)\n    }\n  }\n  close(microExit: MicroExit<any, any>): Micro<void> {\n    return suspend(() => {\n      if (this.state._tag === \"Open\") {\n        const finalizers = Array.from(this.state.finalizers).reverse()\n        this.state = { _tag: \"Closed\", exit: microExit }\n        return flatMap(\n          forEach(finalizers, (finalizer) => exit(finalizer(microExit))),\n          exitVoidAll\n        )\n      }\n      return void_\n    })\n  }\n  get fork() {\n    return sync(() => {\n      const newScope = new MicroScopeImpl()\n      if (this.state._tag === \"Closed\") {\n        newScope.state = this.state\n        return newScope\n      }\n      function fin(exit: MicroExit<any, any>) {\n        return newScope.close(exit)\n      }\n      this.state.finalizers.add(fin)\n      newScope.unsafeAddFinalizer((_) => sync(() => this.unsafeRemoveFinalizer(fin)))\n      return newScope\n    })\n  }\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scopeMake: Micro<MicroScope.Closeable> = sync(() => new MicroScopeImpl())\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scopeUnsafeMake = (): MicroScope.Closeable => new MicroScopeImpl()\n\n/**\n * Access the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scope: Micro<MicroScope, never, MicroScope> = service(MicroScope)\n\n/**\n * Provide a `MicroScope` to an effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const provideScope: {\n  /**\n   * Provide a `MicroScope` to an effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category resources & finalization\n   */\n  (scope: MicroScope): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, Exclude<R, MicroScope>>\n  /**\n   * Provide a `MicroScope` to an effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<A, E, Exclude<R, MicroScope>>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<A, E, Exclude<R, MicroScope>> =>\n    provideService(self, MicroScope, scope)\n)\n\n/**\n * Provide a `MicroScope` to the given effect, closing it after the effect has\n * finished executing.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scoped = <A, E, R>(self: Micro<A, E, R>): Micro<A, E, Exclude<R, MicroScope>> =>\n  suspend(() => {\n    const scope = new MicroScopeImpl()\n    return onExit(provideService(self, MicroScope, scope), (exit) => scope.close(exit))\n  })\n\n/**\n * Create a resource with a cleanup `Micro` effect, ensuring the cleanup is\n * executed when the `MicroScope` is closed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const acquireRelease = <A, E, R>(\n  acquire: Micro<A, E, R>,\n  release: (a: A, exit: MicroExit<unknown, unknown>) => Micro<void>\n): Micro<A, E, R | MicroScope> =>\n  uninterruptible(flatMap(\n    scope,\n    (scope) => tap(acquire, (a) => scope.addFinalizer((exit) => release(a, exit)))\n  ))\n\n/**\n * Add a finalizer to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const addFinalizer = (\n  finalizer: (exit: MicroExit<unknown, unknown>) => Micro<void>\n): Micro<void, never, MicroScope> => flatMap(scope, (scope) => scope.addFinalizer(finalizer))\n\n/**\n * When the `Micro` effect is completed, run the given finalizer effect with the\n * `MicroExit` of the executed effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onExit: {\n  /**\n   * When the `Micro` effect is completed, run the given finalizer effect with the\n   * `MicroExit` of the executed effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, XE, XR>(f: (exit: MicroExit<A, E>) => Micro<void, XE, XR>): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  /**\n   * When the `Micro` effect is completed, run the given finalizer effect with the\n   * `MicroExit` of the executed effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, f: (exit: MicroExit<A, E>) => Micro<void, XE, XR>): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    f: (exit: MicroExit<A, E>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR> =>\n    uninterruptibleMask((restore) =>\n      matchCauseEffect(restore(self), {\n        onFailure: (cause) => flatMap(f(exitFailCause(cause)), () => failCause(cause)),\n        onSuccess: (a) => flatMap(f(exitSucceed(a)), () => succeed(a))\n      })\n    )\n)\n\n/**\n * Regardless of the result of the this `Micro` effect, run the finalizer effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const ensuring: {\n  /**\n   * Regardless of the result of the this `Micro` effect, run the finalizer effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category resources & finalization\n   */\n  <XE, XR>(finalizer: Micro<void, XE, XR>): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  /**\n   * Regardless of the result of the this `Micro` effect, run the finalizer effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, finalizer: Micro<void, XE, XR>): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    finalizer: Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR> => onExit(self, (_) => finalizer)\n)\n\n/**\n * When the `Micro` effect is completed, run the given finalizer effect if it\n * matches the specified predicate.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onExitIf: {\n  /**\n   * When the `Micro` effect is completed, run the given finalizer effect if it\n   * matches the specified predicate.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, XE, XR, B extends MicroExit<A, E>>(\n    refinement: Refinement<MicroExit<A, E>, B>,\n    f: (exit: B) => Micro<void, XE, XR>\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  /**\n   * When the `Micro` effect is completed, run the given finalizer effect if it\n   * matches the specified predicate.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, XE, XR>(\n    predicate: Predicate<MicroExit<NoInfer<A>, NoInfer<E>>>,\n    f: (exit: MicroExit<NoInfer<A>, NoInfer<E>>) => Micro<void, XE, XR>\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  /**\n   * When the `Micro` effect is completed, run the given finalizer effect if it\n   * matches the specified predicate.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, R, XE, XR, B extends MicroExit<A, E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroExit<A, E>, B>,\n    f: (exit: B) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR>\n  /**\n   * When the `Micro` effect is completed, run the given finalizer effect if it\n   * matches the specified predicate.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<MicroExit<NoInfer<A>, NoInfer<E>>>,\n    f: (exit: MicroExit<NoInfer<A>, NoInfer<E>>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR>\n} = dual(\n  3,\n  <A, E, R, XE, XR, B extends MicroExit<A, E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroExit<A, E>, B>,\n    f: (exit: B) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR> => onExit(self, (exit) => (refinement(exit) ? f(exit) : exitVoid))\n)\n\n/**\n * When the `Micro` effect fails, run the given finalizer effect with the\n * `MicroCause` of the executed effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onError: {\n  /**\n   * When the `Micro` effect fails, run the given finalizer effect with the\n   * `MicroCause` of the executed effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, XE, XR>(f: (cause: MicroCause<NoInfer<E>>) => Micro<void, XE, XR>): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  /**\n   * When the `Micro` effect fails, run the given finalizer effect with the\n   * `MicroCause` of the executed effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    f: (cause: MicroCause<NoInfer<E>>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    f: (cause: MicroCause<NoInfer<E>>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR> => onExitIf(self, exitIsFailure, (exit) => f(exit.cause))\n)\n\n/**\n * If this `Micro` effect is aborted, run the finalizer effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onInterrupt: {\n  /**\n   * If this `Micro` effect is aborted, run the finalizer effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <XE, XR>(finalizer: Micro<void, XE, XR>): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  /**\n   * If this `Micro` effect is aborted, run the finalizer effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, finalizer: Micro<void, XE, XR>): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, finalizer: Micro<void, XE, XR>): Micro<A, E | XE, R | XR> =>\n    onExitIf(self, exitIsInterrupt, (_) => finalizer)\n)\n\n/**\n * Acquire a resource, use it, and then release the resource when the `use`\n * effect has completed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const acquireUseRelease = <Resource, E, R, A, E2, R2, E3, R3>(\n  acquire: Micro<Resource, E, R>,\n  use: (a: Resource) => Micro<A, E2, R2>,\n  release: (a: Resource, exit: MicroExit<A, E2>) => Micro<void, E3, R3>\n): Micro<A, E | E2 | E3, R | R2 | R3> =>\n  uninterruptibleMask((restore) =>\n    flatMap(\n      acquire,\n      (a) =>\n        flatMap(\n          exit(restore(use(a))),\n          (exit) => andThen(release(a, exit), exit)\n        )\n    )\n  )\n\n// ----------------------------------------------------------------------------\n// interruption\n// ----------------------------------------------------------------------------\n\n/**\n * Abort the current `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category interruption\n */\nexport const interrupt: Micro<never> = failCause(causeInterrupt())\n\n/**\n * Flag the effect as uninterruptible, which means that when the effect is\n * interrupted, it will be allowed to continue running until completion.\n *\n * @since 3.4.0\n * @experimental\n * @category flags\n */\nexport const uninterruptible = <A, E, R>(\n  self: Micro<A, E, R>\n): Micro<A, E, R> =>\n  withMicroFiber((fiber) => {\n    if (!fiber.interruptible) return self\n    fiber.interruptible = false\n    fiber._stack.push(setInterruptible(true))\n    return self\n  })\n\nconst setInterruptible: (interruptible: boolean) => Primitive = makePrimitive({\n  op: \"SetInterruptible\",\n  ensure(fiber) {\n    fiber.interruptible = this[args]\n    if (fiber._interrupted && fiber.interruptible) {\n      return () => exitInterrupt\n    }\n  }\n})\n\n/**\n * Flag the effect as interruptible, which means that when the effect is\n * interrupted, it will be interrupted immediately.\n *\n * @since 3.4.0\n * @experimental\n * @category flags\n */\nexport const interruptible = <A, E, R>(\n  self: Micro<A, E, R>\n): Micro<A, E, R> =>\n  withMicroFiber((fiber) => {\n    if (fiber.interruptible) return self\n    fiber.interruptible = true\n    fiber._stack.push(setInterruptible(false))\n    if (fiber._interrupted) return exitInterrupt\n    return self\n  })\n\n/**\n * Wrap the given `Micro` effect in an uninterruptible region, preventing the\n * effect from being aborted.\n *\n * You can use the `restore` function to restore a `Micro` effect to the\n * interruptibility state before the `uninterruptibleMask` was applied.\n *\n * @example\n * ```ts\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.uninterruptibleMask((restore) =>\n *   Micro.sleep(1000).pipe( // uninterruptible\n *     Micro.andThen(restore(Micro.sleep(1000))) // interruptible\n *   )\n * )\n * ```\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n */\nexport const uninterruptibleMask = <A, E, R>(\n  f: (\n    restore: <A, E, R>(effect: Micro<A, E, R>) => Micro<A, E, R>\n  ) => Micro<A, E, R>\n): Micro<A, E, R> =>\n  withMicroFiber((fiber) => {\n    if (!fiber.interruptible) return f(identity)\n    fiber.interruptible = false\n    fiber._stack.push(setInterruptible(true))\n    return f(interruptible)\n  })\n\n// ========================================================================\n// collecting & elements\n// ========================================================================\n\n/**\n * @since 3.4.0\n * @experimental\n */\nexport declare namespace All {\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type MicroAny = Micro<any, any, any>\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type ReturnIterable<T extends Iterable<MicroAny>, Discard extends boolean> = [T] extends\n    [Iterable<Micro<infer A, infer E, infer R>>] ? Micro<\n      Discard extends true ? void : Array<A>,\n      E,\n      R\n    >\n    : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type ReturnTuple<T extends ReadonlyArray<unknown>, Discard extends boolean> = Micro<\n    Discard extends true ? void\n      : T[number] extends never ? []\n      : { -readonly [K in keyof T]: T[K] extends Micro<infer _A, infer _E, infer _R> ? _A : never },\n    T[number] extends never ? never\n      : T[number] extends Micro<infer _A, infer _E, infer _R> ? _E\n      : never,\n    T[number] extends never ? never\n      : T[number] extends Micro<infer _A, infer _E, infer _R> ? _R\n      : never\n  > extends infer X ? X : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type ReturnObject<T, Discard extends boolean> = [T] extends [{ [K: string]: MicroAny }] ? Micro<\n      Discard extends true ? void :\n        { -readonly [K in keyof T]: [T[K]] extends [Micro<infer _A, infer _E, infer _R>] ? _A : never },\n      keyof T extends never ? never\n        : T[keyof T] extends Micro<infer _A, infer _E, infer _R> ? _E\n        : never,\n      keyof T extends never ? never\n        : T[keyof T] extends Micro<infer _A, infer _E, infer _R> ? _R\n        : never\n    >\n    : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type IsDiscard<A> = [Extract<A, { readonly discard: true }>] extends [never] ? false : true\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Return<\n    Arg extends Iterable<MicroAny> | Record<string, MicroAny>,\n    O extends NoExcessProperties<{\n      readonly concurrency?: Concurrency | undefined\n      readonly discard?: boolean | undefined\n    }, O>\n  > = [Arg] extends [ReadonlyArray<MicroAny>] ? ReturnTuple<Arg, IsDiscard<O>>\n    : [Arg] extends [Iterable<MicroAny>] ? ReturnIterable<Arg, IsDiscard<O>>\n    : [Arg] extends [Record<string, MicroAny>] ? ReturnObject<Arg, IsDiscard<O>>\n    : never\n}\n\n/**\n * Runs all the provided effects in sequence respecting the structure provided in input.\n *\n * Supports multiple arguments, a single argument tuple / array or record / struct.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const all = <\n  const Arg extends Iterable<Micro<any, any, any>> | Record<string, Micro<any, any, any>>,\n  O extends NoExcessProperties<{\n    readonly concurrency?: Concurrency | undefined\n    readonly discard?: boolean | undefined\n  }, O>\n>(arg: Arg, options?: O): All.Return<Arg, O> => {\n  if (Array.isArray(arg) || isIterable(arg)) {\n    return (forEach as any)(arg, identity, options)\n  } else if (options?.discard) {\n    return (forEach as any)(Object.values(arg), identity, options)\n  }\n  return suspend(() => {\n    const out: Record<string, unknown> = {}\n    return as(\n      forEach(Object.entries(arg), ([key, effect]) =>\n        map(effect, (value) => {\n          out[key] = value\n        }), {\n        discard: true,\n        concurrency: options?.concurrency\n      }),\n      out\n    )\n  }) as any\n}\n\n/**\n * @since 3.11.0\n * @experimental\n * @category collecting & elements\n */\nexport const whileLoop: <A, E, R>(options: {\n  readonly while: LazyArg<boolean>\n  readonly body: LazyArg<Micro<A, E, R>>\n  readonly step: (a: A) => void\n}) => Micro<void, E, R> = makePrimitive({\n  op: \"While\",\n  contA(value, fiber) {\n    this[args].step(value)\n    if (this[args].while()) {\n      fiber._stack.push(this)\n      return this[args].body()\n    }\n    return exitVoid\n  },\n  eval(fiber) {\n    if (this[args].while()) {\n      fiber._stack.push(this)\n      return this[args].body()\n    }\n    return exitVoid\n  }\n})\n\n/**\n * For each element of the provided iterable, run the effect and collect the\n * results.\n *\n * If the `discard` option is set to `true`, the results will be discarded and\n * the effect will return `void`.\n *\n * The `concurrency` option can be set to control how many effects are run\n * concurrently. By default, the effects are run sequentially.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const forEach: {\n  /**\n   * For each element of the provided iterable, run the effect and collect the\n   * results.\n   *\n   * If the `discard` option is set to `true`, the results will be discarded and\n   * the effect will return `void`.\n   *\n   * The `concurrency` option can be set to control how many effects are run\n   * concurrently. By default, the effects are run sequentially.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category collecting & elements\n   */\n  <A, B, E, R>(\n    iterable: Iterable<A>,\n    f: (a: A, index: number) => Micro<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly discard?: false | undefined\n    }\n  ): Micro<Array<B>, E, R>\n  /**\n   * For each element of the provided iterable, run the effect and collect the\n   * results.\n   *\n   * If the `discard` option is set to `true`, the results will be discarded and\n   * the effect will return `void`.\n   *\n   * The `concurrency` option can be set to control how many effects are run\n   * concurrently. By default, the effects are run sequentially.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category collecting & elements\n   */\n  <A, B, E, R>(\n    iterable: Iterable<A>,\n    f: (a: A, index: number) => Micro<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly discard: true\n    }\n  ): Micro<void, E, R>\n} = <\n  A,\n  B,\n  E,\n  R\n>(iterable: Iterable<A>, f: (a: A, index: number) => Micro<B, E, R>, options?: {\n  readonly concurrency?: Concurrency | undefined\n  readonly discard?: boolean | undefined\n}): Micro<any, E, R> =>\n  withMicroFiber((parent) => {\n    const concurrencyOption = options?.concurrency === \"inherit\"\n      ? parent.getRef(CurrentConcurrency)\n      : options?.concurrency ?? 1\n    const concurrency = concurrencyOption === \"unbounded\"\n      ? Number.POSITIVE_INFINITY\n      : Math.max(1, concurrencyOption)\n\n    const items = Arr.fromIterable(iterable)\n    let length = items.length\n    if (length === 0) {\n      return options?.discard ? void_ : succeed([])\n    }\n\n    const out: Array<B> | undefined = options?.discard ? undefined : new Array(length)\n    let index = 0\n\n    if (concurrency === 1) {\n      return as(\n        whileLoop({\n          while: () => index < items.length,\n          body: () => f(items[index], index),\n          step: out ?\n            (b) => out[index++] = b :\n            (_) => index++\n        }),\n        out as any\n      )\n    }\n    return async((resume) => {\n      const fibers = new Set<MicroFiber<unknown, unknown>>()\n      let result: MicroExit<any, any> | undefined = undefined\n      let inProgress = 0\n      let doneCount = 0\n      let pumping = false\n      let interrupted = false\n      function pump() {\n        pumping = true\n        while (inProgress < concurrency && index < length) {\n          const currentIndex = index\n          const item = items[currentIndex]\n          index++\n          inProgress++\n          try {\n            const child = unsafeFork(parent, f(item, currentIndex), true, true)\n            fibers.add(child)\n            child.addObserver((exit) => {\n              fibers.delete(child)\n              if (interrupted) {\n                return\n              } else if (exit._tag === \"Failure\") {\n                if (result === undefined) {\n                  result = exit\n                  length = index\n                  fibers.forEach((fiber) => fiber.unsafeInterrupt())\n                }\n              } else if (out !== undefined) {\n                out[currentIndex] = exit.value\n              }\n              doneCount++\n              inProgress--\n              if (doneCount === length) {\n                resume(result ?? succeed(out))\n              } else if (!pumping && inProgress < concurrency) {\n                pump()\n              }\n            })\n          } catch (err) {\n            result = exitDie(err)\n            length = index\n            fibers.forEach((fiber) => fiber.unsafeInterrupt())\n          }\n        }\n        pumping = false\n      }\n      pump()\n\n      return suspend(() => {\n        interrupted = true\n        index = length\n        return fiberInterruptAll(fibers)\n      })\n    })\n  })\n\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed\n * concurrently.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const filter = <A, E, R>(iterable: Iterable<A>, f: (a: NoInfer<A>) => Micro<boolean, E, R>, options?: {\n  readonly concurrency?: Concurrency | undefined\n  readonly negate?: boolean | undefined\n}): Micro<Array<A>, E, R> =>\n  filterMap(iterable, (a) =>\n    map(f(a), (pass) => {\n      pass = options?.negate ? !pass : pass\n      return pass ? Option.some(a) : Option.none()\n    }), options)\n\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed\n * concurrently.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const filterMap = <A, B, E, R>(\n  iterable: Iterable<A>,\n  f: (a: NoInfer<A>) => Micro<Option.Option<B>, E, R>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n  }\n): Micro<Array<B>, E, R> =>\n  suspend(() => {\n    const out: Array<B> = []\n    return as(\n      forEach(iterable, (a) =>\n        map(f(a), (o) => {\n          if (o._tag === \"Some\") {\n            out.push(o.value)\n          }\n        }), {\n        discard: true,\n        concurrency: options?.concurrency\n      }),\n      out\n    )\n  })\n\n// ----------------------------------------------------------------------------\n// do notation\n// ----------------------------------------------------------------------------\n\n/**\n * Start a do notation block.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nexport const Do: Micro<{}> = succeed({})\n\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nexport const bindTo: {\n  /**\n   * Bind the success value of this `Micro` effect to the provided name.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category do notation\n   */\n  <N extends string>(name: N): <A, E, R>(self: Micro<A, E, R>) => Micro<{ [K in N]: A }, E, R>\n  /**\n   * Bind the success value of this `Micro` effect to the provided name.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category do notation\n   */\n  <A, E, R, N extends string>(self: Micro<A, E, R>, name: N): Micro<{ [K in N]: A }, E, R>\n} = doNotation.bindTo<MicroTypeLambda>(map)\n\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nexport const bind: {\n  /**\n   * Bind the success value of this `Micro` effect to the provided name.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category do notation\n   */\n  <N extends string, A extends Record<string, any>, B, E2, R2>(name: N, f: (a: NoInfer<A>) => Micro<B, E2, R2>): <E, R>(self: Micro<A, E, R>) => Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E | E2, R | R2>\n  /**\n   * Bind the success value of this `Micro` effect to the provided name.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category do notation\n   */\n  <A extends Record<string, any>, E, R, B, E2, R2, N extends string>(self: Micro<A, E, R>, name: N, f: (a: NoInfer<A>) => Micro<B, E2, R2>): Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E | E2, R | R2>\n} = doNotation.bind<MicroTypeLambda>(map, flatMap)\n\nconst let_: {\n  <N extends string, A extends Record<string, any>, B>(\n    name: N,\n    f: (a: NoInfer<A>) => B\n  ): <E, R>(self: Micro<A, E, R>) => Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E, R>\n  <A extends Record<string, any>, E, R, B, N extends string>(\n    self: Micro<A, E, R>,\n    name: N,\n    f: (a: NoInfer<A>) => B\n  ): Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E, R>\n} = doNotation.let_<MicroTypeLambda>(map)\n\nexport {\n  /**\n   * Bind the result of a synchronous computation to the given name.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category do notation\n   */\n  let_ as let\n}\n\n// ----------------------------------------------------------------------------\n// fibers & forking\n// ----------------------------------------------------------------------------\n\n/**\n * Run the `Micro` effect in a new `MicroFiber` that can be awaited, joined, or\n * aborted.\n *\n * When the parent `Micro` finishes, this `Micro` will be aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category fiber & forking\n */\nexport const fork = <A, E, R>(\n  self: Micro<A, E, R>\n): Micro<MicroFiber<A, E>, never, R> =>\n  withMicroFiber((fiber) => {\n    fiberMiddleware.interruptChildren ??= fiberInterruptChildren\n    return succeed(unsafeFork(fiber, self))\n  })\n\nconst unsafeFork = <FA, FE, A, E, R>(\n  parent: MicroFiberImpl<FA, FE>,\n  effect: Micro<A, E, R>,\n  immediate = false,\n  daemon = false\n): MicroFiber<A, E> => {\n  const child = new MicroFiberImpl<A, E>(parent.context, parent.interruptible)\n  if (!daemon) {\n    parent.children().add(child)\n    child.addObserver(() => parent.children().delete(child))\n  }\n  if (immediate) {\n    child.evaluate(effect as any)\n  } else {\n    parent.getRef(CurrentScheduler).scheduleTask(() => child.evaluate(effect as any), 0)\n  }\n  return child\n}\n\n/**\n * Run the `Micro` effect in a new `MicroFiber` that can be awaited, joined, or\n * aborted.\n *\n * It will not be aborted when the parent `Micro` finishes.\n *\n * @since 3.4.0\n * @experimental\n * @category fiber & forking\n */\nexport const forkDaemon = <A, E, R>(\n  self: Micro<A, E, R>\n): Micro<MicroFiber<A, E>, never, R> => withMicroFiber((fiber) => succeed(unsafeFork(fiber, self, false, true)))\n\n/**\n * Run the `Micro` effect in a new `MicroFiber` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the provided `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category fiber & forking\n */\nexport const forkIn: {\n  /**\n   * Run the `Micro` effect in a new `MicroFiber` that can be awaited, joined, or\n   * aborted.\n   *\n   * The lifetime of the handle will be attached to the provided `MicroScope`.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category fiber & forking\n   */\n  (scope: MicroScope): <A, E, R>(self: Micro<A, E, R>) => Micro<MicroFiber<A, E>, never, R>\n  /**\n   * Run the `Micro` effect in a new `MicroFiber` that can be awaited, joined, or\n   * aborted.\n   *\n   * The lifetime of the handle will be attached to the provided `MicroScope`.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category fiber & forking\n   */\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<MicroFiber<A, E>, never, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<MicroFiber<A, E>, never, R> =>\n    uninterruptibleMask((restore) =>\n      flatMap(scope.fork, (scope) =>\n        tap(\n          restore(forkDaemon(onExit(self, (exit) => scope.close(exit)))),\n          (fiber) => scope.addFinalizer((_) => fiberInterrupt(fiber))\n        ))\n    )\n)\n\n/**\n * Run the `Micro` effect in a new `MicroFiber` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category fiber & forking\n */\nexport const forkScoped = <A, E, R>(self: Micro<A, E, R>): Micro<MicroFiber<A, E>, never, R | MicroScope> =>\n  flatMap(scope, (scope) => forkIn(self, scope))\n\n// ----------------------------------------------------------------------------\n// execution\n// ----------------------------------------------------------------------------\n\n/**\n * Execute the `Micro` effect and return a `MicroFiber` that can be awaited, joined,\n * or aborted.\n *\n * You can listen for the result by adding an observer using the handle's\n * `addObserver` method.\n *\n * @example\n * ```ts\n * import * as Micro from \"effect/Micro\"\n *\n * const handle = Micro.succeed(42).pipe(\n *   Micro.delay(1000),\n *   Micro.runFork\n * )\n *\n * handle.addObserver((exit) => {\n *   console.log(exit)\n * })\n * ```\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nexport const runFork = <A, E>(\n  effect: Micro<A, E>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n    readonly scheduler?: MicroScheduler | undefined\n  } | undefined\n): MicroFiberImpl<A, E> => {\n  const fiber = new MicroFiberImpl<A, E>(CurrentScheduler.context(\n    options?.scheduler ?? new MicroSchedulerDefault()\n  ))\n  fiber.evaluate(effect as any)\n  if (options?.signal) {\n    if (options.signal.aborted) {\n      fiber.unsafeInterrupt()\n    } else {\n      const abort = () => fiber.unsafeInterrupt()\n      options.signal.addEventListener(\"abort\", abort, { once: true })\n      fiber.addObserver(() => options.signal!.removeEventListener(\"abort\", abort))\n    }\n  }\n  return fiber\n}\n\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * `MicroExit` of the computation.\n *\n * @since 3.4.6\n * @experimental\n * @category execution\n */\nexport const runPromiseExit = <A, E>(\n  effect: Micro<A, E>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n    readonly scheduler?: MicroScheduler | undefined\n  } | undefined\n): Promise<MicroExit<A, E>> =>\n  new Promise((resolve, _reject) => {\n    const handle = runFork(effect, options)\n    handle.addObserver(resolve)\n  })\n\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * successful value of the computation.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nexport const runPromise = <A, E>(\n  effect: Micro<A, E>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n    readonly scheduler?: MicroScheduler | undefined\n  } | undefined\n): Promise<A> =>\n  runPromiseExit(effect, options).then((exit) => {\n    if (exit._tag === \"Failure\") {\n      throw exit.cause\n    }\n    return exit.value\n  })\n\n/**\n * Attempt to execute the `Micro` effect synchronously and return the `MicroExit`.\n *\n * If any asynchronous effects are encountered, the function will return a\n * `CauseDie` containing the `MicroFiber`.\n *\n * @since 3.4.6\n * @experimental\n * @category execution\n */\nexport const runSyncExit = <A, E>(effect: Micro<A, E>): MicroExit<A, E> => {\n  const scheduler = new MicroSchedulerDefault()\n  const fiber = runFork(effect, { scheduler })\n  scheduler.flush()\n  return fiber._exit ?? exitDie(fiber)\n}\n\n/**\n * Attempt to execute the `Micro` effect synchronously and return the success\n * value.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nexport const runSync = <A, E>(effect: Micro<A, E>): A => {\n  const exit = runSyncExit(effect)\n  if (exit._tag === \"Failure\") throw exit.cause\n  return exit.value\n}\n\n// ----------------------------------------------------------------------------\n// Errors\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nexport interface YieldableError extends Pipeable, Inspectable, Readonly<Error> {\n  readonly [Effectable.EffectTypeId]: Effect.VarianceStruct<never, this, never>\n  readonly [Effectable.StreamTypeId]: Stream.VarianceStruct<never, this, never>\n  readonly [Effectable.SinkTypeId]: Sink.VarianceStruct<never, unknown, never, this, never>\n  readonly [Effectable.ChannelTypeId]: Channel.VarianceStruct<never, unknown, this, unknown, never, unknown, never>\n  readonly [TypeId]: Micro.Variance<never, this, never>\n  [Symbol.iterator](): MicroIterator<Micro<never, this, never>>\n}\n\nconst YieldableError: new(message?: string) => YieldableError = (function() {\n  class YieldableError extends globalThis.Error {}\n  // @effect-diagnostics-next-line floatingEffect:off\n  Object.assign(YieldableError.prototype, MicroProto, StructuralPrototype, {\n    [identifier]: \"Failure\",\n    [evaluate]() {\n      return fail(this)\n    },\n    toString(this: Error) {\n      return this.message ? `${this.name}: ${this.message}` : this.name\n    },\n    toJSON() {\n      return { ...this }\n    },\n    [NodeInspectSymbol](this: Error): string {\n      const stack = this.stack\n      if (stack) {\n        return `${this.toString()}\\n${stack.split(\"\\n\").slice(1).join(\"\\n\")}`\n      }\n      return this.toString()\n    }\n  })\n  return YieldableError as any\n})()\n\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nexport const Error: new<A extends Record<string, any> = {}>(\n  args: Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A]: A[P] }\n) => YieldableError & Readonly<A> = (function() {\n  return class extends YieldableError {\n    constructor(args: any) {\n      super()\n      if (args) {\n        Object.assign(this, args)\n      }\n    }\n  } as any\n})()\n\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nexport const TaggedError = <Tag extends string>(tag: Tag): new<A extends Record<string, any> = {}>(\n  args: Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" ? never : P]: A[P] }\n) => YieldableError & { readonly _tag: Tag } & Readonly<A> => {\n  class Base extends Error<{}> {\n    readonly _tag = tag\n  }\n  ;(Base.prototype as any).name = tag\n  return Base as any\n}\n\n/**\n * Represents a checked exception which occurs when an expected element was\n * unable to be found.\n *\n * @since 3.4.4\n * @experimental\n * @category errors\n */\nexport class NoSuchElementException extends TaggedError(\"NoSuchElementException\")<{ message?: string | undefined }> {}\n\n/**\n * Represents a checked exception which occurs when a timeout occurs.\n *\n * @since 3.4.4\n * @experimental\n * @category errors\n */\nexport class TimeoutException extends TaggedError(\"TimeoutException\") {}\n", "/**\n * @since 2.0.0\n */\n\nimport type { Effect } from \"./Effect.js\"\nimport type { RuntimeFiber } from \"./Fiber.js\"\nimport type { FiberRef } from \"./FiberRef.js\"\nimport { dual } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport * as core from \"./internal/core.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type Task = () => void\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Scheduler {\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false\n  scheduleTask(task: Task, priority: number): void\n}\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport class PriorityBuckets<in out T = Task> {\n  /**\n   * @since 2.0.0\n   */\n  public buckets: Array<[number, Array<T>]> = []\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: T, priority: number) {\n    const length = this.buckets.length\n    let bucket: [number, Array<T>] | undefined = undefined\n    let index = 0\n    for (; index < length; index++) {\n      if (this.buckets[index][0] <= priority) {\n        bucket = this.buckets[index]\n      } else {\n        break\n      }\n    }\n    if (bucket && bucket[0] === priority) {\n      bucket[1].push(task)\n    } else if (index === length) {\n      this.buckets.push([priority, [task]])\n    } else {\n      this.buckets.splice(index, 0, [priority, [task]])\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport class MixedScheduler implements Scheduler {\n  /**\n   * @since 2.0.0\n   */\n  running = false\n  /**\n   * @since 2.0.0\n   */\n  tasks = new PriorityBuckets()\n\n  constructor(\n    /**\n     * @since 2.0.0\n     */\n    readonly maxNextTickBeforeTimer: number\n  ) {}\n\n  /**\n   * @since 2.0.0\n   */\n  private starveInternal(depth: number) {\n    const tasks = this.tasks.buckets\n    this.tasks.buckets = []\n    for (const [_, toRun] of tasks) {\n      for (let i = 0; i < toRun.length; i++) {\n        toRun[i]()\n      }\n    }\n    if (this.tasks.buckets.length === 0) {\n      this.running = false\n    } else {\n      this.starve(depth)\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  private starve(depth = 0) {\n    if (depth >= this.maxNextTickBeforeTimer) {\n      setTimeout(() => this.starveInternal(0), 0)\n    } else {\n      Promise.resolve(void 0).then(() => this.starveInternal(depth + 1))\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false {\n    return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n      ? fiber.getFiberRef(core.currentSchedulingPriority)\n      : false\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: Task, priority: number) {\n    this.tasks.scheduleTask(task, priority)\n    if (!this.running) {\n      this.running = true\n      this.starve()\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category schedulers\n */\nexport const defaultScheduler: Scheduler = globalValue(\n  Symbol.for(\"effect/Scheduler/defaultScheduler\"),\n  () => new MixedScheduler(2048)\n)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport class SyncScheduler implements Scheduler {\n  /**\n   * @since 2.0.0\n   */\n  tasks = new PriorityBuckets()\n\n  /**\n   * @since 2.0.0\n   */\n  deferred = false\n\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: Task, priority: number) {\n    if (this.deferred) {\n      defaultScheduler.scheduleTask(task, priority)\n    } else {\n      this.tasks.scheduleTask(task, priority)\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false {\n    return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n      ? fiber.getFiberRef(core.currentSchedulingPriority)\n      : false\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  flush() {\n    while (this.tasks.buckets.length > 0) {\n      const tasks = this.tasks.buckets\n      this.tasks.buckets = []\n      for (const [_, toRun] of tasks) {\n        for (let i = 0; i < toRun.length; i++) {\n          toRun[i]()\n        }\n      }\n    }\n    this.deferred = true\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport class ControlledScheduler implements Scheduler {\n  /**\n   * @since 2.0.0\n   */\n  tasks = new PriorityBuckets()\n\n  /**\n   * @since 2.0.0\n   */\n  deferred = false\n\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: Task, priority: number) {\n    if (this.deferred) {\n      defaultScheduler.scheduleTask(task, priority)\n    } else {\n      this.tasks.scheduleTask(task, priority)\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false {\n    return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n      ? fiber.getFiberRef(core.currentSchedulingPriority)\n      : false\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  step() {\n    const tasks = this.tasks.buckets\n    this.tasks.buckets = []\n    for (const [_, toRun] of tasks) {\n      for (let i = 0; i < toRun.length; i++) {\n        toRun[i]()\n      }\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const makeMatrix = (...record: Array<[number, Scheduler]>): Scheduler => {\n  const index = record.sort(([p0], [p1]) => p0 < p1 ? -1 : p0 > p1 ? 1 : 0)\n  return {\n    shouldYield(fiber) {\n      for (const scheduler of record) {\n        const priority = scheduler[1].shouldYield(fiber)\n        if (priority !== false) {\n          return priority\n        }\n      }\n      return false\n    },\n    scheduleTask(task, priority) {\n      let scheduler: Scheduler | undefined = undefined\n      for (const i of index) {\n        if (priority >= i[0]) {\n          scheduler = i[1]\n        } else {\n          return (scheduler ?? defaultScheduler).scheduleTask(task, priority)\n        }\n      }\n      return (scheduler ?? defaultScheduler).scheduleTask(task, priority)\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category utilities\n */\nexport const defaultShouldYield: Scheduler[\"shouldYield\"] = (fiber) => {\n  return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n    ? fiber.getFiberRef(core.currentSchedulingPriority)\n    : false\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make = (\n  scheduleTask: Scheduler[\"scheduleTask\"],\n  shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield\n): Scheduler => ({\n  scheduleTask,\n  shouldYield\n})\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const makeBatched = (\n  callback: (runBatch: () => void) => void,\n  shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield\n) => {\n  let running = false\n  const tasks = new PriorityBuckets()\n  const starveInternal = () => {\n    const tasksToRun = tasks.buckets\n    tasks.buckets = []\n    for (const [_, toRun] of tasksToRun) {\n      for (let i = 0; i < toRun.length; i++) {\n        toRun[i]()\n      }\n    }\n    if (tasks.buckets.length === 0) {\n      running = false\n    } else {\n      starve()\n    }\n  }\n\n  const starve = () => callback(starveInternal)\n\n  return make((task, priority) => {\n    tasks.scheduleTask(task, priority)\n    if (!running) {\n      running = true\n      starve()\n    }\n  }, shouldYield)\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const timer = (ms: number, shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield) =>\n  make((task) => setTimeout(task, ms), shouldYield)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const timerBatched = (ms: number, shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield) =>\n  makeBatched((task) => setTimeout(task, ms), shouldYield)\n\n/** @internal */\nexport const currentScheduler: FiberRef<Scheduler> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentScheduler\"),\n  () => core.fiberRefUnsafeMake(defaultScheduler)\n)\n\n/** @internal */\nexport const withScheduler = dual<\n  /** @internal */\n  (scheduler: Scheduler) => <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>,\n  /** @internal */\n  <A, E, R>(self: Effect<A, E, R>, scheduler: Scheduler) => Effect<A, E, R>\n>(2, (self, scheduler) => core.fiberRefLocally(self, currentScheduler, scheduler))\n", "import { globalValue } from \"../GlobalValue.js\"\nimport type * as Request from \"../Request.js\"\nimport { fiberRefUnsafeMake } from \"./core.js\"\n\n/** @internal */\nexport const currentRequestMap = globalValue(\n  Symbol.for(\"effect/FiberRef/currentRequestMap\"),\n  () => fiberRefUnsafeMake(new Map<any, Request.Entry<any>>())\n)\n", "import type { Effect } from \"../Effect.js\"\nimport type { Concurrency } from \"../Types.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nexport const match = <A, E, R>(\n  concurrency: Concurrency | undefined,\n  sequential: () => Effect<A, E, R>,\n  unbounded: () => Effect<A, E, R>,\n  bounded: (limit: number) => Effect<A, E, R>\n): Effect<A, E, R> => {\n  switch (concurrency) {\n    case undefined:\n      return sequential()\n    case \"unbounded\":\n      return unbounded()\n    case \"inherit\":\n      return core.fiberRefGetWith(\n        core.currentConcurrency,\n        (concurrency) =>\n          concurrency === \"unbounded\" ?\n            unbounded() :\n            concurrency > 1 ?\n            bounded(concurrency) :\n            sequential()\n      )\n    default:\n      return concurrency > 1 ? bounded(concurrency) : sequential()\n  }\n}\n\n/** @internal */\nexport const matchSimple = <A, E, R>(\n  concurrency: Concurrency | undefined,\n  sequential: () => Effect<A, E, R>,\n  concurrent: () => Effect<A, E, R>\n): Effect<A, E, R> => {\n  switch (concurrency) {\n    case undefined:\n      return sequential()\n    case \"unbounded\":\n      return concurrent()\n    case \"inherit\":\n      return core.fiberRefGetWith(\n        core.currentConcurrency,\n        (concurrency) =>\n          concurrency === \"unbounded\" || concurrency > 1 ?\n            concurrent() :\n            sequential()\n      )\n    default:\n      return concurrency > 1 ? concurrent() : sequential()\n  }\n}\n", "import type * as Cause from \"../Cause.js\"\nimport * as Clock from \"../Clock.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport * as Exit from \"../Exit.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport * as FiberId from \"../FiberId.js\"\nimport * as FiberStatus from \"../FiberStatus.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as number from \"../Number.js\"\nimport * as Option from \"../Option.js\"\nimport * as order from \"../Order.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport * as core from \"./core.js\"\nimport * as effectable from \"./effectable.js\"\nimport * as fiberScope from \"./fiberScope.js\"\nimport * as runtimeFlags from \"./runtimeFlags.js\"\n\n/** @internal */\nconst FiberSymbolKey = \"effect/Fiber\"\n\n/** @internal */\nexport const FiberTypeId: Fiber.FiberTypeId = Symbol.for(\n  FiberSymbolKey\n) as Fiber.FiberTypeId\n\n/** @internal */\nexport const fiberVariance = {\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _\n}\n\n/** @internal */\nconst fiberProto = {\n  [FiberTypeId]: fiberVariance,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nconst RuntimeFiberSymbolKey = \"effect/Fiber\"\n\n/** @internal */\nexport const RuntimeFiberTypeId: Fiber.RuntimeFiberTypeId = Symbol.for(\n  RuntimeFiberSymbolKey\n) as Fiber.RuntimeFiberTypeId\n\n/** @internal */\nexport const Order: order.Order<Fiber.RuntimeFiber<unknown, unknown>> = pipe(\n  order.tuple(number.Order, number.Order),\n  order.mapInput((fiber: Fiber.RuntimeFiber<unknown, unknown>) =>\n    [\n      (fiber.id() as FiberId.Runtime).startTimeMillis,\n      (fiber.id() as FiberId.Runtime).id\n    ] as const\n  )\n)\n\n/** @internal */\nexport const isFiber = (u: unknown): u is Fiber.Fiber<unknown, unknown> => hasProperty(u, FiberTypeId)\n\n/** @internal */\nexport const isRuntimeFiber = <A, E>(self: Fiber.Fiber<A, E>): self is Fiber.RuntimeFiber<A, E> =>\n  RuntimeFiberTypeId in self\n\n/** @internal */\nexport const _await = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<Exit.Exit<A, E>> => self.await\n\n/** @internal */\nexport const children = <A, E>(\n  self: Fiber.Fiber<A, E>\n): Effect.Effect<Array<Fiber.RuntimeFiber<any, any>>> => self.children\n\n/** @internal */\nexport const done = <A, E>(exit: Exit.Exit<A, E>): Fiber.Fiber<A, E> => {\n  const _fiber = {\n    ...effectable.CommitPrototype,\n    commit() {\n      return join(this)\n    },\n    ...fiberProto,\n    id: () => FiberId.none,\n    await: core.succeed(exit),\n    children: core.succeed([]),\n    inheritAll: core.void,\n    poll: core.succeed(Option.some(exit)),\n    interruptAsFork: () => core.void\n  }\n\n  return _fiber\n}\n\n/** @internal */\nexport const dump = <A, E>(self: Fiber.RuntimeFiber<A, E>): Effect.Effect<Fiber.Fiber.Dump> =>\n  core.map(self.status, (status) => ({ id: self.id(), status }))\n\n/** @internal */\nexport const dumpAll = (\n  fibers: Iterable<Fiber.RuntimeFiber<unknown, unknown>>\n): Effect.Effect<Array<Fiber.Fiber.Dump>> => core.forEachSequential(fibers, dump)\n\n/** @internal */\nexport const fail = <E>(error: E): Fiber.Fiber<never, E> => done(Exit.fail(error))\n\n/** @internal */\nexport const failCause = <E>(cause: Cause.Cause<E>): Fiber.Fiber<never, E> => done(Exit.failCause(cause))\n\n/** @internal */\nexport const fromEffect = <A, E>(effect: Effect.Effect<A, E>): Effect.Effect<Fiber.Fiber<A, E>> =>\n  core.map(core.exit(effect), done)\n\n/** @internal */\nexport const id = <A, E>(self: Fiber.Fiber<A, E>): FiberId.FiberId => self.id()\n\n/** @internal */\nexport const inheritAll = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<void> => self.inheritAll\n\n/** @internal */\nexport const interrupted = (fiberId: FiberId.FiberId): Fiber.Fiber<never> => done(Exit.interrupt(fiberId))\n\n/** @internal */\nexport const interruptAll = (fibers: Iterable<Fiber.Fiber<any, any>>): Effect.Effect<void> =>\n  core.flatMap(core.fiberId, (fiberId) => pipe(fibers, interruptAllAs(fiberId)))\n\n/** @internal */\nexport const interruptAllAs = dual<\n  (fiberId: FiberId.FiberId) => (fibers: Iterable<Fiber.Fiber<any, any>>) => Effect.Effect<void>,\n  (fibers: Iterable<Fiber.Fiber<any, any>>, fiberId: FiberId.FiberId) => Effect.Effect<void>\n>(\n  2,\n  core.fnUntraced(function*(fibers, fiberId) {\n    for (const fiber of fibers) {\n      if (isRuntimeFiber(fiber)) {\n        fiber.unsafeInterruptAsFork(fiberId)\n        continue\n      }\n      yield* fiber.interruptAsFork(fiberId)\n    }\n    for (const fiber of fibers) {\n      if (isRuntimeFiber(fiber) && fiber.unsafePoll()) {\n        continue\n      }\n      yield* fiber.await\n    }\n  })\n)\n\n/** @internal */\nexport const interruptAsFork = dual<\n  (fiberId: FiberId.FiberId) => <A, E>(self: Fiber.Fiber<A, E>) => Effect.Effect<void>,\n  <A, E>(self: Fiber.Fiber<A, E>, fiberId: FiberId.FiberId) => Effect.Effect<void>\n>(2, (self, fiberId) => self.interruptAsFork(fiberId))\n\n/** @internal */\nexport const join = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<A, E> =>\n  core.zipLeft(core.flatten(self.await), self.inheritAll)\n\n/** @internal */\nexport const map = dual<\n  <A, B>(f: (a: A) => B) => <E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<B, E>,\n  <A, E, B>(self: Fiber.Fiber<A, E>, f: (a: A) => B) => Fiber.Fiber<B, E>\n>(2, (self, f) => mapEffect(self, (a) => core.sync(() => f(a))))\n\n/** @internal */\nexport const mapEffect = dual<\n  <A, A2, E2>(f: (a: A) => Effect.Effect<A2, E2>) => <E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<A2, E | E2>,\n  <A, E, A2, E2>(self: Fiber.Fiber<A, E>, f: (a: A) => Effect.Effect<A2, E2>) => Fiber.Fiber<A2, E | E2>\n>(2, (self, f) => {\n  const _fiber = {\n    ...effectable.CommitPrototype,\n    commit() {\n      return join(this)\n    },\n    ...fiberProto,\n    id: () => self.id(),\n    await: core.flatMap(self.await, Exit.forEachEffect(f)),\n    children: self.children,\n    inheritAll: self.inheritAll,\n    poll: core.flatMap(self.poll, (result) => {\n      switch (result._tag) {\n        case \"None\":\n          return core.succeed(Option.none())\n        case \"Some\":\n          return pipe(\n            Exit.forEachEffect(result.value, f),\n            core.map(Option.some)\n          )\n      }\n    }),\n    interruptAsFork: (id: FiberId.FiberId) => self.interruptAsFork(id)\n  }\n  return _fiber\n})\n\n/** @internal */\nexport const mapFiber = dual<\n  <E, E2, A, B>(\n    f: (a: A) => Fiber.Fiber<B, E2>\n  ) => (self: Fiber.Fiber<A, E>) => Effect.Effect<Fiber.Fiber<B, E | E2>>,\n  <A, E, E2, B>(\n    self: Fiber.Fiber<A, E>,\n    f: (a: A) => Fiber.Fiber<B, E2>\n  ) => Effect.Effect<Fiber.Fiber<B, E | E2>>\n>(2, <A, E, E2, B>(\n  self: Fiber.Fiber<A, E>,\n  f: (a: A) => Fiber.Fiber<B, E2>\n) =>\n  core.map(\n    self.await,\n    Exit.match({\n      onFailure: (cause): Fiber.Fiber<B, E | E2> => failCause(cause),\n      onSuccess: (a) => f(a)\n    })\n  ))\n\n/** @internal */\nexport const match = dual<\n  <A, E, Z>(\n    options: {\n      readonly onFiber: (fiber: Fiber.Fiber<A, E>) => Z\n      readonly onRuntimeFiber: (fiber: Fiber.RuntimeFiber<A, E>) => Z\n    }\n  ) => (self: Fiber.Fiber<A, E>) => Z,\n  <A, E, Z>(\n    self: Fiber.Fiber<A, E>,\n    options: {\n      readonly onFiber: (fiber: Fiber.Fiber<A, E>) => Z\n      readonly onRuntimeFiber: (fiber: Fiber.RuntimeFiber<A, E>) => Z\n    }\n  ) => Z\n>(2, (self, { onFiber, onRuntimeFiber }) => {\n  if (isRuntimeFiber(self)) {\n    return onRuntimeFiber(self)\n  }\n  return onFiber(self)\n})\n\n/** @internal */\nconst _never = {\n  ...effectable.CommitPrototype,\n  commit() {\n    return join(this)\n  },\n  ...fiberProto,\n  id: () => FiberId.none,\n  await: core.never,\n  children: core.succeed([]),\n  inheritAll: core.never,\n  poll: core.succeed(Option.none()),\n  interruptAsFork: () => core.never\n}\n\n/** @internal */\nexport const never: Fiber.Fiber<never> = _never\n\n/** @internal */\nexport const orElse = dual<\n  <A2, E2>(that: Fiber.Fiber<A2, E2>) => <A, E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<A | A2, E | E2>,\n  <A, E, A2, E2>(self: Fiber.Fiber<A, E>, that: Fiber.Fiber<A2, E2>) => Fiber.Fiber<A | A2, E | E2>\n>(2, (self, that) => ({\n  ...effectable.CommitPrototype,\n  commit() {\n    return join(this)\n  },\n  ...fiberProto,\n  id: () => FiberId.getOrElse(self.id(), that.id()),\n  await: core.zipWith(\n    self.await,\n    that.await,\n    (exit1, exit2) => (Exit.isSuccess(exit1) ? exit1 : exit2)\n  ),\n  children: self.children,\n  inheritAll: core.zipRight(that.inheritAll, self.inheritAll),\n  poll: core.zipWith(\n    self.poll,\n    that.poll,\n    (option1, option2) => {\n      switch (option1._tag) {\n        case \"None\": {\n          return Option.none()\n        }\n        case \"Some\": {\n          return Exit.isSuccess(option1.value) ? option1 : option2\n        }\n      }\n    }\n  ),\n  interruptAsFork: (id) =>\n    pipe(\n      core.interruptAsFiber(self, id),\n      core.zipRight(pipe(that, core.interruptAsFiber(id))),\n      core.asVoid\n    )\n}))\n\n/** @internal */\nexport const orElseEither = dual<\n  <A2, E2>(that: Fiber.Fiber<A2, E2>) => <A, E>(self: Fiber.Fiber<A, E>) => Fiber.Fiber<Either.Either<A2, A>, E | E2>,\n  <A, E, A2, E2>(self: Fiber.Fiber<A, E>, that: Fiber.Fiber<A2, E2>) => Fiber.Fiber<Either.Either<A2, A>, E | E2>\n>(2, (self, that) => orElse(map(self, Either.left), map(that, Either.right)))\n\n/** @internal */\nexport const poll = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<Option.Option<Exit.Exit<A, E>>> => self.poll\n\n// forked from https://github.com/sindresorhus/parse-ms/blob/4da2ffbdba02c6e288c08236695bdece0adca173/index.js\n// MIT License\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n/** @internal */\nconst parseMs = (milliseconds: number) => {\n  const roundTowardsZero = milliseconds > 0 ? Math.floor : Math.ceil\n  return {\n    days: roundTowardsZero(milliseconds / 86400000),\n    hours: roundTowardsZero(milliseconds / 3600000) % 24,\n    minutes: roundTowardsZero(milliseconds / 60000) % 60,\n    seconds: roundTowardsZero(milliseconds / 1000) % 60,\n    milliseconds: roundTowardsZero(milliseconds) % 1000,\n    microseconds: roundTowardsZero(milliseconds * 1000) % 1000,\n    nanoseconds: roundTowardsZero(milliseconds * 1e6) % 1000\n  }\n}\n\n/** @internal */\nconst renderStatus = (status: FiberStatus.FiberStatus): string => {\n  if (FiberStatus.isDone(status)) {\n    return \"Done\"\n  }\n  if (FiberStatus.isRunning(status)) {\n    return \"Running\"\n  }\n\n  const isInterruptible = runtimeFlags.interruptible(status.runtimeFlags) ?\n    \"interruptible\" :\n    \"uninterruptible\"\n  return `Suspended(${isInterruptible})`\n}\n\n/** @internal */\nexport const pretty = <A, E>(self: Fiber.RuntimeFiber<A, E>): Effect.Effect<string> =>\n  core.flatMap(Clock.currentTimeMillis, (now) =>\n    core.map(dump(self), (dump) => {\n      const time = now - dump.id.startTimeMillis\n      const { days, hours, milliseconds, minutes, seconds } = parseMs(time)\n      const lifeMsg = (days === 0 ? \"\" : `${days}d`) +\n        (days === 0 && hours === 0 ? \"\" : `${hours}h`) +\n        (days === 0 && hours === 0 && minutes === 0 ? \"\" : `${minutes}m`) +\n        (days === 0 && hours === 0 && minutes === 0 && seconds === 0 ? \"\" : `${seconds}s`) +\n        `${milliseconds}ms`\n      const waitMsg = FiberStatus.isSuspended(dump.status) ?\n        (() => {\n          const ids = FiberId.ids(dump.status.blockingOn)\n          return HashSet.size(ids) > 0\n            ? `waiting on ` + Array.from(ids).map((id) => `${id}`).join(\", \")\n            : \"\"\n        })() :\n        \"\"\n      const statusMsg = renderStatus(dump.status)\n      return `[Fiber](#${dump.id.id}) (${lifeMsg}) ${waitMsg}\\n   Status: ${statusMsg}`\n    }))\n\n/** @internal */\nexport const unsafeRoots = (): Array<Fiber.RuntimeFiber<any, any>> => Array.from(fiberScope.globalScope.roots)\n\n/** @internal */\nexport const roots: Effect.Effect<Array<Fiber.RuntimeFiber<any, any>>> = core.sync(unsafeRoots)\n\n/** @internal */\nexport const status = <A, E>(self: Fiber.RuntimeFiber<A, E>): Effect.Effect<FiberStatus.FiberStatus> => self.status\n\n/** @internal */\nexport const succeed = <A>(value: A): Fiber.Fiber<A> => done(Exit.succeed(value))\n\nconst void_: Fiber.Fiber<void> = succeed(void 0)\nexport {\n  /** @internal */\n  void_ as void\n}\n\n/** @internal */\nexport const currentFiberURI = \"effect/FiberCurrent\"\n\n/** @internal */\nexport const getCurrentFiber = (): Option.Option<Fiber.RuntimeFiber<any, any>> =>\n  Option.fromNullable((globalThis as any)[currentFiberURI])\n", "import * as FiberId from \"../FiberId.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport * as FiberMessage from \"./fiberMessage.js\"\nimport type * as FiberRuntime from \"./fiberRuntime.js\"\n\n/** @internal */\nconst FiberScopeSymbolKey = \"effect/FiberScope\"\n\n/** @internal */\nexport const FiberScopeTypeId = Symbol.for(FiberScopeSymbolKey)\n\nexport type FiberScopeTypeId = typeof FiberScopeTypeId\n\n/**\n * A `FiberScope` represents the scope of a fiber lifetime. The scope of a\n * fiber can be retrieved using `Effect.descriptor`, and when forking fibers,\n * you can specify a custom scope to fork them on by using the `forkIn`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface FiberScope {\n  readonly [FiberScopeTypeId]: FiberScopeTypeId\n  get fiberId(): FiberId.FiberId\n  add(runtimeFlags: RuntimeFlags.RuntimeFlags, child: FiberRuntime.FiberRuntime<any, any>): void\n}\n\n/** @internal */\nclass Global implements FiberScope {\n  readonly [FiberScopeTypeId]: FiberScopeTypeId = FiberScopeTypeId\n  readonly fiberId = FiberId.none\n  readonly roots = new Set<FiberRuntime.FiberRuntime<any, any>>()\n  add(_runtimeFlags: RuntimeFlags.RuntimeFlags, child: FiberRuntime.FiberRuntime<any, any>): void {\n    this.roots.add(child)\n    child.addObserver(() => {\n      this.roots.delete(child)\n    })\n  }\n}\n\n/** @internal */\nclass Local implements FiberScope {\n  readonly [FiberScopeTypeId]: FiberScopeTypeId = FiberScopeTypeId\n  constructor(\n    readonly fiberId: FiberId.FiberId,\n    readonly parent: FiberRuntime.FiberRuntime<any, any>\n  ) {\n  }\n  add(_runtimeFlags: RuntimeFlags.RuntimeFlags, child: FiberRuntime.FiberRuntime<any, any>): void {\n    this.parent.tell(\n      FiberMessage.stateful((parentFiber) => {\n        parentFiber.addChild(child)\n        child.addObserver(() => {\n          parentFiber.removeChild(child)\n        })\n      })\n    )\n  }\n}\n\n/** @internal */\nexport const unsafeMake = (fiber: FiberRuntime.FiberRuntime<any, any>): FiberScope => {\n  return new Local(fiber.id(), fiber)\n}\n\n/** @internal */\nexport const globalScope = globalValue(\n  Symbol.for(\"effect/FiberScope/Global\"),\n  () => new Global()\n)\n", "import type * as Cause from \"../Cause.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type * as FiberStatus from \"../FiberStatus.js\"\nimport type * as FiberRuntime from \"./fiberRuntime.js\"\n\n/** @internal */\nexport type FiberMessage = InterruptSignal | Stateful | Resume | YieldNow\n\n/** @internal */\nexport const OP_INTERRUPT_SIGNAL = \"InterruptSignal\" as const\n\n/** @internal */\nexport type OP_INTERRUPT_SIGNAL = typeof OP_INTERRUPT_SIGNAL\n\n/** @internal */\nexport const OP_STATEFUL = \"Stateful\" as const\n\n/** @internal */\nexport type OP_STATEFUL = typeof OP_STATEFUL\n\n/** @internal */\nexport const OP_RESUME = \"Resume\" as const\n\n/** @internal */\nexport type OP_RESUME = typeof OP_RESUME\n\n/** @internal */\nexport const OP_YIELD_NOW = \"YieldNow\" as const\n\n/** @internal */\nexport type OP_YIELD_NOW = typeof OP_YIELD_NOW\n\n/** @internal */\nexport interface InterruptSignal {\n  readonly _tag: OP_INTERRUPT_SIGNAL\n  readonly cause: Cause.Cause<never>\n}\n\n/** @internal */\nexport interface Stateful {\n  readonly _tag: OP_STATEFUL\n  onFiber(fiber: FiberRuntime.FiberRuntime<any, any>, status: FiberStatus.FiberStatus): void\n}\n\n/** @internal */\nexport interface Resume {\n  readonly _tag: OP_RESUME\n  readonly effect: Effect.Effect<any, any, any>\n}\n\n/** @internal */\nexport interface YieldNow {\n  readonly _tag: OP_YIELD_NOW\n}\n\n/** @internal */\nexport const interruptSignal = (cause: Cause.Cause<never>): FiberMessage => ({\n  _tag: OP_INTERRUPT_SIGNAL,\n  cause\n})\n\n/** @internal */\nexport const stateful = (\n  onFiber: (\n    fiber: FiberRuntime.FiberRuntime<any, any>,\n    status: FiberStatus.FiberStatus\n  ) => void\n): FiberMessage => ({\n  _tag: OP_STATEFUL,\n  onFiber\n})\n\n/** @internal */\nexport const resume = (effect: Effect.Effect<any, any, any>): FiberMessage => ({\n  _tag: OP_RESUME,\n  effect\n})\n\n/** @internal */\nexport const yieldNow = (): FiberMessage => ({\n  _tag: OP_YIELD_NOW\n})\n", "import * as Arr from \"../Array.js\"\nimport * as Context from \"../Context.js\"\nimport * as FiberRefs from \"../FiberRefs.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { constVoid, dual } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as Inspectable from \"../Inspectable.js\"\nimport * as List from \"../List.js\"\nimport type * as Logger from \"../Logger.js\"\nimport type * as LogLevel from \"../LogLevel.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Cause from \"./cause.js\"\nimport * as defaultServices from \"./defaultServices.js\"\nimport { consoleTag } from \"./defaultServices/console.js\"\nimport * as fiberId_ from \"./fiberId.js\"\nimport * as logSpan_ from \"./logSpan.js\"\n\n/** @internal */\nconst LoggerSymbolKey = \"effect/Logger\"\n\n/** @internal */\nexport const LoggerTypeId: Logger.LoggerTypeId = Symbol.for(\n  LoggerSymbolKey\n) as Logger.LoggerTypeId\n\nconst loggerVariance = {\n  /* c8 ignore next */\n  _Message: (_: unknown) => _,\n  /* c8 ignore next */\n  _Output: (_: never) => _\n}\n\n/** @internal */\nexport const makeLogger = <Message, Output>(\n  log: (options: Logger.Logger.Options<Message>) => Output\n): Logger.Logger<Message, Output> => ({\n  [LoggerTypeId]: loggerVariance,\n  log,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n})\n\n/** @internal */\nexport const mapInput = dual<\n  <Message, Message2>(\n    f: (message: Message2) => Message\n  ) => <Output>(self: Logger.Logger<Message, Output>) => Logger.Logger<Message2, Output>,\n  <Output, Message, Message2>(\n    self: Logger.Logger<Message, Output>,\n    f: (message: Message2) => Message\n  ) => Logger.Logger<Message2, Output>\n>(2, (self, f) =>\n  makeLogger(\n    (options) => self.log({ ...options, message: f(options.message) })\n  ))\n\n/** @internal */\nexport const mapInputOptions = dual<\n  <Message, Message2>(\n    f: (options: Logger.Logger.Options<Message2>) => Logger.Logger.Options<Message>\n  ) => <Output>(self: Logger.Logger<Message, Output>) => Logger.Logger<Message2, Output>,\n  <Output, Message, Message2>(\n    self: Logger.Logger<Message, Output>,\n    f: (options: Logger.Logger.Options<Message2>) => Logger.Logger.Options<Message>\n  ) => Logger.Logger<Message2, Output>\n>(2, (self, f) => makeLogger((options) => self.log(f(options))))\n\n/** @internal */\nexport const filterLogLevel = dual<\n  (\n    f: (logLevel: LogLevel.LogLevel) => boolean\n  ) => <Message, Output>(self: Logger.Logger<Message, Output>) => Logger.Logger<Message, Option.Option<Output>>,\n  <Message, Output>(\n    self: Logger.Logger<Message, Output>,\n    f: (logLevel: LogLevel.LogLevel) => boolean\n  ) => Logger.Logger<Message, Option.Option<Output>>\n>(2, (self, f) =>\n  makeLogger((options) =>\n    f(options.logLevel)\n      ? Option.some(self.log(options))\n      : Option.none()\n  ))\n\n/** @internal */\nexport const map = dual<\n  <Output, Output2>(\n    f: (output: Output) => Output2\n  ) => <Message>(self: Logger.Logger<Message, Output>) => Logger.Logger<Message, Output2>,\n  <Message, Output, Output2>(\n    self: Logger.Logger<Message, Output>,\n    f: (output: Output) => Output2\n  ) => Logger.Logger<Message, Output2>\n>(2, (self, f) => makeLogger((options) => f(self.log(options))))\n\n/** @internal */\nexport const none: Logger.Logger<unknown, void> = {\n  [LoggerTypeId]: loggerVariance,\n  log: constVoid,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n} as Logger.Logger<unknown, void>\n\n/** @internal */\nexport const simple = <A, B>(log: (a: A) => B): Logger.Logger<A, B> => ({\n  [LoggerTypeId]: loggerVariance,\n  log: ({ message }) => log(message),\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n})\n\n/** @internal */\nexport const succeed = <A>(value: A): Logger.Logger<unknown, A> => {\n  return simple(() => value)\n}\n\n/** @internal */\nexport const sync = <A>(evaluate: LazyArg<A>): Logger.Logger<unknown, A> => {\n  return simple(evaluate)\n}\n\n/** @internal */\nexport const zip = dual<\n  <Message2, Output2>(\n    that: Logger.Logger<Message2, Output2>\n  ) => <Message, Output>(\n    self: Logger.Logger<Message, Output>\n  ) => Logger.Logger<Message & Message2, [Output, Output2]>,\n  <Message, Output, Message2, Output2>(\n    self: Logger.Logger<Message, Output>,\n    that: Logger.Logger<Message2, Output2>\n  ) => Logger.Logger<Message & Message2, [Output, Output2]>\n>(2, (self, that) => makeLogger((options) => [self.log(options), that.log(options)]))\n\n/** @internal */\nexport const zipLeft = dual<\n  <Message2, Output2>(\n    that: Logger.Logger<Message2, Output2>\n  ) => <Message, Output>(\n    self: Logger.Logger<Message, Output>\n  ) => Logger.Logger<Message & Message2, Output>,\n  <Message, Output, Message2, Output2>(\n    self: Logger.Logger<Message, Output>,\n    that: Logger.Logger<Message2, Output2>\n  ) => Logger.Logger<Message & Message2, Output>\n>(2, (self, that) => map(zip(self, that), (tuple) => tuple[0]))\n\n/** @internal */\nexport const zipRight = dual<\n  <Message2, Output2>(\n    that: Logger.Logger<Message2, Output2>\n  ) => <Message, Output>(\n    self: Logger.Logger<Message, Output>\n  ) => Logger.Logger<Message & Message2, Output2>,\n  <Message, Output, Message2, Output2>(\n    self: Logger.Logger<Message, Output>,\n    that: Logger.Logger<Message2, Output2>\n  ) => Logger.Logger<Message & Message2, Output2>\n>(2, (self, that) => map(zip(self, that), (tuple) => tuple[1]))\n\n/**\n * Match strings that do not contain any whitespace characters, double quotes,\n * or equal signs.\n *\n * @internal\n */\nconst textOnly = /^[^\\s\"=]*$/\n\n/**\n * Used by both {@link stringLogger} and {@link logfmtLogger} to render a log\n * message.\n *\n * @internal\n */\nconst format = (quoteValue: (s: string) => string, whitespace?: number | string | undefined) =>\n(\n  { annotations, cause, date, fiberId, logLevel, message, spans }: Logger.Logger.Options<unknown>\n): string => {\n  const formatValue = (value: string): string => value.match(textOnly) ? value : quoteValue(value)\n  const format = (label: string, value: string): string => `${logSpan_.formatLabel(label)}=${formatValue(value)}`\n  const append = (label: string, value: string): string => \" \" + format(label, value)\n\n  let out = format(\"timestamp\", date.toISOString())\n  out += append(\"level\", logLevel.label)\n  out += append(\"fiber\", fiberId_.threadName(fiberId))\n\n  const messages = Arr.ensure(message)\n  for (let i = 0; i < messages.length; i++) {\n    out += append(\"message\", Inspectable.toStringUnknown(messages[i], whitespace))\n  }\n\n  if (!Cause.isEmptyType(cause)) {\n    out += append(\"cause\", Cause.pretty(cause, { renderErrorCause: true }))\n  }\n\n  for (const span of spans) {\n    out += \" \" + logSpan_.render(date.getTime())(span)\n  }\n\n  for (const [label, value] of annotations) {\n    out += append(label, Inspectable.toStringUnknown(value, whitespace))\n  }\n\n  return out\n}\n\n/** @internal */\nconst escapeDoubleQuotes = (s: string) => `\"${s.replace(/\\\\([\\s\\S])|(\")/g, \"\\\\$1$2\")}\"`\n\n/** @internal */\nexport const stringLogger: Logger.Logger<unknown, string> = makeLogger(format(escapeDoubleQuotes))\n\n/** @internal */\nexport const logfmtLogger: Logger.Logger<unknown, string> = makeLogger(format(JSON.stringify, 0))\n\n/** @internal */\nexport const structuredLogger = makeLogger<unknown, {\n  readonly logLevel: string\n  readonly fiberId: string\n  readonly timestamp: string\n  readonly message: unknown\n  readonly cause: string | undefined\n  readonly annotations: Record<string, unknown>\n  readonly spans: Record<string, number>\n}>(\n  ({ annotations, cause, date, fiberId, logLevel, message, spans }) => {\n    const now = date.getTime()\n    const annotationsObj: Record<string, unknown> = {}\n    const spansObj: Record<string, number> = {}\n\n    if (HashMap.size(annotations) > 0) {\n      for (const [k, v] of annotations) {\n        annotationsObj[k] = structuredMessage(v)\n      }\n    }\n\n    if (List.isCons(spans)) {\n      for (const span of spans) {\n        spansObj[span.label] = now - span.startTime\n      }\n    }\n\n    const messageArr = Arr.ensure(message)\n    return {\n      message: messageArr.length === 1 ? structuredMessage(messageArr[0]) : messageArr.map(structuredMessage),\n      logLevel: logLevel.label,\n      timestamp: date.toISOString(),\n      cause: Cause.isEmpty(cause) ? undefined : Cause.pretty(cause, { renderErrorCause: true }),\n      annotations: annotationsObj,\n      spans: spansObj,\n      fiberId: fiberId_.threadName(fiberId)\n    }\n  }\n)\n\n/** @internal */\nexport const structuredMessage = (u: unknown): unknown => {\n  switch (typeof u) {\n    case \"bigint\":\n    case \"function\":\n    case \"symbol\": {\n      return String(u)\n    }\n    default: {\n      return Inspectable.toJSON(u)\n    }\n  }\n}\n\n/** @internal */\nexport const jsonLogger = map(structuredLogger, Inspectable.stringifyCircular)\n\n/** @internal */\nexport const isLogger = (u: unknown): u is Logger.Logger<unknown, unknown> => {\n  return typeof u === \"object\" && u != null && LoggerTypeId in u\n}\n\nconst withColor = (text: string, ...colors: ReadonlyArray<string>) => {\n  let out = \"\"\n  for (let i = 0; i < colors.length; i++) {\n    out += `\\x1b[${colors[i]}m`\n  }\n  return out + text + \"\\x1b[0m\"\n}\nconst withColorNoop = (text: string, ..._colors: ReadonlyArray<string>) => text\nconst colors = {\n  bold: \"1\",\n  red: \"31\",\n  green: \"32\",\n  yellow: \"33\",\n  blue: \"34\",\n  cyan: \"36\",\n  white: \"37\",\n  gray: \"90\",\n  black: \"30\",\n  bgBrightRed: \"101\"\n} as const\n\nconst logLevelColors: Record<LogLevel.LogLevel[\"_tag\"], ReadonlyArray<string>> = {\n  None: [],\n  All: [],\n  Trace: [colors.gray],\n  Debug: [colors.blue],\n  Info: [colors.green],\n  Warning: [colors.yellow],\n  Error: [colors.red],\n  Fatal: [colors.bgBrightRed, colors.black]\n}\nconst logLevelStyle: Record<LogLevel.LogLevel[\"_tag\"], string> = {\n  None: \"\",\n  All: \"\",\n  Trace: \"color:gray\",\n  Debug: \"color:blue\",\n  Info: \"color:green\",\n  Warning: \"color:orange\",\n  Error: \"color:red\",\n  Fatal: \"background-color:red;color:white\"\n}\n\nconst defaultDateFormat = (date: Date): string =>\n  `${date.getHours().toString().padStart(2, \"0\")}:${date.getMinutes().toString().padStart(2, \"0\")}:${\n    date.getSeconds().toString().padStart(2, \"0\")\n  }.${date.getMilliseconds().toString().padStart(3, \"0\")}`\n\nconst hasProcessStdout = typeof process === \"object\" &&\n  process !== null &&\n  typeof process.stdout === \"object\" &&\n  process.stdout !== null\nconst processStdoutIsTTY = hasProcessStdout &&\n  process.stdout.isTTY === true\nconst hasProcessStdoutOrDeno = hasProcessStdout || \"Deno\" in globalThis\n\n/** @internal */\nexport const prettyLogger = (options?: {\n  readonly colors?: \"auto\" | boolean | undefined\n  readonly stderr?: boolean | undefined\n  readonly formatDate?: ((date: Date) => string) | undefined\n  readonly mode?: \"browser\" | \"tty\" | \"auto\" | undefined\n}) => {\n  const mode_ = options?.mode ?? \"auto\"\n  const mode = mode_ === \"auto\" ? (hasProcessStdoutOrDeno ? \"tty\" : \"browser\") : mode_\n  const isBrowser = mode === \"browser\"\n  const showColors = typeof options?.colors === \"boolean\" ? options.colors : processStdoutIsTTY || isBrowser\n  const formatDate = options?.formatDate ?? defaultDateFormat\n  return isBrowser\n    ? prettyLoggerBrowser({ colors: showColors, formatDate })\n    : prettyLoggerTty({ colors: showColors, formatDate, stderr: options?.stderr === true })\n}\n\nconst prettyLoggerTty = (options: {\n  readonly colors: boolean\n  readonly stderr: boolean\n  readonly formatDate: (date: Date) => string\n}) => {\n  const color = options.colors ? withColor : withColorNoop\n  return makeLogger<unknown, void>(\n    ({ annotations, cause, context, date, fiberId, logLevel, message: message_, spans }) => {\n      const services = FiberRefs.getOrDefault(context, defaultServices.currentServices)\n      const console = Context.get(services, consoleTag).unsafe\n      const log = options.stderr === true ? console.error : console.log\n\n      const message = Arr.ensure(message_)\n\n      let firstLine = color(`[${options.formatDate(date)}]`, colors.white)\n        + ` ${color(logLevel.label, ...logLevelColors[logLevel._tag])}`\n        + ` (${fiberId_.threadName(fiberId)})`\n\n      if (List.isCons(spans)) {\n        const now = date.getTime()\n        const render = logSpan_.render(now)\n        for (const span of spans) {\n          firstLine += \" \" + render(span)\n        }\n      }\n\n      firstLine += \":\"\n      let messageIndex = 0\n      if (message.length > 0) {\n        const firstMaybeString = structuredMessage(message[0])\n        if (typeof firstMaybeString === \"string\") {\n          firstLine += \" \" + color(firstMaybeString, colors.bold, colors.cyan)\n          messageIndex++\n        }\n      }\n\n      log(firstLine)\n      console.group()\n\n      if (!Cause.isEmpty(cause)) {\n        log(Cause.pretty(cause, { renderErrorCause: true }))\n      }\n\n      if (messageIndex < message.length) {\n        for (; messageIndex < message.length; messageIndex++) {\n          log(Inspectable.redact(message[messageIndex]))\n        }\n      }\n\n      if (HashMap.size(annotations) > 0) {\n        for (const [key, value] of annotations) {\n          log(color(`${key}:`, colors.bold, colors.white), Inspectable.redact(value))\n        }\n      }\n\n      console.groupEnd()\n    }\n  )\n}\n\nconst prettyLoggerBrowser = (options: {\n  readonly colors: boolean\n  readonly formatDate: (date: Date) => string\n}) => {\n  const color = options.colors ? \"%c\" : \"\"\n  return makeLogger<unknown, void>(\n    ({ annotations, cause, context, date, fiberId, logLevel, message: message_, spans }) => {\n      const services = FiberRefs.getOrDefault(context, defaultServices.currentServices)\n      const console = Context.get(services, consoleTag).unsafe\n      const message = Arr.ensure(message_)\n\n      let firstLine = `${color}[${options.formatDate(date)}]`\n      const firstParams = []\n      if (options.colors) {\n        firstParams.push(\"color:gray\")\n      }\n      firstLine += ` ${color}${logLevel.label}${color} (${fiberId_.threadName(fiberId)})`\n      if (options.colors) {\n        firstParams.push(logLevelStyle[logLevel._tag], \"\")\n      }\n      if (List.isCons(spans)) {\n        const now = date.getTime()\n        const render = logSpan_.render(now)\n        for (const span of spans) {\n          firstLine += \" \" + render(span)\n        }\n      }\n\n      firstLine += \":\"\n\n      let messageIndex = 0\n      if (message.length > 0) {\n        const firstMaybeString = structuredMessage(message[0])\n        if (typeof firstMaybeString === \"string\") {\n          firstLine += ` ${color}${firstMaybeString}`\n          if (options.colors) {\n            firstParams.push(\"color:deepskyblue\")\n          }\n          messageIndex++\n        }\n      }\n\n      console.groupCollapsed(firstLine, ...firstParams)\n\n      if (!Cause.isEmpty(cause)) {\n        console.error(Cause.pretty(cause, { renderErrorCause: true }))\n      }\n\n      if (messageIndex < message.length) {\n        for (; messageIndex < message.length; messageIndex++) {\n          console.log(Inspectable.redact(message[messageIndex]))\n        }\n      }\n\n      if (HashMap.size(annotations) > 0) {\n        for (const [key, value] of annotations) {\n          const redacted = Inspectable.redact(value)\n          if (options.colors) {\n            console.log(`%c${key}:`, \"color:gray\", redacted)\n          } else {\n            console.log(`${key}:`, redacted)\n          }\n        }\n      }\n\n      console.groupEnd()\n    }\n  )\n}\n\n/** @internal */\nexport const prettyLoggerDefault = globalValue(\"effect/Logger/prettyLoggerDefault\", () => prettyLogger())\n", "import * as Arr from \"../Array.js\"\nimport * as Clock from \"../Clock.js\"\nimport * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { constVoid, dual, identity, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport type * as Metric from \"../Metric.js\"\nimport type * as MetricBoundaries from \"../MetricBoundaries.js\"\nimport type * as MetricHook from \"../MetricHook.js\"\nimport type * as MetricKey from \"../MetricKey.js\"\nimport type * as MetricKeyType from \"../MetricKeyType.js\"\nimport type * as MetricLabel from \"../MetricLabel.js\"\nimport type * as MetricPair from \"../MetricPair.js\"\nimport type * as MetricRegistry from \"../MetricRegistry.js\"\nimport type * as MetricState from \"../MetricState.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Cause from \"./cause.js\"\nimport * as effect_ from \"./core-effect.js\"\nimport * as core from \"./core.js\"\nimport * as metricBoundaries from \"./metric/boundaries.js\"\nimport * as metricKey from \"./metric/key.js\"\nimport * as metricKeyType from \"./metric/keyType.js\"\nimport * as metricLabel from \"./metric/label.js\"\nimport * as metricRegistry from \"./metric/registry.js\"\n\n/** @internal */\nconst MetricSymbolKey = \"effect/Metric\"\n\n/** @internal */\nexport const MetricTypeId: Metric.MetricTypeId = Symbol.for(\n  MetricSymbolKey\n) as Metric.MetricTypeId\n\nconst metricVariance = {\n  /* c8 ignore next */\n  _Type: (_: any) => _,\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _Out: (_: never) => _\n}\n\n/** @internal */\nexport const globalMetricRegistry: MetricRegistry.MetricRegistry = globalValue(\n  Symbol.for(\"effect/Metric/globalMetricRegistry\"),\n  () => metricRegistry.make()\n)\n\n/** @internal */\nexport const make: Metric.MetricApply = function<Type, In, Out>(\n  keyType: Type,\n  unsafeUpdate: (input: In, extraTags: ReadonlyArray<MetricLabel.MetricLabel>) => void,\n  unsafeValue: (extraTags: ReadonlyArray<MetricLabel.MetricLabel>) => Out,\n  unsafeModify: (input: In, extraTags: ReadonlyArray<MetricLabel.MetricLabel>) => void\n): Metric.Metric<Type, In, Out> {\n  const metric: Metric.Metric<Type, In, Out> = Object.assign(\n    <A extends In, E, R>(effect: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n      core.tap(effect, (a) => update(metric, a)),\n    {\n      [MetricTypeId]: metricVariance,\n      keyType,\n      unsafeUpdate,\n      unsafeValue,\n      unsafeModify,\n      register() {\n        this.unsafeValue([])\n        return this as any\n      },\n      pipe() {\n        return pipeArguments(this, arguments)\n      }\n    } as const\n  )\n  return metric\n}\n\n/** @internal */\nexport const mapInput = dual<\n  <In, In2>(f: (input: In2) => In) => <Type, Out>(self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, In2, Out>,\n  <Type, In, Out, In2>(self: Metric.Metric<Type, In, Out>, f: (input: In2) => In) => Metric.Metric<Type, In2, Out>\n>(2, (self, f) =>\n  make(\n    self.keyType,\n    (input, extraTags) => self.unsafeUpdate(f(input), extraTags),\n    self.unsafeValue,\n    (input, extraTags) => self.unsafeModify(f(input), extraTags)\n  ))\n\n/** @internal */\nexport const counter: {\n  (name: string, options?: {\n    readonly description?: string | undefined\n    readonly bigint?: false | undefined\n    readonly incremental?: boolean | undefined\n  }): Metric.Metric.Counter<number>\n  (name: string, options: {\n    readonly description?: string | undefined\n    readonly bigint: true\n    readonly incremental?: boolean | undefined\n  }): Metric.Metric.Counter<bigint>\n} = (name, options) => fromMetricKey(metricKey.counter(name, options as any)) as any\n\n/** @internal */\nexport const frequency = (name: string, options?: {\n  readonly description?: string | undefined\n  readonly preregisteredWords?: ReadonlyArray<string> | undefined\n}): Metric.Metric.Frequency<string> => fromMetricKey(metricKey.frequency(name, options))\n\n/** @internal */\nexport const withConstantInput = dual<\n  <In>(input: In) => <Type, Out>(self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, unknown, Out>,\n  <Type, In, Out>(self: Metric.Metric<Type, In, Out>, input: In) => Metric.Metric<Type, unknown, Out>\n>(2, (self, input) => mapInput(self, () => input))\n\n/** @internal */\nexport const fromMetricKey = <Type extends MetricKeyType.MetricKeyType<any, any>>(\n  key: MetricKey.MetricKey<Type>\n): Metric.Metric<\n  Type,\n  MetricKeyType.MetricKeyType.InType<Type>,\n  MetricKeyType.MetricKeyType.OutType<Type>\n> => {\n  let untaggedHook:\n    | MetricHook.MetricHook<\n      MetricKeyType.MetricKeyType.InType<Type>,\n      MetricKeyType.MetricKeyType.OutType<Type>\n    >\n    | undefined\n  const hookCache = new WeakMap<ReadonlyArray<MetricLabel.MetricLabel>, MetricHook.MetricHook<any, any>>()\n\n  const hook = (extraTags: ReadonlyArray<MetricLabel.MetricLabel>): MetricHook.MetricHook<\n    MetricKeyType.MetricKeyType.InType<Type>,\n    MetricKeyType.MetricKeyType.OutType<Type>\n  > => {\n    if (extraTags.length === 0) {\n      if (untaggedHook !== undefined) {\n        return untaggedHook\n      }\n      untaggedHook = globalMetricRegistry.get(key)\n      return untaggedHook\n    }\n\n    let hook = hookCache.get(extraTags)\n    if (hook !== undefined) {\n      return hook\n    }\n    hook = globalMetricRegistry.get(metricKey.taggedWithLabels(key, extraTags))\n    hookCache.set(extraTags, hook)\n    return hook\n  }\n\n  return make(\n    key.keyType,\n    (input, extraTags) => hook(extraTags).update(input),\n    (extraTags) => hook(extraTags).get(),\n    (input, extraTags) => hook(extraTags).modify(input)\n  )\n}\n\n/** @internal */\nexport const gauge: {\n  (name: string, options?: {\n    readonly description?: string | undefined\n    readonly bigint?: false | undefined\n  }): Metric.Metric.Gauge<number>\n  (name: string, options: {\n    readonly description?: string | undefined\n    readonly bigint: true\n  }): Metric.Metric.Gauge<bigint>\n} = (name, options) => fromMetricKey(metricKey.gauge(name, options as any)) as any\n\n/** @internal */\nexport const histogram = (name: string, boundaries: MetricBoundaries.MetricBoundaries, description?: string) =>\n  fromMetricKey(metricKey.histogram(name, boundaries, description))\n\n/* @internal */\nexport const increment = (\n  self:\n    | Metric.Metric.Counter<number>\n    | Metric.Metric.Counter<bigint>\n    | Metric.Metric.Gauge<number>\n    | Metric.Metric.Gauge<bigint>\n): Effect.Effect<void> =>\n  metricKeyType.isCounterKey(self.keyType)\n    ? update(self as Metric.Metric.Counter<number>, self.keyType.bigint ? BigInt(1) as any : 1)\n    : modify(self as Metric.Metric.Gauge<number>, self.keyType.bigint ? BigInt(1) as any : 1)\n\n/* @internal */\nexport const incrementBy = dual<\n  {\n    (amount: number): (self: Metric.Metric.Counter<number> | Metric.Metric.Counter<number>) => Effect.Effect<void>\n    (amount: bigint): (self: Metric.Metric.Counter<bigint> | Metric.Metric.Gauge<bigint>) => Effect.Effect<void>\n  },\n  {\n    (self: Metric.Metric.Counter<number> | Metric.Metric.Gauge<number>, amount: number): Effect.Effect<void>\n    (self: Metric.Metric.Counter<bigint> | Metric.Metric.Gauge<bigint>, amount: bigint): Effect.Effect<void>\n  }\n>(2, (self, amount) =>\n  metricKeyType.isCounterKey(self.keyType)\n    ? update(self as any, amount)\n    : modify(self as any, amount))\n\n/** @internal */\nexport const map = dual<\n  <Out, Out2>(f: (out: Out) => Out2) => <Type, In>(self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, In, Out2>,\n  <Type, In, Out, Out2>(self: Metric.Metric<Type, In, Out>, f: (out: Out) => Out2) => Metric.Metric<Type, In, Out2>\n>(2, (self, f) =>\n  make(\n    self.keyType,\n    self.unsafeUpdate,\n    (extraTags) => f(self.unsafeValue(extraTags)),\n    self.unsafeModify\n  ))\n\n/** @internal */\nexport const mapType = dual<\n  <Type, Type2>(\n    f: (type: Type) => Type2\n  ) => <In, Out>(\n    self: Metric.Metric<Type, In, Out>\n  ) => Metric.Metric<Type2, In, Out>,\n  <Type, In, Out, Type2>(\n    self: Metric.Metric<Type, In, Out>,\n    f: (type: Type) => Type2\n  ) => Metric.Metric<Type2, In, Out>\n>(2, (self, f) =>\n  make(\n    f(self.keyType),\n    self.unsafeUpdate,\n    self.unsafeValue,\n    self.unsafeModify\n  ))\n\n/** @internal */\nexport const modify = dual<\n  <In>(input: In) => <Type, Out>(self: Metric.Metric<Type, In, Out>) => Effect.Effect<void>,\n  <Type, In, Out>(self: Metric.Metric<Type, In, Out>, input: In) => Effect.Effect<void>\n>(2, (self, input) =>\n  core.fiberRefGetWith(\n    core.currentMetricLabels,\n    (tags) => core.sync(() => self.unsafeModify(input, tags))\n  ))\n\n/* @internal */\nexport const set = dual<\n  {\n    (value: number): (self: Metric.Metric.Gauge<number>) => Effect.Effect<void>\n    (value: bigint): (self: Metric.Metric.Gauge<bigint>) => Effect.Effect<void>\n  },\n  {\n    (self: Metric.Metric.Gauge<number>, value: number): Effect.Effect<void>\n    (self: Metric.Metric.Gauge<bigint>, value: bigint): Effect.Effect<void>\n  }\n>(2, (self, value) => update(self as any, value))\n\n/** @internal */\nexport const succeed = <Out>(out: Out): Metric.Metric<void, unknown, Out> =>\n  make(void 0 as void, constVoid, () => out, constVoid)\n\n/** @internal */\nexport const sync = <Out>(evaluate: LazyArg<Out>): Metric.Metric<void, unknown, Out> =>\n  make(void 0 as void, constVoid, evaluate, constVoid)\n\n/** @internal */\nexport const summary = (\n  options: {\n    readonly name: string\n    readonly maxAge: Duration.DurationInput\n    readonly maxSize: number\n    readonly error: number\n    readonly quantiles: ReadonlyArray<number>\n    readonly description?: string | undefined\n  }\n): Metric.Metric.Summary<number> => withNow(summaryTimestamp(options))\n\n/** @internal */\nexport const summaryTimestamp = (\n  options: {\n    readonly name: string\n    readonly maxAge: Duration.DurationInput\n    readonly maxSize: number\n    readonly error: number\n    readonly quantiles: ReadonlyArray<number>\n    readonly description?: string | undefined\n  }\n): Metric.Metric.Summary<readonly [value: number, timestamp: number]> => fromMetricKey(metricKey.summary(options))\n\n/** @internal */\nexport const tagged = dual<\n  <Type, In, Out>(key: string, value: string) => (self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, In, Out>,\n  <Type, In, Out>(self: Metric.Metric<Type, In, Out>, key: string, value: string) => Metric.Metric<Type, In, Out>\n>(3, (self, key, value) => taggedWithLabels(self, [metricLabel.make(key, value)]))\n\n/** @internal */\nexport const taggedWithLabelsInput = dual<\n  <In>(\n    f: (input: In) => Iterable<MetricLabel.MetricLabel>\n  ) => <Type, Out>(self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, In, void>,\n  <Type, In, Out>(\n    self: Metric.Metric<Type, In, Out>,\n    f: (input: In) => Iterable<MetricLabel.MetricLabel>\n  ) => Metric.Metric<Type, In, void>\n>(2, (self, f) =>\n  map(\n    make(\n      self.keyType,\n      (input, extraTags) =>\n        self.unsafeUpdate(\n          input,\n          Arr.union(f(input), extraTags)\n        ),\n      self.unsafeValue,\n      (input, extraTags) =>\n        self.unsafeModify(\n          input,\n          Arr.union(f(input), extraTags)\n        )\n    ),\n    constVoid\n  ))\n\n/** @internal */\nexport const taggedWithLabels = dual<\n  <Type, In, Out>(\n    extraTags: Iterable<MetricLabel.MetricLabel>\n  ) => (self: Metric.Metric<Type, In, Out>) => Metric.Metric<Type, In, Out>,\n  <Type, In, Out>(\n    self: Metric.Metric<Type, In, Out>,\n    extraTags: Iterable<MetricLabel.MetricLabel>\n  ) => Metric.Metric<Type, In, Out>\n>(2, (self, extraTags) => {\n  return make(\n    self.keyType,\n    (input, extraTags1) => self.unsafeUpdate(input, Arr.union(extraTags, extraTags1)),\n    (extraTags1) => self.unsafeValue(Arr.union(extraTags, extraTags1)),\n    (input, extraTags1) => self.unsafeModify(input, Arr.union(extraTags, extraTags1))\n  )\n})\n\n/** @internal */\nexport const timer = (name: string, description?: string): Metric.Metric<\n  MetricKeyType.MetricKeyType.Histogram,\n  Duration.Duration,\n  MetricState.MetricState.Histogram\n> => {\n  const boundaries = metricBoundaries.exponential({\n    start: 0.5,\n    factor: 2,\n    count: 35\n  })\n  const base = pipe(histogram(name, boundaries, description), tagged(\"time_unit\", \"milliseconds\"))\n  return mapInput(base, Duration.toMillis)\n}\n\n/** @internal */\nexport const timerWithBoundaries = (\n  name: string,\n  boundaries: ReadonlyArray<number>,\n  description?: string\n): Metric.Metric<\n  MetricKeyType.MetricKeyType.Histogram,\n  Duration.Duration,\n  MetricState.MetricState.Histogram\n> => {\n  const base = pipe(\n    histogram(name, metricBoundaries.fromIterable(boundaries), description),\n    tagged(\"time_unit\", \"milliseconds\")\n  )\n  return mapInput(base, Duration.toMillis)\n}\n\n/* @internal */\nexport const trackAll = dual<\n  <In>(\n    input: In\n  ) => <Type, Out>(\n    self: Metric.Metric<Type, In, Out>\n  ) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <Type, In, Out>(\n    self: Metric.Metric<Type, In, Out>,\n    input: In\n  ) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n>(2, (self, input) => (effect) =>\n  core.matchCauseEffect(effect, {\n    onFailure: (cause) => core.zipRight(update(self, input), core.failCause(cause)),\n    onSuccess: (value) => core.zipRight(update(self, input), core.succeed(value))\n  }))\n\n/* @internal */\nexport const trackDefect = dual<\n  <Type, Out>(\n    metric: Metric.Metric<Type, unknown, Out>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, Type, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, unknown, Out>\n  ) => Effect.Effect<A, E, R>\n>(2, (self, metric) => trackDefectWith(self, metric, identity))\n\n/* @internal */\nexport const trackDefectWith = dual<\n  <Type, In, Out>(\n    metric: Metric.Metric<Type, In, Out>,\n    f: (defect: unknown) => In\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, Type, In, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>,\n    f: (defect: unknown) => In\n  ) => Effect.Effect<A, E, R>\n>(3, (self, metric, f) => {\n  const updater = (defect: unknown) => update(metric, f(defect))\n  return effect_.tapDefect(self, (cause) => core.forEachSequentialDiscard(Cause.defects(cause), updater))\n})\n\n/* @internal */\nexport const trackDuration = dual<\n  <Type, Out>(\n    metric: Metric.Metric<Type, Duration.Duration, Out>\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, Type, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, Duration.Duration, Out>\n  ) => Effect.Effect<A, E, R>\n>(2, (self, metric) => trackDurationWith(self, metric, identity))\n\n/* @internal */\nexport const trackDurationWith = dual<\n  <Type, In, Out>(\n    metric: Metric.Metric<Type, In, Out>,\n    f: (duration: Duration.Duration) => In\n  ) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R, Type, In, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>,\n    f: (duration: Duration.Duration) => In\n  ) => Effect.Effect<A, E, R>\n>(3, (self, metric, f) =>\n  Clock.clockWith((clock) => {\n    const startTime = clock.unsafeCurrentTimeNanos()\n    return core.tap(self, (_) => {\n      const endTime = clock.unsafeCurrentTimeNanos()\n      const duration = Duration.nanos(endTime - startTime)\n      return update(metric, f(duration))\n    })\n  }))\n\n/* @internal */\nexport const trackError = dual<\n  <Type, In, Out>(\n    metric: Metric.Metric<Type, In, Out>\n  ) => <A, E extends In, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E extends In, R, Type, In, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>\n  ) => Effect.Effect<A, E, R>\n>(2, <A, E extends In, R, Type, In, Out>(\n  self: Effect.Effect<A, E, R>,\n  metric: Metric.Metric<Type, In, Out>\n) => trackErrorWith(self, metric, (a: In) => a))\n\n/* @internal */\nexport const trackErrorWith = dual<\n  <Type, In, Out, In2>(\n    metric: Metric.Metric<Type, In, Out>,\n    f: (error: In2) => In\n  ) => <A, E extends In2, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E extends In2, R, Type, In, Out, In2>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>,\n    f: (error: In2) => In\n  ) => Effect.Effect<A, E, R>\n>(3, <A, E extends In2, R, Type, In, Out, In2>(\n  self: Effect.Effect<A, E, R>,\n  metric: Metric.Metric<Type, In, Out>,\n  f: (error: In2) => In\n) => {\n  const updater = (error: E): Effect.Effect<void> => update(metric, f(error))\n  return effect_.tapError(self, updater)\n})\n\n/* @internal */\nexport const trackSuccess = dual<\n  <Type, In, Out>(\n    metric: Metric.Metric<Type, In, Out>\n  ) => <A extends In, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A extends In, E, R, Type, In, Out>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>\n  ) => Effect.Effect<A, E, R>\n>(2, <A extends In, E, R, Type, In, Out>(\n  self: Effect.Effect<A, E, R>,\n  metric: Metric.Metric<Type, In, Out>\n) => trackSuccessWith(self, metric, (a: In) => a))\n\n/* @internal */\nexport const trackSuccessWith = dual<\n  <Type, In, Out, In2>(\n    metric: Metric.Metric<Type, In, Out>,\n    f: (value: In2) => In\n  ) => <A extends In2, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A extends In2, E, R, Type, In, Out, In2>(\n    self: Effect.Effect<A, E, R>,\n    metric: Metric.Metric<Type, In, Out>,\n    f: (value: In2) => In\n  ) => Effect.Effect<A, E, R>\n>(3, <A extends In2, E, R, Type, In, Out, In2>(\n  self: Effect.Effect<A, E, R>,\n  metric: Metric.Metric<Type, In, Out>,\n  f: (value: In2) => In\n) => {\n  const updater = (value: A): Effect.Effect<void> => update(metric, f(value))\n  return core.tap(self, updater)\n})\n\n/* @internal */\nexport const update = dual<\n  <In>(input: In) => <Type, Out>(self: Metric.Metric<Type, In, Out>) => Effect.Effect<void>,\n  <Type, In, Out>(self: Metric.Metric<Type, In, Out>, input: In) => Effect.Effect<void>\n>(2, (self, input) =>\n  core.fiberRefGetWith(\n    core.currentMetricLabels,\n    (tags) => core.sync(() => self.unsafeUpdate(input, tags))\n  ))\n\n/* @internal */\nexport const value = <Type, In, Out>(\n  self: Metric.Metric<Type, In, Out>\n): Effect.Effect<Out> =>\n  core.fiberRefGetWith(\n    core.currentMetricLabels,\n    (tags) => core.sync(() => self.unsafeValue(tags))\n  )\n\n/** @internal */\nexport const withNow = <Type, In, Out>(\n  self: Metric.Metric<Type, readonly [In, number], Out>\n): Metric.Metric<Type, In, Out> => mapInput(self, (input: In) => [input, Date.now()] as const)\n\n/** @internal */\nexport const zip = dual<\n  <Type2, In2, Out2>(\n    that: Metric.Metric<Type2, In2, Out2>\n  ) => <Type, In, Out>(\n    self: Metric.Metric<Type, In, Out>\n  ) => Metric.Metric<readonly [Type, Type2], readonly [In, In2], [Out, Out2]>,\n  <Type, In, Out, Type2, In2, Out2>(\n    self: Metric.Metric<Type, In, Out>,\n    that: Metric.Metric<Type2, In2, Out2>\n  ) => Metric.Metric<readonly [Type, Type2], readonly [In, In2], [Out, Out2]>\n>(\n  2,\n  <Type, In, Out, Type2, In2, Out2>(self: Metric.Metric<Type, In, Out>, that: Metric.Metric<Type2, In2, Out2>) =>\n    make(\n      [self.keyType, that.keyType] as const,\n      (input: readonly [In, In2], extraTags) => {\n        const [l, r] = input\n        self.unsafeUpdate(l, extraTags)\n        that.unsafeUpdate(r, extraTags)\n      },\n      (extraTags) => [self.unsafeValue(extraTags), that.unsafeValue(extraTags)],\n      (input: readonly [In, In2], extraTags) => {\n        const [l, r] = input\n        self.unsafeModify(l, extraTags)\n        that.unsafeModify(r, extraTags)\n      }\n    )\n)\n\n/** @internal */\nexport const unsafeSnapshot = (): Array<MetricPair.MetricPair.Untyped> => globalMetricRegistry.snapshot()\n\n/** @internal */\nexport const snapshot: Effect.Effect<Array<MetricPair.MetricPair.Untyped>> = core.sync(\n  unsafeSnapshot\n)\n", "import * as Arr from \"../../Array.js\"\nimport * as Chunk from \"../../Chunk.js\"\nimport * as Equal from \"../../Equal.js\"\nimport { pipe } from \"../../Function.js\"\nimport * as Hash from \"../../Hash.js\"\nimport type * as MetricBoundaries from \"../../MetricBoundaries.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport { hasProperty } from \"../../Predicate.js\"\n\n/** @internal */\nconst MetricBoundariesSymbolKey = \"effect/MetricBoundaries\"\n\n/** @internal */\nexport const MetricBoundariesTypeId: MetricBoundaries.MetricBoundariesTypeId = Symbol.for(\n  MetricBoundariesSymbolKey\n) as MetricBoundaries.MetricBoundariesTypeId\n\n/** @internal */\nclass MetricBoundariesImpl implements MetricBoundaries.MetricBoundaries {\n  readonly [MetricBoundariesTypeId]: MetricBoundaries.MetricBoundariesTypeId = MetricBoundariesTypeId\n  constructor(readonly values: ReadonlyArray<number>) {\n    this._hash = pipe(\n      Hash.string(MetricBoundariesSymbolKey),\n      Hash.combine(Hash.array(this.values))\n    )\n  }\n  readonly _hash: number;\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](u: unknown): boolean {\n    return isMetricBoundaries(u) && Equal.equals(this.values, u.values)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const isMetricBoundaries = (u: unknown): u is MetricBoundaries.MetricBoundaries =>\n  hasProperty(u, MetricBoundariesTypeId)\n\n/** @internal */\nexport const fromIterable = (iterable: Iterable<number>): MetricBoundaries.MetricBoundaries => {\n  const values = pipe(\n    iterable,\n    Arr.appendAll(Chunk.of(Number.POSITIVE_INFINITY)),\n    Arr.dedupe\n  )\n  return new MetricBoundariesImpl(values)\n}\n\n/** @internal */\nexport const linear = (options: {\n  readonly start: number\n  readonly width: number\n  readonly count: number\n}): MetricBoundaries.MetricBoundaries =>\n  pipe(\n    Arr.makeBy(options.count - 1, (i) => options.start + i * options.width),\n    Chunk.unsafeFromArray,\n    fromIterable\n  )\n\n/** @internal */\nexport const exponential = (options: {\n  readonly start: number\n  readonly factor: number\n  readonly count: number\n}): MetricBoundaries.MetricBoundaries =>\n  pipe(\n    Arr.makeBy(options.count - 1, (i) => options.start * Math.pow(options.factor, i)),\n    Chunk.unsafeFromArray,\n    fromIterable\n  )\n", "import * as Arr from \"../../Array.js\"\nimport type * as Duration from \"../../Duration.js\"\nimport * as Equal from \"../../Equal.js\"\nimport { dual, pipe } from \"../../Function.js\"\nimport * as Hash from \"../../Hash.js\"\nimport type * as MetricBoundaries from \"../../MetricBoundaries.js\"\nimport type * as MetricKey from \"../../MetricKey.js\"\nimport type * as MetricKeyType from \"../../MetricKeyType.js\"\nimport type * as MetricLabel from \"../../MetricLabel.js\"\nimport * as Option from \"../../Option.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport { hasProperty } from \"../../Predicate.js\"\nimport * as metricKeyType from \"./keyType.js\"\nimport * as metricLabel from \"./label.js\"\n\n/** @internal */\nconst MetricKeySymbolKey = \"effect/MetricKey\"\n\n/** @internal */\nexport const MetricKeyTypeId: MetricKey.MetricKeyTypeId = Symbol.for(\n  MetricKeySymbolKey\n) as MetricKey.MetricKeyTypeId\n\nconst metricKeyVariance = {\n  /* c8 ignore next */\n  _Type: (_: never) => _\n}\n\nconst arrayEquivilence = Arr.getEquivalence(Equal.equals)\n\n/** @internal */\nclass MetricKeyImpl<out Type extends MetricKeyType.MetricKeyType<any, any>> implements MetricKey.MetricKey<Type> {\n  readonly [MetricKeyTypeId] = metricKeyVariance\n  constructor(\n    readonly name: string,\n    readonly keyType: Type,\n    readonly description: Option.Option<string>,\n    readonly tags: ReadonlyArray<MetricLabel.MetricLabel> = []\n  ) {\n    this._hash = pipe(\n      Hash.string(this.name + this.description),\n      Hash.combine(Hash.hash(this.keyType)),\n      Hash.combine(Hash.array(this.tags))\n    )\n  }\n  readonly _hash: number;\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](u: unknown): boolean {\n    return isMetricKey(u) &&\n      this.name === u.name &&\n      Equal.equals(this.keyType, u.keyType) &&\n      Equal.equals(this.description, u.description) &&\n      arrayEquivilence(this.tags, u.tags)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const isMetricKey = (u: unknown): u is MetricKey.MetricKey<MetricKeyType.MetricKeyType<unknown, unknown>> =>\n  hasProperty(u, MetricKeyTypeId)\n\n/** @internal */\nexport const counter: {\n  (name: string, options?: {\n    readonly description?: string | undefined\n    readonly bigint?: false | undefined\n    readonly incremental?: boolean | undefined\n  }): MetricKey.MetricKey.Counter<number>\n  (name: string, options: {\n    readonly description?: string | undefined\n    readonly bigint: true\n    readonly incremental?: boolean | undefined\n  }): MetricKey.MetricKey.Counter<bigint>\n} = (name: string, options) =>\n  new MetricKeyImpl(\n    name,\n    metricKeyType.counter(options as any),\n    Option.fromNullable(options?.description)\n  )\n\n/** @internal */\nexport const frequency = (name: string, options?: {\n  readonly description?: string | undefined\n  readonly preregisteredWords?: ReadonlyArray<string> | undefined\n}): MetricKey.MetricKey.Frequency =>\n  new MetricKeyImpl(name, metricKeyType.frequency(options), Option.fromNullable(options?.description))\n\n/** @internal */\nexport const gauge: {\n  (name: string, options?: {\n    readonly description?: string | undefined\n    readonly bigint?: false | undefined\n  }): MetricKey.MetricKey.Gauge<number>\n  (name: string, options: {\n    readonly description?: string | undefined\n    readonly bigint: true\n  }): MetricKey.MetricKey.Gauge<bigint>\n} = (name, options) =>\n  new MetricKeyImpl(\n    name,\n    metricKeyType.gauge(options as any),\n    Option.fromNullable(options?.description)\n  )\n\n/** @internal */\nexport const histogram = (\n  name: string,\n  boundaries: MetricBoundaries.MetricBoundaries,\n  description?: string\n): MetricKey.MetricKey.Histogram =>\n  new MetricKeyImpl(\n    name,\n    metricKeyType.histogram(boundaries),\n    Option.fromNullable(description)\n  )\n\n/** @internal */\nexport const summary = (\n  options: {\n    readonly name: string\n    readonly maxAge: Duration.DurationInput\n    readonly maxSize: number\n    readonly error: number\n    readonly quantiles: ReadonlyArray<number>\n    readonly description?: string | undefined\n  }\n): MetricKey.MetricKey.Summary =>\n  new MetricKeyImpl(\n    options.name,\n    metricKeyType.summary(options),\n    Option.fromNullable(options.description)\n  )\n\n/** @internal */\nexport const tagged = dual<\n  (\n    key: string,\n    value: string\n  ) => <Type extends MetricKeyType.MetricKeyType<any, any>>(\n    self: MetricKey.MetricKey<Type>\n  ) => MetricKey.MetricKey<Type>,\n  <Type extends MetricKeyType.MetricKeyType<any, any>>(\n    self: MetricKey.MetricKey<Type>,\n    key: string,\n    value: string\n  ) => MetricKey.MetricKey<Type>\n>(3, (self, key, value) => taggedWithLabels(self, [metricLabel.make(key, value)]))\n\n/** @internal */\nexport const taggedWithLabels = dual<\n  (\n    extraTags: ReadonlyArray<MetricLabel.MetricLabel>\n  ) => <Type extends MetricKeyType.MetricKeyType<any, any>>(\n    self: MetricKey.MetricKey<Type>\n  ) => MetricKey.MetricKey<Type>,\n  <Type extends MetricKeyType.MetricKeyType<any, any>>(\n    self: MetricKey.MetricKey<Type>,\n    extraTags: ReadonlyArray<MetricLabel.MetricLabel>\n  ) => MetricKey.MetricKey<Type>\n>(2, (self, extraTags) =>\n  extraTags.length === 0\n    ? self\n    : new MetricKeyImpl(self.name, self.keyType, self.description, Arr.union(self.tags, extraTags)))\n", "import * as Duration from \"../../Duration.js\"\nimport * as Equal from \"../../Equal.js\"\nimport { pipe } from \"../../Function.js\"\nimport * as Hash from \"../../Hash.js\"\nimport type * as MetricBoundaries from \"../../MetricBoundaries.js\"\nimport type * as MetricKeyType from \"../../MetricKeyType.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport { hasProperty } from \"../../Predicate.js\"\n\n/** @internal */\nconst MetricKeyTypeSymbolKey = \"effect/MetricKeyType\"\n\n/** @internal */\nexport const MetricKeyTypeTypeId: MetricKeyType.MetricKeyTypeTypeId = Symbol.for(\n  MetricKeyTypeSymbolKey\n) as MetricKeyType.MetricKeyTypeTypeId\n\n/** @internal */\nconst CounterKeyTypeSymbolKey = \"effect/MetricKeyType/Counter\"\n\n/** @internal */\nexport const CounterKeyTypeTypeId: MetricKeyType.CounterKeyTypeTypeId = Symbol.for(\n  CounterKeyTypeSymbolKey\n) as MetricKeyType.CounterKeyTypeTypeId\n\n/** @internal */\nconst FrequencyKeyTypeSymbolKey = \"effect/MetricKeyType/Frequency\"\n\n/** @internal */\nexport const FrequencyKeyTypeTypeId: MetricKeyType.FrequencyKeyTypeTypeId = Symbol.for(\n  FrequencyKeyTypeSymbolKey\n) as MetricKeyType.FrequencyKeyTypeTypeId\n\n/** @internal */\nconst GaugeKeyTypeSymbolKey = \"effect/MetricKeyType/Gauge\"\n\n/** @internal */\nexport const GaugeKeyTypeTypeId: MetricKeyType.GaugeKeyTypeTypeId = Symbol.for(\n  GaugeKeyTypeSymbolKey\n) as MetricKeyType.GaugeKeyTypeTypeId\n\n/** @internal */\nconst HistogramKeyTypeSymbolKey = \"effect/MetricKeyType/Histogram\"\n\n/** @internal */\nexport const HistogramKeyTypeTypeId: MetricKeyType.HistogramKeyTypeTypeId = Symbol.for(\n  HistogramKeyTypeSymbolKey\n) as MetricKeyType.HistogramKeyTypeTypeId\n\n/** @internal */\nconst SummaryKeyTypeSymbolKey = \"effect/MetricKeyType/Summary\"\n\n/** @internal */\nexport const SummaryKeyTypeTypeId: MetricKeyType.SummaryKeyTypeTypeId = Symbol.for(\n  SummaryKeyTypeSymbolKey\n) as MetricKeyType.SummaryKeyTypeTypeId\n\nconst metricKeyTypeVariance = {\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _Out: (_: never) => _\n}\n\n/** @internal */\nclass CounterKeyType<A extends (number | bigint)> implements MetricKeyType.MetricKeyType.Counter<A> {\n  readonly [MetricKeyTypeTypeId] = metricKeyTypeVariance\n  readonly [CounterKeyTypeTypeId]: MetricKeyType.CounterKeyTypeTypeId = CounterKeyTypeTypeId\n  constructor(readonly incremental: boolean, readonly bigint: boolean) {\n    this._hash = Hash.string(CounterKeyTypeSymbolKey)\n  }\n  readonly _hash: number;\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isCounterKey(that)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst FrequencyKeyTypeHash = Hash.string(FrequencyKeyTypeSymbolKey)\n\n/** @internal */\nclass FrequencyKeyType implements MetricKeyType.MetricKeyType.Frequency {\n  readonly [MetricKeyTypeTypeId] = metricKeyTypeVariance\n  readonly [FrequencyKeyTypeTypeId]: MetricKeyType.FrequencyKeyTypeTypeId = FrequencyKeyTypeTypeId\n  constructor(readonly preregisteredWords: ReadonlyArray<string>) {}\n  [Hash.symbol](): number {\n    return FrequencyKeyTypeHash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFrequencyKey(that)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst GaugeKeyTypeHash = Hash.string(GaugeKeyTypeSymbolKey)\n\n/** @internal */\nclass GaugeKeyType<A extends (number | bigint)> implements MetricKeyType.MetricKeyType.Gauge<A> {\n  readonly [MetricKeyTypeTypeId] = metricKeyTypeVariance\n  readonly [GaugeKeyTypeTypeId]: MetricKeyType.GaugeKeyTypeTypeId = GaugeKeyTypeTypeId\n  constructor(readonly bigint: boolean) {}\n  [Hash.symbol](): number {\n    return GaugeKeyTypeHash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isGaugeKey(that)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport class HistogramKeyType implements MetricKeyType.MetricKeyType.Histogram {\n  readonly [MetricKeyTypeTypeId] = metricKeyTypeVariance\n  readonly [HistogramKeyTypeTypeId]: MetricKeyType.HistogramKeyTypeTypeId = HistogramKeyTypeTypeId\n  constructor(readonly boundaries: MetricBoundaries.MetricBoundaries) {\n    this._hash = pipe(\n      Hash.string(HistogramKeyTypeSymbolKey),\n      Hash.combine(Hash.hash(this.boundaries))\n    )\n  }\n  readonly _hash: number;\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isHistogramKey(that) && Equal.equals(this.boundaries, that.boundaries)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nclass SummaryKeyType implements MetricKeyType.MetricKeyType.Summary {\n  readonly [MetricKeyTypeTypeId] = metricKeyTypeVariance\n  readonly [SummaryKeyTypeTypeId]: MetricKeyType.SummaryKeyTypeTypeId = SummaryKeyTypeTypeId\n  constructor(\n    readonly maxAge: Duration.Duration,\n    readonly maxSize: number,\n    readonly error: number,\n    readonly quantiles: ReadonlyArray<number>\n  ) {\n    this._hash = pipe(\n      Hash.string(SummaryKeyTypeSymbolKey),\n      Hash.combine(Hash.hash(this.maxAge)),\n      Hash.combine(Hash.hash(this.maxSize)),\n      Hash.combine(Hash.hash(this.error)),\n      Hash.combine(Hash.array(this.quantiles))\n    )\n  }\n  readonly _hash: number;\n  [Hash.symbol](): number {\n    return this._hash\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isSummaryKey(that) &&\n      Equal.equals(this.maxAge, that.maxAge) &&\n      this.maxSize === that.maxSize &&\n      this.error === that.error &&\n      Equal.equals(this.quantiles, that.quantiles)\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const counter: <A extends number | bigint>(options?: {\n  readonly bigint: boolean\n  readonly incremental: boolean\n}) => CounterKeyType<A> = (options) =>\n  new CounterKeyType(\n    options?.incremental ?? false,\n    options?.bigint ?? false\n  )\n\n/** @internal */\nexport const frequency = (options?: {\n  readonly preregisteredWords?: ReadonlyArray<string> | undefined\n}): MetricKeyType.MetricKeyType.Frequency => new FrequencyKeyType(options?.preregisteredWords ?? [])\n\n/** @internal */\nexport const gauge: <A extends number | bigint>(options?: {\n  readonly bigint: boolean\n}) => GaugeKeyType<A> = (options) =>\n  new GaugeKeyType(\n    options?.bigint ?? false\n  )\n\n/** @internal */\nexport const histogram = (boundaries: MetricBoundaries.MetricBoundaries): MetricKeyType.MetricKeyType.Histogram => {\n  return new HistogramKeyType(boundaries)\n}\n\n/** @internal */\nexport const summary = (\n  options: {\n    readonly maxAge: Duration.DurationInput\n    readonly maxSize: number\n    readonly error: number\n    readonly quantiles: ReadonlyArray<number>\n  }\n): MetricKeyType.MetricKeyType.Summary => {\n  return new SummaryKeyType(Duration.decode(options.maxAge), options.maxSize, options.error, options.quantiles)\n}\n\n/** @internal */\nexport const isMetricKeyType = (u: unknown): u is MetricKeyType.MetricKeyType<unknown, unknown> =>\n  hasProperty(u, MetricKeyTypeTypeId)\n\n/** @internal */\nexport const isCounterKey = (u: unknown): u is MetricKeyType.MetricKeyType.Counter<number | bigint> =>\n  hasProperty(u, CounterKeyTypeTypeId)\n\n/** @internal */\nexport const isFrequencyKey = (u: unknown): u is MetricKeyType.MetricKeyType.Frequency =>\n  hasProperty(u, FrequencyKeyTypeTypeId)\n\n/** @internal */\nexport const isGaugeKey = (u: unknown): u is MetricKeyType.MetricKeyType.Gauge<number | bigint> =>\n  hasProperty(u, GaugeKeyTypeTypeId)\n\n/** @internal */\nexport const isHistogramKey = (u: unknown): u is MetricKeyType.MetricKeyType.Histogram =>\n  hasProperty(u, HistogramKeyTypeTypeId)\n\n/** @internal */\nexport const isSummaryKey = (u: unknown): u is MetricKeyType.MetricKeyType.Summary =>\n  hasProperty(u, SummaryKeyTypeTypeId)\n", "import { pipe } from \"../../Function.js\"\nimport type * as MetricHook from \"../../MetricHook.js\"\nimport type * as MetricKey from \"../../MetricKey.js\"\nimport type * as MetricKeyType from \"../../MetricKeyType.js\"\nimport type * as MetricPair from \"../../MetricPair.js\"\nimport type * as MetricRegistry from \"../../MetricRegistry.js\"\nimport * as MutableHashMap from \"../../MutableHashMap.js\"\nimport * as Option from \"../../Option.js\"\nimport * as metricHook from \"./hook.js\"\nimport * as metricKeyType from \"./keyType.js\"\nimport * as metricPair from \"./pair.js\"\n\n/** @internal */\nconst MetricRegistrySymbolKey = \"effect/MetricRegistry\"\n\n/** @internal */\nexport const MetricRegistryTypeId: MetricRegistry.MetricRegistryTypeId = Symbol.for(\n  MetricRegistrySymbolKey\n) as MetricRegistry.MetricRegistryTypeId\n\n/** @internal */\nclass MetricRegistryImpl implements MetricRegistry.MetricRegistry {\n  readonly [MetricRegistryTypeId]: MetricRegistry.MetricRegistryTypeId = MetricRegistryTypeId\n\n  private map = MutableHashMap.empty<\n    MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n    MetricHook.MetricHook.Root\n  >()\n\n  snapshot(): Array<MetricPair.MetricPair.Untyped> {\n    const result: Array<MetricPair.MetricPair.Untyped> = []\n    for (const [key, hook] of this.map) {\n      result.push(metricPair.unsafeMake(key, hook.get()))\n    }\n    return result\n  }\n\n  get<Type extends MetricKeyType.MetricKeyType<any, any>>(\n    key: MetricKey.MetricKey<Type>\n  ): MetricHook.MetricHook<\n    MetricKeyType.MetricKeyType.InType<typeof key[\"keyType\"]>,\n    MetricKeyType.MetricKeyType.OutType<typeof key[\"keyType\"]>\n  > {\n    const hook = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (hook == null) {\n      if (metricKeyType.isCounterKey(key.keyType)) {\n        return this.getCounter(key as unknown as MetricKey.MetricKey.Counter<any>) as any\n      }\n      if (metricKeyType.isGaugeKey(key.keyType)) {\n        return this.getGauge(key as unknown as MetricKey.MetricKey.Gauge<any>) as any\n      }\n      if (metricKeyType.isFrequencyKey(key.keyType)) {\n        return this.getFrequency(key as unknown as MetricKey.MetricKey.Frequency) as any\n      }\n      if (metricKeyType.isHistogramKey(key.keyType)) {\n        return this.getHistogram(key as unknown as MetricKey.MetricKey.Histogram) as any\n      }\n      if (metricKeyType.isSummaryKey(key.keyType)) {\n        return this.getSummary(key as unknown as MetricKey.MetricKey.Summary) as any\n      }\n      throw new Error(\n        \"BUG: MetricRegistry.get - unknown MetricKeyType - please report an issue at https://github.com/Effect-TS/effect/issues\"\n      )\n    } else {\n      return hook as any\n    }\n  }\n\n  getCounter<A extends (number | bigint)>(key: MetricKey.MetricKey.Counter<A>): MetricHook.MetricHook.Counter<A> {\n    let value = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (value == null) {\n      const counter = metricHook.counter(key)\n      if (!pipe(this.map, MutableHashMap.has(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>))) {\n        pipe(\n          this.map,\n          MutableHashMap.set(\n            key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n            counter as MetricHook.MetricHook.Root\n          )\n        )\n      }\n      value = counter\n    }\n    return value as MetricHook.MetricHook.Counter<A>\n  }\n\n  getFrequency(key: MetricKey.MetricKey.Frequency): MetricHook.MetricHook.Frequency {\n    let value = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (value == null) {\n      const frequency = metricHook.frequency(key)\n      if (!pipe(this.map, MutableHashMap.has(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>))) {\n        pipe(\n          this.map,\n          MutableHashMap.set(\n            key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n            frequency as MetricHook.MetricHook.Root\n          )\n        )\n      }\n      value = frequency\n    }\n    return value as MetricHook.MetricHook.Frequency\n  }\n\n  getGauge<A extends (number | bigint)>(key: MetricKey.MetricKey.Gauge<A>): MetricHook.MetricHook.Gauge<A> {\n    let value = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (value == null) {\n      const gauge = metricHook.gauge(key as any, key.keyType.bigint ? BigInt(0) as any : 0)\n      if (!pipe(this.map, MutableHashMap.has(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>))) {\n        pipe(\n          this.map,\n          MutableHashMap.set(\n            key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n            gauge as MetricHook.MetricHook.Root\n          )\n        )\n      }\n      value = gauge\n    }\n    return value as MetricHook.MetricHook.Gauge<A>\n  }\n\n  getHistogram(key: MetricKey.MetricKey.Histogram): MetricHook.MetricHook.Histogram {\n    let value = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (value == null) {\n      const histogram = metricHook.histogram(key)\n      if (!pipe(this.map, MutableHashMap.has(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>))) {\n        pipe(\n          this.map,\n          MutableHashMap.set(\n            key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n            histogram as MetricHook.MetricHook.Root\n          )\n        )\n      }\n      value = histogram\n    }\n    return value as MetricHook.MetricHook.Histogram\n  }\n\n  getSummary(key: MetricKey.MetricKey.Summary): MetricHook.MetricHook.Summary {\n    let value = pipe(\n      this.map,\n      MutableHashMap.get(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>),\n      Option.getOrUndefined\n    )\n    if (value == null) {\n      const summary = metricHook.summary(key)\n      if (!pipe(this.map, MutableHashMap.has(key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>))) {\n        pipe(\n          this.map,\n          MutableHashMap.set(\n            key as MetricKey.MetricKey<MetricKeyType.MetricKeyType.Untyped>,\n            summary as MetricHook.MetricHook.Root\n          )\n        )\n      }\n      value = summary\n    }\n    return value as MetricHook.MetricHook.Summary\n  }\n}\n\n/** @internal */\nexport const make = (): MetricRegistry.MetricRegistry => {\n  return new MetricRegistryImpl()\n}\n", "import * as Arr from \"../../Array.js\"\nimport * as Duration from \"../../Duration.js\"\nimport type { LazyArg } from \"../../Function.js\"\nimport { dual, pipe } from \"../../Function.js\"\nimport type * as MetricHook from \"../../MetricHook.js\"\nimport type * as MetricKey from \"../../MetricKey.js\"\nimport type * as MetricState from \"../../MetricState.js\"\nimport * as number from \"../../Number.js\"\nimport * as Option from \"../../Option.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport * as metricState from \"./state.js\"\n\n/** @internal */\nconst MetricHookSymbolKey = \"effect/MetricHook\"\n\n/** @internal */\nexport const MetricHookTypeId: MetricHook.MetricHookTypeId = Symbol.for(\n  MetricHookSymbolKey\n) as MetricHook.MetricHookTypeId\n\nconst metricHookVariance = {\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _Out: (_: never) => _\n}\n\n/** @internal */\nexport const make = <In, Out>(\n  options: {\n    readonly get: LazyArg<Out>\n    readonly update: (input: In) => void\n    readonly modify: (input: In) => void\n  }\n): MetricHook.MetricHook<In, Out> => ({\n  [MetricHookTypeId]: metricHookVariance,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  ...options\n})\n\n/** @internal */\nexport const onModify = dual<\n  <In, Out>(f: (input: In) => void) => (self: MetricHook.MetricHook<In, Out>) => MetricHook.MetricHook<In, Out>,\n  <In, Out>(self: MetricHook.MetricHook<In, Out>, f: (input: In) => void) => MetricHook.MetricHook<In, Out>\n>(2, (self, f) => ({\n  [MetricHookTypeId]: metricHookVariance,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  get: self.get,\n  update: self.update,\n  modify: (input) => {\n    self.modify(input)\n    return f(input)\n  }\n}))\n\n/** @internal */\nexport const onUpdate = dual<\n  <In, Out>(f: (input: In) => void) => (self: MetricHook.MetricHook<In, Out>) => MetricHook.MetricHook<In, Out>,\n  <In, Out>(self: MetricHook.MetricHook<In, Out>, f: (input: In) => void) => MetricHook.MetricHook<In, Out>\n>(2, (self, f) => ({\n  [MetricHookTypeId]: metricHookVariance,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  get: self.get,\n  update: (input) => {\n    self.update(input)\n    return f(input)\n  },\n  modify: self.modify\n}))\n\nconst bigint0 = BigInt(0)\n\n/** @internal */\nexport const counter = <A extends (number | bigint)>(\n  key: MetricKey.MetricKey.Counter<A>\n): MetricHook.MetricHook.Counter<A> => {\n  let sum: A = key.keyType.bigint ? bigint0 as A : 0 as A\n  const canUpdate = key.keyType.incremental\n    ? key.keyType.bigint\n      ? (value: A) => value >= bigint0\n      : (value: A) => value >= 0\n    : (_value: A) => true\n  const update = (value: A) => {\n    if (canUpdate(value)) {\n      sum = (sum as any) + value\n    }\n  }\n  return make({\n    get: () => metricState.counter(sum as number) as unknown as MetricState.MetricState.Counter<A>,\n    update,\n    modify: update\n  })\n}\n\n/** @internal */\nexport const frequency = (key: MetricKey.MetricKey.Frequency): MetricHook.MetricHook.Frequency => {\n  const values = new Map<string, number>()\n  for (const word of key.keyType.preregisteredWords) {\n    values.set(word, 0)\n  }\n  const update = (word: string) => {\n    const slotCount = values.get(word) ?? 0\n    values.set(word, slotCount + 1)\n  }\n  return make({\n    get: () => metricState.frequency(values),\n    update,\n    modify: update\n  })\n}\n\n/** @internal */\nexport const gauge: {\n  (key: MetricKey.MetricKey.Gauge<number>, startAt: number): MetricHook.MetricHook.Gauge<number>\n  (key: MetricKey.MetricKey.Gauge<bigint>, startAt: bigint): MetricHook.MetricHook.Gauge<bigint>\n} = <A extends (number | bigint)>(\n  _key: MetricKey.MetricKey.Gauge<A>,\n  startAt: A\n): MetricHook.MetricHook.Gauge<A> => {\n  let value = startAt\n  return make({\n    get: () => metricState.gauge(value as number) as unknown as MetricState.MetricState.Gauge<A>,\n    update: (v) => {\n      value = v\n    },\n    modify: (v) => {\n      value = (value as any) + v\n    }\n  })\n}\n\n/** @internal */\nexport const histogram = (key: MetricKey.MetricKey.Histogram): MetricHook.MetricHook.Histogram => {\n  const bounds = key.keyType.boundaries.values\n  const size = bounds.length\n  const values = new Uint32Array(size + 1)\n  // NOTE: while 64-bit floating point precision shoule be enough for any\n  // practical histogram boundary values, there is still a small chance that\n  // precision will be lost with very large / very small numbers. If we find\n  // that is the case, a more complex approach storing the histogram boundary\n  // values as a tuple of `[original: string, numeric: number]` may be warranted\n  const boundaries = new Float64Array(size)\n  let count = 0\n  let sum = 0\n  let min = Number.MAX_VALUE\n  let max = Number.MIN_VALUE\n\n  pipe(\n    bounds,\n    Arr.sort(number.Order),\n    Arr.map((n, i) => {\n      boundaries[i] = n\n    })\n  )\n\n  // Insert the value into the right bucket with a binary search\n  const update = (value: number) => {\n    let from = 0\n    let to = size\n    while (from !== to) {\n      const mid = Math.floor(from + (to - from) / 2)\n      const boundary = boundaries[mid]\n      if (value <= boundary) {\n        to = mid\n      } else {\n        from = mid\n      }\n      // The special case when to / from have a distance of one\n      if (to === from + 1) {\n        if (value <= boundaries[from]) {\n          to = from\n        } else {\n          from = to\n        }\n      }\n    }\n    values[from] = values[from]! + 1\n    count = count + 1\n    sum = sum + value\n    if (value < min) {\n      min = value\n    }\n    if (value > max) {\n      max = value\n    }\n  }\n\n  const getBuckets = (): ReadonlyArray<readonly [number, number]> => {\n    const builder: Array<readonly [number, number]> = Arr.allocate(size) as any\n    let cumulated = 0\n    for (let i = 0; i < size; i++) {\n      const boundary = boundaries[i]\n      const value = values[i]\n      cumulated = cumulated + value\n      builder[i] = [boundary, cumulated]\n    }\n    return builder\n  }\n\n  return make({\n    get: () =>\n      metricState.histogram({\n        buckets: getBuckets(),\n        count,\n        min,\n        max,\n        sum\n      }),\n    update,\n    modify: update\n  })\n}\n\n/** @internal */\nexport const summary = (key: MetricKey.MetricKey.Summary): MetricHook.MetricHook.Summary => {\n  const { error, maxAge, maxSize, quantiles } = key.keyType\n  const sortedQuantiles = pipe(quantiles, Arr.sort(number.Order))\n  const values = Arr.allocate<readonly [number, number]>(maxSize)\n\n  let head = 0\n  let count = 0\n  let sum = 0\n  let min = 0\n  let max = 0\n\n  // Just before the snapshot we filter out all values older than maxAge\n  const snapshot = (now: number): ReadonlyArray<readonly [number, Option.Option<number>]> => {\n    const builder: Array<number> = []\n    // If the buffer is not full yet it contains valid items at the 0..last\n    // indices and null values at the rest of the positions.\n    //\n    // If the buffer is already full then all elements contains a valid\n    // measurement with timestamp.\n    //\n    // At any given point in time we can enumerate all the non-null elements in\n    // the buffer and filter them by timestamp to get a valid view of a time\n    // window.\n    //\n    // The order does not matter because it gets sorted before passing to\n    // `calculateQuantiles`.\n    let i = 0\n    while (i !== maxSize - 1) {\n      const item = values[i]\n      if (item != null) {\n        const [t, v] = item\n        const age = Duration.millis(now - t)\n        if (Duration.greaterThanOrEqualTo(age, Duration.zero) && Duration.lessThanOrEqualTo(age, maxAge)) {\n          builder.push(v)\n        }\n      }\n      i = i + 1\n    }\n    return calculateQuantiles(\n      error,\n      sortedQuantiles,\n      Arr.sort(builder, number.Order)\n    )\n  }\n\n  const observe = (value: number, timestamp: number) => {\n    if (maxSize > 0) {\n      head = head + 1\n      const target = head % maxSize\n      values[target] = [timestamp, value] as const\n    }\n\n    min = count === 0 ? value : Math.min(min, value)\n    max = count === 0 ? value : Math.max(max, value)\n\n    count = count + 1\n    sum = sum + value\n  }\n\n  return make({\n    get: () =>\n      metricState.summary({\n        error,\n        quantiles: snapshot(Date.now()),\n        count,\n        min,\n        max,\n        sum\n      }),\n    update: ([value, timestamp]) => observe(value, timestamp),\n    modify: ([value, timestamp]) => observe(value, timestamp)\n  })\n}\n\n/** @internal */\ninterface ResolvedQuantile {\n  /**\n   * The quantile that shall be resolved.\n   */\n  readonly quantile: number\n  /**\n   * `Some<number>` if a value for the quantile could be found, otherwise\n   * `None`.\n   */\n  readonly value: Option.Option<number>\n  /**\n   * How many samples have been consumed prior to this quantile.\n   */\n  readonly consumed: number\n  /**\n   * The rest of the samples after the quantile has been resolved.\n   */\n  readonly rest: ReadonlyArray<number>\n}\n\n/** @internal */\nconst calculateQuantiles = (\n  error: number,\n  sortedQuantiles: ReadonlyArray<number>,\n  sortedSamples: ReadonlyArray<number>\n): ReadonlyArray<readonly [number, Option.Option<number>]> => {\n  // The number of samples examined\n  const sampleCount = sortedSamples.length\n  if (!Arr.isNonEmptyReadonlyArray(sortedQuantiles)) {\n    return Arr.empty()\n  }\n  const head = sortedQuantiles[0]\n  const tail = sortedQuantiles.slice(1)\n  const resolvedHead = resolveQuantile(\n    error,\n    sampleCount,\n    Option.none(),\n    0,\n    head,\n    sortedSamples\n  )\n  const resolved = Arr.of(resolvedHead)\n  tail.forEach((quantile) => {\n    resolved.push(\n      resolveQuantile(\n        error,\n        sampleCount,\n        resolvedHead.value,\n        resolvedHead.consumed,\n        quantile,\n        resolvedHead.rest\n      )\n    )\n  })\n  return Arr.map(resolved, (rq) => [rq.quantile, rq.value] as const)\n}\n\n/** @internal */\nconst resolveQuantile = (\n  error: number,\n  sampleCount: number,\n  current: Option.Option<number>,\n  consumed: number,\n  quantile: number,\n  rest: ReadonlyArray<number>\n): ResolvedQuantile => {\n  let error_1 = error\n  let sampleCount_1 = sampleCount\n  let current_1 = current\n  let consumed_1 = consumed\n  let quantile_1 = quantile\n  let rest_1 = rest\n  let error_2 = error\n  let sampleCount_2 = sampleCount\n  let current_2 = current\n  let consumed_2 = consumed\n  let quantile_2 = quantile\n  let rest_2 = rest\n  // eslint-disable-next-line no-constant-condition\n  while (1) {\n    // If the remaining list of samples is empty, there is nothing more to resolve\n    if (!Arr.isNonEmptyReadonlyArray(rest_1)) {\n      return {\n        quantile: quantile_1,\n        value: Option.none(),\n        consumed: consumed_1,\n        rest: []\n      }\n    }\n    // If the quantile is the 100% quantile, we can take the maximum of all the\n    // remaining values as the result\n    if (quantile_1 === 1) {\n      return {\n        quantile: quantile_1,\n        value: Option.some(Arr.lastNonEmpty(rest_1)),\n        consumed: consumed_1 + rest_1.length,\n        rest: []\n      }\n    }\n    // Split into two chunks - the first chunk contains all elements of the same\n    // value as the chunk head\n    const headValue = Arr.headNonEmpty(rest_1) // Get head value since rest_1 is non-empty\n    const sameHead = Arr.span(rest_1, (n) => n === headValue)\n    // How many elements do we want to accept for this quantile\n    const desired = quantile_1 * sampleCount_1\n    // The error margin\n    const allowedError = (error_1 / 2) * desired\n    // Taking into account the elements consumed from the samples so far and the\n    // number of same elements at the beginning of the chunk, calculate the number\n    // of elements we would have if we selected the current head as result\n    const candConsumed = consumed_1 + sameHead[0].length\n    const candError = Math.abs(candConsumed - desired)\n    // If we haven't got enough elements yet, recurse\n    if (candConsumed < desired - allowedError) {\n      error_2 = error_1\n      sampleCount_2 = sampleCount_1\n      current_2 = Arr.head(rest_1)\n      consumed_2 = candConsumed\n      quantile_2 = quantile_1\n      rest_2 = sameHead[1]\n      error_1 = error_2\n      sampleCount_1 = sampleCount_2\n      current_1 = current_2\n      consumed_1 = consumed_2\n      quantile_1 = quantile_2\n      rest_1 = rest_2\n      continue\n    }\n    // If consuming this chunk leads to too many elements (rank is too high)\n    if (candConsumed > desired + allowedError) {\n      const valueToReturn = Option.isNone(current_1)\n        ? Option.some(headValue)\n        : current_1\n      return {\n        quantile: quantile_1,\n        value: valueToReturn,\n        consumed: consumed_1,\n        rest: rest_1\n      }\n    }\n    // If we are in the target interval, select the current head and hand back the leftover after dropping all elements\n    // from the sample chunk that are equal to the current head\n    switch (current_1._tag) {\n      case \"None\": {\n        error_2 = error_1\n        sampleCount_2 = sampleCount_1\n        current_2 = Arr.head(rest_1)\n        consumed_2 = candConsumed\n        quantile_2 = quantile_1\n        rest_2 = sameHead[1]\n        error_1 = error_2\n        sampleCount_1 = sampleCount_2\n        current_1 = current_2\n        consumed_1 = consumed_2\n        quantile_1 = quantile_2\n        rest_1 = rest_2\n        continue\n      }\n      case \"Some\": {\n        const prevError = Math.abs(desired - current_1.value)\n        if (candError < prevError) {\n          error_2 = error_1\n          sampleCount_2 = sampleCount_1\n          current_2 = Arr.head(rest_1)\n          consumed_2 = candConsumed\n          quantile_2 = quantile_1\n          rest_2 = sameHead[1]\n          error_1 = error_2\n          sampleCount_1 = sampleCount_2\n          current_1 = current_2\n          consumed_1 = consumed_2\n          quantile_1 = quantile_2\n          rest_1 = rest_2\n          continue\n        }\n        return {\n          quantile: quantile_1,\n          value: Option.some(current_1.value),\n          consumed: consumed_1,\n          rest: rest_1\n        }\n      }\n    }\n  }\n  throw new Error(\n    \"BUG: MetricHook.resolveQuantiles - please report an issue at https://github.com/Effect-TS/effect/issues\"\n  )\n}\n", "import * as Arr from \"../../Array.js\"\nimport * as Equal from \"../../Equal.js\"\nimport { pipe } from \"../../Function.js\"\nimport * as Hash from \"../../Hash.js\"\nimport type * as MetricState from \"../../MetricState.js\"\nimport type * as Option from \"../../Option.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\nimport { hasProperty } from \"../../Predicate.js\"\n\n/** @internal */\nconst MetricStateSymbolKey = \"effect/MetricState\"\n\n/** @internal */\nexport const MetricStateTypeId: MetricState.MetricStateTypeId = Symbol.for(\n  MetricStateSymbolKey\n) as MetricState.MetricStateTypeId\n\n/** @internal */\nconst CounterStateSymbolKey = \"effect/MetricState/Counter\"\n\n/** @internal */\nexport const CounterStateTypeId: MetricState.CounterStateTypeId = Symbol.for(\n  CounterStateSymbolKey\n) as MetricState.CounterStateTypeId\n\n/** @internal */\nconst FrequencyStateSymbolKey = \"effect/MetricState/Frequency\"\n\n/** @internal */\nexport const FrequencyStateTypeId: MetricState.FrequencyStateTypeId = Symbol.for(\n  FrequencyStateSymbolKey\n) as MetricState.FrequencyStateTypeId\n\n/** @internal */\nconst GaugeStateSymbolKey = \"effect/MetricState/Gauge\"\n\n/** @internal */\nexport const GaugeStateTypeId: MetricState.GaugeStateTypeId = Symbol.for(\n  GaugeStateSymbolKey\n) as MetricState.GaugeStateTypeId\n\n/** @internal */\nconst HistogramStateSymbolKey = \"effect/MetricState/Histogram\"\n\n/** @internal */\nexport const HistogramStateTypeId: MetricState.HistogramStateTypeId = Symbol.for(\n  HistogramStateSymbolKey\n) as MetricState.HistogramStateTypeId\n\n/** @internal */\nconst SummaryStateSymbolKey = \"effect/MetricState/Summary\"\n\n/** @internal */\nexport const SummaryStateTypeId: MetricState.SummaryStateTypeId = Symbol.for(\n  SummaryStateSymbolKey\n) as MetricState.SummaryStateTypeId\n\nconst metricStateVariance = {\n  /* c8 ignore next */\n  _A: (_: unknown) => _\n}\n\n/** @internal */\nclass CounterState<A extends (number | bigint)> implements MetricState.MetricState.Counter<A> {\n  readonly [MetricStateTypeId] = metricStateVariance\n  readonly [CounterStateTypeId]: MetricState.CounterStateTypeId = CounterStateTypeId\n  constructor(readonly count: A) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(CounterStateSymbolKey),\n      Hash.combine(Hash.hash(this.count)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isCounterState(that) && this.count === that.count\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst arrayEquals = Arr.getEquivalence(Equal.equals)\n\n/** @internal */\nclass FrequencyState implements MetricState.MetricState.Frequency {\n  readonly [MetricStateTypeId] = metricStateVariance\n  readonly [FrequencyStateTypeId]: MetricState.FrequencyStateTypeId = FrequencyStateTypeId\n  constructor(readonly occurrences: ReadonlyMap<string, number>) {}\n  _hash: number | undefined;\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.string(FrequencyStateSymbolKey),\n      Hash.combine(Hash.array(Arr.fromIterable(this.occurrences.entries()))),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isFrequencyState(that) && arrayEquals(\n      Arr.fromIterable(this.occurrences.entries()),\n      Arr.fromIterable(that.occurrences.entries())\n    )\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nclass GaugeState<A extends (number | bigint)> implements MetricState.MetricState.Gauge<A> {\n  readonly [MetricStateTypeId] = metricStateVariance\n  readonly [GaugeStateTypeId]: MetricState.GaugeStateTypeId = GaugeStateTypeId\n  constructor(readonly value: A) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(GaugeStateSymbolKey),\n      Hash.combine(Hash.hash(this.value)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](u: unknown): boolean {\n    return isGaugeState(u) && this.value === u.value\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport class HistogramState implements MetricState.MetricState.Histogram {\n  readonly [MetricStateTypeId] = metricStateVariance\n  readonly [HistogramStateTypeId]: MetricState.HistogramStateTypeId = HistogramStateTypeId\n  constructor(\n    readonly buckets: ReadonlyArray<readonly [number, number]>,\n    readonly count: number,\n    readonly min: number,\n    readonly max: number,\n    readonly sum: number\n  ) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(HistogramStateSymbolKey),\n      Hash.combine(Hash.hash(this.buckets)),\n      Hash.combine(Hash.hash(this.count)),\n      Hash.combine(Hash.hash(this.min)),\n      Hash.combine(Hash.hash(this.max)),\n      Hash.combine(Hash.hash(this.sum)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isHistogramState(that) &&\n      Equal.equals(this.buckets, that.buckets) &&\n      this.count === that.count &&\n      this.min === that.min &&\n      this.max === that.max &&\n      this.sum === that.sum\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport class SummaryState implements MetricState.MetricState.Summary {\n  readonly [MetricStateTypeId] = metricStateVariance\n  readonly [SummaryStateTypeId]: MetricState.SummaryStateTypeId = SummaryStateTypeId\n  constructor(\n    readonly error: number,\n    readonly quantiles: ReadonlyArray<readonly [number, Option.Option<number>]>,\n    readonly count: number,\n    readonly min: number,\n    readonly max: number,\n    readonly sum: number\n  ) {}\n  [Hash.symbol](): number {\n    return pipe(\n      Hash.hash(SummaryStateSymbolKey),\n      Hash.combine(Hash.hash(this.error)),\n      Hash.combine(Hash.hash(this.quantiles)),\n      Hash.combine(Hash.hash(this.count)),\n      Hash.combine(Hash.hash(this.min)),\n      Hash.combine(Hash.hash(this.max)),\n      Hash.combine(Hash.hash(this.sum)),\n      Hash.cached(this)\n    )\n  }\n  [Equal.symbol](that: unknown): boolean {\n    return isSummaryState(that) &&\n      this.error === that.error &&\n      Equal.equals(this.quantiles, that.quantiles) &&\n      this.count === that.count &&\n      this.min === that.min &&\n      this.max === that.max &&\n      this.sum === that.sum\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const counter: {\n  (count: number): MetricState.MetricState.Counter<number>\n  (count: bigint): MetricState.MetricState.Counter<bigint>\n} = (count) => new CounterState(count) as any\n\n/** @internal */\nexport const frequency = (occurrences: ReadonlyMap<string, number>): MetricState.MetricState.Frequency => {\n  return new FrequencyState(occurrences)\n}\n\n/** @internal */\nexport const gauge: {\n  (count: number): MetricState.MetricState.Gauge<number>\n  (count: bigint): MetricState.MetricState.Gauge<bigint>\n} = (count) => new GaugeState(count) as any\n\n/** @internal */\nexport const histogram = (\n  options: {\n    readonly buckets: ReadonlyArray<readonly [number, number]>\n    readonly count: number\n    readonly min: number\n    readonly max: number\n    readonly sum: number\n  }\n): MetricState.MetricState.Histogram =>\n  new HistogramState(\n    options.buckets,\n    options.count,\n    options.min,\n    options.max,\n    options.sum\n  )\n\n/** @internal */\nexport const summary = (\n  options: {\n    readonly error: number\n    readonly quantiles: ReadonlyArray<readonly [number, Option.Option<number>]>\n    readonly count: number\n    readonly min: number\n    readonly max: number\n    readonly sum: number\n  }\n): MetricState.MetricState.Summary =>\n  new SummaryState(\n    options.error,\n    options.quantiles,\n    options.count,\n    options.min,\n    options.max,\n    options.sum\n  )\n\n/** @internal */\nexport const isMetricState = (u: unknown): u is MetricState.MetricState.Counter<number | bigint> =>\n  hasProperty(u, MetricStateTypeId)\n\n/** @internal */\nexport const isCounterState = (u: unknown): u is MetricState.MetricState.Counter<number | bigint> =>\n  hasProperty(u, CounterStateTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isFrequencyState = (u: unknown): u is MetricState.MetricState.Frequency =>\n  hasProperty(u, FrequencyStateTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isGaugeState = (u: unknown): u is MetricState.MetricState.Gauge<number | bigint> =>\n  hasProperty(u, GaugeStateTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isHistogramState = (u: unknown): u is MetricState.MetricState.Histogram =>\n  hasProperty(u, HistogramStateTypeId)\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isSummaryState = (u: unknown): u is MetricState.MetricState.Summary => hasProperty(u, SummaryStateTypeId)\n", "import type * as MetricKey from \"../../MetricKey.js\"\nimport type * as MetricKeyType from \"../../MetricKeyType.js\"\nimport type * as MetricPair from \"../../MetricPair.js\"\nimport type * as MetricState from \"../../MetricState.js\"\nimport { pipeArguments } from \"../../Pipeable.js\"\n\n/** @internal */\nconst MetricPairSymbolKey = \"effect/MetricPair\"\n\n/** @internal */\nexport const MetricPairTypeId: MetricPair.MetricPairTypeId = Symbol.for(\n  MetricPairSymbolKey\n) as MetricPair.MetricPairTypeId\n\nconst metricPairVariance = {\n  /* c8 ignore next */\n  _Type: (_: never) => _\n}\n\n/** @internal */\nexport const make = <Type extends MetricKeyType.MetricKeyType<any, any>>(\n  metricKey: MetricKey.MetricKey<Type>,\n  metricState: MetricState.MetricState<MetricKeyType.MetricKeyType.OutType<Type>>\n): MetricPair.MetricPair.Untyped => {\n  return {\n    [MetricPairTypeId]: metricPairVariance,\n    metricKey,\n    metricState,\n    pipe() {\n      return pipeArguments(this, arguments)\n    }\n  }\n}\n\n/** @internal */\nexport const unsafeMake = <Type extends MetricKeyType.MetricKeyType<any, any>>(\n  metricKey: MetricKey.MetricKey<Type>,\n  metricState: MetricState.MetricState.Untyped\n): MetricPair.MetricPair.Untyped => {\n  return {\n    [MetricPairTypeId]: metricPairVariance,\n    metricKey,\n    metricState,\n    pipe() {\n      return pipeArguments(this, arguments)\n    }\n  }\n}\n", "import type * as Cause from \"../Cause.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { dual } from \"../Function.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as Request from \"../Request.js\"\nimport type * as Types from \"../Types.js\"\nimport * as completedRequestMap from \"./completedRequestMap.js\"\nimport * as core from \"./core.js\"\nimport { StructuralPrototype } from \"./effectable.js\"\n\n/** @internal */\nconst RequestSymbolKey = \"effect/Request\"\n\n/** @internal */\nexport const RequestTypeId: Request.RequestTypeId = Symbol.for(\n  RequestSymbolKey\n) as Request.RequestTypeId\n\nconst requestVariance = {\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _\n}\n\nconst RequestPrototype = {\n  ...StructuralPrototype,\n  [RequestTypeId]: requestVariance\n}\n\n/** @internal */\nexport const isRequest = (u: unknown): u is Request.Request<unknown, unknown> => hasProperty(u, RequestTypeId)\n\n/** @internal */\nexport const of = <R extends Request.Request<any, any>>(): Request.Request.Constructor<R> => (args) =>\n  Object.assign(Object.create(RequestPrototype), args)\n\n/** @internal */\nexport const tagged = <R extends Request.Request<any, any> & { _tag: string }>(\n  tag: R[\"_tag\"]\n): Request.Request.Constructor<R, \"_tag\"> =>\n(args) => {\n  const request = Object.assign(Object.create(RequestPrototype), args)\n  request._tag = tag\n  return request\n}\n\n/** @internal */\nexport const Class: new<Success, Error, A extends Record<string, any>>(\n  args: Types.Equals<Omit<A, keyof Request.Request<unknown, unknown>>, {}> extends true ? void\n    : { readonly [P in keyof A as P extends keyof Request.Request<unknown, unknown> ? never : P]: A[P] }\n) => Request.Request<Success, Error> & Readonly<A> = (function() {\n  function Class(this: any, args: any) {\n    if (args) {\n      Object.assign(this, args)\n    }\n  }\n  Class.prototype = RequestPrototype\n  return Class as any\n})()\n\n/** @internal */\nexport const TaggedClass = <Tag extends string>(\n  tag: Tag\n): new<Success, Error, A extends Record<string, any>>(\n  args: Types.Equals<Omit<A, keyof Request.Request<unknown, unknown>>, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" | keyof Request.Request<unknown, unknown> ? never : P]: A[P] }\n) => Request.Request<Success, Error> & Readonly<A> & { readonly _tag: Tag } => {\n  return class TaggedClass extends Class<any, any, any> {\n    readonly _tag = tag\n  } as any\n}\n\n/** @internal */\nexport const complete = dual<\n  <A extends Request.Request<any, any>>(\n    result: Request.Request.Result<A>\n  ) => (self: A) => Effect.Effect<void>,\n  <A extends Request.Request<any, any>>(\n    self: A,\n    result: Request.Request.Result<A>\n  ) => Effect.Effect<void>\n>(2, (self, result) =>\n  core.fiberRefGetWith(\n    completedRequestMap.currentRequestMap,\n    (map) =>\n      core.sync(() => {\n        if (map.has(self)) {\n          const entry = map.get(self)!\n          if (!entry.state.completed) {\n            entry.state.completed = true\n            core.deferredUnsafeDone(entry.result, result)\n          }\n        }\n      })\n  ))\n\n/** @internal */\nexport const completeEffect = dual<\n  <A extends Request.Request<any, any>, R>(\n    effect: Effect.Effect<Request.Request.Success<A>, Request.Request.Error<A>, R>\n  ) => (self: A) => Effect.Effect<void, never, R>,\n  <A extends Request.Request<any, any>, R>(\n    self: A,\n    effect: Effect.Effect<Request.Request.Success<A>, Request.Request.Error<A>, R>\n  ) => Effect.Effect<void, never, R>\n>(2, (self, effect) =>\n  core.matchEffect(effect, {\n    onFailure: (error) => complete(self, core.exitFail(error) as any),\n    onSuccess: (value) => complete(self, core.exitSucceed(value) as any)\n  }))\n\n/** @internal */\nexport const fail = dual<\n  <A extends Request.Request<any, any>>(\n    error: Request.Request.Error<A>\n  ) => (self: A) => Effect.Effect<void>,\n  <A extends Request.Request<any, any>>(\n    self: A,\n    error: Request.Request.Error<A>\n  ) => Effect.Effect<void>\n>(2, (self, error) => complete(self, core.exitFail(error) as any))\n\n/** @internal */\nexport const failCause = dual<\n  <A extends Request.Request<any, any>>(\n    cause: Cause.Cause<Request.Request.Error<A>>\n  ) => (self: A) => Effect.Effect<void>,\n  <A extends Request.Request<any, any>>(\n    self: A,\n    cause: Cause.Cause<Request.Request.Error<A>>\n  ) => Effect.Effect<void>\n>(2, (self, cause) => complete(self, core.exitFailCause(cause) as any))\n\n/** @internal */\nexport const succeed = dual<\n  <A extends Request.Request<any, any>>(\n    value: Request.Request.Success<A>\n  ) => (self: A) => Effect.Effect<void>,\n  <A extends Request.Request<any, any>>(\n    self: A,\n    value: Request.Request.Success<A>\n  ) => Effect.Effect<void>\n>(2, (self, value) => complete(self, core.exitSucceed(value) as any))\n\n/** @internal */\nexport class Listeners {\n  count = 0\n  observers: Set<(count: number) => void> = new Set()\n  interrupted = false\n  addObserver(f: (count: number) => void): void {\n    this.observers.add(f)\n  }\n  removeObserver(f: (count: number) => void): void {\n    this.observers.delete(f)\n  }\n  increment() {\n    this.count++\n    this.observers.forEach((f) => f(this.count))\n  }\n  decrement() {\n    this.count--\n    this.observers.forEach((f) => f(this.count))\n  }\n}\n\n/**\n * @internal\n */\nexport const filterOutCompleted = <A extends Request.Request<any, any>>(requests: Array<A>) =>\n  core.fiberRefGetWith(\n    completedRequestMap.currentRequestMap,\n    (map) =>\n      core.succeed(\n        requests.filter((request) => !(map.get(request)?.state.completed === true))\n      )\n  )\n", "import type * as Context from \"../Context.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type * as Exit from \"../Exit.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport { pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as MutableRef from \"../MutableRef.js\"\nimport type * as Option from \"../Option.js\"\nimport { hasProperty, isTagged } from \"../Predicate.js\"\nimport * as SortedSet from \"../SortedSet.js\"\nimport type * as Supervisor from \"../Supervisor.js\"\nimport * as core from \"./core.js\"\n\n/** @internal */\nconst SupervisorSymbolKey = \"effect/Supervisor\"\n\n/** @internal */\nexport const SupervisorTypeId: Supervisor.SupervisorTypeId = Symbol.for(\n  SupervisorSymbolKey\n) as Supervisor.SupervisorTypeId\n\n/** @internal */\nexport const supervisorVariance = {\n  /* c8 ignore next */\n  _T: (_: never) => _\n}\n\n/** @internal */\nexport class ProxySupervisor<out T> implements Supervisor.Supervisor<T> {\n  readonly [SupervisorTypeId] = supervisorVariance\n\n  constructor(\n    readonly underlying: Supervisor.Supervisor<any>,\n    readonly value0: Effect.Effect<T>\n  ) {\n  }\n\n  get value(): Effect.Effect<T> {\n    return this.value0\n  }\n\n  onStart<A, E, R>(\n    context: Context.Context<R>,\n    effect: Effect.Effect<A, E, R>,\n    parent: Option.Option<Fiber.RuntimeFiber<any, any>>,\n    fiber: Fiber.RuntimeFiber<A, E>\n  ): void {\n    this.underlying.onStart(context, effect, parent, fiber)\n  }\n\n  onEnd<A, E>(value: Exit.Exit<A, E>, fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.underlying.onEnd(value, fiber)\n  }\n\n  onEffect<A, E>(fiber: Fiber.RuntimeFiber<A, E>, effect: Effect.Effect<any, any, any>): void {\n    this.underlying.onEffect(fiber, effect)\n  }\n\n  onSuspend<A, E>(fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.underlying.onSuspend(fiber)\n  }\n\n  onResume<A, E>(fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.underlying.onResume(fiber)\n  }\n\n  map<B>(f: (a: T) => B): Supervisor.Supervisor<B> {\n    return new ProxySupervisor(this, pipe(this.value, core.map(f)))\n  }\n\n  zip<B>(right: Supervisor.Supervisor<B>): Supervisor.Supervisor<[T, B]> {\n    return new Zip(this, right)\n  }\n}\n\n/** @internal */\nexport class Zip<out T0, out T1> implements Supervisor.Supervisor<readonly [T0, T1]> {\n  readonly _tag = \"Zip\"\n  readonly [SupervisorTypeId] = supervisorVariance\n\n  constructor(\n    readonly left: Supervisor.Supervisor<T0>,\n    readonly right: Supervisor.Supervisor<T1>\n  ) {\n  }\n\n  get value(): Effect.Effect<[T0, T1]> {\n    return core.zip(this.left.value, this.right.value)\n  }\n\n  onStart<A, E, R>(\n    context: Context.Context<R>,\n    effect: Effect.Effect<A, E, R>,\n    parent: Option.Option<Fiber.RuntimeFiber<any, any>>,\n    fiber: Fiber.RuntimeFiber<A, E>\n  ): void {\n    this.left.onStart(context, effect, parent, fiber)\n    this.right.onStart(context, effect, parent, fiber)\n  }\n\n  onEnd<A, E>(value: Exit.Exit<A, E>, fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.left.onEnd(value, fiber)\n    this.right.onEnd(value, fiber)\n  }\n\n  onEffect<A, E>(fiber: Fiber.RuntimeFiber<A, E>, effect: Effect.Effect<any, any, any>): void {\n    this.left.onEffect(fiber, effect)\n    this.right.onEffect(fiber, effect)\n  }\n\n  onSuspend<A, E>(fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.left.onSuspend(fiber)\n    this.right.onSuspend(fiber)\n  }\n\n  onResume<A, E>(fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.left.onResume(fiber)\n    this.right.onResume(fiber)\n  }\n\n  map<B>(f: (a: [T0, T1]) => B): Supervisor.Supervisor<B> {\n    return new ProxySupervisor(this, pipe(this.value, core.map(f)))\n  }\n\n  zip<A>(right: Supervisor.Supervisor<A>): Supervisor.Supervisor<[[T0, T1], A]> {\n    return new Zip(this, right)\n  }\n}\n\n/** @internal */\nexport const isZip = (self: unknown): self is Zip<any, any> =>\n  hasProperty(self, SupervisorTypeId) && isTagged(self, \"Zip\")\n\n/** @internal */\nexport class Track implements Supervisor.Supervisor<Array<Fiber.RuntimeFiber<any, any>>> {\n  readonly [SupervisorTypeId] = supervisorVariance\n\n  readonly fibers: Set<Fiber.RuntimeFiber<any, any>> = new Set()\n\n  get value(): Effect.Effect<Array<Fiber.RuntimeFiber<any, any>>> {\n    return core.sync(() => Array.from(this.fibers))\n  }\n\n  onStart<A, E, R>(\n    _context: Context.Context<R>,\n    _effect: Effect.Effect<A, E, R>,\n    _parent: Option.Option<Fiber.RuntimeFiber<any, any>>,\n    fiber: Fiber.RuntimeFiber<A, E>\n  ): void {\n    this.fibers.add(fiber)\n  }\n\n  onEnd<A, E>(_value: Exit.Exit<A, E>, fiber: Fiber.RuntimeFiber<A, E>): void {\n    this.fibers.delete(fiber)\n  }\n\n  onEffect<A, E>(_fiber: Fiber.RuntimeFiber<A, E>, _effect: Effect.Effect<any, any, any>): void {\n    //\n  }\n\n  onSuspend<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  onResume<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  map<B>(f: (a: Array<Fiber.RuntimeFiber<any, any>>) => B): Supervisor.Supervisor<B> {\n    return new ProxySupervisor(this, pipe(this.value, core.map(f)))\n  }\n\n  zip<A>(\n    right: Supervisor.Supervisor<A>\n  ): Supervisor.Supervisor<[Array<Fiber.RuntimeFiber<any, any>>, A]> {\n    return new Zip(this, right)\n  }\n\n  onRun<E, A, X>(execution: () => X, _fiber: Fiber.RuntimeFiber<A, E>): X {\n    return execution()\n  }\n}\n\n/** @internal */\nexport class Const<out T> implements Supervisor.Supervisor<T> {\n  readonly [SupervisorTypeId] = supervisorVariance\n\n  constructor(readonly effect: Effect.Effect<T>) {\n  }\n\n  get value(): Effect.Effect<T> {\n    return this.effect\n  }\n\n  onStart<A, E, R>(\n    _context: Context.Context<R>,\n    _effect: Effect.Effect<A, E, R>,\n    _parent: Option.Option<Fiber.RuntimeFiber<any, any>>,\n    _fiber: Fiber.RuntimeFiber<A, E>\n  ): void {\n    //\n  }\n\n  onEnd<A, E>(_value: Exit.Exit<A, E>, _fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  onEffect<A, E>(_fiber: Fiber.RuntimeFiber<A, E>, _effect: Effect.Effect<any, any, any>): void {\n    //\n  }\n\n  onSuspend<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  onResume<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  map<B>(f: (a: T) => B): Supervisor.Supervisor<B> {\n    return new ProxySupervisor(this, pipe(this.value, core.map(f)))\n  }\n\n  zip<A>(right: Supervisor.Supervisor<A>): Supervisor.Supervisor<[T, A]> {\n    return new Zip(this, right)\n  }\n\n  onRun<E, A, X>(execution: () => X, _fiber: Fiber.RuntimeFiber<A, E>): X {\n    return execution()\n  }\n}\n\nclass FibersIn implements Supervisor.Supervisor<SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>> {\n  readonly [SupervisorTypeId] = supervisorVariance\n\n  constructor(readonly ref: MutableRef.MutableRef<SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>>) {\n  }\n\n  get value(): Effect.Effect<SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>> {\n    return core.sync(() => MutableRef.get(this.ref))\n  }\n\n  onStart<A, E, R>(\n    _context: Context.Context<R>,\n    _effect: Effect.Effect<A, E, R>,\n    _parent: Option.Option<Fiber.RuntimeFiber<any, any>>,\n    fiber: Fiber.RuntimeFiber<A, E>\n  ): void {\n    pipe(this.ref, MutableRef.set(pipe(MutableRef.get(this.ref), SortedSet.add(fiber))))\n  }\n\n  onEnd<A, E>(_value: Exit.Exit<A, E>, fiber: Fiber.RuntimeFiber<A, E>): void {\n    pipe(this.ref, MutableRef.set(pipe(MutableRef.get(this.ref), SortedSet.remove(fiber))))\n  }\n\n  onEffect<A, E>(_fiber: Fiber.RuntimeFiber<A, E>, _effect: Effect.Effect<any, any, any>): void {\n    //\n  }\n\n  onSuspend<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  onResume<A, E>(_fiber: Fiber.RuntimeFiber<A, E>): void {\n    //\n  }\n\n  map<B>(f: (a: SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>) => B): Supervisor.Supervisor<B> {\n    return new ProxySupervisor(this, pipe(this.value, core.map(f)))\n  }\n\n  zip<A>(\n    right: Supervisor.Supervisor<A>\n  ): Supervisor.Supervisor<[SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>, A]> {\n    return new Zip(this, right)\n  }\n\n  onRun<E, A, X>(execution: () => X, _fiber: Fiber.RuntimeFiber<A, E>): X {\n    return execution()\n  }\n}\n\n/** @internal */\nexport const unsafeTrack = (): Supervisor.Supervisor<Array<Fiber.RuntimeFiber<any, any>>> => {\n  return new Track()\n}\n\n/** @internal */\nexport const track: Effect.Effect<Supervisor.Supervisor<Array<Fiber.RuntimeFiber<any, any>>>> = core.sync(unsafeTrack)\n\n/** @internal */\nexport const fromEffect = <A>(effect: Effect.Effect<A>): Supervisor.Supervisor<A> => {\n  return new Const(effect)\n}\n\n/** @internal */\nexport const none = globalValue(\"effect/Supervisor/none\", () => fromEffect(core.void))\n\n/** @internal */\nexport const fibersIn = (\n  ref: MutableRef.MutableRef<SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>>\n): Effect.Effect<Supervisor.Supervisor<SortedSet.SortedSet<Fiber.RuntimeFiber<any, any>>>> =>\n  core.sync(() => new FibersIn(ref))\n", "/**\n * @since 2.0.0\n */\nimport * as Equal from \"./Equal.js\"\nimport type * as Equivalence from \"./Equivalence.js\"\nimport * as Dual from \"./Function.js\"\nimport { pipe } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { Order } from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport type { Predicate } from \"./Predicate.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport * as RBT from \"./RedBlackTree.js\"\nimport type { Invariant, NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/SortedSet\")\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface SortedSet<in out A> extends Iterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _A: Invariant<A>\n  }\n  /** @internal */\n  readonly keyTree: RBT.RedBlackTree<A, boolean>\n}\n\nconst SortedSetProto: Omit<SortedSet<unknown>, \"keyTree\"> = {\n  [TypeId]: {\n    _A: (_: any) => _\n  },\n  [Hash.symbol]<A>(this: SortedSet<A>): number {\n    return pipe(\n      Hash.hash(this.keyTree),\n      Hash.combine(Hash.hash(TypeId)),\n      Hash.cached(this)\n    )\n  },\n  [Equal.symbol]<A>(this: SortedSet<A>, that: unknown): boolean {\n    return isSortedSet(that) && Equal.equals(this.keyTree, that.keyTree)\n  },\n  [Symbol.iterator]<A>(this: SortedSet<A>): Iterator<A> {\n    return RBT.keys(this.keyTree)\n  },\n  toString<A>(this: SortedSet<A>) {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"SortedSet\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst fromTree = <A>(keyTree: RBT.RedBlackTree<A, boolean>): SortedSet<A> => {\n  const a = Object.create(SortedSetProto)\n  a.keyTree = keyTree\n  return a\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isSortedSet: {\n  /**\n   * @since 2.0.0\n   * @category refinements\n   */\n  <A>(u: Iterable<A>): u is SortedSet<A>\n  /**\n   * @since 2.0.0\n   * @category refinements\n   */\n  (u: unknown): u is SortedSet<unknown>\n} = (u: unknown): u is SortedSet<unknown> => hasProperty(u, TypeId)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = <A>(O: Order<A>): SortedSet<A> => fromTree(RBT.empty(O))\n\n/**\n * Creates a new `SortedSet` from an iterable collection of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: {\n  /**\n   * Creates a new `SortedSet` from an iterable collection of values.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <B>(ord: Order<B>): <A extends B>(iterable: Iterable<A>) => SortedSet<A>\n  /**\n   * Creates a new `SortedSet` from an iterable collection of values.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <A extends B, B>(iterable: Iterable<A>, ord: Order<B>): SortedSet<A>\n} = Dual.dual(\n  2,\n  <A extends B, B>(iterable: Iterable<A>, ord: Order<B>): SortedSet<A> =>\n    fromTree(RBT.fromIterable(Array.from(iterable).map((k) => [k, true]), ord))\n)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make =\n  <K>(ord: Order<K>) => <Entries extends ReadonlyArray<K>>(...entries: Entries): SortedSet<Entries[number]> =>\n    fromIterable(entries, ord)\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const add: {\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(value: A): (self: SortedSet<A>) => SortedSet<A>\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: SortedSet<A>, value: A): SortedSet<A>\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, value: A) => SortedSet<A>\n>(2, (self, value) =>\n  RBT.has(self.keyTree, value)\n    ? self\n    : fromTree(RBT.insert(self.keyTree, value, true)))\n\n/**\n * @since 2.0.0\n */\nexport const difference: {\n  /**\n   * @since 2.0.0\n   */\n  <A, B extends A>(that: Iterable<B>): (self: SortedSet<A>) => SortedSet<A>\n  /**\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: SortedSet<A>, that: Iterable<B>): SortedSet<A>\n} = Dual.dual<\n  <A, B extends A>(that: Iterable<B>) => (self: SortedSet<A>) => SortedSet<A>,\n  <A, B extends A>(self: SortedSet<A>, that: Iterable<B>) => SortedSet<A>\n>(2, <A, B extends A>(self: SortedSet<A>, that: Iterable<B>) => {\n  let out = self\n  for (const value of that) {\n    out = remove<A | B>(out, value)\n  }\n  return out\n})\n\n/**\n * Check if a predicate holds true for every `SortedSet` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const every: {\n  /**\n   * Check if a predicate holds true for every `SortedSet` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(predicate: Predicate<A>): (self: SortedSet<A>) => boolean\n  /**\n   * Check if a predicate holds true for every `SortedSet` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: SortedSet<A>, predicate: Predicate<A>): boolean\n} = Dual.dual(2, <A>(self: SortedSet<A>, predicate: Predicate<A>): boolean => {\n  for (const value of self) {\n    if (!predicate(value)) {\n      return false\n    }\n  }\n  return true\n})\n\n/**\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  /**\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B extends A>(predicate: Predicate<B>): (self: SortedSet<A>) => SortedSet<A>\n  /**\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A>(self: SortedSet<A>, predicate: Predicate<A>): SortedSet<A>\n} = Dual.dual(2, <A>(self: SortedSet<A>, predicate: Predicate<A>): SortedSet<A> => {\n  const ord = RBT.getOrder(self.keyTree)\n  let out = empty<A>(ord)\n  for (const value of self) {\n    if (predicate(value)) {\n      out = add(out, value)\n    }\n  }\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <B, A>(O: Order<B>, f: (a: A) => Iterable<B>): (self: SortedSet<A>) => SortedSet<B>\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, B>(self: SortedSet<A>, O: Order<B>, f: (a: A) => Iterable<B>): SortedSet<B>\n} = Dual.dual<\n  <B, A>(O: Order<B>, f: (a: A) => Iterable<B>) => (self: SortedSet<A>) => SortedSet<B>,\n  <A, B>(self: SortedSet<A>, O: Order<B>, f: (a: A) => Iterable<B>) => SortedSet<B>\n>(3, (self, O, f) => {\n  let out = empty(O)\n  forEach(self, (a) => {\n    for (const b of f(a)) {\n      out = add(out, b)\n    }\n  })\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  /**\n   * @since 2.0.0\n   * @category traversing\n   */\n  <A>(f: (a: A) => void): (self: SortedSet<A>) => void\n  /**\n   * @since 2.0.0\n   * @category traversing\n   */\n  <A>(self: SortedSet<A>, f: (a: A) => void): void\n} = Dual.dual<\n  <A>(f: (a: A) => void) => (self: SortedSet<A>) => void,\n  <A>(self: SortedSet<A>, f: (a: A) => void) => void\n>(2, (self, f) => RBT.forEach(self.keyTree, f))\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(value: A): (self: SortedSet<A>) => boolean\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: SortedSet<A>, value: A): boolean\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => boolean,\n  <A>(self: SortedSet<A>, value: A) => boolean\n>(2, (self, value) => RBT.has(self.keyTree, value))\n\n/**\n * @since 2.0.0\n */\nexport const intersection: {\n  /**\n   * @since 2.0.0\n   */\n  <A>(that: Iterable<A>): (self: SortedSet<A>) => SortedSet<A>\n  /**\n   * @since 2.0.0\n   */\n  <A>(self: SortedSet<A>, that: Iterable<A>): SortedSet<A>\n} = Dual.dual<\n  <A>(that: Iterable<A>) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, that: Iterable<A>) => SortedSet<A>\n>(2, (self, that) => {\n  const ord = RBT.getOrder(self.keyTree)\n  let out = empty(ord)\n  for (const value of that) {\n    if (has(self, value)) {\n      out = add(out, value)\n    }\n  }\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const isSubset: {\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(that: SortedSet<A>): (self: SortedSet<A>) => boolean\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: SortedSet<A>, that: SortedSet<A>): boolean\n} = Dual.dual<\n  <A>(that: SortedSet<A>) => (self: SortedSet<A>) => boolean,\n  <A>(self: SortedSet<A>, that: SortedSet<A>) => boolean\n>(2, (self, that) => every(self, (a) => has(that, a)))\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <B, A>(O: Order<B>, f: (a: A) => B): (self: SortedSet<A>) => SortedSet<B>\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <B, A>(self: SortedSet<A>, O: Order<B>, f: (a: A) => B): SortedSet<B>\n} = Dual.dual<\n  <B, A>(O: Order<B>, f: (a: A) => B) => (self: SortedSet<A>) => SortedSet<B>,\n  <B, A>(self: SortedSet<A>, O: Order<B>, f: (a: A) => B) => SortedSet<B>\n>(3, (self, O, f) => {\n  let out = empty(O)\n  forEach(self, (a) => {\n    const b = f(a)\n    if (!has(out, b)) {\n      out = add(out, b)\n    }\n  })\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category filtering\n */\nexport const partition: {\n  /**\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A>(predicate: (a: NoInfer<A>) => boolean): (self: SortedSet<A>) => [excluded: SortedSet<A>, satisfying: SortedSet<A>]\n  /**\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A>(self: SortedSet<A>, predicate: (a: A) => boolean): [excluded: SortedSet<A>, satisfying: SortedSet<A>]\n} = Dual.dual(\n  2,\n  <A>(self: SortedSet<A>, predicate: (a: A) => boolean): [excluded: SortedSet<A>, satisfying: SortedSet<A>] => {\n    const ord = RBT.getOrder(self.keyTree)\n    let right = empty(ord)\n    let left = empty(ord)\n    for (const value of self) {\n      if (predicate(value)) {\n        right = add(right, value)\n      } else {\n        left = add(left, value)\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const remove: {\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(value: A): (self: SortedSet<A>) => SortedSet<A>\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: SortedSet<A>, value: A): SortedSet<A>\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, value: A) => SortedSet<A>\n>(2, (self, value) => fromTree(RBT.removeFirst(self.keyTree, value)))\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const size = <A>(self: SortedSet<A>): number => RBT.size(self.keyTree)\n\n/**\n * Check if a predicate holds true for some `SortedSet` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const some: {\n  /**\n   * Check if a predicate holds true for some `SortedSet` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(predicate: Predicate<A>): (self: SortedSet<A>) => boolean\n  /**\n   * Check if a predicate holds true for some `SortedSet` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: SortedSet<A>, predicate: Predicate<A>): boolean\n} = Dual.dual<\n  <A>(predicate: Predicate<A>) => (self: SortedSet<A>) => boolean,\n  <A>(self: SortedSet<A>, predicate: Predicate<A>) => boolean\n>(2, (self, predicate) => {\n  for (const value of self) {\n    if (predicate(value)) {\n      return true\n    }\n  }\n  return false\n})\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const toggle: {\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(value: A): (self: SortedSet<A>) => SortedSet<A>\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: SortedSet<A>, value: A): SortedSet<A>\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, value: A) => SortedSet<A>\n>(2, (self, value) => has(self, value) ? remove(self, value) : add(self, value))\n\n/**\n * @since 2.0.0\n */\nexport const union: {\n  /**\n   * @since 2.0.0\n   */\n  <A>(that: Iterable<A>): (self: SortedSet<A>) => SortedSet<A>\n  /**\n   * @since 2.0.0\n   */\n  <A>(self: SortedSet<A>, that: Iterable<A>): SortedSet<A>\n} = Dual.dual<\n  <A>(that: Iterable<A>) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, that: Iterable<A>) => SortedSet<A>\n>(2, <A>(self: SortedSet<A>, that: Iterable<A>) => {\n  const ord = RBT.getOrder(self.keyTree)\n  let out = empty<A>(ord)\n  for (const value of self) {\n    out = add(value)(out)\n  }\n  for (const value of that) {\n    out = add(value)(out)\n  }\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const values = <A>(self: SortedSet<A>): IterableIterator<A> => RBT.keys(self.keyTree)\n\n/**\n * @since 2.0.0\n * @category equivalence\n */\nexport const getEquivalence = <A>(): Equivalence.Equivalence<SortedSet<A>> => (a, b) => isSubset(a, b) && isSubset(b, a)\n", "/**\n * @since 2.0.0\n */\nimport type { Chunk } from \"./Chunk.js\"\nimport type { Equal } from \"./Equal.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as RBT from \"./internal/redBlackTree.js\"\nimport * as RBTI from \"./internal/redBlackTree/iterator.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Order } from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Types from \"./Types.js\"\n\nconst TypeId: unique symbol = RBT.RedBlackTreeTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category constants\n */\nexport const Direction = RBTI.Direction\n\n/**\n * A Red-Black Tree.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface RedBlackTree<in out Key, out Value> extends Iterable<[Key, Value]>, Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _Key: Types.Invariant<Key>\n    readonly _Value: Types.Covariant<Value>\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace RedBlackTree {\n  /**\n   * @since 2.0.0\n   */\n  export type Direction = number & {\n    readonly Direction: unique symbol\n  }\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isRedBlackTree: {\n  /**\n   * @since 2.0.0\n   * @category refinements\n   */\n  <K, V>(u: Iterable<readonly [K, V]>): u is RedBlackTree<K, V>\n  /**\n   * @since 2.0.0\n   * @category refinements\n   */\n  (u: unknown): u is RedBlackTree<unknown, unknown>\n} = RBT.isRedBlackTree\n\n/**\n * Creates an empty `RedBlackTree`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: <K, V = never>(ord: Order<K>) => RedBlackTree<K, V> = RBT.empty\n\n/**\n * Creates a new `RedBlackTree` from an iterable collection of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: {\n  /**\n   * Creates a new `RedBlackTree` from an iterable collection of key/value pairs.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <B>(ord: Order<B>): <K extends B, V>(entries: Iterable<readonly [K, V]>) => RedBlackTree<K, V>\n  /**\n   * Creates a new `RedBlackTree` from an iterable collection of key/value pairs.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <K extends B, V, B>(entries: Iterable<readonly [K, V]>, ord: Order<B>): RedBlackTree<K, V>\n} = RBT.fromIterable\n\n/**\n * Constructs a new `RedBlackTree` from the specified entries.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <K>(\n  ord: Order<K>\n) => <Entries extends Array<readonly [K, any]>>(\n  ...entries: Entries\n) => RedBlackTree<K, Entries[number] extends readonly [any, infer V] ? V : never> = RBT.make\n\n/**\n * Returns an iterator that points to the element at the specified index of the\n * tree.\n *\n * **Note**: The iterator will run through elements in order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const at: {\n  /**\n   * Returns an iterator that points to the element at the specified index of the\n   * tree.\n   *\n   * **Note**: The iterator will run through elements in order.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  (index: number): <K, V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that points to the element at the specified index of the\n   * tree.\n   *\n   * **Note**: The iterator will run through elements in order.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, index: number): Iterable<[K, V]>\n} = RBT.atForwards\n\n/**\n * Returns an iterator that points to the element at the specified index of the\n * tree.\n *\n * **Note**: The iterator will run through elements in reverse order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const atReversed: {\n  /**\n   * Returns an iterator that points to the element at the specified index of the\n   * tree.\n   *\n   * **Note**: The iterator will run through elements in reverse order.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  (index: number): <K, V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that points to the element at the specified index of the\n   * tree.\n   *\n   * **Note**: The iterator will run through elements in reverse order.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, index: number): Iterable<[K, V]>\n} = RBT.atBackwards\n\n/**\n * Finds all values in the tree associated with the specified key.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const findAll: {\n  /**\n   * Finds all values in the tree associated with the specified key.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Chunk<V>\n  /**\n   * Finds all values in the tree associated with the specified key.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Chunk<V>\n} = RBT.findAll\n\n/**\n * Finds the first value in the tree associated with the specified key, if it exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  /**\n   * Finds the first value in the tree associated with the specified key, if it exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Option<V>\n  /**\n   * Finds the first value in the tree associated with the specified key, if it exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Option<V>\n} = RBT.findFirst\n\n/**\n * Returns the first entry in the tree, if it exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const first: <K, V>(self: RedBlackTree<K, V>) => Option<[K, V]> = RBT.first\n\n/**\n * Returns the element at the specified index within the tree or `None` if the\n * specified index does not exist.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const getAt: {\n  /**\n   * Returns the element at the specified index within the tree or `None` if the\n   * specified index does not exist.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (index: number): <K, V>(self: RedBlackTree<K, V>) => Option<[K, V]>\n  /**\n   * Returns the element at the specified index within the tree or `None` if the\n   * specified index does not exist.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V>(self: RedBlackTree<K, V>, index: number): Option<[K, V]>\n} = RBT.getAt\n\n/**\n * Gets the `Order<K>` that the `RedBlackTree<K, V>` is using.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOrder: <K, V>(self: RedBlackTree<K, V>) => Order<K> = RBT.getOrder\n\n/**\n * Returns an iterator that traverse entries in order with keys greater than the\n * specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThan: {\n  /**\n   * Returns an iterator that traverse entries in order with keys greater than the\n   * specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in order with keys greater than the\n   * specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys greater\n * than the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThanReversed: {\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys greater\n   * than the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys greater\n   * than the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanBackwards\n\n/**\n * Returns an iterator that traverse entries in order with keys greater than or\n * equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThanEqual: {\n  /**\n   * Returns an iterator that traverse entries in order with keys greater than or\n   * equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in order with keys greater than or\n   * equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanEqualForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys greater\n * than or equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThanEqualReversed: {\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys greater\n   * than or equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys greater\n   * than or equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanEqualBackwards\n\n/**\n * Finds the item with key, if it exists.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  /**\n   * Finds the item with key, if it exists.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => boolean\n  /**\n   * Finds the item with key, if it exists.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): boolean\n} = RBT.has\n\n/**\n * Insert a new item into the tree.\n *\n * @since 2.0.0\n */\nexport const insert: {\n  /**\n   * Insert a new item into the tree.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, value: V): (self: RedBlackTree<K, V>) => RedBlackTree<K, V>\n  /**\n   * Insert a new item into the tree.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K, value: V): RedBlackTree<K, V>\n} = RBT.insert\n\n/**\n * Get all the keys present in the tree in order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const keys: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<K> = RBT.keysForward\n\n/**\n * Get all the keys present in the tree in reverse order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const keysReversed: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<K> = RBT.keysBackward\n\n/**\n * Returns the last entry in the tree, if it exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const last: <K, V>(self: RedBlackTree<K, V>) => Option<[K, V]> = RBT.last\n\n/**\n * Returns an iterator that traverse entries in order with keys less than the\n * specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThan: {\n  /**\n   * Returns an iterator that traverse entries in order with keys less than the\n   * specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in order with keys less than the\n   * specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys less\n * than the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThanReversed: {\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys less\n   * than the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys less\n   * than the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanBackwards\n\n/**\n * Returns an iterator that traverse entries in order with keys less than or\n * equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThanEqual: {\n  /**\n   * Returns an iterator that traverse entries in order with keys less than or\n   * equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in order with keys less than or\n   * equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanEqualForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys less\n * than or equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThanEqualReversed: {\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys less\n   * than or equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys less\n   * than or equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanEqualBackwards\n\n/**\n * Execute the specified function for each node of the tree, in order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  /**\n   * Execute the specified function for each node of the tree, in order.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(f: (key: K, value: V) => void): (self: RedBlackTree<K, V>) => void\n  /**\n   * Execute the specified function for each node of the tree, in order.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, f: (key: K, value: V) => void): void\n} = RBT.forEach\n\n/**\n * Visit each node of the tree in order with key greater then or equal to max.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachGreaterThanEqual: {\n  /**\n   * Visit each node of the tree in order with key greater then or equal to max.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(min: K, f: (key: K, value: V) => void): (self: RedBlackTree<K, V>) => void\n  /**\n   * Visit each node of the tree in order with key greater then or equal to max.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, min: K, f: (key: K, value: V) => void): void\n} = RBT.forEachGreaterThanEqual\n\n/**\n * Visit each node of the tree in order with key lower then max.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachLessThan: {\n  /**\n   * Visit each node of the tree in order with key lower then max.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(max: K, f: (key: K, value: V) => void): (self: RedBlackTree<K, V>) => void\n  /**\n   * Visit each node of the tree in order with key lower then max.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, max: K, f: (key: K, value: V) => void): void\n} = RBT.forEachLessThan\n\n/**\n * Visit each node of the tree in order with key lower than max and greater\n * than or equal to min.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachBetween: {\n  /**\n   * Visit each node of the tree in order with key lower than max and greater\n   * than or equal to min.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(\n   options: {\n     readonly min: K\n     readonly max: K\n     readonly body: (key: K, value: V) => void\n   }\n  ): (self: RedBlackTree<K, V>) => void\n  /**\n   * Visit each node of the tree in order with key lower than max and greater\n   * than or equal to min.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(\n   self: RedBlackTree<K, V>,\n   options: {\n     readonly min: K\n     readonly max: K\n     readonly body: (key: K, value: V) => void\n   }\n  ): void\n} = RBT.forEachBetween\n\n/**\n * Reduce a state over the entries of the tree.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  /**\n   * Reduce a state over the entries of the tree.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, V, K>(zero: Z, f: (accumulator: Z, value: V, key: K) => Z): (self: RedBlackTree<K, V>) => Z\n  /**\n   * Reduce a state over the entries of the tree.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, V, K>(\n   self: RedBlackTree<K, V>,\n   zero: Z,\n   f: (accumulator: Z, value: V, key: K) => Z\n  ): Z\n} = RBT.reduce\n\n/**\n * Removes the entry with the specified key, if it exists.\n *\n * @since 2.0.0\n */\nexport const removeFirst: {\n  /**\n   * Removes the entry with the specified key, if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => RedBlackTree<K, V>\n  /**\n   * Removes the entry with the specified key, if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): RedBlackTree<K, V>\n} = RBT.removeFirst\n\n/**\n * Traverse the tree in reverse order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const reversed: <K, V>(self: RedBlackTree<K, V>) => Iterable<[K, V]> = RBT.reversed\n\n/**\n * Returns the size of the tree.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <K, V>(self: RedBlackTree<K, V>) => number = RBT.size\n\n/**\n * Get all values present in the tree in order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const values: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<V> = RBT.valuesForward\n\n/**\n * Get all values present in the tree in reverse order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const valuesReversed: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<V> = RBT.valuesBackward\n", "import * as Chunk from \"../Chunk.js\"\nimport * as Equal from \"../Equal.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport * as Option from \"../Option.js\"\nimport type * as Order from \"../Order.js\"\nimport type * as Ordering from \"../Ordering.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport type * as RBT from \"../RedBlackTree.js\"\nimport { Direction, RedBlackTreeIterator } from \"./redBlackTree/iterator.js\"\nimport * as Node from \"./redBlackTree/node.js\"\nimport * as Stack from \"./stack.js\"\n\nconst RedBlackTreeSymbolKey = \"effect/RedBlackTree\"\n\n/** @internal */\nexport const RedBlackTreeTypeId: RBT.TypeId = Symbol.for(RedBlackTreeSymbolKey) as RBT.TypeId\n\n/** @internal */\nexport interface RedBlackTreeImpl<in out K, out V> extends RBT.RedBlackTree<K, V> {\n  readonly _ord: Order.Order<K>\n  readonly _root: Node.Node<K, V> | undefined\n}\n\nconst redBlackTreeVariance = {\n  /* c8 ignore next */\n  _Key: (_: any) => _,\n  /* c8 ignore next */\n  _Value: (_: never) => _\n}\n\nconst RedBlackTreeProto: RBT.RedBlackTree<unknown, unknown> = {\n  [RedBlackTreeTypeId]: redBlackTreeVariance,\n  [Hash.symbol](this: RBT.RedBlackTree<unknown, unknown>): number {\n    let hash = Hash.hash(RedBlackTreeSymbolKey)\n    for (const item of this) {\n      hash ^= pipe(Hash.hash(item[0]), Hash.combine(Hash.hash(item[1])))\n    }\n    return Hash.cached(this, hash)\n  },\n  [Equal.symbol]<K, V>(this: RedBlackTreeImpl<K, V>, that: unknown): boolean {\n    if (isRedBlackTree(that)) {\n      if ((this._root?.count ?? 0) !== ((that as RedBlackTreeImpl<K, V>)._root?.count ?? 0)) {\n        return false\n      }\n      const entries = Array.from(that)\n      return Array.from(this).every((itemSelf, i) => {\n        const itemThat = entries[i]\n        return Equal.equals(itemSelf[0], itemThat[0]) && Equal.equals(itemSelf[1], itemThat[1])\n      })\n    }\n    return false\n  },\n  [Symbol.iterator]<K, V>(this: RedBlackTreeImpl<K, V>): RedBlackTreeIterator<K, V> {\n    const stack: Array<Node.Node<K, V>> = []\n    let n = this._root\n    while (n != null) {\n      stack.push(n)\n      n = n.left\n    }\n    return new RedBlackTreeIterator(this, stack, Direction.Forward)\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"RedBlackTree\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst makeImpl = <K, V>(ord: Order.Order<K>, root: Node.Node<K, V> | undefined): RedBlackTreeImpl<K, V> => {\n  const tree = Object.create(RedBlackTreeProto)\n  tree._ord = ord\n  tree._root = root\n  return tree\n}\n\n/** @internal */\nexport const isRedBlackTree: {\n  <K, V>(u: Iterable<readonly [K, V]>): u is RBT.RedBlackTree<K, V>\n  (u: unknown): u is RBT.RedBlackTree<unknown, unknown>\n} = (u: unknown): u is RBT.RedBlackTree<unknown, unknown> => hasProperty(u, RedBlackTreeTypeId)\n\n/** @internal */\nexport const empty = <K, V = never>(ord: Order.Order<K>): RBT.RedBlackTree<K, V> => makeImpl<K, V>(ord, undefined)\n\n/** @internal */\nexport const fromIterable = dual<\n  <B>(ord: Order.Order<B>) => <K extends B, V>(entries: Iterable<readonly [K, V]>) => RBT.RedBlackTree<K, V>,\n  <K extends B, V, B>(entries: Iterable<readonly [K, V]>, ord: Order.Order<B>) => RBT.RedBlackTree<K, V>\n>(2, <K extends B, V, B>(entries: Iterable<readonly [K, V]>, ord: Order.Order<B>) => {\n  let tree = empty<K, V>(ord)\n  for (const [key, value] of entries) {\n    tree = insert(tree, key, value)\n  }\n  return tree\n})\n\n/** @internal */\nexport const make =\n  <K>(ord: Order.Order<K>) =>\n  <Entries extends Array<readonly [K, any]>>(...entries: Entries): RBT.RedBlackTree<\n    K,\n    Entries[number] extends readonly [any, infer V] ? V : never\n  > => {\n    return fromIterable(entries, ord)\n  }\n\n/** @internal */\nexport const atBackwards = dual<\n  (index: number) => <K, V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, index: number) => Iterable<[K, V]>\n>(2, (self, index) => at(self, index, Direction.Backward))\n\n/** @internal */\nexport const atForwards = dual<\n  (index: number) => <K, V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, index: number) => Iterable<[K, V]>\n>(2, (self, index) => at(self, index, Direction.Forward))\n\nconst at = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  index: number,\n  direction: RBT.RedBlackTree.Direction\n): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      if (index < 0) {\n        return new RedBlackTreeIterator(self, [], direction)\n      }\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      const stack: Array<Node.Node<K, V>> = []\n      while (node !== undefined) {\n        stack.push(node)\n        if (node.left !== undefined) {\n          if (index < node.left.count) {\n            node = node.left\n            continue\n          }\n          index -= node.left.count\n        }\n        if (!index) {\n          return new RedBlackTreeIterator(self, stack, direction)\n        }\n        index -= 1\n        if (node.right !== undefined) {\n          if (index >= node.right.count) {\n            break\n          }\n          node = node.right\n        } else {\n          break\n        }\n      }\n      return new RedBlackTreeIterator(self, [], direction)\n    }\n  }\n}\n\n/** @internal */\nexport const findAll = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Chunk.Chunk<V>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Chunk.Chunk<V>\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => {\n  const stack: Array<Node.Node<K, V>> = []\n  let node = (self as RedBlackTreeImpl<K, V>)._root\n  let result = Chunk.empty<V>()\n  while (node !== undefined || stack.length > 0) {\n    if (node) {\n      stack.push(node)\n      node = node.left\n    } else {\n      const current = stack.pop()!\n      if (Equal.equals(key, current.key)) {\n        result = Chunk.prepend(current.value)(result)\n      }\n      node = current.right\n    }\n  }\n  return result\n})\n\n/** @internal */\nexport const findFirst = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Option.Option<V>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Option.Option<V>\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => {\n  const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n  let node = (self as RedBlackTreeImpl<K, V>)._root\n  while (node !== undefined) {\n    const d = cmp(key, node.key)\n    if (Equal.equals(key, node.key)) {\n      return Option.some(node.value)\n    }\n    if (d <= 0) {\n      node = node.left\n    } else {\n      node = node.right\n    }\n  }\n  return Option.none()\n})\n\n/** @internal */\nexport const first = <K, V>(self: RBT.RedBlackTree<K, V>): Option.Option<[K, V]> => {\n  let node: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  let current: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  while (node !== undefined) {\n    current = node\n    node = node.left\n  }\n  return current ? Option.some([current.key, current.value]) : Option.none()\n}\n\n/** @internal */\nexport const getAt = dual<\n  (index: number) => <K, V>(self: RBT.RedBlackTree<K, V>) => Option.Option<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, index: number) => Option.Option<[K, V]>\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, index: number) => {\n  if (index < 0) {\n    return Option.none()\n  }\n  let root = (self as RedBlackTreeImpl<K, V>)._root\n  let node: Node.Node<K, V> | undefined = undefined\n  while (root !== undefined) {\n    node = root\n    if (root.left) {\n      if (index < root.left.count) {\n        root = root.left\n        continue\n      }\n      index -= root.left.count\n    }\n    if (!index) {\n      return Option.some([node.key, node.value])\n    }\n    index -= 1\n    if (root.right) {\n      if (index >= root.right.count) {\n        break\n      }\n      root = root.right\n    } else {\n      break\n    }\n  }\n  return Option.none()\n})\n\n/** @internal */\nexport const getOrder = <K, V>(tree: RBT.RedBlackTree<K, V>): Order.Order<K> => (tree as RedBlackTreeImpl<K, V>)._ord\n\n/** @internal */\nexport const has = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => boolean,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => boolean\n>(2, (self, key) => Option.isSome(findFirst(self, key)))\n\n/** @internal */\nexport const insert = dual<\n  <K, V>(key: K, value: V) => (self: RBT.RedBlackTree<K, V>) => RBT.RedBlackTree<K, V>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K, value: V) => RBT.RedBlackTree<K, V>\n>(3, <K, V>(self: RBT.RedBlackTree<K, V>, key: K, value: V) => {\n  const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n  // Find point to insert new node at\n  let n: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  const n_stack: Array<Node.Node<K, V>> = []\n  const d_stack: Array<Ordering.Ordering> = []\n  while (n != null) {\n    const d = cmp(key, n.key)\n    n_stack.push(n)\n    d_stack.push(d)\n    if (d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  // Rebuild path to leaf node\n  n_stack.push({\n    color: Node.Color.Red,\n    key,\n    value,\n    left: undefined,\n    right: undefined,\n    count: 1\n  })\n  for (let s = n_stack.length - 2; s >= 0; --s) {\n    const n2 = n_stack[s]!\n    if (d_stack[s]! <= 0) {\n      n_stack[s] = {\n        color: n2.color,\n        key: n2.key,\n        value: n2.value,\n        left: n_stack[s + 1],\n        right: n2.right,\n        count: n2.count + 1\n      }\n    } else {\n      n_stack[s] = {\n        color: n2.color,\n        key: n2.key,\n        value: n2.value,\n        left: n2.left,\n        right: n_stack[s + 1],\n        count: n2.count + 1\n      }\n    }\n  }\n  // Rebalance tree using rotations\n  for (let s = n_stack.length - 1; s > 1; --s) {\n    const p = n_stack[s - 1]!\n    const n3 = n_stack[s]!\n    if (p.color === Node.Color.Black || n3.color === Node.Color.Black) {\n      break\n    }\n    const pp = n_stack[s - 2]!\n    if (pp.left === p) {\n      if (p.left === n3) {\n        const y = pp.right\n        if (y && y.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          pp.right = Node.repaint(y, Node.Color.Black)\n          pp.color = Node.Color.Red\n          s -= 1\n        } else {\n          pp.color = Node.Color.Red\n          pp.left = p.right\n          p.color = Node.Color.Black\n          p.right = pp\n          n_stack[s - 2] = p\n          n_stack[s - 1] = n3\n          Node.recount(pp)\n          Node.recount(p)\n          if (s >= 3) {\n            const ppp = n_stack[s - 3]!\n            if (ppp.left === pp) {\n              ppp.left = p\n            } else {\n              ppp.right = p\n            }\n          }\n          break\n        }\n      } else {\n        const y = pp.right\n        if (y && y.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          pp.right = Node.repaint(y, Node.Color.Black)\n          pp.color = Node.Color.Red\n          s -= 1\n        } else {\n          p.right = n3.left\n          pp.color = Node.Color.Red\n          pp.left = n3.right\n          n3.color = Node.Color.Black\n          n3.left = p\n          n3.right = pp\n          n_stack[s - 2] = n3\n          n_stack[s - 1] = p\n          Node.recount(pp)\n          Node.recount(p)\n          Node.recount(n3)\n          if (s >= 3) {\n            const ppp = n_stack[s - 3]!\n            if (ppp.left === pp) {\n              ppp.left = n3\n            } else {\n              ppp.right = n3\n            }\n          }\n          break\n        }\n      }\n    } else {\n      if (p.right === n3) {\n        const y = pp.left\n        if (y && y.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          pp.left = Node.repaint(y, Node.Color.Black)\n          pp.color = Node.Color.Red\n          s -= 1\n        } else {\n          pp.color = Node.Color.Red\n          pp.right = p.left\n          p.color = Node.Color.Black\n          p.left = pp\n          n_stack[s - 2] = p\n          n_stack[s - 1] = n3\n          Node.recount(pp)\n          Node.recount(p)\n          if (s >= 3) {\n            const ppp = n_stack[s - 3]!\n            if (ppp.right === pp) {\n              ppp.right = p\n            } else {\n              ppp.left = p\n            }\n          }\n          break\n        }\n      } else {\n        const y = pp.left\n        if (y && y.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          pp.left = Node.repaint(y, Node.Color.Black)\n          pp.color = Node.Color.Red\n          s -= 1\n        } else {\n          p.left = n3.right\n          pp.color = Node.Color.Red\n          pp.right = n3.left\n          n3.color = Node.Color.Black\n          n3.right = p\n          n3.left = pp\n          n_stack[s - 2] = n3\n          n_stack[s - 1] = p\n          Node.recount(pp)\n          Node.recount(p)\n          Node.recount(n3)\n          if (s >= 3) {\n            const ppp = n_stack[s - 3]!\n            if (ppp.right === pp) {\n              ppp.right = n3\n            } else {\n              ppp.left = n3\n            }\n          }\n          break\n        }\n      }\n    }\n  }\n  // Return new tree\n  n_stack[0]!.color = Node.Color.Black\n  return makeImpl((self as RedBlackTreeImpl<K, V>)._ord, n_stack[0])\n})\n\n/** @internal */\nexport const keysForward = <K, V>(self: RBT.RedBlackTree<K, V>): IterableIterator<K> => keys(self, Direction.Forward)\n\n/** @internal */\nexport const keysBackward = <K, V>(self: RBT.RedBlackTree<K, V>): IterableIterator<K> => keys(self, Direction.Backward)\n\nconst keys = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  direction: RBT.RedBlackTree.Direction\n): IterableIterator<K> => {\n  const begin: RedBlackTreeIterator<K, V> = self[Symbol.iterator]() as RedBlackTreeIterator<K, V>\n  let count = 0\n  return {\n    [Symbol.iterator]: () => keys(self, direction),\n    next: (): IteratorResult<K, number> => {\n      count++\n      const entry = begin.key\n      if (direction === Direction.Forward) {\n        begin.moveNext()\n      } else {\n        begin.movePrev()\n      }\n      switch (entry._tag) {\n        case \"None\": {\n          return { done: true, value: count }\n        }\n        case \"Some\": {\n          return { done: false, value: entry.value }\n        }\n      }\n    }\n  }\n}\n\n/** @internal */\nexport const last = <K, V>(self: RBT.RedBlackTree<K, V>): Option.Option<[K, V]> => {\n  let node: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  let current: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  while (node !== undefined) {\n    current = node\n    node = node.right\n  }\n  return current ? Option.some([current.key, current.value]) : Option.none()\n}\n\n/** @internal */\nexport const reversed = <K, V>(self: RBT.RedBlackTree<K, V>): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      const stack: Array<Node.Node<K, V>> = []\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      while (node !== undefined) {\n        stack.push(node)\n        node = node.right\n      }\n      return new RedBlackTreeIterator(self, stack, Direction.Backward)\n    }\n  }\n}\n\n/** @internal */\nexport const greaterThanBackwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => greaterThan(self, key, Direction.Backward))\n\n/** @internal */\nexport const greaterThanForwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => greaterThan(self, key, Direction.Forward))\n\nconst greaterThan = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  key: K,\n  direction: RBT.RedBlackTree.Direction\n): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      const stack = []\n      let last_ptr = 0\n      while (node !== undefined) {\n        const d = cmp(key, node.key)\n        stack.push(node)\n        if (d < 0) {\n          last_ptr = stack.length\n        }\n        if (d < 0) {\n          node = node.left\n        } else {\n          node = node.right\n        }\n      }\n      stack.length = last_ptr\n      return new RedBlackTreeIterator(self, stack, direction)\n    }\n  }\n}\n\n/** @internal */\nexport const greaterThanEqualBackwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => greaterThanEqual(self, key, Direction.Backward))\n\n/** @internal */\nexport const greaterThanEqualForwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => greaterThanEqual(self, key, Direction.Forward))\n\nconst greaterThanEqual = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  key: K,\n  direction: RBT.RedBlackTree.Direction = Direction.Forward\n): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      const stack = []\n      let last_ptr = 0\n      while (node !== undefined) {\n        const d = cmp(key, node.key)\n        stack.push(node)\n        if (d <= 0) {\n          last_ptr = stack.length\n        }\n        if (d <= 0) {\n          node = node.left\n        } else {\n          node = node.right\n        }\n      }\n      stack.length = last_ptr\n      return new RedBlackTreeIterator(self, stack, direction)\n    }\n  }\n}\n\n/** @internal */\nexport const lessThanBackwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => lessThan(self, key, Direction.Backward))\n\n/** @internal */\nexport const lessThanForwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => lessThan(self, key, Direction.Forward))\n\nconst lessThan = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  key: K,\n  direction: RBT.RedBlackTree.Direction\n): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      const stack = []\n      let last_ptr = 0\n      while (node !== undefined) {\n        const d = cmp(key, node.key)\n        stack.push(node)\n        if (d > 0) {\n          last_ptr = stack.length\n        }\n        if (d <= 0) {\n          node = node.left\n        } else {\n          node = node.right\n        }\n      }\n      stack.length = last_ptr\n      return new RedBlackTreeIterator(self, stack, direction)\n    }\n  }\n}\n\n/** @internal */\nexport const lessThanEqualBackwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => lessThanEqual(self, key, Direction.Backward))\n\n/** @internal */\nexport const lessThanEqualForwards = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => Iterable<[K, V]>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => Iterable<[K, V]>\n>(2, (self, key) => lessThanEqual(self, key, Direction.Forward))\n\nconst lessThanEqual = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  key: K,\n  direction: RBT.RedBlackTree.Direction\n): Iterable<[K, V]> => {\n  return {\n    [Symbol.iterator]: () => {\n      const cmp = (self as RedBlackTreeImpl<K, V>)._ord\n      let node = (self as RedBlackTreeImpl<K, V>)._root\n      const stack = []\n      let last_ptr = 0\n      while (node !== undefined) {\n        const d = cmp(key, node.key)\n        stack.push(node)\n        if (d >= 0) {\n          last_ptr = stack.length\n        }\n        if (d < 0) {\n          node = node.left\n        } else {\n          node = node.right\n        }\n      }\n      stack.length = last_ptr\n      return new RedBlackTreeIterator(self, stack, direction)\n    }\n  }\n}\n\n/** @internal */\nexport const forEach = dual<\n  <K, V>(f: (key: K, value: V) => void) => (self: RBT.RedBlackTree<K, V>) => void,\n  <K, V>(self: RBT.RedBlackTree<K, V>, f: (key: K, value: V) => void) => void\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, f: (key: K, value: V) => void) => {\n  const root = (self as RedBlackTreeImpl<K, V>)._root\n  if (root !== undefined) {\n    visitFull(root, (key, value) => {\n      f(key, value)\n      return Option.none()\n    })\n  }\n})\n\n/** @internal */\nexport const forEachGreaterThanEqual = dual<\n  <K, V>(min: K, f: (key: K, value: V) => void) => (self: RBT.RedBlackTree<K, V>) => void,\n  <K, V>(self: RBT.RedBlackTree<K, V>, min: K, f: (key: K, value: V) => void) => void\n>(3, <K, V>(self: RBT.RedBlackTree<K, V>, min: K, f: (key: K, value: V) => void) => {\n  const root = (self as RedBlackTreeImpl<K, V>)._root\n  const ord = (self as RedBlackTreeImpl<K, V>)._ord\n  if (root !== undefined) {\n    visitGreaterThanEqual(root, min, ord, (key, value) => {\n      f(key, value)\n      return Option.none()\n    })\n  }\n})\n\n/** @internal */\nexport const forEachLessThan = dual<\n  <K, V>(max: K, f: (key: K, value: V) => void) => (self: RBT.RedBlackTree<K, V>) => void,\n  <K, V>(self: RBT.RedBlackTree<K, V>, max: K, f: (key: K, value: V) => void) => void\n>(3, <K, V>(self: RBT.RedBlackTree<K, V>, max: K, f: (key: K, value: V) => void) => {\n  const root = (self as RedBlackTreeImpl<K, V>)._root\n  const ord = (self as RedBlackTreeImpl<K, V>)._ord\n  if (root !== undefined) {\n    visitLessThan(root, max, ord, (key, value) => {\n      f(key, value)\n      return Option.none()\n    })\n  }\n})\n\n/** @internal */\nexport const forEachBetween = dual<\n  <K, V>(options: {\n    readonly min: K\n    readonly max: K\n    readonly body: (key: K, value: V) => void\n  }) => (self: RBT.RedBlackTree<K, V>) => void,\n  <K, V>(self: RBT.RedBlackTree<K, V>, options: {\n    readonly min: K\n    readonly max: K\n    readonly body: (key: K, value: V) => void\n  }) => void\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, { body, max, min }: {\n  readonly min: K\n  readonly max: K\n  readonly body: (key: K, value: V) => void\n}) => {\n  const root = (self as RedBlackTreeImpl<K, V>)._root\n  const ord = (self as RedBlackTreeImpl<K, V>)._ord\n  if (root) {\n    visitBetween(root, min, max, ord, (key, value) => {\n      body(key, value)\n      return Option.none()\n    })\n  }\n})\n\n/** @internal */\nexport const reduce = dual<\n  <Z, V, K>(\n    zero: Z,\n    f: (accumulator: Z, value: V, key: K) => Z\n  ) => (self: RBT.RedBlackTree<K, V>) => Z,\n  <Z, V, K>(self: RBT.RedBlackTree<K, V>, zero: Z, f: (accumulator: Z, value: V, key: K) => Z) => Z\n>(3, (self, zero, f) => {\n  let accumulator = zero\n  for (const entry of self) {\n    accumulator = f(accumulator, entry[1], entry[0])\n  }\n  return accumulator\n})\n\n/** @internal */\nexport const removeFirst = dual<\n  <K>(key: K) => <V>(self: RBT.RedBlackTree<K, V>) => RBT.RedBlackTree<K, V>,\n  <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => RBT.RedBlackTree<K, V>\n>(2, <K, V>(self: RBT.RedBlackTree<K, V>, key: K) => {\n  if (!has(self, key)) {\n    return self\n  }\n  const ord = (self as RedBlackTreeImpl<K, V>)._ord\n  const cmp = ord\n  let node: Node.Node<K, V> | undefined = (self as RedBlackTreeImpl<K, V>)._root\n  const stack = []\n  while (node !== undefined) {\n    const d = cmp(key, node.key)\n    stack.push(node)\n    if (Equal.equals(key, node.key)) {\n      node = undefined\n    } else if (d <= 0) {\n      node = node.left\n    } else {\n      node = node.right\n    }\n  }\n  if (stack.length === 0) {\n    return self\n  }\n  const cstack = new Array<Node.Node<K, V>>(stack.length)\n  let n = stack[stack.length - 1]!\n  cstack[cstack.length - 1] = {\n    color: n.color,\n    key: n.key,\n    value: n.value,\n    left: n.left,\n    right: n.right,\n    count: n.count\n  }\n  for (let i = stack.length - 2; i >= 0; --i) {\n    n = stack[i]!\n    if (n.left === stack[i + 1]) {\n      cstack[i] = {\n        color: n.color,\n        key: n.key,\n        value: n.value,\n        left: cstack[i + 1],\n        right: n.right,\n        count: n.count\n      }\n    } else {\n      cstack[i] = {\n        color: n.color,\n        key: n.key,\n        value: n.value,\n        left: n.left,\n        right: cstack[i + 1],\n        count: n.count\n      }\n    }\n  }\n  // Get node\n  n = cstack[cstack.length - 1]!\n  // If not leaf, then swap with previous node\n  if (n.left !== undefined && n.right !== undefined) {\n    // First walk to previous leaf\n    const split = cstack.length\n    n = n.left\n    while (n.right != null) {\n      cstack.push(n)\n      n = n.right\n    }\n    // Copy path to leaf\n    const v = cstack[split - 1]\n    cstack.push({\n      color: n.color,\n      key: v!.key,\n      value: v!.value,\n      left: n.left,\n      right: n.right,\n      count: n.count\n    })\n    cstack[split - 1]!.key = n.key\n    cstack[split - 1]!.value = n.value\n    // Fix up stack\n    for (let i = cstack.length - 2; i >= split; --i) {\n      n = cstack[i]!\n      cstack[i] = {\n        color: n.color,\n        key: n.key,\n        value: n.value,\n        left: n.left,\n        right: cstack[i + 1],\n        count: n.count\n      }\n    }\n    cstack[split - 1]!.left = cstack[split]\n  }\n\n  // Remove leaf node\n  n = cstack[cstack.length - 1]!\n  if (n.color === Node.Color.Red) {\n    // Easy case: removing red leaf\n    const p = cstack[cstack.length - 2]!\n    if (p.left === n) {\n      p.left = undefined\n    } else if (p.right === n) {\n      p.right = undefined\n    }\n    cstack.pop()\n    for (let i = 0; i < cstack.length; ++i) {\n      cstack[i]!.count--\n    }\n    return makeImpl(ord, cstack[0])\n  } else {\n    if (n.left !== undefined || n.right !== undefined) {\n      // Second easy case:  Single child black parent\n      if (n.left !== undefined) {\n        Node.swap(n, n.left)\n      } else if (n.right !== undefined) {\n        Node.swap(n, n.right)\n      }\n      // Child must be red, so repaint it black to balance color\n      n.color = Node.Color.Black\n      for (let i = 0; i < cstack.length - 1; ++i) {\n        cstack[i]!.count--\n      }\n      return makeImpl(ord, cstack[0])\n    } else if (cstack.length === 1) {\n      // Third easy case: root\n      return makeImpl(ord, undefined)\n    } else {\n      // Hard case: Repaint n, and then do some nasty stuff\n      for (let i = 0; i < cstack.length; ++i) {\n        cstack[i]!.count--\n      }\n      const parent = cstack[cstack.length - 2]\n      fixDoubleBlack(cstack)\n      // Fix up links\n      if (parent!.left === n) {\n        parent!.left = undefined\n      } else {\n        parent!.right = undefined\n      }\n    }\n  }\n  return makeImpl(ord, cstack[0])\n})\n\n/** @internal */\nexport const size = <K, V>(self: RBT.RedBlackTree<K, V>): number => (self as RedBlackTreeImpl<K, V>)._root?.count ?? 0\n\n/** @internal */\nexport const valuesForward = <K, V>(self: RBT.RedBlackTree<K, V>): IterableIterator<V> =>\n  values(self, Direction.Forward)\n\n/** @internal */\nexport const valuesBackward = <K, V>(self: RBT.RedBlackTree<K, V>): IterableIterator<V> =>\n  values(self, Direction.Backward)\n\n/** @internal */\nconst values = <K, V>(\n  self: RBT.RedBlackTree<K, V>,\n  direction: RBT.RedBlackTree.Direction\n): IterableIterator<V> => {\n  const begin: RedBlackTreeIterator<K, V> = self[Symbol.iterator]() as RedBlackTreeIterator<K, V>\n  let count = 0\n  return {\n    [Symbol.iterator]: () => values(self, direction),\n    next: (): IteratorResult<V, number> => {\n      count++\n      const entry = begin.value\n      if (direction === Direction.Forward) {\n        begin.moveNext()\n      } else {\n        begin.movePrev()\n      }\n      switch (entry._tag) {\n        case \"None\": {\n          return { done: true, value: count }\n        }\n        case \"Some\": {\n          return { done: false, value: entry.value }\n        }\n      }\n    }\n  }\n}\n\nconst visitFull = <K, V, A>(\n  node: Node.Node<K, V>,\n  visit: (key: K, value: V) => Option.Option<A>\n): Option.Option<A> => {\n  let current: Node.Node<K, V> | undefined = node\n  let stack: Stack.Stack<Node.Node<K, V>> | undefined = undefined\n  let done = false\n  while (!done) {\n    if (current != null) {\n      stack = Stack.make(current, stack)\n      current = current.left\n    } else if (stack != null) {\n      const value = visit(stack.value.key, stack.value.value)\n      if (Option.isSome(value)) {\n        return value\n      }\n      current = stack.value.right\n      stack = stack.previous\n    } else {\n      done = true\n    }\n  }\n  return Option.none()\n}\n\nconst visitGreaterThanEqual = <K, V, A>(\n  node: Node.Node<K, V>,\n  min: K,\n  ord: Order.Order<K>,\n  visit: (key: K, value: V) => Option.Option<A>\n): Option.Option<A> => {\n  let current: Node.Node<K, V> | undefined = node\n  let stack: Stack.Stack<Node.Node<K, V>> | undefined = undefined\n  let done = false\n  while (!done) {\n    if (current !== undefined) {\n      stack = Stack.make(current, stack)\n      if (ord(min, current.key) <= 0) {\n        current = current.left\n      } else {\n        current = undefined\n      }\n    } else if (stack !== undefined) {\n      if (ord(min, stack.value.key) <= 0) {\n        const value = visit(stack.value.key, stack.value.value)\n        if (Option.isSome(value)) {\n          return value\n        }\n      }\n      current = stack.value.right\n      stack = stack.previous\n    } else {\n      done = true\n    }\n  }\n  return Option.none()\n}\n\nconst visitLessThan = <K, V, A>(\n  node: Node.Node<K, V>,\n  max: K,\n  ord: Order.Order<K>,\n  visit: (key: K, value: V) => Option.Option<A>\n): Option.Option<A> => {\n  let current: Node.Node<K, V> | undefined = node\n  let stack: Stack.Stack<Node.Node<K, V>> | undefined = undefined\n  let done = false\n  while (!done) {\n    if (current !== undefined) {\n      stack = Stack.make(current, stack)\n      current = current.left\n    } else if (stack !== undefined && ord(max, stack.value.key) > 0) {\n      const value = visit(stack.value.key, stack.value.value)\n      if (Option.isSome(value)) {\n        return value\n      }\n      current = stack.value.right\n      stack = stack.previous\n    } else {\n      done = true\n    }\n  }\n  return Option.none()\n}\n\nconst visitBetween = <K, V, A>(\n  node: Node.Node<K, V>,\n  min: K,\n  max: K,\n  ord: Order.Order<K>,\n  visit: (key: K, value: V) => Option.Option<A>\n): Option.Option<A> => {\n  let current: Node.Node<K, V> | undefined = node\n  let stack: Stack.Stack<Node.Node<K, V>> | undefined = undefined\n  let done = false\n  while (!done) {\n    if (current !== undefined) {\n      stack = Stack.make(current, stack)\n      if (ord(min, current.key) <= 0) {\n        current = current.left\n      } else {\n        current = undefined\n      }\n    } else if (stack !== undefined && ord(max, stack.value.key) > 0) {\n      if (ord(min, stack.value.key) <= 0) {\n        const value = visit(stack.value.key, stack.value.value)\n        if (Option.isSome(value)) {\n          return value\n        }\n      }\n      current = stack.value.right\n      stack = stack.previous\n    } else {\n      done = true\n    }\n  }\n  return Option.none()\n}\n\n/**\n * Fix up a double black node in a Red-Black Tree.\n */\nconst fixDoubleBlack = <K, V>(stack: Array<Node.Node<K, V>>) => {\n  let n, p, s, z\n  for (let i = stack.length - 1; i >= 0; --i) {\n    n = stack[i]!\n    if (i === 0) {\n      n.color = Node.Color.Black\n      return\n    }\n    p = stack[i - 1]!\n    if (p.left === n) {\n      s = p.right\n      if (s !== undefined && s.right !== undefined && s.right.color === Node.Color.Red) {\n        s = p.right = Node.clone(s)\n        z = s.right = Node.clone(s.right!)\n        p.right = s.left\n        s.left = p\n        s.right = z\n        s.color = p.color\n        n.color = Node.Color.Black\n        p.color = Node.Color.Black\n        z.color = Node.Color.Black\n        Node.recount(p)\n        Node.recount(s)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.left === p) {\n            pp.left = s\n          } else {\n            pp.right = s\n          }\n        }\n        stack[i - 1] = s\n        return\n      } else if (s !== undefined && s.left !== undefined && s.left.color === Node.Color.Red) {\n        s = p.right = Node.clone(s)\n        z = s.left = Node.clone(s.left!)\n        p.right = z.left\n        s.left = z.right\n        z.left = p\n        z.right = s\n        z.color = p.color\n        p.color = Node.Color.Black\n        s.color = Node.Color.Black\n        n.color = Node.Color.Black\n        Node.recount(p)\n        Node.recount(s)\n        Node.recount(z)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.left === p) {\n            pp.left = z\n          } else {\n            pp.right = z\n          }\n        }\n        stack[i - 1] = z\n        return\n      }\n      if (s !== undefined && s.color === Node.Color.Black) {\n        if (p.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          p.right = Node.repaint(s, Node.Color.Red)\n          return\n        } else {\n          p.right = Node.repaint(s, Node.Color.Red)\n          continue\n        }\n      } else if (s !== undefined) {\n        s = Node.clone(s)\n        p.right = s.left\n        s.left = p\n        s.color = p.color\n        p.color = Node.Color.Red\n        Node.recount(p)\n        Node.recount(s)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.left === p) {\n            pp.left = s\n          } else {\n            pp.right = s\n          }\n        }\n        stack[i - 1] = s\n        stack[i] = p\n        if (i + 1 < stack.length) {\n          stack[i + 1] = n\n        } else {\n          stack.push(n)\n        }\n        i = i + 2\n      }\n    } else {\n      s = p.left\n      if (s !== undefined && s.left !== undefined && s.left.color === Node.Color.Red) {\n        s = p.left = Node.clone(s)\n        z = s.left = Node.clone(s.left!)\n        p.left = s.right\n        s.right = p\n        s.left = z\n        s.color = p.color\n        n.color = Node.Color.Black\n        p.color = Node.Color.Black\n        z.color = Node.Color.Black\n        Node.recount(p)\n        Node.recount(s)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.right === p) {\n            pp.right = s\n          } else {\n            pp.left = s\n          }\n        }\n        stack[i - 1] = s\n        return\n      } else if (s !== undefined && s.right !== undefined && s.right.color === Node.Color.Red) {\n        s = p.left = Node.clone(s)\n        z = s.right = Node.clone(s.right!)\n        p.left = z.right\n        s.right = z.left\n        z.right = p\n        z.left = s\n        z.color = p.color\n        p.color = Node.Color.Black\n        s.color = Node.Color.Black\n        n.color = Node.Color.Black\n        Node.recount(p)\n        Node.recount(s)\n        Node.recount(z)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.right === p) {\n            pp.right = z\n          } else {\n            pp.left = z\n          }\n        }\n        stack[i - 1] = z\n        return\n      }\n      if (s !== undefined && s.color === Node.Color.Black) {\n        if (p.color === Node.Color.Red) {\n          p.color = Node.Color.Black\n          p.left = Node.repaint(s, Node.Color.Red)\n          return\n        } else {\n          p.left = Node.repaint(s, Node.Color.Red)\n          continue\n        }\n      } else if (s !== undefined) {\n        s = Node.clone(s)\n        p.left = s.right\n        s.right = p\n        s.color = p.color\n        p.color = Node.Color.Red\n        Node.recount(p)\n        Node.recount(s)\n        if (i > 1) {\n          const pp = stack[i - 2]!\n          if (pp.right === p) {\n            pp.right = s\n          } else {\n            pp.left = s\n          }\n        }\n        stack[i - 1] = s\n        stack[i] = p\n        if (i + 1 < stack.length) {\n          stack[i + 1] = n\n        } else {\n          stack.push(n)\n        }\n        i = i + 2\n      }\n    }\n  }\n}\n", "import * as Arr from \"../../Array.js\"\nimport * as Option from \"../../Option.js\"\nimport type * as RBT from \"../../RedBlackTree.js\"\nimport type { RedBlackTreeImpl } from \"../redBlackTree.js\"\nimport type * as Node from \"./node.js\"\n\n/** @internal */\nexport const Direction = {\n  Forward: 0 as RBT.RedBlackTree.Direction,\n  Backward: 1 << 0 as RBT.RedBlackTree.Direction\n} as const\n\n/** @internal */\nexport class RedBlackTreeIterator<in out K, out V> implements Iterator<[K, V]> {\n  private count = 0\n\n  constructor(\n    readonly self: RBT.RedBlackTree<K, V>,\n    readonly stack: Array<Node.Node<K, V>>,\n    readonly direction: RBT.RedBlackTree.Direction\n  ) {}\n\n  /**\n   * Clones the iterator\n   */\n  clone(): RedBlackTreeIterator<K, V> {\n    return new RedBlackTreeIterator(this.self, this.stack.slice(), this.direction)\n  }\n\n  /**\n   * Reverse the traversal direction\n   */\n  reversed(): RedBlackTreeIterator<K, V> {\n    return new RedBlackTreeIterator(\n      this.self,\n      this.stack.slice(),\n      this.direction === Direction.Forward ? Direction.Backward : Direction.Forward\n    )\n  }\n\n  /**\n   * Iterator next\n   */\n  next(): IteratorResult<[K, V], number> {\n    const entry = this.entry\n    this.count++\n    if (this.direction === Direction.Forward) {\n      this.moveNext()\n    } else {\n      this.movePrev()\n    }\n    switch (entry._tag) {\n      case \"None\": {\n        return { done: true, value: this.count }\n      }\n      case \"Some\": {\n        return { done: false, value: entry.value }\n      }\n    }\n  }\n\n  /**\n   * Returns the key\n   */\n  get key(): Option.Option<K> {\n    if (this.stack.length > 0) {\n      return Option.some(this.stack[this.stack.length - 1]!.key)\n    }\n    return Option.none()\n  }\n\n  /**\n   * Returns the value\n   */\n  get value(): Option.Option<V> {\n    if (this.stack.length > 0) {\n      return Option.some(this.stack[this.stack.length - 1]!.value)\n    }\n    return Option.none()\n  }\n\n  /**\n   * Returns the key\n   */\n  get entry(): Option.Option<[K, V]> {\n    return Option.map(Arr.last(this.stack), (node) => [node.key, node.value])\n  }\n\n  /**\n   * Returns the position of this iterator in the sorted list\n   */\n  get index(): number {\n    let idx = 0\n    const stack = this.stack\n    if (stack.length === 0) {\n      const r = (this.self as RedBlackTreeImpl<K, V>)._root\n      if (r != null) {\n        return r.count\n      }\n      return 0\n    } else if (stack[stack.length - 1]!.left != null) {\n      idx = stack[stack.length - 1]!.left!.count\n    }\n    for (let s = stack.length - 2; s >= 0; --s) {\n      if (stack[s + 1] === stack[s]!.right) {\n        ++idx\n        if (stack[s]!.left != null) {\n          idx += stack[s]!.left!.count\n        }\n      }\n    }\n    return idx\n  }\n\n  /**\n   * Advances iterator to next element in list\n   */\n  moveNext() {\n    const stack = this.stack\n    if (stack.length === 0) {\n      return\n    }\n    let n: Node.Node<K, V> | undefined = stack[stack.length - 1]!\n    if (n.right != null) {\n      n = n.right\n      while (n != null) {\n        stack.push(n)\n        n = n.left\n      }\n    } else {\n      stack.pop()\n      while (stack.length > 0 && stack[stack.length - 1]!.right === n) {\n        n = stack[stack.length - 1]\n        stack.pop()\n      }\n    }\n  }\n\n  /**\n   * Checks if there is a next element\n   */\n  get hasNext() {\n    const stack = this.stack\n    if (stack.length === 0) {\n      return false\n    }\n    if (stack[stack.length - 1]!.right != null) {\n      return true\n    }\n    for (let s = stack.length - 1; s > 0; --s) {\n      if (stack[s - 1]!.left === stack[s]) {\n        return true\n      }\n    }\n    return false\n  }\n\n  /**\n   * Advances iterator to previous element in list\n   */\n  movePrev() {\n    const stack = this.stack\n    if (stack.length === 0) {\n      return\n    }\n    let n: Node.Node<K, V> | undefined = stack[stack.length - 1]\n    if (n != null && n.left != null) {\n      n = n.left\n      while (n != null) {\n        stack.push(n)\n        n = n.right\n      }\n    } else {\n      stack.pop()\n      while (stack.length > 0 && stack[stack.length - 1]!.left === n) {\n        n = stack[stack.length - 1]\n        stack.pop()\n      }\n    }\n  }\n\n  /**\n   * Checks if there is a previous element\n   */\n  get hasPrev() {\n    const stack = this.stack\n    if (stack.length === 0) {\n      return false\n    }\n    if (stack[stack.length - 1]!.left != null) {\n      return true\n    }\n    for (let s = stack.length - 1; s > 0; --s) {\n      if (stack[s - 1]!.right === stack[s]) {\n        return true\n      }\n    }\n    return false\n  }\n}\n", "/** @internal */\nexport const Color = {\n  Red: 0 as Node.Color,\n  Black: 1 << 0 as Node.Color\n} as const\n\nexport declare namespace Node {\n  export type Color = number & {\n    readonly Color: unique symbol\n  }\n}\n\nexport interface Node<out K, out V> {\n  color: Node.Color\n  key: K\n  value: V\n  left: Node<K, V> | undefined\n  right: Node<K, V> | undefined\n  count: number\n}\n\n/** @internal */\nexport const clone = <K, V>({\n  color,\n  count,\n  key,\n  left,\n  right,\n  value\n}: Node<K, V>) => ({\n  color,\n  key,\n  value,\n  left,\n  right,\n  count\n})\n\n/** @internal */\nexport function swap<K, V>(n: Node<K, V>, v: Node<K, V>) {\n  n.key = v.key\n  n.value = v.value\n  n.left = v.left\n  n.right = v.right\n  n.color = v.color\n  n.count = v.count\n}\n\n/** @internal */\nexport const repaint = <K, V>({\n  count,\n  key,\n  left,\n  right,\n  value\n}: Node<K, V>, color: Node.Color) => ({\n  color,\n  key,\n  value,\n  left,\n  right,\n  count\n})\n\n/** @internal */\nexport const recount = <K, V>(node: Node<K, V>) => {\n  node.count = 1 + (node.left?.count ?? 0) + (node.right?.count ?? 0)\n}\n", "import * as Chunk from \"../../Chunk.js\"\nimport * as Differ from \"../../Differ.js\"\nimport * as Equal from \"../../Equal.js\"\nimport { pipe } from \"../../Function.js\"\nimport * as HashSet from \"../../HashSet.js\"\nimport type * as Supervisor from \"../../Supervisor.js\"\nimport * as supervisor from \"../supervisor.js\"\n\n/** @internal */\nexport type SupervisorPatch = Empty | AddSupervisor | RemoveSupervisor | AndThen\n\n/** @internal */\nexport const OP_EMPTY = \"Empty\" as const\n\n/** @internal */\nexport type OP_EMPTY = typeof OP_EMPTY\n\n/** @internal */\nexport const OP_ADD_SUPERVISOR = \"AddSupervisor\" as const\n\n/** @internal */\nexport type OP_ADD_SUPERVISOR = typeof OP_ADD_SUPERVISOR\n\n/** @internal */\nexport const OP_REMOVE_SUPERVISOR = \"RemoveSupervisor\" as const\n\n/** @internal */\nexport type OP_REMOVE_SUPERVISOR = typeof OP_REMOVE_SUPERVISOR\n\n/** @internal */\nexport const OP_AND_THEN = \"AndThen\" as const\n\n/** @internal */\nexport type OP_AND_THEN = typeof OP_AND_THEN\n\n/** @internal */\nexport interface Empty {\n  readonly _tag: OP_EMPTY\n}\n\n/** @internal */\nexport interface AddSupervisor {\n  readonly _tag: OP_ADD_SUPERVISOR\n  readonly supervisor: Supervisor.Supervisor<any>\n}\n\n/** @internal */\nexport interface RemoveSupervisor {\n  readonly _tag: OP_REMOVE_SUPERVISOR\n  readonly supervisor: Supervisor.Supervisor<any>\n}\n\n/** @internal */\nexport interface AndThen {\n  readonly _tag: OP_AND_THEN\n  readonly first: SupervisorPatch\n  readonly second: SupervisorPatch\n}\n\n/**\n * The empty `SupervisorPatch`.\n *\n * @internal\n */\nexport const empty: SupervisorPatch = { _tag: OP_EMPTY }\n\n/**\n * Combines two patches to produce a new patch that describes applying the\n * updates from this patch and then the updates from the specified patch.\n *\n * @internal\n */\nexport const combine = (self: SupervisorPatch, that: SupervisorPatch): SupervisorPatch => {\n  return {\n    _tag: OP_AND_THEN,\n    first: self,\n    second: that\n  }\n}\n\n/**\n * Applies a `SupervisorPatch` to a `Supervisor` to produce a new `Supervisor`.\n *\n * @internal\n */\nexport const patch = (\n  self: SupervisorPatch,\n  supervisor: Supervisor.Supervisor<any>\n): Supervisor.Supervisor<any> => {\n  return patchLoop(supervisor, Chunk.of(self))\n}\n\n/** @internal */\nconst patchLoop = (\n  _supervisor: Supervisor.Supervisor<any>,\n  _patches: Chunk.Chunk<SupervisorPatch>\n): Supervisor.Supervisor<any> => {\n  let supervisor = _supervisor\n  let patches = _patches\n  while (Chunk.isNonEmpty(patches)) {\n    const head = Chunk.headNonEmpty(patches)\n    switch (head._tag) {\n      case OP_EMPTY: {\n        patches = Chunk.tailNonEmpty(patches)\n        break\n      }\n      case OP_ADD_SUPERVISOR: {\n        supervisor = supervisor.zip(head.supervisor)\n        patches = Chunk.tailNonEmpty(patches)\n        break\n      }\n      case OP_REMOVE_SUPERVISOR: {\n        supervisor = removeSupervisor(supervisor, head.supervisor)\n        patches = Chunk.tailNonEmpty(patches)\n        break\n      }\n      case OP_AND_THEN: {\n        patches = Chunk.prepend(head.first)(Chunk.prepend(head.second)(Chunk.tailNonEmpty(patches)))\n        break\n      }\n    }\n  }\n  return supervisor\n}\n\n/** @internal */\nconst removeSupervisor = (\n  self: Supervisor.Supervisor<any>,\n  that: Supervisor.Supervisor<any>\n): Supervisor.Supervisor<any> => {\n  if (Equal.equals(self, that)) {\n    return supervisor.none\n  } else {\n    if (supervisor.isZip(self)) {\n      return removeSupervisor(self.left, that).zip(removeSupervisor(self.right, that))\n    } else {\n      return self\n    }\n  }\n}\n\n/** @internal */\nconst toSet = (self: Supervisor.Supervisor<any>): HashSet.HashSet<Supervisor.Supervisor<any>> => {\n  if (Equal.equals(self, supervisor.none)) {\n    return HashSet.empty()\n  } else {\n    if (supervisor.isZip(self)) {\n      return pipe(toSet(self.left), HashSet.union(toSet(self.right)))\n    } else {\n      return HashSet.make(self)\n    }\n  }\n}\n\n/** @internal */\nexport const diff = (\n  oldValue: Supervisor.Supervisor<any>,\n  newValue: Supervisor.Supervisor<any>\n): SupervisorPatch => {\n  if (Equal.equals(oldValue, newValue)) {\n    return empty\n  }\n  const oldSupervisors = toSet(oldValue)\n  const newSupervisors = toSet(newValue)\n  const added = pipe(\n    newSupervisors,\n    HashSet.difference(oldSupervisors),\n    HashSet.reduce(\n      empty as SupervisorPatch,\n      (patch, supervisor) => combine(patch, { _tag: OP_ADD_SUPERVISOR, supervisor })\n    )\n  )\n  const removed = pipe(\n    oldSupervisors,\n    HashSet.difference(newSupervisors),\n    HashSet.reduce(\n      empty as SupervisorPatch,\n      (patch, supervisor) => combine(patch, { _tag: OP_REMOVE_SUPERVISOR, supervisor })\n    )\n  )\n  return combine(added, removed)\n}\n\n/** @internal */\nexport const differ = Differ.make<Supervisor.Supervisor<any>, SupervisorPatch>({\n  empty,\n  patch,\n  combine,\n  diff\n})\n", "/**\n * @since 2.0.0\n */\nimport type { Chunk } from \"./Chunk.js\"\nimport type { Context } from \"./Context.js\"\nimport type { Either } from \"./Either.js\"\nimport type { Equal } from \"./Equal.js\"\nimport * as Dual from \"./Function.js\"\nimport type { HashMap } from \"./HashMap.js\"\nimport type { HashSet } from \"./HashSet.js\"\nimport * as internal from \"./internal/differ.js\"\nimport * as ChunkPatch from \"./internal/differ/chunkPatch.js\"\nimport * as ContextPatch from \"./internal/differ/contextPatch.js\"\nimport * as HashMapPatch from \"./internal/differ/hashMapPatch.js\"\nimport * as HashSetPatch from \"./internal/differ/hashSetPatch.js\"\nimport * as OrPatch from \"./internal/differ/orPatch.js\"\nimport * as ReadonlyArrayPatch from \"./internal/differ/readonlyArrayPatch.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport const TypeId: unique symbol = internal.DifferTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * A `Differ<Value, Patch>` knows how to compare an old value and new value of\n * type `Value` to produce a patch of type `Patch` that describes the\n * differences between those values. A `Differ` also knows how to apply a patch\n * to an old value to produce a new value that represents the old value updated\n * with the changes described by the patch.\n *\n * A `Differ` can be used to construct a `FiberRef` supporting compositional\n * updates using the `FiberRef.makePatch` constructor.\n *\n * The `Differ` companion object contains constructors for `Differ` values for\n * common data types such as `Chunk`, `HashMap`, and `HashSet``. In addition,\n * `Differ`values can be transformed using the `transform` operator and combined\n * using the `orElseEither` and `zip` operators. This allows creating `Differ`\n * values for arbitrarily complex data types compositionally.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Differ<in out Value, in out Patch> extends Pipeable {\n  readonly [TypeId]: {\n    readonly _V: Types.Invariant<Value>\n    readonly _P: Types.Invariant<Patch>\n  }\n  readonly empty: Patch\n  diff(oldValue: Value, newValue: Value): Patch\n  combine(first: Patch, second: Patch): Patch\n  patch(patch: Patch, oldValue: Value): Value\n}\n\nconst ChunkPatchTypeId: unique symbol = ChunkPatch.ChunkPatchTypeId as Differ.Chunk.TypeId\nconst ContextPatchTypeId: unique symbol = ContextPatch.ContextPatchTypeId as Differ.Context.TypeId\nconst HashMapPatchTypeId: unique symbol = HashMapPatch.HashMapPatchTypeId as Differ.HashMap.TypeId\nconst HashSetPatchTypeId: unique symbol = HashSetPatch.HashSetPatchTypeId as Differ.HashSet.TypeId\nconst OrPatchTypeId: unique symbol = OrPatch.OrPatchTypeId as Differ.Or.TypeId\nconst ReadonlyArrayPatchTypeId: unique symbol = ReadonlyArrayPatch\n  .ReadonlyArrayPatchTypeId as Differ.ReadonlyArray.TypeId\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Differ {\n  /**\n   * @since 2.0.0\n   */\n  export namespace Context {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof ContextPatchTypeId\n    /**\n     * A `Patch<Input, Output>` describes an update that transforms a `Env<Input>`\n     * to a `Env<Output>` as a data structure. This allows combining updates to\n     * different services in the environment in a compositional way.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in Input, out Output> extends Equal {\n      readonly [ContextPatchTypeId]: {\n        readonly _Input: Types.Contravariant<Input>\n        readonly _Output: Types.Covariant<Output>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace Chunk {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof ChunkPatchTypeId\n    /**\n     * A patch which describes updates to a chunk of values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value, in out Patch> extends Equal {\n      readonly [ChunkPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n        readonly _Patch: Types.Invariant<Patch>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace HashMap {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof HashMapPatchTypeId\n    /**\n     * A patch which describes updates to a map of keys and values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Key, in out Value, in out Patch> extends Equal {\n      readonly [HashMapPatchTypeId]: {\n        readonly _Key: Types.Invariant<Key>\n        readonly _Value: Types.Invariant<Value>\n        readonly _Patch: Types.Invariant<Patch>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace HashSet {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof HashSetPatchTypeId\n    /**\n     * A patch which describes updates to a set of values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value> extends Equal {\n      readonly [HashSetPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace Or {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof OrPatchTypeId\n    /**\n     * A patch which describes updates to either one value or another.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value, in out Value2, in out Patch, in out Patch2> extends Equal {\n      readonly [OrPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n        readonly _Value2: Types.Invariant<Value2>\n        readonly _Patch: Types.Invariant<Patch>\n        readonly _Patch2: Types.Invariant<Patch2>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace ReadonlyArray {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof ReadonlyArrayPatchTypeId\n    /**\n     * A patch which describes updates to a ReadonlyArray of values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value, in out Patch> extends Equal {\n      readonly [ReadonlyArrayPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n        readonly _Patch: Types.Invariant<Patch>\n      }\n    }\n  }\n}\n\n/**\n * An empty patch that describes no changes.\n *\n * @since 2.0.0\n * @category patch\n */\nexport const empty: <Value, Patch>(self: Differ<Value, Patch>) => Patch = (\n  self\n) => self.empty\n\n/**\n * @since 2.0.0\n * @category patch\n */\nexport const diff: {\n  /**\n   * @since 2.0.0\n   * @category patch\n   */\n  <Value>(oldValue: Value, newValue: Value): <Patch>(\n    self: Differ<Value, Patch>\n  ) => Patch\n  /**\n   * @since 2.0.0\n   * @category patch\n   */\n  <Value, Patch>(self: Differ<Value, Patch>, oldValue: Value, newValue: Value): Patch\n} = Dual.dual(\n  3,\n  <Value, Patch>(\n    self: Differ<Value, Patch>,\n    oldValue: Value,\n    newValue: Value\n  ): Patch => self.diff(oldValue, newValue)\n)\n\n/**\n * Combines two patches to produce a new patch that describes the updates of\n * the first patch and then the updates of the second patch. The combine\n * operation should be associative. In addition, if the combine operation is\n * commutative then joining multiple fibers concurrently will result in\n * deterministic `FiberRef` values.\n *\n * @since 2.0.0\n * @category patch\n */\nexport const combine: {\n  /**\n   * Combines two patches to produce a new patch that describes the updates of\n   * the first patch and then the updates of the second patch. The combine\n   * operation should be associative. In addition, if the combine operation is\n   * commutative then joining multiple fibers concurrently will result in\n   * deterministic `FiberRef` values.\n   *\n   * @since 2.0.0\n   * @category patch\n   */\n  <Patch>(first: Patch, second: Patch): <Value>(\n    self: Differ<Value, Patch>\n  ) => Patch\n  /**\n   * Combines two patches to produce a new patch that describes the updates of\n   * the first patch and then the updates of the second patch. The combine\n   * operation should be associative. In addition, if the combine operation is\n   * commutative then joining multiple fibers concurrently will result in\n   * deterministic `FiberRef` values.\n   *\n   * @since 2.0.0\n   * @category patch\n   */\n  <Value, Patch>(self: Differ<Value, Patch>, first: Patch, second: Patch): Patch\n} = Dual.dual(\n  3,\n  <Value, Patch>(\n    self: Differ<Value, Patch>,\n    first: Patch,\n    second: Patch\n  ): Patch => self.combine(first, second)\n)\n\n/**\n * Applies a patch to an old value to produce a new value that is equal to the\n * old value with the updates described by the patch.\n *\n * @since 2.0.0\n * @category patch\n */\nexport const patch: {\n  /**\n   * Applies a patch to an old value to produce a new value that is equal to the\n   * old value with the updates described by the patch.\n   *\n   * @since 2.0.0\n   * @category patch\n   */\n  <Patch, Value>(patch: Patch, oldValue: Value): (\n    self: Differ<Value, Patch>\n  ) => Value\n  /**\n   * Applies a patch to an old value to produce a new value that is equal to the\n   * old value with the updates described by the patch.\n   *\n   * @since 2.0.0\n   * @category patch\n   */\n  <Patch, Value>(self: Differ<Value, Patch>, patch: Patch, oldValue: Value): Value\n} = Dual.dual(\n  3,\n  <Patch, Value>(\n    self: Differ<Value, Patch>,\n    patch: Patch,\n    oldValue: Value\n  ): Value => self.patch(patch, oldValue)\n)\n\n/**\n * Constructs a new `Differ`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <Value, Patch>(params: {\n  readonly empty: Patch\n  readonly diff: (oldValue: Value, newValue: Value) => Patch\n  readonly combine: (first: Patch, second: Patch) => Patch\n  readonly patch: (patch: Patch, oldValue: Value) => Value\n}) => Differ<Value, Patch> = internal.make\n\n/**\n * Constructs a differ that knows how to diff `Env` values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const environment: <A>() => Differ<\n  Context<A>,\n  Differ.Context.Patch<A, A>\n> = internal.environment\n\n/**\n * Constructs a differ that knows how to diff a `Chunk` of values given a\n * differ that knows how to diff the values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const chunk: <Value, Patch>(\n  differ: Differ<Value, Patch>\n) => Differ<Chunk<Value>, Differ.Chunk.Patch<Value, Patch>> = internal.chunk\n\n/**\n * Constructs a differ that knows how to diff a `HashMap` of keys and values given\n * a differ that knows how to diff the values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const hashMap: <Key, Value, Patch>(\n  differ: Differ<Value, Patch>\n) => Differ<HashMap<Key, Value>, Differ.HashMap.Patch<Key, Value, Patch>> = internal.hashMap\n\n/**\n * Constructs a differ that knows how to diff a `HashSet` of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const hashSet: <Value>() => Differ<\n  HashSet<Value>,\n  Differ.HashSet.Patch<Value>\n> = internal.hashSet\n\n/**\n * Combines this differ and the specified differ to produce a differ that\n * knows how to diff the sum of their values.\n *\n * @since 2.0.0\n */\nexport const orElseEither: {\n  /**\n   * Combines this differ and the specified differ to produce a differ that\n   * knows how to diff the sum of their values.\n   *\n   * @since 2.0.0\n   */\n  <Value2, Patch2>(that: Differ<Value2, Patch2>): <Value, Patch>(\n    self: Differ<Value, Patch>\n  ) => Differ<\n    Either<Value2, Value>,\n    Differ.Or.Patch<Value, Value2, Patch, Patch2>\n  >\n  /**\n   * Combines this differ and the specified differ to produce a differ that\n   * knows how to diff the sum of their values.\n   *\n   * @since 2.0.0\n   */\n  <Value, Patch, Value2, Patch2>(self: Differ<Value, Patch>, that: Differ<Value2, Patch2>): Differ<\n    Either<Value2, Value>,\n    Differ.Or.Patch<Value, Value2, Patch, Patch2>\n  >\n} = internal.orElseEither\n\n/**\n * Constructs a differ that knows how to diff a `ReadonlyArray` of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const readonlyArray: <Value, Patch>(\n  differ: Differ<Value, Patch>\n) => Differ<ReadonlyArray<Value>, Differ.ReadonlyArray.Patch<Value, Patch>> = internal.readonlyArray\n\n/**\n * Transforms the type of values that this differ knows how to differ using\n * the specified functions that map the new and old value types to each other.\n *\n * @since 2.0.0\n */\nexport const transform: {\n  /**\n   * Transforms the type of values that this differ knows how to differ using\n   * the specified functions that map the new and old value types to each other.\n   *\n   * @since 2.0.0\n   */\n  <Value, Value2>(\n    options: {\n      readonly toNew: (value: Value) => Value2\n      readonly toOld: (value: Value2) => Value\n    }\n  ): <Patch>(self: Differ<Value, Patch>) => Differ<Value2, Patch>\n  /**\n   * Transforms the type of values that this differ knows how to differ using\n   * the specified functions that map the new and old value types to each other.\n   *\n   * @since 2.0.0\n   */\n  <Value, Patch, Value2>(\n    self: Differ<Value, Patch>,\n    options: {\n      readonly toNew: (value: Value) => Value2\n      readonly toOld: (value: Value2) => Value\n    }\n  ): Differ<Value2, Patch>\n} = internal.transform\n\n/**\n * Constructs a differ that just diffs two values by returning a function that\n * sets the value to the new value. This differ does not support combining\n * multiple updates to the value compositionally and should only be used when\n * there is no compositional way to update them.\n *\n * @since 2.0.0\n */\nexport const update: <A>() => Differ<A, (a: A) => A> = internal.update\n\n/**\n * A variant of `update` that allows specifying the function that will be used\n * to combine old values with new values.\n *\n * @since 2.0.0\n */\nexport const updateWith: <A>(f: (x: A, y: A) => A) => Differ<A, (a: A) => A> = internal.updateWith\n\n/**\n * Combines this differ and the specified differ to produce a new differ that\n * knows how to diff the product of their values.\n *\n * @since 2.0.0\n */\nexport const zip: {\n  /**\n   * Combines this differ and the specified differ to produce a new differ that\n   * knows how to diff the product of their values.\n   *\n   * @since 2.0.0\n   */\n  <Value2, Patch2>(that: Differ<Value2, Patch2>): <Value, Patch>(\n    self: Differ<Value, Patch>\n  ) => Differ<\n    readonly [Value, Value2], // readonly because invariant\n    readonly [Patch, Patch2] // readonly because invariant\n  >\n  /**\n   * Combines this differ and the specified differ to produce a new differ that\n   * knows how to diff the product of their values.\n   *\n   * @since 2.0.0\n   */\n  <Value, Patch, Value2, Patch2>(self: Differ<Value, Patch>, that: Differ<Value2, Patch2>): Differ<\n    readonly [Value, Value2], // readonly because invariant\n    readonly [Patch, Patch2] // readonly because invariant\n  >\n} = internal.zip\n", "/**\n * The `Effect<A, E, R>` type is polymorphic in values of type `E` and we can\n * work with any error type that we want. However, there is a lot of information\n * that is not inside an arbitrary `E` value. So as a result, an `Effect` needs\n * somewhere to store things like unexpected errors or defects, stack and\n * execution traces, causes of fiber interruptions, and so forth.\n *\n * Effect-TS is very strict about preserving the full information related to a\n * failure. It captures all type of errors into the `Cause` data type. `Effect`\n * uses the `Cause<E>` data type to store the full story of failure. So its\n * error model is lossless. It doesn't throw information related to the failure\n * result. So we can figure out exactly what happened during the operation of\n * our effects.\n *\n * It is important to note that `Cause` is an underlying data type representing\n * errors occuring within an `Effect` workflow. Thus, we don't usually deal with\n * `Cause`s directly. Even though it is not a data type that we deal with very\n * often, the `Cause` of a failing `Effect` workflow can be accessed at any\n * time, which gives us total access to all parallel and sequential errors in\n * occurring within our codebase.\n *\n * @since 2.0.0\n */\nimport type * as Channel from \"./Channel.js\"\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type * as Equal from \"./Equal.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as internal from \"./internal/cause.js\"\nimport * as core from \"./internal/core.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type * as Sink from \"./Sink.js\"\nimport type * as Stream from \"./Stream.js\"\nimport type { Span } from \"./Tracer.js\"\nimport type { Covariant, NoInfer } from \"./Types.js\"\n\n/**\n * A unique symbol identifying the `Cause` type.\n *\n * **Details**\n *\n * This provides a symbol that helps identify instances of the `Cause` data\n * type. This can be used for advanced operations such as refining types or\n * building internal utilities that check whether an unknown value is a `Cause`.\n *\n * @see {@link isCause} Check if a value is a `Cause`\n *\n * @since 2.0.0\n * @category Symbols\n */\nexport const CauseTypeId: unique symbol = internal.CauseTypeId\n\n/**\n * @since 2.0.0\n * @category Symbols\n */\nexport type CauseTypeId = typeof CauseTypeId\n\n/**\n * A unique symbol identifying the `RuntimeException` type.\n *\n * **Details**\n *\n * This provides a symbol that identifies a `RuntimeException`. This is\n * typically used internally by the library to recognize checked exceptions that\n * occur during runtime.\n *\n * @see {@link RuntimeException} Create or work with a `RuntimeException`\n *\n * @since 2.0.0\n * @category Symbols\n */\nexport const RuntimeExceptionTypeId: unique symbol = core.RuntimeExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category Symbols\n */\nexport type RuntimeExceptionTypeId = typeof RuntimeExceptionTypeId\n\n/**\n * A unique symbol identifying the `InterruptedException` type.\n *\n * **Details**\n *\n * This provides a symbol that identifies an `InterruptedException`. This is\n * typically used internally to recognize when a fiber has been interrupted,\n * helping the framework handle interruption logic correctly.\n *\n * @see {@link InterruptedException} Create or work with an `InterruptedException`\n *\n * @since 2.0.0\n * @category Symbols\n */\nexport const InterruptedExceptionTypeId: unique symbol = core.InterruptedExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category Symbols\n */\nexport type InterruptedExceptionTypeId = typeof InterruptedExceptionTypeId\n\n/**\n * A unique symbol identifying the `IllegalArgumentException` type.\n *\n * **Details**\n *\n * This provides a symbol that identifies an `IllegalArgumentException`. This is\n * often used in scenarios where invalid arguments are supplied to methods that\n * expect specific input.\n *\n * @see {@link IllegalArgumentException} Create or work with an `IllegalArgumentException`\n *\n * @since 2.0.0\n * @category Symbols\n */\nexport const IllegalArgumentExceptionTypeId: unique symbol = core.IllegalArgumentExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category Symbols\n */\nexport type IllegalArgumentExceptionTypeId = typeof IllegalArgumentExceptionTypeId\n\n/**\n * A unique symbol identifying the `NoSuchElementException` type.\n *\n * **Details**\n *\n * This provides a symbol that identifies a `NoSuchElementException`. It helps\n * differentiate cases where a required element is missing within a data\n * structure.\n *\n * @see {@link NoSuchElementException} Create or work with a `NoSuchElementException`\n *\n * @since 2.0.0\n * @category Symbols\n */\nexport const NoSuchElementExceptionTypeId: unique symbol = core.NoSuchElementExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category Symbols\n */\nexport type NoSuchElementExceptionTypeId = typeof NoSuchElementExceptionTypeId\n\n/**\n * A unique symbol identifying the `InvalidPubSubCapacityException` type.\n *\n * **Details**\n *\n * This provides a symbol that identifies an `InvalidPubSubCapacityException`.\n * It indicates an error related to an invalid capacity passed to a `PubSub`\n * structure.\n *\n * @see {@link InvalidPubSubCapacityException} Create or work with an `InvalidPubSubCapacityException`\n *\n * @since 2.0.0\n * @category Symbols\n */\nexport const InvalidPubSubCapacityExceptionTypeId: unique symbol = core.InvalidPubSubCapacityExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category Symbols\n */\nexport type InvalidPubSubCapacityExceptionTypeId = typeof InvalidPubSubCapacityExceptionTypeId\n\n/**\n * A unique symbol identifying the `ExceededCapacityException` type.\n *\n * **Details**\n *\n * This provides a symbol that identifies an `ExceededCapacityException`. It\n * denotes situations where a resource has exceeded its configured capacity\n * limit.\n *\n * @see {@link ExceededCapacityException} Create or work with an `ExceededCapacityException`\n *\n * @since 3.5.0\n * @category Symbols\n */\nexport const ExceededCapacityExceptionTypeId: unique symbol = core.ExceededCapacityExceptionTypeId\n\n/**\n * @since 3.5.0\n * @category Symbols\n */\nexport type ExceededCapacityExceptionTypeId = typeof ExceededCapacityExceptionTypeId\n\n/**\n * A unique symbol identifying the `TimeoutException` type.\n *\n * **Details**\n *\n * This provides a symbol that identifies a `TimeoutException`. It helps the\n * framework recognize errors related to operations that fail to complete within\n * a given timeframe.\n *\n * @see {@link TimeoutException} Create or work with a `TimeoutException`\n *\n * @since 2.0.0\n * @category Symbols\n */\nexport const TimeoutExceptionTypeId: unique symbol = core.TimeoutExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category Symbols\n */\nexport type TimeoutExceptionTypeId = typeof TimeoutExceptionTypeId\n\n/**\n * A unique symbol identifying the `UnknownException` type.\n *\n * **Details**\n *\n * This provides a symbol that identifies an `UnknownException`. It is typically\n * used for generic or unexpected errors that do not fit other specific\n * exception categories.\n *\n * @see {@link UnknownException} Create or work with an `UnknownException`\n *\n * @since 2.0.0\n * @category Symbols\n */\nexport const UnknownExceptionTypeId: unique symbol = core.UnknownExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category Symbols\n */\nexport type UnknownExceptionTypeId = typeof UnknownExceptionTypeId\n\n/**\n * Represents the full history of a failure within an `Effect`.\n *\n * **Details**\n *\n * This type is a data structure that captures all information about why and how\n * an effect has failed, including parallel errors, sequential errors, defects,\n * and interruptions. It enables a \"lossless\" error model: no error-related\n * information is discarded, which helps in debugging and understanding the root\n * cause of failures.\n *\n * @since 2.0.0\n * @category Models\n */\nexport type Cause<E> =\n  | Empty\n  | Fail<E>\n  | Die\n  | Interrupt\n  | Sequential<E>\n  | Parallel<E>\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Cause {\n  /**\n   * This interface is used internally to manage the type variance of `Cause`.\n   *\n   * @since 2.0.0\n   * @category Models\n   */\n  export interface Variance<out E> {\n    readonly [CauseTypeId]: {\n      readonly _E: Covariant<E>\n    }\n  }\n}\n\n/**\n * Describes methods for reducing a `Cause<E>` into a value of type `Z` with\n * access to contextual information.\n *\n * **Details**\n *\n * This interface is meant for advanced transformations of `Cause`. By\n * implementing each method, you can define how different parts of the `Cause`\n * structure (like `Fail`, `Die`, or `Interrupt`) should be transformed into a\n * final type `Z`. The `context` parameter carries additional data needed during\n * this reduction.\n *\n * @see {@link reduceWithContext} Apply a `CauseReducer` to transform a `Cause`\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface CauseReducer<in C, in E, in out Z> {\n  emptyCase(context: C): Z\n  failCase(context: C, error: E): Z\n  dieCase(context: C, defect: unknown): Z\n  interruptCase(context: C, fiberId: FiberId.FiberId): Z\n  sequentialCase(context: C, left: Z, right: Z): Z\n  parallelCase(context: C, left: Z, right: Z): Z\n}\n\n/**\n * Represents an error object that can be yielded in `Effect.gen`.\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface YieldableError extends Pipeable, Inspectable, Error {\n  readonly [Effect.EffectTypeId]: Effect.Effect.VarianceStruct<never, this, never>\n  readonly [Stream.StreamTypeId]: Stream.Stream.VarianceStruct<never, this, never>\n  readonly [Sink.SinkTypeId]: Sink.Sink.VarianceStruct<never, unknown, never, this, never>\n  readonly [Channel.ChannelTypeId]: Channel.Channel.VarianceStruct<never, unknown, this, unknown, never, unknown, never>\n  [Symbol.iterator](): Effect.EffectGenerator<Effect.Effect<never, this, never>>\n}\n\n/**\n * Creates an error that occurs at runtime, extendable for other exception\n * types.\n *\n * @since 2.0.0\n * @category Errors\n */\nexport const YieldableError: new(message?: string | undefined) => YieldableError = core.YieldableError\n\n/**\n * An error representing a runtime error.\n *\n * **Details**\n *\n * This interface is used for errors that occur at runtime but are still\n * considered recoverable or typed.\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface RuntimeException extends YieldableError {\n  readonly _tag: \"RuntimeException\"\n  readonly [RuntimeExceptionTypeId]: RuntimeExceptionTypeId\n}\n\n/**\n * An error representing fiber interruption.\n *\n * **Details**\n *\n * This interface represents errors that occur when a fiber is forcefully\n * interrupted. Interruption can happen for various reasons, including\n * cancellations or system directives to halt operations. Code that deals with\n * concurrency might need to catch or handle these to ensure proper cleanup.\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface InterruptedException extends YieldableError {\n  readonly _tag: \"InterruptedException\"\n  readonly [InterruptedExceptionTypeId]: InterruptedExceptionTypeId\n}\n\n/**\n * An error representing an invalid argument passed to a method.\n *\n * **Details**\n *\n * This interface is used for signaling that a function or method received an\n * argument that does not meet its preconditions.\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface IllegalArgumentException extends YieldableError {\n  readonly _tag: \"IllegalArgumentException\"\n  readonly [IllegalArgumentExceptionTypeId]: IllegalArgumentExceptionTypeId\n}\n\n/**\n * An error that occurs when an expected element is missing.\n *\n * **Details**\n *\n * This interface indicates scenarios like looking up an item in a collection\n * or searching for data that should be present but isn't. It helps your code\n * signal a more specific issue rather than a general error.\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface NoSuchElementException extends YieldableError {\n  readonly _tag: \"NoSuchElementException\"\n  readonly [NoSuchElementExceptionTypeId]: NoSuchElementExceptionTypeId\n}\n\n/**\n * An error indicating invalid capacity for a `PubSub`.\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface InvalidPubSubCapacityException extends YieldableError {\n  readonly _tag: \"InvalidPubSubCapacityException\"\n  readonly [InvalidPubSubCapacityExceptionTypeId]: InvalidPubSubCapacityExceptionTypeId\n}\n\n/**\n * An error that occurs when resource capacity is exceeded.\n *\n * @since 3.5.0\n * @category Models\n */\nexport interface ExceededCapacityException extends YieldableError {\n  readonly _tag: \"ExceededCapacityException\"\n  readonly [ExceededCapacityExceptionTypeId]: ExceededCapacityExceptionTypeId\n}\n\n/**\n * An error representing a computation that timed out.\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface TimeoutException extends YieldableError {\n  readonly _tag: \"TimeoutException\"\n  readonly [TimeoutExceptionTypeId]: TimeoutExceptionTypeId\n}\n\n/**\n * A checked exception for handling unknown or unexpected errors.\n *\n * **Details**\n *\n * This interface captures errors that don't fall under known categories. It is\n * especially helpful for wrapping low-level or third-party library errors that\n * might provide little or no context, such as from a rejected promise.\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface UnknownException extends YieldableError {\n  readonly _tag: \"UnknownException\"\n  readonly [UnknownExceptionTypeId]: UnknownExceptionTypeId\n  readonly error: unknown\n}\n\n/**\n * Represents a lack of errors within a `Cause`.\n *\n * @see {@link empty} Construct a new `Empty` cause\n * @see {@link isEmptyType} Check if a `Cause` is an `Empty` type\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface Empty extends Cause.Variance<never>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Empty\"\n}\n\n/**\n * Represents an expected error within a `Cause`.\n *\n * **Details**\n *\n * This interface models a `Cause` that carries an expected or known error of\n * type `E`. For example, if you validate user input and find it invalid, you\n * might store that error within a `Fail`.\n *\n * @see {@link fail} Construct a `Fail` cause\n * @see {@link isFailType} Check if a `Cause` is a `Fail`\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface Fail<out E> extends Cause.Variance<E>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Fail\"\n  readonly error: E\n}\n\n/**\n * Represents an unexpected defect within a `Cause`.\n *\n * **Details**\n *\n * This interface models a `Cause` for errors that are typically unrecoverable or\n * unanticipated—like runtime exceptions or bugs. When code \"dies,\" it indicates a\n * severe failure that wasn't accounted for.\n *\n * @see {@link die} Construct a `Die` cause\n * @see {@link isDieType} Check if a `Cause` is a `Die`\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface Die extends Cause.Variance<never>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Die\"\n  readonly defect: unknown\n}\n\n/**\n * Represents fiber interruption within a `Cause`.\n *\n * **Details**\n *\n * This interface models a scenario where an effect was halted by an external\n * signal, carrying a `FiberId` that identifies which fiber was interrupted.\n * Interruption is a normal part of concurrency, used for cancellation or\n * resource cleanup.\n *\n * @see {@link interrupt} Construct an `Interrupt` cause\n * @see {@link isInterruptType} Check if a `Cause` is an `Interrupt`\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface Interrupt extends Cause.Variance<never>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Interrupt\"\n  readonly fiberId: FiberId.FiberId\n}\n\n/**\n * Represents parallel composition of two `Cause`s.\n *\n * **Details**\n *\n * This interface captures failures that happen simultaneously. In scenarios\n * with concurrency, more than one operation can fail in parallel. Instead of\n * losing information, this structure stores both errors together.\n *\n * @see {@link parallel} Combine two `Cause`s in parallel\n * @see {@link isParallelType} Check if a `Cause` is a `Parallel`\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface Parallel<out E> extends Cause.Variance<E>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Parallel\"\n  readonly left: Cause<E>\n  readonly right: Cause<E>\n}\n\n/**\n * Represents sequential composition of two `Cause`s.\n *\n * **Details**\n *\n * This interface models the scenario where one error follows another in\n * sequence, such as when a main effect fails and then a finalizer also fails.\n * It ensures both errors are retained in the final `Cause`.\n *\n * @see {@link sequential} Combine two `Cause`s sequentially\n * @see {@link isSequentialType} Check if a `Cause` is a `Sequential`\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface Sequential<out E> extends Cause.Variance<E>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Sequential\"\n  readonly left: Cause<E>\n  readonly right: Cause<E>\n}\n\n/**\n * Creates an `Empty` cause.\n *\n * **Details**\n *\n * This function returns a cause that signifies \"no error.\" It's commonly used\n * to represent an absence of failure conditions.\n *\n * @see {@link isEmpty} Check if a `Cause` is empty\n *\n * @since 2.0.0\n * @category Constructors\n */\nexport const empty: Cause<never> = internal.empty\n\n/**\n * Creates a `Fail` cause from an expected error.\n *\n * **Details**\n *\n * This function constructs a `Cause` carrying an error of type `E`. It's used\n * when you want to represent a known or anticipated failure in your effectful\n * computations.\n *\n * @see {@link isFailure} Check if a `Cause` contains a failure\n *\n * @since 2.0.0\n * @category Constructors\n */\nexport const fail: <E>(error: E) => Cause<E> = internal.fail\n\n/**\n * Creates a `Die` cause from an unexpected error.\n *\n * **Details**\n *\n * This function wraps an unhandled or unknown defect (like a runtime crash)\n * into a `Cause`. It's useful for capturing unforeseen issues in a structured\n * way.\n *\n * @see {@link isDie} Check if a `Cause` contains a defect\n *\n * @since 2.0.0\n * @category Constructors\n */\nexport const die: (defect: unknown) => Cause<never> = internal.die\n\n/**\n * Creates an `Interrupt` cause from a `FiberId`.\n *\n * **Details**\n *\n * This function represents a fiber that has been interrupted. It stores the\n * identifier of the interrupted fiber, enabling precise tracking of concurrent\n * cancellations.\n *\n * @see {@link isInterrupted} Check if a `Cause` contains an interruption\n *\n * @since 2.0.0\n * @category Constructors\n */\nexport const interrupt: (fiberId: FiberId.FiberId) => Cause<never> = internal.interrupt\n\n/**\n * Combines two `Cause`s in parallel.\n *\n * **Details**\n *\n * This function merges two errors that occurred simultaneously. Instead of\n * discarding one error, both are retained, allowing for richer error reporting\n * and debugging.\n *\n * @see {@link isParallelType} Check if a `Cause` is a `Parallel`\n *\n * @since 2.0.0\n * @category Constructors\n */\nexport const parallel: <E, E2>(left: Cause<E>, right: Cause<E2>) => Cause<E | E2> = internal.parallel\n\n/**\n * Combines two `Cause`s sequentially.\n *\n * **Details**\n *\n * This function merges two errors that occurred in sequence, such as a main\n * error followed by a finalization error. It preserves both errors for complete\n * failure information.\n *\n * @see {@link isSequentialType} Check if a `Cause` is a `Sequential`\n *\n * @since 2.0.0\n * @category Constructors\n */\nexport const sequential: <E, E2>(left: Cause<E>, right: Cause<E2>) => Cause<E | E2> = internal.sequential\n\n/**\n * Checks if a value is a `Cause`.\n *\n * @since 2.0.0\n * @category Guards\n */\nexport const isCause: (u: unknown) => u is Cause<unknown> = internal.isCause\n\n/**\n * Checks if a `Cause` is an `Empty` type.\n *\n * @see {@link empty} Create a new `Empty` cause\n *\n * @since 2.0.0\n * @category Guards\n */\nexport const isEmptyType: <E>(self: Cause<E>) => self is Empty = internal.isEmptyType\n\n/**\n * Checks if a `Cause` is a `Fail` type.\n *\n * @see {@link fail} Create a new `Fail` cause\n *\n * @since 2.0.0\n * @category Guards\n */\nexport const isFailType: <E>(self: Cause<E>) => self is Fail<E> = internal.isFailType\n\n/**\n * Checks if a `Cause` is a `Die` type.\n *\n * @see {@link die} Create a new `Die` cause\n *\n * @since 2.0.0\n * @category Guards\n */\nexport const isDieType: <E>(self: Cause<E>) => self is Die = internal.isDieType\n\n/**\n * Checks if a `Cause` is an `Interrupt` type.\n *\n * @see {@link interrupt} Create an `Interrupt` cause\n *\n * @since 2.0.0\n * @category Guards\n */\nexport const isInterruptType: <E>(self: Cause<E>) => self is Interrupt = internal.isInterruptType\n\n/**\n * Checks if a `Cause` is a `Sequential` type.\n *\n * @see {@link sequential} Combine two `Cause`s sequentially\n *\n * @since 2.0.0\n * @category Guards\n */\nexport const isSequentialType: <E>(self: Cause<E>) => self is Sequential<E> = internal.isSequentialType\n\n/**\n * Checks if a `Cause` is a `Parallel` type.\n *\n * @see {@link parallel} Combine two `Cause`s in parallel\n *\n * @since 2.0.0\n * @category Guards\n */\nexport const isParallelType: <E>(self: Cause<E>) => self is Parallel<E> = internal.isParallelType\n\n/**\n * Calculates the size of a `Cause`.\n *\n * **Details**\n *\n * This function returns the total number of `Cause` nodes in the semiring\n * structure, reflecting how many individual error elements are recorded.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const size: <E>(self: Cause<E>) => number = internal.size\n\n/**\n * Checks if a `Cause` is entirely empty.\n *\n * **Details**\n *\n * This function returns `true` if the `Cause` contains no errors, defects, or\n * interruptions. It's helpful for verifying if a computation truly had no\n * failures.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const isEmpty: <E>(self: Cause<E>) => boolean = internal.isEmpty\n\n/**\n * Checks if a `Cause` contains a failure.\n *\n * **Details**\n *\n * This function returns `true` if the `Cause` includes any `Fail` error. It's\n * commonly used to confirm whether a workflow encountered an anticipated error\n * versus just defects or interruptions.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const isFailure: <E>(self: Cause<E>) => boolean = internal.isFailure\n\n/**\n * Checks if a `Cause` contains a defect.\n *\n * **Details**\n *\n * This function returns `true` if the `Cause` includes any unexpected or\n * unhandled errors (`Die`). It's useful for differentiating known failures from\n * unexpected ones.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const isDie: <E>(self: Cause<E>) => boolean = internal.isDie\n\n/**\n * Checks if a `Cause` contains an interruption.\n *\n * **Details**\n *\n * This function returns `true` if the `Cause` includes any fiber interruptions.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const isInterrupted: <E>(self: Cause<E>) => boolean = internal.isInterrupted\n\n/**\n * Checks if a `Cause` contains only interruptions.\n *\n * **Details**\n *\n * This function returns `true` if the `Cause` has been interrupted but does not\n * contain any other failures, such as `Fail` or `Die`. It's helpful for\n * verifying purely \"cancellation\" scenarios.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const isInterruptedOnly: <E>(self: Cause<E>) => boolean = internal.isInterruptedOnly\n\n/**\n * Extracts all recoverable errors of type `E` from a `Cause`.\n *\n * **Details**\n *\n * This function returns a chunk of errors, providing a list of all `Fail`\n * values found in the cause. It's useful for collecting all known failures for\n * logging or combined error handling.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const failures: <E>(self: Cause<E>) => Chunk.Chunk<E> = internal.failures\n\n/**\n * Extracts all unrecoverable defects from a `Cause`.\n *\n * **Details**\n *\n * This function returns a chunk of values representing unexpected errors\n * (`Die`). It's handy for capturing or logging unanticipated failures that\n * might need special handling, such as bug reports.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const defects: <E>(self: Cause<E>) => Chunk.Chunk<unknown> = internal.defects\n\n/**\n * Collects all `FiberId`s responsible for interrupting a fiber.\n *\n * **Details**\n *\n * This function returns a set of IDs indicating which fibers caused\n * interruptions within this `Cause`. It's useful for debugging concurrency\n * issues or tracing cancellations.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const interruptors: <E>(self: Cause<E>) => HashSet.HashSet<FiberId.FiberId> = internal.interruptors\n\n/**\n * Retrieves the first `Fail` error in a `Cause`, if present.\n *\n * **Details**\n *\n * This function returns an `Option` containing the first recoverable error\n * (`E`) from the cause. It's often used to quickly check if there's a primary\n * error to handle or display.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const failureOption: <E>(self: Cause<E>) => Option.Option<E> = internal.failureOption\n\n/**\n * Splits a `Cause` into either its first `Fail` error or the rest of the cause\n * (which might only contain `Die` or `Interrupt`).\n *\n * **Details**\n *\n * This function either returns the checked error (`E`) or the remaining\n * `Cause<never>` with defects/interruptions. It helps you decide if there's a\n * recoverable path or if only unhandled issues remain.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const failureOrCause: <E>(self: Cause<E>) => Either.Either<Cause<never>, E> = internal.failureOrCause\n\n/**\n * Strips out failures with an error of `None` from a `Cause<Option<E>>`.\n *\n * **Details**\n *\n * This function turns a `Cause<Option<E>>` into an `Option<Cause<E>>`. If the\n * cause only contains failures of `None`, it becomes `None`; otherwise, it\n * returns a `Cause` of the remaining errors. It's helpful when working with\n * optional errors and filtering out certain error paths.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const flipCauseOption: <E>(self: Cause<Option.Option<E>>) => Option.Option<Cause<E>> = internal.flipCauseOption\n\n/**\n * Retrieves the first `Die` defect in a `Cause`, if present.\n *\n * **Details**\n *\n * This function returns an `Option` containing the first unexpected failure\n * (`Die`) discovered. It's helpful for diagnosing the primary defect in a chain\n * of errors.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const dieOption: <E>(self: Cause<E>) => Option.Option<unknown> = internal.dieOption\n\n/**\n * Retrieves the first `Interrupt` in a `Cause`, if present.\n *\n * **Details**\n *\n * This function returns an `Option` with the first fiber interruption\n * discovered. This is particularly useful for concurrency analysis or debugging\n * cancellations.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const interruptOption: <E>(self: Cause<E>) => Option.Option<FiberId.FiberId> = internal.interruptOption\n\n/**\n * Removes all `Fail` and `Interrupt` nodes, keeping only defects (`Die`) in a\n * `Cause`.\n *\n * **Details**\n *\n * This function strips a cause of recoverable errors and interruptions, leaving\n * only unexpected failures. If no defects remain, it returns `None`. It's\n * valuable for focusing only on unanticipated problems when both known errors\n * and defects could occur.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const keepDefects: <E>(self: Cause<E>) => Option.Option<Cause<never>> = internal.keepDefects\n\n// TODO(4.0): remove? what's the point of this API?\n/**\n * Linearizes a `Cause` into a set of parallel causes, each containing a\n * sequential chain of failures.\n *\n * **Details**\n *\n * This function reorganizes the cause structure so that you can analyze each\n * parallel branch separately, even if they have multiple sequential errors.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const linearize: <E>(self: Cause<E>) => HashSet.HashSet<Cause<E>> = internal.linearize\n\n/**\n * Removes `Fail` and `Interrupt` nodes from a `Cause`, keeping only defects\n * (`Die`).\n *\n * **Details**\n *\n * This function is similar to `keepDefects` but returns a `Cause<never>`\n * directly, which can still store `Die` or finalizer-related defects. It's\n * helpful for analyzing only the irrecoverable portion of the error.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const stripFailures: <E>(self: Cause<E>) => Cause<never> = internal.stripFailures\n\n/**\n * Removes matching defects from a `Cause` using a partial function, returning\n * the remainder.\n *\n * **Details**\n *\n * This function applies a user-defined extraction function to each defect\n * (`Die`). If the function matches the defect, that defect is removed. If all\n * defects match, the result is `None`. Otherwise, you get a `Cause` with the\n * unmatched defects.\n *\n * @since 2.0.0\n * @category Getters\n */\nexport const stripSomeDefects: {\n  /**\n   * Removes matching defects from a `Cause` using a partial function, returning\n   * the remainder.\n   *\n   * **Details**\n   *\n   * This function applies a user-defined extraction function to each defect\n   * (`Die`). If the function matches the defect, that defect is removed. If all\n   * defects match, the result is `None`. Otherwise, you get a `Cause` with the\n   * unmatched defects.\n   *\n   * @since 2.0.0\n   * @category Getters\n   */\n  (pf: (defect: unknown) => Option.Option<unknown>): <E>(self: Cause<E>) => Option.Option<Cause<E>>\n  /**\n   * Removes matching defects from a `Cause` using a partial function, returning\n   * the remainder.\n   *\n   * **Details**\n   *\n   * This function applies a user-defined extraction function to each defect\n   * (`Die`). If the function matches the defect, that defect is removed. If all\n   * defects match, the result is `None`. Otherwise, you get a `Cause` with the\n   * unmatched defects.\n   *\n   * @since 2.0.0\n   * @category Getters\n   */\n  <E>(self: Cause<E>, pf: (defect: unknown) => Option.Option<unknown>): Option.Option<Cause<E>>\n} = internal.stripSomeDefects\n\n/**\n * Replaces any errors in a `Cause` with a provided constant error.\n *\n * **Details**\n *\n * This function transforms all `Fail` errors into the specified error value,\n * preserving the structure of the `Cause`. It's useful when you no longer need\n * the original error details but still want to keep the cause shape.\n *\n * @see {@link map} Apply a custom transformation to `Fail` errors\n *\n * @since 2.0.0\n * @category Mapping\n */\nexport const as: {\n  /**\n   * Replaces any errors in a `Cause` with a provided constant error.\n   *\n   * **Details**\n   *\n   * This function transforms all `Fail` errors into the specified error value,\n   * preserving the structure of the `Cause`. It's useful when you no longer need\n   * the original error details but still want to keep the cause shape.\n   *\n   * @see {@link map} Apply a custom transformation to `Fail` errors\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <E2>(error: E2): <E>(self: Cause<E>) => Cause<E2>\n  /**\n   * Replaces any errors in a `Cause` with a provided constant error.\n   *\n   * **Details**\n   *\n   * This function transforms all `Fail` errors into the specified error value,\n   * preserving the structure of the `Cause`. It's useful when you no longer need\n   * the original error details but still want to keep the cause shape.\n   *\n   * @see {@link map} Apply a custom transformation to `Fail` errors\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <E, E2>(self: Cause<E>, error: E2): Cause<E2>\n} = internal.as\n\n/**\n * Transforms the errors in a `Cause` using a user-provided function.\n *\n * **Details**\n *\n * This function applies `f` to each `Fail` error while leaving defects (`Die`)\n * and interruptions untouched. It's useful for changing or simplifying error\n * types in your effectful workflows.\n *\n * @see {@link as} Replace errors with a single constant\n *\n * @since 2.0.0\n * @category Mapping\n */\nexport const map: {\n  /**\n   * Transforms the errors in a `Cause` using a user-provided function.\n   *\n   * **Details**\n   *\n   * This function applies `f` to each `Fail` error while leaving defects (`Die`)\n   * and interruptions untouched. It's useful for changing or simplifying error\n   * types in your effectful workflows.\n   *\n   * @see {@link as} Replace errors with a single constant\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <E, E2>(f: (e: E) => E2): (self: Cause<E>) => Cause<E2>\n  /**\n   * Transforms the errors in a `Cause` using a user-provided function.\n   *\n   * **Details**\n   *\n   * This function applies `f` to each `Fail` error while leaving defects (`Die`)\n   * and interruptions untouched. It's useful for changing or simplifying error\n   * types in your effectful workflows.\n   *\n   * @see {@link as} Replace errors with a single constant\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <E, E2>(self: Cause<E>, f: (e: E) => E2): Cause<E2>\n} = internal.map\n\n/**\n * Transforms errors in a `Cause` into new causes.\n *\n * **Details**\n *\n * This function applies a function `f` to each `Fail` error, converting it into\n * a new `Cause`. This is especially powerful for merging or restructuring error\n * types while preserving or combining cause information.\n *\n * @see {@link map} Apply a simpler transformation to errors\n *\n * @since 2.0.0\n * @category Sequencing\n */\nexport const flatMap: {\n  /**\n   * Transforms errors in a `Cause` into new causes.\n   *\n   * **Details**\n   *\n   * This function applies a function `f` to each `Fail` error, converting it into\n   * a new `Cause`. This is especially powerful for merging or restructuring error\n   * types while preserving or combining cause information.\n   *\n   * @see {@link map} Apply a simpler transformation to errors\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <E, E2>(f: (e: E) => Cause<E2>): (self: Cause<E>) => Cause<E2>\n  /**\n   * Transforms errors in a `Cause` into new causes.\n   *\n   * **Details**\n   *\n   * This function applies a function `f` to each `Fail` error, converting it into\n   * a new `Cause`. This is especially powerful for merging or restructuring error\n   * types while preserving or combining cause information.\n   *\n   * @see {@link map} Apply a simpler transformation to errors\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <E, E2>(self: Cause<E>, f: (e: E) => Cause<E2>): Cause<E2>\n} = internal.flatMap\n\n/**\n * Sequences two `Cause`s. The second `Cause` can be dependent on the result of\n * the first `Cause`.\n *\n * @since 2.0.0\n * @category Sequencing\n */\nexport const andThen: {\n  /**\n   * Sequences two `Cause`s. The second `Cause` can be dependent on the result of\n   * the first `Cause`.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <E, E2>(f: (e: E) => Cause<E2>): (self: Cause<E>) => Cause<E2>\n  /**\n   * Sequences two `Cause`s. The second `Cause` can be dependent on the result of\n   * the first `Cause`.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <E2>(f: Cause<E2>): <E>(self: Cause<E>) => Cause<E2>\n  /**\n   * Sequences two `Cause`s. The second `Cause` can be dependent on the result of\n   * the first `Cause`.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <E, E2>(self: Cause<E>, f: (e: E) => Cause<E2>): Cause<E2>\n  /**\n   * Sequences two `Cause`s. The second `Cause` can be dependent on the result of\n   * the first `Cause`.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <E, E2>(self: Cause<E>, f: Cause<E2>): Cause<E2>\n} = internal.andThen\n\n/**\n * Flattens a nested `Cause` structure.\n *\n * **Details**\n *\n * This function takes a `Cause<Cause<E>>` and merges the layers into a single\n * `Cause<E>`. It's useful for eliminating additional nesting created by\n * repeated transformations or compositions.\n *\n * @see {@link flatMap} Compose nested causes\n *\n * @since 2.0.0\n * @category Sequencing\n */\nexport const flatten: <E>(self: Cause<Cause<E>>) => Cause<E> = internal.flatten\n\n/**\n * Checks if the current `Cause` contains or is equal to another `Cause`.\n *\n * **Details**\n *\n * This function returns `true` if `that` cause is part of or the same as\n * the current `Cause`. It's useful when you need to check for specific\n * error patterns or deduplicate repeated failures.\n *\n * @since 2.0.0\n * @category Elements\n */\nexport const contains: {\n  /**\n   * Checks if the current `Cause` contains or is equal to another `Cause`.\n   *\n   * **Details**\n   *\n   * This function returns `true` if `that` cause is part of or the same as\n   * the current `Cause`. It's useful when you need to check for specific\n   * error patterns or deduplicate repeated failures.\n   *\n   * @since 2.0.0\n   * @category Elements\n   */\n  <E2>(that: Cause<E2>): <E>(self: Cause<E>) => boolean\n  /**\n   * Checks if the current `Cause` contains or is equal to another `Cause`.\n   *\n   * **Details**\n   *\n   * This function returns `true` if `that` cause is part of or the same as\n   * the current `Cause`. It's useful when you need to check for specific\n   * error patterns or deduplicate repeated failures.\n   *\n   * @since 2.0.0\n   * @category Elements\n   */\n  <E, E2>(self: Cause<E>, that: Cause<E2>): boolean\n} = internal.contains\n\n/**\n * Extracts the most \"important\" defect from a `Cause`.\n *\n * **Details**\n *\n * This function reduces a `Cause` to a single, prioritized defect. It evaluates\n * the `Cause` in the following order of priority:\n *\n * 1. If the `Cause` contains a failure (e.g., from `Effect.fail`), it returns\n *    the raw error value.\n * 2. If there is no failure, it looks for the first defect (e.g., from\n *    `Effect.die`).\n * 3. If neither of the above is present, and the `Cause` stems from an\n *    interruption, it creates and returns an `InterruptedException`.\n *\n * This function ensures you can always extract a meaningful representation of\n * the primary issue from a potentially complex `Cause` structure.\n *\n * **When to Use**\n *\n * Use this function when you need to extract the most relevant error or defect\n * from a `Cause`, especially in scenarios where multiple errors or defects may\n * be present. It's particularly useful for simplifying error reporting or\n * logging.\n *\n * @see {@link squashWith} Allows transforming failures into defects when squashing.\n *\n * @since 2.0.0\n * @category Destructors\n */\nexport const squash: <E>(self: Cause<E>) => unknown = core.causeSquash\n\n/**\n * Extracts the most \"important\" defect from a `Cause`, transforming failures\n * into defects using a provided function.\n *\n * **Details**\n *\n * This function reduces a `Cause` to a single, prioritized defect, while\n * allowing you to transform recoverable failures into defects through a custom\n * function. It processes the `Cause` in the following order:\n *\n * 1. If the `Cause` contains a failure (e.g., from `Effect.fail`), it applies\n *    the provided function `f` to the error to transform it into a defect.\n * 2. If there is no failure, it looks for the first defect (e.g., from\n *    `Effect.die`) and returns it.\n * 3. If neither is present and the `Cause` stems from an interruption, it\n *    returns an `InterruptedException`.\n *\n * This function is particularly useful when you need custom handling or\n * transformation of errors while processing a `Cause`.\n *\n * @see {@link squash} Extracts the most \"important\" defect without transforming failures.\n *\n * @since 2.0.0\n * @category Destructors\n */\nexport const squashWith: {\n  /**\n   * Extracts the most \"important\" defect from a `Cause`, transforming failures\n   * into defects using a provided function.\n   *\n   * **Details**\n   *\n   * This function reduces a `Cause` to a single, prioritized defect, while\n   * allowing you to transform recoverable failures into defects through a custom\n   * function. It processes the `Cause` in the following order:\n   *\n   * 1. If the `Cause` contains a failure (e.g., from `Effect.fail`), it applies\n   *    the provided function `f` to the error to transform it into a defect.\n   * 2. If there is no failure, it looks for the first defect (e.g., from\n   *    `Effect.die`) and returns it.\n   * 3. If neither is present and the `Cause` stems from an interruption, it\n   *    returns an `InterruptedException`.\n   *\n   * This function is particularly useful when you need custom handling or\n   * transformation of errors while processing a `Cause`.\n   *\n   * @see {@link squash} Extracts the most \"important\" defect without transforming failures.\n   *\n   * @since 2.0.0\n   * @category Destructors\n   */\n  <E>(f: (error: E) => unknown): (self: Cause<E>) => unknown\n  /**\n   * Extracts the most \"important\" defect from a `Cause`, transforming failures\n   * into defects using a provided function.\n   *\n   * **Details**\n   *\n   * This function reduces a `Cause` to a single, prioritized defect, while\n   * allowing you to transform recoverable failures into defects through a custom\n   * function. It processes the `Cause` in the following order:\n   *\n   * 1. If the `Cause` contains a failure (e.g., from `Effect.fail`), it applies\n   *    the provided function `f` to the error to transform it into a defect.\n   * 2. If there is no failure, it looks for the first defect (e.g., from\n   *    `Effect.die`) and returns it.\n   * 3. If neither is present and the `Cause` stems from an interruption, it\n   *    returns an `InterruptedException`.\n   *\n   * This function is particularly useful when you need custom handling or\n   * transformation of errors while processing a `Cause`.\n   *\n   * @see {@link squash} Extracts the most \"important\" defect without transforming failures.\n   *\n   * @since 2.0.0\n   * @category Destructors\n   */\n  <E>(self: Cause<E>, f: (error: E) => unknown): unknown\n} = core.causeSquashWith\n\n/**\n * Searches a `Cause` using a partial function to extract information.\n *\n * **Details**\n *\n * This function allows you to search through a `Cause` using a custom partial\n * function. The partial function is applied to the `Cause`, and if it matches,\n * the result is returned wrapped in a `Some`. If no match is found, the result\n * is `None`.\n *\n * This is particularly useful when you are only interested in specific types of\n * errors, defects, or interruption causes within a potentially complex `Cause`\n * structure. By leveraging a partial function, you can focus on extracting only\n * the relevant information you care about.\n *\n * The partial function should return an `Option` indicating whether it matched\n * and the value it extracted.\n *\n * @since 2.0.0\n * @category Elements\n */\nexport const find: {\n  /**\n   * Searches a `Cause` using a partial function to extract information.\n   *\n   * **Details**\n   *\n   * This function allows you to search through a `Cause` using a custom partial\n   * function. The partial function is applied to the `Cause`, and if it matches,\n   * the result is returned wrapped in a `Some`. If no match is found, the result\n   * is `None`.\n   *\n   * This is particularly useful when you are only interested in specific types of\n   * errors, defects, or interruption causes within a potentially complex `Cause`\n   * structure. By leveraging a partial function, you can focus on extracting only\n   * the relevant information you care about.\n   *\n   * The partial function should return an `Option` indicating whether it matched\n   * and the value it extracted.\n   *\n   * @since 2.0.0\n   * @category Elements\n   */\n  <E, Z>(pf: (cause: Cause<E>) => Option.Option<Z>): (self: Cause<E>) => Option.Option<Z>\n  /**\n   * Searches a `Cause` using a partial function to extract information.\n   *\n   * **Details**\n   *\n   * This function allows you to search through a `Cause` using a custom partial\n   * function. The partial function is applied to the `Cause`, and if it matches,\n   * the result is returned wrapped in a `Some`. If no match is found, the result\n   * is `None`.\n   *\n   * This is particularly useful when you are only interested in specific types of\n   * errors, defects, or interruption causes within a potentially complex `Cause`\n   * structure. By leveraging a partial function, you can focus on extracting only\n   * the relevant information you care about.\n   *\n   * The partial function should return an `Option` indicating whether it matched\n   * and the value it extracted.\n   *\n   * @since 2.0.0\n   * @category Elements\n   */\n  <E, Z>(self: Cause<E>, pf: (cause: Cause<E>) => Option.Option<Z>): Option.Option<Z>\n} = internal.find\n\n/**\n * Preserves parts of a `Cause` that match a given predicate.\n *\n * **Details**\n *\n * This function allows you to retain only the parts of a `Cause` structure that\n * match a specified predicate or refinement. Any parts of the `Cause` that do\n * not match the provided condition are excluded from the result.\n *\n * You can use this function in two ways:\n * - With a `Predicate`: A function that evaluates whether a `Cause` should be\n *   retained based on its value.\n * - With a `Refinement`: A more specific predicate that can refine the type of\n *   the `Cause`.\n *\n * This is useful when you need to extract specific types of errors, defects, or\n * interruptions from a `Cause` while discarding unrelated parts.\n *\n * @since 2.0.0\n * @category Filtering\n */\nexport const filter: {\n  /**\n   * Preserves parts of a `Cause` that match a given predicate.\n   *\n   * **Details**\n   *\n   * This function allows you to retain only the parts of a `Cause` structure that\n   * match a specified predicate or refinement. Any parts of the `Cause` that do\n   * not match the provided condition are excluded from the result.\n   *\n   * You can use this function in two ways:\n   * - With a `Predicate`: A function that evaluates whether a `Cause` should be\n   *   retained based on its value.\n   * - With a `Refinement`: A more specific predicate that can refine the type of\n   *   the `Cause`.\n   *\n   * This is useful when you need to extract specific types of errors, defects, or\n   * interruptions from a `Cause` while discarding unrelated parts.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <E, EB extends E>(refinement: Refinement<Cause<NoInfer<E>>, Cause<EB>>): (self: Cause<E>) => Cause<EB>\n  /**\n   * Preserves parts of a `Cause` that match a given predicate.\n   *\n   * **Details**\n   *\n   * This function allows you to retain only the parts of a `Cause` structure that\n   * match a specified predicate or refinement. Any parts of the `Cause` that do\n   * not match the provided condition are excluded from the result.\n   *\n   * You can use this function in two ways:\n   * - With a `Predicate`: A function that evaluates whether a `Cause` should be\n   *   retained based on its value.\n   * - With a `Refinement`: A more specific predicate that can refine the type of\n   *   the `Cause`.\n   *\n   * This is useful when you need to extract specific types of errors, defects, or\n   * interruptions from a `Cause` while discarding unrelated parts.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <E>(predicate: Predicate<Cause<NoInfer<E>>>): (self: Cause<E>) => Cause<E>\n  /**\n   * Preserves parts of a `Cause` that match a given predicate.\n   *\n   * **Details**\n   *\n   * This function allows you to retain only the parts of a `Cause` structure that\n   * match a specified predicate or refinement. Any parts of the `Cause` that do\n   * not match the provided condition are excluded from the result.\n   *\n   * You can use this function in two ways:\n   * - With a `Predicate`: A function that evaluates whether a `Cause` should be\n   *   retained based on its value.\n   * - With a `Refinement`: A more specific predicate that can refine the type of\n   *   the `Cause`.\n   *\n   * This is useful when you need to extract specific types of errors, defects, or\n   * interruptions from a `Cause` while discarding unrelated parts.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <E, EB extends E>(self: Cause<E>, refinement: Refinement<Cause<E>, Cause<EB>>): Cause<EB>\n  /**\n   * Preserves parts of a `Cause` that match a given predicate.\n   *\n   * **Details**\n   *\n   * This function allows you to retain only the parts of a `Cause` structure that\n   * match a specified predicate or refinement. Any parts of the `Cause` that do\n   * not match the provided condition are excluded from the result.\n   *\n   * You can use this function in two ways:\n   * - With a `Predicate`: A function that evaluates whether a `Cause` should be\n   *   retained based on its value.\n   * - With a `Refinement`: A more specific predicate that can refine the type of\n   *   the `Cause`.\n   *\n   * This is useful when you need to extract specific types of errors, defects, or\n   * interruptions from a `Cause` while discarding unrelated parts.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <E>(self: Cause<E>, predicate: Predicate<Cause<E>>): Cause<E>\n} = internal.filter\n\n/**\n * Transforms a `Cause` into a single value using custom handlers for each\n * possible case.\n *\n * **Details**\n *\n * This function processes a `Cause` by applying a set of custom handlers to\n * each possible type of cause: `Empty`, `Fail`, `Die`, `Interrupt`,\n * `Sequential`, and `Parallel`. The result of this function is a single value\n * of type `Z`. This function allows you to define exactly how to handle each\n * part of a `Cause`, whether it's a failure, defect, interruption, or a\n * combination of these.\n *\n * The options parameter provides handlers for:\n * - `onEmpty`: Handles the case where the cause is `Empty`, meaning no errors\n *   occurred.\n * - `onFail`: Processes a failure with an error of type `E`.\n * - `onDie`: Processes a defect (unexpected error).\n * - `onInterrupt`: Handles a fiber interruption, providing the `FiberId` of the\n *   interruption.\n * - `onSequential`: Combines two sequential causes into a single value of type\n *   `Z`.\n * - `onParallel`: Combines two parallel causes into a single value of type `Z`.\n *\n * @since 2.0.0\n * @category Matching\n */\nexport const match: {\n  /**\n   * Transforms a `Cause` into a single value using custom handlers for each\n   * possible case.\n   *\n   * **Details**\n   *\n   * This function processes a `Cause` by applying a set of custom handlers to\n   * each possible type of cause: `Empty`, `Fail`, `Die`, `Interrupt`,\n   * `Sequential`, and `Parallel`. The result of this function is a single value\n   * of type `Z`. This function allows you to define exactly how to handle each\n   * part of a `Cause`, whether it's a failure, defect, interruption, or a\n   * combination of these.\n   *\n   * The options parameter provides handlers for:\n   * - `onEmpty`: Handles the case where the cause is `Empty`, meaning no errors\n   *   occurred.\n   * - `onFail`: Processes a failure with an error of type `E`.\n   * - `onDie`: Processes a defect (unexpected error).\n   * - `onInterrupt`: Handles a fiber interruption, providing the `FiberId` of the\n   *   interruption.\n   * - `onSequential`: Combines two sequential causes into a single value of type\n   *   `Z`.\n   * - `onParallel`: Combines two parallel causes into a single value of type `Z`.\n   *\n   * @since 2.0.0\n   * @category Matching\n   */\n  <Z, E>(\n   options: {\n     readonly onEmpty: Z\n     readonly onFail: (error: E) => Z\n     readonly onDie: (defect: unknown) => Z\n     readonly onInterrupt: (fiberId: FiberId.FiberId) => Z\n     readonly onSequential: (left: Z, right: Z) => Z\n     readonly onParallel: (left: Z, right: Z) => Z\n   }\n  ): (self: Cause<E>) => Z\n  /**\n   * Transforms a `Cause` into a single value using custom handlers for each\n   * possible case.\n   *\n   * **Details**\n   *\n   * This function processes a `Cause` by applying a set of custom handlers to\n   * each possible type of cause: `Empty`, `Fail`, `Die`, `Interrupt`,\n   * `Sequential`, and `Parallel`. The result of this function is a single value\n   * of type `Z`. This function allows you to define exactly how to handle each\n   * part of a `Cause`, whether it's a failure, defect, interruption, or a\n   * combination of these.\n   *\n   * The options parameter provides handlers for:\n   * - `onEmpty`: Handles the case where the cause is `Empty`, meaning no errors\n   *   occurred.\n   * - `onFail`: Processes a failure with an error of type `E`.\n   * - `onDie`: Processes a defect (unexpected error).\n   * - `onInterrupt`: Handles a fiber interruption, providing the `FiberId` of the\n   *   interruption.\n   * - `onSequential`: Combines two sequential causes into a single value of type\n   *   `Z`.\n   * - `onParallel`: Combines two parallel causes into a single value of type `Z`.\n   *\n   * @since 2.0.0\n   * @category Matching\n   */\n  <Z, E>(\n   self: Cause<E>,\n   options: {\n     readonly onEmpty: Z\n     readonly onFail: (error: E) => Z\n     readonly onDie: (defect: unknown) => Z\n     readonly onInterrupt: (fiberId: FiberId.FiberId) => Z\n     readonly onSequential: (left: Z, right: Z) => Z\n     readonly onParallel: (left: Z, right: Z) => Z\n   }\n  ): Z\n} = internal.match\n\n/**\n * Combines all parts of a `Cause` into a single value by starting with an\n * initial value.\n *\n * **Details**\n *\n * This function processes a `Cause` by starting with an initial value (`zero`)\n * and applying a custom function (`pf`) to combine all elements of the `Cause`\n * into a single result of type `Z`. The custom function determines how each\n * part of the `Cause` contributes to the final result. The function can return\n * an `Option` to either continue combining values or skip specific parts of the\n * `Cause`.\n *\n * This function is useful for tasks such as:\n * - Aggregating error messages from a `Cause` into a single string.\n * - Summarizing the structure of a `Cause` into a simplified result.\n * - Filtering or processing only specific parts of a `Cause`.\n *\n * The reduction proceeds in a top-down manner, visiting all nodes in the\n * `Cause` structure. This gives you complete control over how each part of the\n * `Cause` contributes to the final result.\n *\n * @since 2.0.0\n * @category Reducing\n */\nexport const reduce: {\n  /**\n   * Combines all parts of a `Cause` into a single value by starting with an\n   * initial value.\n   *\n   * **Details**\n   *\n   * This function processes a `Cause` by starting with an initial value (`zero`)\n   * and applying a custom function (`pf`) to combine all elements of the `Cause`\n   * into a single result of type `Z`. The custom function determines how each\n   * part of the `Cause` contributes to the final result. The function can return\n   * an `Option` to either continue combining values or skip specific parts of the\n   * `Cause`.\n   *\n   * This function is useful for tasks such as:\n   * - Aggregating error messages from a `Cause` into a single string.\n   * - Summarizing the structure of a `Cause` into a simplified result.\n   * - Filtering or processing only specific parts of a `Cause`.\n   *\n   * The reduction proceeds in a top-down manner, visiting all nodes in the\n   * `Cause` structure. This gives you complete control over how each part of the\n   * `Cause` contributes to the final result.\n   *\n   * @since 2.0.0\n   * @category Reducing\n   */\n  <Z, E>(zero: Z, pf: (accumulator: Z, cause: Cause<E>) => Option.Option<Z>): (self: Cause<E>) => Z\n  /**\n   * Combines all parts of a `Cause` into a single value by starting with an\n   * initial value.\n   *\n   * **Details**\n   *\n   * This function processes a `Cause` by starting with an initial value (`zero`)\n   * and applying a custom function (`pf`) to combine all elements of the `Cause`\n   * into a single result of type `Z`. The custom function determines how each\n   * part of the `Cause` contributes to the final result. The function can return\n   * an `Option` to either continue combining values or skip specific parts of the\n   * `Cause`.\n   *\n   * This function is useful for tasks such as:\n   * - Aggregating error messages from a `Cause` into a single string.\n   * - Summarizing the structure of a `Cause` into a simplified result.\n   * - Filtering or processing only specific parts of a `Cause`.\n   *\n   * The reduction proceeds in a top-down manner, visiting all nodes in the\n   * `Cause` structure. This gives you complete control over how each part of the\n   * `Cause` contributes to the final result.\n   *\n   * @since 2.0.0\n   * @category Reducing\n   */\n  <Z, E>(\n   self: Cause<E>,\n   zero: Z,\n   pf: (accumulator: Z, cause: Cause<E>) => Option.Option<Z>\n  ): Z\n} = internal.reduce\n\n/**\n * Combines all parts of a `Cause` into a single value using a custom reducer\n * and a context.\n *\n * **Details**\n *\n * This function allows you to reduce a `Cause` into a single value of type `Z`\n * using a custom `CauseReducer`. A `CauseReducer` provides methods to handle\n * specific parts of the `Cause`, such as failures, defects, or interruptions.\n * Additionally, this function provides access to a `context` value, which can\n * be used to carry information or maintain state during the reduction process.\n *\n * This is particularly useful when the reduction process needs additional\n * context or configuration, such as:\n * - Aggregating error details with dynamic formatting.\n * - Collecting logs or statistics about the `Cause`.\n * - Performing stateful transformations based on the `context`.\n *\n * @see {@link reduce} To reduce a `Cause` without additional context.\n *\n * @since 2.0.0\n * @category Reducing\n */\nexport const reduceWithContext: {\n  /**\n   * Combines all parts of a `Cause` into a single value using a custom reducer\n   * and a context.\n   *\n   * **Details**\n   *\n   * This function allows you to reduce a `Cause` into a single value of type `Z`\n   * using a custom `CauseReducer`. A `CauseReducer` provides methods to handle\n   * specific parts of the `Cause`, such as failures, defects, or interruptions.\n   * Additionally, this function provides access to a `context` value, which can\n   * be used to carry information or maintain state during the reduction process.\n   *\n   * This is particularly useful when the reduction process needs additional\n   * context or configuration, such as:\n   * - Aggregating error details with dynamic formatting.\n   * - Collecting logs or statistics about the `Cause`.\n   * - Performing stateful transformations based on the `context`.\n   *\n   * @see {@link reduce} To reduce a `Cause` without additional context.\n   *\n   * @since 2.0.0\n   * @category Reducing\n   */\n  <C, E, Z>(context: C, reducer: CauseReducer<C, E, Z>): (self: Cause<E>) => Z\n  /**\n   * Combines all parts of a `Cause` into a single value using a custom reducer\n   * and a context.\n   *\n   * **Details**\n   *\n   * This function allows you to reduce a `Cause` into a single value of type `Z`\n   * using a custom `CauseReducer`. A `CauseReducer` provides methods to handle\n   * specific parts of the `Cause`, such as failures, defects, or interruptions.\n   * Additionally, this function provides access to a `context` value, which can\n   * be used to carry information or maintain state during the reduction process.\n   *\n   * This is particularly useful when the reduction process needs additional\n   * context or configuration, such as:\n   * - Aggregating error details with dynamic formatting.\n   * - Collecting logs or statistics about the `Cause`.\n   * - Performing stateful transformations based on the `context`.\n   *\n   * @see {@link reduce} To reduce a `Cause` without additional context.\n   *\n   * @since 2.0.0\n   * @category Reducing\n   */\n  <C, E, Z>(self: Cause<E>, context: C, reducer: CauseReducer<C, E, Z>): Z\n} = internal.reduceWithContext\n\n/**\n * Creates an error that indicates a `Fiber` was interrupted.\n *\n * **Details**\n *\n * This function constructs an `InterruptedException` recognized by the Effect\n * runtime. It is usually thrown or returned when a fiber's execution is\n * interrupted by external events or by another fiber. This is particularly\n * helpful in concurrent programs where fibers may halt each other before\n * completion.\n *\n * @since 2.0.0\n * @category Errors\n */\nexport const InterruptedException: new(message?: string | undefined) => InterruptedException = core.InterruptedException\n\n/**\n * Checks if a given unknown value is an `InterruptedException`.\n *\n * @since 2.0.0\n * @category Guards\n */\nexport const isInterruptedException: (u: unknown) => u is InterruptedException = core.isInterruptedException\n\n/**\n * Creates an error indicating an invalid method argument.\n *\n * **Details**\n *\n * This function constructs an `IllegalArgumentException`. It is typically\n * thrown or returned when an operation receives improper inputs, such as\n * out-of-range values or invalid object states.\n *\n * @since 2.0.0\n * @category Errors\n */\nexport const IllegalArgumentException: new(message?: string | undefined) => IllegalArgumentException =\n  core.IllegalArgumentException\n\n/**\n * Checks if a given unknown value is an `IllegalArgumentException`.\n *\n * @since 2.0.0\n * @category Guards\n */\nexport const isIllegalArgumentException: (u: unknown) => u is IllegalArgumentException = core.isIllegalArgumentException\n\n/**\n * Creates an error indicating a missing element.\n *\n * **Details**\n *\n * This function constructs a `NoSuchElementException`. It helps you clearly\n * communicate that a required element is unavailable.\n *\n * @since 2.0.0\n * @category Errors\n */\nexport const NoSuchElementException: new(message?: string | undefined) => NoSuchElementException =\n  core.NoSuchElementException\n\n/**\n * Checks if a given unknown value is a `NoSuchElementException`.\n *\n * @since 2.0.0\n * @category Guards\n */\nexport const isNoSuchElementException: (u: unknown) => u is NoSuchElementException = core.isNoSuchElementException\n\n/**\n * Creates an error for general runtime errors.\n *\n * **Details**\n *\n * This function constructs a `RuntimeException`, for errors that occur at\n * runtime but are not specifically typed or categorized as interruptions,\n * missing elements, or invalid arguments. It helps unify a wide range of\n * unexpected conditions under a single, recognizable error type.\n *\n * @since 2.0.0\n * @category Errors\n */\nexport const RuntimeException: new(message?: string | undefined) => RuntimeException = core.RuntimeException\n\n/**\n * Checks if a given unknown value is a `RuntimeException`.\n *\n * @since 2.0.0\n * @category Guards\n */\nexport const isRuntimeException: (u: unknown) => u is RuntimeException = core.isRuntimeException\n\n/**\n * Creates an error for operations that exceed their expected time.\n *\n * **Details**\n *\n * This function constructs a `TimeoutException`. It is typically used to signal\n * that an operation or fiber did not complete within a designated time limit,\n * allowing you to handle slow or hanging processes.\n *\n * @since 2.0.0\n * @category Errors\n */\nexport const TimeoutException: new(message?: string | undefined) => TimeoutException = core.TimeoutException\n\n/**\n * Checks if a given unknown value is a `TimeoutException`.\n *\n * @since 3.15.0\n * @category Guards\n */\nexport const isTimeoutException: (u: unknown) => u is TimeoutException = core.isTimeoutException\n\n/**\n * Creates an instance of `UnknownException`, an error object used to handle\n * unknown errors such as those from rejected promises.\n *\n * **Details**\n *\n * This function constructs an `UnknownException` with flexible behavior for\n * managing the error message and cause.\n *\n * The required `error` argument is passed as the `cause` to the global `Error`\n * constructor, ensuring that the original cause is preserved in the error chain\n * for debugging purposes. This ensures that the origin stack trace is\n * preserved.\n *\n * The `error` argument is always stored in the `error` property of the\n * `UnknownException` instance for reference, regardless of its type.\n *\n * Additionally, if you provide a `message` argument, it is used as the error\n * message. If no `message` is provided, the error message defaults to `\"An\n * unknown error occurred\"`.\n *\n * **When to Use**\n *\n * Use this function when you need to handle unexpected or unknown errors in\n * your application, particularly when the source of the error might not provide\n * a clear message. This is useful for wrapping generic errors thrown from\n * promises or external APIs.\n *\n * @since 2.0.0\n * @category Errors\n */\nexport const UnknownException: new(error: unknown, message?: string | undefined) => UnknownException =\n  core.UnknownException\n\n/**\n * Checks if a given unknown value is an `UnknownException`.\n *\n * @since 2.0.0\n * @category Guards\n */\nexport const isUnknownException: (u: unknown) => u is UnknownException = core.isUnknownException\n\n/**\n * Creates an error indicating resource capacity has been exceeded.\n *\n * **Details**\n *\n * This function constructs an `ExceededCapacityException`, signifying that an\n * operation or resource usage surpassed established limits. This can be\n * essential for concurrency or resource management situations, ensuring your\n * application doesn't go beyond acceptable thresholds.\n *\n * @since 3.5.0\n * @category Errors\n */\nexport const ExceededCapacityException: new(message?: string | undefined) => ExceededCapacityException =\n  core.ExceededCapacityException\n\n/**\n * Checks if a given unknown value is an `ExceededCapacityException`.\n *\n * @since 3.5.0\n * @category Guards\n */\nexport const isExceededCapacityException: (u: unknown) => u is ExceededCapacityException =\n  core.isExceededCapacityException\n\n/**\n * Converts a `Cause` into a human-readable string.\n *\n * **Details**\n *\n * This function pretty-prints the entire `Cause`, including any failures,\n * defects, and interruptions. It can be especially helpful for logging,\n * debugging, or displaying structured errors to users.\n *\n * You can optionally pass `options` to configure how the error cause is\n * rendered. By default, it includes essential details of all errors in the\n * `Cause`.\n *\n * @see {@link prettyErrors} Get a list of `PrettyError` objects instead of a single string.\n *\n * @since 2.0.0\n * @category Formatting\n */\nexport const pretty: <E>(cause: Cause<E>, options?: {\n  readonly renderErrorCause?: boolean | undefined\n}) => string = internal.pretty\n\n/**\n * A shape for prettified errors, optionally including a source span.\n *\n * @since 3.2.0\n * @category Models\n */\nexport interface PrettyError extends Error {\n  readonly span: Span | undefined\n}\n\n/**\n * Returns a list of prettified errors (`PrettyError`) from a `Cause`.\n *\n * **Details**\n *\n * This function inspects the entire `Cause` and produces an array of\n * `PrettyError` objects. Each object may include additional metadata, such as a\n * `Span`, to provide deeper insights into where and how the error occurred.\n *\n * @since 3.2.0\n * @category Formatting\n */\nexport const prettyErrors: <E>(cause: Cause<E>) => Array<PrettyError> = internal.prettyErrors\n\n/**\n * Retrieves the original, unproxied error instance from an error object.\n *\n * **Details**\n *\n * This function returns the underlying error object without any\n * library-specific wrapping or proxying that might occur during error handling.\n * This can be essential if you need direct access to the error's native\n * properties, such as stack traces or custom data fields, for detailed\n * debugging or integration with external systems.\n *\n * @since 2.0.0\n * @category Errors\n */\nexport const originalError: <E>(obj: E) => E = core.originalInstance\n", "/**\n * @since 2.0.0\n */\nimport type * as RA from \"./Array.js\"\nimport type * as Cause from \"./Cause.js\"\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as Clock from \"./Clock.js\"\nimport type { ConfigProvider } from \"./ConfigProvider.js\"\nimport type { Console } from \"./Console.js\"\nimport type * as Context from \"./Context.js\"\nimport type * as Deferred from \"./Deferred.js\"\nimport type * as Duration from \"./Duration.js\"\nimport type * as Either from \"./Either.js\"\nimport type { Equivalence } from \"./Equivalence.js\"\nimport type { ExecutionPlan } from \"./ExecutionPlan.js\"\nimport type { ExecutionStrategy } from \"./ExecutionStrategy.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type * as Fiber from \"./Fiber.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as FiberRef from \"./FiberRef.js\"\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport type * as FiberRefsPatch from \"./FiberRefsPatch.js\"\nimport type * as FiberStatus from \"./FiberStatus.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { dual } from \"./Function.js\"\nimport type * as HashMap from \"./HashMap.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as internalCause from \"./internal/cause.js\"\nimport * as console_ from \"./internal/console.js\"\nimport { TagProto } from \"./internal/context.js\"\nimport * as effect from \"./internal/core-effect.js\"\nimport * as core from \"./internal/core.js\"\nimport * as defaultServices from \"./internal/defaultServices.js\"\nimport * as circular from \"./internal/effect/circular.js\"\nimport * as internalExecutionPlan from \"./internal/executionPlan.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport * as layer from \"./internal/layer.js\"\nimport * as option_ from \"./internal/option.js\"\nimport * as query from \"./internal/query.js\"\nimport * as runtime_ from \"./internal/runtime.js\"\nimport * as schedule_ from \"./internal/schedule.js\"\nimport * as internalTracer from \"./internal/tracer.js\"\nimport type * as Layer from \"./Layer.js\"\nimport type * as LogLevel from \"./LogLevel.js\"\nimport type * as ManagedRuntime from \"./ManagedRuntime.js\"\nimport type * as Metric from \"./Metric.js\"\nimport type * as MetricLabel from \"./MetricLabel.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport * as Random from \"./Random.js\"\nimport type * as Ref from \"./Ref.js\"\nimport * as Request from \"./Request.js\"\nimport type { RequestBlock } from \"./RequestBlock.js\"\nimport type { RequestResolver } from \"./RequestResolver.js\"\nimport type * as Runtime from \"./Runtime.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\nimport type * as RuntimeFlagsPatch from \"./RuntimeFlagsPatch.js\"\nimport type * as Schedule from \"./Schedule.js\"\nimport * as Scheduler from \"./Scheduler.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type * as Supervisor from \"./Supervisor.js\"\nimport type * as Tracer from \"./Tracer.js\"\nimport type {\n  Concurrency,\n  Contravariant,\n  Covariant,\n  EqualsWith,\n  NoExcessProperties,\n  NoInfer,\n  NotFunction\n} from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport { isGeneratorFunction, type YieldWrap } from \"./Utils.js\"\n\n/**\n * @since 2.0.0\n * @category Symbols\n */\nexport const EffectTypeId: unique symbol = core.EffectTypeId\n\n/**\n * @since 2.0.0\n * @category Symbols\n */\nexport type EffectTypeId = typeof EffectTypeId\n\n/**\n * The `Effect` interface defines a value that describes a workflow or job,\n * which can succeed or fail.\n *\n * **Details**\n *\n * The `Effect` interface represents a computation that can model a workflow\n * involving various types of operations, such as synchronous, asynchronous,\n * concurrent, and parallel interactions. It operates within a context of type\n * `R`, and the result can either be a success with a value of type `A` or a\n * failure with an error of type `E`. The `Effect` is designed to handle complex\n * interactions with external resources, offering advanced features such as\n * fiber-based concurrency, scheduling, interruption handling, and scalability.\n * This makes it suitable for tasks that require fine-grained control over\n * concurrency and error management.\n *\n * To execute an `Effect` value, you need a `Runtime`, which provides the\n * environment necessary to run and manage the computation.\n *\n * @since 2.0.0\n * @category Models\n */\nexport interface Effect<out A, out E = never, out R = never> extends Effect.Variance<A, E, R>, Pipeable {\n  readonly [Unify.typeSymbol]?: unknown\n  readonly [Unify.unifySymbol]?: EffectUnify<this>\n  readonly [Unify.ignoreSymbol]?: EffectUnifyIgnore\n  [Symbol.iterator](): EffectGenerator<Effect<A, E, R>>\n}\n\n/**\n * @since 3.0.0\n * @category Models\n */\nexport interface EffectGenerator<T extends Effect<any, any, any>> {\n  next(...args: ReadonlyArray<any>): IteratorResult<YieldWrap<T>, Effect.Success<T>>\n}\n\n/**\n * @since 2.0.0\n * @category Models\n */\nexport interface EffectUnify<A extends { [Unify.typeSymbol]?: any }>\n  extends Either.EitherUnify<A>, Option.OptionUnify<A>, Context.TagUnify<A>\n{\n  Effect?: () => A[Unify.typeSymbol] extends Effect<infer A0, infer E0, infer R0> | infer _ ? Effect<A0, E0, R0> : never\n}\n\n/**\n * @category Models\n * @since 2.0.0\n */\nexport interface EffectUnifyIgnore {\n  Tag?: true\n  Option?: true\n  Either?: true\n}\n\n/**\n * @category Type lambdas\n * @since 2.0.0\n */\nexport interface EffectTypeLambda extends TypeLambda {\n  readonly type: Effect<this[\"Target\"], this[\"Out1\"], this[\"Out2\"]>\n}\n\n/**\n * @since 2.0.0\n * @category Models\n */\nexport interface Blocked<out A, out E> extends Effect<A, E> {\n  readonly _op: \"Blocked\"\n  readonly effect_instruction_i0: RequestBlock\n  readonly effect_instruction_i1: Effect<A, E>\n}\n\n/**\n * @since 2.0.0\n * @category Models\n */\ndeclare module \"./Context.js\" {\n  interface Tag<Id, Value> extends Effect<Value, never, Id> {\n    [Symbol.iterator](): EffectGenerator<Tag<Id, Value>>\n  }\n  interface Reference<Id, Value> extends Effect<Value> {\n    [Symbol.iterator](): EffectGenerator<Reference<Id, Value>>\n  }\n  interface TagUnifyIgnore {\n    Effect?: true\n    Either?: true\n    Option?: true\n  }\n}\n\n/**\n * @since 2.0.0\n * @category Models\n */\ndeclare module \"./Either.js\" {\n  interface Left<E, A> extends Effect<A, E> {\n    readonly _tag: \"Left\"\n    [Symbol.iterator](): EffectGenerator<Left<E, A>>\n  }\n  interface Right<E, A> extends Effect<A, E> {\n    readonly _tag: \"Right\"\n    [Symbol.iterator](): EffectGenerator<Right<E, A>>\n  }\n  interface EitherUnifyIgnore {\n    Effect?: true\n    Tag?: true\n    Option?: true\n  }\n}\n\n/**\n * @since 2.0.0\n * @category Models\n */\ndeclare module \"./Option.js\" {\n  interface None<A> extends Effect<A, Cause.NoSuchElementException> {\n    readonly _tag: \"None\"\n    [Symbol.iterator](): EffectGenerator<None<A>>\n  }\n  interface Some<A> extends Effect<A, Cause.NoSuchElementException> {\n    readonly _tag: \"Some\"\n    [Symbol.iterator](): EffectGenerator<Some<A>>\n  }\n  interface OptionUnifyIgnore {\n    Effect?: true\n    Tag?: true\n    Either?: true\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Effect {\n  /**\n   * @since 2.0.0\n   * @category Models\n   */\n  export interface Variance<out A, out E, out R> {\n    readonly [EffectTypeId]: VarianceStruct<A, E, R>\n  }\n  /**\n   * @since 2.0.0\n   * @category Models\n   */\n  export interface VarianceStruct<out A, out E, out R> {\n    readonly _V: string\n    readonly _A: Covariant<A>\n    readonly _E: Covariant<E>\n    readonly _R: Covariant<R>\n  }\n  /**\n   * @since 2.0.0\n   * @category Effect Type Extractors\n   */\n  export type Context<T extends Effect<any, any, any>> = [T] extends [Effect<infer _A, infer _E, infer _R>] ? _R : never\n  /**\n   * @since 2.0.0\n   * @category Effect Type Extractors\n   */\n  export type Error<T extends Effect<any, any, any>> = [T] extends [Effect<infer _A, infer _E, infer _R>] ? _E : never\n  /**\n   * @since 2.0.0\n   * @category Effect Type Extractors\n   */\n  export type Success<T extends Effect<any, any, any>> = [T] extends [Effect<infer _A, infer _E, infer _R>] ? _A : never\n  /**\n   * @since 3.15.5\n   * @category Effect Type Extractors\n   */\n  export type AsEffect<T extends Effect<any, any, any>> = Effect<\n    T extends Effect<infer _A, infer _E, infer _R> ? _A : never,\n    T extends Effect<infer _A, infer _E, infer _R> ? _E : never,\n    T extends Effect<infer _A, infer _E, infer _R> ? _R : never\n  >\n}\n\n/**\n * Checks if a given value is an `Effect` value.\n *\n * **When to Use**\n *\n * This function can be useful for checking the type of a value before\n * attempting to operate on it as an `Effect` value. For example, you could use\n * `Effect.isEffect` to check the type of a value before using it as an argument\n * to a function that expects an `Effect` value.\n *\n * @since 2.0.0\n * @category Guards\n */\nexport const isEffect: (u: unknown) => u is Effect<unknown, unknown, unknown> = core.isEffect\n\n/**\n * Returns an effect that caches its result for a specified `Duration`,\n * known as \"timeToLive\" (TTL).\n *\n * **Details**\n *\n * This function is used to cache the result of an effect for a specified amount\n * of time. This means that the first time the effect is evaluated, its result\n * is computed and stored.\n *\n * If the effect is evaluated again within the specified `timeToLive`, the\n * cached result will be used, avoiding recomputation.\n *\n * After the specified duration has passed, the cache expires, and the effect\n * will be recomputed upon the next evaluation.\n *\n * **When to Use**\n *\n * Use this function when you have an effect that involves costly operations or\n * computations, and you want to avoid repeating them within a short time frame.\n *\n * It's ideal for scenarios where the result of an effect doesn't change\n * frequently and can be reused for a specified duration.\n *\n * By caching the result, you can improve efficiency and reduce unnecessary\n * computations, especially in performance-critical applications.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * let i = 1\n * const expensiveTask = Effect.promise<string>(() => {\n *   console.log(\"expensive task...\")\n *   return new Promise((resolve) => {\n *     setTimeout(() => {\n *       resolve(`result ${i++}`)\n *     }, 100)\n *   })\n * })\n *\n * const program = Effect.gen(function* () {\n *   const cached = yield* Effect.cachedWithTTL(expensiveTask, \"150 millis\")\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* Effect.sleep(\"100 millis\")\n *   yield* cached.pipe(Effect.andThen(Console.log))\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // expensive task...\n * // result 1\n * // result 1\n * // expensive task...\n * // result 2\n * ```\n *\n * @see {@link cached} for a similar function that caches the result\n * indefinitely.\n * @see {@link cachedInvalidateWithTTL} for a similar function that includes an\n * additional effect for manually invalidating the cached value.\n *\n * @since 2.0.0\n * @category Caching\n */\nexport const cachedWithTTL: {\n  /**\n   * Returns an effect that caches its result for a specified `Duration`,\n   * known as \"timeToLive\" (TTL).\n   *\n   * **Details**\n   *\n   * This function is used to cache the result of an effect for a specified amount\n   * of time. This means that the first time the effect is evaluated, its result\n   * is computed and stored.\n   *\n   * If the effect is evaluated again within the specified `timeToLive`, the\n   * cached result will be used, avoiding recomputation.\n   *\n   * After the specified duration has passed, the cache expires, and the effect\n   * will be recomputed upon the next evaluation.\n   *\n   * **When to Use**\n   *\n   * Use this function when you have an effect that involves costly operations or\n   * computations, and you want to avoid repeating them within a short time frame.\n   *\n   * It's ideal for scenarios where the result of an effect doesn't change\n   * frequently and can be reused for a specified duration.\n   *\n   * By caching the result, you can improve efficiency and reduce unnecessary\n   * computations, especially in performance-critical applications.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * let i = 1\n   * const expensiveTask = Effect.promise<string>(() => {\n   *   console.log(\"expensive task...\")\n   *   return new Promise((resolve) => {\n   *     setTimeout(() => {\n   *       resolve(`result ${i++}`)\n   *     }, 100)\n   *   })\n   * })\n   *\n   * const program = Effect.gen(function* () {\n   *   const cached = yield* Effect.cachedWithTTL(expensiveTask, \"150 millis\")\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* Effect.sleep(\"100 millis\")\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // expensive task...\n   * // result 1\n   * // result 1\n   * // expensive task...\n   * // result 2\n   * ```\n   *\n   * @see {@link cached} for a similar function that caches the result\n   * indefinitely.\n   * @see {@link cachedInvalidateWithTTL} for a similar function that includes an\n   * additional effect for manually invalidating the cached value.\n   *\n   * @since 2.0.0\n   * @category Caching\n   */\n  (timeToLive: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<Effect<A, E>, never, R>\n  /**\n   * Returns an effect that caches its result for a specified `Duration`,\n   * known as \"timeToLive\" (TTL).\n   *\n   * **Details**\n   *\n   * This function is used to cache the result of an effect for a specified amount\n   * of time. This means that the first time the effect is evaluated, its result\n   * is computed and stored.\n   *\n   * If the effect is evaluated again within the specified `timeToLive`, the\n   * cached result will be used, avoiding recomputation.\n   *\n   * After the specified duration has passed, the cache expires, and the effect\n   * will be recomputed upon the next evaluation.\n   *\n   * **When to Use**\n   *\n   * Use this function when you have an effect that involves costly operations or\n   * computations, and you want to avoid repeating them within a short time frame.\n   *\n   * It's ideal for scenarios where the result of an effect doesn't change\n   * frequently and can be reused for a specified duration.\n   *\n   * By caching the result, you can improve efficiency and reduce unnecessary\n   * computations, especially in performance-critical applications.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * let i = 1\n   * const expensiveTask = Effect.promise<string>(() => {\n   *   console.log(\"expensive task...\")\n   *   return new Promise((resolve) => {\n   *     setTimeout(() => {\n   *       resolve(`result ${i++}`)\n   *     }, 100)\n   *   })\n   * })\n   *\n   * const program = Effect.gen(function* () {\n   *   const cached = yield* Effect.cachedWithTTL(expensiveTask, \"150 millis\")\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* Effect.sleep(\"100 millis\")\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // expensive task...\n   * // result 1\n   * // result 1\n   * // expensive task...\n   * // result 2\n   * ```\n   *\n   * @see {@link cached} for a similar function that caches the result\n   * indefinitely.\n   * @see {@link cachedInvalidateWithTTL} for a similar function that includes an\n   * additional effect for manually invalidating the cached value.\n   *\n   * @since 2.0.0\n   * @category Caching\n   */\n  <A, E, R>(self: Effect<A, E, R>, timeToLive: Duration.DurationInput): Effect<Effect<A, E>, never, R>\n} = circular.cached\n\n/**\n * Caches an effect's result for a specified duration and allows manual\n * invalidation before expiration.\n *\n * **Details**\n *\n * This function behaves similarly to {@link cachedWithTTL} by caching the\n * result of an effect for a specified period of time. However, it introduces an\n * additional feature: it provides an effect that allows you to manually\n * invalidate the cached result before it naturally expires.\n *\n * This gives you more control over the cache, allowing you to refresh the\n * result when needed, even if the original cache has not yet expired.\n *\n * Once the cache is invalidated, the next time the effect is evaluated, the\n * result will be recomputed, and the cache will be refreshed.\n *\n * **When to Use**\n *\n * Use this function when you have an effect whose result needs to be cached for\n * a certain period, but you also want the option to refresh the cache manually\n * before the expiration time.\n *\n * This is useful when you need to ensure that the cached data remains valid for\n * a certain period but still want to invalidate it if the underlying data\n * changes or if you want to force a recomputation.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * let i = 1\n * const expensiveTask = Effect.promise<string>(() => {\n *   console.log(\"expensive task...\")\n *   return new Promise((resolve) => {\n *     setTimeout(() => {\n *       resolve(`result ${i++}`)\n *     }, 100)\n *   })\n * })\n *\n * const program = Effect.gen(function* () {\n *   const [cached, invalidate] = yield* Effect.cachedInvalidateWithTTL(\n *     expensiveTask,\n *     \"1 hour\"\n *   )\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* invalidate\n *   yield* cached.pipe(Effect.andThen(Console.log))\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // expensive task...\n * // result 1\n * // result 1\n * // expensive task...\n * // result 2\n * ```\n *\n * @see {@link cached} for a similar function that caches the result\n * indefinitely.\n * @see {@link cachedWithTTL} for a similar function that caches the result for\n * a specified duration but does not include an effect for manual invalidation.\n *\n * @since 2.0.0\n * @category Caching\n */\nexport const cachedInvalidateWithTTL: {\n  /**\n   * Caches an effect's result for a specified duration and allows manual\n   * invalidation before expiration.\n   *\n   * **Details**\n   *\n   * This function behaves similarly to {@link cachedWithTTL} by caching the\n   * result of an effect for a specified period of time. However, it introduces an\n   * additional feature: it provides an effect that allows you to manually\n   * invalidate the cached result before it naturally expires.\n   *\n   * This gives you more control over the cache, allowing you to refresh the\n   * result when needed, even if the original cache has not yet expired.\n   *\n   * Once the cache is invalidated, the next time the effect is evaluated, the\n   * result will be recomputed, and the cache will be refreshed.\n   *\n   * **When to Use**\n   *\n   * Use this function when you have an effect whose result needs to be cached for\n   * a certain period, but you also want the option to refresh the cache manually\n   * before the expiration time.\n   *\n   * This is useful when you need to ensure that the cached data remains valid for\n   * a certain period but still want to invalidate it if the underlying data\n   * changes or if you want to force a recomputation.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * let i = 1\n   * const expensiveTask = Effect.promise<string>(() => {\n   *   console.log(\"expensive task...\")\n   *   return new Promise((resolve) => {\n   *     setTimeout(() => {\n   *       resolve(`result ${i++}`)\n   *     }, 100)\n   *   })\n   * })\n   *\n   * const program = Effect.gen(function* () {\n   *   const [cached, invalidate] = yield* Effect.cachedInvalidateWithTTL(\n   *     expensiveTask,\n   *     \"1 hour\"\n   *   )\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* invalidate\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // expensive task...\n   * // result 1\n   * // result 1\n   * // expensive task...\n   * // result 2\n   * ```\n   *\n   * @see {@link cached} for a similar function that caches the result\n   * indefinitely.\n   * @see {@link cachedWithTTL} for a similar function that caches the result for\n   * a specified duration but does not include an effect for manual invalidation.\n   *\n   * @since 2.0.0\n   * @category Caching\n   */\n  (timeToLive: Duration.DurationInput): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => Effect<[Effect<A, E>, Effect<void>], never, R>\n  /**\n   * Caches an effect's result for a specified duration and allows manual\n   * invalidation before expiration.\n   *\n   * **Details**\n   *\n   * This function behaves similarly to {@link cachedWithTTL} by caching the\n   * result of an effect for a specified period of time. However, it introduces an\n   * additional feature: it provides an effect that allows you to manually\n   * invalidate the cached result before it naturally expires.\n   *\n   * This gives you more control over the cache, allowing you to refresh the\n   * result when needed, even if the original cache has not yet expired.\n   *\n   * Once the cache is invalidated, the next time the effect is evaluated, the\n   * result will be recomputed, and the cache will be refreshed.\n   *\n   * **When to Use**\n   *\n   * Use this function when you have an effect whose result needs to be cached for\n   * a certain period, but you also want the option to refresh the cache manually\n   * before the expiration time.\n   *\n   * This is useful when you need to ensure that the cached data remains valid for\n   * a certain period but still want to invalidate it if the underlying data\n   * changes or if you want to force a recomputation.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * let i = 1\n   * const expensiveTask = Effect.promise<string>(() => {\n   *   console.log(\"expensive task...\")\n   *   return new Promise((resolve) => {\n   *     setTimeout(() => {\n   *       resolve(`result ${i++}`)\n   *     }, 100)\n   *   })\n   * })\n   *\n   * const program = Effect.gen(function* () {\n   *   const [cached, invalidate] = yield* Effect.cachedInvalidateWithTTL(\n   *     expensiveTask,\n   *     \"1 hour\"\n   *   )\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* invalidate\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // expensive task...\n   * // result 1\n   * // result 1\n   * // expensive task...\n   * // result 2\n   * ```\n   *\n   * @see {@link cached} for a similar function that caches the result\n   * indefinitely.\n   * @see {@link cachedWithTTL} for a similar function that caches the result for\n   * a specified duration but does not include an effect for manual invalidation.\n   *\n   * @since 2.0.0\n   * @category Caching\n   */\n  <A, E, R>(self: Effect<A, E, R>, timeToLive: Duration.DurationInput): Effect<[Effect<A, E>, Effect<void>], never, R>\n} = circular.cachedInvalidateWithTTL\n\n/**\n * Returns an effect that lazily computes a result and caches it for subsequent\n * evaluations.\n *\n * **Details**\n *\n * This function wraps an effect and ensures that its result is computed only\n * once. Once the result is computed, it is cached, meaning that subsequent\n * evaluations of the same effect will return the cached result without\n * re-executing the logic.\n *\n * **When to Use**\n *\n * Use this function when you have an expensive or time-consuming operation that\n * you want to avoid repeating. The first evaluation will compute the result,\n * and all following evaluations will immediately return the cached value,\n * improving performance and reducing unnecessary work.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * let i = 1\n * const expensiveTask = Effect.promise<string>(() => {\n *   console.log(\"expensive task...\")\n *   return new Promise((resolve) => {\n *     setTimeout(() => {\n *       resolve(`result ${i++}`)\n *     }, 100)\n *   })\n * })\n *\n * const program = Effect.gen(function* () {\n *   console.log(\"non-cached version:\")\n *   yield* expensiveTask.pipe(Effect.andThen(Console.log))\n *   yield* expensiveTask.pipe(Effect.andThen(Console.log))\n *   console.log(\"cached version:\")\n *   const cached = yield* Effect.cached(expensiveTask)\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* cached.pipe(Effect.andThen(Console.log))\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // non-cached version:\n * // expensive task...\n * // result 1\n * // expensive task...\n * // result 2\n * // cached version:\n * // expensive task...\n * // result 3\n * // result 3\n * ```\n *\n * @see {@link cachedWithTTL} for a similar function that includes a\n * time-to-live duration for the cached value.\n * @see {@link cachedInvalidateWithTTL} for a similar function that includes an\n * additional effect for manually invalidating the cached value.\n *\n * @since 2.0.0\n * @category Caching\n */\nexport const cached: <A, E, R>(self: Effect<A, E, R>) => Effect<Effect<A, E, R>> = effect.memoize\n\n/**\n * Returns a memoized version of a function with effects, reusing results for\n * the same inputs.\n *\n * **Details**\n *\n * This function creates a memoized version of a given function that performs an\n * effect. Memoization ensures that once a result is computed for a specific\n * input, it is stored and reused for subsequent calls with the same input,\n * reducing the need to recompute the result.\n *\n * The function can optionally take an `Equivalence` parameter to\n * determine how inputs are compared for caching purposes.\n *\n * **When to Use**\n *\n * Use this function when you have a function that performs an effect and you\n * want to avoid recomputing the result for the same input multiple times.\n *\n * It's ideal for functions that produce deterministic results based on their\n * inputs, and you want to improve performance by caching the output.\n *\n * This is particularly useful in scenarios where the function involves\n * expensive calculations or operations that should be avoided after the first\n * execution with the same parameters.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Random } from \"effect\"\n *\n * const program = Effect.gen(function* () {\n *   const randomNumber = (n: number) => Random.nextIntBetween(1, n)\n *   console.log(\"non-memoized version:\")\n *   console.log(yield* randomNumber(10))\n *   console.log(yield* randomNumber(10))\n *\n *   console.log(\"memoized version:\")\n *   const memoized = yield* Effect.cachedFunction(randomNumber)\n *   console.log(yield* memoized(10))\n *   console.log(yield* memoized(10))\n * })\n *\n * Effect.runFork(program)\n * // Example Output:\n * // non-memoized version:\n * // 2\n * // 8\n * // memoized version:\n * // 5\n * // 5\n * ```\n *\n * @since 2.0.0\n * @category Caching\n */\nexport const cachedFunction: <A, B, E, R>(\n  f: (a: A) => Effect<B, E, R>,\n  eq?: Equivalence<A>\n) => Effect<(a: A) => Effect<B, E, R>> = circular.cachedFunction\n\n/**\n * Returns an effect that executes only once, regardless of how many times it's\n * called.\n *\n * **Details**\n *\n * This function ensures that a specific effect is executed only a single time,\n * no matter how many times it is invoked. The result of the effect will be\n * cached, and subsequent calls to the effect will immediately return the cached\n * result without re-executing the original logic.\n *\n * **When to Use**\n *\n * Use this function when you need to perform a task only once, regardless of\n * how many times the effect is triggered. It's particularly useful when you\n * have initialization tasks, logging, or other one-time actions that should not\n * be repeated. This can help optimize performance and avoid redundant actions.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const program = Effect.gen(function* () {\n *   const task1 = Console.log(\"task1\")\n *   yield* Effect.repeatN(task1, 2)\n *   const task2 = yield* Effect.once(Console.log(\"task2\"))\n *   yield* Effect.repeatN(task2, 2)\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // task1\n * // task1\n * // task1\n * // task2\n * ```\n *\n * @since 2.0.0\n * @category Caching\n */\nexport const once: <A, E, R>(self: Effect<A, E, R>) => Effect<Effect<void, E, R>> = effect.once\n\n/**\n * Combines multiple effects into one, returning results based on the input\n * structure.\n *\n * **Details**\n *\n * Use this function when you need to run multiple effects and combine their\n * results into a single output. It supports tuples, iterables, structs, and\n * records, making it flexible for different input types.\n *\n * For instance, if the input is a tuple:\n *\n * ```ts skip-type-checking\n * //         ┌─── a tuple of effects\n * //         ▼\n * Effect.all([effect1, effect2, ...])\n * ```\n *\n * the effects are executed sequentially, and the result is a new effect\n * containing the results as a tuple. The results in the tuple match the order\n * of the effects passed to `Effect.all`.\n *\n * **Concurrency**\n *\n * You can control the execution order (e.g., sequential vs. concurrent) using\n * the `concurrency` option.\n *\n * **Short-Circuiting Behavior**\n *\n * This function stops execution on the first error it encounters, this is\n * called \"short-circuiting\". If any effect in the collection fails, the\n * remaining effects will not run, and the error will be propagated. To change\n * this behavior, you can use the `mode` option, which allows all effects to run\n * and collect results as `Either` or `Option`.\n *\n * **The `mode` option**\n *\n * The `{ mode: \"either\" }` option changes the behavior of `Effect.all` to\n * ensure all effects run, even if some fail. Instead of stopping on the first\n * failure, this mode collects both successes and failures, returning an array\n * of `Either` instances where each result is either a `Right` (success) or a\n * `Left` (failure).\n *\n * Similarly, the `{ mode: \"validate\" }` option uses `Option` to indicate\n * success or failure. Each effect returns `None` for success and `Some` with\n * the error for failure.\n *\n * **Example** (Combining Effects in Tuples)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const tupleOfEffects = [\n *   Effect.succeed(42).pipe(Effect.tap(Console.log)),\n *   Effect.succeed(\"Hello\").pipe(Effect.tap(Console.log))\n * ] as const\n *\n * //      ┌─── Effect<[number, string], never, never>\n * //      ▼\n * const resultsAsTuple = Effect.all(tupleOfEffects)\n *\n * Effect.runPromise(resultsAsTuple).then(console.log)\n * // Output:\n * // 42\n * // Hello\n * // [ 42, 'Hello' ]\n * ```\n *\n * **Example** (Combining Effects in Iterables)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const iterableOfEffects: Iterable<Effect.Effect<number>> = [1, 2, 3].map(\n *   (n) => Effect.succeed(n).pipe(Effect.tap(Console.log))\n * )\n *\n * //      ┌─── Effect<number[], never, never>\n * //      ▼\n * const resultsAsArray = Effect.all(iterableOfEffects)\n *\n * Effect.runPromise(resultsAsArray).then(console.log)\n * // Output:\n * // 1\n * // 2\n * // 3\n * // [ 1, 2, 3 ]\n * ```\n *\n * **Example** (Combining Effects in Structs)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const structOfEffects = {\n *   a: Effect.succeed(42).pipe(Effect.tap(Console.log)),\n *   b: Effect.succeed(\"Hello\").pipe(Effect.tap(Console.log))\n * }\n *\n * //      ┌─── Effect<{ a: number; b: string; }, never, never>\n * //      ▼\n * const resultsAsStruct = Effect.all(structOfEffects)\n *\n * Effect.runPromise(resultsAsStruct).then(console.log)\n * // Output:\n * // 42\n * // Hello\n * // { a: 42, b: 'Hello' }\n * ```\n *\n * **Example** (Combining Effects in Records)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const recordOfEffects: Record<string, Effect.Effect<number>> = {\n *   key1: Effect.succeed(1).pipe(Effect.tap(Console.log)),\n *   key2: Effect.succeed(2).pipe(Effect.tap(Console.log))\n * }\n *\n * //      ┌─── Effect<{ [x: string]: number; }, never, never>\n * //      ▼\n * const resultsAsRecord = Effect.all(recordOfEffects)\n *\n * Effect.runPromise(resultsAsRecord).then(console.log)\n * // Output:\n * // 1\n * // 2\n * // { key1: 1, key2: 2 }\n * ```\n *\n * **Example** (Short-Circuiting Behavior)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const program = Effect.all([\n *   Effect.succeed(\"Task1\").pipe(Effect.tap(Console.log)),\n *   Effect.fail(\"Task2: Oh no!\").pipe(Effect.tap(Console.log)),\n *   // Won't execute due to earlier failure\n *   Effect.succeed(\"Task3\").pipe(Effect.tap(Console.log))\n * ])\n *\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // Task1\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: { _id: 'Cause', _tag: 'Fail', failure: 'Task2: Oh no!' }\n * // }\n * ```\n *\n * **Example** (Collecting Results with `mode: \"either\"`)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const effects = [\n *   Effect.succeed(\"Task1\").pipe(Effect.tap(Console.log)),\n *   Effect.fail(\"Task2: Oh no!\").pipe(Effect.tap(Console.log)),\n *   Effect.succeed(\"Task3\").pipe(Effect.tap(Console.log))\n * ]\n *\n * const program = Effect.all(effects, { mode: \"either\" })\n *\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // Task1\n * // Task3\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Success',\n * //   value: [\n * //     { _id: 'Either', _tag: 'Right', right: 'Task1' },\n * //     { _id: 'Either', _tag: 'Left', left: 'Task2: Oh no!' },\n * //     { _id: 'Either', _tag: 'Right', right: 'Task3' }\n * //   ]\n * // }\n * ```\n *\n * **Example** (Collecting Results with `mode: \"validate\"`)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const effects = [\n *   Effect.succeed(\"Task1\").pipe(Effect.tap(Console.log)),\n *   Effect.fail(\"Task2: Oh no!\").pipe(Effect.tap(Console.log)),\n *   Effect.succeed(\"Task3\").pipe(Effect.tap(Console.log))\n * ]\n *\n * const program = Effect.all(effects, { mode: \"validate\" })\n *\n * Effect.runPromiseExit(program).then((result) => console.log(\"%o\", result))\n * // Output:\n * // Task1\n * // Task3\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: {\n * //     _id: 'Cause',\n * //     _tag: 'Fail',\n * //     failure: [\n * //       { _id: 'Option', _tag: 'None' },\n * //       { _id: 'Option', _tag: 'Some', value: 'Task2: Oh no!' },\n * //       { _id: 'Option', _tag: 'None' }\n * //     ]\n * //   }\n * // }\n * ```\n *\n * @see {@link forEach} for iterating over elements and applying an effect.\n * @see {@link allWith} for a data-last version of this function.\n *\n * @since 2.0.0\n * @category Collecting\n */\nexport const all: <\n  const Arg extends Iterable<Effect<any, any, any>> | Record<string, Effect<any, any, any>>,\n  O extends NoExcessProperties<{\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }, O>\n>(arg: Arg, options?: O) => All.Return<Arg, O> = fiberRuntime.all\n\n/**\n * A data-last version of {@link all}, designed for use in pipelines.\n *\n * **When to Use**\n *\n * This function enables you to combine multiple effects and customize execution\n * options such as concurrency levels. This version is useful in functional\n * pipelines where you first define your data and then apply operations to it.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, pipe } from \"effect\"\n *\n * const task1 = Effect.succeed(1).pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Effect.log(\"task1 done\"))\n * )\n *\n * const task2 = Effect.succeed(\"hello\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Effect.log(\"task2 done\"))\n * )\n *\n * const program = pipe(\n *   [task1, task2],\n *   // Run both effects concurrently using the concurrent option\n *   Effect.allWith({ concurrency: 2 })\n * )\n *\n * Effect.runPromise(program).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#3 message=\"task2 done\"\n * // timestamp=... level=INFO fiber=#2 message=\"task1 done\"\n * // [ 1, 'hello' ]\n * ```\n *\n * @since 2.0.0\n * @category Collecting\n */\nexport const allWith: <\n  O extends NoExcessProperties<{\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }, O>\n>(\n  options?: O\n) => <const Arg extends Iterable<Effect<any, any, any>> | Record<string, Effect<any, any, any>>>(\n  arg: Arg\n) => All.Return<Arg, O> = fiberRuntime.allWith\n\n/**\n * @since 2.0.0\n */\nexport declare namespace All {\n  /**\n   * @since 2.0.0\n   */\n  export type EffectAny = Effect<any, any, any>\n\n  /**\n   * @since 2.0.0\n   */\n  export type ReturnIterable<T extends Iterable<EffectAny>, Discard extends boolean, Mode> = [T] extends\n    [Iterable<Effect.Variance<infer R0, infer L0, infer R>>] ? Effect<\n      Discard extends true ? void : Mode extends \"either\" ? Array<Either.Either<R0, L0>> : Array<R0>,\n      Mode extends \"either\" ? never\n        : Mode extends \"validate\" ? Array<Option.Option<L0>>\n        : L0,\n      R\n    >\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type ReturnTuple<T extends ReadonlyArray<unknown>, Discard extends boolean, Mode> = Effect<\n    Discard extends true ? void\n      : T[number] extends never ? []\n      : Mode extends \"either\" ? {\n          -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ?\n            Either.Either<_A, _E>\n            : never\n        }\n      : { -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? _A : never },\n    Mode extends \"either\" ? never\n      : T[number] extends never ? never\n      : Mode extends \"validate\" ? {\n          -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? Option.Option<_E>\n            : never\n        }\n      : [T[number]] extends [{ [EffectTypeId]: { _E: (_: never) => infer E } }] ? E\n      : never,\n    T[number] extends never ? never\n      : [T[number]] extends [{ [EffectTypeId]: { _R: (_: never) => infer R } }] ? R\n      : never\n  > extends infer X ? X : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type ReturnObject<T, Discard extends boolean, Mode> = [T] extends [{ [K: string]: EffectAny }] ? Effect<\n      Discard extends true ? void\n        : Mode extends \"either\" ? {\n            -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ?\n              Either.Either<_A, _E>\n              : never\n          }\n        : { -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? _A : never },\n      Mode extends \"either\" ? never\n        : keyof T extends never ? never\n        : Mode extends \"validate\" ? {\n            -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? Option.Option<_E>\n              : never\n          }\n        : [T[keyof T]] extends [{ [EffectTypeId]: { _E: (_: never) => infer E } }] ? E\n        : never,\n      keyof T extends never ? never\n        : [T[keyof T]] extends [{ [EffectTypeId]: { _R: (_: never) => infer R } }] ? R\n        : never\n    >\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type IsDiscard<A> = [Extract<A, { readonly discard: true }>] extends [never] ? false : true\n\n  /**\n   * @since 2.0.0\n   */\n  export type ExtractMode<A> = [A] extends [{ mode: infer M }] ? M : \"default\"\n\n  /**\n   * @since 2.0.0\n   */\n  export type Return<\n    Arg extends Iterable<EffectAny> | Record<string, EffectAny>,\n    O extends NoExcessProperties<{\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: boolean | undefined\n      readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }, O>\n  > = [Arg] extends [ReadonlyArray<EffectAny>] ? ReturnTuple<Arg, IsDiscard<O>, ExtractMode<O>>\n    : [Arg] extends [Iterable<EffectAny>] ? ReturnIterable<Arg, IsDiscard<O>, ExtractMode<O>>\n    : [Arg] extends [Record<string, EffectAny>] ? ReturnObject<Arg, IsDiscard<O>, ExtractMode<O>>\n    : never\n}\n\n/**\n * Evaluates and runs each effect in the iterable, collecting only the\n * successful results while discarding failures.\n *\n * **Details**\n *\n * This function function processes an iterable of effects and runs each one. If\n * an effect is successful, its result is collected; if it fails, the result is\n * discarded. This ensures that only successful outcomes are kept.\n *\n * **Options**\n *\n * The function also allows you to customize how the effects are handled by\n * specifying options such as concurrency, batching, and how finalizers behave.\n * These options provide flexibility in running the effects concurrently or\n * adjusting other execution details.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const tasks = [\n *   Effect.succeed(1),\n *   Effect.fail(\"Error 1\"),\n *   Effect.succeed(2),\n *   Effect.fail(\"Error 2\")\n * ]\n *\n * const program = Effect.gen(function*() {\n *   const successfulResults = yield* Effect.allSuccesses(tasks)\n *   console.log(successfulResults)\n * })\n *\n * Effect.runFork(program)\n * // Output: [1, 2]\n *\n * ```\n *\n * @since 2.0.0\n * @category Collecting\n */\nexport const allSuccesses: <X extends Effect<any, any, any>>(\n  elements: Iterable<X>,\n  options?:\n    | {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n    | undefined\n) => Effect<Array<Effect.Success<X>>, never, Effect.Context<X>> = fiberRuntime.allSuccesses\n\n/**\n * Drops elements until the effectful predicate returns `true`.\n *\n * **Details**\n *\n * This function processes a collection of elements and uses an effectful\n * predicate to determine when to stop dropping elements. It drops elements from\n * the beginning of the collection until the predicate returns `true`.\n *\n * The predicate is a function that takes an element and its index in the\n * collection and returns an effect that evaluates to a boolean.\n *\n * Once the predicate returns `true`, the remaining elements of the collection\n * are returned.\n *\n * **Note**: The first element for which the predicate returns `true` is also\n * dropped.\n *\n * **When to Use**\n *\n * This function allows you to conditionally skip over a part of the collection\n * based on some criteria defined in the predicate.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5, 6]\n * const predicate = (n: number, i: number) => Effect.succeed(n > 3)\n *\n * const program = Effect.gen(function*() {\n *   const result = yield* Effect.dropUntil(numbers, predicate)\n *   console.log(result)\n * })\n *\n * Effect.runFork(program)\n * // Output: [5, 6]\n * ```\n *\n * @see {@link dropWhile} for a similar function that drops elements while the\n * predicate returns `true`.\n *\n * @since 2.0.0\n * @category Collecting\n */\nexport const dropUntil: {\n  /**\n   * Drops elements until the effectful predicate returns `true`.\n   *\n   * **Details**\n   *\n   * This function processes a collection of elements and uses an effectful\n   * predicate to determine when to stop dropping elements. It drops elements from\n   * the beginning of the collection until the predicate returns `true`.\n   *\n   * The predicate is a function that takes an element and its index in the\n   * collection and returns an effect that evaluates to a boolean.\n   *\n   * Once the predicate returns `true`, the remaining elements of the collection\n   * are returned.\n   *\n   * **Note**: The first element for which the predicate returns `true` is also\n   * dropped.\n   *\n   * **When to Use**\n   *\n   * This function allows you to conditionally skip over a part of the collection\n   * based on some criteria defined in the predicate.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5, 6]\n   * const predicate = (n: number, i: number) => Effect.succeed(n > 3)\n   *\n   * const program = Effect.gen(function*() {\n   *   const result = yield* Effect.dropUntil(numbers, predicate)\n   *   console.log(result)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: [5, 6]\n   * ```\n   *\n   * @see {@link dropWhile} for a similar function that drops elements while the\n   * predicate returns `true`.\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, E, R>(predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  /**\n   * Drops elements until the effectful predicate returns `true`.\n   *\n   * **Details**\n   *\n   * This function processes a collection of elements and uses an effectful\n   * predicate to determine when to stop dropping elements. It drops elements from\n   * the beginning of the collection until the predicate returns `true`.\n   *\n   * The predicate is a function that takes an element and its index in the\n   * collection and returns an effect that evaluates to a boolean.\n   *\n   * Once the predicate returns `true`, the remaining elements of the collection\n   * are returned.\n   *\n   * **Note**: The first element for which the predicate returns `true` is also\n   * dropped.\n   *\n   * **When to Use**\n   *\n   * This function allows you to conditionally skip over a part of the collection\n   * based on some criteria defined in the predicate.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5, 6]\n   * const predicate = (n: number, i: number) => Effect.succeed(n > 3)\n   *\n   * const program = Effect.gen(function*() {\n   *   const result = yield* Effect.dropUntil(numbers, predicate)\n   *   console.log(result)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: [5, 6]\n   * ```\n   *\n   * @see {@link dropWhile} for a similar function that drops elements while the\n   * predicate returns `true`.\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: A, i: number) => Effect<boolean, E, R>\n  ): Effect<Array<A>, E, R>\n} = effect.dropUntil\n\n/**\n * Drops elements as long as the predicate returns `true`.\n *\n * **Details**\n *\n * This function processes a collection of elements and uses a predicate to\n * decide whether to drop an element.\n *\n * The predicate is a function that takes an element and its index, and it\n * returns an effect that evaluates to a boolean.\n *\n * As long as the predicate returns `true`, elements will continue to be dropped\n * from the collection.\n *\n * Once the predicate returns `false`, the remaining elements are kept.\n *\n * **When to Use**\n *\n * This function allows you to discard elements from the start of a collection\n * based on a condition, and only keep the rest when the condition no longer\n * holds.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5, 6]\n * const predicate = (n: number, i: number) => Effect.succeed(n <= 3)\n *\n * const program = Effect.gen(function*() {\n *   const result = yield* Effect.dropWhile(numbers, predicate)\n *   console.log(result)\n * })\n *\n * Effect.runFork(program)\n * // Output: [4, 5, 6]\n * ```\n *\n * @see {@link dropUntil} for a similar function that drops elements until the\n * predicate returns `true`.\n *\n * @since 2.0.0\n * @category Collecting\n */\nexport const dropWhile: {\n  /**\n   * Drops elements as long as the predicate returns `true`.\n   *\n   * **Details**\n   *\n   * This function processes a collection of elements and uses a predicate to\n   * decide whether to drop an element.\n   *\n   * The predicate is a function that takes an element and its index, and it\n   * returns an effect that evaluates to a boolean.\n   *\n   * As long as the predicate returns `true`, elements will continue to be dropped\n   * from the collection.\n   *\n   * Once the predicate returns `false`, the remaining elements are kept.\n   *\n   * **When to Use**\n   *\n   * This function allows you to discard elements from the start of a collection\n   * based on a condition, and only keep the rest when the condition no longer\n   * holds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5, 6]\n   * const predicate = (n: number, i: number) => Effect.succeed(n <= 3)\n   *\n   * const program = Effect.gen(function*() {\n   *   const result = yield* Effect.dropWhile(numbers, predicate)\n   *   console.log(result)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: [4, 5, 6]\n   * ```\n   *\n   * @see {@link dropUntil} for a similar function that drops elements until the\n   * predicate returns `true`.\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, E, R>(predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  /**\n   * Drops elements as long as the predicate returns `true`.\n   *\n   * **Details**\n   *\n   * This function processes a collection of elements and uses a predicate to\n   * decide whether to drop an element.\n   *\n   * The predicate is a function that takes an element and its index, and it\n   * returns an effect that evaluates to a boolean.\n   *\n   * As long as the predicate returns `true`, elements will continue to be dropped\n   * from the collection.\n   *\n   * Once the predicate returns `false`, the remaining elements are kept.\n   *\n   * **When to Use**\n   *\n   * This function allows you to discard elements from the start of a collection\n   * based on a condition, and only keep the rest when the condition no longer\n   * holds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5, 6]\n   * const predicate = (n: number, i: number) => Effect.succeed(n <= 3)\n   *\n   * const program = Effect.gen(function*() {\n   *   const result = yield* Effect.dropWhile(numbers, predicate)\n   *   console.log(result)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: [4, 5, 6]\n   * ```\n   *\n   * @see {@link dropUntil} for a similar function that drops elements until the\n   * predicate returns `true`.\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: A, i: number) => Effect<boolean, E, R>\n  ): Effect<Array<A>, E, R>\n} = effect.dropWhile\n\n/**\n * Takes elements from a collection until the effectful predicate returns\n * `true`.\n *\n * **Details**\n *\n * This function processes a collection of elements and uses an effectful\n * predicate to decide when to stop taking elements. The elements are taken from\n * the beginning of the collection until the predicate returns `true`.\n *\n * The predicate is a function that takes an element and its index in the\n * collection, and returns an effect that resolves to a boolean.\n *\n * Once the predicate returns `true`, the remaining elements of the collection\n * are discarded, and the function stops taking more elements.\n *\n * **Note**: The first element for which the predicate returns `true` is also\n * included in the result.\n *\n * **When to Use**\n *\n * Use this function when you want to conditionally take elements from a\n * collection based on a dynamic condition. For example, you may want to collect\n * numbers from a list until a certain threshold is reached, or gather items\n * until a specific condition is met.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5, 6]\n * const predicate = (n: number, i: number) => Effect.succeed(n > 3)\n *\n * const program = Effect.gen(function*() {\n *   const result = yield* Effect.takeUntil(numbers, predicate)\n *   console.log(result)\n * })\n *\n * Effect.runFork(program)\n * // Output: [ 1, 2, 3, 4 ]\n * ```\n *\n * @see {@link takeWhile} for a similar function that takes elements while the\n * predicate returns `true`.\n *\n * @since 2.0.0\n * @category Collecting\n */\nexport const takeUntil: {\n  /**\n   * Takes elements from a collection until the effectful predicate returns\n   * `true`.\n   *\n   * **Details**\n   *\n   * This function processes a collection of elements and uses an effectful\n   * predicate to decide when to stop taking elements. The elements are taken from\n   * the beginning of the collection until the predicate returns `true`.\n   *\n   * The predicate is a function that takes an element and its index in the\n   * collection, and returns an effect that resolves to a boolean.\n   *\n   * Once the predicate returns `true`, the remaining elements of the collection\n   * are discarded, and the function stops taking more elements.\n   *\n   * **Note**: The first element for which the predicate returns `true` is also\n   * included in the result.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to conditionally take elements from a\n   * collection based on a dynamic condition. For example, you may want to collect\n   * numbers from a list until a certain threshold is reached, or gather items\n   * until a specific condition is met.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5, 6]\n   * const predicate = (n: number, i: number) => Effect.succeed(n > 3)\n   *\n   * const program = Effect.gen(function*() {\n   *   const result = yield* Effect.takeUntil(numbers, predicate)\n   *   console.log(result)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: [ 1, 2, 3, 4 ]\n   * ```\n   *\n   * @see {@link takeWhile} for a similar function that takes elements while the\n   * predicate returns `true`.\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, R, E>(predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  /**\n   * Takes elements from a collection until the effectful predicate returns\n   * `true`.\n   *\n   * **Details**\n   *\n   * This function processes a collection of elements and uses an effectful\n   * predicate to decide when to stop taking elements. The elements are taken from\n   * the beginning of the collection until the predicate returns `true`.\n   *\n   * The predicate is a function that takes an element and its index in the\n   * collection, and returns an effect that resolves to a boolean.\n   *\n   * Once the predicate returns `true`, the remaining elements of the collection\n   * are discarded, and the function stops taking more elements.\n   *\n   * **Note**: The first element for which the predicate returns `true` is also\n   * included in the result.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to conditionally take elements from a\n   * collection based on a dynamic condition. For example, you may want to collect\n   * numbers from a list until a certain threshold is reached, or gather items\n   * until a specific condition is met.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5, 6]\n   * const predicate = (n: number, i: number) => Effect.succeed(n > 3)\n   *\n   * const program = Effect.gen(function*() {\n   *   const result = yield* Effect.takeUntil(numbers, predicate)\n   *   console.log(result)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: [ 1, 2, 3, 4 ]\n   * ```\n   *\n   * @see {@link takeWhile} for a similar function that takes elements while the\n   * predicate returns `true`.\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): Effect<Array<A>, E, R>\n} = effect.takeUntil\n\n/**\n * Takes elements as long as the predicate returns `true`.\n *\n * **Details**\n *\n * This function processes a collection of elements and uses a predicate to\n * decide whether to take an element.\n *\n * The predicate is a function that takes an element and its index, and it\n * returns an effect that evaluates to a boolean.\n *\n * As long as the predicate returns `true`, elements will continue to be taken\n * from the collection.\n *\n * Once the predicate returns `false`, the remaining elements are discarded.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5, 6]\n * const predicate = (n: number, i: number) => Effect.succeed(n <= 3)\n *\n * const program = Effect.gen(function*() {\n *   const result = yield* Effect.takeWhile(numbers, predicate)\n *   console.log(result)\n * })\n *\n * Effect.runFork(program)\n * // Output: [1, 2, 3]\n * ```\n *\n * @see {@link takeUntil} for a similar function that takes elements until the predicate returns `true`.\n *\n * @since 2.0.0\n * @category Collecting\n */\nexport const takeWhile: {\n  /**\n   * Takes elements as long as the predicate returns `true`.\n   *\n   * **Details**\n   *\n   * This function processes a collection of elements and uses a predicate to\n   * decide whether to take an element.\n   *\n   * The predicate is a function that takes an element and its index, and it\n   * returns an effect that evaluates to a boolean.\n   *\n   * As long as the predicate returns `true`, elements will continue to be taken\n   * from the collection.\n   *\n   * Once the predicate returns `false`, the remaining elements are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5, 6]\n   * const predicate = (n: number, i: number) => Effect.succeed(n <= 3)\n   *\n   * const program = Effect.gen(function*() {\n   *   const result = yield* Effect.takeWhile(numbers, predicate)\n   *   console.log(result)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: [1, 2, 3]\n   * ```\n   *\n   * @see {@link takeUntil} for a similar function that takes elements until the predicate returns `true`.\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, E, R>(predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  /**\n   * Takes elements as long as the predicate returns `true`.\n   *\n   * **Details**\n   *\n   * This function processes a collection of elements and uses a predicate to\n   * decide whether to take an element.\n   *\n   * The predicate is a function that takes an element and its index, and it\n   * returns an effect that evaluates to a boolean.\n   *\n   * As long as the predicate returns `true`, elements will continue to be taken\n   * from the collection.\n   *\n   * Once the predicate returns `false`, the remaining elements are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5, 6]\n   * const predicate = (n: number, i: number) => Effect.succeed(n <= 3)\n   *\n   * const program = Effect.gen(function*() {\n   *   const result = yield* Effect.takeWhile(numbers, predicate)\n   *   console.log(result)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: [1, 2, 3]\n   * ```\n   *\n   * @see {@link takeUntil} for a similar function that takes elements until the predicate returns `true`.\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): Effect<Array<A>, E, R>\n} = effect.takeWhile\n\n/**\n * Determines whether all elements of the iterable satisfy the effectful\n * predicate.\n *\n * **Details**\n *\n * This function checks whether every element in a given collection (an\n * iterable) satisfies a condition defined by an effectful predicate.\n *\n * The predicate is a function that takes an element and its index, and it\n * returns an effect that evaluates to a boolean.\n *\n * The function will process each element and return `true` if all elements\n * satisfy the predicate; otherwise, it returns `false`.\n *\n * **When to Use**\n *\n * This function is useful when you need to verify that all items in a\n * collection meet certain criteria, even when the evaluation of each item\n * involves effects, such as asynchronous checks or complex computations.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const numbers = [2, 4, 6, 8]\n * const predicate = (n: number, i: number) => Effect.succeed(n % 2 === 0)\n *\n * const program = Effect.gen(function*() {\n *   const allEven = yield* Effect.every(numbers, predicate)\n *   console.log(allEven)\n * })\n *\n * Effect.runFork(program)\n * // Output: true\n * ```\n *\n * @see {@link exists} for a similar function that returns a boolean indicating\n * whether **any** element satisfies the predicate.\n *\n * @since 2.0.0\n * @category Condition Checking\n */\nexport const every: {\n  /**\n   * Determines whether all elements of the iterable satisfy the effectful\n   * predicate.\n   *\n   * **Details**\n   *\n   * This function checks whether every element in a given collection (an\n   * iterable) satisfies a condition defined by an effectful predicate.\n   *\n   * The predicate is a function that takes an element and its index, and it\n   * returns an effect that evaluates to a boolean.\n   *\n   * The function will process each element and return `true` if all elements\n   * satisfy the predicate; otherwise, it returns `false`.\n   *\n   * **When to Use**\n   *\n   * This function is useful when you need to verify that all items in a\n   * collection meet certain criteria, even when the evaluation of each item\n   * involves effects, such as asynchronous checks or complex computations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [2, 4, 6, 8]\n   * const predicate = (n: number, i: number) => Effect.succeed(n % 2 === 0)\n   *\n   * const program = Effect.gen(function*() {\n   *   const allEven = yield* Effect.every(numbers, predicate)\n   *   console.log(allEven)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: true\n   * ```\n   *\n   * @see {@link exists} for a similar function that returns a boolean indicating\n   * whether **any** element satisfies the predicate.\n   *\n   * @since 2.0.0\n   * @category Condition Checking\n   */\n  <A, E, R>(predicate: (a: A, i: number) => Effect<boolean, E, R>): (elements: Iterable<A>) => Effect<boolean, E, R>\n  /**\n   * Determines whether all elements of the iterable satisfy the effectful\n   * predicate.\n   *\n   * **Details**\n   *\n   * This function checks whether every element in a given collection (an\n   * iterable) satisfies a condition defined by an effectful predicate.\n   *\n   * The predicate is a function that takes an element and its index, and it\n   * returns an effect that evaluates to a boolean.\n   *\n   * The function will process each element and return `true` if all elements\n   * satisfy the predicate; otherwise, it returns `false`.\n   *\n   * **When to Use**\n   *\n   * This function is useful when you need to verify that all items in a\n   * collection meet certain criteria, even when the evaluation of each item\n   * involves effects, such as asynchronous checks or complex computations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [2, 4, 6, 8]\n   * const predicate = (n: number, i: number) => Effect.succeed(n % 2 === 0)\n   *\n   * const program = Effect.gen(function*() {\n   *   const allEven = yield* Effect.every(numbers, predicate)\n   *   console.log(allEven)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: true\n   * ```\n   *\n   * @see {@link exists} for a similar function that returns a boolean indicating\n   * whether **any** element satisfies the predicate.\n   *\n   * @since 2.0.0\n   * @category Condition Checking\n   */\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: A, i: number) => Effect<boolean, E, R>\n  ): Effect<boolean, E, R>\n} = effect.every\n\n/**\n * Determines whether any element of the iterable satisfies the effectual\n * predicate.\n *\n * **Details**\n *\n * This function checks whether any element in a given collection (an iterable)\n * satisfies a condition defined by an effectful predicate.\n *\n * The predicate is a function that takes an element and its index, and it\n * returns an effect that evaluates to a boolean.\n *\n * The function will process each element, and if any element satisfies the\n * predicate (returns `true`), the function will immediately return `true`.\n *\n * If none of the elements satisfy the condition, it will return `false`.\n *\n * **When to Use**\n *\n * This function allows you to quickly check for a condition in a collection\n * without having to manually iterate over it.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const predicate = (n: number, i: number) => Effect.succeed(n > 2)\n *\n * const program = Effect.gen(function*() {\n *   const hasLargeNumber = yield* Effect.exists(numbers, predicate)\n *   console.log(hasLargeNumber)\n * })\n *\n * Effect.runFork(program)\n * // Output: true\n * ```\n *\n * @see {@link every} for a similar function that checks if **all** elements\n * satisfy the predicate.\n *\n * @since 2.0.0\n * @category Condition Checking\n */\nexport const exists: {\n  /**\n   * Determines whether any element of the iterable satisfies the effectual\n   * predicate.\n   *\n   * **Details**\n   *\n   * This function checks whether any element in a given collection (an iterable)\n   * satisfies a condition defined by an effectful predicate.\n   *\n   * The predicate is a function that takes an element and its index, and it\n   * returns an effect that evaluates to a boolean.\n   *\n   * The function will process each element, and if any element satisfies the\n   * predicate (returns `true`), the function will immediately return `true`.\n   *\n   * If none of the elements satisfy the condition, it will return `false`.\n   *\n   * **When to Use**\n   *\n   * This function allows you to quickly check for a condition in a collection\n   * without having to manually iterate over it.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const predicate = (n: number, i: number) => Effect.succeed(n > 2)\n   *\n   * const program = Effect.gen(function*() {\n   *   const hasLargeNumber = yield* Effect.exists(numbers, predicate)\n   *   console.log(hasLargeNumber)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: true\n   * ```\n   *\n   * @see {@link every} for a similar function that checks if **all** elements\n   * satisfy the predicate.\n   *\n   * @since 2.0.0\n   * @category Condition Checking\n   */\n  <A, E, R>(\n    predicate: (a: A, i: number) => Effect<boolean, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): (elements: Iterable<A>) => Effect<boolean, E, R>\n  /**\n   * Determines whether any element of the iterable satisfies the effectual\n   * predicate.\n   *\n   * **Details**\n   *\n   * This function checks whether any element in a given collection (an iterable)\n   * satisfies a condition defined by an effectful predicate.\n   *\n   * The predicate is a function that takes an element and its index, and it\n   * returns an effect that evaluates to a boolean.\n   *\n   * The function will process each element, and if any element satisfies the\n   * predicate (returns `true`), the function will immediately return `true`.\n   *\n   * If none of the elements satisfy the condition, it will return `false`.\n   *\n   * **When to Use**\n   *\n   * This function allows you to quickly check for a condition in a collection\n   * without having to manually iterate over it.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const predicate = (n: number, i: number) => Effect.succeed(n > 2)\n   *\n   * const program = Effect.gen(function*() {\n   *   const hasLargeNumber = yield* Effect.exists(numbers, predicate)\n   *   console.log(hasLargeNumber)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: true\n   * ```\n   *\n   * @see {@link every} for a similar function that checks if **all** elements\n   * satisfy the predicate.\n   *\n   * @since 2.0.0\n   * @category Condition Checking\n   */\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: A, i: number) => Effect<boolean, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<boolean, E, R>\n} = fiberRuntime.exists\n\n/**\n * Filters an iterable using the specified effectful predicate.\n *\n * **Details**\n *\n * This function filters a collection (an iterable) by applying an effectful\n * predicate.\n *\n * The predicate is a function that takes an element and its index, and it\n * returns an effect that evaluates to a boolean.\n *\n * The function processes each element in the collection and keeps only those\n * that satisfy the condition defined by the predicate.\n *\n * **Options**\n *\n * You can also adjust the behavior with options such as concurrency, batching,\n * or whether to negate the condition.\n *\n * **When to Use**\n *\n * This function allows you to selectively keep or remove elements based on a\n * condition that may involve asynchronous or side-effect-causing operations.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const predicate = (n: number, i: number) => Effect.succeed(n % 2 === 0)\n *\n * const program = Effect.gen(function*() {\n *   const result = yield* Effect.filter(numbers, predicate)\n *   console.log(result)\n * })\n *\n * Effect.runFork(program)\n * // Output: [2, 4]\n * ```\n *\n * @since 2.0.0\n * @category Filtering\n */\nexport const filter: {\n  /**\n   * Filters an iterable using the specified effectful predicate.\n   *\n   * **Details**\n   *\n   * This function filters a collection (an iterable) by applying an effectful\n   * predicate.\n   *\n   * The predicate is a function that takes an element and its index, and it\n   * returns an effect that evaluates to a boolean.\n   *\n   * The function processes each element in the collection and keeps only those\n   * that satisfy the condition defined by the predicate.\n   *\n   * **Options**\n   *\n   * You can also adjust the behavior with options such as concurrency, batching,\n   * or whether to negate the condition.\n   *\n   * **When to Use**\n   *\n   * This function allows you to selectively keep or remove elements based on a\n   * condition that may involve asynchronous or side-effect-causing operations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const predicate = (n: number, i: number) => Effect.succeed(n % 2 === 0)\n   *\n   * const program = Effect.gen(function*() {\n   *   const result = yield* Effect.filter(numbers, predicate)\n   *   console.log(result)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: [2, 4]\n   * ```\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly negate?: boolean | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  /**\n   * Filters an iterable using the specified effectful predicate.\n   *\n   * **Details**\n   *\n   * This function filters a collection (an iterable) by applying an effectful\n   * predicate.\n   *\n   * The predicate is a function that takes an element and its index, and it\n   * returns an effect that evaluates to a boolean.\n   *\n   * The function processes each element in the collection and keeps only those\n   * that satisfy the condition defined by the predicate.\n   *\n   * **Options**\n   *\n   * You can also adjust the behavior with options such as concurrency, batching,\n   * or whether to negate the condition.\n   *\n   * **When to Use**\n   *\n   * This function allows you to selectively keep or remove elements based on a\n   * condition that may involve asynchronous or side-effect-causing operations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const predicate = (n: number, i: number) => Effect.succeed(n % 2 === 0)\n   *\n   * const program = Effect.gen(function*() {\n   *   const result = yield* Effect.filter(numbers, predicate)\n   *   console.log(result)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: [2, 4]\n   * ```\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly negate?: boolean | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): Effect<Array<A>, E, R>\n} = fiberRuntime.filter\n\n/**\n * Filters and maps elements sequentially in one operation.\n *\n * This function processes each element one by one. It applies a function that\n * returns an `Option` to each element. If the function returns `Some`, the\n * element is kept; if it returns `None`, the element is removed. The operation\n * is done sequentially for each element.\n *\n * **Example**\n *\n * ```ts\n * import { Console, Effect, Option } from \"effect\"\n *\n * const task = (n: number) =>\n *   Effect.succeed(n).pipe(\n *     Effect.delay(1000 - (n * 100)),\n *     Effect.tap(Console.log(`task${n} done`))\n *   )\n *\n * const program = Effect.filterMap(\n *   [task(1), task(2), task(3), task(4)],\n *   (n) => n % 2 === 0 ? Option.some(n) : Option.none()\n * )\n *\n * Effect.runPromise(program).then(console.log)\n * // Output:\n * // task1 done\n * // task2 done\n * // task3 done\n * // task4 done\n * // [ 2, 4 ]\n * ```\n *\n * @since 2.0.0\n * @category Filtering\n */\nexport const filterMap: {\n  /**\n   * Filters and maps elements sequentially in one operation.\n   *\n   * This function processes each element one by one. It applies a function that\n   * returns an `Option` to each element. If the function returns `Some`, the\n   * element is kept; if it returns `None`, the element is removed. The operation\n   * is done sequentially for each element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect, Option } from \"effect\"\n   *\n   * const task = (n: number) =>\n   *   Effect.succeed(n).pipe(\n   *     Effect.delay(1000 - (n * 100)),\n   *     Effect.tap(Console.log(`task${n} done`))\n   *   )\n   *\n   * const program = Effect.filterMap(\n   *   [task(1), task(2), task(3), task(4)],\n   *   (n) => n % 2 === 0 ? Option.some(n) : Option.none()\n   * )\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // task1 done\n   * // task2 done\n   * // task3 done\n   * // task4 done\n   * // [ 2, 4 ]\n   * ```\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <Eff extends Effect<any, any, any>, B>(pf: (a: Effect.Success<Eff>) => Option.Option<B>): (elements: Iterable<Eff>) => Effect<Array<B>, Effect.Error<Eff>, Effect.Context<Eff>>\n  /**\n   * Filters and maps elements sequentially in one operation.\n   *\n   * This function processes each element one by one. It applies a function that\n   * returns an `Option` to each element. If the function returns `Some`, the\n   * element is kept; if it returns `None`, the element is removed. The operation\n   * is done sequentially for each element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect, Option } from \"effect\"\n   *\n   * const task = (n: number) =>\n   *   Effect.succeed(n).pipe(\n   *     Effect.delay(1000 - (n * 100)),\n   *     Effect.tap(Console.log(`task${n} done`))\n   *   )\n   *\n   * const program = Effect.filterMap(\n   *   [task(1), task(2), task(3), task(4)],\n   *   (n) => n % 2 === 0 ? Option.some(n) : Option.none()\n   * )\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // task1 done\n   * // task2 done\n   * // task3 done\n   * // task4 done\n   * // [ 2, 4 ]\n   * ```\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <Eff extends Effect<any, any, any>, B>(elements: Iterable<Eff>, pf: (a: Effect.Success<Eff>) => Option.Option<B>): Effect<Array<B>, Effect.Error<Eff>, Effect.Context<Eff>>\n} = effect.filterMap\n\n/**\n * Returns the first element that satisfies the effectful predicate.\n *\n * **Details**\n *\n * This function processes a collection of elements and applies an effectful\n * predicate to each element.\n *\n * The predicate is a function that takes an element and its index in the\n * collection, and it returns an effect that evaluates to a boolean.\n *\n * The function stops as soon as it finds the first element for which the\n * predicate returns `true` and returns that element wrapped in an `Option`.\n *\n * If no element satisfies the predicate, the result will be `None`.\n *\n * **When to Use**\n *\n * This function allows you to efficiently find an element that meets a specific\n * condition, even when the evaluation involves effects like asynchronous\n * operations or side effects.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const predicate = (n: number, i: number) => Effect.succeed(n > 3)\n *\n * const program = Effect.gen(function*() {\n *   const result = yield* Effect.findFirst(numbers, predicate)\n *   console.log(result)\n * })\n *\n * Effect.runFork(program)\n * // Output: { _id: 'Option', _tag: 'Some', value: 4 }\n * ```\n *\n * @since 2.0.0\n * @category Collecting\n */\nexport const findFirst: {\n  /**\n   * Returns the first element that satisfies the effectful predicate.\n   *\n   * **Details**\n   *\n   * This function processes a collection of elements and applies an effectful\n   * predicate to each element.\n   *\n   * The predicate is a function that takes an element and its index in the\n   * collection, and it returns an effect that evaluates to a boolean.\n   *\n   * The function stops as soon as it finds the first element for which the\n   * predicate returns `true` and returns that element wrapped in an `Option`.\n   *\n   * If no element satisfies the predicate, the result will be `None`.\n   *\n   * **When to Use**\n   *\n   * This function allows you to efficiently find an element that meets a specific\n   * condition, even when the evaluation involves effects like asynchronous\n   * operations or side effects.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const predicate = (n: number, i: number) => Effect.succeed(n > 3)\n   *\n   * const program = Effect.gen(function*() {\n   *   const result = yield* Effect.findFirst(numbers, predicate)\n   *   console.log(result)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: { _id: 'Option', _tag: 'Some', value: 4 }\n   * ```\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, E, R>(predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>): (elements: Iterable<A>) => Effect<Option.Option<A>, E, R>\n  /**\n   * Returns the first element that satisfies the effectful predicate.\n   *\n   * **Details**\n   *\n   * This function processes a collection of elements and applies an effectful\n   * predicate to each element.\n   *\n   * The predicate is a function that takes an element and its index in the\n   * collection, and it returns an effect that evaluates to a boolean.\n   *\n   * The function stops as soon as it finds the first element for which the\n   * predicate returns `true` and returns that element wrapped in an `Option`.\n   *\n   * If no element satisfies the predicate, the result will be `None`.\n   *\n   * **When to Use**\n   *\n   * This function allows you to efficiently find an element that meets a specific\n   * condition, even when the evaluation involves effects like asynchronous\n   * operations or side effects.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const predicate = (n: number, i: number) => Effect.succeed(n > 3)\n   *\n   * const program = Effect.gen(function*() {\n   *   const result = yield* Effect.findFirst(numbers, predicate)\n   *   console.log(result)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: { _id: 'Option', _tag: 'Some', value: 4 }\n   * ```\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): Effect<Option.Option<A>, E, R>\n} = effect.findFirst\n\n/**\n * Executes an effectful operation for each element in an `Iterable`.\n *\n * **Details**\n *\n * This function applies a provided operation to each element in the iterable,\n * producing a new effect that returns an array of results.\n *\n * If any effect fails, the iteration stops immediately (short-circuiting), and\n * the error is propagated.\n *\n * **Concurrency**\n *\n * The `concurrency` option controls how many operations are performed\n * concurrently. By default, the operations are performed sequentially.\n *\n * **Discarding Results**\n *\n * If the `discard` option is set to `true`, the intermediate results are not\n * collected, and the final result of the operation is `void`.\n *\n * **Example** (Applying Effects to Iterable Elements)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const result = Effect.forEach([1, 2, 3, 4, 5], (n, index) =>\n *   Console.log(`Currently at index ${index}`).pipe(Effect.as(n * 2))\n * )\n *\n * Effect.runPromise(result).then(console.log)\n * // Output:\n * // Currently at index 0\n * // Currently at index 1\n * // Currently at index 2\n * // Currently at index 3\n * // Currently at index 4\n * // [ 2, 4, 6, 8, 10 ]\n * ```\n *\n * **Example** (Discarding Results)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * // Apply effects but discard the results\n * const result = Effect.forEach(\n *   [1, 2, 3, 4, 5],\n *   (n, index) =>\n *     Console.log(`Currently at index ${index}`).pipe(Effect.as(n * 2)),\n *   { discard: true }\n * )\n *\n * Effect.runPromise(result).then(console.log)\n * // Output:\n * // Currently at index 0\n * // Currently at index 1\n * // Currently at index 2\n * // Currently at index 3\n * // Currently at index 4\n * // undefined\n * ```\n *\n * @see {@link all} for combining multiple effects into one.\n *\n * @since 2.0.0\n * @category Looping\n */\nexport const forEach: {\n  /**\n   * Executes an effectful operation for each element in an `Iterable`.\n   *\n   * **Details**\n   *\n   * This function applies a provided operation to each element in the iterable,\n   * producing a new effect that returns an array of results.\n   *\n   * If any effect fails, the iteration stops immediately (short-circuiting), and\n   * the error is propagated.\n   *\n   * **Concurrency**\n   *\n   * The `concurrency` option controls how many operations are performed\n   * concurrently. By default, the operations are performed sequentially.\n   *\n   * **Discarding Results**\n   *\n   * If the `discard` option is set to `true`, the intermediate results are not\n   * collected, and the final result of the operation is `void`.\n   *\n   * **Example** (Applying Effects to Iterable Elements)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const result = Effect.forEach([1, 2, 3, 4, 5], (n, index) =>\n   *   Console.log(`Currently at index ${index}`).pipe(Effect.as(n * 2))\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output:\n   * // Currently at index 0\n   * // Currently at index 1\n   * // Currently at index 2\n   * // Currently at index 3\n   * // Currently at index 4\n   * // [ 2, 4, 6, 8, 10 ]\n   * ```\n   *\n   * **Example** (Discarding Results)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Apply effects but discard the results\n   * const result = Effect.forEach(\n   *   [1, 2, 3, 4, 5],\n   *   (n, index) =>\n   *     Console.log(`Currently at index ${index}`).pipe(Effect.as(n * 2)),\n   *   { discard: true }\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output:\n   * // Currently at index 0\n   * // Currently at index 1\n   * // Currently at index 2\n   * // Currently at index 3\n   * // Currently at index 4\n   * // undefined\n   * ```\n   *\n   * @see {@link all} for combining multiple effects into one.\n   *\n   * @since 2.0.0\n   * @category Looping\n   */\n  <B, E, R, S extends Iterable<any>>(\n    f: (a: RA.ReadonlyArray.Infer<S>, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): (\n    self: S\n  ) => Effect<RA.ReadonlyArray.With<S, B>, E, R>\n  /**\n   * Executes an effectful operation for each element in an `Iterable`.\n   *\n   * **Details**\n   *\n   * This function applies a provided operation to each element in the iterable,\n   * producing a new effect that returns an array of results.\n   *\n   * If any effect fails, the iteration stops immediately (short-circuiting), and\n   * the error is propagated.\n   *\n   * **Concurrency**\n   *\n   * The `concurrency` option controls how many operations are performed\n   * concurrently. By default, the operations are performed sequentially.\n   *\n   * **Discarding Results**\n   *\n   * If the `discard` option is set to `true`, the intermediate results are not\n   * collected, and the final result of the operation is `void`.\n   *\n   * **Example** (Applying Effects to Iterable Elements)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const result = Effect.forEach([1, 2, 3, 4, 5], (n, index) =>\n   *   Console.log(`Currently at index ${index}`).pipe(Effect.as(n * 2))\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output:\n   * // Currently at index 0\n   * // Currently at index 1\n   * // Currently at index 2\n   * // Currently at index 3\n   * // Currently at index 4\n   * // [ 2, 4, 6, 8, 10 ]\n   * ```\n   *\n   * **Example** (Discarding Results)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Apply effects but discard the results\n   * const result = Effect.forEach(\n   *   [1, 2, 3, 4, 5],\n   *   (n, index) =>\n   *     Console.log(`Currently at index ${index}`).pipe(Effect.as(n * 2)),\n   *   { discard: true }\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output:\n   * // Currently at index 0\n   * // Currently at index 1\n   * // Currently at index 2\n   * // Currently at index 3\n   * // Currently at index 4\n   * // undefined\n   * ```\n   *\n   * @see {@link all} for combining multiple effects into one.\n   *\n   * @since 2.0.0\n   * @category Looping\n   */\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): (self: Iterable<A>) => Effect<void, E, R>\n  /**\n   * Executes an effectful operation for each element in an `Iterable`.\n   *\n   * **Details**\n   *\n   * This function applies a provided operation to each element in the iterable,\n   * producing a new effect that returns an array of results.\n   *\n   * If any effect fails, the iteration stops immediately (short-circuiting), and\n   * the error is propagated.\n   *\n   * **Concurrency**\n   *\n   * The `concurrency` option controls how many operations are performed\n   * concurrently. By default, the operations are performed sequentially.\n   *\n   * **Discarding Results**\n   *\n   * If the `discard` option is set to `true`, the intermediate results are not\n   * collected, and the final result of the operation is `void`.\n   *\n   * **Example** (Applying Effects to Iterable Elements)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const result = Effect.forEach([1, 2, 3, 4, 5], (n, index) =>\n   *   Console.log(`Currently at index ${index}`).pipe(Effect.as(n * 2))\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output:\n   * // Currently at index 0\n   * // Currently at index 1\n   * // Currently at index 2\n   * // Currently at index 3\n   * // Currently at index 4\n   * // [ 2, 4, 6, 8, 10 ]\n   * ```\n   *\n   * **Example** (Discarding Results)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Apply effects but discard the results\n   * const result = Effect.forEach(\n   *   [1, 2, 3, 4, 5],\n   *   (n, index) =>\n   *     Console.log(`Currently at index ${index}`).pipe(Effect.as(n * 2)),\n   *   { discard: true }\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output:\n   * // Currently at index 0\n   * // Currently at index 1\n   * // Currently at index 2\n   * // Currently at index 3\n   * // Currently at index 4\n   * // undefined\n   * ```\n   *\n   * @see {@link all} for combining multiple effects into one.\n   *\n   * @since 2.0.0\n   * @category Looping\n   */\n  <B, E, R, S extends Iterable<any>>(\n    self: S,\n    f: (a: RA.ReadonlyArray.Infer<S>, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): Effect<RA.ReadonlyArray.With<S, B>, E, R>\n  /**\n   * Executes an effectful operation for each element in an `Iterable`.\n   *\n   * **Details**\n   *\n   * This function applies a provided operation to each element in the iterable,\n   * producing a new effect that returns an array of results.\n   *\n   * If any effect fails, the iteration stops immediately (short-circuiting), and\n   * the error is propagated.\n   *\n   * **Concurrency**\n   *\n   * The `concurrency` option controls how many operations are performed\n   * concurrently. By default, the operations are performed sequentially.\n   *\n   * **Discarding Results**\n   *\n   * If the `discard` option is set to `true`, the intermediate results are not\n   * collected, and the final result of the operation is `void`.\n   *\n   * **Example** (Applying Effects to Iterable Elements)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const result = Effect.forEach([1, 2, 3, 4, 5], (n, index) =>\n   *   Console.log(`Currently at index ${index}`).pipe(Effect.as(n * 2))\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output:\n   * // Currently at index 0\n   * // Currently at index 1\n   * // Currently at index 2\n   * // Currently at index 3\n   * // Currently at index 4\n   * // [ 2, 4, 6, 8, 10 ]\n   * ```\n   *\n   * **Example** (Discarding Results)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Apply effects but discard the results\n   * const result = Effect.forEach(\n   *   [1, 2, 3, 4, 5],\n   *   (n, index) =>\n   *     Console.log(`Currently at index ${index}`).pipe(Effect.as(n * 2)),\n   *   { discard: true }\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output:\n   * // Currently at index 0\n   * // Currently at index 1\n   * // Currently at index 2\n   * // Currently at index 3\n   * // Currently at index 4\n   * // undefined\n   * ```\n   *\n   * @see {@link all} for combining multiple effects into one.\n   *\n   * @since 2.0.0\n   * @category Looping\n   */\n  <A, B, E, R>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect<void, E, R>\n} = fiberRuntime.forEach\n\n/**\n * Returns the first element of the iterable if the collection is non-empty, or\n * fails with the error `NoSuchElementException` if the collection is empty.\n *\n * **When to Use**\n *\n * This function is useful when you need to retrieve the first item from a\n * collection and want to handle the case where the collection might be empty\n * without causing an unhandled exception.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * // Simulate an async operation\n * const fetchNumbers = Effect.succeed([1, 2, 3]).pipe(Effect.delay(\"100 millis\"))\n *\n * const program = Effect.gen(function*() {\n *   const firstElement = yield* Effect.head(fetchNumbers)\n *   console.log(firstElement)\n * })\n *\n * Effect.runFork(program)\n * // Output: 1\n * ```\n *\n * @since 2.0.0\n * @category Collecting\n */\nexport const head: <A, E, R>(self: Effect<Iterable<A>, E, R>) => Effect<A, Cause.NoSuchElementException | E, R> =\n  effect.head\n\n/**\n * Merges an `Iterable<Effect<A, E, R>>` to a single effect.\n *\n * **Details**\n *\n * This function takes an iterable of effects and combines them into a single\n * effect. It does this by iterating over each effect in the collection and\n * applying a function that accumulates results into a \"zero\" value, which\n * starts with an initial value and is updated with each effect's success.\n *\n * The provided function `f` is called for each element in the iterable,\n * allowing you to specify how to combine the results.\n *\n * **Options**\n *\n * The function also allows you to customize how the effects are handled by\n * specifying options such as concurrency, batching, and how finalizers behave.\n * These options provide flexibility in running the effects concurrently or\n * adjusting other execution details.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const numbers = [Effect.succeed(1), Effect.succeed(2), Effect.succeed(3)]\n * const add = (sum: number, value: number, i: number) => sum + value\n * const zero = 0\n *\n * const program = Effect.gen(function*() {\n *   const total = yield* Effect.mergeAll(numbers, zero, add)\n *   console.log(total)\n * })\n *\n * Effect.runFork(program)\n * // Output: 6\n * ```\n *\n * @since 2.0.0\n * @category Collecting\n */\nexport const mergeAll: {\n  /**\n   * Merges an `Iterable<Effect<A, E, R>>` to a single effect.\n   *\n   * **Details**\n   *\n   * This function takes an iterable of effects and combines them into a single\n   * effect. It does this by iterating over each effect in the collection and\n   * applying a function that accumulates results into a \"zero\" value, which\n   * starts with an initial value and is updated with each effect's success.\n   *\n   * The provided function `f` is called for each element in the iterable,\n   * allowing you to specify how to combine the results.\n   *\n   * **Options**\n   *\n   * The function also allows you to customize how the effects are handled by\n   * specifying options such as concurrency, batching, and how finalizers behave.\n   * These options provide flexibility in running the effects concurrently or\n   * adjusting other execution details.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [Effect.succeed(1), Effect.succeed(2), Effect.succeed(3)]\n   * const add = (sum: number, value: number, i: number) => sum + value\n   * const zero = 0\n   *\n   * const program = Effect.gen(function*() {\n   *   const total = yield* Effect.mergeAll(numbers, zero, add)\n   *   console.log(total)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: 6\n   * ```\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <Z, Eff extends Effect<any, any, any>>(\n    zero: Z,\n    f: (z: Z, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): (elements: Iterable<Eff>) => Effect<Z, Effect.Error<Eff>, Effect.Context<Eff>>\n  /**\n   * Merges an `Iterable<Effect<A, E, R>>` to a single effect.\n   *\n   * **Details**\n   *\n   * This function takes an iterable of effects and combines them into a single\n   * effect. It does this by iterating over each effect in the collection and\n   * applying a function that accumulates results into a \"zero\" value, which\n   * starts with an initial value and is updated with each effect's success.\n   *\n   * The provided function `f` is called for each element in the iterable,\n   * allowing you to specify how to combine the results.\n   *\n   * **Options**\n   *\n   * The function also allows you to customize how the effects are handled by\n   * specifying options such as concurrency, batching, and how finalizers behave.\n   * These options provide flexibility in running the effects concurrently or\n   * adjusting other execution details.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const numbers = [Effect.succeed(1), Effect.succeed(2), Effect.succeed(3)]\n   * const add = (sum: number, value: number, i: number) => sum + value\n   * const zero = 0\n   *\n   * const program = Effect.gen(function*() {\n   *   const total = yield* Effect.mergeAll(numbers, zero, add)\n   *   console.log(total)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: 6\n   * ```\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <Eff extends Effect<any, any, any>, Z>(\n    elements: Iterable<Eff>,\n    zero: Z,\n    f: (z: Z, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<Z, Effect.Error<Eff>, Effect.Context<Eff>>\n} = fiberRuntime.mergeAll\n\n/**\n * Processes an iterable and applies an effectful function to each element,\n * categorizing the results into successes and failures.\n *\n * **Details**\n *\n * This function processes each element in the provided iterable by applying an\n * effectful function to it. The results are then categorized into two separate\n * lists: one for failures and another for successes. This separation allows you\n * to handle the two categories differently. Failures are collected in a list\n * without interrupting the processing of the remaining elements, so the\n * operation continues even if some elements fail. This is particularly useful\n * when you need to handle both successful and failed results separately,\n * without stopping the entire process on encountering a failure.\n *\n * **When to Use**\n *\n * Use this function when you want to process a collection of items and handle\n * errors or failures without interrupting the processing of other items. It's\n * useful when you need to distinguish between successful and failed results and\n * process them separately, for example, when logging errors while continuing to\n * work with valid data. The function ensures that failures are captured, while\n * successes are processed normally.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * //      ┌─── Effect<[string[], number[]], never, never>\n * //      ▼\n * const program = Effect.partition([0, 1, 2, 3, 4], (n) => {\n *   if (n % 2 === 0) {\n *     return Effect.succeed(n)\n *   } else {\n *     return Effect.fail(`${n} is not even`)\n *   }\n * })\n *\n * Effect.runPromise(program).then(console.log, console.error)\n * // Output:\n * // [ [ '1 is not even', '3 is not even' ], [ 0, 2, 4 ] ]\n * ```\n *\n * @see {@link validateAll} for a function that either collects all failures or all successes.\n * @see {@link validateFirst} for a function that stops at the first success.\n *\n * @since 2.0.0\n * @category Error Accumulation\n */\nexport const partition: {\n  /**\n   * Processes an iterable and applies an effectful function to each element,\n   * categorizing the results into successes and failures.\n   *\n   * **Details**\n   *\n   * This function processes each element in the provided iterable by applying an\n   * effectful function to it. The results are then categorized into two separate\n   * lists: one for failures and another for successes. This separation allows you\n   * to handle the two categories differently. Failures are collected in a list\n   * without interrupting the processing of the remaining elements, so the\n   * operation continues even if some elements fail. This is particularly useful\n   * when you need to handle both successful and failed results separately,\n   * without stopping the entire process on encountering a failure.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to process a collection of items and handle\n   * errors or failures without interrupting the processing of other items. It's\n   * useful when you need to distinguish between successful and failed results and\n   * process them separately, for example, when logging errors while continuing to\n   * work with valid data. The function ensures that failures are captured, while\n   * successes are processed normally.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * //      ┌─── Effect<[string[], number[]], never, never>\n   * //      ▼\n   * const program = Effect.partition([0, 1, 2, 3, 4], (n) => {\n   *   if (n % 2 === 0) {\n   *     return Effect.succeed(n)\n   *   } else {\n   *     return Effect.fail(`${n} is not even`)\n   *   }\n   * })\n   *\n   * Effect.runPromise(program).then(console.log, console.error)\n   * // Output:\n   * // [ [ '1 is not even', '3 is not even' ], [ 0, 2, 4 ] ]\n   * ```\n   *\n   * @see {@link validateAll} for a function that either collects all failures or all successes.\n   * @see {@link validateFirst} for a function that stops at the first success.\n   *\n   * @since 2.0.0\n   * @category Error Accumulation\n   */\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): (elements: Iterable<A>) => Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>\n  /**\n   * Processes an iterable and applies an effectful function to each element,\n   * categorizing the results into successes and failures.\n   *\n   * **Details**\n   *\n   * This function processes each element in the provided iterable by applying an\n   * effectful function to it. The results are then categorized into two separate\n   * lists: one for failures and another for successes. This separation allows you\n   * to handle the two categories differently. Failures are collected in a list\n   * without interrupting the processing of the remaining elements, so the\n   * operation continues even if some elements fail. This is particularly useful\n   * when you need to handle both successful and failed results separately,\n   * without stopping the entire process on encountering a failure.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to process a collection of items and handle\n   * errors or failures without interrupting the processing of other items. It's\n   * useful when you need to distinguish between successful and failed results and\n   * process them separately, for example, when logging errors while continuing to\n   * work with valid data. The function ensures that failures are captured, while\n   * successes are processed normally.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * //      ┌─── Effect<[string[], number[]], never, never>\n   * //      ▼\n   * const program = Effect.partition([0, 1, 2, 3, 4], (n) => {\n   *   if (n % 2 === 0) {\n   *     return Effect.succeed(n)\n   *   } else {\n   *     return Effect.fail(`${n} is not even`)\n   *   }\n   * })\n   *\n   * Effect.runPromise(program).then(console.log, console.error)\n   * // Output:\n   * // [ [ '1 is not even', '3 is not even' ], [ 0, 2, 4 ] ]\n   * ```\n   *\n   * @see {@link validateAll} for a function that either collects all failures or all successes.\n   * @see {@link validateFirst} for a function that stops at the first success.\n   *\n   * @since 2.0.0\n   * @category Error Accumulation\n   */\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>\n} = fiberRuntime.partition\n\n/**\n * Reduces an `Iterable<A>` using an effectual function `f`, working\n * sequentially from left to right.\n *\n * **Details**\n *\n * This function takes an iterable and applies a function `f` to each element in\n * the iterable. The function works sequentially, starting with an initial value\n * `zero` and then combining it with each element in the collection. The\n * provided function `f` is called for each element in the iterable, allowing\n * you to accumulate a result based on the current value and the element being\n * processed.\n *\n * **When to Use**\n *\n * The function is often used for operations like summing a collection of\n * numbers or combining results from multiple tasks. It ensures that operations\n * are performed one after the other, maintaining the order of the elements.\n *\n * **Example**\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * const processOrder = (id: number) =>\n *   Effect.succeed({ id, price: 100 * id })\n *     .pipe(Effect.tap(() => Console.log(`Order ${id} processed`)), Effect.delay(500 - (id * 100)))\n *\n * const program = Effect.reduce(\n *   [1, 2, 3, 4],\n *   0,\n *   (acc, id, i) =>\n *     processOrder(id)\n *       .pipe(Effect.map((order) => acc + order.price))\n * )\n *\n * Effect.runPromise(program).then(console.log)\n * // Output:\n * // Order 1 processed\n * // Order 2 processed\n * // Order 3 processed\n * // Order 4 processed\n * // 1000\n * ```\n *\n * @see {@link reduceWhile} for a similar function that stops the process based on a predicate.\n * @see {@link reduceRight} for a similar function that works from right to left.\n *\n * @since 2.0.0\n * @category Collecting\n */\nexport const reduce: {\n  /**\n   * Reduces an `Iterable<A>` using an effectual function `f`, working\n   * sequentially from left to right.\n   *\n   * **Details**\n   *\n   * This function takes an iterable and applies a function `f` to each element in\n   * the iterable. The function works sequentially, starting with an initial value\n   * `zero` and then combining it with each element in the collection. The\n   * provided function `f` is called for each element in the iterable, allowing\n   * you to accumulate a result based on the current value and the element being\n   * processed.\n   *\n   * **When to Use**\n   *\n   * The function is often used for operations like summing a collection of\n   * numbers or combining results from multiple tasks. It ensures that operations\n   * are performed one after the other, maintaining the order of the elements.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * const processOrder = (id: number) =>\n   *   Effect.succeed({ id, price: 100 * id })\n   *     .pipe(Effect.tap(() => Console.log(`Order ${id} processed`)), Effect.delay(500 - (id * 100)))\n   *\n   * const program = Effect.reduce(\n   *   [1, 2, 3, 4],\n   *   0,\n   *   (acc, id, i) =>\n   *     processOrder(id)\n   *       .pipe(Effect.map((order) => acc + order.price))\n   * )\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // Order 1 processed\n   * // Order 2 processed\n   * // Order 3 processed\n   * // Order 4 processed\n   * // 1000\n   * ```\n   *\n   * @see {@link reduceWhile} for a similar function that stops the process based on a predicate.\n   * @see {@link reduceRight} for a similar function that works from right to left.\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <Z, A, E, R>(zero: Z, f: (z: Z, a: A, i: number) => Effect<Z, E, R>): (elements: Iterable<A>) => Effect<Z, E, R>\n  /**\n   * Reduces an `Iterable<A>` using an effectual function `f`, working\n   * sequentially from left to right.\n   *\n   * **Details**\n   *\n   * This function takes an iterable and applies a function `f` to each element in\n   * the iterable. The function works sequentially, starting with an initial value\n   * `zero` and then combining it with each element in the collection. The\n   * provided function `f` is called for each element in the iterable, allowing\n   * you to accumulate a result based on the current value and the element being\n   * processed.\n   *\n   * **When to Use**\n   *\n   * The function is often used for operations like summing a collection of\n   * numbers or combining results from multiple tasks. It ensures that operations\n   * are performed one after the other, maintaining the order of the elements.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * const processOrder = (id: number) =>\n   *   Effect.succeed({ id, price: 100 * id })\n   *     .pipe(Effect.tap(() => Console.log(`Order ${id} processed`)), Effect.delay(500 - (id * 100)))\n   *\n   * const program = Effect.reduce(\n   *   [1, 2, 3, 4],\n   *   0,\n   *   (acc, id, i) =>\n   *     processOrder(id)\n   *       .pipe(Effect.map((order) => acc + order.price))\n   * )\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // Order 1 processed\n   * // Order 2 processed\n   * // Order 3 processed\n   * // Order 4 processed\n   * // 1000\n   * ```\n   *\n   * @see {@link reduceWhile} for a similar function that stops the process based on a predicate.\n   * @see {@link reduceRight} for a similar function that works from right to left.\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, Z, E, R>(\n    elements: Iterable<A>,\n    zero: Z,\n    f: (z: Z, a: A, i: number) => Effect<Z, E, R>\n  ): Effect<Z, E, R>\n} = effect.reduce\n\n/**\n * Reduces an `Iterable<A>` using an effectual function `body`, working\n * sequentially from left to right, stopping the process early when the\n * predicate `while` is not satisfied.\n *\n * **Details**\n *\n * This function processes a collection of elements, applying a function `body`\n * to reduce them to a single value, starting from the first element. It checks\n * the value of the accumulator against a predicate (`while`). If at any point\n * the predicate returns `false`, the reduction stops, and the accumulated\n * result is returned.\n *\n * **When to Use**\n *\n * Use this function when you need to reduce a collection of elements, but only\n * continue the process as long as a certain condition holds true. For example,\n * if you want to sum values in a list but stop as soon as the sum exceeds a\n * certain threshold, you can use this function.\n *\n * **Example**\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * const processOrder = (id: number) =>\n *   Effect.succeed({ id, price: 100 * id })\n *     .pipe(Effect.tap(() => Console.log(`Order ${id} processed`)), Effect.delay(500 - (id * 100)))\n *\n * const program = Effect.reduceWhile(\n *   [1, 2, 3, 4],\n *   0,\n *   {\n *     body: (acc, id, i) =>\n *       processOrder(id)\n *         .pipe(Effect.map((order) => acc + order.price)),\n *     while: (acc) => acc < 500\n *   }\n * )\n *\n * Effect.runPromise(program).then(console.log)\n * // Output:\n * // Order 1 processed\n * // Order 2 processed\n * // Order 3 processed\n * // 600\n * ```\n *\n * @since 2.0.0\n * @category Collecting\n */\nexport const reduceWhile: {\n  /**\n   * Reduces an `Iterable<A>` using an effectual function `body`, working\n   * sequentially from left to right, stopping the process early when the\n   * predicate `while` is not satisfied.\n   *\n   * **Details**\n   *\n   * This function processes a collection of elements, applying a function `body`\n   * to reduce them to a single value, starting from the first element. It checks\n   * the value of the accumulator against a predicate (`while`). If at any point\n   * the predicate returns `false`, the reduction stops, and the accumulated\n   * result is returned.\n   *\n   * **When to Use**\n   *\n   * Use this function when you need to reduce a collection of elements, but only\n   * continue the process as long as a certain condition holds true. For example,\n   * if you want to sum values in a list but stop as soon as the sum exceeds a\n   * certain threshold, you can use this function.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * const processOrder = (id: number) =>\n   *   Effect.succeed({ id, price: 100 * id })\n   *     .pipe(Effect.tap(() => Console.log(`Order ${id} processed`)), Effect.delay(500 - (id * 100)))\n   *\n   * const program = Effect.reduceWhile(\n   *   [1, 2, 3, 4],\n   *   0,\n   *   {\n   *     body: (acc, id, i) =>\n   *       processOrder(id)\n   *         .pipe(Effect.map((order) => acc + order.price)),\n   *     while: (acc) => acc < 500\n   *   }\n   * )\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // Order 1 processed\n   * // Order 2 processed\n   * // Order 3 processed\n   * // 600\n   * ```\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <Z, A, E, R>(\n    zero: Z,\n    options: { readonly while: Predicate<Z>; readonly body: (s: Z, a: A, i: number) => Effect<Z, E, R> }\n  ): (elements: Iterable<A>) => Effect<Z, E, R>\n  /**\n   * Reduces an `Iterable<A>` using an effectual function `body`, working\n   * sequentially from left to right, stopping the process early when the\n   * predicate `while` is not satisfied.\n   *\n   * **Details**\n   *\n   * This function processes a collection of elements, applying a function `body`\n   * to reduce them to a single value, starting from the first element. It checks\n   * the value of the accumulator against a predicate (`while`). If at any point\n   * the predicate returns `false`, the reduction stops, and the accumulated\n   * result is returned.\n   *\n   * **When to Use**\n   *\n   * Use this function when you need to reduce a collection of elements, but only\n   * continue the process as long as a certain condition holds true. For example,\n   * if you want to sum values in a list but stop as soon as the sum exceeds a\n   * certain threshold, you can use this function.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * const processOrder = (id: number) =>\n   *   Effect.succeed({ id, price: 100 * id })\n   *     .pipe(Effect.tap(() => Console.log(`Order ${id} processed`)), Effect.delay(500 - (id * 100)))\n   *\n   * const program = Effect.reduceWhile(\n   *   [1, 2, 3, 4],\n   *   0,\n   *   {\n   *     body: (acc, id, i) =>\n   *       processOrder(id)\n   *         .pipe(Effect.map((order) => acc + order.price)),\n   *     while: (acc) => acc < 500\n   *   }\n   * )\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // Order 1 processed\n   * // Order 2 processed\n   * // Order 3 processed\n   * // 600\n   * ```\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, Z, E, R>(\n    elements: Iterable<A>,\n    zero: Z,\n    options: { readonly while: Predicate<Z>; readonly body: (s: Z, a: A, i: number) => Effect<Z, E, R> }\n  ): Effect<Z, E, R>\n} = effect.reduceWhile\n\n/**\n * Reduces an `Iterable<A>` using an effectual function `f`, working\n * sequentially from right to left.\n *\n * **Details**\n *\n * This function takes an iterable and applies a function `f` to each element in\n * the iterable. The function works sequentially, starting with an initial value\n * `zero` and then combining it with each element in the collection. The\n * provided function `f` is called for each element in the iterable, allowing\n * you to accumulate a result based on the current value and the element being\n * processed.\n *\n * **When to Use**\n *\n * The function is often used for operations like summing a collection of\n * numbers or combining results from multiple tasks. It ensures that operations\n * are performed one after the other, maintaining the order of the elements.\n *\n * **Example**\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * const processOrder = (id: number) =>\n *   Effect.succeed({ id, price: 100 * id })\n *     .pipe(Effect.tap(() => Console.log(`Order ${id} processed`)), Effect.delay(500 - (id * 100)))\n *\n * const program = Effect.reduceRight(\n *   [1, 2, 3, 4],\n *   0,\n *   (id, acc, i) =>\n *     processOrder(id)\n *       .pipe(Effect.map((order) => acc + order.price))\n * )\n *\n * Effect.runPromise(program).then(console.log)\n * // Output:\n * // Order 4 processed\n * // Order 3 processed\n * // Order 2 processed\n * // Order 1 processed\n * // 1000\n * ```\n *\n * @see {@link reduce} for a similar function that works from left to right.\n *\n * @since 2.0.0\n * @category Collecting\n */\nexport const reduceRight: {\n  /**\n   * Reduces an `Iterable<A>` using an effectual function `f`, working\n   * sequentially from right to left.\n   *\n   * **Details**\n   *\n   * This function takes an iterable and applies a function `f` to each element in\n   * the iterable. The function works sequentially, starting with an initial value\n   * `zero` and then combining it with each element in the collection. The\n   * provided function `f` is called for each element in the iterable, allowing\n   * you to accumulate a result based on the current value and the element being\n   * processed.\n   *\n   * **When to Use**\n   *\n   * The function is often used for operations like summing a collection of\n   * numbers or combining results from multiple tasks. It ensures that operations\n   * are performed one after the other, maintaining the order of the elements.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * const processOrder = (id: number) =>\n   *   Effect.succeed({ id, price: 100 * id })\n   *     .pipe(Effect.tap(() => Console.log(`Order ${id} processed`)), Effect.delay(500 - (id * 100)))\n   *\n   * const program = Effect.reduceRight(\n   *   [1, 2, 3, 4],\n   *   0,\n   *   (id, acc, i) =>\n   *     processOrder(id)\n   *       .pipe(Effect.map((order) => acc + order.price))\n   * )\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // Order 4 processed\n   * // Order 3 processed\n   * // Order 2 processed\n   * // Order 1 processed\n   * // 1000\n   * ```\n   *\n   * @see {@link reduce} for a similar function that works from left to right.\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, Z, R, E>(zero: Z, f: (a: A, z: Z, i: number) => Effect<Z, E, R>): (elements: Iterable<A>) => Effect<Z, E, R>\n  /**\n   * Reduces an `Iterable<A>` using an effectual function `f`, working\n   * sequentially from right to left.\n   *\n   * **Details**\n   *\n   * This function takes an iterable and applies a function `f` to each element in\n   * the iterable. The function works sequentially, starting with an initial value\n   * `zero` and then combining it with each element in the collection. The\n   * provided function `f` is called for each element in the iterable, allowing\n   * you to accumulate a result based on the current value and the element being\n   * processed.\n   *\n   * **When to Use**\n   *\n   * The function is often used for operations like summing a collection of\n   * numbers or combining results from multiple tasks. It ensures that operations\n   * are performed one after the other, maintaining the order of the elements.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * const processOrder = (id: number) =>\n   *   Effect.succeed({ id, price: 100 * id })\n   *     .pipe(Effect.tap(() => Console.log(`Order ${id} processed`)), Effect.delay(500 - (id * 100)))\n   *\n   * const program = Effect.reduceRight(\n   *   [1, 2, 3, 4],\n   *   0,\n   *   (id, acc, i) =>\n   *     processOrder(id)\n   *       .pipe(Effect.map((order) => acc + order.price))\n   * )\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // Order 4 processed\n   * // Order 3 processed\n   * // Order 2 processed\n   * // Order 1 processed\n   * // 1000\n   * ```\n   *\n   * @see {@link reduce} for a similar function that works from left to right.\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, Z, R, E>(\n    elements: Iterable<A>,\n    zero: Z,\n    f: (a: A, z: Z, i: number) => Effect<Z, E, R>\n  ): Effect<Z, E, R>\n} = effect.reduceRight\n\n/**\n * Reduces an `Iterable<Effect<A, E, R>>` to a single effect.\n *\n * **Details**\n *\n * This function processes a collection of effects and combines them into one\n * single effect. It starts with an initial effect (`zero`) and applies a\n * function `f` to each element in the collection.\n *\n * **Options**\n *\n * The function also allows you to customize how the effects are handled by\n * specifying options such as concurrency, batching, and how finalizers behave.\n * These options provide flexibility in running the effects concurrently or\n * adjusting other execution details.\n *\n * **Example**\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * const processOrder = (id: number) =>\n *   Effect.succeed({ id, price: 100 * id })\n *     .pipe(Effect.tap(() => Console.log(`Order ${id} processed`)), Effect.delay(500 - (id * 100)))\n *\n * const program = Effect.reduceEffect(\n *   [processOrder(1), processOrder(2), processOrder(3), processOrder(4)],\n *   Effect.succeed(0),\n *   (acc, order, i) => acc + order.price\n * )\n *\n * Effect.runPromise(program).then(console.log)\n * // Output:\n * // Order 1 processed\n * // Order 2 processed\n * // Order 3 processed\n * // Order 4 processed\n * // 1000\n * ```\n *\n * @since 2.0.0\n * @category Collecting\n */\nexport const reduceEffect: {\n  /**\n   * Reduces an `Iterable<Effect<A, E, R>>` to a single effect.\n   *\n   * **Details**\n   *\n   * This function processes a collection of effects and combines them into one\n   * single effect. It starts with an initial effect (`zero`) and applies a\n   * function `f` to each element in the collection.\n   *\n   * **Options**\n   *\n   * The function also allows you to customize how the effects are handled by\n   * specifying options such as concurrency, batching, and how finalizers behave.\n   * These options provide flexibility in running the effects concurrently or\n   * adjusting other execution details.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * const processOrder = (id: number) =>\n   *   Effect.succeed({ id, price: 100 * id })\n   *     .pipe(Effect.tap(() => Console.log(`Order ${id} processed`)), Effect.delay(500 - (id * 100)))\n   *\n   * const program = Effect.reduceEffect(\n   *   [processOrder(1), processOrder(2), processOrder(3), processOrder(4)],\n   *   Effect.succeed(0),\n   *   (acc, order, i) => acc + order.price\n   * )\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // Order 1 processed\n   * // Order 2 processed\n   * // Order 3 processed\n   * // Order 4 processed\n   * // 1000\n   * ```\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <Z, E, R, Eff extends Effect<any, any, any>>(\n    zero: Effect<Z, E, R>,\n    f: (z: NoInfer<Z>, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): (elements: Iterable<Eff>) => Effect<Z, E | Effect.Error<Eff>, R | Effect.Context<Eff>>\n  /**\n   * Reduces an `Iterable<Effect<A, E, R>>` to a single effect.\n   *\n   * **Details**\n   *\n   * This function processes a collection of effects and combines them into one\n   * single effect. It starts with an initial effect (`zero`) and applies a\n   * function `f` to each element in the collection.\n   *\n   * **Options**\n   *\n   * The function also allows you to customize how the effects are handled by\n   * specifying options such as concurrency, batching, and how finalizers behave.\n   * These options provide flexibility in running the effects concurrently or\n   * adjusting other execution details.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * const processOrder = (id: number) =>\n   *   Effect.succeed({ id, price: 100 * id })\n   *     .pipe(Effect.tap(() => Console.log(`Order ${id} processed`)), Effect.delay(500 - (id * 100)))\n   *\n   * const program = Effect.reduceEffect(\n   *   [processOrder(1), processOrder(2), processOrder(3), processOrder(4)],\n   *   Effect.succeed(0),\n   *   (acc, order, i) => acc + order.price\n   * )\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // Order 1 processed\n   * // Order 2 processed\n   * // Order 3 processed\n   * // Order 4 processed\n   * // 1000\n   * ```\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <Eff extends Effect<any, any, any>, Z, E, R>(\n    elements: Iterable<Eff>,\n    zero: Effect<Z, E, R>,\n    f: (z: NoInfer<Z>, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<Z, E | Effect.Error<Eff>, R | Effect.Context<Eff>>\n} = fiberRuntime.reduceEffect\n\n/**\n * Replicates the given effect `n` times.\n *\n * **Details**\n *\n * This function takes an effect and replicates it a specified number of times\n * (`n`). The result is an array of `n` effects, each of which is identical to\n * the original effect.\n *\n * **Example**\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * const task = Effect.succeed(\"Hello, World!\").pipe(\n *   Effect.tap(Console.log)\n * )\n *\n * const program = Effect.gen(function*() {\n *   // Replicate the task 3 times\n *   const tasks = Effect.replicate(task, 3)\n *   for (const t of tasks) {\n *     // Run each task\n *     yield* t\n *   }\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // Hello, World!\n * // Hello, World!\n * // Hello, World!\n * ```\n *\n * @since 2.0.0\n */\nexport const replicate: {\n  /**\n   * Replicates the given effect `n` times.\n   *\n   * **Details**\n   *\n   * This function takes an effect and replicates it a specified number of times\n   * (`n`). The result is an array of `n` effects, each of which is identical to\n   * the original effect.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * const task = Effect.succeed(\"Hello, World!\").pipe(\n   *   Effect.tap(Console.log)\n   * )\n   *\n   * const program = Effect.gen(function*() {\n   *   // Replicate the task 3 times\n   *   const tasks = Effect.replicate(task, 3)\n   *   for (const t of tasks) {\n   *     // Run each task\n   *     yield* t\n   *   }\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // Hello, World!\n   * // Hello, World!\n   * // Hello, World!\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (n: number): <A, E, R>(self: Effect<A, E, R>) => Array<Effect<A, E, R>>\n  /**\n   * Replicates the given effect `n` times.\n   *\n   * **Details**\n   *\n   * This function takes an effect and replicates it a specified number of times\n   * (`n`). The result is an array of `n` effects, each of which is identical to\n   * the original effect.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * const task = Effect.succeed(\"Hello, World!\").pipe(\n   *   Effect.tap(Console.log)\n   * )\n   *\n   * const program = Effect.gen(function*() {\n   *   // Replicate the task 3 times\n   *   const tasks = Effect.replicate(task, 3)\n   *   for (const t of tasks) {\n   *     // Run each task\n   *     yield* t\n   *   }\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // Hello, World!\n   * // Hello, World!\n   * // Hello, World!\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, E, R>(self: Effect<A, E, R>, n: number): Array<Effect<A, E, R>>\n} = fiberRuntime.replicate\n\n/**\n * Performs this effect the specified number of times and collects the results.\n *\n * **Details**\n *\n * This function repeats an effect multiple times and collects the results into\n * an array. You specify how many times to execute the effect, and it runs that\n * many times, either in sequence or concurrently depending on the provided\n * options.\n *\n * **Options**\n *\n * If the `discard` option is set to `true`, the intermediate results are not\n * collected, and the final result of the operation is `void`.\n *\n * The function also allows you to customize how the effects are handled by\n * specifying options such as concurrency, batching, and how finalizers behave.\n * These options provide flexibility in running the effects concurrently or\n * adjusting other execution details.\n *\n * **Example**\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * let counter = 0\n *\n * const task = Effect.sync(() => ++counter).pipe(\n *   Effect.tap(() => Console.log(`Task completed`))\n * )\n *\n * const program = Effect.gen(function*() {\n *   // Replicate the task 3 times and collect the results\n *   const results = yield* Effect.replicateEffect(task, 3)\n *   yield* Console.log(`Results: ${results.join(\", \")}`)\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // Task completed\n * // Task completed\n * // Task completed\n * // Results: 1, 2, 3\n * ```\n *\n * @since 2.0.0\n * @category Collecting\n */\nexport const replicateEffect: {\n  /**\n   * Performs this effect the specified number of times and collects the results.\n   *\n   * **Details**\n   *\n   * This function repeats an effect multiple times and collects the results into\n   * an array. You specify how many times to execute the effect, and it runs that\n   * many times, either in sequence or concurrently depending on the provided\n   * options.\n   *\n   * **Options**\n   *\n   * If the `discard` option is set to `true`, the intermediate results are not\n   * collected, and the final result of the operation is `void`.\n   *\n   * The function also allows you to customize how the effects are handled by\n   * specifying options such as concurrency, batching, and how finalizers behave.\n   * These options provide flexibility in running the effects concurrently or\n   * adjusting other execution details.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * let counter = 0\n   *\n   * const task = Effect.sync(() => ++counter).pipe(\n   *   Effect.tap(() => Console.log(`Task completed`))\n   * )\n   *\n   * const program = Effect.gen(function*() {\n   *   // Replicate the task 3 times and collect the results\n   *   const results = yield* Effect.replicateEffect(task, 3)\n   *   yield* Console.log(`Results: ${results.join(\", \")}`)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // Task completed\n   * // Task completed\n   * // Task completed\n   * // Results: 1, 2, 3\n   * ```\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  (\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<Array<A>, E, R>\n  /**\n   * Performs this effect the specified number of times and collects the results.\n   *\n   * **Details**\n   *\n   * This function repeats an effect multiple times and collects the results into\n   * an array. You specify how many times to execute the effect, and it runs that\n   * many times, either in sequence or concurrently depending on the provided\n   * options.\n   *\n   * **Options**\n   *\n   * If the `discard` option is set to `true`, the intermediate results are not\n   * collected, and the final result of the operation is `void`.\n   *\n   * The function also allows you to customize how the effects are handled by\n   * specifying options such as concurrency, batching, and how finalizers behave.\n   * These options provide flexibility in running the effects concurrently or\n   * adjusting other execution details.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * let counter = 0\n   *\n   * const task = Effect.sync(() => ++counter).pipe(\n   *   Effect.tap(() => Console.log(`Task completed`))\n   * )\n   *\n   * const program = Effect.gen(function*() {\n   *   // Replicate the task 3 times and collect the results\n   *   const results = yield* Effect.replicateEffect(task, 3)\n   *   yield* Console.log(`Results: ${results.join(\", \")}`)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // Task completed\n   * // Task completed\n   * // Task completed\n   * // Results: 1, 2, 3\n   * ```\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  (\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<void, E, R>\n  /**\n   * Performs this effect the specified number of times and collects the results.\n   *\n   * **Details**\n   *\n   * This function repeats an effect multiple times and collects the results into\n   * an array. You specify how many times to execute the effect, and it runs that\n   * many times, either in sequence or concurrently depending on the provided\n   * options.\n   *\n   * **Options**\n   *\n   * If the `discard` option is set to `true`, the intermediate results are not\n   * collected, and the final result of the operation is `void`.\n   *\n   * The function also allows you to customize how the effects are handled by\n   * specifying options such as concurrency, batching, and how finalizers behave.\n   * These options provide flexibility in running the effects concurrently or\n   * adjusting other execution details.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * let counter = 0\n   *\n   * const task = Effect.sync(() => ++counter).pipe(\n   *   Effect.tap(() => Console.log(`Task completed`))\n   * )\n   *\n   * const program = Effect.gen(function*() {\n   *   // Replicate the task 3 times and collect the results\n   *   const results = yield* Effect.replicateEffect(task, 3)\n   *   yield* Console.log(`Results: ${results.join(\", \")}`)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // Task completed\n   * // Task completed\n   * // Task completed\n   * // Results: 1, 2, 3\n   * ```\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect<Array<A>, E, R>\n  /**\n   * Performs this effect the specified number of times and collects the results.\n   *\n   * **Details**\n   *\n   * This function repeats an effect multiple times and collects the results into\n   * an array. You specify how many times to execute the effect, and it runs that\n   * many times, either in sequence or concurrently depending on the provided\n   * options.\n   *\n   * **Options**\n   *\n   * If the `discard` option is set to `true`, the intermediate results are not\n   * collected, and the final result of the operation is `void`.\n   *\n   * The function also allows you to customize how the effects are handled by\n   * specifying options such as concurrency, batching, and how finalizers behave.\n   * These options provide flexibility in running the effects concurrently or\n   * adjusting other execution details.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * let counter = 0\n   *\n   * const task = Effect.sync(() => ++counter).pipe(\n   *   Effect.tap(() => Console.log(`Task completed`))\n   * )\n   *\n   * const program = Effect.gen(function*() {\n   *   // Replicate the task 3 times and collect the results\n   *   const results = yield* Effect.replicateEffect(task, 3)\n   *   yield* Console.log(`Results: ${results.join(\", \")}`)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // Task completed\n   * // Task completed\n   * // Task completed\n   * // Results: 1, 2, 3\n   * ```\n   *\n   * @since 2.0.0\n   * @category Collecting\n   */\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect<void, E, R>\n} = fiberRuntime.replicateEffect\n\n/**\n * Applies an effectful operation to each element in a collection while\n * collecting both successes and failures.\n *\n * **Details**\n *\n * This function allows you to apply an effectful operation to every item in a\n * collection.\n *\n * Unlike {@link forEach}, which would stop at the first error, this function\n * continues processing all elements, accumulating both successes and failures.\n *\n * **When to Use**\n *\n * Use this function when you want to process every item in a collection, even\n * if some items fail. This is particularly useful when you need to perform\n * operations on all elements without halting due to an error.\n *\n * Keep in mind that if there are any failures, **all successes will be lost**,\n * so this function is not suitable when you need to keep the successful results\n * in case of errors.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * //      ┌─── Effect<number[], [string, ...string[]], never>\n * //      ▼\n * const program = Effect.validateAll([1, 2, 3, 4, 5], (n) => {\n *   if (n < 4) {\n *     return Console.log(`item ${n}`).pipe(Effect.as(n))\n *   } else {\n *     return Effect.fail(`${n} is not less that 4`)\n *   }\n * })\n *\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // item 1\n * // item 2\n * // item 3\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: {\n * //     _id: 'Cause',\n * //     _tag: 'Fail',\n * //     failure: [ '4 is not less that 4', '5 is not less that 4' ]\n * //   }\n * // }\n * ```\n *\n * @see {@link forEach} for a similar function that stops at the first error.\n * @see {@link partition} when you need to separate successes and failures\n * instead of losing successes with errors.\n *\n * @since 2.0.0\n * @category Error Accumulation\n */\nexport const validateAll: {\n  /**\n   * Applies an effectful operation to each element in a collection while\n   * collecting both successes and failures.\n   *\n   * **Details**\n   *\n   * This function allows you to apply an effectful operation to every item in a\n   * collection.\n   *\n   * Unlike {@link forEach}, which would stop at the first error, this function\n   * continues processing all elements, accumulating both successes and failures.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to process every item in a collection, even\n   * if some items fail. This is particularly useful when you need to perform\n   * operations on all elements without halting due to an error.\n   *\n   * Keep in mind that if there are any failures, **all successes will be lost**,\n   * so this function is not suitable when you need to keep the successful results\n   * in case of errors.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * //      ┌─── Effect<number[], [string, ...string[]], never>\n   * //      ▼\n   * const program = Effect.validateAll([1, 2, 3, 4, 5], (n) => {\n   *   if (n < 4) {\n   *     return Console.log(`item ${n}`).pipe(Effect.as(n))\n   *   } else {\n   *     return Effect.fail(`${n} is not less that 4`)\n   *   }\n   * })\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // item 1\n   * // item 2\n   * // item 3\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: {\n   * //     _id: 'Cause',\n   * //     _tag: 'Fail',\n   * //     failure: [ '4 is not less that 4', '5 is not less that 4' ]\n   * //   }\n   * // }\n   * ```\n   *\n   * @see {@link forEach} for a similar function that stops at the first error.\n   * @see {@link partition} when you need to separate successes and failures\n   * instead of losing successes with errors.\n   *\n   * @since 2.0.0\n   * @category Error Accumulation\n   */\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): (elements: Iterable<A>) => Effect<Array<B>, RA.NonEmptyArray<E>, R>\n  /**\n   * Applies an effectful operation to each element in a collection while\n   * collecting both successes and failures.\n   *\n   * **Details**\n   *\n   * This function allows you to apply an effectful operation to every item in a\n   * collection.\n   *\n   * Unlike {@link forEach}, which would stop at the first error, this function\n   * continues processing all elements, accumulating both successes and failures.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to process every item in a collection, even\n   * if some items fail. This is particularly useful when you need to perform\n   * operations on all elements without halting due to an error.\n   *\n   * Keep in mind that if there are any failures, **all successes will be lost**,\n   * so this function is not suitable when you need to keep the successful results\n   * in case of errors.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * //      ┌─── Effect<number[], [string, ...string[]], never>\n   * //      ▼\n   * const program = Effect.validateAll([1, 2, 3, 4, 5], (n) => {\n   *   if (n < 4) {\n   *     return Console.log(`item ${n}`).pipe(Effect.as(n))\n   *   } else {\n   *     return Effect.fail(`${n} is not less that 4`)\n   *   }\n   * })\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // item 1\n   * // item 2\n   * // item 3\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: {\n   * //     _id: 'Cause',\n   * //     _tag: 'Fail',\n   * //     failure: [ '4 is not less that 4', '5 is not less that 4' ]\n   * //   }\n   * // }\n   * ```\n   *\n   * @see {@link forEach} for a similar function that stops at the first error.\n   * @see {@link partition} when you need to separate successes and failures\n   * instead of losing successes with errors.\n   *\n   * @since 2.0.0\n   * @category Error Accumulation\n   */\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): (elements: Iterable<A>) => Effect<void, RA.NonEmptyArray<E>, R>\n  /**\n   * Applies an effectful operation to each element in a collection while\n   * collecting both successes and failures.\n   *\n   * **Details**\n   *\n   * This function allows you to apply an effectful operation to every item in a\n   * collection.\n   *\n   * Unlike {@link forEach}, which would stop at the first error, this function\n   * continues processing all elements, accumulating both successes and failures.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to process every item in a collection, even\n   * if some items fail. This is particularly useful when you need to perform\n   * operations on all elements without halting due to an error.\n   *\n   * Keep in mind that if there are any failures, **all successes will be lost**,\n   * so this function is not suitable when you need to keep the successful results\n   * in case of errors.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * //      ┌─── Effect<number[], [string, ...string[]], never>\n   * //      ▼\n   * const program = Effect.validateAll([1, 2, 3, 4, 5], (n) => {\n   *   if (n < 4) {\n   *     return Console.log(`item ${n}`).pipe(Effect.as(n))\n   *   } else {\n   *     return Effect.fail(`${n} is not less that 4`)\n   *   }\n   * })\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // item 1\n   * // item 2\n   * // item 3\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: {\n   * //     _id: 'Cause',\n   * //     _tag: 'Fail',\n   * //     failure: [ '4 is not less that 4', '5 is not less that 4' ]\n   * //   }\n   * // }\n   * ```\n   *\n   * @see {@link forEach} for a similar function that stops at the first error.\n   * @see {@link partition} when you need to separate successes and failures\n   * instead of losing successes with errors.\n   *\n   * @since 2.0.0\n   * @category Error Accumulation\n   */\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): Effect<Array<B>, RA.NonEmptyArray<E>, R>\n  /**\n   * Applies an effectful operation to each element in a collection while\n   * collecting both successes and failures.\n   *\n   * **Details**\n   *\n   * This function allows you to apply an effectful operation to every item in a\n   * collection.\n   *\n   * Unlike {@link forEach}, which would stop at the first error, this function\n   * continues processing all elements, accumulating both successes and failures.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to process every item in a collection, even\n   * if some items fail. This is particularly useful when you need to perform\n   * operations on all elements without halting due to an error.\n   *\n   * Keep in mind that if there are any failures, **all successes will be lost**,\n   * so this function is not suitable when you need to keep the successful results\n   * in case of errors.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * //      ┌─── Effect<number[], [string, ...string[]], never>\n   * //      ▼\n   * const program = Effect.validateAll([1, 2, 3, 4, 5], (n) => {\n   *   if (n < 4) {\n   *     return Console.log(`item ${n}`).pipe(Effect.as(n))\n   *   } else {\n   *     return Effect.fail(`${n} is not less that 4`)\n   *   }\n   * })\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // item 1\n   * // item 2\n   * // item 3\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: {\n   * //     _id: 'Cause',\n   * //     _tag: 'Fail',\n   * //     failure: [ '4 is not less that 4', '5 is not less that 4' ]\n   * //   }\n   * // }\n   * ```\n   *\n   * @see {@link forEach} for a similar function that stops at the first error.\n   * @see {@link partition} when you need to separate successes and failures\n   * instead of losing successes with errors.\n   *\n   * @since 2.0.0\n   * @category Error Accumulation\n   */\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect<void, RA.NonEmptyArray<E>, R>\n} = fiberRuntime.validateAll\n\n/**\n * This function is similar to {@link validateAll} but with a key difference: it\n * returns the first successful result or all errors if none of the operations\n * succeed.\n *\n * **Details**\n *\n * This function processes a collection of elements and applies an effectful\n * operation to each. Unlike {@link validateAll}, which accumulates both\n * successes and failures, `Effect.validateFirst` stops and returns the first\n * success it encounters. If no success occurs, it returns all accumulated\n * errors. This can be useful when you are interested in the first successful\n * result and want to avoid processing further once a valid result is found.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * //      ┌─── Effect<number, string[], never>\n * //      ▼\n * const program = Effect.validateFirst([1, 2, 3, 4, 5], (n) => {\n *   if (n < 4) {\n *     return Effect.fail(`${n} is not less that 4`)\n *   } else {\n *     return Console.log(`item ${n}`).pipe(Effect.as(n))\n *   }\n * })\n *\n * Effect.runPromise(program).then(console.log, console.error)\n * // Output:\n * // item 4\n * // 4\n * ```\n *\n * @see {@link validateAll} for a similar function that accumulates all results.\n * @see {@link firstSuccessOf} for a similar function that processes multiple\n * effects and returns the first successful one or the last error.\n *\n * @since 2.0.0\n * @category Error Accumulation\n */\nexport const validateFirst: {\n  /**\n   * This function is similar to {@link validateAll} but with a key difference: it\n   * returns the first successful result or all errors if none of the operations\n   * succeed.\n   *\n   * **Details**\n   *\n   * This function processes a collection of elements and applies an effectful\n   * operation to each. Unlike {@link validateAll}, which accumulates both\n   * successes and failures, `Effect.validateFirst` stops and returns the first\n   * success it encounters. If no success occurs, it returns all accumulated\n   * errors. This can be useful when you are interested in the first successful\n   * result and want to avoid processing further once a valid result is found.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * //      ┌─── Effect<number, string[], never>\n   * //      ▼\n   * const program = Effect.validateFirst([1, 2, 3, 4, 5], (n) => {\n   *   if (n < 4) {\n   *     return Effect.fail(`${n} is not less that 4`)\n   *   } else {\n   *     return Console.log(`item ${n}`).pipe(Effect.as(n))\n   *   }\n   * })\n   *\n   * Effect.runPromise(program).then(console.log, console.error)\n   * // Output:\n   * // item 4\n   * // 4\n   * ```\n   *\n   * @see {@link validateAll} for a similar function that accumulates all results.\n   * @see {@link firstSuccessOf} for a similar function that processes multiple\n   * effects and returns the first successful one or the last error.\n   *\n   * @since 2.0.0\n   * @category Error Accumulation\n   */\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): (elements: Iterable<A>) => Effect<B, Array<E>, R>\n  /**\n   * This function is similar to {@link validateAll} but with a key difference: it\n   * returns the first successful result or all errors if none of the operations\n   * succeed.\n   *\n   * **Details**\n   *\n   * This function processes a collection of elements and applies an effectful\n   * operation to each. Unlike {@link validateAll}, which accumulates both\n   * successes and failures, `Effect.validateFirst` stops and returns the first\n   * success it encounters. If no success occurs, it returns all accumulated\n   * errors. This can be useful when you are interested in the first successful\n   * result and want to avoid processing further once a valid result is found.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * //      ┌─── Effect<number, string[], never>\n   * //      ▼\n   * const program = Effect.validateFirst([1, 2, 3, 4, 5], (n) => {\n   *   if (n < 4) {\n   *     return Effect.fail(`${n} is not less that 4`)\n   *   } else {\n   *     return Console.log(`item ${n}`).pipe(Effect.as(n))\n   *   }\n   * })\n   *\n   * Effect.runPromise(program).then(console.log, console.error)\n   * // Output:\n   * // item 4\n   * // 4\n   * ```\n   *\n   * @see {@link validateAll} for a similar function that accumulates all results.\n   * @see {@link firstSuccessOf} for a similar function that processes multiple\n   * effects and returns the first successful one or the last error.\n   *\n   * @since 2.0.0\n   * @category Error Accumulation\n   */\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<B, Array<E>, R>\n} = fiberRuntime.validateFirst\n\n/**\n * Creates an `Effect` from a callback-based asynchronous function.\n *\n * **Details**\n *\n * The `resume` function:\n * - Must be called exactly once. Any additional calls will be ignored.\n * - Can return an optional `Effect` that will be run if the `Fiber` executing\n *   this `Effect` is interrupted. This can be useful in scenarios where you\n *   need to handle resource cleanup if the operation is interrupted.\n * - Can receive an `AbortSignal` to handle interruption if needed.\n *\n * The `FiberId` of the fiber that may complete the async callback may also be\n * specified using the `blockingOn` argument. This is called the \"blocking\n * fiber\" because it suspends the fiber executing the `async` effect (i.e.\n * semantically blocks the fiber from making progress). Specifying this fiber id\n * in cases where it is known will improve diagnostics, but not affect the\n * behavior of the returned effect.\n *\n * **When to Use**\n *\n * Use `Effect.async` when dealing with APIs that use callback-style instead of\n * `async/await` or `Promise`.\n *\n * **Example** (Wrapping a Callback API)\n *\n * ```ts\n * import { Effect } from \"effect\"\n * import * as NodeFS from \"node:fs\"\n *\n * const readFile = (filename: string) =>\n *   Effect.async<Buffer, Error>((resume) => {\n *     NodeFS.readFile(filename, (error, data) => {\n *       if (error) {\n *         // Resume with a failed Effect if an error occurs\n *         resume(Effect.fail(error))\n *       } else {\n *         // Resume with a succeeded Effect if successful\n *         resume(Effect.succeed(data))\n *       }\n *     })\n *   })\n *\n * //      ┌─── Effect<Buffer, Error, never>\n * //      ▼\n * const program = readFile(\"example.txt\")\n * ```\n *\n * **Example** (Handling Interruption with Cleanup)\n *\n * ```ts\n * import { Effect, Fiber } from \"effect\"\n * import * as NodeFS from \"node:fs\"\n *\n * // Simulates a long-running operation to write to a file\n * const writeFileWithCleanup = (filename: string, data: string) =>\n *   Effect.async<void, Error>((resume) => {\n *     const writeStream = NodeFS.createWriteStream(filename)\n *\n *     // Start writing data to the file\n *     writeStream.write(data)\n *\n *     // When the stream is finished, resume with success\n *     writeStream.on(\"finish\", () => resume(Effect.void))\n *\n *     // In case of an error during writing, resume with failure\n *     writeStream.on(\"error\", (err) => resume(Effect.fail(err)))\n *\n *     // Handle interruption by returning a cleanup effect\n *     return Effect.sync(() => {\n *       console.log(`Cleaning up ${filename}`)\n *       NodeFS.unlinkSync(filename)\n *     })\n *   })\n *\n * const program = Effect.gen(function* () {\n *   const fiber = yield* Effect.fork(\n *     writeFileWithCleanup(\"example.txt\", \"Some long data...\")\n *   )\n *   // Simulate interrupting the fiber after 1 second\n *   yield* Effect.sleep(\"1 second\")\n *   yield* Fiber.interrupt(fiber) // This will trigger the cleanup\n * })\n *\n * // Run the program\n * Effect.runPromise(program)\n * // Output:\n * // Cleaning up example.txt\n * ```\n *\n * **Example** (Handling Interruption with AbortSignal)\n *\n * ```ts\n * import { Effect, Fiber } from \"effect\"\n *\n * // A task that supports interruption using AbortSignal\n * const interruptibleTask = Effect.async<void, Error>((resume, signal) => {\n *   // Handle interruption\n *   signal.addEventListener(\"abort\", () => {\n *     console.log(\"Abort signal received\")\n *     clearTimeout(timeoutId)\n *   })\n *\n *   // Simulate a long-running task\n *   const timeoutId = setTimeout(() => {\n *     console.log(\"Operation completed\")\n *     resume(Effect.void)\n *   }, 2000)\n * })\n *\n * const program = Effect.gen(function* () {\n *   const fiber = yield* Effect.fork(interruptibleTask)\n *   // Simulate interrupting the fiber after 1 second\n *   yield* Effect.sleep(\"1 second\")\n *   yield* Fiber.interrupt(fiber)\n * })\n *\n * // Run the program\n * Effect.runPromise(program)\n * // Output:\n * // Abort signal received\n * ```\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const async: <A, E = never, R = never>(\n  resume: (callback: (_: Effect<A, E, R>) => void, signal: AbortSignal) => void | Effect<void, never, R>,\n  blockingOn?: FiberId.FiberId\n) => Effect<A, E, R> = core.async\n\n/**\n * A variant of {@link async} where the registration function may return an `Effect`.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const asyncEffect: <A, E, R, R3, E2, R2>(\n  register: (callback: (_: Effect<A, E, R>) => void) => Effect<Effect<void, never, R3> | void, E2, R2>\n) => Effect<A, E | E2, R | R2 | R3> = runtime_.asyncEffect\n\n/**\n * Low level constructor that enables for custom stack tracing cutpoints.\n *\n * It is meant to be called with a bag of instructions that become available in\n * the \"this\" of the effect.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const throwingFunction = () => { throw new Error() }\n * const blowUp = Effect.custom(throwingFunction, function() {\n *   return Effect.succeed(this.effect_instruction_i0())\n * })\n * ```\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const custom: {\n  /**\n   * Low level constructor that enables for custom stack tracing cutpoints.\n   *\n   * It is meant to be called with a bag of instructions that become available in\n   * the \"this\" of the effect.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const throwingFunction = () => { throw new Error() }\n   * const blowUp = Effect.custom(throwingFunction, function() {\n   *   return Effect.succeed(this.effect_instruction_i0())\n   * })\n   * ```\n   *\n   * @since 2.0.0\n   * @category Creating Effects\n   */\n  <X, A, E, R>(i0: X, body: (this: { effect_instruction_i0: X }) => Effect<A, E, R>): Effect<A, E, R>\n  /**\n   * Low level constructor that enables for custom stack tracing cutpoints.\n   *\n   * It is meant to be called with a bag of instructions that become available in\n   * the \"this\" of the effect.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const throwingFunction = () => { throw new Error() }\n   * const blowUp = Effect.custom(throwingFunction, function() {\n   *   return Effect.succeed(this.effect_instruction_i0())\n   * })\n   * ```\n   *\n   * @since 2.0.0\n   * @category Creating Effects\n   */\n  <X, Y, A, E, R>(\n    i0: X,\n    i1: Y,\n    body: (this: { effect_instruction_i0: X; effect_instruction_i1: Y }) => Effect<A, E, R>\n  ): Effect<A, E, R>\n  /**\n   * Low level constructor that enables for custom stack tracing cutpoints.\n   *\n   * It is meant to be called with a bag of instructions that become available in\n   * the \"this\" of the effect.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const throwingFunction = () => { throw new Error() }\n   * const blowUp = Effect.custom(throwingFunction, function() {\n   *   return Effect.succeed(this.effect_instruction_i0())\n   * })\n   * ```\n   *\n   * @since 2.0.0\n   * @category Creating Effects\n   */\n  <X, Y, Z, A, E, R>(\n    i0: X,\n    i1: Y,\n    i2: Z,\n    body: (this: { effect_instruction_i0: X; effect_instruction_i1: Y; effect_instruction_i2: Z }) => Effect<A, E, R>\n  ): Effect<A, E, R>\n} = core.custom\n\n/**\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const withFiberRuntime: <A, E = never, R = never>(\n  withRuntime: (\n    fiber: Fiber.RuntimeFiber<A, E>,\n    status: FiberStatus.Running\n  ) => Effect<A, E, R>\n) => Effect<A, E, R> = core.withFiberRuntime\n\n/**\n * Creates an `Effect` that represents a recoverable error.\n *\n * **When to Use**\n *\n * Use this function to explicitly signal an error in an `Effect`. The error\n * will keep propagating unless it is handled. You can handle the error with\n * functions like {@link catchAll} or {@link catchTag}.\n *\n * **Example** (Creating a Failed Effect)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * //      ┌─── Effect<never, Error, never>\n * //      ▼\n * const failure = Effect.fail(\n *   new Error(\"Operation failed due to network error\")\n * )\n * ```\n *\n * @see {@link succeed} to create an effect that represents a successful value.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const fail: <E>(error: E) => Effect<never, E> = core.fail\n\n/**\n * Creates an `Effect` that fails with the specified error, evaluated lazily.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const failSync: <E>(evaluate: LazyArg<E>) => Effect<never, E> = core.failSync\n\n/**\n * Creates an `Effect` that fails with the specified `Cause`.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Effect<never, E> = core.failCause\n\n/**\n * Creates an `Effect` that fails with the specified `Cause`, evaluated lazily.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const failCauseSync: <E>(evaluate: LazyArg<Cause.Cause<E>>) => Effect<never, E> = core.failCauseSync\n\n/**\n * Creates an effect that terminates a fiber with a specified error.\n *\n * **Details**\n *\n * This function is used to signal a defect, which represents a critical and\n * unexpected error in the code. When invoked, it produces an effect that does\n * not handle the error and instead terminates the fiber.\n *\n * The error channel of the resulting effect is of type `never`, indicating that\n * it cannot recover from this failure.\n *\n * **When to Use**\n *\n * Use this function when encountering unexpected conditions in your code that\n * should not be handled as regular errors but instead represent unrecoverable\n * defects.\n *\n * **Example** (Terminating on Division by Zero with a Specified Error)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const divide = (a: number, b: number) =>\n *   b === 0\n *     ? Effect.die(new Error(\"Cannot divide by zero\"))\n *     : Effect.succeed(a / b)\n *\n * //      ┌─── Effect<number, never, never>\n * //      ▼\n * const program = divide(1, 0)\n *\n * Effect.runPromise(program).catch(console.error)\n * // Output:\n * // (FiberFailure) Error: Cannot divide by zero\n * //   ...stack trace...\n * ```\n *\n * @see {@link dieSync} for a variant that throws a specified error, evaluated\n * lazily.\n * @see {@link dieMessage} for a variant that throws a `RuntimeException` with a\n * message.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const die: (defect: unknown) => Effect<never> = core.die\n\n/**\n * Creates an effect that terminates a fiber with a `RuntimeException`\n * containing the specified message.\n *\n * **Details**\n *\n * This function is used to signal a defect, representing a critical and\n * unexpected error in the code. When invoked, it produces an effect that\n * terminates the fiber with a `RuntimeException` carrying the given message.\n *\n * The resulting effect has an error channel of type `never`, indicating it does\n * not handle or recover from the error.\n *\n * **When to Use**\n *\n * Use this function when you want to terminate a fiber due to an unrecoverable\n * defect and include a clear explanation in the message.\n *\n * **Example** (Terminating on Division by Zero with a Specified Message)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const divide = (a: number, b: number) =>\n *   b === 0\n *     ? Effect.dieMessage(\"Cannot divide by zero\")\n *     : Effect.succeed(a / b)\n *\n * //      ┌─── Effect<number, never, never>\n * //      ▼\n * const program = divide(1, 0)\n *\n * Effect.runPromise(program).catch(console.error)\n * // Output:\n * // (FiberFailure) RuntimeException: Cannot divide by zero\n * //   ...stack trace...\n * ```\n *\n * @see {@link die} for a variant that throws a specified error.\n * @see {@link dieSync} for a variant that throws a specified error, evaluated\n * lazily.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const dieMessage: (message: string) => Effect<never> = core.dieMessage\n\n/**\n * Creates an effect that dies with the specified error, evaluated lazily.\n *\n * **Details**\n *\n * This function allows you to create an effect that will terminate with a fatal error.\n * The error is provided as a lazy argument, meaning it will only be evaluated when the effect runs.\n *\n * @see {@link die} if you don't need to evaluate the error lazily.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const dieSync: (evaluate: LazyArg<unknown>) => Effect<never> = core.dieSync\n\n/**\n * Provides a way to write effectful code using generator functions, simplifying\n * control flow and error handling.\n *\n * **When to Use**\n *\n * `Effect.gen` allows you to write code that looks and behaves like synchronous\n * code, but it can handle asynchronous tasks, errors, and complex control flow\n * (like loops and conditions). It helps make asynchronous code more readable\n * and easier to manage.\n *\n * The generator functions work similarly to `async/await` but with more\n * explicit control over the execution of effects. You can `yield*` values from\n * effects and return the final result at the end.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const addServiceCharge = (amount: number) => amount + 1\n *\n * const applyDiscount = (\n *   total: number,\n *   discountRate: number\n * ): Effect.Effect<number, Error> =>\n *   discountRate === 0\n *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n *     : Effect.succeed(total - (total * discountRate) / 100)\n *\n * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n *\n * const fetchDiscountRate = Effect.promise(() => Promise.resolve(5))\n *\n * export const program = Effect.gen(function* () {\n *   const transactionAmount = yield* fetchTransactionAmount\n *   const discountRate = yield* fetchDiscountRate\n *   const discountedAmount = yield* applyDiscount(\n *     transactionAmount,\n *     discountRate\n *   )\n *   const finalAmount = addServiceCharge(discountedAmount)\n *   return `Final amount to charge: ${finalAmount}`\n * })\n * ```\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const gen: {\n  /**\n   * Provides a way to write effectful code using generator functions, simplifying\n   * control flow and error handling.\n   *\n   * **When to Use**\n   *\n   * `Effect.gen` allows you to write code that looks and behaves like synchronous\n   * code, but it can handle asynchronous tasks, errors, and complex control flow\n   * (like loops and conditions). It helps make asynchronous code more readable\n   * and easier to manage.\n   *\n   * The generator functions work similarly to `async/await` but with more\n   * explicit control over the execution of effects. You can `yield*` values from\n   * effects and return the final result at the end.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const addServiceCharge = (amount: number) => amount + 1\n   *\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * const fetchDiscountRate = Effect.promise(() => Promise.resolve(5))\n   *\n   * export const program = Effect.gen(function* () {\n   *   const transactionAmount = yield* fetchTransactionAmount\n   *   const discountRate = yield* fetchDiscountRate\n   *   const discountedAmount = yield* applyDiscount(\n   *     transactionAmount,\n   *     discountRate\n   *   )\n   *   const finalAmount = addServiceCharge(discountedAmount)\n   *   return `Final amount to charge: ${finalAmount}`\n   * })\n   * ```\n   *\n   * @since 2.0.0\n   * @category Creating Effects\n   */\n  <Eff extends YieldWrap<Effect<any, any, any>>, AEff>(f: (resume: Adapter) => Generator<Eff, AEff, never>): Effect<\n    AEff,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n  >\n  /**\n   * Provides a way to write effectful code using generator functions, simplifying\n   * control flow and error handling.\n   *\n   * **When to Use**\n   *\n   * `Effect.gen` allows you to write code that looks and behaves like synchronous\n   * code, but it can handle asynchronous tasks, errors, and complex control flow\n   * (like loops and conditions). It helps make asynchronous code more readable\n   * and easier to manage.\n   *\n   * The generator functions work similarly to `async/await` but with more\n   * explicit control over the execution of effects. You can `yield*` values from\n   * effects and return the final result at the end.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const addServiceCharge = (amount: number) => amount + 1\n   *\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * const fetchDiscountRate = Effect.promise(() => Promise.resolve(5))\n   *\n   * export const program = Effect.gen(function* () {\n   *   const transactionAmount = yield* fetchTransactionAmount\n   *   const discountRate = yield* fetchDiscountRate\n   *   const discountedAmount = yield* applyDiscount(\n   *     transactionAmount,\n   *     discountRate\n   *   )\n   *   const finalAmount = addServiceCharge(discountedAmount)\n   *   return `Final amount to charge: ${finalAmount}`\n   * })\n   * ```\n   *\n   * @since 2.0.0\n   * @category Creating Effects\n   */\n  <Self, Eff extends YieldWrap<Effect<any, any, any>>, AEff>(\n    self: Self,\n    f: (this: Self, resume: Adapter) => Generator<Eff, AEff, never>\n  ): Effect<\n    AEff,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n  >\n} = core.gen\n\n/**\n * @since 2.0.0\n * @category Models\n */\nexport interface Adapter {\n  <A, E, R>(self: Effect<A, E, R>): Effect<A, E, R>\n  <A, _A, _E, _R>(a: A, ab: (a: A) => Effect<_A, _E, _R>): Effect<_A, _E, _R>\n  <A, B, _A, _E, _R>(a: A, ab: (a: A) => B, bc: (b: B) => Effect<_A, _E, _R>): Effect<_A, _E, _R>\n  <A, B, C, _A, _E, _R>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => Effect<_A, _E, _R>): Effect<_A, _E, _R>\n  <A, B, C, D, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (g: H) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => T,\n    tu: (s: T) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n}\n\n/**\n * An effect that that runs indefinitely and never produces any result. The\n * moral equivalent of `while(true) {}`, only without the wasted CPU cycles.\n *\n * **When to Use**\n *\n * It could be useful for long-running background tasks or to simulate waiting\n * behavior without actually consuming resources. This effect is ideal for cases\n * where you want to keep the program alive or in a certain state without\n * performing any active work.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const never: Effect<never> = core.never\n\n/**\n * Ensures the `Option` is `None`, returning `void`. Otherwise, raises a\n * `NoSuchElementException`.\n *\n * **Details**\n *\n * This function checks if the provided `Option` is `None`. If it is, it returns\n * an effect that produces no result (i.e., `void`). If the `Option` is not\n * `None` (i.e., it contains a value), the function will raise a\n * `NoSuchElementException` error.\n *\n * **When to Use**\n *\n * This is useful when you want to ensure that a certain value is absent (i.e.,\n * `None`) before continuing execution, and to handle cases where the value is\n * unexpectedly present.\n *\n * @since 2.0.0\n */\nexport const none: <A, E, R>(\n  self: Effect<Option.Option<A>, E, R>\n) => Effect<void, E | Cause.NoSuchElementException, R> = effect.none\n\n/**\n * Creates an `Effect` that represents an asynchronous computation guaranteed to\n * succeed.\n *\n * **Details**\n *\n * The provided function (`thunk`) returns a `Promise` that should never reject; if it does, the error\n * will be treated as a \"defect\".\n *\n * This defect is not a standard error but indicates a flaw in the logic that\n * was expected to be error-free. You can think of it similar to an unexpected\n * crash in the program, which can be further managed or logged using tools like\n * {@link catchAllDefect}.\n *\n * **Interruptions**\n *\n * An optional `AbortSignal` can be provided to allow for interruption of the\n * wrapped `Promise` API.\n *\n * **When to Use**\n *\n * Use this function when you are sure the operation will not reject.\n *\n * **Example** (Delayed Message)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const delay = (message: string) =>\n *   Effect.promise<string>(\n *     () =>\n *       new Promise((resolve) => {\n *         setTimeout(() => {\n *           resolve(message)\n *         }, 2000)\n *       })\n *   )\n *\n * //      ┌─── Effect<string, never, never>\n * //      ▼\n * const program = delay(\"Async operation completed successfully!\")\n * ```\n *\n * @see {@link tryPromise} for a version that can handle failures.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const promise: <A>(\n  evaluate: (signal: AbortSignal) => PromiseLike<A>\n) => Effect<A> = effect.promise\n\n/**\n * Creates an `Effect` that always succeeds with a given value.\n *\n * **When to Use**\n *\n * Use this function when you need an effect that completes successfully with a\n * specific value without any errors or external dependencies.\n *\n * **Example** (Creating a Successful Effect)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * // Creating an effect that represents a successful scenario\n * //\n * //      ┌─── Effect<number, never, never>\n * //      ▼\n * const success = Effect.succeed(42)\n * ```\n *\n * @see {@link fail} to create an effect that represents a failure.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const succeed: <A>(value: A) => Effect<A> = core.succeed\n\n/**\n * Returns an effect which succeeds with `None`.\n *\n * **When to Use**\n *\n * Use this function when you need to represent the absence of a value in your\n * code, especially when working with optional data. This can be helpful when\n * you want to indicate that no result is available without throwing an error or\n * performing additional logic.\n *\n * @see {@link succeedSome} to create an effect that succeeds with a `Some` value.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const succeedNone: Effect<Option.Option<never>> = effect.succeedNone\n\n/**\n * Returns an effect which succeeds with the value wrapped in a `Some`.\n *\n * @see {@link succeedNone} for a similar function that returns `None` when the value is absent.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const succeedSome: <A>(value: A) => Effect<Option.Option<A>> = effect.succeedSome\n\n/**\n * Delays the creation of an `Effect` until it is actually needed.\n *\n * **Details**\n *\n * The `Effect.suspend` function takes a thunk that represents the effect and\n * wraps it in a suspended effect. This means the effect will not be created\n * until it is explicitly needed, which is helpful in various scenarios:\n * - **Lazy Evaluation**: Helps optimize performance by deferring computations,\n *   especially when the effect might not be needed, or when its computation is\n *   expensive. This also ensures that any side effects or scoped captures are\n *   re-executed on each invocation.\n * - **Handling Circular Dependencies**: Useful in managing circular\n *   dependencies, such as recursive functions that need to avoid eager\n *   evaluation to prevent stack overflow.\n * - **Unifying Return Types**: Can help TypeScript unify return types in\n *   situations where multiple branches of logic return different effects,\n *   simplifying type inference.\n *\n * **When to Use**\n *\n * Use this function when you need to defer the evaluation of an effect until it\n * is required. This is particularly useful for optimizing expensive\n * computations, managing circular dependencies, or resolving type inference\n * issues.\n *\n * **Example** (Lazy Evaluation with Side Effects)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * let i = 0\n *\n * const bad = Effect.succeed(i++)\n *\n * const good = Effect.suspend(() => Effect.succeed(i++))\n *\n * console.log(Effect.runSync(bad)) // Output: 0\n * console.log(Effect.runSync(bad)) // Output: 0\n *\n * console.log(Effect.runSync(good)) // Output: 1\n * console.log(Effect.runSync(good)) // Output: 2\n * ```\n *\n * **Example** (Recursive Fibonacci)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const blowsUp = (n: number): Effect.Effect<number> =>\n *   n < 2\n *     ? Effect.succeed(1)\n *     : Effect.zipWith(blowsUp(n - 1), blowsUp(n - 2), (a, b) => a + b)\n *\n * console.log(Effect.runSync(blowsUp(32)))\n * // crash: JavaScript heap out of memory\n *\n * const allGood = (n: number): Effect.Effect<number> =>\n *   n < 2\n *     ? Effect.succeed(1)\n *     : Effect.zipWith(\n *         Effect.suspend(() => allGood(n - 1)),\n *         Effect.suspend(() => allGood(n - 2)),\n *         (a, b) => a + b\n *       )\n *\n * console.log(Effect.runSync(allGood(32)))\n * // Output: 3524578\n * ```\n *\n * **Example** (Using Effect.suspend to Help TypeScript Infer Types)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * //   Without suspend, TypeScript may struggle with type inference.\n * //   Inferred type:\n * //     (a: number, b: number) =>\n * //       Effect<never, Error, never> | Effect<number, never, never>\n * const withoutSuspend = (a: number, b: number) =>\n *   b === 0\n *     ? Effect.fail(new Error(\"Cannot divide by zero\"))\n *     : Effect.succeed(a / b)\n *\n * //   Using suspend to unify return types.\n * //   Inferred type:\n * //     (a: number, b: number) => Effect<number, Error, never>\n * const withSuspend = (a: number, b: number) =>\n *   Effect.suspend(() =>\n *     b === 0\n *       ? Effect.fail(new Error(\"Cannot divide by zero\"))\n *       : Effect.succeed(a / b)\n *   )\n * ```\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const suspend: <A, E, R>(effect: LazyArg<Effect<A, E, R>>) => Effect<A, E, R> = core.suspend\n\n/**\n * Creates an `Effect` that represents a synchronous side-effectful computation.\n *\n * **Details**\n *\n * The provided function (`thunk`) must not throw errors; if it does, the error\n * will be treated as a \"defect\".\n *\n * This defect is not a standard error but indicates a flaw in the logic that\n * was expected to be error-free. You can think of it similar to an unexpected\n * crash in the program, which can be further managed or logged using tools like\n * {@link catchAllDefect}.\n *\n * **When to Use**\n *\n * Use this function when you are sure the operation will not fail.\n *\n * **Example** (Logging a Message)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const log = (message: string) =>\n *   Effect.sync(() => {\n *     console.log(message) // side effect\n *   })\n *\n * //      ┌─── Effect<void, never, never>\n * //      ▼\n * const program = log(\"Hello, World!\")\n * ```\n *\n * @see {@link try_ | try} for a version that can handle failures.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const sync: <A>(thunk: LazyArg<A>) => Effect<A> = core.sync\n\nconst _void: Effect<void> = core.void\n\nexport {\n  /**\n   * Represents an effect that does nothing and produces no value.\n   *\n   * **When to Use**\n   *\n   * Use this effect when you need to represent an effect that does nothing.\n   * This is useful in scenarios where you need to satisfy an effect-based\n   * interface or control program flow without performing any operations. For\n   * example, it can be used in situations where you want to return an effect\n   * from a function but do not need to compute or return any result.\n   *\n   * @since 2.0.0\n   * @category Creating Effects\n   */\n  _void as void\n}\n\n/**\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const yieldNow: (options?: {\n  readonly priority?: number | undefined\n}) => Effect<void> = core.yieldNow\n\nconst _catch: {\n  <N extends keyof E, K extends E[N] & string, E, A1, E1, R1>(\n    discriminator: N,\n    options: { readonly failure: K; readonly onFailure: (error: Extract<E, { [n in N]: K }>) => Effect<A1, E1, R1> }\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A1 | A, E1 | Exclude<E, { [n in N]: K }>, R1 | R>\n  <A, E, R, N extends keyof E, K extends E[N] & string, A1, E1, R1>(\n    self: Effect<A, E, R>,\n    discriminator: N,\n    options: { readonly failure: K; readonly onFailure: (error: Extract<E, { [n in N]: K }>) => Effect<A1, E1, R1> }\n  ): Effect<A | A1, E1 | Exclude<E, { [n in N]: K }>, R | R1>\n} = effect._catch\n\nexport {\n  /**\n   * Recovers from a specified error by catching it and handling it with a provided function.\n   *\n   * **Details**\n   *\n   * This function allows you to recover from specific errors that occur during\n   * the execution of an effect. It works by catching a specific type of error\n   * (identified by a discriminator) and then handling it using a provided\n   * handler function. The handler can return a new effect that helps recover\n   * from the error, allowing the program to continue. If the error doesn't\n   * match the specified type, the function allows the original effect to\n   * continue as it was.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * class NetworkError {\n   *   readonly _tag = \"NetworkError\"\n   * }\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   * }\n   *\n   * // Simulate an effect that may fail\n   * const task: Effect.Effect<never, NetworkError | ValidationError, never> = Effect.fail(new NetworkError())\n   *\n   * const program = Effect.gen(function*() {\n   *   const result = yield* Effect.catch(task, \"_tag\", {\n   *     failure: \"NetworkError\",\n   *     onFailure: (error) => Effect.succeed(`recovered from error: ${error._tag}`)\n   *   })\n   *   console.log(`Result: ${result}`)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output: Result: recovered from error: NetworkError\n   * ```\n   *\n   * @see {@link catchTag} for a version that can recover from errors based on a `_tag` discriminator.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  _catch as catch\n}\n\n/**\n * Handles all errors in an effect by providing a fallback effect.\n *\n * **Details**\n *\n * This function catches any errors that may occur during the execution of an\n * effect and allows you to handle them by specifying a fallback effect. This\n * ensures that the program continues without failing by recovering from errors\n * using the provided fallback logic.\n *\n * **Note**: This function only handles recoverable errors. It will not recover\n * from unrecoverable defects.\n *\n * **Example** (Providing Recovery Logic for Recoverable Errors)\n *\n * ```ts\n * import { Effect, Random } from \"effect\"\n *\n * class HttpError {\n *   readonly _tag = \"HttpError\"\n * }\n *\n * class ValidationError {\n *   readonly _tag = \"ValidationError\"\n * }\n *\n * //      ┌─── Effect<string, HttpError | ValidationError, never>\n * //      ▼\n * const program = Effect.gen(function* () {\n *   const n1 = yield* Random.next\n *   const n2 = yield* Random.next\n *   if (n1 < 0.5) {\n *     yield* Effect.fail(new HttpError())\n *   }\n *   if (n2 < 0.5) {\n *     yield* Effect.fail(new ValidationError())\n *   }\n *   return \"some result\"\n * })\n *\n * //      ┌─── Effect<string, never, never>\n * //      ▼\n * const recovered = program.pipe(\n *   Effect.catchAll((error) =>\n *     Effect.succeed(`Recovering from ${error._tag}`)\n *   )\n * )\n * ```\n *\n * @see {@link catchAllCause} for a version that can recover from both\n * recoverable and unrecoverable errors.\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const catchAll: {\n  /**\n   * Handles all errors in an effect by providing a fallback effect.\n   *\n   * **Details**\n   *\n   * This function catches any errors that may occur during the execution of an\n   * effect and allows you to handle them by specifying a fallback effect. This\n   * ensures that the program continues without failing by recovering from errors\n   * using the provided fallback logic.\n   *\n   * **Note**: This function only handles recoverable errors. It will not recover\n   * from unrecoverable defects.\n   *\n   * **Example** (Providing Recovery Logic for Recoverable Errors)\n   *\n   * ```ts\n   * import { Effect, Random } from \"effect\"\n   *\n   * class HttpError {\n   *   readonly _tag = \"HttpError\"\n   * }\n   *\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   * }\n   *\n   * //      ┌─── Effect<string, HttpError | ValidationError, never>\n   * //      ▼\n   * const program = Effect.gen(function* () {\n   *   const n1 = yield* Random.next\n   *   const n2 = yield* Random.next\n   *   if (n1 < 0.5) {\n   *     yield* Effect.fail(new HttpError())\n   *   }\n   *   if (n2 < 0.5) {\n   *     yield* Effect.fail(new ValidationError())\n   *   }\n   *   return \"some result\"\n   * })\n   *\n   * //      ┌─── Effect<string, never, never>\n   * //      ▼\n   * const recovered = program.pipe(\n   *   Effect.catchAll((error) =>\n   *     Effect.succeed(`Recovering from ${error._tag}`)\n   *   )\n   * )\n   * ```\n   *\n   * @see {@link catchAllCause} for a version that can recover from both\n   * recoverable and unrecoverable errors.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <E, A2, E2, R2>(f: (e: E) => Effect<A2, E2, R2>): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R2 | R>\n  /**\n   * Handles all errors in an effect by providing a fallback effect.\n   *\n   * **Details**\n   *\n   * This function catches any errors that may occur during the execution of an\n   * effect and allows you to handle them by specifying a fallback effect. This\n   * ensures that the program continues without failing by recovering from errors\n   * using the provided fallback logic.\n   *\n   * **Note**: This function only handles recoverable errors. It will not recover\n   * from unrecoverable defects.\n   *\n   * **Example** (Providing Recovery Logic for Recoverable Errors)\n   *\n   * ```ts\n   * import { Effect, Random } from \"effect\"\n   *\n   * class HttpError {\n   *   readonly _tag = \"HttpError\"\n   * }\n   *\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   * }\n   *\n   * //      ┌─── Effect<string, HttpError | ValidationError, never>\n   * //      ▼\n   * const program = Effect.gen(function* () {\n   *   const n1 = yield* Random.next\n   *   const n2 = yield* Random.next\n   *   if (n1 < 0.5) {\n   *     yield* Effect.fail(new HttpError())\n   *   }\n   *   if (n2 < 0.5) {\n   *     yield* Effect.fail(new ValidationError())\n   *   }\n   *   return \"some result\"\n   * })\n   *\n   * //      ┌─── Effect<string, never, never>\n   * //      ▼\n   * const recovered = program.pipe(\n   *   Effect.catchAll((error) =>\n   *     Effect.succeed(`Recovering from ${error._tag}`)\n   *   )\n   * )\n   * ```\n   *\n   * @see {@link catchAllCause} for a version that can recover from both\n   * recoverable and unrecoverable errors.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, f: (e: E) => Effect<A2, E2, R2>): Effect<A2 | A, E2, R2 | R>\n} = core.catchAll\n\n/**\n * Handles both recoverable and unrecoverable errors by providing a recovery\n * effect.\n *\n * **When to Use**\n *\n * The `catchAllCause` function allows you to handle all errors, including\n * unrecoverable defects, by providing a recovery effect. The recovery logic is\n * based on the `Cause` of the error, which provides detailed information about\n * the failure.\n *\n * **When to Recover from Defects**\n *\n * Defects are unexpected errors that typically shouldn't be recovered from, as\n * they often indicate serious issues. However, in some cases, such as\n * dynamically loaded plugins, controlled recovery might be needed.\n *\n * **Example** (Recovering from All Errors)\n *\n * ```ts\n * import { Cause, Effect } from \"effect\"\n *\n * // Define an effect that may fail with a recoverable or unrecoverable error\n * const program = Effect.fail(\"Something went wrong!\")\n *\n * // Recover from all errors by examining the cause\n * const recovered = program.pipe(\n *   Effect.catchAllCause((cause) =>\n *     Cause.isFailure(cause)\n *       ? Effect.succeed(\"Recovered from a regular error\")\n *       : Effect.succeed(\"Recovered from a defect\")\n *   )\n * )\n *\n * Effect.runPromise(recovered).then(console.log)\n * // Output: \"Recovered from a regular error\"\n * ```\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const catchAllCause: {\n  /**\n   * Handles both recoverable and unrecoverable errors by providing a recovery\n   * effect.\n   *\n   * **When to Use**\n   *\n   * The `catchAllCause` function allows you to handle all errors, including\n   * unrecoverable defects, by providing a recovery effect. The recovery logic is\n   * based on the `Cause` of the error, which provides detailed information about\n   * the failure.\n   *\n   * **When to Recover from Defects**\n   *\n   * Defects are unexpected errors that typically shouldn't be recovered from, as\n   * they often indicate serious issues. However, in some cases, such as\n   * dynamically loaded plugins, controlled recovery might be needed.\n   *\n   * **Example** (Recovering from All Errors)\n   *\n   * ```ts\n   * import { Cause, Effect } from \"effect\"\n   *\n   * // Define an effect that may fail with a recoverable or unrecoverable error\n   * const program = Effect.fail(\"Something went wrong!\")\n   *\n   * // Recover from all errors by examining the cause\n   * const recovered = program.pipe(\n   *   Effect.catchAllCause((cause) =>\n   *     Cause.isFailure(cause)\n   *       ? Effect.succeed(\"Recovered from a regular error\")\n   *       : Effect.succeed(\"Recovered from a defect\")\n   *   )\n   * )\n   *\n   * Effect.runPromise(recovered).then(console.log)\n   * // Output: \"Recovered from a regular error\"\n   * ```\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <E, A2, E2, R2>(f: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R2 | R>\n  /**\n   * Handles both recoverable and unrecoverable errors by providing a recovery\n   * effect.\n   *\n   * **When to Use**\n   *\n   * The `catchAllCause` function allows you to handle all errors, including\n   * unrecoverable defects, by providing a recovery effect. The recovery logic is\n   * based on the `Cause` of the error, which provides detailed information about\n   * the failure.\n   *\n   * **When to Recover from Defects**\n   *\n   * Defects are unexpected errors that typically shouldn't be recovered from, as\n   * they often indicate serious issues. However, in some cases, such as\n   * dynamically loaded plugins, controlled recovery might be needed.\n   *\n   * **Example** (Recovering from All Errors)\n   *\n   * ```ts\n   * import { Cause, Effect } from \"effect\"\n   *\n   * // Define an effect that may fail with a recoverable or unrecoverable error\n   * const program = Effect.fail(\"Something went wrong!\")\n   *\n   * // Recover from all errors by examining the cause\n   * const recovered = program.pipe(\n   *   Effect.catchAllCause((cause) =>\n   *     Cause.isFailure(cause)\n   *       ? Effect.succeed(\"Recovered from a regular error\")\n   *       : Effect.succeed(\"Recovered from a defect\")\n   *   )\n   * )\n   *\n   * Effect.runPromise(recovered).then(console.log)\n   * // Output: \"Recovered from a regular error\"\n   * ```\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, f: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>): Effect<A | A2, E2, R | R2>\n} = core.catchAllCause\n\n/**\n * Recovers from all defects using a provided recovery function.\n *\n * **When to Use**\n *\n * There is no sensible way to recover from defects. This method should be used\n * only at the boundary between Effect and an external system, to transmit\n * information on a defect for diagnostic or explanatory purposes.\n *\n * **Details**\n *\n * `catchAllDefect` allows you to handle defects, which are unexpected errors\n * that usually cause the program to terminate. This function lets you recover\n * from these defects by providing a function that handles the error. However,\n * it does not handle expected errors (like those from {@link fail}) or\n * execution interruptions (like those from {@link interrupt}).\n *\n * **When to Recover from Defects**\n *\n * Defects are unexpected errors that typically shouldn't be recovered from, as\n * they often indicate serious issues. However, in some cases, such as\n * dynamically loaded plugins, controlled recovery might be needed.\n *\n * **Example** (Handling All Defects)\n *\n * ```ts\n * import { Effect, Cause, Console } from \"effect\"\n *\n * // Simulating a runtime error\n * const task = Effect.dieMessage(\"Boom!\")\n *\n * const program = Effect.catchAllDefect(task, (defect) => {\n *   if (Cause.isRuntimeException(defect)) {\n *     return Console.log(\n *       `RuntimeException defect caught: ${defect.message}`\n *     )\n *   }\n *   return Console.log(\"Unknown defect caught.\")\n * })\n *\n * // We get an Exit.Success because we caught all defects\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // RuntimeException defect caught: Boom!\n * // {\n * //   _id: \"Exit\",\n * //   _tag: \"Success\",\n * //   value: undefined\n * // }\n * ```\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const catchAllDefect: {\n  /**\n   * Recovers from all defects using a provided recovery function.\n   *\n   * **When to Use**\n   *\n   * There is no sensible way to recover from defects. This method should be used\n   * only at the boundary between Effect and an external system, to transmit\n   * information on a defect for diagnostic or explanatory purposes.\n   *\n   * **Details**\n   *\n   * `catchAllDefect` allows you to handle defects, which are unexpected errors\n   * that usually cause the program to terminate. This function lets you recover\n   * from these defects by providing a function that handles the error. However,\n   * it does not handle expected errors (like those from {@link fail}) or\n   * execution interruptions (like those from {@link interrupt}).\n   *\n   * **When to Recover from Defects**\n   *\n   * Defects are unexpected errors that typically shouldn't be recovered from, as\n   * they often indicate serious issues. However, in some cases, such as\n   * dynamically loaded plugins, controlled recovery might be needed.\n   *\n   * **Example** (Handling All Defects)\n   *\n   * ```ts\n   * import { Effect, Cause, Console } from \"effect\"\n   *\n   * // Simulating a runtime error\n   * const task = Effect.dieMessage(\"Boom!\")\n   *\n   * const program = Effect.catchAllDefect(task, (defect) => {\n   *   if (Cause.isRuntimeException(defect)) {\n   *     return Console.log(\n   *       `RuntimeException defect caught: ${defect.message}`\n   *     )\n   *   }\n   *   return Console.log(\"Unknown defect caught.\")\n   * })\n   *\n   * // We get an Exit.Success because we caught all defects\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // RuntimeException defect caught: Boom!\n   * // {\n   * //   _id: \"Exit\",\n   * //   _tag: \"Success\",\n   * //   value: undefined\n   * // }\n   * ```\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A2, E2, R2>(f: (defect: unknown) => Effect<A2, E2, R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  /**\n   * Recovers from all defects using a provided recovery function.\n   *\n   * **When to Use**\n   *\n   * There is no sensible way to recover from defects. This method should be used\n   * only at the boundary between Effect and an external system, to transmit\n   * information on a defect for diagnostic or explanatory purposes.\n   *\n   * **Details**\n   *\n   * `catchAllDefect` allows you to handle defects, which are unexpected errors\n   * that usually cause the program to terminate. This function lets you recover\n   * from these defects by providing a function that handles the error. However,\n   * it does not handle expected errors (like those from {@link fail}) or\n   * execution interruptions (like those from {@link interrupt}).\n   *\n   * **When to Recover from Defects**\n   *\n   * Defects are unexpected errors that typically shouldn't be recovered from, as\n   * they often indicate serious issues. However, in some cases, such as\n   * dynamically loaded plugins, controlled recovery might be needed.\n   *\n   * **Example** (Handling All Defects)\n   *\n   * ```ts\n   * import { Effect, Cause, Console } from \"effect\"\n   *\n   * // Simulating a runtime error\n   * const task = Effect.dieMessage(\"Boom!\")\n   *\n   * const program = Effect.catchAllDefect(task, (defect) => {\n   *   if (Cause.isRuntimeException(defect)) {\n   *     return Console.log(\n   *       `RuntimeException defect caught: ${defect.message}`\n   *     )\n   *   }\n   *   return Console.log(\"Unknown defect caught.\")\n   * })\n   *\n   * // We get an Exit.Success because we caught all defects\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // RuntimeException defect caught: Boom!\n   * // {\n   * //   _id: \"Exit\",\n   * //   _tag: \"Success\",\n   * //   value: undefined\n   * // }\n   * ```\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, f: (defect: unknown) => Effect<A2, E2, R2>): Effect<A | A2, E | E2, R | R2>\n} = effect.catchAllDefect\n\n/**\n * Recovers from specific errors based on a predicate.\n *\n * **When to Use**\n *\n * `catchIf` works similarly to {@link catchSome}, but it allows you to\n * recover from errors by providing a predicate function. If the predicate\n * matches the error, the recovery effect is applied. This function doesn't\n * alter the error type, so the resulting effect still carries the original\n * error type unless a user-defined type guard is used to narrow the type.\n *\n * **Example** (Catching Specific Errors with a Predicate)\n *\n * ```ts\n * import { Effect, Random } from \"effect\"\n *\n * class HttpError {\n *   readonly _tag = \"HttpError\"\n * }\n *\n * class ValidationError {\n *   readonly _tag = \"ValidationError\"\n * }\n *\n * //      ┌─── Effect<string, HttpError | ValidationError, never>\n * //      ▼\n * const program = Effect.gen(function* () {\n *   const n1 = yield* Random.next\n *   const n2 = yield* Random.next\n *   if (n1 < 0.5) {\n *     yield* Effect.fail(new HttpError())\n *   }\n *   if (n2 < 0.5) {\n *     yield* Effect.fail(new ValidationError())\n *   }\n *   return \"some result\"\n * })\n *\n * //      ┌─── Effect<string, ValidationError, never>\n * //      ▼\n * const recovered = program.pipe(\n *   Effect.catchIf(\n *     // Only handle HttpError errors\n *     (error) => error._tag === \"HttpError\",\n *     () => Effect.succeed(\"Recovering from HttpError\")\n *   )\n * )\n * ```\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const catchIf: {\n  /**\n   * Recovers from specific errors based on a predicate.\n   *\n   * **When to Use**\n   *\n   * `catchIf` works similarly to {@link catchSome}, but it allows you to\n   * recover from errors by providing a predicate function. If the predicate\n   * matches the error, the recovery effect is applied. This function doesn't\n   * alter the error type, so the resulting effect still carries the original\n   * error type unless a user-defined type guard is used to narrow the type.\n   *\n   * **Example** (Catching Specific Errors with a Predicate)\n   *\n   * ```ts\n   * import { Effect, Random } from \"effect\"\n   *\n   * class HttpError {\n   *   readonly _tag = \"HttpError\"\n   * }\n   *\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   * }\n   *\n   * //      ┌─── Effect<string, HttpError | ValidationError, never>\n   * //      ▼\n   * const program = Effect.gen(function* () {\n   *   const n1 = yield* Random.next\n   *   const n2 = yield* Random.next\n   *   if (n1 < 0.5) {\n   *     yield* Effect.fail(new HttpError())\n   *   }\n   *   if (n2 < 0.5) {\n   *     yield* Effect.fail(new ValidationError())\n   *   }\n   *   return \"some result\"\n   * })\n   *\n   * //      ┌─── Effect<string, ValidationError, never>\n   * //      ▼\n   * const recovered = program.pipe(\n   *   Effect.catchIf(\n   *     // Only handle HttpError errors\n   *     (error) => error._tag === \"HttpError\",\n   *     () => Effect.succeed(\"Recovering from HttpError\")\n   *   )\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <E, EB extends E, A2, E2, R2>(refinement: Refinement<NoInfer<E>, EB>, f: (e: EB) => Effect<A2, E2, R2>): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | Exclude<E, EB>, R2 | R>\n  /**\n   * Recovers from specific errors based on a predicate.\n   *\n   * **When to Use**\n   *\n   * `catchIf` works similarly to {@link catchSome}, but it allows you to\n   * recover from errors by providing a predicate function. If the predicate\n   * matches the error, the recovery effect is applied. This function doesn't\n   * alter the error type, so the resulting effect still carries the original\n   * error type unless a user-defined type guard is used to narrow the type.\n   *\n   * **Example** (Catching Specific Errors with a Predicate)\n   *\n   * ```ts\n   * import { Effect, Random } from \"effect\"\n   *\n   * class HttpError {\n   *   readonly _tag = \"HttpError\"\n   * }\n   *\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   * }\n   *\n   * //      ┌─── Effect<string, HttpError | ValidationError, never>\n   * //      ▼\n   * const program = Effect.gen(function* () {\n   *   const n1 = yield* Random.next\n   *   const n2 = yield* Random.next\n   *   if (n1 < 0.5) {\n   *     yield* Effect.fail(new HttpError())\n   *   }\n   *   if (n2 < 0.5) {\n   *     yield* Effect.fail(new ValidationError())\n   *   }\n   *   return \"some result\"\n   * })\n   *\n   * //      ┌─── Effect<string, ValidationError, never>\n   * //      ▼\n   * const recovered = program.pipe(\n   *   Effect.catchIf(\n   *     // Only handle HttpError errors\n   *     (error) => error._tag === \"HttpError\",\n   *     () => Effect.succeed(\"Recovering from HttpError\")\n   *   )\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <E, A2, E2, R2>(predicate: Predicate<NoInfer<E>>, f: (e: NoInfer<E>) => Effect<A2, E2, R2>): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E | E2, R2 | R>\n  /**\n   * Recovers from specific errors based on a predicate.\n   *\n   * **When to Use**\n   *\n   * `catchIf` works similarly to {@link catchSome}, but it allows you to\n   * recover from errors by providing a predicate function. If the predicate\n   * matches the error, the recovery effect is applied. This function doesn't\n   * alter the error type, so the resulting effect still carries the original\n   * error type unless a user-defined type guard is used to narrow the type.\n   *\n   * **Example** (Catching Specific Errors with a Predicate)\n   *\n   * ```ts\n   * import { Effect, Random } from \"effect\"\n   *\n   * class HttpError {\n   *   readonly _tag = \"HttpError\"\n   * }\n   *\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   * }\n   *\n   * //      ┌─── Effect<string, HttpError | ValidationError, never>\n   * //      ▼\n   * const program = Effect.gen(function* () {\n   *   const n1 = yield* Random.next\n   *   const n2 = yield* Random.next\n   *   if (n1 < 0.5) {\n   *     yield* Effect.fail(new HttpError())\n   *   }\n   *   if (n2 < 0.5) {\n   *     yield* Effect.fail(new ValidationError())\n   *   }\n   *   return \"some result\"\n   * })\n   *\n   * //      ┌─── Effect<string, ValidationError, never>\n   * //      ▼\n   * const recovered = program.pipe(\n   *   Effect.catchIf(\n   *     // Only handle HttpError errors\n   *     (error) => error._tag === \"HttpError\",\n   *     () => Effect.succeed(\"Recovering from HttpError\")\n   *   )\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, E, R, EB extends E, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<E, EB>,\n    f: (e: EB) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E2 | Exclude<E, EB>, R | R2>\n  /**\n   * Recovers from specific errors based on a predicate.\n   *\n   * **When to Use**\n   *\n   * `catchIf` works similarly to {@link catchSome}, but it allows you to\n   * recover from errors by providing a predicate function. If the predicate\n   * matches the error, the recovery effect is applied. This function doesn't\n   * alter the error type, so the resulting effect still carries the original\n   * error type unless a user-defined type guard is used to narrow the type.\n   *\n   * **Example** (Catching Specific Errors with a Predicate)\n   *\n   * ```ts\n   * import { Effect, Random } from \"effect\"\n   *\n   * class HttpError {\n   *   readonly _tag = \"HttpError\"\n   * }\n   *\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   * }\n   *\n   * //      ┌─── Effect<string, HttpError | ValidationError, never>\n   * //      ▼\n   * const program = Effect.gen(function* () {\n   *   const n1 = yield* Random.next\n   *   const n2 = yield* Random.next\n   *   if (n1 < 0.5) {\n   *     yield* Effect.fail(new HttpError())\n   *   }\n   *   if (n2 < 0.5) {\n   *     yield* Effect.fail(new ValidationError())\n   *   }\n   *   return \"some result\"\n   * })\n   *\n   * //      ┌─── Effect<string, ValidationError, never>\n   * //      ▼\n   * const recovered = program.pipe(\n   *   Effect.catchIf(\n   *     // Only handle HttpError errors\n   *     (error) => error._tag === \"HttpError\",\n   *     () => Effect.succeed(\"Recovering from HttpError\")\n   *   )\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    predicate: Predicate<E>,\n    f: (e: E) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E | E2, R | R2>\n} = core.catchIf\n\n/**\n * Catches and recovers from specific types of errors, allowing you to attempt\n * recovery only for certain errors.\n *\n * **Details**\n *\n * `catchSome` lets you selectively catch and handle errors of certain\n * types by providing a recovery effect for specific errors. If the error\n * matches a condition, recovery is attempted; if not, it doesn't affect the\n * program. This function doesn't alter the error type, meaning the error type\n * remains the same as in the original effect.\n *\n * **Example** (Handling Specific Errors with Effect.catchSome)\n *\n * ```ts\n * import { Effect, Random, Option } from \"effect\"\n *\n * class HttpError {\n *   readonly _tag = \"HttpError\"\n * }\n *\n * class ValidationError {\n *   readonly _tag = \"ValidationError\"\n * }\n *\n * //      ┌─── Effect<string, HttpError | ValidationError, never>\n * //      ▼\n * const program = Effect.gen(function* () {\n *   const n1 = yield* Random.next\n *   const n2 = yield* Random.next\n *   if (n1 < 0.5) {\n *     yield* Effect.fail(new HttpError())\n *   }\n *   if (n2 < 0.5) {\n *     yield* Effect.fail(new ValidationError())\n *   }\n *   return \"some result\"\n * })\n *\n * //      ┌─── Effect<string, HttpError | ValidationError, never>\n * //      ▼\n * const recovered = program.pipe(\n *   Effect.catchSome((error) => {\n *     // Only handle HttpError errors\n *     if (error._tag === \"HttpError\") {\n *       return Option.some(Effect.succeed(\"Recovering from HttpError\"))\n *     } else {\n *       return Option.none()\n *     }\n *   })\n * )\n * ```\n *\n * @see {@link catchIf} for a version that allows you to recover from errors based on a predicate.\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const catchSome: {\n  /**\n   * Catches and recovers from specific types of errors, allowing you to attempt\n   * recovery only for certain errors.\n   *\n   * **Details**\n   *\n   * `catchSome` lets you selectively catch and handle errors of certain\n   * types by providing a recovery effect for specific errors. If the error\n   * matches a condition, recovery is attempted; if not, it doesn't affect the\n   * program. This function doesn't alter the error type, meaning the error type\n   * remains the same as in the original effect.\n   *\n   * **Example** (Handling Specific Errors with Effect.catchSome)\n   *\n   * ```ts\n   * import { Effect, Random, Option } from \"effect\"\n   *\n   * class HttpError {\n   *   readonly _tag = \"HttpError\"\n   * }\n   *\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   * }\n   *\n   * //      ┌─── Effect<string, HttpError | ValidationError, never>\n   * //      ▼\n   * const program = Effect.gen(function* () {\n   *   const n1 = yield* Random.next\n   *   const n2 = yield* Random.next\n   *   if (n1 < 0.5) {\n   *     yield* Effect.fail(new HttpError())\n   *   }\n   *   if (n2 < 0.5) {\n   *     yield* Effect.fail(new ValidationError())\n   *   }\n   *   return \"some result\"\n   * })\n   *\n   * //      ┌─── Effect<string, HttpError | ValidationError, never>\n   * //      ▼\n   * const recovered = program.pipe(\n   *   Effect.catchSome((error) => {\n   *     // Only handle HttpError errors\n   *     if (error._tag === \"HttpError\") {\n   *       return Option.some(Effect.succeed(\"Recovering from HttpError\"))\n   *     } else {\n   *       return Option.none()\n   *     }\n   *   })\n   * )\n   * ```\n   *\n   * @see {@link catchIf} for a version that allows you to recover from errors based on a predicate.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <E, A2, E2, R2>(pf: (e: NoInfer<E>) => Option.Option<Effect<A2, E2, R2>>): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E | E2, R2 | R>\n  /**\n   * Catches and recovers from specific types of errors, allowing you to attempt\n   * recovery only for certain errors.\n   *\n   * **Details**\n   *\n   * `catchSome` lets you selectively catch and handle errors of certain\n   * types by providing a recovery effect for specific errors. If the error\n   * matches a condition, recovery is attempted; if not, it doesn't affect the\n   * program. This function doesn't alter the error type, meaning the error type\n   * remains the same as in the original effect.\n   *\n   * **Example** (Handling Specific Errors with Effect.catchSome)\n   *\n   * ```ts\n   * import { Effect, Random, Option } from \"effect\"\n   *\n   * class HttpError {\n   *   readonly _tag = \"HttpError\"\n   * }\n   *\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   * }\n   *\n   * //      ┌─── Effect<string, HttpError | ValidationError, never>\n   * //      ▼\n   * const program = Effect.gen(function* () {\n   *   const n1 = yield* Random.next\n   *   const n2 = yield* Random.next\n   *   if (n1 < 0.5) {\n   *     yield* Effect.fail(new HttpError())\n   *   }\n   *   if (n2 < 0.5) {\n   *     yield* Effect.fail(new ValidationError())\n   *   }\n   *   return \"some result\"\n   * })\n   *\n   * //      ┌─── Effect<string, HttpError | ValidationError, never>\n   * //      ▼\n   * const recovered = program.pipe(\n   *   Effect.catchSome((error) => {\n   *     // Only handle HttpError errors\n   *     if (error._tag === \"HttpError\") {\n   *       return Option.some(Effect.succeed(\"Recovering from HttpError\"))\n   *     } else {\n   *       return Option.none()\n   *     }\n   *   })\n   * )\n   * ```\n   *\n   * @see {@link catchIf} for a version that allows you to recover from errors based on a predicate.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    pf: (e: NoInfer<E>) => Option.Option<Effect<A2, E2, R2>>\n  ): Effect<A | A2, E | E2, R | R2>\n} = core.catchSome\n\n/**\n * Recovers from specific causes using a provided partial function.\n *\n * @see {@link catchSome} for a version that allows you to recover from errors.\n * @see {@link catchSomeDefect} for a version that allows you to recover from defects.\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const catchSomeCause: {\n  /**\n   * Recovers from specific causes using a provided partial function.\n   *\n   * @see {@link catchSome} for a version that allows you to recover from errors.\n   * @see {@link catchSomeDefect} for a version that allows you to recover from defects.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <E, A2, E2, R2>(f: (cause: Cause.Cause<NoInfer<E>>) => Option.Option<Effect<A2, E2, R2>>): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E | E2, R2 | R>\n  /**\n   * Recovers from specific causes using a provided partial function.\n   *\n   * @see {@link catchSome} for a version that allows you to recover from errors.\n   * @see {@link catchSomeDefect} for a version that allows you to recover from defects.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (cause: Cause.Cause<NoInfer<E>>) => Option.Option<Effect<A2, E2, R2>>\n  ): Effect<A2 | A, E | E2, R2 | R>\n} = effect.catchSomeCause\n\n/**\n * Recovers from specific defects using a provided partial function.\n *\n * **Details**\n *\n * `catchSomeDefect` allows you to handle specific defects, which are\n * unexpected errors that can cause the program to stop. It uses a partial\n * function to catch only certain defects and ignores others. The function does\n * not handle expected errors (such as those caused by {@link fail}) or\n * interruptions in execution (like those caused by {@link interrupt}).\n *\n * This function provides a way to handle certain types of defects while\n * allowing others to propagate and cause failure in the program.\n *\n * **Note**: There is no sensible way to recover from defects. This method\n * should be used only at the boundary between Effect and an external system, to\n * transmit information on a defect for diagnostic or explanatory purposes.\n *\n * **How the Partial Function Works**\n *\n * The function provided to `catchSomeDefect` acts as a filter and a handler for defects:\n * - It receives the defect as an input.\n * - If the defect matches a specific condition (e.g., a certain error type), the function returns\n *   an `Option.some` containing the recovery logic.\n * - If the defect does not match, the function returns `Option.none`, allowing the defect to propagate.\n *\n * **Example** (Handling Specific Defects)\n *\n * ```ts\n * import { Effect, Cause, Option, Console } from \"effect\"\n *\n * // Simulating a runtime error\n * const task = Effect.dieMessage(\"Boom!\")\n *\n * const program = Effect.catchSomeDefect(task, (defect) => {\n *   if (Cause.isIllegalArgumentException(defect)) {\n *     return Option.some(\n *       Console.log(\n *         `Caught an IllegalArgumentException defect: ${defect.message}`\n *       )\n *     )\n *   }\n *   return Option.none()\n * })\n *\n * // Since we are only catching IllegalArgumentException\n * // we will get an Exit.Failure because we simulated a runtime error.\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: {\n * //     _id: 'Cause',\n * //     _tag: 'Die',\n * //     defect: { _tag: 'RuntimeException' }\n * //   }\n * // }\n * ```\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const catchSomeDefect: {\n  /**\n   * Recovers from specific defects using a provided partial function.\n   *\n   * **Details**\n   *\n   * `catchSomeDefect` allows you to handle specific defects, which are\n   * unexpected errors that can cause the program to stop. It uses a partial\n   * function to catch only certain defects and ignores others. The function does\n   * not handle expected errors (such as those caused by {@link fail}) or\n   * interruptions in execution (like those caused by {@link interrupt}).\n   *\n   * This function provides a way to handle certain types of defects while\n   * allowing others to propagate and cause failure in the program.\n   *\n   * **Note**: There is no sensible way to recover from defects. This method\n   * should be used only at the boundary between Effect and an external system, to\n   * transmit information on a defect for diagnostic or explanatory purposes.\n   *\n   * **How the Partial Function Works**\n   *\n   * The function provided to `catchSomeDefect` acts as a filter and a handler for defects:\n   * - It receives the defect as an input.\n   * - If the defect matches a specific condition (e.g., a certain error type), the function returns\n   *   an `Option.some` containing the recovery logic.\n   * - If the defect does not match, the function returns `Option.none`, allowing the defect to propagate.\n   *\n   * **Example** (Handling Specific Defects)\n   *\n   * ```ts\n   * import { Effect, Cause, Option, Console } from \"effect\"\n   *\n   * // Simulating a runtime error\n   * const task = Effect.dieMessage(\"Boom!\")\n   *\n   * const program = Effect.catchSomeDefect(task, (defect) => {\n   *   if (Cause.isIllegalArgumentException(defect)) {\n   *     return Option.some(\n   *       Console.log(\n   *         `Caught an IllegalArgumentException defect: ${defect.message}`\n   *       )\n   *     )\n   *   }\n   *   return Option.none()\n   * })\n   *\n   * // Since we are only catching IllegalArgumentException\n   * // we will get an Exit.Failure because we simulated a runtime error.\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: {\n   * //     _id: 'Cause',\n   * //     _tag: 'Die',\n   * //     defect: { _tag: 'RuntimeException' }\n   * //   }\n   * // }\n   * ```\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A2, E2, R2>(pf: (defect: unknown) => Option.Option<Effect<A2, E2, R2>>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  /**\n   * Recovers from specific defects using a provided partial function.\n   *\n   * **Details**\n   *\n   * `catchSomeDefect` allows you to handle specific defects, which are\n   * unexpected errors that can cause the program to stop. It uses a partial\n   * function to catch only certain defects and ignores others. The function does\n   * not handle expected errors (such as those caused by {@link fail}) or\n   * interruptions in execution (like those caused by {@link interrupt}).\n   *\n   * This function provides a way to handle certain types of defects while\n   * allowing others to propagate and cause failure in the program.\n   *\n   * **Note**: There is no sensible way to recover from defects. This method\n   * should be used only at the boundary between Effect and an external system, to\n   * transmit information on a defect for diagnostic or explanatory purposes.\n   *\n   * **How the Partial Function Works**\n   *\n   * The function provided to `catchSomeDefect` acts as a filter and a handler for defects:\n   * - It receives the defect as an input.\n   * - If the defect matches a specific condition (e.g., a certain error type), the function returns\n   *   an `Option.some` containing the recovery logic.\n   * - If the defect does not match, the function returns `Option.none`, allowing the defect to propagate.\n   *\n   * **Example** (Handling Specific Defects)\n   *\n   * ```ts\n   * import { Effect, Cause, Option, Console } from \"effect\"\n   *\n   * // Simulating a runtime error\n   * const task = Effect.dieMessage(\"Boom!\")\n   *\n   * const program = Effect.catchSomeDefect(task, (defect) => {\n   *   if (Cause.isIllegalArgumentException(defect)) {\n   *     return Option.some(\n   *       Console.log(\n   *         `Caught an IllegalArgumentException defect: ${defect.message}`\n   *       )\n   *     )\n   *   }\n   *   return Option.none()\n   * })\n   *\n   * // Since we are only catching IllegalArgumentException\n   * // we will get an Exit.Failure because we simulated a runtime error.\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: {\n   * //     _id: 'Cause',\n   * //     _tag: 'Die',\n   * //     defect: { _tag: 'RuntimeException' }\n   * //   }\n   * // }\n   * ```\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    pf: (defect: unknown) => Option.Option<Effect<A2, E2, R2>>\n  ): Effect<A | A2, E | E2, R | R2>\n} = effect.catchSomeDefect\n\n/**\n * Catches and handles specific errors by their `_tag` field, which is used as a\n * discriminator.\n *\n * **When to Use**\n *\n * `catchTag` is useful when your errors are tagged with a readonly `_tag` field\n * that identifies the error type. You can use this function to handle specific\n * error types by matching the `_tag` value. This allows for precise error\n * handling, ensuring that only specific errors are caught and handled.\n *\n * The error type must have a readonly `_tag` field to use `catchTag`. This\n * field is used to identify and match errors.\n *\n * **Example** (Handling Errors by Tag)\n *\n * ```ts\n * import { Effect, Random } from \"effect\"\n *\n * class HttpError {\n *   readonly _tag = \"HttpError\"\n * }\n *\n * class ValidationError {\n *   readonly _tag = \"ValidationError\"\n * }\n *\n * //      ┌─── Effect<string, HttpError | ValidationError, never>\n * //      ▼\n * const program = Effect.gen(function* () {\n *   const n1 = yield* Random.next\n *   const n2 = yield* Random.next\n *   if (n1 < 0.5) {\n *     yield* Effect.fail(new HttpError())\n *   }\n *   if (n2 < 0.5) {\n *     yield* Effect.fail(new ValidationError())\n *   }\n *   return \"some result\"\n * })\n *\n * //      ┌─── Effect<string, ValidationError, never>\n * //      ▼\n * const recovered = program.pipe(\n *   // Only handle HttpError errors\n *   Effect.catchTag(\"HttpError\", (_HttpError) =>\n *     Effect.succeed(\"Recovering from HttpError\")\n *   )\n * )\n * ```\n *\n * @see {@link catchTags} for a version that allows you to handle multiple error\n * types at once.\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const catchTag: {\n  /**\n   * Catches and handles specific errors by their `_tag` field, which is used as a\n   * discriminator.\n   *\n   * **When to Use**\n   *\n   * `catchTag` is useful when your errors are tagged with a readonly `_tag` field\n   * that identifies the error type. You can use this function to handle specific\n   * error types by matching the `_tag` value. This allows for precise error\n   * handling, ensuring that only specific errors are caught and handled.\n   *\n   * The error type must have a readonly `_tag` field to use `catchTag`. This\n   * field is used to identify and match errors.\n   *\n   * **Example** (Handling Errors by Tag)\n   *\n   * ```ts\n   * import { Effect, Random } from \"effect\"\n   *\n   * class HttpError {\n   *   readonly _tag = \"HttpError\"\n   * }\n   *\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   * }\n   *\n   * //      ┌─── Effect<string, HttpError | ValidationError, never>\n   * //      ▼\n   * const program = Effect.gen(function* () {\n   *   const n1 = yield* Random.next\n   *   const n2 = yield* Random.next\n   *   if (n1 < 0.5) {\n   *     yield* Effect.fail(new HttpError())\n   *   }\n   *   if (n2 < 0.5) {\n   *     yield* Effect.fail(new ValidationError())\n   *   }\n   *   return \"some result\"\n   * })\n   *\n   * //      ┌─── Effect<string, ValidationError, never>\n   * //      ▼\n   * const recovered = program.pipe(\n   *   // Only handle HttpError errors\n   *   Effect.catchTag(\"HttpError\", (_HttpError) =>\n   *     Effect.succeed(\"Recovering from HttpError\")\n   *   )\n   * )\n   * ```\n   *\n   * @see {@link catchTags} for a version that allows you to handle multiple error\n   * types at once.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <E, const K extends RA.NonEmptyReadonlyArray<E extends { _tag: string } ? E[\"_tag\"] : never>, A1, E1, R1>(\n    ...args: [...tags: K, f: (e: Extract<NoInfer<E>, { _tag: K[number] }>) => Effect<A1, E1, R1>]\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A | A1, Exclude<E, { _tag: K[number] }> | E1, R | R1>\n  /**\n   * Catches and handles specific errors by their `_tag` field, which is used as a\n   * discriminator.\n   *\n   * **When to Use**\n   *\n   * `catchTag` is useful when your errors are tagged with a readonly `_tag` field\n   * that identifies the error type. You can use this function to handle specific\n   * error types by matching the `_tag` value. This allows for precise error\n   * handling, ensuring that only specific errors are caught and handled.\n   *\n   * The error type must have a readonly `_tag` field to use `catchTag`. This\n   * field is used to identify and match errors.\n   *\n   * **Example** (Handling Errors by Tag)\n   *\n   * ```ts\n   * import { Effect, Random } from \"effect\"\n   *\n   * class HttpError {\n   *   readonly _tag = \"HttpError\"\n   * }\n   *\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   * }\n   *\n   * //      ┌─── Effect<string, HttpError | ValidationError, never>\n   * //      ▼\n   * const program = Effect.gen(function* () {\n   *   const n1 = yield* Random.next\n   *   const n2 = yield* Random.next\n   *   if (n1 < 0.5) {\n   *     yield* Effect.fail(new HttpError())\n   *   }\n   *   if (n2 < 0.5) {\n   *     yield* Effect.fail(new ValidationError())\n   *   }\n   *   return \"some result\"\n   * })\n   *\n   * //      ┌─── Effect<string, ValidationError, never>\n   * //      ▼\n   * const recovered = program.pipe(\n   *   // Only handle HttpError errors\n   *   Effect.catchTag(\"HttpError\", (_HttpError) =>\n   *     Effect.succeed(\"Recovering from HttpError\")\n   *   )\n   * )\n   * ```\n   *\n   * @see {@link catchTags} for a version that allows you to handle multiple error\n   * types at once.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, E, R, const K extends RA.NonEmptyReadonlyArray<E extends { _tag: string } ? E[\"_tag\"] : never>, A1, E1, R1>(\n    self: Effect<A, E, R>,\n    ...args: [...tags: K, f: (e: Extract<NoInfer<E>, { _tag: K[number] }>) => Effect<A1, E1, R1>]\n  ): Effect<A | A1, Exclude<E, { _tag: K[number] }> | E1, R | R1>\n} = effect.catchTag\n\n/**\n * Handles multiple errors in a single block of code using their `_tag` field.\n *\n * **When to Use**\n *\n * `catchTags` is a convenient way to handle multiple error types at\n * once. Instead of using {@link catchTag} multiple times, you can pass an\n * object where each key is an error type's `_tag`, and the value is the handler\n * for that specific error. This allows you to catch and recover from multiple\n * error types in a single call.\n *\n * The error type must have a readonly `_tag` field to use `catchTag`. This\n * field is used to identify and match errors.\n *\n * **Example** (Handling Multiple Tagged Error Types at Once)\n *\n * ```ts\n * import { Effect, Random } from \"effect\"\n *\n * class HttpError {\n *   readonly _tag = \"HttpError\"\n * }\n *\n * class ValidationError {\n *   readonly _tag = \"ValidationError\"\n * }\n *\n * //      ┌─── Effect<string, HttpError | ValidationError, never>\n * //      ▼\n * const program = Effect.gen(function* () {\n *   const n1 = yield* Random.next\n *   const n2 = yield* Random.next\n *   if (n1 < 0.5) {\n *     yield* Effect.fail(new HttpError())\n *   }\n *   if (n2 < 0.5) {\n *     yield* Effect.fail(new ValidationError())\n *   }\n *   return \"some result\"\n * })\n *\n * //      ┌─── Effect<string, never, never>\n * //      ▼\n * const recovered = program.pipe(\n *   Effect.catchTags({\n *     HttpError: (_HttpError) =>\n *       Effect.succeed(`Recovering from HttpError`),\n *     ValidationError: (_ValidationError) =>\n *       Effect.succeed(`Recovering from ValidationError`)\n *   })\n * )\n * ```\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const catchTags: {\n  /**\n   * Handles multiple errors in a single block of code using their `_tag` field.\n   *\n   * **When to Use**\n   *\n   * `catchTags` is a convenient way to handle multiple error types at\n   * once. Instead of using {@link catchTag} multiple times, you can pass an\n   * object where each key is an error type's `_tag`, and the value is the handler\n   * for that specific error. This allows you to catch and recover from multiple\n   * error types in a single call.\n   *\n   * The error type must have a readonly `_tag` field to use `catchTag`. This\n   * field is used to identify and match errors.\n   *\n   * **Example** (Handling Multiple Tagged Error Types at Once)\n   *\n   * ```ts\n   * import { Effect, Random } from \"effect\"\n   *\n   * class HttpError {\n   *   readonly _tag = \"HttpError\"\n   * }\n   *\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   * }\n   *\n   * //      ┌─── Effect<string, HttpError | ValidationError, never>\n   * //      ▼\n   * const program = Effect.gen(function* () {\n   *   const n1 = yield* Random.next\n   *   const n2 = yield* Random.next\n   *   if (n1 < 0.5) {\n   *     yield* Effect.fail(new HttpError())\n   *   }\n   *   if (n2 < 0.5) {\n   *     yield* Effect.fail(new ValidationError())\n   *   }\n   *   return \"some result\"\n   * })\n   *\n   * //      ┌─── Effect<string, never, never>\n   * //      ▼\n   * const recovered = program.pipe(\n   *   Effect.catchTags({\n   *     HttpError: (_HttpError) =>\n   *       Effect.succeed(`Recovering from HttpError`),\n   *     ValidationError: (_ValidationError) =>\n   *       Effect.succeed(`Recovering from ValidationError`)\n   *   })\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <\n    E,\n    Cases extends\n      & { [K in Extract<E, { _tag: string }>[\"_tag\"]]+?: ((error: Extract<E, { _tag: K }>) => Effect<any, any, any>) }\n      & (unknown extends E ? {} : { [K in Exclude<keyof Cases, Extract<E, { _tag: string }>[\"_tag\"]>]: never })\n  >(cases: Cases): <A, R>(\n    self: Effect<A, E, R>\n  ) => Effect<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<infer A, any, any> ? A : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, infer E, any> ? E : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, any, infer R> ? R : never\n    }[keyof Cases]\n  >\n  /**\n   * Handles multiple errors in a single block of code using their `_tag` field.\n   *\n   * **When to Use**\n   *\n   * `catchTags` is a convenient way to handle multiple error types at\n   * once. Instead of using {@link catchTag} multiple times, you can pass an\n   * object where each key is an error type's `_tag`, and the value is the handler\n   * for that specific error. This allows you to catch and recover from multiple\n   * error types in a single call.\n   *\n   * The error type must have a readonly `_tag` field to use `catchTag`. This\n   * field is used to identify and match errors.\n   *\n   * **Example** (Handling Multiple Tagged Error Types at Once)\n   *\n   * ```ts\n   * import { Effect, Random } from \"effect\"\n   *\n   * class HttpError {\n   *   readonly _tag = \"HttpError\"\n   * }\n   *\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   * }\n   *\n   * //      ┌─── Effect<string, HttpError | ValidationError, never>\n   * //      ▼\n   * const program = Effect.gen(function* () {\n   *   const n1 = yield* Random.next\n   *   const n2 = yield* Random.next\n   *   if (n1 < 0.5) {\n   *     yield* Effect.fail(new HttpError())\n   *   }\n   *   if (n2 < 0.5) {\n   *     yield* Effect.fail(new ValidationError())\n   *   }\n   *   return \"some result\"\n   * })\n   *\n   * //      ┌─── Effect<string, never, never>\n   * //      ▼\n   * const recovered = program.pipe(\n   *   Effect.catchTags({\n   *     HttpError: (_HttpError) =>\n   *       Effect.succeed(`Recovering from HttpError`),\n   *     ValidationError: (_ValidationError) =>\n   *       Effect.succeed(`Recovering from ValidationError`)\n   *   })\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <\n    R,\n    E,\n    A,\n    Cases extends\n      & { [K in Extract<E, { _tag: string }>[\"_tag\"]]+?: ((error: Extract<E, { _tag: K }>) => Effect<any, any, any>) }\n      & (unknown extends E ? {} : { [K in Exclude<keyof Cases, Extract<E, { _tag: string }>[\"_tag\"]>]: never })\n  >(self: Effect<A, E, R>, cases: Cases): Effect<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<infer A, any, any> ? A : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, infer E, any> ? E : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, any, infer R> ? R : never\n    }[keyof Cases]\n  >\n} = effect.catchTags\n\n/**\n * Retrieves the cause of a failure in an effect.\n *\n * **Details**\n *\n * This function allows you to expose the detailed cause of an effect, which\n * includes a more precise representation of failures, such as error messages\n * and defects.\n *\n * **When to Use**\n *\n * This function is helpful when you need to inspect the cause of a failure in\n * an effect, giving you more information than just the error message. It can be\n * used to log, handle, or analyze failures in more detail, including\n * distinguishing between different types of defects (e.g., runtime exceptions,\n * interruptions, etc.).\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * //      ┌─── Effect<number, string, never>\n * //      ▼\n * const program = Effect.fail(\"Oh uh!\").pipe(Effect.as(2))\n *\n * //      ┌─── Effect<void, never, never>\n * //      ▼\n * const recovered = Effect.gen(function* () {\n *   const cause = yield* Effect.cause(program)\n *   yield* Console.log(cause)\n * })\n * ```\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const cause: <A, E, R>(self: Effect<A, E, R>) => Effect<Cause.Cause<E>, never, R> = effect.cause\n\n/**\n * Runs an effect repeatedly until it succeeds, ignoring errors.\n *\n * **Details**\n *\n * This function takes an effect and runs it repeatedly until the effect\n * successfully completes. If the effect fails, it will ignore the error and\n * retry the operation. This is useful when you need to perform a task that may\n * fail occasionally, but you want to keep trying until it eventually succeeds.\n * It works by repeatedly executing the effect until it no longer throws an\n * error.\n *\n * **When to Use**\n *\n * Use this function when you want to retry an operation multiple times until it\n * succeeds. It is helpful in cases where the operation may fail temporarily\n * (e.g., a network request), and you want to keep trying without handling or\n * worrying about the errors.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * let counter = 0\n *\n * const effect = Effect.try(() => {\n *   counter++\n *   if (counter < 3) {\n *     console.log(\"running effect\")\n *     throw new Error(\"error\")\n *   } else {\n *     console.log(\"effect done\")\n *     return \"some result\"\n *   }\n * })\n *\n * const program = Effect.eventually(effect)\n *\n * Effect.runPromise(program).then(console.log)\n * // Output:\n * // running effect\n * // running effect\n * // effect done\n * // some result\n * ```\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const eventually: <A, E, R>(self: Effect<A, E, R>) => Effect<A, never, R> = effect.eventually\n\n/**\n * Discards both the success and failure values of an effect.\n *\n * **When to Use**\n *\n * `ignore` allows you to run an effect without caring about its result, whether\n * it succeeds or fails. This is useful when you only care about the side\n * effects of the effect and do not need to handle or process its outcome.\n *\n * **Example** (Using Effect.ignore to Discard Values)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * //      ┌─── Effect<number, string, never>\n * //      ▼\n * const task = Effect.fail(\"Uh oh!\").pipe(Effect.as(5))\n *\n * //      ┌─── Effect<void, never, never>\n * //      ▼\n * const program = Effect.ignore(task)\n * ```\n *\n * @see {@link ignoreLogged} to log failures while ignoring them.\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const ignore: <A, E, R>(self: Effect<A, E, R>) => Effect<void, never, R> = effect.ignore\n\n/**\n * Ignores the result of an effect but logs any failures.\n *\n * **Details**\n *\n * This function takes an effect and returns a new effect that ignores whether\n * the original effect succeeds or fails. However, if the effect fails, it will\n * log the failure at the Debug level, so you can keep track of any issues that\n * arise.\n *\n * **When to Use**\n *\n * This is useful in scenarios where you want to continue with your program\n * regardless of the result of the effect, but you still want to be aware of\n * potential failures that may need attention later.\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const ignoreLogged: <A, E, R>(self: Effect<A, E, R>) => Effect<void, never, R> = effect.ignoreLogged\n\n/**\n * Combines all errors from concurrent operations into a single error.\n *\n * **Details**\n *\n * This function is used when you have multiple operations running at the same\n * time, and you want to capture all the errors that occur across those\n * operations. Instead of handling each error separately, it combines all the\n * errors into one unified error.\n *\n * **When to Use**\n *\n * When using this function, any errors that occur in the concurrently running\n * operations will be grouped together into a single error. This helps simplify\n * error handling in cases where you don't need to differentiate between each\n * failure, but simply want to know that multiple failures occurred.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const fail1 = Effect.fail(\"Oh uh!\")\n * const fail2 = Effect.fail(\"Oh no!\")\n * const die = Effect.dieMessage(\"Boom!\")\n *\n * // Run all effects concurrently and capture all errors\n * const program = Effect.all([fail1, fail2, die], {\n *   concurrency: \"unbounded\"\n * }).pipe(Effect.asVoid, Effect.parallelErrors)\n *\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: { _id: 'Cause', _tag: 'Fail', failure: [ 'Oh uh!', 'Oh no!' ] }\n * // }\n * ```\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const parallelErrors: <A, E, R>(self: Effect<A, E, R>) => Effect<A, Array<E>, R> = effect.parallelErrors\n\n/**\n * Transforms an effect to expose detailed error causes.\n *\n * **Details**\n *\n * This function enhances an effect by providing detailed information about any\n * error, defect, or interruption that may occur during its execution. It\n * modifies the error channel of the effect so that it includes a full cause of\n * the failure, wrapped in a `Cause<E>` type.\n *\n * After applying this function, you can use operators like {@link catchAll} and\n * {@link catchTags} to handle specific types of errors.\n *\n * If you no longer need the detailed cause information, you can revert the\n * changes using {@link unsandbox} to return to the original error-handling\n * behavior.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * //      ┌─── Effect<string, Error, never>\n * //      ▼\n * const task = Effect.fail(new Error(\"Oh uh!\")).pipe(\n *   Effect.as(\"primary result\")\n * )\n *\n * //      ┌─── Effect<string, Cause<Error>, never>\n * //      ▼\n * const sandboxed = Effect.sandbox(task)\n *\n * const program = Effect.catchTags(sandboxed, {\n *   Die: (cause) =>\n *     Console.log(`Caught a defect: ${cause.defect}`).pipe(\n *       Effect.as(\"fallback result on defect\")\n *     ),\n *   Interrupt: (cause) =>\n *     Console.log(`Caught a defect: ${cause.fiberId}`).pipe(\n *       Effect.as(\"fallback result on fiber interruption\")\n *     ),\n *   Fail: (cause) =>\n *     Console.log(`Caught a defect: ${cause.error}`).pipe(\n *       Effect.as(\"fallback result on failure\")\n *     )\n * })\n *\n * // Restore the original error handling with unsandbox\n * const main = Effect.unsandbox(program)\n *\n * Effect.runPromise(main).then(console.log)\n * // Output:\n * // Caught a defect: Oh uh!\n * // fallback result on failure\n * ```\n *\n * @see {@link unsandbox} to restore the original error handling.\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const sandbox: <A, E, R>(self: Effect<A, E, R>) => Effect<A, Cause.Cause<E>, R> = effect.sandbox\n\n/**\n * @since 2.0.0\n * @category Error handling\n */\nexport declare namespace Retry {\n  /**\n   * @since 2.0.0\n   * @category Error handling\n   */\n  export type Return<R, E, A, O extends NoExcessProperties<Options<E>, O>> = Effect<\n    A,\n    | (O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer _R> } ? E\n      : O extends { until: Refinement<E, infer E2> } ? E2\n      : E)\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never),\n    | R\n    | (O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer R> } ? R : never)\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n  > extends infer Z ? Z : never\n\n  /**\n   * @since 2.0.0\n   * @category Error handling\n   */\n  export interface Options<E> {\n    while?: ((error: E) => boolean | Effect<boolean, any, any>) | undefined\n    until?: ((error: E) => boolean | Effect<boolean, any, any>) | undefined\n    times?: number | undefined\n    schedule?: Schedule.Schedule<any, E, any> | undefined\n  }\n}\n\n/**\n * Retries a failing effect based on a defined retry policy.\n *\n * **Details**\n *\n * The `Effect.retry` function takes an effect and a {@link Schedule} policy,\n * and will automatically retry the effect if it fails, following the rules of\n * the policy.\n *\n * If the effect ultimately succeeds, the result will be returned.\n *\n * If the maximum retries are exhausted and the effect still fails, the failure\n * is propagated.\n *\n * **When to Use**\n *\n * This can be useful when dealing with intermittent failures, such as network\n * issues or temporary resource unavailability. By defining a retry policy, you\n * can control the number of retries, the delay between them, and when to stop\n * retrying.\n *\n * **Example** (Retrying with a Fixed Delay)\n *\n * ```ts\n * import { Effect, Schedule } from \"effect\"\n *\n * let count = 0\n *\n * // Simulates an effect with possible failures\n * const task = Effect.async<string, Error>((resume) => {\n *   if (count <= 2) {\n *     count++\n *     console.log(\"failure\")\n *     resume(Effect.fail(new Error()))\n *   } else {\n *     console.log(\"success\")\n *     resume(Effect.succeed(\"yay!\"))\n *   }\n * })\n *\n * // Define a repetition policy using a fixed delay between retries\n * const policy = Schedule.fixed(\"100 millis\")\n *\n * const repeated = Effect.retry(task, policy)\n *\n * Effect.runPromise(repeated).then(console.log)\n * // Output:\n * // failure\n * // failure\n * // failure\n * // success\n * // yay!\n * ```\n *\n * **Example** (Retrying a Task up to 5 times)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * let count = 0\n *\n * // Simulates an effect with possible failures\n * const task = Effect.async<string, Error>((resume) => {\n *   if (count <= 2) {\n *     count++\n *     console.log(\"failure\")\n *     resume(Effect.fail(new Error()))\n *   } else {\n *     console.log(\"success\")\n *     resume(Effect.succeed(\"yay!\"))\n *   }\n * })\n *\n * // Retry the task up to 5 times\n * Effect.runPromise(Effect.retry(task, { times: 5 })).then(console.log)\n * // Output:\n * // failure\n * // failure\n * // failure\n * // success\n * ```\n *\n * **Example** (Retrying Until a Specific Condition is Met)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * let count = 0\n *\n * // Define an effect that simulates varying error on each invocation\n * const action = Effect.failSync(() => {\n *   console.log(`Action called ${++count} time(s)`)\n *   return `Error ${count}`\n * })\n *\n * // Retry the action until a specific condition is met\n * const program = Effect.retry(action, {\n *   until: (err) => err === \"Error 3\"\n * })\n *\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // Action called 1 time(s)\n * // Action called 2 time(s)\n * // Action called 3 time(s)\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: { _id: 'Cause', _tag: 'Fail', failure: 'Error 3' }\n * // }\n * ```\n *\n * @see {@link retryOrElse} for a version that allows you to run a fallback.\n * @see {@link repeat} if your retry condition is based on successful outcomes rather than errors.\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const retry: {\n  /**\n   * Retries a failing effect based on a defined retry policy.\n   *\n   * **Details**\n   *\n   * The `Effect.retry` function takes an effect and a {@link Schedule} policy,\n   * and will automatically retry the effect if it fails, following the rules of\n   * the policy.\n   *\n   * If the effect ultimately succeeds, the result will be returned.\n   *\n   * If the maximum retries are exhausted and the effect still fails, the failure\n   * is propagated.\n   *\n   * **When to Use**\n   *\n   * This can be useful when dealing with intermittent failures, such as network\n   * issues or temporary resource unavailability. By defining a retry policy, you\n   * can control the number of retries, the delay between them, and when to stop\n   * retrying.\n   *\n   * **Example** (Retrying with a Fixed Delay)\n   *\n   * ```ts\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Simulates an effect with possible failures\n   * const task = Effect.async<string, Error>((resume) => {\n   *   if (count <= 2) {\n   *     count++\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(new Error()))\n   *   } else {\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * // Define a repetition policy using a fixed delay between retries\n   * const policy = Schedule.fixed(\"100 millis\")\n   *\n   * const repeated = Effect.retry(task, policy)\n   *\n   * Effect.runPromise(repeated).then(console.log)\n   * // Output:\n   * // failure\n   * // failure\n   * // failure\n   * // success\n   * // yay!\n   * ```\n   *\n   * **Example** (Retrying a Task up to 5 times)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Simulates an effect with possible failures\n   * const task = Effect.async<string, Error>((resume) => {\n   *   if (count <= 2) {\n   *     count++\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(new Error()))\n   *   } else {\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * // Retry the task up to 5 times\n   * Effect.runPromise(Effect.retry(task, { times: 5 })).then(console.log)\n   * // Output:\n   * // failure\n   * // failure\n   * // failure\n   * // success\n   * ```\n   *\n   * **Example** (Retrying Until a Specific Condition is Met)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an effect that simulates varying error on each invocation\n   * const action = Effect.failSync(() => {\n   *   console.log(`Action called ${++count} time(s)`)\n   *   return `Error ${count}`\n   * })\n   *\n   * // Retry the action until a specific condition is met\n   * const program = Effect.retry(action, {\n   *   until: (err) => err === \"Error 3\"\n   * })\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // Action called 1 time(s)\n   * // Action called 2 time(s)\n   * // Action called 3 time(s)\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: { _id: 'Cause', _tag: 'Fail', failure: 'Error 3' }\n   * // }\n   * ```\n   *\n   * @see {@link retryOrElse} for a version that allows you to run a fallback.\n   * @see {@link repeat} if your retry condition is based on successful outcomes rather than errors.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <E, O extends NoExcessProperties<Retry.Options<E>, O>>(options: O): <A, R>(self: Effect<A, E, R>) => Retry.Return<R, E, A, O>\n  /**\n   * Retries a failing effect based on a defined retry policy.\n   *\n   * **Details**\n   *\n   * The `Effect.retry` function takes an effect and a {@link Schedule} policy,\n   * and will automatically retry the effect if it fails, following the rules of\n   * the policy.\n   *\n   * If the effect ultimately succeeds, the result will be returned.\n   *\n   * If the maximum retries are exhausted and the effect still fails, the failure\n   * is propagated.\n   *\n   * **When to Use**\n   *\n   * This can be useful when dealing with intermittent failures, such as network\n   * issues or temporary resource unavailability. By defining a retry policy, you\n   * can control the number of retries, the delay between them, and when to stop\n   * retrying.\n   *\n   * **Example** (Retrying with a Fixed Delay)\n   *\n   * ```ts\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Simulates an effect with possible failures\n   * const task = Effect.async<string, Error>((resume) => {\n   *   if (count <= 2) {\n   *     count++\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(new Error()))\n   *   } else {\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * // Define a repetition policy using a fixed delay between retries\n   * const policy = Schedule.fixed(\"100 millis\")\n   *\n   * const repeated = Effect.retry(task, policy)\n   *\n   * Effect.runPromise(repeated).then(console.log)\n   * // Output:\n   * // failure\n   * // failure\n   * // failure\n   * // success\n   * // yay!\n   * ```\n   *\n   * **Example** (Retrying a Task up to 5 times)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Simulates an effect with possible failures\n   * const task = Effect.async<string, Error>((resume) => {\n   *   if (count <= 2) {\n   *     count++\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(new Error()))\n   *   } else {\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * // Retry the task up to 5 times\n   * Effect.runPromise(Effect.retry(task, { times: 5 })).then(console.log)\n   * // Output:\n   * // failure\n   * // failure\n   * // failure\n   * // success\n   * ```\n   *\n   * **Example** (Retrying Until a Specific Condition is Met)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an effect that simulates varying error on each invocation\n   * const action = Effect.failSync(() => {\n   *   console.log(`Action called ${++count} time(s)`)\n   *   return `Error ${count}`\n   * })\n   *\n   * // Retry the action until a specific condition is met\n   * const program = Effect.retry(action, {\n   *   until: (err) => err === \"Error 3\"\n   * })\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // Action called 1 time(s)\n   * // Action called 2 time(s)\n   * // Action called 3 time(s)\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: { _id: 'Cause', _tag: 'Fail', failure: 'Error 3' }\n   * // }\n   * ```\n   *\n   * @see {@link retryOrElse} for a version that allows you to run a fallback.\n   * @see {@link repeat} if your retry condition is based on successful outcomes rather than errors.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <B, E, R1>(policy: Schedule.Schedule<B, NoInfer<E>, R1>): <A, R>(self: Effect<A, E, R>) => Effect<A, E, R1 | R>\n  /**\n   * Retries a failing effect based on a defined retry policy.\n   *\n   * **Details**\n   *\n   * The `Effect.retry` function takes an effect and a {@link Schedule} policy,\n   * and will automatically retry the effect if it fails, following the rules of\n   * the policy.\n   *\n   * If the effect ultimately succeeds, the result will be returned.\n   *\n   * If the maximum retries are exhausted and the effect still fails, the failure\n   * is propagated.\n   *\n   * **When to Use**\n   *\n   * This can be useful when dealing with intermittent failures, such as network\n   * issues or temporary resource unavailability. By defining a retry policy, you\n   * can control the number of retries, the delay between them, and when to stop\n   * retrying.\n   *\n   * **Example** (Retrying with a Fixed Delay)\n   *\n   * ```ts\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Simulates an effect with possible failures\n   * const task = Effect.async<string, Error>((resume) => {\n   *   if (count <= 2) {\n   *     count++\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(new Error()))\n   *   } else {\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * // Define a repetition policy using a fixed delay between retries\n   * const policy = Schedule.fixed(\"100 millis\")\n   *\n   * const repeated = Effect.retry(task, policy)\n   *\n   * Effect.runPromise(repeated).then(console.log)\n   * // Output:\n   * // failure\n   * // failure\n   * // failure\n   * // success\n   * // yay!\n   * ```\n   *\n   * **Example** (Retrying a Task up to 5 times)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Simulates an effect with possible failures\n   * const task = Effect.async<string, Error>((resume) => {\n   *   if (count <= 2) {\n   *     count++\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(new Error()))\n   *   } else {\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * // Retry the task up to 5 times\n   * Effect.runPromise(Effect.retry(task, { times: 5 })).then(console.log)\n   * // Output:\n   * // failure\n   * // failure\n   * // failure\n   * // success\n   * ```\n   *\n   * **Example** (Retrying Until a Specific Condition is Met)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an effect that simulates varying error on each invocation\n   * const action = Effect.failSync(() => {\n   *   console.log(`Action called ${++count} time(s)`)\n   *   return `Error ${count}`\n   * })\n   *\n   * // Retry the action until a specific condition is met\n   * const program = Effect.retry(action, {\n   *   until: (err) => err === \"Error 3\"\n   * })\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // Action called 1 time(s)\n   * // Action called 2 time(s)\n   * // Action called 3 time(s)\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: { _id: 'Cause', _tag: 'Fail', failure: 'Error 3' }\n   * // }\n   * ```\n   *\n   * @see {@link retryOrElse} for a version that allows you to run a fallback.\n   * @see {@link repeat} if your retry condition is based on successful outcomes rather than errors.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, E, R, O extends NoExcessProperties<Retry.Options<E>, O>>(self: Effect<A, E, R>, options: O): Retry.Return<R, E, A, O>\n  /**\n   * Retries a failing effect based on a defined retry policy.\n   *\n   * **Details**\n   *\n   * The `Effect.retry` function takes an effect and a {@link Schedule} policy,\n   * and will automatically retry the effect if it fails, following the rules of\n   * the policy.\n   *\n   * If the effect ultimately succeeds, the result will be returned.\n   *\n   * If the maximum retries are exhausted and the effect still fails, the failure\n   * is propagated.\n   *\n   * **When to Use**\n   *\n   * This can be useful when dealing with intermittent failures, such as network\n   * issues or temporary resource unavailability. By defining a retry policy, you\n   * can control the number of retries, the delay between them, and when to stop\n   * retrying.\n   *\n   * **Example** (Retrying with a Fixed Delay)\n   *\n   * ```ts\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Simulates an effect with possible failures\n   * const task = Effect.async<string, Error>((resume) => {\n   *   if (count <= 2) {\n   *     count++\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(new Error()))\n   *   } else {\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * // Define a repetition policy using a fixed delay between retries\n   * const policy = Schedule.fixed(\"100 millis\")\n   *\n   * const repeated = Effect.retry(task, policy)\n   *\n   * Effect.runPromise(repeated).then(console.log)\n   * // Output:\n   * // failure\n   * // failure\n   * // failure\n   * // success\n   * // yay!\n   * ```\n   *\n   * **Example** (Retrying a Task up to 5 times)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Simulates an effect with possible failures\n   * const task = Effect.async<string, Error>((resume) => {\n   *   if (count <= 2) {\n   *     count++\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(new Error()))\n   *   } else {\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * // Retry the task up to 5 times\n   * Effect.runPromise(Effect.retry(task, { times: 5 })).then(console.log)\n   * // Output:\n   * // failure\n   * // failure\n   * // failure\n   * // success\n   * ```\n   *\n   * **Example** (Retrying Until a Specific Condition is Met)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an effect that simulates varying error on each invocation\n   * const action = Effect.failSync(() => {\n   *   console.log(`Action called ${++count} time(s)`)\n   *   return `Error ${count}`\n   * })\n   *\n   * // Retry the action until a specific condition is met\n   * const program = Effect.retry(action, {\n   *   until: (err) => err === \"Error 3\"\n   * })\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // Action called 1 time(s)\n   * // Action called 2 time(s)\n   * // Action called 3 time(s)\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: { _id: 'Cause', _tag: 'Fail', failure: 'Error 3' }\n   * // }\n   * ```\n   *\n   * @see {@link retryOrElse} for a version that allows you to run a fallback.\n   * @see {@link repeat} if your retry condition is based on successful outcomes rather than errors.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, E, R, B, R1>(self: Effect<A, E, R>, policy: Schedule.Schedule<B, NoInfer<E>, R1>): Effect<A, E, R1 | R>\n} = schedule_.retry_combined\n\n/**\n * Apply an `ExecutionPlan` to the effect, which allows you to fallback to\n * different resources in case of failure.\n *\n * @since 3.16.0\n * @category Error handling\n * @experimental\n */\nexport const withExecutionPlan: {\n  /**\n   * Apply an `ExecutionPlan` to the effect, which allows you to fallback to\n   * different resources in case of failure.\n   *\n   * @since 3.16.0\n   * @category Error handling\n   * @experimental\n   */\n  <Input, Provides, PlanE, PlanR>(\n    plan: ExecutionPlan<{ provides: Provides; input: Input; error: PlanE; requirements: PlanR }>\n  ): <A, E extends Input, R>(effect: Effect<A, E, R>) => Effect<A, E | PlanE, Exclude<R, Provides> | PlanR>\n  /**\n   * Apply an `ExecutionPlan` to the effect, which allows you to fallback to\n   * different resources in case of failure.\n   *\n   * @since 3.16.0\n   * @category Error handling\n   * @experimental\n   */\n  <A, E extends Input, R, Provides, Input, PlanE, PlanR>(\n    effect: Effect<A, E, R>,\n    plan: ExecutionPlan<{ provides: Provides; input: Input; error: PlanE; requirements: PlanR }>\n  ): Effect<A, E | PlanE, Exclude<R, Provides> | PlanR>\n} = internalExecutionPlan.withExecutionPlan\n\n/**\n * Retries a failing effect and runs a fallback effect if retries are exhausted.\n *\n * **Details**\n *\n * The `Effect.retryOrElse` function attempts to retry a failing effect multiple\n * times according to a defined {@link Schedule} policy.\n *\n * If the retries are exhausted and the effect still fails, it runs a fallback\n * effect instead.\n *\n * **When to Use**\n *\n * This function is useful when you want to handle failures gracefully by\n * specifying an alternative action after repeated failures.\n *\n * **Example** (Retrying with Fallback)\n *\n * ```ts\n * import { Effect, Schedule, Console } from \"effect\"\n *\n * let count = 0\n *\n * // Simulates an effect with possible failures\n * const task = Effect.async<string, Error>((resume) => {\n *   if (count <= 2) {\n *     count++\n *     console.log(\"failure\")\n *     resume(Effect.fail(new Error()))\n *   } else {\n *     console.log(\"success\")\n *     resume(Effect.succeed(\"yay!\"))\n *   }\n * })\n *\n * // Retry the task with a delay between retries and a maximum of 2 retries\n * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n *\n * // If all retries fail, run the fallback effect\n * const repeated = Effect.retryOrElse(\n *   task,\n *   policy,\n *   // fallback\n *   () => Console.log(\"orElse\").pipe(Effect.as(\"default value\"))\n * )\n *\n * Effect.runPromise(repeated).then(console.log)\n * // Output:\n * // failure\n * // failure\n * // failure\n * // orElse\n * // default value\n * ```\n *\n * @see {@link retry} for a version that does not run a fallback effect.\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const retryOrElse: {\n  /**\n   * Retries a failing effect and runs a fallback effect if retries are exhausted.\n   *\n   * **Details**\n   *\n   * The `Effect.retryOrElse` function attempts to retry a failing effect multiple\n   * times according to a defined {@link Schedule} policy.\n   *\n   * If the retries are exhausted and the effect still fails, it runs a fallback\n   * effect instead.\n   *\n   * **When to Use**\n   *\n   * This function is useful when you want to handle failures gracefully by\n   * specifying an alternative action after repeated failures.\n   *\n   * **Example** (Retrying with Fallback)\n   *\n   * ```ts\n   * import { Effect, Schedule, Console } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Simulates an effect with possible failures\n   * const task = Effect.async<string, Error>((resume) => {\n   *   if (count <= 2) {\n   *     count++\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(new Error()))\n   *   } else {\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * // Retry the task with a delay between retries and a maximum of 2 retries\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   *\n   * // If all retries fail, run the fallback effect\n   * const repeated = Effect.retryOrElse(\n   *   task,\n   *   policy,\n   *   // fallback\n   *   () => Console.log(\"orElse\").pipe(Effect.as(\"default value\"))\n   * )\n   *\n   * Effect.runPromise(repeated).then(console.log)\n   * // Output:\n   * // failure\n   * // failure\n   * // failure\n   * // orElse\n   * // default value\n   * ```\n   *\n   * @see {@link retry} for a version that does not run a fallback effect.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A1, E, R1, A2, E2, R2>(\n    policy: Schedule.Schedule<A1, NoInfer<E>, R1>,\n    orElse: (e: NoInfer<E>, out: A1) => Effect<A2, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R1 | R2 | R>\n  /**\n   * Retries a failing effect and runs a fallback effect if retries are exhausted.\n   *\n   * **Details**\n   *\n   * The `Effect.retryOrElse` function attempts to retry a failing effect multiple\n   * times according to a defined {@link Schedule} policy.\n   *\n   * If the retries are exhausted and the effect still fails, it runs a fallback\n   * effect instead.\n   *\n   * **When to Use**\n   *\n   * This function is useful when you want to handle failures gracefully by\n   * specifying an alternative action after repeated failures.\n   *\n   * **Example** (Retrying with Fallback)\n   *\n   * ```ts\n   * import { Effect, Schedule, Console } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Simulates an effect with possible failures\n   * const task = Effect.async<string, Error>((resume) => {\n   *   if (count <= 2) {\n   *     count++\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(new Error()))\n   *   } else {\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * // Retry the task with a delay between retries and a maximum of 2 retries\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   *\n   * // If all retries fail, run the fallback effect\n   * const repeated = Effect.retryOrElse(\n   *   task,\n   *   policy,\n   *   // fallback\n   *   () => Console.log(\"orElse\").pipe(Effect.as(\"default value\"))\n   * )\n   *\n   * Effect.runPromise(repeated).then(console.log)\n   * // Output:\n   * // failure\n   * // failure\n   * // failure\n   * // orElse\n   * // default value\n   * ```\n   *\n   * @see {@link retry} for a version that does not run a fallback effect.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, E, R, A1, R1, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    policy: Schedule.Schedule<A1, NoInfer<E>, R1>,\n    orElse: (e: NoInfer<E>, out: A1) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E2, R | R1 | R2>\n} = schedule_.retryOrElse_Effect\n\nconst try_: {\n  <A, E>(options: { readonly try: LazyArg<A>; readonly catch: (error: unknown) => E }): Effect<A, E>\n  <A>(thunk: LazyArg<A>): Effect<A, Cause.UnknownException>\n} = effect.try_\n\nexport {\n  /**\n   * Creates an `Effect` that represents a synchronous computation that might\n   * fail.\n   *\n   * **When to Use**\n   *\n   * In situations where you need to perform synchronous operations that might\n   * fail, such as parsing JSON, you can use the `try` constructor. This\n   * constructor is designed to handle operations that could throw exceptions by\n   * capturing those exceptions and transforming them into manageable errors.\n   *\n   * **Error Handling**\n   *\n   * There are two ways to handle errors with `try`:\n   *\n   * 1. If you don't provide a `catch` function, the error is caught and the\n   *    effect fails with an `UnknownException`.\n   * 2. If you provide a `catch` function, the error is caught and the `catch`\n   *    function maps it to an error of type `E`.\n   *\n   * **Example** (Safe JSON Parsing)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const parse = (input: string) =>\n   *   // This might throw an error if input is not valid JSON\n   *   Effect.try(() => JSON.parse(input))\n   *\n   * //      ┌─── Effect<any, UnknownException, never>\n   * //      ▼\n   * const program = parse(\"\")\n   *\n   * ```\n   *\n   * **Example** (Custom Error Handling)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const parse = (input: string) =>\n   *   Effect.try({\n   *     // JSON.parse may throw for bad input\n   *     try: () => JSON.parse(input),\n   *     // remap the error\n   *     catch: (unknown) => new Error(`something went wrong ${unknown}`)\n   *   })\n   *\n   * //      ┌─── Effect<any, Error, never>\n   * //      ▼\n   * const program = parse(\"\")\n   * ```\n   *\n   * @see {@link sync} if the effectful computation is synchronous and does not\n   * throw errors.\n   *\n   * @since 2.0.0\n   * @category Creating Effects\n   */\n  try_ as try\n}\n\n/**\n * Returns an effect that maps its success using the specified side-effecting\n * `try` function, converting any errors into typed failed effects using the\n * `catch` function.\n *\n * @see {@link tryPromise} for a version that works with asynchronous computations.\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const tryMap: {\n  /**\n   * Returns an effect that maps its success using the specified side-effecting\n   * `try` function, converting any errors into typed failed effects using the\n   * `catch` function.\n   *\n   * @see {@link tryPromise} for a version that works with asynchronous computations.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, B, E1>(\n    options: { readonly try: (a: A) => B; readonly catch: (error: unknown) => E1 }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E1 | E, R>\n  /**\n   * Returns an effect that maps its success using the specified side-effecting\n   * `try` function, converting any errors into typed failed effects using the\n   * `catch` function.\n   *\n   * @see {@link tryPromise} for a version that works with asynchronous computations.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, E, R, B, E1>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly try: (a: A) => B\n      readonly catch: (error: unknown) => E1\n    }\n  ): Effect<B, E | E1, R>\n} = effect.tryMap\n\n/**\n * Returns an effect that maps its success using the specified side-effecting\n * `try` function, converting any promise rejections into typed failed effects\n * using the `catch` function.\n *\n * An optional `AbortSignal` can be provided to allow for interruption of the\n * wrapped `Promise` API.\n *\n * @see {@link tryMap} for a version that works with synchronous computations.\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const tryMapPromise: {\n  /**\n   * Returns an effect that maps its success using the specified side-effecting\n   * `try` function, converting any promise rejections into typed failed effects\n   * using the `catch` function.\n   *\n   * An optional `AbortSignal` can be provided to allow for interruption of the\n   * wrapped `Promise` API.\n   *\n   * @see {@link tryMap} for a version that works with synchronous computations.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, B, E1>(\n    options: { readonly try: (a: A, signal: AbortSignal) => PromiseLike<B>; readonly catch: (error: unknown) => E1 }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E1 | E, R>\n  /**\n   * Returns an effect that maps its success using the specified side-effecting\n   * `try` function, converting any promise rejections into typed failed effects\n   * using the `catch` function.\n   *\n   * An optional `AbortSignal` can be provided to allow for interruption of the\n   * wrapped `Promise` API.\n   *\n   * @see {@link tryMap} for a version that works with synchronous computations.\n   *\n   * @since 2.0.0\n   * @category Error handling\n   */\n  <A, E, R, B, E1>(\n    self: Effect<A, E, R>,\n    options: { readonly try: (a: A, signal: AbortSignal) => PromiseLike<B>; readonly catch: (error: unknown) => E1 }\n  ): Effect<B, E | E1, R>\n} = effect.tryMapPromise\n\n/**\n * Creates an `Effect` that represents an asynchronous computation that might\n * fail.\n *\n * **When to Use**\n *\n * In situations where you need to perform asynchronous operations that might\n * fail, such as fetching data from an API, you can use the `tryPromise`\n * constructor. This constructor is designed to handle operations that could\n * throw exceptions by capturing those exceptions and transforming them into\n * manageable errors.\n *\n * **Error Handling**\n *\n * There are two ways to handle errors with `tryPromise`:\n *\n * 1. If you don't provide a `catch` function, the error is caught and the\n *    effect fails with an `UnknownException`.\n * 2. If you provide a `catch` function, the error is caught and the `catch`\n *    function maps it to an error of type `E`.\n *\n * **Interruptions**\n *\n * An optional `AbortSignal` can be provided to allow for interruption of the\n * wrapped `Promise` API.\n *\n * **Example** (Fetching a TODO Item)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const getTodo = (id: number) =>\n *   // Will catch any errors and propagate them as UnknownException\n *   Effect.tryPromise(() =>\n *     fetch(`https://jsonplaceholder.typicode.com/todos/${id}`)\n *   )\n *\n * //      ┌─── Effect<Response, UnknownException, never>\n * //      ▼\n * const program = getTodo(1)\n * ```\n *\n * **Example** (Custom Error Handling)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const getTodo = (id: number) =>\n *   Effect.tryPromise({\n *     try: () => fetch(`https://jsonplaceholder.typicode.com/todos/${id}`),\n *     // remap the error\n *     catch: (unknown) => new Error(`something went wrong ${unknown}`)\n *   })\n *\n * //      ┌─── Effect<Response, Error, never>\n * //      ▼\n * const program = getTodo(1)\n * ```\n *\n * @see {@link promise} if the effectful computation is asynchronous and does not throw errors.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const tryPromise: {\n  /**\n   * Creates an `Effect` that represents an asynchronous computation that might\n   * fail.\n   *\n   * **When to Use**\n   *\n   * In situations where you need to perform asynchronous operations that might\n   * fail, such as fetching data from an API, you can use the `tryPromise`\n   * constructor. This constructor is designed to handle operations that could\n   * throw exceptions by capturing those exceptions and transforming them into\n   * manageable errors.\n   *\n   * **Error Handling**\n   *\n   * There are two ways to handle errors with `tryPromise`:\n   *\n   * 1. If you don't provide a `catch` function, the error is caught and the\n   *    effect fails with an `UnknownException`.\n   * 2. If you provide a `catch` function, the error is caught and the `catch`\n   *    function maps it to an error of type `E`.\n   *\n   * **Interruptions**\n   *\n   * An optional `AbortSignal` can be provided to allow for interruption of the\n   * wrapped `Promise` API.\n   *\n   * **Example** (Fetching a TODO Item)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const getTodo = (id: number) =>\n   *   // Will catch any errors and propagate them as UnknownException\n   *   Effect.tryPromise(() =>\n   *     fetch(`https://jsonplaceholder.typicode.com/todos/${id}`)\n   *   )\n   *\n   * //      ┌─── Effect<Response, UnknownException, never>\n   * //      ▼\n   * const program = getTodo(1)\n   * ```\n   *\n   * **Example** (Custom Error Handling)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const getTodo = (id: number) =>\n   *   Effect.tryPromise({\n   *     try: () => fetch(`https://jsonplaceholder.typicode.com/todos/${id}`),\n   *     // remap the error\n   *     catch: (unknown) => new Error(`something went wrong ${unknown}`)\n   *   })\n   *\n   * //      ┌─── Effect<Response, Error, never>\n   * //      ▼\n   * const program = getTodo(1)\n   * ```\n   *\n   * @see {@link promise} if the effectful computation is asynchronous and does not throw errors.\n   *\n   * @since 2.0.0\n   * @category Creating Effects\n   */\n  <A, E>(\n    options: {\n      readonly try: (signal: AbortSignal) => PromiseLike<A>\n      readonly catch: (error: unknown) => E\n    }\n  ): Effect<A, E>\n  /**\n   * Creates an `Effect` that represents an asynchronous computation that might\n   * fail.\n   *\n   * **When to Use**\n   *\n   * In situations where you need to perform asynchronous operations that might\n   * fail, such as fetching data from an API, you can use the `tryPromise`\n   * constructor. This constructor is designed to handle operations that could\n   * throw exceptions by capturing those exceptions and transforming them into\n   * manageable errors.\n   *\n   * **Error Handling**\n   *\n   * There are two ways to handle errors with `tryPromise`:\n   *\n   * 1. If you don't provide a `catch` function, the error is caught and the\n   *    effect fails with an `UnknownException`.\n   * 2. If you provide a `catch` function, the error is caught and the `catch`\n   *    function maps it to an error of type `E`.\n   *\n   * **Interruptions**\n   *\n   * An optional `AbortSignal` can be provided to allow for interruption of the\n   * wrapped `Promise` API.\n   *\n   * **Example** (Fetching a TODO Item)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const getTodo = (id: number) =>\n   *   // Will catch any errors and propagate them as UnknownException\n   *   Effect.tryPromise(() =>\n   *     fetch(`https://jsonplaceholder.typicode.com/todos/${id}`)\n   *   )\n   *\n   * //      ┌─── Effect<Response, UnknownException, never>\n   * //      ▼\n   * const program = getTodo(1)\n   * ```\n   *\n   * **Example** (Custom Error Handling)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const getTodo = (id: number) =>\n   *   Effect.tryPromise({\n   *     try: () => fetch(`https://jsonplaceholder.typicode.com/todos/${id}`),\n   *     // remap the error\n   *     catch: (unknown) => new Error(`something went wrong ${unknown}`)\n   *   })\n   *\n   * //      ┌─── Effect<Response, Error, never>\n   * //      ▼\n   * const program = getTodo(1)\n   * ```\n   *\n   * @see {@link promise} if the effectful computation is asynchronous and does not throw errors.\n   *\n   * @since 2.0.0\n   * @category Creating Effects\n   */\n  <A>(evaluate: (signal: AbortSignal) => PromiseLike<A>): Effect<A, Cause.UnknownException>\n} = effect.tryPromise\n\n/**\n * The `unsandbox` function is used to revert an effect that has been\n * sandboxed by {@link sandbox}. When you apply `unsandbox`, the\n * effect's error channel is restored to its original state, without the\n * detailed `Cause<E>` information. This means that any underlying causes of\n * errors, defects, or fiber interruptions are no longer exposed in the error\n * channel.\n *\n * This function is useful when you want to remove the detailed error tracking\n * provided by `sandbox` and return to the standard error handling for\n * your effect. Once unsandboxed, the effect behaves as if `sandbox` was\n * never applied.\n *\n * @see {@link sandbox} to expose the full cause of failures, defects, or interruptions.\n *\n * @since 2.0.0\n * @category Error handling\n */\nexport const unsandbox: <A, E, R>(self: Effect<A, Cause.Cause<E>, R>) => Effect<A, E, R> = effect.unsandbox\n\n/**\n * Allows interruption of the current fiber, even in uninterruptible regions.\n *\n * **Details**\n *\n * This effect checks whether any other fibers are attempting to interrupt the\n * current fiber. If so, it allows the current fiber to perform a\n * self-interruption.\n *\n * **When to Use**\n *\n * This is useful in situations where you want to allow interruption to happen\n * even in regions of the code that are normally uninterruptible.\n *\n * @since 2.0.0\n * @category Interruption\n */\nexport const allowInterrupt: Effect<void> = effect.allowInterrupt\n\n/**\n * Checks if interruption is allowed and executes a callback accordingly.\n *\n * **Details**\n *\n * This function checks the current interrupt status of the running fiber. It\n * then calls the provided callback, passing a boolean indicating whether\n * interruption is allowed.\n *\n * **When to Use**\n *\n * This is useful for handling specific logic based on whether the current\n * operation can be interrupted, such as when performing asynchronous operations\n * or handling cancellation.\n *\n * **Example**\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.checkInterruptible((isInterruptible) => {\n *     if (isInterruptible) {\n *       return Console.log(\"You can interrupt this operation.\")\n *     } else {\n *       return Console.log(\"This operation cannot be interrupted.\")\n *     }\n *   })\n * })\n *\n * Effect.runPromise(program)\n * // Output: You can interrupt this operation.\n *\n * Effect.runPromise(program.pipe(Effect.uninterruptible))\n * // Output: This operation cannot be interrupted.\n *\n * ```\n *\n *  @since 2.0.0\n * @category Interruption\n */\nexport const checkInterruptible: <A, E, R>(f: (isInterruptible: boolean) => Effect<A, E, R>) => Effect<A, E, R> =\n  core.checkInterruptible\n\n/**\n * Provides a way to handle timeouts in uninterruptible effects, allowing them\n * to continue in the background while the main control flow proceeds with the\n * timeout error.\n *\n * **Details**\n *\n * The `disconnect` function allows an uninterruptible effect to continue\n * running in the background, while enabling the main control flow to\n * immediately recognize a timeout condition. This is useful when you want to\n * avoid blocking the program due to long-running tasks, especially when those\n * tasks do not need to affect the flow of the rest of the program.\n *\n * Without `disconnect`, an uninterruptible effect will ignore the\n * timeout and continue executing until it completes. The timeout error will\n * only be assessed after the effect finishes, which can cause delays in\n * recognizing a timeout.\n *\n * With `disconnect`, the uninterruptible effect proceeds in the\n * background while the main program flow can immediately handle the timeout\n * error or trigger alternative logic. This enables faster timeout handling\n * without waiting for the completion of the long-running task.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const longRunningTask = Effect.gen(function* () {\n *   console.log(\"Start heavy processing...\")\n *   yield* Effect.sleep(\"5 seconds\") // Simulate a long process\n *   console.log(\"Heavy processing done.\")\n *   return \"Data processed\"\n * })\n *\n * const timedEffect = longRunningTask.pipe(\n *   Effect.uninterruptible,\n *   // Allows the task to finish in the background if it times out\n *   Effect.disconnect,\n *   Effect.timeout(\"1 second\")\n * )\n *\n * Effect.runPromiseExit(timedEffect).then(console.log)\n * // Output:\n * // Start heavy processing...\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: {\n * //     _id: 'Cause',\n * //     _tag: 'Fail',\n * //     failure: { _tag: 'TimeoutException' }\n * //   }\n * // }\n * // Heavy processing done.\n * ```\n *\n * @see {@link timeout} for a version that interrupts the effect.\n * @see {@link uninterruptible} for creating an uninterruptible effect.\n *\n * @since 2.0.0\n * @category Interruption\n */\nexport const disconnect: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = fiberRuntime.disconnect\n\n/**\n * Represents an effect that interrupts the current fiber.\n *\n * **Details**\n *\n * This effect models the explicit interruption of the fiber in which it runs.\n * When executed, it causes the fiber to stop its operation immediately,\n * capturing the interruption details such as the fiber's ID and its start time.\n * The resulting interruption can be observed in the `Exit` type if the effect\n * is run with functions like {@link runPromiseExit}.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const program = Effect.gen(function* () {\n *   console.log(\"start\")\n *   yield* Effect.sleep(\"2 seconds\")\n *   yield* Effect.interrupt\n *   console.log(\"done\")\n *   return \"some result\"\n * })\n *\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // start\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: {\n * //     _id: 'Cause',\n * //     _tag: 'Interrupt',\n * //     fiberId: {\n * //       _id: 'FiberId',\n * //       _tag: 'Runtime',\n * //       id: 0,\n * //       startTimeMillis: ...\n * //     }\n * //   }\n * // }\n * ```\n *\n * @since 2.0.0\n * @category Interruption\n */\nexport const interrupt: Effect<never> = core.interrupt\n\n/**\n * @since 2.0.0\n * @category Interruption\n */\nexport const interruptWith: (fiberId: FiberId.FiberId) => Effect<never> = core.interruptWith\n\n/**\n * Marks an effect as interruptible.\n *\n * @since 2.0.0\n * @category Interruption\n */\nexport const interruptible: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = core.interruptible\n\n/**\n * This function behaves like {@link interruptible}, but it also provides a\n * `restore` function. This function can be used to restore the interruptibility\n * of any specific region of code.\n *\n * @since 2.0.0\n * @category Interruption\n */\nexport const interruptibleMask: <A, E, R>(\n  f: (restore: <AX, EX, RX>(effect: Effect<AX, EX, RX>) => Effect<AX, EX, RX>) => Effect<A, E, R>\n) => Effect<A, E, R> = core.interruptibleMask\n\n/**\n * Registers a cleanup effect to run when an effect is interrupted.\n *\n * **Details**\n *\n * This function allows you to specify an effect to run when the fiber is\n * interrupted. This effect will be executed when the fiber is interrupted,\n * allowing you to perform cleanup or other actions.\n *\n * **Example** (Running a Cleanup Action on Interruption)\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * // This handler is executed when the fiber is interrupted\n * const handler = Effect.onInterrupt((_fibers) => Console.log(\"Cleanup completed\"))\n *\n * const success = Console.log(\"Task completed\").pipe(Effect.as(\"some result\"), handler)\n *\n * Effect.runFork(success)\n * // Output:\n * // Task completed\n *\n * const failure = Console.log(\"Task failed\").pipe(Effect.andThen(Effect.fail(\"some error\")), handler)\n *\n * Effect.runFork(failure)\n * // Output:\n * // Task failed\n *\n * const interruption = Console.log(\"Task interrupted\").pipe(Effect.andThen(Effect.interrupt), handler)\n *\n * Effect.runFork(interruption)\n * // Output:\n * // Task interrupted\n * // Cleanup completed\n * ```\n *\n * @since 2.0.0\n * @category Interruption\n */\nexport const onInterrupt: {\n  /**\n   * Registers a cleanup effect to run when an effect is interrupted.\n   *\n   * **Details**\n   *\n   * This function allows you to specify an effect to run when the fiber is\n   * interrupted. This effect will be executed when the fiber is interrupted,\n   * allowing you to perform cleanup or other actions.\n   *\n   * **Example** (Running a Cleanup Action on Interruption)\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * // This handler is executed when the fiber is interrupted\n   * const handler = Effect.onInterrupt((_fibers) => Console.log(\"Cleanup completed\"))\n   *\n   * const success = Console.log(\"Task completed\").pipe(Effect.as(\"some result\"), handler)\n   *\n   * Effect.runFork(success)\n   * // Output:\n   * // Task completed\n   *\n   * const failure = Console.log(\"Task failed\").pipe(Effect.andThen(Effect.fail(\"some error\")), handler)\n   *\n   * Effect.runFork(failure)\n   * // Output:\n   * // Task failed\n   *\n   * const interruption = Console.log(\"Task interrupted\").pipe(Effect.andThen(Effect.interrupt), handler)\n   *\n   * Effect.runFork(interruption)\n   * // Output:\n   * // Task interrupted\n   * // Cleanup completed\n   * ```\n   *\n   * @since 2.0.0\n   * @category Interruption\n   */\n  <X, R2>(\n    cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect<X, never, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  /**\n   * Registers a cleanup effect to run when an effect is interrupted.\n   *\n   * **Details**\n   *\n   * This function allows you to specify an effect to run when the fiber is\n   * interrupted. This effect will be executed when the fiber is interrupted,\n   * allowing you to perform cleanup or other actions.\n   *\n   * **Example** (Running a Cleanup Action on Interruption)\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * // This handler is executed when the fiber is interrupted\n   * const handler = Effect.onInterrupt((_fibers) => Console.log(\"Cleanup completed\"))\n   *\n   * const success = Console.log(\"Task completed\").pipe(Effect.as(\"some result\"), handler)\n   *\n   * Effect.runFork(success)\n   * // Output:\n   * // Task completed\n   *\n   * const failure = Console.log(\"Task failed\").pipe(Effect.andThen(Effect.fail(\"some error\")), handler)\n   *\n   * Effect.runFork(failure)\n   * // Output:\n   * // Task failed\n   *\n   * const interruption = Console.log(\"Task interrupted\").pipe(Effect.andThen(Effect.interrupt), handler)\n   *\n   * Effect.runFork(interruption)\n   * // Output:\n   * // Task interrupted\n   * // Cleanup completed\n   * ```\n   *\n   * @since 2.0.0\n   * @category Interruption\n   */\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = core.onInterrupt\n\n/**\n * Marks an effect as uninterruptible.\n *\n * @since 2.0.0\n * @category Interruption\n */\nexport const uninterruptible: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = core.uninterruptible\n\n/**\n * This function behaves like {@link uninterruptible}, but it also provides a\n * `restore` function. This function can be used to restore the interruptibility\n * of any specific region of code.\n *\n * @since 2.0.0\n * @category Interruption\n */\nexport const uninterruptibleMask: <A, E, R>(\n  f: (restore: <AX, EX, RX>(effect: Effect<AX, EX, RX>) => Effect<AX, EX, RX>) => Effect<A, E, R>\n) => Effect<A, E, R> = core.uninterruptibleMask\n\n/**\n * Transforms a `Predicate` function into an `Effect` returning the input value if the predicate returns `true`\n * or failing with specified error if the predicate fails\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * // succeeds with `1`\n * Effect.liftPredicate(1, isPositive, n => `${n} is not positive`)\n *\n * // fails with `\"0 is not positive\"`\n * Effect.liftPredicate(0, isPositive, n => `${n} is not positive`)\n * ```\n *\n * @category Condition Checking\n * @since 3.4.0\n */\nexport const liftPredicate: {\n  /**\n   * Transforms a `Predicate` function into an `Effect` returning the input value if the predicate returns `true`\n   * or failing with specified error if the predicate fails\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * // succeeds with `1`\n   * Effect.liftPredicate(1, isPositive, n => `${n} is not positive`)\n   *\n   * // fails with `\"0 is not positive\"`\n   * Effect.liftPredicate(0, isPositive, n => `${n} is not positive`)\n   * ```\n   *\n   * @category Condition Checking\n   * @since 3.4.0\n   */\n  <T extends A, E, B extends T = T, A = T>(\n    predicate: Refinement<T, B> | Predicate<T>,\n    orFailWith: (a: EqualsWith<T, B, A, Exclude<A, B>>) => E\n  ): (a: A) => Effect<EqualsWith<T, B, A, B>, E>\n  /**\n   * Transforms a `Predicate` function into an `Effect` returning the input value if the predicate returns `true`\n   * or failing with specified error if the predicate fails\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * // succeeds with `1`\n   * Effect.liftPredicate(1, isPositive, n => `${n} is not positive`)\n   *\n   * // fails with `\"0 is not positive\"`\n   * Effect.liftPredicate(0, isPositive, n => `${n} is not positive`)\n   * ```\n   *\n   * @category Condition Checking\n   * @since 3.4.0\n   */\n  <A, E, B extends A = A>(\n    self: A,\n    predicate: Refinement<A, B> | Predicate<A>,\n    orFailWith: (a: EqualsWith<A, B, A, Exclude<A, B>>) => E\n  ): Effect<B, E>\n} = effect.liftPredicate\n\n/**\n * Replaces the value inside an effect with a constant value.\n *\n * **Details**\n *\n * This function allows you to ignore the original value inside an effect and\n * replace it with a constant value.\n *\n * **When to Use**\n *\n * It is useful when you no longer need the value produced by an effect but want\n * to ensure that the effect completes successfully with a specific constant\n * result instead. For instance, you can replace the value produced by a\n * computation with a predefined value, ignoring what was calculated before.\n *\n * **Example** (Replacing a Value)\n *\n * ```ts\n * import { pipe, Effect } from \"effect\"\n *\n * // Replaces the value 5 with the constant \"new value\"\n * const program = pipe(Effect.succeed(5), Effect.as(\"new value\"))\n *\n * Effect.runPromise(program).then(console.log)\n * // Output: \"new value\"\n * ```\n *\n * @since 2.0.0\n * @category Mapping\n */\nexport const as: {\n  /**\n   * Replaces the value inside an effect with a constant value.\n   *\n   * **Details**\n   *\n   * This function allows you to ignore the original value inside an effect and\n   * replace it with a constant value.\n   *\n   * **When to Use**\n   *\n   * It is useful when you no longer need the value produced by an effect but want\n   * to ensure that the effect completes successfully with a specific constant\n   * result instead. For instance, you can replace the value produced by a\n   * computation with a predefined value, ignoring what was calculated before.\n   *\n   * **Example** (Replacing a Value)\n   *\n   * ```ts\n   * import { pipe, Effect } from \"effect\"\n   *\n   * // Replaces the value 5 with the constant \"new value\"\n   * const program = pipe(Effect.succeed(5), Effect.as(\"new value\"))\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output: \"new value\"\n   * ```\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <B>(value: B): <A, E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  /**\n   * Replaces the value inside an effect with a constant value.\n   *\n   * **Details**\n   *\n   * This function allows you to ignore the original value inside an effect and\n   * replace it with a constant value.\n   *\n   * **When to Use**\n   *\n   * It is useful when you no longer need the value produced by an effect but want\n   * to ensure that the effect completes successfully with a specific constant\n   * result instead. For instance, you can replace the value produced by a\n   * computation with a predefined value, ignoring what was calculated before.\n   *\n   * **Example** (Replacing a Value)\n   *\n   * ```ts\n   * import { pipe, Effect } from \"effect\"\n   *\n   * // Replaces the value 5 with the constant \"new value\"\n   * const program = pipe(Effect.succeed(5), Effect.as(\"new value\"))\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output: \"new value\"\n   * ```\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <A, E, R, B>(self: Effect<A, E, R>, value: B): Effect<B, E, R>\n} = core.as\n\n/**\n * This function maps the success value of an `Effect` value to a `Some` value\n * in an `Option` value. If the original `Effect` value fails, the returned\n * `Effect` value will also fail.\n *\n * @category Mapping\n * @since 2.0.0\n */\nexport const asSome: <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R> = effect.asSome\n\n/**\n * This function maps the error value of an `Effect` value to a `Some` value\n * in an `Option` value. If the original `Effect` value succeeds, the returned\n * `Effect` value will also succeed.\n *\n * @category Mapping\n * @since 2.0.0\n */\nexport const asSomeError: <A, E, R>(self: Effect<A, E, R>) => Effect<A, Option.Option<E>, R> = effect.asSomeError\n\n/**\n * This function maps the success value of an `Effect` value to `void`. If the\n * original `Effect` value succeeds, the returned `Effect` value will also\n * succeed. If the original `Effect` value fails, the returned `Effect` value\n * will fail with the same error.\n *\n * @since 2.0.0\n * @category Mapping\n */\nexport const asVoid: <A, E, R>(self: Effect<A, E, R>) => Effect<void, E, R> = core.asVoid\n\n/**\n * Swaps the success and error channels of an effect.\n *\n * **Details**\n *\n * This function reverses the flow of an effect by swapping its success and\n * error channels. The success value becomes an error, and the error value\n * becomes a success.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * //      ┌─── Effect<number, string, never>\n * //      ▼\n * const program = Effect.fail(\"Oh uh!\").pipe(Effect.as(2))\n *\n * //      ┌─── Effect<string, number, never>\n * //      ▼\n * const flipped = Effect.flip(program)\n * ```\n *\n * @since 2.0.0\n * @category Mapping\n */\nexport const flip: <A, E, R>(self: Effect<A, E, R>) => Effect<E, A, R> = core.flip\n\n/**\n * Swaps the error/value parameters, applies the function `f` and flips the\n * parameters back\n *\n * @since 2.0.0\n * @category Mapping\n */\nexport const flipWith: {\n  /**\n   * Swaps the error/value parameters, applies the function `f` and flips the\n   * parameters back\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <E, A, R, E2, A2, R2>(f: (effect: Effect<E, A, R>) => Effect<E2, A2, R2>): (self: Effect<A, E, R>) => Effect<A2, E2, R2>\n  /**\n   * Swaps the error/value parameters, applies the function `f` and flips the\n   * parameters back\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <A, E, R, E2, A2, R2>(self: Effect<A, E, R>, f: (effect: Effect<E, A, R>) => Effect<E2, A2, R2>): Effect<A2, E2, R2>\n} = effect.flipWith\n\n/**\n * Transforms the value inside an effect by applying a function to it.\n *\n * **Syntax**\n *\n * ```ts skip-type-checking\n * const mappedEffect = pipe(myEffect, Effect.map(transformation))\n * // or\n * const mappedEffect = Effect.map(myEffect, transformation)\n * // or\n * const mappedEffect = myEffect.pipe(Effect.map(transformation))\n * ```\n *\n * **Details**\n *\n * `map` takes a function and applies it to the value contained within an\n * effect, creating a new effect with the transformed value.\n *\n * It's important to note that effects are immutable, meaning that the original\n * effect is not modified. Instead, a new effect is returned with the updated\n * value.\n *\n * **Example** (Adding a Service Charge)\n *\n * ```ts\n * import { pipe, Effect } from \"effect\"\n *\n * const addServiceCharge = (amount: number) => amount + 1\n *\n * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n *\n * const finalAmount = pipe(\n *   fetchTransactionAmount,\n *   Effect.map(addServiceCharge)\n * )\n *\n * Effect.runPromise(finalAmount).then(console.log)\n * // Output: 101\n * ```\n *\n * @see {@link mapError} for a version that operates on the error channel.\n * @see {@link mapBoth} for a version that operates on both channels.\n * @see {@link flatMap} or {@link andThen} for a version that can return a new effect.\n *\n * @since 2.0.0\n * @category Mapping\n */\nexport const map: {\n  /**\n   * Transforms the value inside an effect by applying a function to it.\n   *\n   * **Syntax**\n   *\n   * ```ts skip-type-checking\n   * const mappedEffect = pipe(myEffect, Effect.map(transformation))\n   * // or\n   * const mappedEffect = Effect.map(myEffect, transformation)\n   * // or\n   * const mappedEffect = myEffect.pipe(Effect.map(transformation))\n   * ```\n   *\n   * **Details**\n   *\n   * `map` takes a function and applies it to the value contained within an\n   * effect, creating a new effect with the transformed value.\n   *\n   * It's important to note that effects are immutable, meaning that the original\n   * effect is not modified. Instead, a new effect is returned with the updated\n   * value.\n   *\n   * **Example** (Adding a Service Charge)\n   *\n   * ```ts\n   * import { pipe, Effect } from \"effect\"\n   *\n   * const addServiceCharge = (amount: number) => amount + 1\n   *\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * const finalAmount = pipe(\n   *   fetchTransactionAmount,\n   *   Effect.map(addServiceCharge)\n   * )\n   *\n   * Effect.runPromise(finalAmount).then(console.log)\n   * // Output: 101\n   * ```\n   *\n   * @see {@link mapError} for a version that operates on the error channel.\n   * @see {@link mapBoth} for a version that operates on both channels.\n   * @see {@link flatMap} or {@link andThen} for a version that can return a new effect.\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <A, B>(f: (a: A) => B): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  /**\n   * Transforms the value inside an effect by applying a function to it.\n   *\n   * **Syntax**\n   *\n   * ```ts skip-type-checking\n   * const mappedEffect = pipe(myEffect, Effect.map(transformation))\n   * // or\n   * const mappedEffect = Effect.map(myEffect, transformation)\n   * // or\n   * const mappedEffect = myEffect.pipe(Effect.map(transformation))\n   * ```\n   *\n   * **Details**\n   *\n   * `map` takes a function and applies it to the value contained within an\n   * effect, creating a new effect with the transformed value.\n   *\n   * It's important to note that effects are immutable, meaning that the original\n   * effect is not modified. Instead, a new effect is returned with the updated\n   * value.\n   *\n   * **Example** (Adding a Service Charge)\n   *\n   * ```ts\n   * import { pipe, Effect } from \"effect\"\n   *\n   * const addServiceCharge = (amount: number) => amount + 1\n   *\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * const finalAmount = pipe(\n   *   fetchTransactionAmount,\n   *   Effect.map(addServiceCharge)\n   * )\n   *\n   * Effect.runPromise(finalAmount).then(console.log)\n   * // Output: 101\n   * ```\n   *\n   * @see {@link mapError} for a version that operates on the error channel.\n   * @see {@link mapBoth} for a version that operates on both channels.\n   * @see {@link flatMap} or {@link andThen} for a version that can return a new effect.\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <A, E, R, B>(self: Effect<A, E, R>, f: (a: A) => B): Effect<B, E, R>\n} = core.map\n\n/**\n * Applies a stateful transformation to each element of a collection, producing\n * new elements along with an updated state.\n *\n * **When to Use**\n *\n * Use `mapAccum` when you need to process each element of a collection while\n * keeping track of some state across iterations.\n *\n * **Details**\n *\n * `mapAccum` takes an initial state (`initial`) and a function (`f`) that is\n * applied to each element. This function returns a new state and a transformed\n * element. The final effect produces both the accumulated state and the\n * transformed collection.\n *\n * If the input collection is a non-empty array, the return type will match the\n * input collection type.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * // Define an initial state and a transformation function\n * const initialState = 0\n *\n * const transformation = (state: number, element: string) =>\n *   Effect.succeed<[number, string]>([state + element.length, element.toUpperCase()])\n *\n * // Apply mapAccum to transform an array of strings\n * const program = Effect.mapAccum([\"a\", \"bb\", \"ccc\"], initialState, transformation)\n *\n * Effect.runPromise(program).then(([finalState, transformedCollection]) => {\n *   console.log(finalState)\n *   console.log(transformedCollection)\n * })\n * // Output:\n * // 6\n * // [ 'A', 'BB', 'CCC' ]\n * ```\n *\n * @since 2.0.0\n * @category Mapping\n */\nexport const mapAccum: {\n  /**\n   * Applies a stateful transformation to each element of a collection, producing\n   * new elements along with an updated state.\n   *\n   * **When to Use**\n   *\n   * Use `mapAccum` when you need to process each element of a collection while\n   * keeping track of some state across iterations.\n   *\n   * **Details**\n   *\n   * `mapAccum` takes an initial state (`initial`) and a function (`f`) that is\n   * applied to each element. This function returns a new state and a transformed\n   * element. The final effect produces both the accumulated state and the\n   * transformed collection.\n   *\n   * If the input collection is a non-empty array, the return type will match the\n   * input collection type.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * // Define an initial state and a transformation function\n   * const initialState = 0\n   *\n   * const transformation = (state: number, element: string) =>\n   *   Effect.succeed<[number, string]>([state + element.length, element.toUpperCase()])\n   *\n   * // Apply mapAccum to transform an array of strings\n   * const program = Effect.mapAccum([\"a\", \"bb\", \"ccc\"], initialState, transformation)\n   *\n   * Effect.runPromise(program).then(([finalState, transformedCollection]) => {\n   *   console.log(finalState)\n   *   console.log(transformedCollection)\n   * })\n   * // Output:\n   * // 6\n   * // [ 'A', 'BB', 'CCC' ]\n   * ```\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <S, A, B, E, R, I extends Iterable<A> = Iterable<A>>(\n    initial: S,\n    f: (state: S, a: RA.ReadonlyArray.Infer<I>, i: number) => Effect<readonly [S, B], E, R>\n  ): (elements: I) => Effect<[S, RA.ReadonlyArray.With<I, B>], E, R>\n  /**\n   * Applies a stateful transformation to each element of a collection, producing\n   * new elements along with an updated state.\n   *\n   * **When to Use**\n   *\n   * Use `mapAccum` when you need to process each element of a collection while\n   * keeping track of some state across iterations.\n   *\n   * **Details**\n   *\n   * `mapAccum` takes an initial state (`initial`) and a function (`f`) that is\n   * applied to each element. This function returns a new state and a transformed\n   * element. The final effect produces both the accumulated state and the\n   * transformed collection.\n   *\n   * If the input collection is a non-empty array, the return type will match the\n   * input collection type.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * // Define an initial state and a transformation function\n   * const initialState = 0\n   *\n   * const transformation = (state: number, element: string) =>\n   *   Effect.succeed<[number, string]>([state + element.length, element.toUpperCase()])\n   *\n   * // Apply mapAccum to transform an array of strings\n   * const program = Effect.mapAccum([\"a\", \"bb\", \"ccc\"], initialState, transformation)\n   *\n   * Effect.runPromise(program).then(([finalState, transformedCollection]) => {\n   *   console.log(finalState)\n   *   console.log(transformedCollection)\n   * })\n   * // Output:\n   * // 6\n   * // [ 'A', 'BB', 'CCC' ]\n   * ```\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <A, S, B, E, R, I extends Iterable<A> = Iterable<A>>(\n    elements: I,\n    initial: S,\n    f: (state: S, a: RA.ReadonlyArray.Infer<I>, i: number) => Effect<readonly [S, B], E, R>\n  ): Effect<[S, RA.ReadonlyArray.With<I, B>], E, R>\n} = effect.mapAccum\n\n/**\n * Applies transformations to both the success and error channels of an effect.\n *\n * **Details**\n *\n * This function takes two map functions as arguments: one for the error channel\n * and one for the success channel. You can use it when you want to modify both\n * the error and the success values without altering the overall success or\n * failure status of the effect.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * //      ┌─── Effect<number, string, never>\n * //      ▼\n * const simulatedTask = Effect.fail(\"Oh no!\").pipe(Effect.as(1))\n *\n * //      ┌─── Effect<boolean, Error, never>\n * //      ▼\n * const modified = Effect.mapBoth(simulatedTask, {\n *   onFailure: (message) => new Error(message),\n *   onSuccess: (n) => n > 0\n * })\n * ```\n *\n * @see {@link map} for a version that operates on the success channel.\n * @see {@link mapError} for a version that operates on the error channel.\n *\n * @since 2.0.0\n * @category Mapping\n */\nexport const mapBoth: {\n  /**\n   * Applies transformations to both the success and error channels of an effect.\n   *\n   * **Details**\n   *\n   * This function takes two map functions as arguments: one for the error channel\n   * and one for the success channel. You can use it when you want to modify both\n   * the error and the success values without altering the overall success or\n   * failure status of the effect.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * //      ┌─── Effect<number, string, never>\n   * //      ▼\n   * const simulatedTask = Effect.fail(\"Oh no!\").pipe(Effect.as(1))\n   *\n   * //      ┌─── Effect<boolean, Error, never>\n   * //      ▼\n   * const modified = Effect.mapBoth(simulatedTask, {\n   *   onFailure: (message) => new Error(message),\n   *   onSuccess: (n) => n > 0\n   * })\n   * ```\n   *\n   * @see {@link map} for a version that operates on the success channel.\n   * @see {@link mapError} for a version that operates on the error channel.\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <E, E2, A, A2>(\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2, E2, R>\n  /**\n   * Applies transformations to both the success and error channels of an effect.\n   *\n   * **Details**\n   *\n   * This function takes two map functions as arguments: one for the error channel\n   * and one for the success channel. You can use it when you want to modify both\n   * the error and the success values without altering the overall success or\n   * failure status of the effect.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * //      ┌─── Effect<number, string, never>\n   * //      ▼\n   * const simulatedTask = Effect.fail(\"Oh no!\").pipe(Effect.as(1))\n   *\n   * //      ┌─── Effect<boolean, Error, never>\n   * //      ▼\n   * const modified = Effect.mapBoth(simulatedTask, {\n   *   onFailure: (message) => new Error(message),\n   *   onSuccess: (n) => n > 0\n   * })\n   * ```\n   *\n   * @see {@link map} for a version that operates on the success channel.\n   * @see {@link mapError} for a version that operates on the error channel.\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <A, E, R, E2, A2>(\n    self: Effect<A, E, R>,\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): Effect<A2, E2, R>\n} = core.mapBoth\n\n/**\n * Transforms or modifies the error produced by an effect without affecting its\n * success value.\n *\n * **When to Use**\n *\n * This function is helpful when you want to enhance the error with additional\n * information, change the error type, or apply custom error handling while\n * keeping the original behavior of the effect's success values intact. It only\n * operates on the error channel and leaves the success channel unchanged.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * //      ┌─── Effect<number, string, never>\n * //      ▼\n * const simulatedTask = Effect.fail(\"Oh no!\").pipe(Effect.as(1))\n *\n * //      ┌─── Effect<number, Error, never>\n * //      ▼\n * const mapped = Effect.mapError(\n *   simulatedTask,\n *   (message) => new Error(message)\n * )\n * ```\n *\n * @see {@link map} for a version that operates on the success channel.\n * @see {@link mapBoth} for a version that operates on both channels.\n * @see {@link orElseFail} if you want to replace the error with a new one.\n *\n * @since 2.0.0\n * @category Mapping\n */\nexport const mapError: {\n  /**\n   * Transforms or modifies the error produced by an effect without affecting its\n   * success value.\n   *\n   * **When to Use**\n   *\n   * This function is helpful when you want to enhance the error with additional\n   * information, change the error type, or apply custom error handling while\n   * keeping the original behavior of the effect's success values intact. It only\n   * operates on the error channel and leaves the success channel unchanged.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * //      ┌─── Effect<number, string, never>\n   * //      ▼\n   * const simulatedTask = Effect.fail(\"Oh no!\").pipe(Effect.as(1))\n   *\n   * //      ┌─── Effect<number, Error, never>\n   * //      ▼\n   * const mapped = Effect.mapError(\n   *   simulatedTask,\n   *   (message) => new Error(message)\n   * )\n   * ```\n   *\n   * @see {@link map} for a version that operates on the success channel.\n   * @see {@link mapBoth} for a version that operates on both channels.\n   * @see {@link orElseFail} if you want to replace the error with a new one.\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <E, E2>(f: (e: E) => E2): <A, R>(self: Effect<A, E, R>) => Effect<A, E2, R>\n  /**\n   * Transforms or modifies the error produced by an effect without affecting its\n   * success value.\n   *\n   * **When to Use**\n   *\n   * This function is helpful when you want to enhance the error with additional\n   * information, change the error type, or apply custom error handling while\n   * keeping the original behavior of the effect's success values intact. It only\n   * operates on the error channel and leaves the success channel unchanged.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * //      ┌─── Effect<number, string, never>\n   * //      ▼\n   * const simulatedTask = Effect.fail(\"Oh no!\").pipe(Effect.as(1))\n   *\n   * //      ┌─── Effect<number, Error, never>\n   * //      ▼\n   * const mapped = Effect.mapError(\n   *   simulatedTask,\n   *   (message) => new Error(message)\n   * )\n   * ```\n   *\n   * @see {@link map} for a version that operates on the success channel.\n   * @see {@link mapBoth} for a version that operates on both channels.\n   * @see {@link orElseFail} if you want to replace the error with a new one.\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <A, E, R, E2>(self: Effect<A, E, R>, f: (e: E) => E2): Effect<A, E2, R>\n} = core.mapError\n\n/**\n * Maps the cause of failure of an effect using a specified function.\n *\n * @see {@link sandbox} for a version that exposes the full cause of failures, defects, or interruptions.\n * @see {@link catchAllCause} for a version that can recover from all types of defects.\n *\n * @since 2.0.0\n * @category Mapping\n */\nexport const mapErrorCause: {\n  /**\n   * Maps the cause of failure of an effect using a specified function.\n   *\n   * @see {@link sandbox} for a version that exposes the full cause of failures, defects, or interruptions.\n   * @see {@link catchAllCause} for a version that can recover from all types of defects.\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <E, E2>(f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): <A, R>(self: Effect<A, E, R>) => Effect<A, E2, R>\n  /**\n   * Maps the cause of failure of an effect using a specified function.\n   *\n   * @see {@link sandbox} for a version that exposes the full cause of failures, defects, or interruptions.\n   * @see {@link catchAllCause} for a version that can recover from all types of defects.\n   *\n   * @since 2.0.0\n   * @category Mapping\n   */\n  <A, E, R, E2>(self: Effect<A, E, R>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Effect<A, E2, R>\n} = effect.mapErrorCause\n\n/**\n * Combines both success and error channels of an effect into a single outcome.\n *\n * **Details**\n *\n * This function transforms an effect that may fail into one that always returns\n * a value, where both success and failure outcomes are handled as values in the\n * success channel.\n *\n * **When to Use**\n *\n * This can be useful when you want to continue execution regardless of the\n * error type and still capture both successful results and errors as part of\n * the outcome.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * //      ┌─── Effect<number, string, never>\n * //      ▼\n * const program = Effect.fail(\"Oh uh!\").pipe(Effect.as(2))\n *\n * //      ┌─── Effect<number | string, never, never>\n * //      ▼\n * const recovered = Effect.merge(program)\n * ```\n *\n * @since 2.0.0\n * @category Mapping\n */\nexport const merge: <A, E, R>(self: Effect<A, E, R>) => Effect<E | A, never, R> = effect.merge\n\n/**\n * Returns a new effect with the boolean value of this effect negated.\n *\n * @since 2.0.0\n * @category Mapping\n */\nexport const negate: <E, R>(self: Effect<boolean, E, R>) => Effect<boolean, E, R> = effect.negate\n\n/**\n * Creates a scoped resource using an `acquire` and `release` effect.\n *\n * **Details**\n *\n * This function helps manage resources by combining two `Effect` values: one\n * for acquiring the resource and one for releasing it.\n *\n * `acquireRelease` does the following:\n *\n *   1. Ensures that the effect that acquires the resource will not be\n *      interrupted. Note that acquisition may still fail due to internal\n *      reasons (such as an uncaught exception).\n *   2. Ensures that the `release` effect will not be interrupted, and will be\n *      executed as long as the acquisition effect successfully acquires the\n *      resource.\n *\n * If the `acquire` function succeeds, the `release` function is added to the\n * list of finalizers for the scope. This ensures that the release will happen\n * automatically when the scope is closed.\n *\n * Both `acquire` and `release` run uninterruptibly, meaning they cannot be\n * interrupted while they are executing.\n *\n * Additionally, the `release` function can be influenced by the exit value when\n * the scope closes, allowing for custom handling of how the resource is\n * released based on the execution outcome.\n *\n * **When to Use**\n *\n * This function is used to ensure that an effect that represents the\n * acquisition of a resource (for example, opening a file, launching a thread,\n * etc.) will not be interrupted, and that the resource will always be released\n * when the `Effect` completes execution.\n *\n * **Example** (Defining a Simple Resource)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * // Define an interface for a resource\n * interface MyResource {\n *   readonly contents: string\n *   readonly close: () => Promise<void>\n * }\n *\n * // Simulate resource acquisition\n * const getMyResource = (): Promise<MyResource> =>\n *   Promise.resolve({\n *     contents: \"lorem ipsum\",\n *     close: () =>\n *       new Promise((resolve) => {\n *         console.log(\"Resource released\")\n *         resolve()\n *       })\n *   })\n *\n * // Define how the resource is acquired\n * const acquire = Effect.tryPromise({\n *   try: () =>\n *     getMyResource().then((res) => {\n *       console.log(\"Resource acquired\")\n *       return res\n *     }),\n *   catch: () => new Error(\"getMyResourceError\")\n * })\n *\n * // Define how the resource is released\n * const release = (res: MyResource) => Effect.promise(() => res.close())\n *\n * // Create the resource management workflow\n * //\n * //      ┌─── Effect<MyResource, Error, Scope>\n * //      ▼\n * const resource = Effect.acquireRelease(acquire, release)\n * ```\n *\n * @see {@link acquireUseRelease} for a version that automatically handles the scoping of resources.\n *\n * @since 2.0.0\n * @category Scoping, Resources & Finalization\n */\nexport const acquireRelease: {\n  /**\n   * Creates a scoped resource using an `acquire` and `release` effect.\n   *\n   * **Details**\n   *\n   * This function helps manage resources by combining two `Effect` values: one\n   * for acquiring the resource and one for releasing it.\n   *\n   * `acquireRelease` does the following:\n   *\n   *   1. Ensures that the effect that acquires the resource will not be\n   *      interrupted. Note that acquisition may still fail due to internal\n   *      reasons (such as an uncaught exception).\n   *   2. Ensures that the `release` effect will not be interrupted, and will be\n   *      executed as long as the acquisition effect successfully acquires the\n   *      resource.\n   *\n   * If the `acquire` function succeeds, the `release` function is added to the\n   * list of finalizers for the scope. This ensures that the release will happen\n   * automatically when the scope is closed.\n   *\n   * Both `acquire` and `release` run uninterruptibly, meaning they cannot be\n   * interrupted while they are executing.\n   *\n   * Additionally, the `release` function can be influenced by the exit value when\n   * the scope closes, allowing for custom handling of how the resource is\n   * released based on the execution outcome.\n   *\n   * **When to Use**\n   *\n   * This function is used to ensure that an effect that represents the\n   * acquisition of a resource (for example, opening a file, launching a thread,\n   * etc.) will not be interrupted, and that the resource will always be released\n   * when the `Effect` completes execution.\n   *\n   * **Example** (Defining a Simple Resource)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * // Define an interface for a resource\n   * interface MyResource {\n   *   readonly contents: string\n   *   readonly close: () => Promise<void>\n   * }\n   *\n   * // Simulate resource acquisition\n   * const getMyResource = (): Promise<MyResource> =>\n   *   Promise.resolve({\n   *     contents: \"lorem ipsum\",\n   *     close: () =>\n   *       new Promise((resolve) => {\n   *         console.log(\"Resource released\")\n   *         resolve()\n   *       })\n   *   })\n   *\n   * // Define how the resource is acquired\n   * const acquire = Effect.tryPromise({\n   *   try: () =>\n   *     getMyResource().then((res) => {\n   *       console.log(\"Resource acquired\")\n   *       return res\n   *     }),\n   *   catch: () => new Error(\"getMyResourceError\")\n   * })\n   *\n   * // Define how the resource is released\n   * const release = (res: MyResource) => Effect.promise(() => res.close())\n   *\n   * // Create the resource management workflow\n   * //\n   * //      ┌─── Effect<MyResource, Error, Scope>\n   * //      ▼\n   * const resource = Effect.acquireRelease(acquire, release)\n   * ```\n   *\n   * @see {@link acquireUseRelease} for a version that automatically handles the scoping of resources.\n   *\n   * @since 2.0.0\n   * @category Scoping, Resources & Finalization\n   */\n  <A, X, R2>(release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>): <E, R>(acquire: Effect<A, E, R>) => Effect<A, E, Scope.Scope | R2 | R>\n  /**\n   * Creates a scoped resource using an `acquire` and `release` effect.\n   *\n   * **Details**\n   *\n   * This function helps manage resources by combining two `Effect` values: one\n   * for acquiring the resource and one for releasing it.\n   *\n   * `acquireRelease` does the following:\n   *\n   *   1. Ensures that the effect that acquires the resource will not be\n   *      interrupted. Note that acquisition may still fail due to internal\n   *      reasons (such as an uncaught exception).\n   *   2. Ensures that the `release` effect will not be interrupted, and will be\n   *      executed as long as the acquisition effect successfully acquires the\n   *      resource.\n   *\n   * If the `acquire` function succeeds, the `release` function is added to the\n   * list of finalizers for the scope. This ensures that the release will happen\n   * automatically when the scope is closed.\n   *\n   * Both `acquire` and `release` run uninterruptibly, meaning they cannot be\n   * interrupted while they are executing.\n   *\n   * Additionally, the `release` function can be influenced by the exit value when\n   * the scope closes, allowing for custom handling of how the resource is\n   * released based on the execution outcome.\n   *\n   * **When to Use**\n   *\n   * This function is used to ensure that an effect that represents the\n   * acquisition of a resource (for example, opening a file, launching a thread,\n   * etc.) will not be interrupted, and that the resource will always be released\n   * when the `Effect` completes execution.\n   *\n   * **Example** (Defining a Simple Resource)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * // Define an interface for a resource\n   * interface MyResource {\n   *   readonly contents: string\n   *   readonly close: () => Promise<void>\n   * }\n   *\n   * // Simulate resource acquisition\n   * const getMyResource = (): Promise<MyResource> =>\n   *   Promise.resolve({\n   *     contents: \"lorem ipsum\",\n   *     close: () =>\n   *       new Promise((resolve) => {\n   *         console.log(\"Resource released\")\n   *         resolve()\n   *       })\n   *   })\n   *\n   * // Define how the resource is acquired\n   * const acquire = Effect.tryPromise({\n   *   try: () =>\n   *     getMyResource().then((res) => {\n   *       console.log(\"Resource acquired\")\n   *       return res\n   *     }),\n   *   catch: () => new Error(\"getMyResourceError\")\n   * })\n   *\n   * // Define how the resource is released\n   * const release = (res: MyResource) => Effect.promise(() => res.close())\n   *\n   * // Create the resource management workflow\n   * //\n   * //      ┌─── Effect<MyResource, Error, Scope>\n   * //      ▼\n   * const resource = Effect.acquireRelease(acquire, release)\n   * ```\n   *\n   * @see {@link acquireUseRelease} for a version that automatically handles the scoping of resources.\n   *\n   * @since 2.0.0\n   * @category Scoping, Resources & Finalization\n   */\n  <A, E, R, X, R2>(\n    acquire: Effect<A, E, R>,\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>\n  ): Effect<A, E, Scope.Scope | R | R2>\n} = fiberRuntime.acquireRelease\n\n/**\n * Creates a scoped resource with an interruptible acquire action.\n *\n * **Details**\n *\n * This function is similar to {@link acquireRelease}, but it allows the\n * acquisition of the resource to be interrupted. The `acquire` effect, which\n * represents the process of obtaining the resource, can be interrupted if\n * necessary.\n *\n * @since 2.0.0\n * @category Scoping, Resources & Finalization\n */\nexport const acquireReleaseInterruptible: {\n  /**\n   * Creates a scoped resource with an interruptible acquire action.\n   *\n   * **Details**\n   *\n   * This function is similar to {@link acquireRelease}, but it allows the\n   * acquisition of the resource to be interrupted. The `acquire` effect, which\n   * represents the process of obtaining the resource, can be interrupted if\n   * necessary.\n   *\n   * @since 2.0.0\n   * @category Scoping, Resources & Finalization\n   */\n  <X, R2>(release: (exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>): <A, E, R>(acquire: Effect<A, E, R>) => Effect<A, E, Scope.Scope | R2 | R>\n  /**\n   * Creates a scoped resource with an interruptible acquire action.\n   *\n   * **Details**\n   *\n   * This function is similar to {@link acquireRelease}, but it allows the\n   * acquisition of the resource to be interrupted. The `acquire` effect, which\n   * represents the process of obtaining the resource, can be interrupted if\n   * necessary.\n   *\n   * @since 2.0.0\n   * @category Scoping, Resources & Finalization\n   */\n  <A, E, R, X, R2>(\n    acquire: Effect<A, E, R>,\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>\n  ): Effect<A, E, Scope.Scope | R | R2>\n} = fiberRuntime.acquireReleaseInterruptible\n\n/**\n * Many real-world operations involve working with resources that must be released when no longer needed, such as:\n *\n * - Database connections\n * - File handles\n * - Network requests\n *\n * This function ensures that a resource is:\n *\n * 1. **Acquired** properly.\n * 2. **Used** for its intended purpose.\n * 3. **Released** even if an error occurs.\n *\n * **Example** (Automatically Managing Resource Lifetime)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * // Define an interface for a resource\n * interface MyResource {\n *   readonly contents: string\n *   readonly close: () => Promise<void>\n * }\n *\n * // Simulate resource acquisition\n * const getMyResource = (): Promise<MyResource> =>\n *   Promise.resolve({\n *     contents: \"lorem ipsum\",\n *     close: () =>\n *       new Promise((resolve) => {\n *         console.log(\"Resource released\")\n *         resolve()\n *       })\n *   })\n *\n * // Define how the resource is acquired\n * const acquire = Effect.tryPromise({\n *   try: () =>\n *     getMyResource().then((res) => {\n *       console.log(\"Resource acquired\")\n *       return res\n *     }),\n *   catch: () => new Error(\"getMyResourceError\")\n * })\n *\n * // Define how the resource is released\n * const release = (res: MyResource) => Effect.promise(() => res.close())\n *\n * const use = (res: MyResource) => Console.log(`content is ${res.contents}`)\n *\n * //      ┌─── Effect<void, Error, never>\n * //      ▼\n * const program = Effect.acquireUseRelease(acquire, use, release)\n *\n * Effect.runPromise(program)\n * // Output:\n * // Resource acquired\n * // content is lorem ipsum\n * // Resource released\n * ```\n *\n * @since 2.0.0\n * @category Scoping, Resources & Finalization\n */\nexport const acquireUseRelease: {\n  /**\n   * Many real-world operations involve working with resources that must be released when no longer needed, such as:\n   *\n   * - Database connections\n   * - File handles\n   * - Network requests\n   *\n   * This function ensures that a resource is:\n   *\n   * 1. **Acquired** properly.\n   * 2. **Used** for its intended purpose.\n   * 3. **Released** even if an error occurs.\n   *\n   * **Example** (Automatically Managing Resource Lifetime)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Define an interface for a resource\n   * interface MyResource {\n   *   readonly contents: string\n   *   readonly close: () => Promise<void>\n   * }\n   *\n   * // Simulate resource acquisition\n   * const getMyResource = (): Promise<MyResource> =>\n   *   Promise.resolve({\n   *     contents: \"lorem ipsum\",\n   *     close: () =>\n   *       new Promise((resolve) => {\n   *         console.log(\"Resource released\")\n   *         resolve()\n   *       })\n   *   })\n   *\n   * // Define how the resource is acquired\n   * const acquire = Effect.tryPromise({\n   *   try: () =>\n   *     getMyResource().then((res) => {\n   *       console.log(\"Resource acquired\")\n   *       return res\n   *     }),\n   *   catch: () => new Error(\"getMyResourceError\")\n   * })\n   *\n   * // Define how the resource is released\n   * const release = (res: MyResource) => Effect.promise(() => res.close())\n   *\n   * const use = (res: MyResource) => Console.log(`content is ${res.contents}`)\n   *\n   * //      ┌─── Effect<void, Error, never>\n   * //      ▼\n   * const program = Effect.acquireUseRelease(acquire, use, release)\n   *\n   * Effect.runPromise(program)\n   * // Output:\n   * // Resource acquired\n   * // content is lorem ipsum\n   * // Resource released\n   * ```\n   *\n   * @since 2.0.0\n   * @category Scoping, Resources & Finalization\n   */\n  <A2, E2, R2, A, X, R3>(\n    use: (a: A) => Effect<A2, E2, R2>,\n    release: (a: A, exit: Exit.Exit<A2, E2>) => Effect<X, never, R3>\n  ): <E, R>(acquire: Effect<A, E, R>) => Effect<A2, E2 | E, R2 | R3 | R>\n  /**\n   * Many real-world operations involve working with resources that must be released when no longer needed, such as:\n   *\n   * - Database connections\n   * - File handles\n   * - Network requests\n   *\n   * This function ensures that a resource is:\n   *\n   * 1. **Acquired** properly.\n   * 2. **Used** for its intended purpose.\n   * 3. **Released** even if an error occurs.\n   *\n   * **Example** (Automatically Managing Resource Lifetime)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Define an interface for a resource\n   * interface MyResource {\n   *   readonly contents: string\n   *   readonly close: () => Promise<void>\n   * }\n   *\n   * // Simulate resource acquisition\n   * const getMyResource = (): Promise<MyResource> =>\n   *   Promise.resolve({\n   *     contents: \"lorem ipsum\",\n   *     close: () =>\n   *       new Promise((resolve) => {\n   *         console.log(\"Resource released\")\n   *         resolve()\n   *       })\n   *   })\n   *\n   * // Define how the resource is acquired\n   * const acquire = Effect.tryPromise({\n   *   try: () =>\n   *     getMyResource().then((res) => {\n   *       console.log(\"Resource acquired\")\n   *       return res\n   *     }),\n   *   catch: () => new Error(\"getMyResourceError\")\n   * })\n   *\n   * // Define how the resource is released\n   * const release = (res: MyResource) => Effect.promise(() => res.close())\n   *\n   * const use = (res: MyResource) => Console.log(`content is ${res.contents}`)\n   *\n   * //      ┌─── Effect<void, Error, never>\n   * //      ▼\n   * const program = Effect.acquireUseRelease(acquire, use, release)\n   *\n   * Effect.runPromise(program)\n   * // Output:\n   * // Resource acquired\n   * // content is lorem ipsum\n   * // Resource released\n   * ```\n   *\n   * @since 2.0.0\n   * @category Scoping, Resources & Finalization\n   */\n  <A, E, R, A2, E2, R2, X, R3>(\n    acquire: Effect<A, E, R>,\n    use: (a: A) => Effect<A2, E2, R2>,\n    release: (a: A, exit: Exit.Exit<A2, E2>) => Effect<X, never, R3>\n  ): Effect<A2, E | E2, R | R2 | R3>\n} = core.acquireUseRelease\n\n/**\n * Ensures a finalizer is added to the scope of the calling effect, guaranteeing\n * it runs when the scope is closed.\n *\n * **Details**\n *\n * This function adds a finalizer that will execute whenever the scope of the\n * effect is closed, regardless of whether the effect succeeds, fails, or is\n * interrupted. The finalizer receives the `Exit` value of the effect's scope,\n * allowing it to react differently depending on how the effect concludes.\n *\n * Finalizers are a reliable way to manage resource cleanup, ensuring that\n * resources such as file handles, network connections, or database transactions\n * are properly closed even in the event of an unexpected interruption or error.\n *\n * Finalizers operate in conjunction with Effect's scoped resources. If an\n * effect with a finalizer is wrapped in a scope, the finalizer will execute\n * automatically when the scope ends.\n *\n * **Example** (Adding a Finalizer on Success)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * //      ┌─── Effect<string, never, Scope>\n * //      ▼\n * const program = Effect.gen(function* () {\n *   yield* Effect.addFinalizer((exit) =>\n *     Console.log(`Finalizer executed. Exit status: ${exit._tag}`)\n *   )\n *   return \"some result\"\n * })\n *\n * // Wrapping the effect in a scope\n * //\n * //      ┌─── Effect<string, never, never>\n * //      ▼\n * const runnable = Effect.scoped(program)\n *\n * Effect.runPromiseExit(runnable).then(console.log)\n * // Output:\n * // Finalizer executed. Exit status: Success\n * // { _id: 'Exit', _tag: 'Success', value: 'some result' }\n * ```\n *\n * **Example** (Adding a Finalizer on Failure)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * //      ┌─── Effect<never, string, Scope>\n * //      ▼\n * const program = Effect.gen(function* () {\n *   yield* Effect.addFinalizer((exit) =>\n *     Console.log(`Finalizer executed. Exit status: ${exit._tag}`)\n *   )\n *   return yield* Effect.fail(\"Uh oh!\")\n * })\n *\n * // Wrapping the effect in a scope\n * //\n * //      ┌─── Effect<never, string, never>\n * //      ▼\n * const runnable = Effect.scoped(program)\n *\n * Effect.runPromiseExit(runnable).then(console.log)\n * // Output:\n * // Finalizer executed. Exit status: Failure\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: { _id: 'Cause', _tag: 'Fail', failure: 'Uh oh!' }\n * // }\n * ```\n *\n * **Example** (Adding a Finalizer on Interruption)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * //      ┌─── Effect<never, never, Scope>\n * //      ▼\n * const program = Effect.gen(function* () {\n *   yield* Effect.addFinalizer((exit) =>\n *     Console.log(`Finalizer executed. Exit status: ${exit._tag}`)\n *   )\n *   return yield* Effect.interrupt\n * })\n *\n * // Wrapping the effect in a scope\n * //\n * //      ┌─── Effect<never, never, never>\n * //      ▼\n * const runnable = Effect.scoped(program)\n *\n * Effect.runPromiseExit(runnable).then(console.log)\n * // Output:\n * // Finalizer executed. Exit status: Failure\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: {\n * //     _id: 'Cause',\n * //     _tag: 'Interrupt',\n * //     fiberId: {\n * //       _id: 'FiberId',\n * //       _tag: 'Runtime',\n * //       id: 0,\n * //       startTimeMillis: ...\n * //     }\n * //   }\n * // }\n * ```\n *\n * @see {@link onExit} for attaching a finalizer directly to an effect.\n *\n * @since 2.0.0\n * @category Scoping, Resources & Finalization\n */\nexport const addFinalizer: <X, R>(\n  finalizer: (exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R>\n) => Effect<void, never, Scope.Scope | R> = fiberRuntime.addFinalizer\n\n/**\n * Guarantees the execution of a finalizer when an effect starts execution.\n *\n * **Details**\n *\n * This function allows you to specify a `finalizer` effect that will always be\n * run once the effect starts execution, regardless of whether the effect\n * succeeds, fails, or is interrupted.\n *\n * **When to Use**\n *\n * This is useful when you need to ensure that certain cleanup or final steps\n * are executed in all cases, such as releasing resources or performing\n * necessary logging.\n *\n * While this function provides strong guarantees about executing the finalizer,\n * it is considered a low-level tool, which may not be ideal for more complex\n * resource management. For higher-level resource management with automatic\n * acquisition and release, see the {@link acquireRelease} family of functions.\n * For use cases where you need access to the result of an effect, consider\n * using {@link onExit}.\n *\n * **Example** (Running a Finalizer in All Outcomes)\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * // Define a cleanup effect\n * const handler = Effect.ensuring(Console.log(\"Cleanup completed\"))\n *\n * // Define a successful effect\n * const success = Console.log(\"Task completed\").pipe(\n *   Effect.as(\"some result\"),\n *   handler\n * )\n *\n * Effect.runFork(success)\n * // Output:\n * // Task completed\n * // Cleanup completed\n *\n * // Define a failing effect\n * const failure = Console.log(\"Task failed\").pipe(\n *   Effect.andThen(Effect.fail(\"some error\")),\n *   handler\n * )\n *\n * Effect.runFork(failure)\n * // Output:\n * // Task failed\n * // Cleanup completed\n *\n * // Define an interrupted effect\n * const interruption = Console.log(\"Task interrupted\").pipe(\n *   Effect.andThen(Effect.interrupt),\n *   handler\n * )\n *\n * Effect.runFork(interruption)\n * // Output:\n * // Task interrupted\n * // Cleanup completed\n * ```\n *\n * @see {@link onExit} for a version that provides access to the result of an\n * effect.\n *\n * @since 2.0.0\n * @category Scoping, Resources & Finalization\n */\nexport const ensuring: {\n  /**\n   * Guarantees the execution of a finalizer when an effect starts execution.\n   *\n   * **Details**\n   *\n   * This function allows you to specify a `finalizer` effect that will always be\n   * run once the effect starts execution, regardless of whether the effect\n   * succeeds, fails, or is interrupted.\n   *\n   * **When to Use**\n   *\n   * This is useful when you need to ensure that certain cleanup or final steps\n   * are executed in all cases, such as releasing resources or performing\n   * necessary logging.\n   *\n   * While this function provides strong guarantees about executing the finalizer,\n   * it is considered a low-level tool, which may not be ideal for more complex\n   * resource management. For higher-level resource management with automatic\n   * acquisition and release, see the {@link acquireRelease} family of functions.\n   * For use cases where you need access to the result of an effect, consider\n   * using {@link onExit}.\n   *\n   * **Example** (Running a Finalizer in All Outcomes)\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * // Define a cleanup effect\n   * const handler = Effect.ensuring(Console.log(\"Cleanup completed\"))\n   *\n   * // Define a successful effect\n   * const success = Console.log(\"Task completed\").pipe(\n   *   Effect.as(\"some result\"),\n   *   handler\n   * )\n   *\n   * Effect.runFork(success)\n   * // Output:\n   * // Task completed\n   * // Cleanup completed\n   *\n   * // Define a failing effect\n   * const failure = Console.log(\"Task failed\").pipe(\n   *   Effect.andThen(Effect.fail(\"some error\")),\n   *   handler\n   * )\n   *\n   * Effect.runFork(failure)\n   * // Output:\n   * // Task failed\n   * // Cleanup completed\n   *\n   * // Define an interrupted effect\n   * const interruption = Console.log(\"Task interrupted\").pipe(\n   *   Effect.andThen(Effect.interrupt),\n   *   handler\n   * )\n   *\n   * Effect.runFork(interruption)\n   * // Output:\n   * // Task interrupted\n   * // Cleanup completed\n   * ```\n   *\n   * @see {@link onExit} for a version that provides access to the result of an\n   * effect.\n   *\n   * @since 2.0.0\n   * @category Scoping, Resources & Finalization\n   */\n  <X, R1>(finalizer: Effect<X, never, R1>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R1 | R>\n  /**\n   * Guarantees the execution of a finalizer when an effect starts execution.\n   *\n   * **Details**\n   *\n   * This function allows you to specify a `finalizer` effect that will always be\n   * run once the effect starts execution, regardless of whether the effect\n   * succeeds, fails, or is interrupted.\n   *\n   * **When to Use**\n   *\n   * This is useful when you need to ensure that certain cleanup or final steps\n   * are executed in all cases, such as releasing resources or performing\n   * necessary logging.\n   *\n   * While this function provides strong guarantees about executing the finalizer,\n   * it is considered a low-level tool, which may not be ideal for more complex\n   * resource management. For higher-level resource management with automatic\n   * acquisition and release, see the {@link acquireRelease} family of functions.\n   * For use cases where you need access to the result of an effect, consider\n   * using {@link onExit}.\n   *\n   * **Example** (Running a Finalizer in All Outcomes)\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * // Define a cleanup effect\n   * const handler = Effect.ensuring(Console.log(\"Cleanup completed\"))\n   *\n   * // Define a successful effect\n   * const success = Console.log(\"Task completed\").pipe(\n   *   Effect.as(\"some result\"),\n   *   handler\n   * )\n   *\n   * Effect.runFork(success)\n   * // Output:\n   * // Task completed\n   * // Cleanup completed\n   *\n   * // Define a failing effect\n   * const failure = Console.log(\"Task failed\").pipe(\n   *   Effect.andThen(Effect.fail(\"some error\")),\n   *   handler\n   * )\n   *\n   * Effect.runFork(failure)\n   * // Output:\n   * // Task failed\n   * // Cleanup completed\n   *\n   * // Define an interrupted effect\n   * const interruption = Console.log(\"Task interrupted\").pipe(\n   *   Effect.andThen(Effect.interrupt),\n   *   handler\n   * )\n   *\n   * Effect.runFork(interruption)\n   * // Output:\n   * // Task interrupted\n   * // Cleanup completed\n   * ```\n   *\n   * @see {@link onExit} for a version that provides access to the result of an\n   * effect.\n   *\n   * @since 2.0.0\n   * @category Scoping, Resources & Finalization\n   */\n  <A, E, R, X, R1>(self: Effect<A, E, R>, finalizer: Effect<X, never, R1>): Effect<A, E, R1 | R>\n} = fiberRuntime.ensuring\n\n/**\n * Ensures a cleanup effect runs whenever the calling effect fails, providing\n * the failure cause to the cleanup effect.\n *\n * **Details**\n *\n * This function allows you to attach a cleanup effect that runs whenever the\n * calling effect fails. The cleanup effect receives the cause of the failure,\n * allowing you to perform actions such as logging, releasing resources, or\n * executing additional recovery logic based on the error. The cleanup effect\n * will execute even if the failure is due to interruption.\n *\n * Importantly, the cleanup effect itself is uninterruptible, ensuring that it\n * completes regardless of external interruptions.\n *\n * **Example** (Running Cleanup Only on Failure)\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * // This handler logs the failure cause when the effect fails\n * const handler = Effect.onError((cause) =>\n *   Console.log(`Cleanup completed: ${cause}`)\n * )\n *\n * // Define a successful effect\n * const success = Console.log(\"Task completed\").pipe(\n *   Effect.as(\"some result\"),\n *   handler\n * )\n *\n * Effect.runFork(success)\n * // Output:\n * // Task completed\n *\n * // Define a failing effect\n * const failure = Console.log(\"Task failed\").pipe(\n *   Effect.andThen(Effect.fail(\"some error\")),\n *   handler\n * )\n *\n * Effect.runFork(failure)\n * // Output:\n * // Task failed\n * // Cleanup completed: Error: some error\n *\n * // Define a failing effect\n * const defect = Console.log(\"Task failed with defect\").pipe(\n *   Effect.andThen(Effect.die(\"Boom!\")),\n *   handler\n * )\n *\n * Effect.runFork(defect)\n * // Output:\n * // Task failed with defect\n * // Cleanup completed: Error: Boom!\n *\n * // Define an interrupted effect\n * const interruption = Console.log(\"Task interrupted\").pipe(\n *   Effect.andThen(Effect.interrupt),\n *   handler\n * )\n *\n * Effect.runFork(interruption)\n * // Output:\n * // Task interrupted\n * // Cleanup completed: All fibers interrupted without errors.\n * ```\n *\n * @see {@link ensuring} for attaching a cleanup effect that runs on both success and failure.\n * @see {@link onExit} for attaching a cleanup effect that runs on all possible exits.\n *\n * @since 2.0.0\n * @category Scoping, Resources & Finalization\n */\nexport const onError: {\n  /**\n   * Ensures a cleanup effect runs whenever the calling effect fails, providing\n   * the failure cause to the cleanup effect.\n   *\n   * **Details**\n   *\n   * This function allows you to attach a cleanup effect that runs whenever the\n   * calling effect fails. The cleanup effect receives the cause of the failure,\n   * allowing you to perform actions such as logging, releasing resources, or\n   * executing additional recovery logic based on the error. The cleanup effect\n   * will execute even if the failure is due to interruption.\n   *\n   * Importantly, the cleanup effect itself is uninterruptible, ensuring that it\n   * completes regardless of external interruptions.\n   *\n   * **Example** (Running Cleanup Only on Failure)\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * // This handler logs the failure cause when the effect fails\n   * const handler = Effect.onError((cause) =>\n   *   Console.log(`Cleanup completed: ${cause}`)\n   * )\n   *\n   * // Define a successful effect\n   * const success = Console.log(\"Task completed\").pipe(\n   *   Effect.as(\"some result\"),\n   *   handler\n   * )\n   *\n   * Effect.runFork(success)\n   * // Output:\n   * // Task completed\n   *\n   * // Define a failing effect\n   * const failure = Console.log(\"Task failed\").pipe(\n   *   Effect.andThen(Effect.fail(\"some error\")),\n   *   handler\n   * )\n   *\n   * Effect.runFork(failure)\n   * // Output:\n   * // Task failed\n   * // Cleanup completed: Error: some error\n   *\n   * // Define a failing effect\n   * const defect = Console.log(\"Task failed with defect\").pipe(\n   *   Effect.andThen(Effect.die(\"Boom!\")),\n   *   handler\n   * )\n   *\n   * Effect.runFork(defect)\n   * // Output:\n   * // Task failed with defect\n   * // Cleanup completed: Error: Boom!\n   *\n   * // Define an interrupted effect\n   * const interruption = Console.log(\"Task interrupted\").pipe(\n   *   Effect.andThen(Effect.interrupt),\n   *   handler\n   * )\n   *\n   * Effect.runFork(interruption)\n   * // Output:\n   * // Task interrupted\n   * // Cleanup completed: All fibers interrupted without errors.\n   * ```\n   *\n   * @see {@link ensuring} for attaching a cleanup effect that runs on both success and failure.\n   * @see {@link onExit} for attaching a cleanup effect that runs on all possible exits.\n   *\n   * @since 2.0.0\n   * @category Scoping, Resources & Finalization\n   */\n  <E, X, R2>(cleanup: (cause: Cause.Cause<E>) => Effect<X, never, R2>): <A, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  /**\n   * Ensures a cleanup effect runs whenever the calling effect fails, providing\n   * the failure cause to the cleanup effect.\n   *\n   * **Details**\n   *\n   * This function allows you to attach a cleanup effect that runs whenever the\n   * calling effect fails. The cleanup effect receives the cause of the failure,\n   * allowing you to perform actions such as logging, releasing resources, or\n   * executing additional recovery logic based on the error. The cleanup effect\n   * will execute even if the failure is due to interruption.\n   *\n   * Importantly, the cleanup effect itself is uninterruptible, ensuring that it\n   * completes regardless of external interruptions.\n   *\n   * **Example** (Running Cleanup Only on Failure)\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * // This handler logs the failure cause when the effect fails\n   * const handler = Effect.onError((cause) =>\n   *   Console.log(`Cleanup completed: ${cause}`)\n   * )\n   *\n   * // Define a successful effect\n   * const success = Console.log(\"Task completed\").pipe(\n   *   Effect.as(\"some result\"),\n   *   handler\n   * )\n   *\n   * Effect.runFork(success)\n   * // Output:\n   * // Task completed\n   *\n   * // Define a failing effect\n   * const failure = Console.log(\"Task failed\").pipe(\n   *   Effect.andThen(Effect.fail(\"some error\")),\n   *   handler\n   * )\n   *\n   * Effect.runFork(failure)\n   * // Output:\n   * // Task failed\n   * // Cleanup completed: Error: some error\n   *\n   * // Define a failing effect\n   * const defect = Console.log(\"Task failed with defect\").pipe(\n   *   Effect.andThen(Effect.die(\"Boom!\")),\n   *   handler\n   * )\n   *\n   * Effect.runFork(defect)\n   * // Output:\n   * // Task failed with defect\n   * // Cleanup completed: Error: Boom!\n   *\n   * // Define an interrupted effect\n   * const interruption = Console.log(\"Task interrupted\").pipe(\n   *   Effect.andThen(Effect.interrupt),\n   *   handler\n   * )\n   *\n   * Effect.runFork(interruption)\n   * // Output:\n   * // Task interrupted\n   * // Cleanup completed: All fibers interrupted without errors.\n   * ```\n   *\n   * @see {@link ensuring} for attaching a cleanup effect that runs on both success and failure.\n   * @see {@link onExit} for attaching a cleanup effect that runs on all possible exits.\n   *\n   * @since 2.0.0\n   * @category Scoping, Resources & Finalization\n   */\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    cleanup: (cause: Cause.Cause<E>) => Effect<X, never, R2>\n  ): Effect<A, E, R2 | R>\n} = core.onError\n\n/**\n * Guarantees that a cleanup function runs regardless of whether the effect\n * succeeds, fails, or is interrupted.\n *\n * **Details**\n *\n * This function ensures that a provided cleanup function is executed after the\n * effect completes, regardless of the outcome. The cleanup function is given\n * the `Exit` value of the effect, which provides detailed information about the\n * result:\n * - If the effect succeeds, the `Exit` contains the success value.\n * - If the effect fails, the `Exit` contains the error or failure cause.\n * - If the effect is interrupted, the `Exit` reflects the interruption.\n *\n * The cleanup function is guaranteed to run uninterruptibly, ensuring reliable\n * resource management even in complex or high-concurrency scenarios.\n *\n * **Example** (Running a Cleanup Function with the Effect’s Result)\n *\n * ```ts\n * import { Console, Effect, Exit } from \"effect\"\n *\n * // Define a cleanup effect that logs the result\n * const handler = Effect.onExit((exit) =>\n *   Console.log(`Cleanup completed: ${Exit.getOrElse(exit, String)}`)\n * )\n *\n * // Define a successful effect\n * const success = Console.log(\"Task completed\").pipe(\n *   Effect.as(\"some result\"),\n *   handler\n * )\n *\n * Effect.runFork(success)\n * // Output:\n * // Task completed\n * // Cleanup completed: some result\n *\n * // Define a failing effect\n * const failure = Console.log(\"Task failed\").pipe(\n *   Effect.andThen(Effect.fail(\"some error\")),\n *   handler\n * )\n *\n * Effect.runFork(failure)\n * // Output:\n * // Task failed\n * // Cleanup completed: Error: some error\n *\n * // Define an interrupted effect\n * const interruption = Console.log(\"Task interrupted\").pipe(\n *   Effect.andThen(Effect.interrupt),\n *   handler\n * )\n *\n * Effect.runFork(interruption)\n * // Output:\n * // Task interrupted\n * // Cleanup completed: All fibers interrupted without errors.\n * ```\n *\n * @since 2.0.0\n * @category Scoping, Resources & Finalization\n */\nexport const onExit: {\n  /**\n   * Guarantees that a cleanup function runs regardless of whether the effect\n   * succeeds, fails, or is interrupted.\n   *\n   * **Details**\n   *\n   * This function ensures that a provided cleanup function is executed after the\n   * effect completes, regardless of the outcome. The cleanup function is given\n   * the `Exit` value of the effect, which provides detailed information about the\n   * result:\n   * - If the effect succeeds, the `Exit` contains the success value.\n   * - If the effect fails, the `Exit` contains the error or failure cause.\n   * - If the effect is interrupted, the `Exit` reflects the interruption.\n   *\n   * The cleanup function is guaranteed to run uninterruptibly, ensuring reliable\n   * resource management even in complex or high-concurrency scenarios.\n   *\n   * **Example** (Running a Cleanup Function with the Effect’s Result)\n   *\n   * ```ts\n   * import { Console, Effect, Exit } from \"effect\"\n   *\n   * // Define a cleanup effect that logs the result\n   * const handler = Effect.onExit((exit) =>\n   *   Console.log(`Cleanup completed: ${Exit.getOrElse(exit, String)}`)\n   * )\n   *\n   * // Define a successful effect\n   * const success = Console.log(\"Task completed\").pipe(\n   *   Effect.as(\"some result\"),\n   *   handler\n   * )\n   *\n   * Effect.runFork(success)\n   * // Output:\n   * // Task completed\n   * // Cleanup completed: some result\n   *\n   * // Define a failing effect\n   * const failure = Console.log(\"Task failed\").pipe(\n   *   Effect.andThen(Effect.fail(\"some error\")),\n   *   handler\n   * )\n   *\n   * Effect.runFork(failure)\n   * // Output:\n   * // Task failed\n   * // Cleanup completed: Error: some error\n   *\n   * // Define an interrupted effect\n   * const interruption = Console.log(\"Task interrupted\").pipe(\n   *   Effect.andThen(Effect.interrupt),\n   *   handler\n   * )\n   *\n   * Effect.runFork(interruption)\n   * // Output:\n   * // Task interrupted\n   * // Cleanup completed: All fibers interrupted without errors.\n   * ```\n   *\n   * @since 2.0.0\n   * @category Scoping, Resources & Finalization\n   */\n  <A, E, X, R2>(cleanup: (exit: Exit.Exit<A, E>) => Effect<X, never, R2>): <R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  /**\n   * Guarantees that a cleanup function runs regardless of whether the effect\n   * succeeds, fails, or is interrupted.\n   *\n   * **Details**\n   *\n   * This function ensures that a provided cleanup function is executed after the\n   * effect completes, regardless of the outcome. The cleanup function is given\n   * the `Exit` value of the effect, which provides detailed information about the\n   * result:\n   * - If the effect succeeds, the `Exit` contains the success value.\n   * - If the effect fails, the `Exit` contains the error or failure cause.\n   * - If the effect is interrupted, the `Exit` reflects the interruption.\n   *\n   * The cleanup function is guaranteed to run uninterruptibly, ensuring reliable\n   * resource management even in complex or high-concurrency scenarios.\n   *\n   * **Example** (Running a Cleanup Function with the Effect’s Result)\n   *\n   * ```ts\n   * import { Console, Effect, Exit } from \"effect\"\n   *\n   * // Define a cleanup effect that logs the result\n   * const handler = Effect.onExit((exit) =>\n   *   Console.log(`Cleanup completed: ${Exit.getOrElse(exit, String)}`)\n   * )\n   *\n   * // Define a successful effect\n   * const success = Console.log(\"Task completed\").pipe(\n   *   Effect.as(\"some result\"),\n   *   handler\n   * )\n   *\n   * Effect.runFork(success)\n   * // Output:\n   * // Task completed\n   * // Cleanup completed: some result\n   *\n   * // Define a failing effect\n   * const failure = Console.log(\"Task failed\").pipe(\n   *   Effect.andThen(Effect.fail(\"some error\")),\n   *   handler\n   * )\n   *\n   * Effect.runFork(failure)\n   * // Output:\n   * // Task failed\n   * // Cleanup completed: Error: some error\n   *\n   * // Define an interrupted effect\n   * const interruption = Console.log(\"Task interrupted\").pipe(\n   *   Effect.andThen(Effect.interrupt),\n   *   handler\n   * )\n   *\n   * Effect.runFork(interruption)\n   * // Output:\n   * // Task interrupted\n   * // Cleanup completed: All fibers interrupted without errors.\n   * ```\n   *\n   * @since 2.0.0\n   * @category Scoping, Resources & Finalization\n   */\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    cleanup: (exit: Exit.Exit<A, E>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = core.onExit\n\n/**\n * Ensures that finalizers are run concurrently when the scope of an effect is\n * closed.\n *\n * **Details**\n *\n * This function modifies the behavior of finalizers within a scoped workflow to\n * allow them to run concurrently when the scope is closed.\n *\n * By default, finalizers are executed sequentially in reverse order of their\n * addition, but this function changes that behavior to execute all finalizers\n * concurrently.\n *\n * **When to Use**\n *\n * Running finalizers concurrently can improve performance when multiple\n * independent cleanup tasks need to be performed. However, it requires that\n * these tasks do not depend on the order of execution or introduce race\n * conditions.\n *\n * **Example**\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * // Define a program that adds multiple finalizers\n * const program = Effect.gen(function*() {\n *   yield* Effect.addFinalizer(() => Console.log(\"Finalizer 1 executed\").pipe(Effect.delay(\"300 millis\")))\n *   yield* Effect.addFinalizer(() => Console.log(\"Finalizer 2 executed\").pipe(Effect.delay(\"100 millis\")))\n *   yield* Effect.addFinalizer(() => Console.log(\"Finalizer 3 executed\").pipe(Effect.delay(\"200 millis\")))\n *   return \"some result\"\n * })\n *\n * // Modify the program to ensure finalizers run in parallel\n * const modified = program.pipe(Effect.parallelFinalizers)\n *\n * const runnable = Effect.scoped(modified)\n *\n * Effect.runFork(runnable)\n * // Output:\n * // Finalizer 2 executed\n * // Finalizer 3 executed\n * // Finalizer 1 executed\n * ```\n *\n * @see {@link sequentialFinalizers} for a version that ensures finalizers are run sequentially.\n *\n * @since 2.0.0\n * @category Scoping, Resources & Finalization\n */\nexport const parallelFinalizers: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = fiberRuntime.parallelFinalizers\n\n/**\n * Ensures that finalizers are run sequentially in reverse order of their\n * addition.\n *\n * **Details**\n *\n * This function modifies the behavior of finalizers within a scoped workflow to\n * ensure they are run sequentially in reverse order when the scope is closed.\n *\n * By default, finalizers are executed sequentially, so this only changes the\n * behavior if the scope is configured to run finalizers concurrently.\n *\n * @see {@link parallelFinalizers} for a version that ensures finalizers are run concurrently.\n *\n * @since 2.0.0\n * @category Scoping, Resources & Finalization\n */\nexport const sequentialFinalizers: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> =\n  fiberRuntime.sequentialFinalizers\n\n/**\n * Applies a custom execution strategy to finalizers within a scoped workflow.\n *\n * **Details**\n *\n * This function allows you to control how finalizers are executed in a scope by\n * applying a specified `ExecutionStrategy`. The `strategy` can dictate whether\n * finalizers run (e.g., sequentially or in parallel).\n *\n * Additionally, the function provides a `restore` operation, which ensures that\n * the effect passed to it is executed under the default execution strategy.\n *\n * @since 2.0.0\n * @category Scoping, Resources & Finalization\n */\nexport const finalizersMask: (\n  strategy: ExecutionStrategy\n) => <A, E, R>(\n  self: (restore: <A1, E1, R1>(self: Effect<A1, E1, R1>) => Effect<A1, E1, R1>) => Effect<A, E, R>\n) => Effect<A, E, R> = fiberRuntime.finalizersMask\n\n/**\n * Provides access to the current scope in a scoped workflow.\n *\n * @since 2.0.0\n * @category Scoping, Resources & Finalization\n */\nexport const scope: Effect<Scope.Scope, never, Scope.Scope> = fiberRuntime.scope\n\n/**\n * Accesses the current scope and uses it to perform the specified effect.\n *\n * @since 2.0.0\n * @category Scoping, Resources & Finalization\n */\nexport const scopeWith: <A, E, R>(f: (scope: Scope.Scope) => Effect<A, E, R>) => Effect<A, E, R | Scope.Scope> =\n  fiberRuntime.scopeWith\n\n/**\n * Creates a `Scope`, passes it to the specified effectful function, and closes\n * the scope when the effect completes (whether through success, failure, or\n * interruption).\n *\n * @since 3.11.0\n * @category Scoping, Resources & Finalization\n */\nexport const scopedWith: <A, E, R>(f: (scope: Scope.Scope) => Effect<A, E, R>) => Effect<A, E, R> =\n  fiberRuntime.scopedWith\n\n/**\n * Scopes all resources used in an effect to the lifetime of the effect.\n *\n * **Details**\n *\n * This function ensures that all resources used within an effect are tied to\n * its lifetime. Finalizers for these resources are executed automatically when\n * the effect completes, whether through success, failure, or interruption. This\n * guarantees proper resource cleanup without requiring explicit management.\n *\n * @since 2.0.0\n * @category Scoping, Resources & Finalization\n */\nexport const scoped: <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, Exclude<R, Scope.Scope>> =\n  fiberRuntime.scopedEffect\n\n/**\n * Scopes all resources acquired by one effect to the lifetime of another\n * effect.\n *\n * **Details**\n *\n * This function allows you to scope the resources acquired by one effect\n * (`self`) to the lifetime of another effect (`use`). This ensures that the\n * resources are cleaned up as soon as the `use` effect completes, regardless of\n * how the `use` effect ends (success, failure, or interruption).\n *\n * **Example**\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * const acquire = Console.log(\"Acquiring resource\").pipe(\n *   Effect.as(1),\n *   Effect.tap(Effect.addFinalizer(() => Console.log(\"Releasing resource\")))\n * )\n * const use = (resource: number) => Console.log(`Using resource: ${resource}`)\n *\n * const program = acquire.pipe(Effect.using(use))\n *\n * Effect.runFork(program)\n * // Output:\n * // Acquiring resource\n * // Using resource: 1\n * // Releasing resource\n * ```\n *\n * @see {@link scopedWith} Manage scoped operations with a temporary scope.\n *\n * @since 2.0.0\n * @category Scoping, Resources & Finalization\n */\nexport const using: {\n  /**\n   * Scopes all resources acquired by one effect to the lifetime of another\n   * effect.\n   *\n   * **Details**\n   *\n   * This function allows you to scope the resources acquired by one effect\n   * (`self`) to the lifetime of another effect (`use`). This ensures that the\n   * resources are cleaned up as soon as the `use` effect completes, regardless of\n   * how the `use` effect ends (success, failure, or interruption).\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * const acquire = Console.log(\"Acquiring resource\").pipe(\n   *   Effect.as(1),\n   *   Effect.tap(Effect.addFinalizer(() => Console.log(\"Releasing resource\")))\n   * )\n   * const use = (resource: number) => Console.log(`Using resource: ${resource}`)\n   *\n   * const program = acquire.pipe(Effect.using(use))\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // Acquiring resource\n   * // Using resource: 1\n   * // Releasing resource\n   * ```\n   *\n   * @see {@link scopedWith} Manage scoped operations with a temporary scope.\n   *\n   * @since 2.0.0\n   * @category Scoping, Resources & Finalization\n   */\n  <A, A2, E2, R2>(use: (a: A) => Effect<A2, E2, R2>): <E, R>(self: Effect<A, E, R>) => Effect<A2, E2 | E, R2 | Exclude<R, Scope.Scope>>\n  /**\n   * Scopes all resources acquired by one effect to the lifetime of another\n   * effect.\n   *\n   * **Details**\n   *\n   * This function allows you to scope the resources acquired by one effect\n   * (`self`) to the lifetime of another effect (`use`). This ensures that the\n   * resources are cleaned up as soon as the `use` effect completes, regardless of\n   * how the `use` effect ends (success, failure, or interruption).\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * const acquire = Console.log(\"Acquiring resource\").pipe(\n   *   Effect.as(1),\n   *   Effect.tap(Effect.addFinalizer(() => Console.log(\"Releasing resource\")))\n   * )\n   * const use = (resource: number) => Console.log(`Using resource: ${resource}`)\n   *\n   * const program = acquire.pipe(Effect.using(use))\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // Acquiring resource\n   * // Using resource: 1\n   * // Releasing resource\n   * ```\n   *\n   * @see {@link scopedWith} Manage scoped operations with a temporary scope.\n   *\n   * @since 2.0.0\n   * @category Scoping, Resources & Finalization\n   */\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, use: (a: A) => Effect<A2, E2, R2>): Effect<A2, E | E2, R2 | Exclude<R, Scope.Scope>>\n} = fiberRuntime.using\n\n/**\n * Returns the result of the effect and a finalizer to close its scope.\n *\n * **Details**\n *\n * This function allows you to retrieve both the result of an effect and a\n * finalizer that can be used to manually close its scope. This is useful for\n * workflows where you need early access to the result while retaining control\n * over the resource cleanup process.\n *\n * **Example**\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * const acquire = Console.log(\"Acquiring resource\").pipe(\n *   Effect.as(1),\n *   Effect.tap(Effect.addFinalizer(() => Console.log(\"Releasing resource\")))\n * )\n * const program = Effect.gen(function*() {\n *   const [finalizer, resource] = yield* Effect.withEarlyRelease(acquire)\n *   console.log(`Using resource: ${resource}`)\n *   yield* Effect.sleep(\"1 second\")\n *   yield* finalizer\n * })\n *\n * Effect.runFork(program.pipe(Effect.scoped))\n * // Output:\n * // Acquiring resource\n * // Using resource: 1\n * // Releasing resource\n * ```\n *\n * @since 2.0.0\n * @category Scoping, Resources & Finalization\n */\nexport const withEarlyRelease: <A, E, R>(\n  self: Effect<A, E, R>\n) => Effect<[finalizer: Effect<void>, result: A], E, R | Scope.Scope> = fiberRuntime.withEarlyRelease\n\n/**\n * Returns a new effect that will not succeed with its value before first\n * waiting for the end of all child fibers forked by the effect.\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const awaitAllChildren: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = circular.awaitAllChildren\n\n/**\n * Returns a new workflow that will not supervise any fibers forked by this\n * workflow.\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const daemonChildren: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = fiberRuntime.daemonChildren\n\n/**\n * Constructs an effect with information about the current `Fiber`.\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const descriptor: Effect<Fiber.Fiber.Descriptor> = effect.descriptor\n\n/**\n * Constructs an effect based on information about the current `Fiber`.\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const descriptorWith: <A, E, R>(f: (descriptor: Fiber.Fiber.Descriptor) => Effect<A, E, R>) => Effect<A, E, R> =\n  effect.descriptorWith\n\n/**\n * Returns a new workflow that executes this one and captures the changes in\n * `FiberRef` values.\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const diffFiberRefs: <A, E, R>(\n  self: Effect<A, E, R>\n) => Effect<[FiberRefsPatch.FiberRefsPatch, A], E, R> = effect.diffFiberRefs\n\n/**\n * Acts on the children of this fiber (collected into a single fiber),\n * guaranteeing the specified callback will be invoked, whether or not this\n * effect succeeds.\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const ensuringChild: {\n  /**\n   * Acts on the children of this fiber (collected into a single fiber),\n   * guaranteeing the specified callback will be invoked, whether or not this\n   * effect succeeds.\n   *\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  <X, R2>(\n    f: (fiber: Fiber.Fiber<ReadonlyArray<unknown>, any>) => Effect<X, never, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  /**\n   * Acts on the children of this fiber (collected into a single fiber),\n   * guaranteeing the specified callback will be invoked, whether or not this\n   * effect succeeds.\n   *\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    f: (fiber: Fiber.Fiber<ReadonlyArray<unknown>, any>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = circular.ensuringChild\n\n/**\n * Acts on the children of this fiber, guaranteeing the specified callback\n * will be invoked, whether or not this effect succeeds.\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const ensuringChildren: {\n  /**\n   * Acts on the children of this fiber, guaranteeing the specified callback\n   * will be invoked, whether or not this effect succeeds.\n   *\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  <X, R2>(\n    children: (fibers: ReadonlyArray<Fiber.RuntimeFiber<any, any>>) => Effect<X, never, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  /**\n   * Acts on the children of this fiber, guaranteeing the specified callback\n   * will be invoked, whether or not this effect succeeds.\n   *\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    children: (fibers: ReadonlyArray<Fiber.RuntimeFiber<any, any>>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = circular.ensuringChildren\n\n/**\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const fiberId: Effect<FiberId.FiberId> = core.fiberId\n\n/**\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const fiberIdWith: <A, E, R>(f: (descriptor: FiberId.Runtime) => Effect<A, E, R>) => Effect<A, E, R> =\n  core.fiberIdWith\n\n/**\n * Creates a new fiber to run an effect concurrently.\n *\n * **Details**\n *\n * This function takes an effect and forks it into a separate fiber, allowing it\n * to run concurrently without blocking the original effect. The new fiber\n * starts execution immediately after being created, and the fiber object is\n * returned immediately without waiting for the effect to begin. This is useful\n * when you want to run tasks concurrently while continuing other tasks in the\n * parent fiber.\n *\n * The forked fiber is attached to the parent fiber's scope. This means that\n * when the parent fiber terminates, the child fiber will also be terminated\n * automatically. This feature, known as \"auto supervision,\" ensures that no\n * fibers are left running unintentionally. If you prefer not to have this auto\n * supervision behavior, you can use {@link forkDaemon} or {@link forkIn}.\n *\n * **When to Use**\n *\n * Use this function when you need to run an effect concurrently without\n * blocking the current execution flow. For example, you might use it to launch\n * background tasks or concurrent computations. However, working with fibers can\n * be complex, so before using this function directly, you might want to explore\n * higher-level functions like {@link raceWith}, {@link zip}, or others that can\n * manage concurrency for you.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const fib = (n: number): Effect.Effect<number> =>\n *   n < 2\n *     ? Effect.succeed(n)\n *     : Effect.zipWith(fib(n - 1), fib(n - 2), (a, b) => a + b)\n *\n * //      ┌─── Effect<RuntimeFiber<number, never>, never, never>\n * //      ▼\n * const fib10Fiber = Effect.fork(fib(10))\n * ```\n *\n * @see {@link forkWithErrorHandler} for a version that allows you to handle errors.\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const fork: <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R> = fiberRuntime.fork\n\n/**\n * Creates a long-running background fiber that is independent of its parent.\n *\n * **Details**\n *\n * This function creates a \"daemon\" fiber that runs in the background and is not\n * tied to the lifecycle of its parent fiber. Unlike normal fibers that stop\n * when the parent fiber terminates, a daemon fiber will continue running until\n * the global scope closes or the fiber completes naturally. This makes it\n * useful for tasks that need to run in the background independently, such as\n * periodic logging, monitoring, or background data processing.\n *\n * **Example** (Creating a Daemon Fiber)\n *\n * ```ts\n * import { Effect, Console, Schedule } from \"effect\"\n *\n * // Daemon fiber that logs a message repeatedly every second\n * const daemon = Effect.repeat(\n *   Console.log(\"daemon: still running!\"),\n *   Schedule.fixed(\"1 second\")\n * )\n *\n * const parent = Effect.gen(function* () {\n *   console.log(\"parent: started!\")\n *   // Daemon fiber running independently\n *   yield* Effect.forkDaemon(daemon)\n *   yield* Effect.sleep(\"3 seconds\")\n *   console.log(\"parent: finished!\")\n * })\n *\n * Effect.runFork(parent)\n * // Output:\n * // parent: started!\n * // daemon: still running!\n * // daemon: still running!\n * // daemon: still running!\n * // parent: finished!\n * // daemon: still running!\n * // daemon: still running!\n * // daemon: still running!\n * // daemon: still running!\n * // daemon: still running!\n * // ...etc...\n * ```\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const forkDaemon: <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R> =\n  fiberRuntime.forkDaemon\n\n/**\n * Returns an effect that forks all of the specified values, and returns a\n * composite fiber that produces a list of their results, in order.\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const forkAll: {\n  /**\n   * Returns an effect that forks all of the specified values, and returns a\n   * composite fiber that produces a list of their results, in order.\n   *\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  (options?: { readonly discard?: false | undefined } | undefined): <Eff extends Effect<any, any, any>>(\n    effects: Iterable<Eff>\n  ) => Effect<Fiber.Fiber<Array<Effect.Success<Eff>>, Effect.Error<Eff>>, never, Effect.Context<Eff>>\n  /**\n   * Returns an effect that forks all of the specified values, and returns a\n   * composite fiber that produces a list of their results, in order.\n   *\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  (options: { readonly discard: true }): <Eff extends Effect<any, any, any>>(effects: Iterable<Eff>) => Effect<void, never, Effect.Context<Eff>>\n  /**\n   * Returns an effect that forks all of the specified values, and returns a\n   * composite fiber that produces a list of their results, in order.\n   *\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  <Eff extends Effect<any, any, any>>(\n    effects: Iterable<Eff>,\n    options?: { readonly discard?: false | undefined } | undefined\n  ): Effect<Fiber.Fiber<Array<Effect.Success<Eff>>, Effect.Error<Eff>>, never, Effect.Context<Eff>>\n  /**\n   * Returns an effect that forks all of the specified values, and returns a\n   * composite fiber that produces a list of their results, in order.\n   *\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  <Eff extends Effect<any, any, any>>(effects: Iterable<Eff>, options: { readonly discard: true }): Effect<void, never, Effect.Context<Eff>>\n} = circular.forkAll\n\n/**\n * Forks an effect in a specific scope, allowing finer control over its\n * execution.\n *\n * **Details**\n *\n * There are some cases where we need more fine-grained control, so we want to\n * fork a fiber in a specific scope. We can use the `Effect.forkIn` operator\n * which takes the target scope as an argument.\n *\n * The fiber will be interrupted when the scope is closed.\n *\n * **Example** (Forking a Fiber in a Specific Scope)\n *\n * In this example, the child fiber is forked into the outerScope,\n * allowing it to outlive the inner scope but still be terminated\n * when the outerScope is closed.\n *\n * ```ts\n * import { Console, Effect, Schedule } from \"effect\"\n *\n * // Child fiber that logs a message repeatedly every second\n * const child = Effect.repeat(\n *   Console.log(\"child: still running!\"),\n *   Schedule.fixed(\"1 second\")\n * )\n *\n * const program = Effect.scoped(\n *   Effect.gen(function* () {\n *     yield* Effect.addFinalizer(() =>\n *       Console.log(\"The outer scope is about to be closed!\")\n *     )\n *\n *     // Capture the outer scope\n *     const outerScope = yield* Effect.scope\n *\n *     // Create an inner scope\n *     yield* Effect.scoped(\n *       Effect.gen(function* () {\n *         yield* Effect.addFinalizer(() =>\n *           Console.log(\"The inner scope is about to be closed!\")\n *         )\n *         // Fork the child fiber in the outer scope\n *         yield* Effect.forkIn(child, outerScope)\n *         yield* Effect.sleep(\"3 seconds\")\n *       })\n *     )\n *\n *     yield* Effect.sleep(\"5 seconds\")\n *   })\n * )\n *\n * Effect.runFork(program)\n * // Output:\n * // child: still running!\n * // child: still running!\n * // child: still running!\n * // The inner scope is about to be closed!\n * // child: still running!\n * // child: still running!\n * // child: still running!\n * // child: still running!\n * // child: still running!\n * // child: still running!\n * // The outer scope is about to be closed!\n * ```\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const forkIn: {\n  /**\n   * Forks an effect in a specific scope, allowing finer control over its\n   * execution.\n   *\n   * **Details**\n   *\n   * There are some cases where we need more fine-grained control, so we want to\n   * fork a fiber in a specific scope. We can use the `Effect.forkIn` operator\n   * which takes the target scope as an argument.\n   *\n   * The fiber will be interrupted when the scope is closed.\n   *\n   * **Example** (Forking a Fiber in a Specific Scope)\n   *\n   * In this example, the child fiber is forked into the outerScope,\n   * allowing it to outlive the inner scope but still be terminated\n   * when the outerScope is closed.\n   *\n   * ```ts\n   * import { Console, Effect, Schedule } from \"effect\"\n   *\n   * // Child fiber that logs a message repeatedly every second\n   * const child = Effect.repeat(\n   *   Console.log(\"child: still running!\"),\n   *   Schedule.fixed(\"1 second\")\n   * )\n   *\n   * const program = Effect.scoped(\n   *   Effect.gen(function* () {\n   *     yield* Effect.addFinalizer(() =>\n   *       Console.log(\"The outer scope is about to be closed!\")\n   *     )\n   *\n   *     // Capture the outer scope\n   *     const outerScope = yield* Effect.scope\n   *\n   *     // Create an inner scope\n   *     yield* Effect.scoped(\n   *       Effect.gen(function* () {\n   *         yield* Effect.addFinalizer(() =>\n   *           Console.log(\"The inner scope is about to be closed!\")\n   *         )\n   *         // Fork the child fiber in the outer scope\n   *         yield* Effect.forkIn(child, outerScope)\n   *         yield* Effect.sleep(\"3 seconds\")\n   *       })\n   *     )\n   *\n   *     yield* Effect.sleep(\"5 seconds\")\n   *   })\n   * )\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // child: still running!\n   * // child: still running!\n   * // child: still running!\n   * // The inner scope is about to be closed!\n   * // child: still running!\n   * // child: still running!\n   * // child: still running!\n   * // child: still running!\n   * // child: still running!\n   * // child: still running!\n   * // The outer scope is about to be closed!\n   * ```\n   *\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  (scope: Scope.Scope): <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R>\n  /**\n   * Forks an effect in a specific scope, allowing finer control over its\n   * execution.\n   *\n   * **Details**\n   *\n   * There are some cases where we need more fine-grained control, so we want to\n   * fork a fiber in a specific scope. We can use the `Effect.forkIn` operator\n   * which takes the target scope as an argument.\n   *\n   * The fiber will be interrupted when the scope is closed.\n   *\n   * **Example** (Forking a Fiber in a Specific Scope)\n   *\n   * In this example, the child fiber is forked into the outerScope,\n   * allowing it to outlive the inner scope but still be terminated\n   * when the outerScope is closed.\n   *\n   * ```ts\n   * import { Console, Effect, Schedule } from \"effect\"\n   *\n   * // Child fiber that logs a message repeatedly every second\n   * const child = Effect.repeat(\n   *   Console.log(\"child: still running!\"),\n   *   Schedule.fixed(\"1 second\")\n   * )\n   *\n   * const program = Effect.scoped(\n   *   Effect.gen(function* () {\n   *     yield* Effect.addFinalizer(() =>\n   *       Console.log(\"The outer scope is about to be closed!\")\n   *     )\n   *\n   *     // Capture the outer scope\n   *     const outerScope = yield* Effect.scope\n   *\n   *     // Create an inner scope\n   *     yield* Effect.scoped(\n   *       Effect.gen(function* () {\n   *         yield* Effect.addFinalizer(() =>\n   *           Console.log(\"The inner scope is about to be closed!\")\n   *         )\n   *         // Fork the child fiber in the outer scope\n   *         yield* Effect.forkIn(child, outerScope)\n   *         yield* Effect.sleep(\"3 seconds\")\n   *       })\n   *     )\n   *\n   *     yield* Effect.sleep(\"5 seconds\")\n   *   })\n   * )\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // child: still running!\n   * // child: still running!\n   * // child: still running!\n   * // The inner scope is about to be closed!\n   * // child: still running!\n   * // child: still running!\n   * // child: still running!\n   * // child: still running!\n   * // child: still running!\n   * // child: still running!\n   * // The outer scope is about to be closed!\n   * ```\n   *\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  <A, E, R>(self: Effect<A, E, R>, scope: Scope.Scope): Effect<Fiber.RuntimeFiber<A, E>, never, R>\n} = circular.forkIn\n\n/**\n * Forks a fiber in a local scope, ensuring it outlives its parent.\n *\n * **Details**\n *\n * This function is used to create fibers that are tied to a local scope,\n * meaning they are not dependent on their parent fiber's lifecycle. Instead,\n * they will continue running until the scope they were created in is closed.\n * This is particularly useful when you need a fiber to run independently of the\n * parent fiber, but still want it to be terminated when the scope ends.\n *\n * Fibers created with this function are isolated from the parent fiber’s\n * termination, so they can run for a longer period. This behavior is different\n * from fibers created with {@link fork}, which are terminated when the parent fiber\n * terminates. With `forkScoped`, the child fiber will keep running until the\n * local scope ends, regardless of the state of the parent fiber.\n *\n * **Example** (Forking a Fiber in a Local Scope)\n *\n * In this example, the child fiber continues to run beyond the lifetime of the parent fiber.\n * The child fiber is tied to the local scope and will be terminated only when the scope ends.\n *\n * ```ts\n * import { Effect, Console, Schedule } from \"effect\"\n *\n * // Child fiber that logs a message repeatedly every second\n * const child = Effect.repeat(\n *   Console.log(\"child: still running!\"),\n *   Schedule.fixed(\"1 second\")\n * )\n *\n * //      ┌─── Effect<void, never, Scope>\n * //      ▼\n * const parent = Effect.gen(function* () {\n *   console.log(\"parent: started!\")\n *   // Child fiber attached to local scope\n *   yield* Effect.forkScoped(child)\n *   yield* Effect.sleep(\"3 seconds\")\n *   console.log(\"parent: finished!\")\n * })\n *\n * // Program runs within a local scope\n * const program = Effect.scoped(\n *   Effect.gen(function* () {\n *     console.log(\"Local scope started!\")\n *     yield* Effect.fork(parent)\n *     // Scope lasts for 5 seconds\n *     yield* Effect.sleep(\"5 seconds\")\n *     console.log(\"Leaving the local scope!\")\n *   })\n * )\n *\n * Effect.runFork(program)\n * // Output:\n * // Local scope started!\n * // parent: started!\n * // child: still running!\n * // child: still running!\n * // child: still running!\n * // parent: finished!\n * // child: still running!\n * // child: still running!\n * // Leaving the local scope!\n * ```\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const forkScoped: <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, Scope.Scope | R> =\n  circular.forkScoped\n\n/**\n * Like {@link fork} but handles an error with the provided handler.\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const forkWithErrorHandler: {\n  /**\n   * Like {@link fork} but handles an error with the provided handler.\n   *\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  <E, X>(handler: (e: E) => Effect<X>): <A, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R>\n  /**\n   * Like {@link fork} but handles an error with the provided handler.\n   *\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  <A, E, R, X>(self: Effect<A, E, R>, handler: (e: E) => Effect<X>): Effect<Fiber.RuntimeFiber<A, E>, never, R>\n} = fiberRuntime.forkWithErrorHandler\n\n/**\n * Creates an `Effect` value that represents the exit value of the specified\n * fiber.\n *\n * @see {@link fromFiberEffect} for creating an effect from a fiber obtained from an effect.\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const fromFiber: <A, E>(fiber: Fiber.Fiber<A, E>) => Effect<A, E> = circular.fromFiber\n\n/**\n * Creates an `Effect` value that represents the exit value of a fiber obtained\n * from an effect.\n *\n * @see {@link fromFiber} for creating an effect from a fiber.\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const fromFiberEffect: <A, E, R>(fiber: Effect<Fiber.Fiber<A, E>, E, R>) => Effect<A, E, R> =\n  circular.fromFiberEffect\n\n/**\n * Supervises child fibers by reporting them to a specified supervisor.\n *\n * **Details**\n *\n * This function takes a supervisor as an argument and returns an effect where\n * all child fibers forked within it are supervised by the provided supervisor.\n * This enables you to capture detailed information about these child fibers,\n * such as their status, through the supervisor.\n *\n * **Example** (Monitoring Fiber Count)\n *\n * ```ts\n * import { Effect, Supervisor, Schedule, Fiber, FiberStatus } from \"effect\"\n *\n * // Main program that monitors fibers while calculating a Fibonacci number\n * const program = Effect.gen(function* () {\n *   // Create a supervisor to track child fibers\n *   const supervisor = yield* Supervisor.track\n *\n *   // Start a Fibonacci calculation, supervised by the supervisor\n *   const fibFiber = yield* fib(20).pipe(\n *     Effect.supervised(supervisor),\n *     // Fork the Fibonacci effect into a fiber\n *     Effect.fork\n *   )\n *\n *   // Define a schedule to periodically monitor the fiber count every 500ms\n *   const policy = Schedule.spaced(\"500 millis\").pipe(\n *     Schedule.whileInputEffect((_) =>\n *       Fiber.status(fibFiber).pipe(\n *         // Continue while the Fibonacci fiber is not done\n *         Effect.andThen((status) => status !== FiberStatus.done)\n *       )\n *     )\n *   )\n *\n *   // Start monitoring the fibers, using the supervisor to track the count\n *   const monitorFiber = yield* monitorFibers(supervisor).pipe(\n *     // Repeat the monitoring according to the schedule\n *     Effect.repeat(policy),\n *     // Fork the monitoring into its own fiber\n *     Effect.fork\n *   )\n *\n *   // Join the monitor and Fibonacci fibers to ensure they complete\n *   yield* Fiber.join(monitorFiber)\n *   const result = yield* Fiber.join(fibFiber)\n *\n *   console.log(`fibonacci result: ${result}`)\n * })\n *\n * // Function to monitor and log the number of active fibers\n * const monitorFibers = (\n *   supervisor: Supervisor.Supervisor<Array<Fiber.RuntimeFiber<any, any>>>\n * ): Effect.Effect<void> =>\n *   Effect.gen(function* () {\n *     const fibers = yield* supervisor.value // Get the current set of fibers\n *     console.log(`number of fibers: ${fibers.length}`)\n *   })\n *\n * // Recursive Fibonacci calculation, spawning fibers for each recursive step\n * const fib = (n: number): Effect.Effect<number> =>\n *   Effect.gen(function* () {\n *     if (n <= 1) {\n *       return 1\n *     }\n *     yield* Effect.sleep(\"500 millis\") // Simulate work by delaying\n *\n *     // Fork two fibers for the recursive Fibonacci calls\n *     const fiber1 = yield* Effect.fork(fib(n - 2))\n *     const fiber2 = yield* Effect.fork(fib(n - 1))\n *\n *     // Join the fibers to retrieve their results\n *     const v1 = yield* Fiber.join(fiber1)\n *     const v2 = yield* Fiber.join(fiber2)\n *\n *     return v1 + v2 // Combine the results\n *   })\n *\n * Effect.runPromise(program)\n * // Output:\n * // number of fibers: 0\n * // number of fibers: 2\n * // number of fibers: 6\n * // number of fibers: 14\n * // number of fibers: 30\n * // number of fibers: 62\n * // number of fibers: 126\n * // number of fibers: 254\n * // number of fibers: 510\n * // number of fibers: 1022\n * // number of fibers: 2034\n * // number of fibers: 3795\n * // number of fibers: 5810\n * // number of fibers: 6474\n * // number of fibers: 4942\n * // number of fibers: 2515\n * // number of fibers: 832\n * // number of fibers: 170\n * // number of fibers: 18\n * // number of fibers: 0\n * // fibonacci result: 10946\n * ```\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const supervised: {\n  /**\n   * Supervises child fibers by reporting them to a specified supervisor.\n   *\n   * **Details**\n   *\n   * This function takes a supervisor as an argument and returns an effect where\n   * all child fibers forked within it are supervised by the provided supervisor.\n   * This enables you to capture detailed information about these child fibers,\n   * such as their status, through the supervisor.\n   *\n   * **Example** (Monitoring Fiber Count)\n   *\n   * ```ts\n   * import { Effect, Supervisor, Schedule, Fiber, FiberStatus } from \"effect\"\n   *\n   * // Main program that monitors fibers while calculating a Fibonacci number\n   * const program = Effect.gen(function* () {\n   *   // Create a supervisor to track child fibers\n   *   const supervisor = yield* Supervisor.track\n   *\n   *   // Start a Fibonacci calculation, supervised by the supervisor\n   *   const fibFiber = yield* fib(20).pipe(\n   *     Effect.supervised(supervisor),\n   *     // Fork the Fibonacci effect into a fiber\n   *     Effect.fork\n   *   )\n   *\n   *   // Define a schedule to periodically monitor the fiber count every 500ms\n   *   const policy = Schedule.spaced(\"500 millis\").pipe(\n   *     Schedule.whileInputEffect((_) =>\n   *       Fiber.status(fibFiber).pipe(\n   *         // Continue while the Fibonacci fiber is not done\n   *         Effect.andThen((status) => status !== FiberStatus.done)\n   *       )\n   *     )\n   *   )\n   *\n   *   // Start monitoring the fibers, using the supervisor to track the count\n   *   const monitorFiber = yield* monitorFibers(supervisor).pipe(\n   *     // Repeat the monitoring according to the schedule\n   *     Effect.repeat(policy),\n   *     // Fork the monitoring into its own fiber\n   *     Effect.fork\n   *   )\n   *\n   *   // Join the monitor and Fibonacci fibers to ensure they complete\n   *   yield* Fiber.join(monitorFiber)\n   *   const result = yield* Fiber.join(fibFiber)\n   *\n   *   console.log(`fibonacci result: ${result}`)\n   * })\n   *\n   * // Function to monitor and log the number of active fibers\n   * const monitorFibers = (\n   *   supervisor: Supervisor.Supervisor<Array<Fiber.RuntimeFiber<any, any>>>\n   * ): Effect.Effect<void> =>\n   *   Effect.gen(function* () {\n   *     const fibers = yield* supervisor.value // Get the current set of fibers\n   *     console.log(`number of fibers: ${fibers.length}`)\n   *   })\n   *\n   * // Recursive Fibonacci calculation, spawning fibers for each recursive step\n   * const fib = (n: number): Effect.Effect<number> =>\n   *   Effect.gen(function* () {\n   *     if (n <= 1) {\n   *       return 1\n   *     }\n   *     yield* Effect.sleep(\"500 millis\") // Simulate work by delaying\n   *\n   *     // Fork two fibers for the recursive Fibonacci calls\n   *     const fiber1 = yield* Effect.fork(fib(n - 2))\n   *     const fiber2 = yield* Effect.fork(fib(n - 1))\n   *\n   *     // Join the fibers to retrieve their results\n   *     const v1 = yield* Fiber.join(fiber1)\n   *     const v2 = yield* Fiber.join(fiber2)\n   *\n   *     return v1 + v2 // Combine the results\n   *   })\n   *\n   * Effect.runPromise(program)\n   * // Output:\n   * // number of fibers: 0\n   * // number of fibers: 2\n   * // number of fibers: 6\n   * // number of fibers: 14\n   * // number of fibers: 30\n   * // number of fibers: 62\n   * // number of fibers: 126\n   * // number of fibers: 254\n   * // number of fibers: 510\n   * // number of fibers: 1022\n   * // number of fibers: 2034\n   * // number of fibers: 3795\n   * // number of fibers: 5810\n   * // number of fibers: 6474\n   * // number of fibers: 4942\n   * // number of fibers: 2515\n   * // number of fibers: 832\n   * // number of fibers: 170\n   * // number of fibers: 18\n   * // number of fibers: 0\n   * // fibonacci result: 10946\n   * ```\n   *\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  <X>(supervisor: Supervisor.Supervisor<X>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Supervises child fibers by reporting them to a specified supervisor.\n   *\n   * **Details**\n   *\n   * This function takes a supervisor as an argument and returns an effect where\n   * all child fibers forked within it are supervised by the provided supervisor.\n   * This enables you to capture detailed information about these child fibers,\n   * such as their status, through the supervisor.\n   *\n   * **Example** (Monitoring Fiber Count)\n   *\n   * ```ts\n   * import { Effect, Supervisor, Schedule, Fiber, FiberStatus } from \"effect\"\n   *\n   * // Main program that monitors fibers while calculating a Fibonacci number\n   * const program = Effect.gen(function* () {\n   *   // Create a supervisor to track child fibers\n   *   const supervisor = yield* Supervisor.track\n   *\n   *   // Start a Fibonacci calculation, supervised by the supervisor\n   *   const fibFiber = yield* fib(20).pipe(\n   *     Effect.supervised(supervisor),\n   *     // Fork the Fibonacci effect into a fiber\n   *     Effect.fork\n   *   )\n   *\n   *   // Define a schedule to periodically monitor the fiber count every 500ms\n   *   const policy = Schedule.spaced(\"500 millis\").pipe(\n   *     Schedule.whileInputEffect((_) =>\n   *       Fiber.status(fibFiber).pipe(\n   *         // Continue while the Fibonacci fiber is not done\n   *         Effect.andThen((status) => status !== FiberStatus.done)\n   *       )\n   *     )\n   *   )\n   *\n   *   // Start monitoring the fibers, using the supervisor to track the count\n   *   const monitorFiber = yield* monitorFibers(supervisor).pipe(\n   *     // Repeat the monitoring according to the schedule\n   *     Effect.repeat(policy),\n   *     // Fork the monitoring into its own fiber\n   *     Effect.fork\n   *   )\n   *\n   *   // Join the monitor and Fibonacci fibers to ensure they complete\n   *   yield* Fiber.join(monitorFiber)\n   *   const result = yield* Fiber.join(fibFiber)\n   *\n   *   console.log(`fibonacci result: ${result}`)\n   * })\n   *\n   * // Function to monitor and log the number of active fibers\n   * const monitorFibers = (\n   *   supervisor: Supervisor.Supervisor<Array<Fiber.RuntimeFiber<any, any>>>\n   * ): Effect.Effect<void> =>\n   *   Effect.gen(function* () {\n   *     const fibers = yield* supervisor.value // Get the current set of fibers\n   *     console.log(`number of fibers: ${fibers.length}`)\n   *   })\n   *\n   * // Recursive Fibonacci calculation, spawning fibers for each recursive step\n   * const fib = (n: number): Effect.Effect<number> =>\n   *   Effect.gen(function* () {\n   *     if (n <= 1) {\n   *       return 1\n   *     }\n   *     yield* Effect.sleep(\"500 millis\") // Simulate work by delaying\n   *\n   *     // Fork two fibers for the recursive Fibonacci calls\n   *     const fiber1 = yield* Effect.fork(fib(n - 2))\n   *     const fiber2 = yield* Effect.fork(fib(n - 1))\n   *\n   *     // Join the fibers to retrieve their results\n   *     const v1 = yield* Fiber.join(fiber1)\n   *     const v2 = yield* Fiber.join(fiber2)\n   *\n   *     return v1 + v2 // Combine the results\n   *   })\n   *\n   * Effect.runPromise(program)\n   * // Output:\n   * // number of fibers: 0\n   * // number of fibers: 2\n   * // number of fibers: 6\n   * // number of fibers: 14\n   * // number of fibers: 30\n   * // number of fibers: 62\n   * // number of fibers: 126\n   * // number of fibers: 254\n   * // number of fibers: 510\n   * // number of fibers: 1022\n   * // number of fibers: 2034\n   * // number of fibers: 3795\n   * // number of fibers: 5810\n   * // number of fibers: 6474\n   * // number of fibers: 4942\n   * // number of fibers: 2515\n   * // number of fibers: 832\n   * // number of fibers: 170\n   * // number of fibers: 18\n   * // number of fibers: 0\n   * // fibonacci result: 10946\n   * ```\n   *\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  <A, E, R, X>(self: Effect<A, E, R>, supervisor: Supervisor.Supervisor<X>): Effect<A, E, R>\n} = circular.supervised\n\n/**\n * Transplants specified effects so that when those effects fork other\n * effects, the forked effects will be governed by the scope of the fiber that\n * executes this effect.\n *\n * This can be used to \"graft\" deep grandchildren onto a higher-level scope,\n * effectively extending their lifespans into the parent scope.\n *\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const transplant: <A, E, R>(\n  f: (grafter: <A2, E2, R2>(effect: Effect<A2, E2, R2>) => Effect<A2, E2, R2>) => Effect<A, E, R>\n) => Effect<A, E, R> = core.transplant\n\n/**\n * @since 2.0.0\n * @category Supervision & Fibers\n */\nexport const withConcurrency: {\n  /**\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  (concurrency: number | \"unbounded\"): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category Supervision & Fibers\n   */\n  <A, E, R>(self: Effect<A, E, R>, concurrency: number | \"unbounded\"): Effect<A, E, R>\n} = core.withConcurrency\n\n/**\n * Sets the provided scheduler for usage in the wrapped effect\n *\n * @since 2.0.0\n * @category Scheduler\n */\nexport const withScheduler: {\n  /**\n   * Sets the provided scheduler for usage in the wrapped effect\n   *\n   * @since 2.0.0\n   * @category Scheduler\n   */\n  (scheduler: Scheduler.Scheduler): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Sets the provided scheduler for usage in the wrapped effect\n   *\n   * @since 2.0.0\n   * @category Scheduler\n   */\n  <A, E, R>(self: Effect<A, E, R>, scheduler: Scheduler.Scheduler): Effect<A, E, R>\n} = Scheduler.withScheduler\n\n/**\n * Sets the scheduling priority used when yielding\n *\n * @since 2.0.0\n * @category Scheduler\n */\nexport const withSchedulingPriority: {\n  /**\n   * Sets the scheduling priority used when yielding\n   *\n   * @since 2.0.0\n   * @category Scheduler\n   */\n  (priority: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Sets the scheduling priority used when yielding\n   *\n   * @since 2.0.0\n   * @category Scheduler\n   */\n  <A, E, R>(self: Effect<A, E, R>, priority: number): Effect<A, E, R>\n} = core.withSchedulingPriority\n\n/**\n * Sets the maximum number of operations before yield by the default schedulers\n *\n * @since 2.0.0\n * @category Scheduler\n */\nexport const withMaxOpsBeforeYield: {\n  /**\n   * Sets the maximum number of operations before yield by the default schedulers\n   *\n   * @since 2.0.0\n   * @category Scheduler\n   */\n  (priority: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Sets the maximum number of operations before yield by the default schedulers\n   *\n   * @since 2.0.0\n   * @category Scheduler\n   */\n  <A, E, R>(self: Effect<A, E, R>, priority: number): Effect<A, E, R>\n} = core.withMaxOpsBeforeYield\n\n/**\n * Retrieves the `Clock` service from the context.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   const clock = yield* Effect.clock\n *   const currentTime = yield* clock.currentTimeMillis\n *   console.log(`Current time in milliseconds: ${currentTime}`)\n * })\n *\n * Effect.runFork(program)\n * // Example Output:\n * // Current time in milliseconds: 1735484796134\n * ```\n *\n * @since 2.0.0\n * @category Clock\n */\nexport const clock: Effect<Clock.Clock> = effect.clock\n\n/**\n * Retrieves the `Clock` service from the context and provides it to the\n * specified effectful function.\n *\n * **Example**\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * const program = Effect.clockWith((clock) =>\n *   clock.currentTimeMillis.pipe(\n *     Effect.map((currentTime) => `Current time is: ${currentTime}`),\n *     Effect.tap(Console.log)\n *   )\n * )\n *\n * Effect.runFork(program)\n * // Example Output:\n * // Current time is: 1735484929744\n * ```\n *\n * @since 2.0.0\n * @category Clock\n */\nexport const clockWith: <A, E, R>(f: (clock: Clock.Clock) => Effect<A, E, R>) => Effect<A, E, R> = effect.clockWith\n\n/**\n * Sets the implementation of the `Clock` service to the specified value and\n * restores it to its original value when the scope is closed.\n *\n * @since 2.0.0\n * @category Clock\n */\nexport const withClockScoped: <C extends Clock.Clock>(clock: C) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withClockScoped\n\n/**\n * Executes the specified workflow with the specified implementation of the\n * `Clock` service.\n *\n * @since 2.0.0\n * @category Clock\n */\nexport const withClock: {\n  /**\n   * Executes the specified workflow with the specified implementation of the\n   * `Clock` service.\n   *\n   * @since 2.0.0\n   * @category Clock\n   */\n  <C extends Clock.Clock>(clock: C): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Executes the specified workflow with the specified implementation of the\n   * `Clock` service.\n   *\n   * @since 2.0.0\n   * @category Clock\n   */\n  <C extends Clock.Clock, A, E, R>(effect: Effect<A, E, R>, clock: C): Effect<A, E, R>\n} = defaultServices.withClock\n\n/**\n * Retreives the `Console` service from the context\n *\n * @since 2.0.0\n * @category Console\n */\nexport const console: Effect<Console> = console_.console\n\n/**\n * Retreives the `Console` service from the context and provides it to the\n * specified effectful function.\n *\n * @since 2.0.0\n * @category Console\n */\nexport const consoleWith: <A, E, R>(f: (console: Console) => Effect<A, E, R>) => Effect<A, E, R> = console_.consoleWith\n\n/**\n * Sets the implementation of the console service to the specified value and\n * restores it to its original value when the scope is closed.\n *\n * @since 2.0.0\n * @category Creating Effects\n */\nexport const withConsoleScoped: <A extends Console>(console: A) => Effect<void, never, Scope.Scope> =\n  console_.withConsoleScoped\n\n/**\n * Executes the specified workflow with the specified implementation of the\n * console service.\n *\n * @since 2.0.0\n * @category Console\n */\nexport const withConsole: {\n  /**\n   * Executes the specified workflow with the specified implementation of the\n   * console service.\n   *\n   * @since 2.0.0\n   * @category Console\n   */\n  <C extends Console>(console: C): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Executes the specified workflow with the specified implementation of the\n   * console service.\n   *\n   * @since 2.0.0\n   * @category Console\n   */\n  <A, E, R, C extends Console>(effect: Effect<A, E, R>, console: C): Effect<A, E, R>\n} = console_.withConsole\n\n/**\n * Delays the execution of an effect by a specified `Duration`.\n *\n * **Details\n *\n * This function postpones the execution of the provided effect by the specified\n * duration. The duration can be provided in various formats supported by the\n * `Duration` module.\n *\n * Internally, this function does not block the thread; instead, it uses an\n * efficient, non-blocking mechanism to introduce the delay.\n *\n * **Example**\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * const task = Console.log(\"Task executed\")\n *\n * const program = Console.log(\"start\").pipe(\n *   Effect.andThen(\n *     // Delays the log message by 2 seconds\n *     task.pipe(Effect.delay(\"2 seconds\"))\n *   )\n * )\n *\n * Effect.runFork(program)\n * // Output:\n * // start\n * // Task executed\n * ```\n *\n * @since 2.0.0\n * @category Delays & Timeouts\n */\nexport const delay: {\n  /**\n   * Delays the execution of an effect by a specified `Duration`.\n   *\n   * **Details\n   *\n   * This function postpones the execution of the provided effect by the specified\n   * duration. The duration can be provided in various formats supported by the\n   * `Duration` module.\n   *\n   * Internally, this function does not block the thread; instead, it uses an\n   * efficient, non-blocking mechanism to introduce the delay.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * const task = Console.log(\"Task executed\")\n   *\n   * const program = Console.log(\"start\").pipe(\n   *   Effect.andThen(\n   *     // Delays the log message by 2 seconds\n   *     task.pipe(Effect.delay(\"2 seconds\"))\n   *   )\n   * )\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // start\n   * // Task executed\n   * ```\n   *\n   * @since 2.0.0\n   * @category Delays & Timeouts\n   */\n  (duration: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Delays the execution of an effect by a specified `Duration`.\n   *\n   * **Details\n   *\n   * This function postpones the execution of the provided effect by the specified\n   * duration. The duration can be provided in various formats supported by the\n   * `Duration` module.\n   *\n   * Internally, this function does not block the thread; instead, it uses an\n   * efficient, non-blocking mechanism to introduce the delay.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Console, Effect } from \"effect\"\n   *\n   * const task = Console.log(\"Task executed\")\n   *\n   * const program = Console.log(\"start\").pipe(\n   *   Effect.andThen(\n   *     // Delays the log message by 2 seconds\n   *     task.pipe(Effect.delay(\"2 seconds\"))\n   *   )\n   * )\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // start\n   * // Task executed\n   * ```\n   *\n   * @since 2.0.0\n   * @category Delays & Timeouts\n   */\n  <A, E, R>(self: Effect<A, E, R>, duration: Duration.DurationInput): Effect<A, E, R>\n} = effect.delay\n\n/**\n * Suspends the execution of an effect for a specified `Duration`.\n *\n * **Details**\n *\n * This function pauses the execution of an effect for a given duration. It is\n * asynchronous, meaning that it does not block the fiber executing the effect.\n * Instead, the fiber is suspended during the delay period and can resume once\n * the specified time has passed.\n *\n * The duration can be specified using various formats supported by the\n * `Duration` module, such as a string (`\"2 seconds\"`) or numeric value\n * representing milliseconds.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   console.log(\"Starting task...\")\n *   yield* Effect.sleep(\"3 seconds\") // Waits for 3 seconds\n *   console.log(\"Task completed!\")\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // Starting task...\n * // Task completed!\n * ```\n *\n * @since 2.0.0\n * @category Delays & Timeouts\n */\nexport const sleep: (duration: Duration.DurationInput) => Effect<void> = effect.sleep\n\n/**\n * Executes an effect and measures the time it takes to complete.\n *\n * **Details**\n *\n * This function wraps the provided effect and returns a new effect that, when\n * executed, performs the original effect and calculates its execution duration.\n *\n * The result of the new effect includes both the execution time (as a\n * `Duration`) and the original effect's result. This is useful for monitoring\n * performance or gaining insights into the time taken by specific operations.\n *\n * The original effect's behavior (success, failure, or interruption) remains\n * unchanged, and the timing information is provided alongside the result in a\n * tuple.\n *\n * **Example**\n *\n * ```ts\n * import { Duration, Effect } from \"effect\"\n *\n * const task = Effect.gen(function*() {\n *   yield* Effect.sleep(\"2 seconds\") // Simulates some work\n *   return \"some result\"\n * })\n *\n * const timedTask = task.pipe(Effect.timed)\n *\n * const program = Effect.gen(function*() {\n *   const [duration, result] = yield* timedTask\n *   console.log(`Task completed in ${Duration.toMillis(duration)} ms with result: ${result}`)\n * })\n *\n * Effect.runFork(program)\n * // Output: Task completed in 2003.749125 ms with result: some result\n * ```\n *\n * @since 2.0.0\n * @category Delays & Timeouts\n */\nexport const timed: <A, E, R>(self: Effect<A, E, R>) => Effect<[duration: Duration.Duration, result: A], E, R> =\n  effect.timed\n\n/**\n * Executes an effect and measures its execution time using a custom clock.\n *\n * **Details**\n *\n * This function extends the functionality of {@link timed} by allowing you to\n * specify a custom clock for measuring the execution duration. The provided\n * effect (`nanoseconds`) represents the clock and should return the current\n * time in nanoseconds. The timing information is computed using this custom\n * clock instead of the default system clock.\n *\n * @since 2.0.0\n * @category Delays & Timeouts\n */\nexport const timedWith: {\n  /**\n   * Executes an effect and measures its execution time using a custom clock.\n   *\n   * **Details**\n   *\n   * This function extends the functionality of {@link timed} by allowing you to\n   * specify a custom clock for measuring the execution duration. The provided\n   * effect (`nanoseconds`) represents the clock and should return the current\n   * time in nanoseconds. The timing information is computed using this custom\n   * clock instead of the default system clock.\n   *\n   * @since 2.0.0\n   * @category Delays & Timeouts\n   */\n  <E1, R1>(nanoseconds: Effect<bigint, E1, R1>): <A, E, R>(self: Effect<A, E, R>) => Effect<[Duration.Duration, A], E1 | E, R1 | R>\n  /**\n   * Executes an effect and measures its execution time using a custom clock.\n   *\n   * **Details**\n   *\n   * This function extends the functionality of {@link timed} by allowing you to\n   * specify a custom clock for measuring the execution duration. The provided\n   * effect (`nanoseconds`) represents the clock and should return the current\n   * time in nanoseconds. The timing information is computed using this custom\n   * clock instead of the default system clock.\n   *\n   * @since 2.0.0\n   * @category Delays & Timeouts\n   */\n  <A, E, R, E1, R1>(self: Effect<A, E, R>, nanoseconds: Effect<bigint, E1, R1>): Effect<[Duration.Duration, A], E | E1, R | R1>\n} = effect.timedWith\n\n/**\n * Adds a time limit to an effect, triggering a timeout if the effect exceeds\n * the duration.\n *\n * **Details**\n *\n * This function allows you to enforce a time limit on the execution of an\n * effect. If the effect does not complete within the given duration, it fails\n * with a `TimeoutException`. This is useful for preventing tasks from hanging\n * indefinitely, especially in scenarios where responsiveness or resource limits\n * are critical.\n *\n * The returned effect will either:\n * - Succeed with the original effect's result if it completes within the\n *   specified duration.\n * - Fail with a `TimeoutException` if the time limit is exceeded.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const task = Effect.gen(function* () {\n *   console.log(\"Start processing...\")\n *   yield* Effect.sleep(\"2 seconds\") // Simulates a delay in processing\n *   console.log(\"Processing complete.\")\n *   return \"Result\"\n * })\n *\n * // Output will show a TimeoutException as the task takes longer\n * // than the specified timeout duration\n * const timedEffect = task.pipe(Effect.timeout(\"1 second\"))\n *\n * Effect.runPromiseExit(timedEffect).then(console.log)\n * // Output:\n * // Start processing...\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: {\n * //     _id: 'Cause',\n * //     _tag: 'Fail',\n * //     failure: { _tag: 'TimeoutException' }\n * //   }\n * // }\n * ```\n *\n * @see {@link timeoutFail} for a version that raises a custom error.\n * @see {@link timeoutFailCause} for a version that raises a custom defect.\n * @see {@link timeoutTo} for a version that allows specifying both success and\n * timeout handlers.\n *\n * @since 2.0.0\n * @category Delays & Timeouts\n */\nexport const timeout: {\n  /**\n   * Adds a time limit to an effect, triggering a timeout if the effect exceeds\n   * the duration.\n   *\n   * **Details**\n   *\n   * This function allows you to enforce a time limit on the execution of an\n   * effect. If the effect does not complete within the given duration, it fails\n   * with a `TimeoutException`. This is useful for preventing tasks from hanging\n   * indefinitely, especially in scenarios where responsiveness or resource limits\n   * are critical.\n   *\n   * The returned effect will either:\n   * - Succeed with the original effect's result if it completes within the\n   *   specified duration.\n   * - Fail with a `TimeoutException` if the time limit is exceeded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task = Effect.gen(function* () {\n   *   console.log(\"Start processing...\")\n   *   yield* Effect.sleep(\"2 seconds\") // Simulates a delay in processing\n   *   console.log(\"Processing complete.\")\n   *   return \"Result\"\n   * })\n   *\n   * // Output will show a TimeoutException as the task takes longer\n   * // than the specified timeout duration\n   * const timedEffect = task.pipe(Effect.timeout(\"1 second\"))\n   *\n   * Effect.runPromiseExit(timedEffect).then(console.log)\n   * // Output:\n   * // Start processing...\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: {\n   * //     _id: 'Cause',\n   * //     _tag: 'Fail',\n   * //     failure: { _tag: 'TimeoutException' }\n   * //   }\n   * // }\n   * ```\n   *\n   * @see {@link timeoutFail} for a version that raises a custom error.\n   * @see {@link timeoutFailCause} for a version that raises a custom defect.\n   * @see {@link timeoutTo} for a version that allows specifying both success and\n   * timeout handlers.\n   *\n   * @since 2.0.0\n   * @category Delays & Timeouts\n   */\n  (duration: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E | Cause.TimeoutException, R>\n  /**\n   * Adds a time limit to an effect, triggering a timeout if the effect exceeds\n   * the duration.\n   *\n   * **Details**\n   *\n   * This function allows you to enforce a time limit on the execution of an\n   * effect. If the effect does not complete within the given duration, it fails\n   * with a `TimeoutException`. This is useful for preventing tasks from hanging\n   * indefinitely, especially in scenarios where responsiveness or resource limits\n   * are critical.\n   *\n   * The returned effect will either:\n   * - Succeed with the original effect's result if it completes within the\n   *   specified duration.\n   * - Fail with a `TimeoutException` if the time limit is exceeded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task = Effect.gen(function* () {\n   *   console.log(\"Start processing...\")\n   *   yield* Effect.sleep(\"2 seconds\") // Simulates a delay in processing\n   *   console.log(\"Processing complete.\")\n   *   return \"Result\"\n   * })\n   *\n   * // Output will show a TimeoutException as the task takes longer\n   * // than the specified timeout duration\n   * const timedEffect = task.pipe(Effect.timeout(\"1 second\"))\n   *\n   * Effect.runPromiseExit(timedEffect).then(console.log)\n   * // Output:\n   * // Start processing...\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: {\n   * //     _id: 'Cause',\n   * //     _tag: 'Fail',\n   * //     failure: { _tag: 'TimeoutException' }\n   * //   }\n   * // }\n   * ```\n   *\n   * @see {@link timeoutFail} for a version that raises a custom error.\n   * @see {@link timeoutFailCause} for a version that raises a custom defect.\n   * @see {@link timeoutTo} for a version that allows specifying both success and\n   * timeout handlers.\n   *\n   * @since 2.0.0\n   * @category Delays & Timeouts\n   */\n  <A, E, R>(self: Effect<A, E, R>, duration: Duration.DurationInput): Effect<A, Cause.TimeoutException | E, R>\n} = circular.timeout\n\n/**\n * Gracefully handles timeouts by returning an `Option` that represents either\n * the result or a timeout.\n *\n * **Details**\n *\n * This function wraps the outcome of an effect in an `Option` type. If the\n * effect completes within the specified duration, it returns a `Some`\n * containing the result. If the effect times out, it returns a `None`. Unlike\n * other timeout methods, this approach does not raise errors or exceptions;\n * instead, it allows you to treat timeouts as a regular outcome, simplifying\n * the logic for handling delays.\n *\n * **When to Use**\n *\n * This is useful when you want to handle timeouts without causing the program\n * to fail, making it easier to manage situations where you expect tasks might\n * take too long but want to continue executing other tasks.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const task = Effect.gen(function* () {\n *   console.log(\"Start processing...\")\n *   yield* Effect.sleep(\"2 seconds\") // Simulates a delay in processing\n *   console.log(\"Processing complete.\")\n *   return \"Result\"\n * })\n *\n * const timedOutEffect = Effect.all([\n *   task.pipe(Effect.timeoutOption(\"3 seconds\")),\n *   task.pipe(Effect.timeoutOption(\"1 second\"))\n * ])\n *\n * Effect.runPromise(timedOutEffect).then(console.log)\n * // Output:\n * // Start processing...\n * // Processing complete.\n * // Start processing...\n * // [\n * //   { _id: 'Option', _tag: 'Some', value: 'Result' },\n * //   { _id: 'Option', _tag: 'None' }\n * // ]\n * ```\n *\n * @see {@link timeout} for a version that raises a `TimeoutException`.\n * @see {@link timeoutFail} for a version that raises a custom error.\n * @see {@link timeoutFailCause} for a version that raises a custom defect.\n * @see {@link timeoutTo} for a version that allows specifying both success and\n * timeout handlers.\n *\n * @since 3.1.0\n * @category Delays & Timeouts\n */\nexport const timeoutOption: {\n  /**\n   * Gracefully handles timeouts by returning an `Option` that represents either\n   * the result or a timeout.\n   *\n   * **Details**\n   *\n   * This function wraps the outcome of an effect in an `Option` type. If the\n   * effect completes within the specified duration, it returns a `Some`\n   * containing the result. If the effect times out, it returns a `None`. Unlike\n   * other timeout methods, this approach does not raise errors or exceptions;\n   * instead, it allows you to treat timeouts as a regular outcome, simplifying\n   * the logic for handling delays.\n   *\n   * **When to Use**\n   *\n   * This is useful when you want to handle timeouts without causing the program\n   * to fail, making it easier to manage situations where you expect tasks might\n   * take too long but want to continue executing other tasks.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task = Effect.gen(function* () {\n   *   console.log(\"Start processing...\")\n   *   yield* Effect.sleep(\"2 seconds\") // Simulates a delay in processing\n   *   console.log(\"Processing complete.\")\n   *   return \"Result\"\n   * })\n   *\n   * const timedOutEffect = Effect.all([\n   *   task.pipe(Effect.timeoutOption(\"3 seconds\")),\n   *   task.pipe(Effect.timeoutOption(\"1 second\"))\n   * ])\n   *\n   * Effect.runPromise(timedOutEffect).then(console.log)\n   * // Output:\n   * // Start processing...\n   * // Processing complete.\n   * // Start processing...\n   * // [\n   * //   { _id: 'Option', _tag: 'Some', value: 'Result' },\n   * //   { _id: 'Option', _tag: 'None' }\n   * // ]\n   * ```\n   *\n   * @see {@link timeout} for a version that raises a `TimeoutException`.\n   * @see {@link timeoutFail} for a version that raises a custom error.\n   * @see {@link timeoutFailCause} for a version that raises a custom defect.\n   * @see {@link timeoutTo} for a version that allows specifying both success and\n   * timeout handlers.\n   *\n   * @since 3.1.0\n   * @category Delays & Timeouts\n   */\n  (duration: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R>\n  /**\n   * Gracefully handles timeouts by returning an `Option` that represents either\n   * the result or a timeout.\n   *\n   * **Details**\n   *\n   * This function wraps the outcome of an effect in an `Option` type. If the\n   * effect completes within the specified duration, it returns a `Some`\n   * containing the result. If the effect times out, it returns a `None`. Unlike\n   * other timeout methods, this approach does not raise errors or exceptions;\n   * instead, it allows you to treat timeouts as a regular outcome, simplifying\n   * the logic for handling delays.\n   *\n   * **When to Use**\n   *\n   * This is useful when you want to handle timeouts without causing the program\n   * to fail, making it easier to manage situations where you expect tasks might\n   * take too long but want to continue executing other tasks.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task = Effect.gen(function* () {\n   *   console.log(\"Start processing...\")\n   *   yield* Effect.sleep(\"2 seconds\") // Simulates a delay in processing\n   *   console.log(\"Processing complete.\")\n   *   return \"Result\"\n   * })\n   *\n   * const timedOutEffect = Effect.all([\n   *   task.pipe(Effect.timeoutOption(\"3 seconds\")),\n   *   task.pipe(Effect.timeoutOption(\"1 second\"))\n   * ])\n   *\n   * Effect.runPromise(timedOutEffect).then(console.log)\n   * // Output:\n   * // Start processing...\n   * // Processing complete.\n   * // Start processing...\n   * // [\n   * //   { _id: 'Option', _tag: 'Some', value: 'Result' },\n   * //   { _id: 'Option', _tag: 'None' }\n   * // ]\n   * ```\n   *\n   * @see {@link timeout} for a version that raises a `TimeoutException`.\n   * @see {@link timeoutFail} for a version that raises a custom error.\n   * @see {@link timeoutFailCause} for a version that raises a custom defect.\n   * @see {@link timeoutTo} for a version that allows specifying both success and\n   * timeout handlers.\n   *\n   * @since 3.1.0\n   * @category Delays & Timeouts\n   */\n  <A, E, R>(self: Effect<A, E, R>, duration: Duration.DurationInput): Effect<Option.Option<A>, E, R>\n} = circular.timeoutOption\n\n/**\n * Specifies a custom error to be produced when a timeout occurs.\n *\n * **Details**\n *\n * This function allows you to handle timeouts in a customized way by defining a\n * specific error to be raised when an effect exceeds the given duration. Unlike\n * default timeout behaviors that use generic exceptions, this function gives\n * you the flexibility to specify a meaningful error type that aligns with your\n * application's needs.\n *\n * When you apply this function, you provide:\n * - A `duration`: The time limit for the effect.\n * - An `onTimeout` function: A lazy evaluation function that generates the\n *   custom error if the timeout occurs.\n *\n * If the effect completes within the time limit, its result is returned\n * normally. Otherwise, the `onTimeout` function is triggered, and its output is\n * used as the error for the effect.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const task = Effect.gen(function* () {\n *   console.log(\"Start processing...\")\n *   yield* Effect.sleep(\"2 seconds\") // Simulates a delay in processing\n *   console.log(\"Processing complete.\")\n *   return \"Result\"\n * })\n *\n * class MyTimeoutError {\n *   readonly _tag = \"MyTimeoutError\"\n * }\n *\n * const program = task.pipe(\n *   Effect.timeoutFail({\n *     duration: \"1 second\",\n *     onTimeout: () => new MyTimeoutError() // Custom timeout error\n *   })\n * )\n *\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // Start processing...\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: {\n * //     _id: 'Cause',\n * //     _tag: 'Fail',\n * //     failure: MyTimeoutError { _tag: 'MyTimeoutError' }\n * //   }\n * // }\n * ```\n *\n * @see {@link timeout} for a version that raises a `TimeoutException`.\n * @see {@link timeoutFailCause} for a version that raises a custom defect.\n * @see {@link timeoutTo} for a version that allows specifying both success and\n * timeout handlers.\n *\n * @since 2.0.0\n * @category Delays & Timeouts\n */\nexport const timeoutFail: {\n  /**\n   * Specifies a custom error to be produced when a timeout occurs.\n   *\n   * **Details**\n   *\n   * This function allows you to handle timeouts in a customized way by defining a\n   * specific error to be raised when an effect exceeds the given duration. Unlike\n   * default timeout behaviors that use generic exceptions, this function gives\n   * you the flexibility to specify a meaningful error type that aligns with your\n   * application's needs.\n   *\n   * When you apply this function, you provide:\n   * - A `duration`: The time limit for the effect.\n   * - An `onTimeout` function: A lazy evaluation function that generates the\n   *   custom error if the timeout occurs.\n   *\n   * If the effect completes within the time limit, its result is returned\n   * normally. Otherwise, the `onTimeout` function is triggered, and its output is\n   * used as the error for the effect.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task = Effect.gen(function* () {\n   *   console.log(\"Start processing...\")\n   *   yield* Effect.sleep(\"2 seconds\") // Simulates a delay in processing\n   *   console.log(\"Processing complete.\")\n   *   return \"Result\"\n   * })\n   *\n   * class MyTimeoutError {\n   *   readonly _tag = \"MyTimeoutError\"\n   * }\n   *\n   * const program = task.pipe(\n   *   Effect.timeoutFail({\n   *     duration: \"1 second\",\n   *     onTimeout: () => new MyTimeoutError() // Custom timeout error\n   *   })\n   * )\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // Start processing...\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: {\n   * //     _id: 'Cause',\n   * //     _tag: 'Fail',\n   * //     failure: MyTimeoutError { _tag: 'MyTimeoutError' }\n   * //   }\n   * // }\n   * ```\n   *\n   * @see {@link timeout} for a version that raises a `TimeoutException`.\n   * @see {@link timeoutFailCause} for a version that raises a custom defect.\n   * @see {@link timeoutTo} for a version that allows specifying both success and\n   * timeout handlers.\n   *\n   * @since 2.0.0\n   * @category Delays & Timeouts\n   */\n  <E1>(\n    options: { readonly onTimeout: LazyArg<E1>; readonly duration: Duration.DurationInput }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E1 | E, R>\n  /**\n   * Specifies a custom error to be produced when a timeout occurs.\n   *\n   * **Details**\n   *\n   * This function allows you to handle timeouts in a customized way by defining a\n   * specific error to be raised when an effect exceeds the given duration. Unlike\n   * default timeout behaviors that use generic exceptions, this function gives\n   * you the flexibility to specify a meaningful error type that aligns with your\n   * application's needs.\n   *\n   * When you apply this function, you provide:\n   * - A `duration`: The time limit for the effect.\n   * - An `onTimeout` function: A lazy evaluation function that generates the\n   *   custom error if the timeout occurs.\n   *\n   * If the effect completes within the time limit, its result is returned\n   * normally. Otherwise, the `onTimeout` function is triggered, and its output is\n   * used as the error for the effect.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task = Effect.gen(function* () {\n   *   console.log(\"Start processing...\")\n   *   yield* Effect.sleep(\"2 seconds\") // Simulates a delay in processing\n   *   console.log(\"Processing complete.\")\n   *   return \"Result\"\n   * })\n   *\n   * class MyTimeoutError {\n   *   readonly _tag = \"MyTimeoutError\"\n   * }\n   *\n   * const program = task.pipe(\n   *   Effect.timeoutFail({\n   *     duration: \"1 second\",\n   *     onTimeout: () => new MyTimeoutError() // Custom timeout error\n   *   })\n   * )\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // Start processing...\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: {\n   * //     _id: 'Cause',\n   * //     _tag: 'Fail',\n   * //     failure: MyTimeoutError { _tag: 'MyTimeoutError' }\n   * //   }\n   * // }\n   * ```\n   *\n   * @see {@link timeout} for a version that raises a `TimeoutException`.\n   * @see {@link timeoutFailCause} for a version that raises a custom defect.\n   * @see {@link timeoutTo} for a version that allows specifying both success and\n   * timeout handlers.\n   *\n   * @since 2.0.0\n   * @category Delays & Timeouts\n   */\n  <A, E, R, E1>(\n    self: Effect<A, E, R>,\n    options: { readonly onTimeout: LazyArg<E1>; readonly duration: Duration.DurationInput }\n  ): Effect<A, E | E1, R>\n} = circular.timeoutFail\n\n/**\n * Specifies a custom defect to be thrown when a timeout occurs.\n *\n * **Details**\n *\n * This function allows you to handle timeouts as exceptional cases by\n * generating a custom defect when an effect exceeds the specified duration. You\n * provide:\n * - A `duration`: The time limit for the effect.\n * - An `onTimeout` function: A lazy evaluation function that generates the\n *   custom defect (typically created using `Cause.die`).\n *\n * If the effect completes within the time limit, its result is returned\n * normally. Otherwise, the custom defect is triggered, and the effect fails\n * with that defect.\n *\n * **When to Use**\n *\n * This is especially useful when you need to treat timeouts as critical\n * failures in your application and wish to include meaningful information in\n * the defect.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Cause } from \"effect\"\n *\n * const task = Effect.gen(function* () {\n *   console.log(\"Start processing...\")\n *   yield* Effect.sleep(\"2 seconds\") // Simulates a delay in processing\n *   console.log(\"Processing complete.\")\n *   return \"Result\"\n * })\n *\n * const program = task.pipe(\n *   Effect.timeoutFailCause({\n *     duration: \"1 second\",\n *     onTimeout: () => Cause.die(\"Timed out!\") // Custom defect for timeout\n *   })\n * )\n *\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // Start processing...\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: { _id: 'Cause', _tag: 'Die', defect: 'Timed out!' }\n * // }\n * ```\n *\n * @see {@link timeout} for a version that raises a `TimeoutException`.\n * @see {@link timeoutFail} for a version that raises a custom error.\n * @see {@link timeoutTo} for a version that allows specifying both success and\n * timeout handlers.\n *\n * @since 2.0.0\n * @category Delays & Timeouts\n */\nexport const timeoutFailCause: {\n  /**\n   * Specifies a custom defect to be thrown when a timeout occurs.\n   *\n   * **Details**\n   *\n   * This function allows you to handle timeouts as exceptional cases by\n   * generating a custom defect when an effect exceeds the specified duration. You\n   * provide:\n   * - A `duration`: The time limit for the effect.\n   * - An `onTimeout` function: A lazy evaluation function that generates the\n   *   custom defect (typically created using `Cause.die`).\n   *\n   * If the effect completes within the time limit, its result is returned\n   * normally. Otherwise, the custom defect is triggered, and the effect fails\n   * with that defect.\n   *\n   * **When to Use**\n   *\n   * This is especially useful when you need to treat timeouts as critical\n   * failures in your application and wish to include meaningful information in\n   * the defect.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Cause } from \"effect\"\n   *\n   * const task = Effect.gen(function* () {\n   *   console.log(\"Start processing...\")\n   *   yield* Effect.sleep(\"2 seconds\") // Simulates a delay in processing\n   *   console.log(\"Processing complete.\")\n   *   return \"Result\"\n   * })\n   *\n   * const program = task.pipe(\n   *   Effect.timeoutFailCause({\n   *     duration: \"1 second\",\n   *     onTimeout: () => Cause.die(\"Timed out!\") // Custom defect for timeout\n   *   })\n   * )\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // Start processing...\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: { _id: 'Cause', _tag: 'Die', defect: 'Timed out!' }\n   * // }\n   * ```\n   *\n   * @see {@link timeout} for a version that raises a `TimeoutException`.\n   * @see {@link timeoutFail} for a version that raises a custom error.\n   * @see {@link timeoutTo} for a version that allows specifying both success and\n   * timeout handlers.\n   *\n   * @since 2.0.0\n   * @category Delays & Timeouts\n   */\n  <E1>(\n    options: { readonly onTimeout: LazyArg<Cause.Cause<E1>>; readonly duration: Duration.DurationInput }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E1 | E, R>\n  /**\n   * Specifies a custom defect to be thrown when a timeout occurs.\n   *\n   * **Details**\n   *\n   * This function allows you to handle timeouts as exceptional cases by\n   * generating a custom defect when an effect exceeds the specified duration. You\n   * provide:\n   * - A `duration`: The time limit for the effect.\n   * - An `onTimeout` function: A lazy evaluation function that generates the\n   *   custom defect (typically created using `Cause.die`).\n   *\n   * If the effect completes within the time limit, its result is returned\n   * normally. Otherwise, the custom defect is triggered, and the effect fails\n   * with that defect.\n   *\n   * **When to Use**\n   *\n   * This is especially useful when you need to treat timeouts as critical\n   * failures in your application and wish to include meaningful information in\n   * the defect.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Cause } from \"effect\"\n   *\n   * const task = Effect.gen(function* () {\n   *   console.log(\"Start processing...\")\n   *   yield* Effect.sleep(\"2 seconds\") // Simulates a delay in processing\n   *   console.log(\"Processing complete.\")\n   *   return \"Result\"\n   * })\n   *\n   * const program = task.pipe(\n   *   Effect.timeoutFailCause({\n   *     duration: \"1 second\",\n   *     onTimeout: () => Cause.die(\"Timed out!\") // Custom defect for timeout\n   *   })\n   * )\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // Start processing...\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: { _id: 'Cause', _tag: 'Die', defect: 'Timed out!' }\n   * // }\n   * ```\n   *\n   * @see {@link timeout} for a version that raises a `TimeoutException`.\n   * @see {@link timeoutFail} for a version that raises a custom error.\n   * @see {@link timeoutTo} for a version that allows specifying both success and\n   * timeout handlers.\n   *\n   * @since 2.0.0\n   * @category Delays & Timeouts\n   */\n  <A, E, R, E1>(\n    self: Effect<A, E, R>,\n    options: { readonly onTimeout: LazyArg<Cause.Cause<E1>>; readonly duration: Duration.DurationInput }\n  ): Effect<A, E | E1, R>\n} = circular.timeoutFailCause\n\n/**\n * Provides custom behavior for successful and timed-out operations.\n *\n * **Details**\n *\n * This function allows you to define distinct outcomes for an effect depending\n * on whether it completes within a specified time frame or exceeds the timeout\n * duration. You can provide:\n * - `onSuccess`: A handler for processing the result of the effect if it\n *   completes successfully within the time limit.\n * - `onTimeout`: A handler for generating a result when the effect times out.\n * - `duration`: The maximum allowed time for the effect to complete.\n *\n * **When to Use**\n *\n * Unlike {@link timeout}, which raises an exception for timeouts, this function\n * gives you full control over the behavior for both success and timeout\n * scenarios. It is particularly useful when you want to encapsulate timeouts\n * and successes into a specific data structure, like an `Either` type, to\n * represent these outcomes in a meaningful way.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Either } from \"effect\"\n *\n * const task = Effect.gen(function* () {\n *   console.log(\"Start processing...\")\n *   yield* Effect.sleep(\"2 seconds\") // Simulates a delay in processing\n *   console.log(\"Processing complete.\")\n *   return \"Result\"\n * })\n *\n * const program = task.pipe(\n *   Effect.timeoutTo({\n *     duration: \"1 second\",\n *     onSuccess: (result): Either.Either<string, string> =>\n *       Either.right(result),\n *     onTimeout: (): Either.Either<string, string> =>\n *       Either.left(\"Timed out!\")\n *   })\n * )\n *\n * Effect.runPromise(program).then(console.log)\n * // Output:\n * // Start processing...\n * // {\n * //   _id: \"Either\",\n * //   _tag: \"Left\",\n * //   left: \"Timed out!\"\n * // }\n * ```\n *\n * @see {@link timeout} for a version that raises a `TimeoutException`.\n * @see {@link timeoutFail} for a version that raises a custom error.\n * @see {@link timeoutFailCause} for a version that raises a custom defect.\n *\n * @since 2.0.0\n * @category Delays & Timeouts\n */\nexport const timeoutTo: {\n  /**\n   * Provides custom behavior for successful and timed-out operations.\n   *\n   * **Details**\n   *\n   * This function allows you to define distinct outcomes for an effect depending\n   * on whether it completes within a specified time frame or exceeds the timeout\n   * duration. You can provide:\n   * - `onSuccess`: A handler for processing the result of the effect if it\n   *   completes successfully within the time limit.\n   * - `onTimeout`: A handler for generating a result when the effect times out.\n   * - `duration`: The maximum allowed time for the effect to complete.\n   *\n   * **When to Use**\n   *\n   * Unlike {@link timeout}, which raises an exception for timeouts, this function\n   * gives you full control over the behavior for both success and timeout\n   * scenarios. It is particularly useful when you want to encapsulate timeouts\n   * and successes into a specific data structure, like an `Either` type, to\n   * represent these outcomes in a meaningful way.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Either } from \"effect\"\n   *\n   * const task = Effect.gen(function* () {\n   *   console.log(\"Start processing...\")\n   *   yield* Effect.sleep(\"2 seconds\") // Simulates a delay in processing\n   *   console.log(\"Processing complete.\")\n   *   return \"Result\"\n   * })\n   *\n   * const program = task.pipe(\n   *   Effect.timeoutTo({\n   *     duration: \"1 second\",\n   *     onSuccess: (result): Either.Either<string, string> =>\n   *       Either.right(result),\n   *     onTimeout: (): Either.Either<string, string> =>\n   *       Either.left(\"Timed out!\")\n   *   })\n   * )\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // Start processing...\n   * // {\n   * //   _id: \"Either\",\n   * //   _tag: \"Left\",\n   * //   left: \"Timed out!\"\n   * // }\n   * ```\n   *\n   * @see {@link timeout} for a version that raises a `TimeoutException`.\n   * @see {@link timeoutFail} for a version that raises a custom error.\n   * @see {@link timeoutFailCause} for a version that raises a custom defect.\n   *\n   * @since 2.0.0\n   * @category Delays & Timeouts\n   */\n  <A, B, B1>(\n    options: {\n      readonly onTimeout: LazyArg<B1>\n      readonly onSuccess: (a: A) => B\n      readonly duration: Duration.DurationInput\n    }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B | B1, E, R>\n  /**\n   * Provides custom behavior for successful and timed-out operations.\n   *\n   * **Details**\n   *\n   * This function allows you to define distinct outcomes for an effect depending\n   * on whether it completes within a specified time frame or exceeds the timeout\n   * duration. You can provide:\n   * - `onSuccess`: A handler for processing the result of the effect if it\n   *   completes successfully within the time limit.\n   * - `onTimeout`: A handler for generating a result when the effect times out.\n   * - `duration`: The maximum allowed time for the effect to complete.\n   *\n   * **When to Use**\n   *\n   * Unlike {@link timeout}, which raises an exception for timeouts, this function\n   * gives you full control over the behavior for both success and timeout\n   * scenarios. It is particularly useful when you want to encapsulate timeouts\n   * and successes into a specific data structure, like an `Either` type, to\n   * represent these outcomes in a meaningful way.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Either } from \"effect\"\n   *\n   * const task = Effect.gen(function* () {\n   *   console.log(\"Start processing...\")\n   *   yield* Effect.sleep(\"2 seconds\") // Simulates a delay in processing\n   *   console.log(\"Processing complete.\")\n   *   return \"Result\"\n   * })\n   *\n   * const program = task.pipe(\n   *   Effect.timeoutTo({\n   *     duration: \"1 second\",\n   *     onSuccess: (result): Either.Either<string, string> =>\n   *       Either.right(result),\n   *     onTimeout: (): Either.Either<string, string> =>\n   *       Either.left(\"Timed out!\")\n   *   })\n   * )\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // Start processing...\n   * // {\n   * //   _id: \"Either\",\n   * //   _tag: \"Left\",\n   * //   left: \"Timed out!\"\n   * // }\n   * ```\n   *\n   * @see {@link timeout} for a version that raises a `TimeoutException`.\n   * @see {@link timeoutFail} for a version that raises a custom error.\n   * @see {@link timeoutFailCause} for a version that raises a custom defect.\n   *\n   * @since 2.0.0\n   * @category Delays & Timeouts\n   */\n  <A, E, R, B1, B>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onTimeout: LazyArg<B1>\n      readonly onSuccess: (a: A) => B\n      readonly duration: Duration.DurationInput\n    }\n  ): Effect<B1 | B, E, R>\n} = circular.timeoutTo\n\n/**\n * Allows working with the default configuration provider.\n *\n * **Details**\n *\n * This function retrieves the default configuration provider and passes it to\n * the provided function, which can use it to perform computations or retrieve\n * configuration values. The function can return an effect that leverages the\n * configuration provider for its operations.\n *\n * @since 2.0.0\n * @category Config\n */\nexport const configProviderWith: <A, E, R>(f: (provider: ConfigProvider) => Effect<A, E, R>) => Effect<A, E, R> =\n  defaultServices.configProviderWith\n\n/**\n * Executes an effect using a specific configuration provider.\n *\n * **Details**\n *\n * This function lets you run an effect with a specified configuration provider.\n * The custom provider will override the default configuration provider for the\n * duration of the effect's execution.\n *\n * **When to Use**\n *\n * This is particularly useful when you need to use a different set of\n * configuration values or sources for specific parts of your application.\n *\n * **Example**\n *\n * ```ts\n * import { Config, ConfigProvider, Effect } from \"effect\"\n *\n * const customProvider: ConfigProvider.ConfigProvider = ConfigProvider.fromMap(\n *   new Map([[\"custom-key\", \"custom-value\"]])\n * )\n *\n * const program = Effect.withConfigProvider(customProvider)(\n *   Effect.gen(function*() {\n *     const value = yield* Config.string(\"custom-key\")\n *     console.log(`Config value: ${value}`)\n *   })\n * )\n *\n * Effect.runPromise(program)\n * // Output:\n * // Config value: custom-value\n * ```\n *\n * @since 2.0.0\n * @category Config\n */\nexport const withConfigProvider: {\n  /**\n   * Executes an effect using a specific configuration provider.\n   *\n   * **Details**\n   *\n   * This function lets you run an effect with a specified configuration provider.\n   * The custom provider will override the default configuration provider for the\n   * duration of the effect's execution.\n   *\n   * **When to Use**\n   *\n   * This is particularly useful when you need to use a different set of\n   * configuration values or sources for specific parts of your application.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Config, ConfigProvider, Effect } from \"effect\"\n   *\n   * const customProvider: ConfigProvider.ConfigProvider = ConfigProvider.fromMap(\n   *   new Map([[\"custom-key\", \"custom-value\"]])\n   * )\n   *\n   * const program = Effect.withConfigProvider(customProvider)(\n   *   Effect.gen(function*() {\n   *     const value = yield* Config.string(\"custom-key\")\n   *     console.log(`Config value: ${value}`)\n   *   })\n   * )\n   *\n   * Effect.runPromise(program)\n   * // Output:\n   * // Config value: custom-value\n   * ```\n   *\n   * @since 2.0.0\n   * @category Config\n   */\n  (provider: ConfigProvider): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Executes an effect using a specific configuration provider.\n   *\n   * **Details**\n   *\n   * This function lets you run an effect with a specified configuration provider.\n   * The custom provider will override the default configuration provider for the\n   * duration of the effect's execution.\n   *\n   * **When to Use**\n   *\n   * This is particularly useful when you need to use a different set of\n   * configuration values or sources for specific parts of your application.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Config, ConfigProvider, Effect } from \"effect\"\n   *\n   * const customProvider: ConfigProvider.ConfigProvider = ConfigProvider.fromMap(\n   *   new Map([[\"custom-key\", \"custom-value\"]])\n   * )\n   *\n   * const program = Effect.withConfigProvider(customProvider)(\n   *   Effect.gen(function*() {\n   *     const value = yield* Config.string(\"custom-key\")\n   *     console.log(`Config value: ${value}`)\n   *   })\n   * )\n   *\n   * Effect.runPromise(program)\n   * // Output:\n   * // Config value: custom-value\n   * ```\n   *\n   * @since 2.0.0\n   * @category Config\n   */\n  <A, E, R>(self: Effect<A, E, R>, provider: ConfigProvider): Effect<A, E, R>\n} = defaultServices.withConfigProvider\n\n/**\n * Sets a configuration provider within a scope.\n *\n * **Details**\n *\n * This function sets the configuration provider to a specified value and\n * ensures that it is restored to its original value when the scope is closed.\n *\n * @since 2.0.0\n * @category Config\n */\nexport const withConfigProviderScoped: (provider: ConfigProvider) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withConfigProviderScoped\n\n/**\n * Accesses the full context of the effect.\n *\n * **Details**\n *\n * This function provides the ability to access the entire context required by\n * an effect. The context is a container that holds dependencies or environment\n * values needed by an effect to run. By using this function, you can retrieve\n * and work with the context directly within an effect.\n *\n * @since 2.0.0\n * @category Context\n */\nexport const context: <R>() => Effect<Context.Context<R>, never, R> = core.context\n\n/**\n * Accesses the context and applies a transformation function.\n *\n * **Details**\n *\n * This function retrieves the context of the effect and applies a pure\n * transformation function to it. The result of the transformation is then\n * returned within the effect.\n *\n * @see {@link contextWithEffect} for a version that allows effectful transformations.\n *\n * @since 2.0.0\n * @category Context\n */\nexport const contextWith: <R, A>(f: (context: Context.Context<R>) => A) => Effect<A, never, R> = effect.contextWith\n\n/**\n * Accesses the context and performs an effectful transformation.\n *\n * **Details**\n *\n * This function retrieves the context and allows you to transform it\n * effectually using another effect. It is useful when the transformation\n * involves asynchronous or effectful operations.\n *\n * @see {@link contextWith} for a version that allows pure transformations.\n *\n * @since 2.0.0\n * @category Context\n */\nexport const contextWithEffect: <R2, A, E, R>(\n  f: (context: Context.Context<R2>) => Effect<A, E, R>\n) => Effect<A, E, R | R2> = core.contextWithEffect\n\n/**\n * Provides part of the required context while leaving the rest unchanged.\n *\n * **Details**\n *\n * This function allows you to transform the context required by an effect,\n * providing part of the context and leaving the rest to be fulfilled later.\n *\n * **Example**\n *\n * ```ts\n * import { Context, Effect } from \"effect\"\n *\n * class Service1 extends Context.Tag(\"Service1\")<Service1, { readonly port: number }>() {}\n * class Service2 extends Context.Tag(\"Service2\")<Service2, { readonly connection: string }>() {}\n *\n * const program = Effect.gen(function*() {\n *   const service1 = yield* Service1\n *   console.log(service1.port)\n *   const service2 = yield* Service2\n *   console.log(service2.connection)\n *   return \"some result\"\n * })\n *\n * //      ┌─── Effect<string, never, Service2>\n * //      ▼\n * const programWithService1 = Effect.mapInputContext(\n *   program,\n *   (ctx: Context.Context<Service2>) => Context.add(ctx, Service1, { port: 3000 })\n * )\n *\n * const runnable = programWithService1.pipe(\n *   Effect.provideService(Service2, { connection: \"localhost\" }),\n *   Effect.provideService(Service1, { port: 3001 })\n * )\n *\n * Effect.runPromise(runnable)\n * // Output:\n * // 3000\n * // localhost\n * ```\n *\n * @since 2.0.0\n * @category Context\n */\nexport const mapInputContext: {\n  /**\n   * Provides part of the required context while leaving the rest unchanged.\n   *\n   * **Details**\n   *\n   * This function allows you to transform the context required by an effect,\n   * providing part of the context and leaving the rest to be fulfilled later.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Context, Effect } from \"effect\"\n   *\n   * class Service1 extends Context.Tag(\"Service1\")<Service1, { readonly port: number }>() {}\n   * class Service2 extends Context.Tag(\"Service2\")<Service2, { readonly connection: string }>() {}\n   *\n   * const program = Effect.gen(function*() {\n   *   const service1 = yield* Service1\n   *   console.log(service1.port)\n   *   const service2 = yield* Service2\n   *   console.log(service2.connection)\n   *   return \"some result\"\n   * })\n   *\n   * //      ┌─── Effect<string, never, Service2>\n   * //      ▼\n   * const programWithService1 = Effect.mapInputContext(\n   *   program,\n   *   (ctx: Context.Context<Service2>) => Context.add(ctx, Service1, { port: 3000 })\n   * )\n   *\n   * const runnable = programWithService1.pipe(\n   *   Effect.provideService(Service2, { connection: \"localhost\" }),\n   *   Effect.provideService(Service1, { port: 3001 })\n   * )\n   *\n   * Effect.runPromise(runnable)\n   * // Output:\n   * // 3000\n   * // localhost\n   * ```\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <R2, R>(f: (context: Context.Context<R2>) => Context.Context<R>): <A, E>(self: Effect<A, E, R>) => Effect<A, E, R2>\n  /**\n   * Provides part of the required context while leaving the rest unchanged.\n   *\n   * **Details**\n   *\n   * This function allows you to transform the context required by an effect,\n   * providing part of the context and leaving the rest to be fulfilled later.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Context, Effect } from \"effect\"\n   *\n   * class Service1 extends Context.Tag(\"Service1\")<Service1, { readonly port: number }>() {}\n   * class Service2 extends Context.Tag(\"Service2\")<Service2, { readonly connection: string }>() {}\n   *\n   * const program = Effect.gen(function*() {\n   *   const service1 = yield* Service1\n   *   console.log(service1.port)\n   *   const service2 = yield* Service2\n   *   console.log(service2.connection)\n   *   return \"some result\"\n   * })\n   *\n   * //      ┌─── Effect<string, never, Service2>\n   * //      ▼\n   * const programWithService1 = Effect.mapInputContext(\n   *   program,\n   *   (ctx: Context.Context<Service2>) => Context.add(ctx, Service1, { port: 3000 })\n   * )\n   *\n   * const runnable = programWithService1.pipe(\n   *   Effect.provideService(Service2, { connection: \"localhost\" }),\n   *   Effect.provideService(Service1, { port: 3001 })\n   * )\n   *\n   * Effect.runPromise(runnable)\n   * // Output:\n   * // 3000\n   * // localhost\n   * ```\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <A, E, R, R2>(\n    self: Effect<A, E, R>,\n    f: (context: Context.Context<R2>) => Context.Context<R>\n  ): Effect<A, E, R2>\n} = core.mapInputContext\n\n/**\n * Provides necessary dependencies to an effect, removing its environmental\n * requirements.\n *\n * **Details**\n *\n * This function allows you to supply the required environment for an effect.\n * The environment can be provided in the form of one or more `Layer`s, a\n * `Context`, a `Runtime`, or a `ManagedRuntime`. Once the environment is\n * provided, the effect can run without requiring external dependencies.\n *\n * You can compose layers to create a modular and reusable way of setting up the\n * environment for effects. For example, layers can be used to configure\n * databases, logging services, or any other required dependencies.\n *\n * **Example**\n *\n * ```ts\n * import { Context, Effect, Layer } from \"effect\"\n *\n * class Database extends Context.Tag(\"Database\")<\n *   Database,\n *   { readonly query: (sql: string) => Effect.Effect<Array<unknown>> }\n * >() {}\n *\n * const DatabaseLive = Layer.succeed(\n *   Database,\n *   {\n *     // Simulate a database query\n *     query: (sql: string) => Effect.log(`Executing query: ${sql}`).pipe(Effect.as([]))\n *   }\n * )\n *\n * //      ┌─── Effect<unknown[], never, Database>\n * //      ▼\n * const program = Effect.gen(function*() {\n *   const database = yield* Database\n *   const result = yield* database.query(\"SELECT * FROM users\")\n *   return result\n * })\n *\n * //      ┌─── Effect<unknown[], never, never>\n * //      ▼\n * const runnable = Effect.provide(program, DatabaseLive)\n *\n * Effect.runPromise(runnable).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=\"Executing query: SELECT * FROM users\"\n * // []\n * ```\n *\n * @see {@link provideService} for providing a service to an effect.\n *\n * @since 2.0.0\n * @category Context\n */\nexport const provide: {\n  /**\n   * Provides necessary dependencies to an effect, removing its environmental\n   * requirements.\n   *\n   * **Details**\n   *\n   * This function allows you to supply the required environment for an effect.\n   * The environment can be provided in the form of one or more `Layer`s, a\n   * `Context`, a `Runtime`, or a `ManagedRuntime`. Once the environment is\n   * provided, the effect can run without requiring external dependencies.\n   *\n   * You can compose layers to create a modular and reusable way of setting up the\n   * environment for effects. For example, layers can be used to configure\n   * databases, logging services, or any other required dependencies.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Context, Effect, Layer } from \"effect\"\n   *\n   * class Database extends Context.Tag(\"Database\")<\n   *   Database,\n   *   { readonly query: (sql: string) => Effect.Effect<Array<unknown>> }\n   * >() {}\n   *\n   * const DatabaseLive = Layer.succeed(\n   *   Database,\n   *   {\n   *     // Simulate a database query\n   *     query: (sql: string) => Effect.log(`Executing query: ${sql}`).pipe(Effect.as([]))\n   *   }\n   * )\n   *\n   * //      ┌─── Effect<unknown[], never, Database>\n   * //      ▼\n   * const program = Effect.gen(function*() {\n   *   const database = yield* Database\n   *   const result = yield* database.query(\"SELECT * FROM users\")\n   *   return result\n   * })\n   *\n   * //      ┌─── Effect<unknown[], never, never>\n   * //      ▼\n   * const runnable = Effect.provide(program, DatabaseLive)\n   *\n   * Effect.runPromise(runnable).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"Executing query: SELECT * FROM users\"\n   * // []\n   * ```\n   *\n   * @see {@link provideService} for providing a service to an effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <const Layers extends readonly [Layer.Layer.Any, ...Array<Layer.Layer.Any>]>(layers: Layers): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => Effect<\n    A,\n    E | { [k in keyof Layers]: Layer.Layer.Error<Layers[k]> }[number],\n    | { [k in keyof Layers]: Layer.Layer.Context<Layers[k]> }[number]\n    | Exclude<R, { [k in keyof Layers]: Layer.Layer.Success<Layers[k]> }[number]>\n  >\n  /**\n   * Provides necessary dependencies to an effect, removing its environmental\n   * requirements.\n   *\n   * **Details**\n   *\n   * This function allows you to supply the required environment for an effect.\n   * The environment can be provided in the form of one or more `Layer`s, a\n   * `Context`, a `Runtime`, or a `ManagedRuntime`. Once the environment is\n   * provided, the effect can run without requiring external dependencies.\n   *\n   * You can compose layers to create a modular and reusable way of setting up the\n   * environment for effects. For example, layers can be used to configure\n   * databases, logging services, or any other required dependencies.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Context, Effect, Layer } from \"effect\"\n   *\n   * class Database extends Context.Tag(\"Database\")<\n   *   Database,\n   *   { readonly query: (sql: string) => Effect.Effect<Array<unknown>> }\n   * >() {}\n   *\n   * const DatabaseLive = Layer.succeed(\n   *   Database,\n   *   {\n   *     // Simulate a database query\n   *     query: (sql: string) => Effect.log(`Executing query: ${sql}`).pipe(Effect.as([]))\n   *   }\n   * )\n   *\n   * //      ┌─── Effect<unknown[], never, Database>\n   * //      ▼\n   * const program = Effect.gen(function*() {\n   *   const database = yield* Database\n   *   const result = yield* database.query(\"SELECT * FROM users\")\n   *   return result\n   * })\n   *\n   * //      ┌─── Effect<unknown[], never, never>\n   * //      ▼\n   * const runnable = Effect.provide(program, DatabaseLive)\n   *\n   * Effect.runPromise(runnable).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"Executing query: SELECT * FROM users\"\n   * // []\n   * ```\n   *\n   * @see {@link provideService} for providing a service to an effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <ROut, E2, RIn>(layer: Layer.Layer<ROut, E2, RIn>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E | E2, RIn | Exclude<R, ROut>>\n  /**\n   * Provides necessary dependencies to an effect, removing its environmental\n   * requirements.\n   *\n   * **Details**\n   *\n   * This function allows you to supply the required environment for an effect.\n   * The environment can be provided in the form of one or more `Layer`s, a\n   * `Context`, a `Runtime`, or a `ManagedRuntime`. Once the environment is\n   * provided, the effect can run without requiring external dependencies.\n   *\n   * You can compose layers to create a modular and reusable way of setting up the\n   * environment for effects. For example, layers can be used to configure\n   * databases, logging services, or any other required dependencies.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Context, Effect, Layer } from \"effect\"\n   *\n   * class Database extends Context.Tag(\"Database\")<\n   *   Database,\n   *   { readonly query: (sql: string) => Effect.Effect<Array<unknown>> }\n   * >() {}\n   *\n   * const DatabaseLive = Layer.succeed(\n   *   Database,\n   *   {\n   *     // Simulate a database query\n   *     query: (sql: string) => Effect.log(`Executing query: ${sql}`).pipe(Effect.as([]))\n   *   }\n   * )\n   *\n   * //      ┌─── Effect<unknown[], never, Database>\n   * //      ▼\n   * const program = Effect.gen(function*() {\n   *   const database = yield* Database\n   *   const result = yield* database.query(\"SELECT * FROM users\")\n   *   return result\n   * })\n   *\n   * //      ┌─── Effect<unknown[], never, never>\n   * //      ▼\n   * const runnable = Effect.provide(program, DatabaseLive)\n   *\n   * Effect.runPromise(runnable).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"Executing query: SELECT * FROM users\"\n   * // []\n   * ```\n   *\n   * @see {@link provideService} for providing a service to an effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <R2>(context: Context.Context<R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, R2>>\n  /**\n   * Provides necessary dependencies to an effect, removing its environmental\n   * requirements.\n   *\n   * **Details**\n   *\n   * This function allows you to supply the required environment for an effect.\n   * The environment can be provided in the form of one or more `Layer`s, a\n   * `Context`, a `Runtime`, or a `ManagedRuntime`. Once the environment is\n   * provided, the effect can run without requiring external dependencies.\n   *\n   * You can compose layers to create a modular and reusable way of setting up the\n   * environment for effects. For example, layers can be used to configure\n   * databases, logging services, or any other required dependencies.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Context, Effect, Layer } from \"effect\"\n   *\n   * class Database extends Context.Tag(\"Database\")<\n   *   Database,\n   *   { readonly query: (sql: string) => Effect.Effect<Array<unknown>> }\n   * >() {}\n   *\n   * const DatabaseLive = Layer.succeed(\n   *   Database,\n   *   {\n   *     // Simulate a database query\n   *     query: (sql: string) => Effect.log(`Executing query: ${sql}`).pipe(Effect.as([]))\n   *   }\n   * )\n   *\n   * //      ┌─── Effect<unknown[], never, Database>\n   * //      ▼\n   * const program = Effect.gen(function*() {\n   *   const database = yield* Database\n   *   const result = yield* database.query(\"SELECT * FROM users\")\n   *   return result\n   * })\n   *\n   * //      ┌─── Effect<unknown[], never, never>\n   * //      ▼\n   * const runnable = Effect.provide(program, DatabaseLive)\n   *\n   * Effect.runPromise(runnable).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"Executing query: SELECT * FROM users\"\n   * // []\n   * ```\n   *\n   * @see {@link provideService} for providing a service to an effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <R2>(runtime: Runtime.Runtime<R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, R2>>\n  /**\n   * Provides necessary dependencies to an effect, removing its environmental\n   * requirements.\n   *\n   * **Details**\n   *\n   * This function allows you to supply the required environment for an effect.\n   * The environment can be provided in the form of one or more `Layer`s, a\n   * `Context`, a `Runtime`, or a `ManagedRuntime`. Once the environment is\n   * provided, the effect can run without requiring external dependencies.\n   *\n   * You can compose layers to create a modular and reusable way of setting up the\n   * environment for effects. For example, layers can be used to configure\n   * databases, logging services, or any other required dependencies.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Context, Effect, Layer } from \"effect\"\n   *\n   * class Database extends Context.Tag(\"Database\")<\n   *   Database,\n   *   { readonly query: (sql: string) => Effect.Effect<Array<unknown>> }\n   * >() {}\n   *\n   * const DatabaseLive = Layer.succeed(\n   *   Database,\n   *   {\n   *     // Simulate a database query\n   *     query: (sql: string) => Effect.log(`Executing query: ${sql}`).pipe(Effect.as([]))\n   *   }\n   * )\n   *\n   * //      ┌─── Effect<unknown[], never, Database>\n   * //      ▼\n   * const program = Effect.gen(function*() {\n   *   const database = yield* Database\n   *   const result = yield* database.query(\"SELECT * FROM users\")\n   *   return result\n   * })\n   *\n   * //      ┌─── Effect<unknown[], never, never>\n   * //      ▼\n   * const runnable = Effect.provide(program, DatabaseLive)\n   *\n   * Effect.runPromise(runnable).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"Executing query: SELECT * FROM users\"\n   * // []\n   * ```\n   *\n   * @see {@link provideService} for providing a service to an effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <E2, R2>(managedRuntime: ManagedRuntime.ManagedRuntime<R2, E2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E | E2, Exclude<R, R2>>\n  /**\n   * Provides necessary dependencies to an effect, removing its environmental\n   * requirements.\n   *\n   * **Details**\n   *\n   * This function allows you to supply the required environment for an effect.\n   * The environment can be provided in the form of one or more `Layer`s, a\n   * `Context`, a `Runtime`, or a `ManagedRuntime`. Once the environment is\n   * provided, the effect can run without requiring external dependencies.\n   *\n   * You can compose layers to create a modular and reusable way of setting up the\n   * environment for effects. For example, layers can be used to configure\n   * databases, logging services, or any other required dependencies.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Context, Effect, Layer } from \"effect\"\n   *\n   * class Database extends Context.Tag(\"Database\")<\n   *   Database,\n   *   { readonly query: (sql: string) => Effect.Effect<Array<unknown>> }\n   * >() {}\n   *\n   * const DatabaseLive = Layer.succeed(\n   *   Database,\n   *   {\n   *     // Simulate a database query\n   *     query: (sql: string) => Effect.log(`Executing query: ${sql}`).pipe(Effect.as([]))\n   *   }\n   * )\n   *\n   * //      ┌─── Effect<unknown[], never, Database>\n   * //      ▼\n   * const program = Effect.gen(function*() {\n   *   const database = yield* Database\n   *   const result = yield* database.query(\"SELECT * FROM users\")\n   *   return result\n   * })\n   *\n   * //      ┌─── Effect<unknown[], never, never>\n   * //      ▼\n   * const runnable = Effect.provide(program, DatabaseLive)\n   *\n   * Effect.runPromise(runnable).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"Executing query: SELECT * FROM users\"\n   * // []\n   * ```\n   *\n   * @see {@link provideService} for providing a service to an effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <A, E, R, const Layers extends readonly [Layer.Layer.Any, ...Array<Layer.Layer.Any>]>(self: Effect<A, E, R>, layers: Layers): Effect<\n    A,\n    E | { [k in keyof Layers]: Layer.Layer.Error<Layers[k]> }[number],\n    | { [k in keyof Layers]: Layer.Layer.Context<Layers[k]> }[number]\n    | Exclude<R, { [k in keyof Layers]: Layer.Layer.Success<Layers[k]> }[number]>\n  >\n  /**\n   * Provides necessary dependencies to an effect, removing its environmental\n   * requirements.\n   *\n   * **Details**\n   *\n   * This function allows you to supply the required environment for an effect.\n   * The environment can be provided in the form of one or more `Layer`s, a\n   * `Context`, a `Runtime`, or a `ManagedRuntime`. Once the environment is\n   * provided, the effect can run without requiring external dependencies.\n   *\n   * You can compose layers to create a modular and reusable way of setting up the\n   * environment for effects. For example, layers can be used to configure\n   * databases, logging services, or any other required dependencies.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Context, Effect, Layer } from \"effect\"\n   *\n   * class Database extends Context.Tag(\"Database\")<\n   *   Database,\n   *   { readonly query: (sql: string) => Effect.Effect<Array<unknown>> }\n   * >() {}\n   *\n   * const DatabaseLive = Layer.succeed(\n   *   Database,\n   *   {\n   *     // Simulate a database query\n   *     query: (sql: string) => Effect.log(`Executing query: ${sql}`).pipe(Effect.as([]))\n   *   }\n   * )\n   *\n   * //      ┌─── Effect<unknown[], never, Database>\n   * //      ▼\n   * const program = Effect.gen(function*() {\n   *   const database = yield* Database\n   *   const result = yield* database.query(\"SELECT * FROM users\")\n   *   return result\n   * })\n   *\n   * //      ┌─── Effect<unknown[], never, never>\n   * //      ▼\n   * const runnable = Effect.provide(program, DatabaseLive)\n   *\n   * Effect.runPromise(runnable).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"Executing query: SELECT * FROM users\"\n   * // []\n   * ```\n   *\n   * @see {@link provideService} for providing a service to an effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <A, E, R, ROut, E2, RIn>(self: Effect<A, E, R>, layer: Layer.Layer<ROut, E2, RIn>): Effect<A, E | E2, RIn | Exclude<R, ROut>>\n  /**\n   * Provides necessary dependencies to an effect, removing its environmental\n   * requirements.\n   *\n   * **Details**\n   *\n   * This function allows you to supply the required environment for an effect.\n   * The environment can be provided in the form of one or more `Layer`s, a\n   * `Context`, a `Runtime`, or a `ManagedRuntime`. Once the environment is\n   * provided, the effect can run without requiring external dependencies.\n   *\n   * You can compose layers to create a modular and reusable way of setting up the\n   * environment for effects. For example, layers can be used to configure\n   * databases, logging services, or any other required dependencies.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Context, Effect, Layer } from \"effect\"\n   *\n   * class Database extends Context.Tag(\"Database\")<\n   *   Database,\n   *   { readonly query: (sql: string) => Effect.Effect<Array<unknown>> }\n   * >() {}\n   *\n   * const DatabaseLive = Layer.succeed(\n   *   Database,\n   *   {\n   *     // Simulate a database query\n   *     query: (sql: string) => Effect.log(`Executing query: ${sql}`).pipe(Effect.as([]))\n   *   }\n   * )\n   *\n   * //      ┌─── Effect<unknown[], never, Database>\n   * //      ▼\n   * const program = Effect.gen(function*() {\n   *   const database = yield* Database\n   *   const result = yield* database.query(\"SELECT * FROM users\")\n   *   return result\n   * })\n   *\n   * //      ┌─── Effect<unknown[], never, never>\n   * //      ▼\n   * const runnable = Effect.provide(program, DatabaseLive)\n   *\n   * Effect.runPromise(runnable).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"Executing query: SELECT * FROM users\"\n   * // []\n   * ```\n   *\n   * @see {@link provideService} for providing a service to an effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <A, E, R, R2>(self: Effect<A, E, R>, context: Context.Context<R2>): Effect<A, E, Exclude<R, R2>>\n  /**\n   * Provides necessary dependencies to an effect, removing its environmental\n   * requirements.\n   *\n   * **Details**\n   *\n   * This function allows you to supply the required environment for an effect.\n   * The environment can be provided in the form of one or more `Layer`s, a\n   * `Context`, a `Runtime`, or a `ManagedRuntime`. Once the environment is\n   * provided, the effect can run without requiring external dependencies.\n   *\n   * You can compose layers to create a modular and reusable way of setting up the\n   * environment for effects. For example, layers can be used to configure\n   * databases, logging services, or any other required dependencies.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Context, Effect, Layer } from \"effect\"\n   *\n   * class Database extends Context.Tag(\"Database\")<\n   *   Database,\n   *   { readonly query: (sql: string) => Effect.Effect<Array<unknown>> }\n   * >() {}\n   *\n   * const DatabaseLive = Layer.succeed(\n   *   Database,\n   *   {\n   *     // Simulate a database query\n   *     query: (sql: string) => Effect.log(`Executing query: ${sql}`).pipe(Effect.as([]))\n   *   }\n   * )\n   *\n   * //      ┌─── Effect<unknown[], never, Database>\n   * //      ▼\n   * const program = Effect.gen(function*() {\n   *   const database = yield* Database\n   *   const result = yield* database.query(\"SELECT * FROM users\")\n   *   return result\n   * })\n   *\n   * //      ┌─── Effect<unknown[], never, never>\n   * //      ▼\n   * const runnable = Effect.provide(program, DatabaseLive)\n   *\n   * Effect.runPromise(runnable).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"Executing query: SELECT * FROM users\"\n   * // []\n   * ```\n   *\n   * @see {@link provideService} for providing a service to an effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <A, E, R, R2>(self: Effect<A, E, R>, runtime: Runtime.Runtime<R2>): Effect<A, E, Exclude<R, R2>>\n  /**\n   * Provides necessary dependencies to an effect, removing its environmental\n   * requirements.\n   *\n   * **Details**\n   *\n   * This function allows you to supply the required environment for an effect.\n   * The environment can be provided in the form of one or more `Layer`s, a\n   * `Context`, a `Runtime`, or a `ManagedRuntime`. Once the environment is\n   * provided, the effect can run without requiring external dependencies.\n   *\n   * You can compose layers to create a modular and reusable way of setting up the\n   * environment for effects. For example, layers can be used to configure\n   * databases, logging services, or any other required dependencies.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Context, Effect, Layer } from \"effect\"\n   *\n   * class Database extends Context.Tag(\"Database\")<\n   *   Database,\n   *   { readonly query: (sql: string) => Effect.Effect<Array<unknown>> }\n   * >() {}\n   *\n   * const DatabaseLive = Layer.succeed(\n   *   Database,\n   *   {\n   *     // Simulate a database query\n   *     query: (sql: string) => Effect.log(`Executing query: ${sql}`).pipe(Effect.as([]))\n   *   }\n   * )\n   *\n   * //      ┌─── Effect<unknown[], never, Database>\n   * //      ▼\n   * const program = Effect.gen(function*() {\n   *   const database = yield* Database\n   *   const result = yield* database.query(\"SELECT * FROM users\")\n   *   return result\n   * })\n   *\n   * //      ┌─── Effect<unknown[], never, never>\n   * //      ▼\n   * const runnable = Effect.provide(program, DatabaseLive)\n   *\n   * Effect.runPromise(runnable).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"Executing query: SELECT * FROM users\"\n   * // []\n   * ```\n   *\n   * @see {@link provideService} for providing a service to an effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <A, E, E2, R, R2>(self: Effect<A, E, R>, runtime: ManagedRuntime.ManagedRuntime<R2, E2>): Effect<A, E | E2, Exclude<R, R2>>\n} = layer.effect_provide\n\n/**\n * Provides an implementation for a service in the context of an effect.\n *\n * **Details**\n *\n * This function allows you to supply a specific implementation for a service\n * required by an effect. Services are typically defined using `Context.Tag`,\n * which acts as a unique identifier for the service. By using this function,\n * you link the service to its concrete implementation, enabling the effect to\n * execute successfully without additional requirements.\n *\n * For example, you can use this function to provide a random number generator,\n * a logger, or any other service your effect depends on. Once the service is\n * provided, all parts of the effect that rely on the service will automatically\n * use the implementation you supplied.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Context } from \"effect\"\n *\n * // Declaring a tag for a service that generates random numbers\n * class Random extends Context.Tag(\"MyRandomService\")<\n *   Random,\n *   { readonly next: Effect.Effect<number> }\n * >() {}\n *\n * // Using the service\n * const program = Effect.gen(function* () {\n *   const random = yield* Random\n *   const randomNumber = yield* random.next\n *   console.log(`random number: ${randomNumber}`)\n * })\n *\n * // Providing the implementation\n * //\n * //      ┌─── Effect<void, never, never>\n * //      ▼\n * const runnable = Effect.provideService(program, Random, {\n *   next: Effect.sync(() => Math.random())\n * })\n *\n * // Run successfully\n * Effect.runPromise(runnable)\n * // Example Output:\n * // random number: 0.8241872233134417\n * ```\n *\n * @see {@link provide} for providing multiple layers to an effect.\n *\n * @since 2.0.0\n * @category Context\n */\nexport const provideService: {\n  /**\n   * Provides an implementation for a service in the context of an effect.\n   *\n   * **Details**\n   *\n   * This function allows you to supply a specific implementation for a service\n   * required by an effect. Services are typically defined using `Context.Tag`,\n   * which acts as a unique identifier for the service. By using this function,\n   * you link the service to its concrete implementation, enabling the effect to\n   * execute successfully without additional requirements.\n   *\n   * For example, you can use this function to provide a random number generator,\n   * a logger, or any other service your effect depends on. Once the service is\n   * provided, all parts of the effect that rely on the service will automatically\n   * use the implementation you supplied.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Context } from \"effect\"\n   *\n   * // Declaring a tag for a service that generates random numbers\n   * class Random extends Context.Tag(\"MyRandomService\")<\n   *   Random,\n   *   { readonly next: Effect.Effect<number> }\n   * >() {}\n   *\n   * // Using the service\n   * const program = Effect.gen(function* () {\n   *   const random = yield* Random\n   *   const randomNumber = yield* random.next\n   *   console.log(`random number: ${randomNumber}`)\n   * })\n   *\n   * // Providing the implementation\n   * //\n   * //      ┌─── Effect<void, never, never>\n   * //      ▼\n   * const runnable = Effect.provideService(program, Random, {\n   *   next: Effect.sync(() => Math.random())\n   * })\n   *\n   * // Run successfully\n   * Effect.runPromise(runnable)\n   * // Example Output:\n   * // random number: 0.8241872233134417\n   * ```\n   *\n   * @see {@link provide} for providing multiple layers to an effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <I, S>(tag: Context.Tag<I, S>, service: NoInfer<S>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, I>>\n  /**\n   * Provides an implementation for a service in the context of an effect.\n   *\n   * **Details**\n   *\n   * This function allows you to supply a specific implementation for a service\n   * required by an effect. Services are typically defined using `Context.Tag`,\n   * which acts as a unique identifier for the service. By using this function,\n   * you link the service to its concrete implementation, enabling the effect to\n   * execute successfully without additional requirements.\n   *\n   * For example, you can use this function to provide a random number generator,\n   * a logger, or any other service your effect depends on. Once the service is\n   * provided, all parts of the effect that rely on the service will automatically\n   * use the implementation you supplied.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Context } from \"effect\"\n   *\n   * // Declaring a tag for a service that generates random numbers\n   * class Random extends Context.Tag(\"MyRandomService\")<\n   *   Random,\n   *   { readonly next: Effect.Effect<number> }\n   * >() {}\n   *\n   * // Using the service\n   * const program = Effect.gen(function* () {\n   *   const random = yield* Random\n   *   const randomNumber = yield* random.next\n   *   console.log(`random number: ${randomNumber}`)\n   * })\n   *\n   * // Providing the implementation\n   * //\n   * //      ┌─── Effect<void, never, never>\n   * //      ▼\n   * const runnable = Effect.provideService(program, Random, {\n   *   next: Effect.sync(() => Math.random())\n   * })\n   *\n   * // Run successfully\n   * Effect.runPromise(runnable)\n   * // Example Output:\n   * // random number: 0.8241872233134417\n   * ```\n   *\n   * @see {@link provide} for providing multiple layers to an effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <A, E, R, I, S>(self: Effect<A, E, R>, tag: Context.Tag<I, S>, service: NoInfer<S>): Effect<A, E, Exclude<R, I>>\n} = effect.provideService\n\n/**\n * Dynamically provides an implementation for a service using an effect.\n *\n * **Details**\n *\n * This function allows you to provide an implementation for a service\n * dynamically by using another effect. The provided effect is executed to\n * produce the service implementation, which is then made available to the\n * consuming effect. This is particularly useful when the service implementation\n * itself requires asynchronous or resource-intensive initialization.\n *\n * For example, you can use this function to lazily initialize a database\n * connection or fetch configuration values from an external source before\n * making the service available to your effect.\n *\n * @since 2.0.0\n * @category Context\n */\nexport const provideServiceEffect: {\n  /**\n   * Dynamically provides an implementation for a service using an effect.\n   *\n   * **Details**\n   *\n   * This function allows you to provide an implementation for a service\n   * dynamically by using another effect. The provided effect is executed to\n   * produce the service implementation, which is then made available to the\n   * consuming effect. This is particularly useful when the service implementation\n   * itself requires asynchronous or resource-intensive initialization.\n   *\n   * For example, you can use this function to lazily initialize a database\n   * connection or fetch configuration values from an external source before\n   * making the service available to your effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <I, S, E1, R1>(tag: Context.Tag<I, S>, effect: Effect<NoInfer<S>, E1, R1>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E | E1, R1 | Exclude<R, I>>\n  /**\n   * Dynamically provides an implementation for a service using an effect.\n   *\n   * **Details**\n   *\n   * This function allows you to provide an implementation for a service\n   * dynamically by using another effect. The provided effect is executed to\n   * produce the service implementation, which is then made available to the\n   * consuming effect. This is particularly useful when the service implementation\n   * itself requires asynchronous or resource-intensive initialization.\n   *\n   * For example, you can use this function to lazily initialize a database\n   * connection or fetch configuration values from an external source before\n   * making the service available to your effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <A, E, R, I, S, E1, R1>(\n    self: Effect<A, E, R>,\n    tag: Context.Tag<I, S>,\n    effect: Effect<NoInfer<S>, E1, R1>\n  ): Effect<A, E | E1, R1 | Exclude<R, I>>\n} = effect.provideServiceEffect\n\n/**\n * Creates a function that uses a service from the context to produce a value.\n *\n * @see {@link serviceFunctionEffect} for a version that returns an effect.\n *\n * @since 2.0.0\n * @category Context\n */\nexport const serviceFunction: <T extends Effect<any, any, any>, Args extends Array<any>, A>(\n  getService: T,\n  f: (_: Effect.Success<T>) => (...args: Args) => A\n) => (...args: Args) => Effect<A, Effect.Error<T>, Effect.Context<T>> = effect.serviceFunction\n\n/**\n * Creates a function that uses a service from the context to produce an effect.\n *\n * @see {@link serviceFunction} for a version that returns a value.\n *\n * @since 2.0.0\n * @category Context\n */\nexport const serviceFunctionEffect: <T extends Effect<any, any, any>, Args extends Array<any>, A, E, R>(\n  getService: T,\n  f: (_: Effect.Success<T>) => (...args: Args) => Effect<A, E, R>\n) => (...args: Args) => Effect<A, E | Effect.Error<T>, R | Effect.Context<T>> = effect.serviceFunctionEffect\n\n/**\n * @since 2.0.0\n * @category Context\n */\nexport const serviceFunctions: <S, SE, SR>(\n  getService: Effect<S, SE, SR>\n) => {\n  [k in keyof S as S[k] extends (...args: Array<any>) => Effect<any, any, any> ? k : never]: S[k] extends\n    (...args: infer Args) => Effect<infer A, infer E, infer R> ? (...args: Args) => Effect<A, SE | E, SR | R>\n    : never\n} = effect.serviceFunctions as any\n\n/**\n * @since 2.0.0\n * @category Context\n */\nexport const serviceConstants: <S, SE, SR>(\n  getService: Effect<S, SE, SR>\n) => {\n  [k in { [k in keyof S]: k }[keyof S]]: S[k] extends Effect<infer A, infer E, infer R> ? Effect<A, SE | E, SR | R>\n    : Effect<S[k], SE, SR>\n} = effect.serviceConstants\n\n/**\n * @since 2.0.0\n * @category Context\n */\nexport const serviceMembers: <S, SE, SR>(\n  getService: Effect<S, SE, SR>\n) => {\n  functions: {\n    [k in keyof S as S[k] extends (...args: Array<any>) => Effect<any, any, any> ? k : never]: S[k] extends\n      (...args: infer Args) => Effect<infer A, infer E, infer R> ? (...args: Args) => Effect<A, SE | E, SR | R>\n      : never\n  }\n  constants: {\n    [k in { [k in keyof S]: k }[keyof S]]: S[k] extends Effect<infer A, infer E, infer R> ? Effect<A, SE | E, SR | R>\n      : Effect<S[k], SE, SR>\n  }\n} = effect.serviceMembers as any\n\n/**\n * Retrieves an optional service from the context as an `Option`.\n *\n * **Details**\n *\n * This function retrieves a service from the context and wraps it in an\n * `Option`. If the service is available, it returns a `Some` containing the\n * service. If the service is not found, it returns a `None`. This approach is\n * useful when you want to handle the absence of a service gracefully without\n * causing an error.\n *\n * **When to Use**\n *\n * Use this function when:\n * - You need to access a service that may or may not be present in the context.\n * - You want to handle the absence of a service using the `Option` type instead\n *   of throwing an error.\n *\n * @see {@link serviceOptional} for a version that throws an error if the service is missing.\n *\n * @since 2.0.0\n * @category Context\n */\nexport const serviceOption: <I, S>(tag: Context.Tag<I, S>) => Effect<Option.Option<S>> = effect.serviceOption\n\n/**\n * Retrieves a service from the context, throwing an error if it is missing.\n *\n * **Details**\n *\n * This function retrieves a required service from the context. If the service\n * is available, it returns the service. If the service is missing, it throws a\n * `NoSuchElementException`, which can be handled using Effect's error-handling\n * mechanisms. This is useful for services that are critical to the execution of\n * your effect.\n *\n * @see {@link serviceOption} for a version that returns an `Option` instead of throwing an error.\n *\n * @since 2.0.0\n * @category Context\n */\nexport const serviceOptional: <I, S>(tag: Context.Tag<I, S>) => Effect<S, Cause.NoSuchElementException> =\n  effect.serviceOptional\n\n/**\n * Updates a service in the context with a new implementation.\n *\n * **Details**\n *\n * This function modifies the existing implementation of a service in the\n * context. It retrieves the current service, applies the provided\n * transformation function `f`, and replaces the old service with the\n * transformed one.\n *\n * **When to Use**\n *\n * This is useful for adapting or extending a service's behavior during the\n * execution of an effect.\n *\n * @since 2.0.0\n * @category Context\n */\nexport const updateService: {\n  /**\n   * Updates a service in the context with a new implementation.\n   *\n   * **Details**\n   *\n   * This function modifies the existing implementation of a service in the\n   * context. It retrieves the current service, applies the provided\n   * transformation function `f`, and replaces the old service with the\n   * transformed one.\n   *\n   * **When to Use**\n   *\n   * This is useful for adapting or extending a service's behavior during the\n   * execution of an effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <I, S>(tag: Context.Tag<I, S>, f: (service: NoInfer<S>) => NoInfer<S>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R | I>\n  /**\n   * Updates a service in the context with a new implementation.\n   *\n   * **Details**\n   *\n   * This function modifies the existing implementation of a service in the\n   * context. It retrieves the current service, applies the provided\n   * transformation function `f`, and replaces the old service with the\n   * transformed one.\n   *\n   * **When to Use**\n   *\n   * This is useful for adapting or extending a service's behavior during the\n   * execution of an effect.\n   *\n   * @since 2.0.0\n   * @category Context\n   */\n  <A, E, R, I, S>(\n    self: Effect<A, E, R>,\n    tag: Context.Tag<I, S>,\n    f: (service: NoInfer<S>) => NoInfer<S>\n  ): Effect<A, E, R | I>\n} = effect.updateService\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * **Example**\n *\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Effect, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Effect.Do,\n *   Effect.bind(\"x\", () => Effect.succeed(2)),\n *   Effect.bind(\"y\", () => Effect.succeed(3)),\n *   Effect.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n * ```\n *\n * @see {@link bind}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @category Do notation\n * @since 2.0.0\n */\nexport const Do: Effect<{}> = effect.Do\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * **Example**\n *\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Effect, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Effect.Do,\n *   Effect.bind(\"x\", () => Effect.succeed(2)),\n *   Effect.bind(\"y\", () => Effect.succeed(3)),\n *   Effect.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n * ```\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @category Do notation\n * @since 2.0.0\n */\nexport const bind: {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * **Example**\n   *\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Effect, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bind(\"y\", () => Effect.succeed(3)),\n   *   Effect.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @category Do notation\n   * @since 2.0.0\n   */\n  <N extends string, A extends object, B, E2, R2>(name: Exclude<N, keyof A>, f: (a: NoInfer<A>) => Effect<B, E2, R2>): <E1, R1>(self: Effect<A, E1, R1>) => Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E2 | E1, R2 | R1>\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * **Example**\n   *\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Effect, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bind(\"y\", () => Effect.succeed(3)),\n   *   Effect.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @category Do notation\n   * @since 2.0.0\n   */\n  <A extends object, N extends string, E1, R1, B, E2, R2>(\n    self: Effect<A, E1, R1>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => Effect<B, E2, R2>\n  ): Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E1 | E2, R1 | R2>\n} = effect.bind\n\n/**\n * `bindAll` combines `all` with `bind`. It is useful\n * when you want to concurrently run multiple effects and then combine their\n * results in a Do notation pipeline.\n *\n * **Example**\n *\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Effect, Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Effect.Do,\n *   Effect.bind(\"x\", () => Effect.succeed(2)),\n *   Effect.bindAll(({ x }) => ({\n *     a: Effect.succeed(x),\n *     b: Effect.fail(\"oops\"),\n *   }), { concurrency: 2, mode: \"either\" })\n * )\n * assert.deepStrictEqual(Effect.runSync(result), { x: 2, a: Either.right(2), b: Either.left(\"oops\") })\n * ```\n *\n * @category Do notation\n * @since 3.7.0\n */\nexport const bindAll: {\n  /**\n   * `bindAll` combines `all` with `bind`. It is useful\n   * when you want to concurrently run multiple effects and then combine their\n   * results in a Do notation pipeline.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Effect, Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bindAll(({ x }) => ({\n   *     a: Effect.succeed(x),\n   *     b: Effect.fail(\"oops\"),\n   *   }), { concurrency: 2, mode: \"either\" })\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, a: Either.right(2), b: Either.left(\"oops\") })\n   * ```\n   *\n   * @category Do notation\n   * @since 3.7.0\n   */\n  <\n    A extends object,\n    X extends Record<string, Effect<any, any, any>>,\n    O extends NoExcessProperties<{\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }, O>\n  >(\n    f: (a: NoInfer<A>) => [Extract<keyof X, keyof A>] extends [never] ? X : `Duplicate keys`,\n    options?: undefined | O\n  ): <E1, R1>(\n    self: Effect<A, E1, R1>\n  ) => [All.ReturnObject<X, false, All.ExtractMode<O>>] extends [Effect<infer Success, infer Error, infer Context>]\n    ? Effect<\n      { [K in keyof A | keyof Success]: K extends keyof A ? A[K] : K extends keyof Success ? Success[K] : never },\n      E1 | Error,\n      R1 | Context\n    >\n    : never\n  /**\n   * `bindAll` combines `all` with `bind`. It is useful\n   * when you want to concurrently run multiple effects and then combine their\n   * results in a Do notation pipeline.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Effect, Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bindAll(({ x }) => ({\n   *     a: Effect.succeed(x),\n   *     b: Effect.fail(\"oops\"),\n   *   }), { concurrency: 2, mode: \"either\" })\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, a: Either.right(2), b: Either.left(\"oops\") })\n   * ```\n   *\n   * @category Do notation\n   * @since 3.7.0\n   */\n  <\n    A extends object,\n    X extends Record<string, Effect<any, any, any>>,\n    O extends NoExcessProperties<{\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }, O>,\n    E1,\n    R1\n  >(\n    self: Effect<A, E1, R1>,\n    f: (a: NoInfer<A>) => [Extract<keyof X, keyof A>] extends [never] ? X : `Duplicate keys`,\n    options?: undefined | {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): [All.ReturnObject<X, false, All.ExtractMode<O>>] extends [Effect<infer Success, infer Error, infer Context>]\n    ? Effect<\n      { [K in keyof A | keyof Success]: K extends keyof A ? A[K] : K extends keyof Success ? Success[K] : never },\n      E1 | Error,\n      R1 | Context\n    >\n    : never\n} = circular.bindAll\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * **Example**\n *\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Effect, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Effect.Do,\n *   Effect.bind(\"x\", () => Effect.succeed(2)),\n *   Effect.bind(\"y\", () => Effect.succeed(3)),\n *   Effect.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n * ```\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @category Do notation\n * @since 2.0.0\n */\nexport const bindTo: {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * **Example**\n   *\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Effect, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bind(\"y\", () => Effect.succeed(3)),\n   *   Effect.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @category Do notation\n   * @since 2.0.0\n   */\n  <N extends string>(name: N): <A, E, R>(self: Effect<A, E, R>) => Effect<{ [K in N]: A }, E, R>\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * **Example**\n   *\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Effect, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bind(\"y\", () => Effect.succeed(3)),\n   *   Effect.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @category Do notation\n   * @since 2.0.0\n   */\n  <A, E, R, N extends string>(self: Effect<A, E, R>, name: N): Effect<{ [K in N]: A }, E, R>\n} = effect.bindTo\n\nconst let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): <E, R>(self: Effect<A, E, R>) => Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n  <A extends object, N extends string, E, R, B>(\n    self: Effect<A, E, R>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n} = effect.let_\n\nexport {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * **Example**\n   *\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Effect, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bind(\"y\", () => Effect.succeed(3)),\n   *   Effect.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n   *\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link bindTo}\n   *\n   * @category Do notation\n   * @since 2.0.0\n   */\n  let_ as let\n}\n\n/**\n * Encapsulates the result of an effect in an `Option`.\n *\n * **Details**\n *\n * This function wraps the outcome of an effect in an `Option` type. If the\n * original effect succeeds, the success value is wrapped in `Option.some`. If\n * the effect fails, the failure is converted to `Option.none`.\n *\n * This is particularly useful for scenarios where you want to represent the\n * absence of a value explicitly, without causing the resulting effect to fail.\n * The resulting effect has an error type of `never`, meaning it cannot fail\n * directly. However, unrecoverable errors, also referred to as defects, are\n * not captured and will still result in failure.\n *\n * **Example** (Using Effect.option to Handle Errors)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const maybe1 = Effect.option(Effect.succeed(1))\n *\n * Effect.runPromiseExit(maybe1).then(console.log)\n * // Output:\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Success',\n * //   value: { _id: 'Option', _tag: 'Some', value: 1 }\n * // }\n *\n * const maybe2 = Effect.option(Effect.fail(\"Uh oh!\"))\n *\n * Effect.runPromiseExit(maybe2).then(console.log)\n * // Output:\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Success',\n * //   value: { _id: 'Option', _tag: 'None' }\n * // }\n *\n * const maybe3 = Effect.option(Effect.die(\"Boom!\"))\n *\n * Effect.runPromiseExit(maybe3).then(console.log)\n * // Output:\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: { _id: 'Cause', _tag: 'Die', defect: 'Boom!' }\n * // }\n * ```\n *\n * @see {@link either} for a version that uses `Either` instead.\n * @see {@link exit} for a version that encapsulates both recoverable errors and defects in an `Exit`.\n *\n * @since 2.0.0\n * @category Outcome Encapsulation\n */\nexport const option: <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, never, R> = effect.option\n\n/**\n * Encapsulates both success and failure of an `Effect` into an `Either` type.\n *\n * **Details**\n *\n * This function converts an effect that may fail into an effect that always\n * succeeds, wrapping the outcome in an `Either` type. The result will be\n * `Either.Left` if the effect fails, containing the recoverable error, or\n * `Either.Right` if it succeeds, containing the result.\n *\n * Using this function, you can handle recoverable errors explicitly without\n * causing the effect to fail. This is particularly useful in scenarios where\n * you want to chain effects and manage both success and failure in the same\n * logical flow.\n *\n * It's important to note that unrecoverable errors, often referred to as\n * \"defects,\" are still thrown and not captured within the `Either` type. Only\n * failures that are explicitly represented as recoverable errors in the effect\n * are encapsulated.\n *\n * The resulting effect cannot fail directly because all recoverable failures\n * are represented inside the `Either` type.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Either, Random } from \"effect\"\n *\n * class HttpError {\n *   readonly _tag = \"HttpError\"\n * }\n *\n * class ValidationError {\n *   readonly _tag = \"ValidationError\"\n * }\n *\n * //      ┌─── Effect<string, HttpError | ValidationError, never>\n * //      ▼\n * const program = Effect.gen(function* () {\n *   const n1 = yield* Random.next\n *   const n2 = yield* Random.next\n *   if (n1 < 0.5) {\n *     yield* Effect.fail(new HttpError())\n *   }\n *   if (n2 < 0.5) {\n *     yield* Effect.fail(new ValidationError())\n *   }\n *   return \"some result\"\n * })\n *\n * //      ┌─── Effect<string, never, never>\n * //      ▼\n * const recovered = Effect.gen(function* () {\n *   //      ┌─── Either<string, HttpError | ValidationError>\n *   //      ▼\n *   const failureOrSuccess = yield* Effect.either(program)\n *   return Either.match(failureOrSuccess, {\n *     onLeft: (error) => `Recovering from ${error._tag}`,\n *     onRight: (value) => value // Do nothing in case of success\n *   })\n * })\n * ```\n *\n * @see {@link option} for a version that uses `Option` instead.\n * @see {@link exit} for a version that encapsulates both recoverable errors and defects in an `Exit`.\n *\n * @since 2.0.0\n * @category Outcome Encapsulation\n */\nexport const either: <A, E, R>(self: Effect<A, E, R>) => Effect<Either.Either<A, E>, never, R> = core.either\n\n/**\n * Encapsulates both success and failure of an `Effect` using the `Exit` type.\n *\n * **Details**\n *\n * This function converts an effect into one that always succeeds, wrapping its\n * outcome in the `Exit` type. The `Exit` type provides explicit handling of\n * both success (`Exit.Success`) and failure (`Exit.Failure`) cases, including\n * defects (unrecoverable errors).\n *\n * Unlike {@link either} or {@link option}, this function also encapsulates\n * defects, which are typically unrecoverable and would otherwise terminate the\n * effect. With the `Exit` type, defects are represented in `Exit.Failure`,\n * allowing for detailed introspection and structured error handling.\n *\n * This makes the resulting effect robust and incapable of direct failure (its\n * error type is `never`). It is particularly useful for workflows where all\n * outcomes, including unexpected defects, must be managed and analyzed.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Cause, Console, Exit } from \"effect\"\n *\n * // Simulating a runtime error\n * const task = Effect.dieMessage(\"Boom!\")\n *\n * const program = Effect.gen(function* () {\n *   const exit = yield* Effect.exit(task)\n *   if (Exit.isFailure(exit)) {\n *     const cause = exit.cause\n *     if (\n *       Cause.isDieType(cause) &&\n *       Cause.isRuntimeException(cause.defect)\n *     ) {\n *       yield* Console.log(\n *         `RuntimeException defect caught: ${cause.defect.message}`\n *       )\n *     } else {\n *       yield* Console.log(\"Unknown failure caught.\")\n *     }\n *   }\n * })\n *\n * // We get an Exit.Success because we caught all failures\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // RuntimeException defect caught: Boom!\n * // {\n * //   _id: \"Exit\",\n * //   _tag: \"Success\",\n * //   value: undefined\n * // }\n * ```\n *\n * @see {@link option} for a version that uses `Option` instead.\n * @see {@link either} for a version that uses `Either` instead.\n *\n * @since 2.0.0\n * @category Outcome Encapsulation\n */\nexport const exit: <A, E, R>(self: Effect<A, E, R>) => Effect<Exit.Exit<A, E>, never, R> = core.exit\n\n/**\n * Converts an `Effect` into an operation that completes a `Deferred` with its result.\n *\n * **Details**\n *\n * The `intoDeferred` function takes an effect and a `Deferred` and ensures that the `Deferred`\n * is completed based on the outcome of the effect. If the effect succeeds, the `Deferred` is\n * completed with the success value. If the effect fails, the `Deferred` is completed with the\n * failure. Additionally, if the effect is interrupted, the `Deferred` will also be interrupted.\n *\n * **Example**\n *\n * ```ts\n * import { Deferred, Effect } from \"effect\"\n *\n * // Define an effect that succeeds\n * const successEffect = Effect.succeed(42)\n *\n * const program = Effect.gen(function*() {\n *   // Create a deferred\n *   const deferred = yield* Deferred.make<number, string>()\n *\n *   // Complete the deferred using the successEffect\n *   const isCompleted = yield* Effect.intoDeferred(successEffect, deferred)\n *\n *   // Access the value of the deferred\n *   const value = yield* Deferred.await(deferred)\n *   console.log(value)\n *\n *   return isCompleted\n * })\n *\n * Effect.runPromise(program).then(console.log)\n * // Output:\n * // 42\n * // true\n * ```\n *\n * @since 2.0.0\n * @category Synchronization Utilities\n */\nexport const intoDeferred: {\n  /**\n   * Converts an `Effect` into an operation that completes a `Deferred` with its result.\n   *\n   * **Details**\n   *\n   * The `intoDeferred` function takes an effect and a `Deferred` and ensures that the `Deferred`\n   * is completed based on the outcome of the effect. If the effect succeeds, the `Deferred` is\n   * completed with the success value. If the effect fails, the `Deferred` is completed with the\n   * failure. Additionally, if the effect is interrupted, the `Deferred` will also be interrupted.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Deferred, Effect } from \"effect\"\n   *\n   * // Define an effect that succeeds\n   * const successEffect = Effect.succeed(42)\n   *\n   * const program = Effect.gen(function*() {\n   *   // Create a deferred\n   *   const deferred = yield* Deferred.make<number, string>()\n   *\n   *   // Complete the deferred using the successEffect\n   *   const isCompleted = yield* Effect.intoDeferred(successEffect, deferred)\n   *\n   *   // Access the value of the deferred\n   *   const value = yield* Deferred.await(deferred)\n   *   console.log(value)\n   *\n   *   return isCompleted\n   * })\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // 42\n   * // true\n   * ```\n   *\n   * @since 2.0.0\n   * @category Synchronization Utilities\n   */\n  <A, E>(deferred: Deferred.Deferred<A, E>): <R>(self: Effect<A, E, R>) => Effect<boolean, never, R>\n  /**\n   * Converts an `Effect` into an operation that completes a `Deferred` with its result.\n   *\n   * **Details**\n   *\n   * The `intoDeferred` function takes an effect and a `Deferred` and ensures that the `Deferred`\n   * is completed based on the outcome of the effect. If the effect succeeds, the `Deferred` is\n   * completed with the success value. If the effect fails, the `Deferred` is completed with the\n   * failure. Additionally, if the effect is interrupted, the `Deferred` will also be interrupted.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Deferred, Effect } from \"effect\"\n   *\n   * // Define an effect that succeeds\n   * const successEffect = Effect.succeed(42)\n   *\n   * const program = Effect.gen(function*() {\n   *   // Create a deferred\n   *   const deferred = yield* Deferred.make<number, string>()\n   *\n   *   // Complete the deferred using the successEffect\n   *   const isCompleted = yield* Effect.intoDeferred(successEffect, deferred)\n   *\n   *   // Access the value of the deferred\n   *   const value = yield* Deferred.await(deferred)\n   *   console.log(value)\n   *\n   *   return isCompleted\n   * })\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // 42\n   * // true\n   * ```\n   *\n   * @since 2.0.0\n   * @category Synchronization Utilities\n   */\n  <A, E, R>(self: Effect<A, E, R>, deferred: Deferred.Deferred<A, E>): Effect<boolean, never, R>\n} = core.intoDeferred\n\nconst if_: {\n  <A1, E1, R1, A2, E2, R2>(\n    options: { readonly onTrue: LazyArg<Effect<A1, E1, R1>>; readonly onFalse: LazyArg<Effect<A2, E2, R2>> }\n  ): <E = never, R = never>(self: boolean | Effect<boolean, E, R>) => Effect<A1 | A2, E1 | E2 | E, R1 | R2 | R>\n  <A1, E1, R1, A2, E2, R2, E = never, R = never>(\n    self: boolean | Effect<boolean, E, R>,\n    options: { readonly onTrue: LazyArg<Effect<A1, E1, R1>>; readonly onFalse: LazyArg<Effect<A2, E2, R2>> }\n  ): Effect<A1 | A2, E1 | E2 | E, R1 | R2 | R>\n} = core.if_\n\nexport {\n  /**\n   * Executes one of two effects based on a condition evaluated by an effectful predicate.\n   *\n   * Use `if` to run one of two effects depending on whether the predicate effect\n   * evaluates to `true` or `false`. If the predicate is `true`, the `onTrue` effect\n   * is executed. If it is `false`, the `onFalse` effect is executed instead.\n   *\n   * **Example** (Simulating a Coin Flip)\n   *\n   * ```ts\n   * import { Effect, Random, Console } from \"effect\"\n   *\n   * const flipTheCoin = Effect.if(Random.nextBoolean, {\n   *   onTrue: () => Console.log(\"Head\"), // Runs if the predicate is true\n   *   onFalse: () => Console.log(\"Tail\") // Runs if the predicate is false\n   * })\n   *\n   * Effect.runFork(flipTheCoin)\n   * ```\n   *\n   * @since 2.0.0\n   * @category Conditional Operators\n   */\n  if_ as if\n}\n\n/**\n * Filters an effect, dying with a custom defect if the predicate fails.\n *\n * **Details**\n *\n * This function applies a predicate to the result of an effect. If the\n * predicate evaluates to `false`, the effect dies with a custom defect\n * generated by the `orDieWith` function.\n *\n * **When to Use**\n *\n * This is useful for enforcing constraints on values and treating violations as\n * fatal program errors.\n *\n * @since 2.0.0\n * @category Filtering\n */\nexport const filterOrDie: {\n  /**\n   * Filters an effect, dying with a custom defect if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect dies with a custom defect\n   * generated by the `orDieWith` function.\n   *\n   * **When to Use**\n   *\n   * This is useful for enforcing constraints on values and treating violations as\n   * fatal program errors.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orDieWith: (a: EqualsWith<A, B, A, Exclude<A, B>>) => unknown\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  /**\n   * Filters an effect, dying with a custom defect if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect dies with a custom defect\n   * generated by the `orDieWith` function.\n   *\n   * **When to Use**\n   *\n   * This is useful for enforcing constraints on values and treating violations as\n   * fatal program errors.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A>(predicate: Predicate<NoInfer<A>>, orDieWith: (a: NoInfer<A>) => unknown): <E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Filters an effect, dying with a custom defect if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect dies with a custom defect\n   * generated by the `orDieWith` function.\n   *\n   * **When to Use**\n   *\n   * This is useful for enforcing constraints on values and treating violations as\n   * fatal program errors.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, E, R, B extends A>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<A, B>,\n    orDieWith: (a: EqualsWith<A, B, A, Exclude<A, B>>) => unknown\n  ): Effect<B, E, R>\n  /**\n   * Filters an effect, dying with a custom defect if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect dies with a custom defect\n   * generated by the `orDieWith` function.\n   *\n   * **When to Use**\n   *\n   * This is useful for enforcing constraints on values and treating violations as\n   * fatal program errors.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    predicate: Predicate<A>,\n    orDieWith: (a: A) => unknown\n  ): Effect<A, E, R>\n} = effect.filterOrDie\n\n/**\n * Filters an effect, dying with a custom message if the predicate fails.\n *\n * **Details**\n *\n * This function works like {@link filterOrDie} but allows you to specify a\n * custom error message to describe the reason for the failure. The message is\n * included in the defect when the predicate evaluates to `false`.\n *\n * @since 2.0.0\n * @category Filtering\n */\nexport const filterOrDieMessage: {\n  /**\n   * Filters an effect, dying with a custom message if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function works like {@link filterOrDie} but allows you to specify a\n   * custom error message to describe the reason for the failure. The message is\n   * included in the defect when the predicate evaluates to `false`.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>, message: string): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  /**\n   * Filters an effect, dying with a custom message if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function works like {@link filterOrDie} but allows you to specify a\n   * custom error message to describe the reason for the failure. The message is\n   * included in the defect when the predicate evaluates to `false`.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A>(predicate: Predicate<NoInfer<A>>, message: string): <E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Filters an effect, dying with a custom message if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function works like {@link filterOrDie} but allows you to specify a\n   * custom error message to describe the reason for the failure. The message is\n   * included in the defect when the predicate evaluates to `false`.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, E, R, B extends A>(self: Effect<A, E, R>, refinement: Refinement<A, B>, message: string): Effect<B, E, R>\n  /**\n   * Filters an effect, dying with a custom message if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function works like {@link filterOrDie} but allows you to specify a\n   * custom error message to describe the reason for the failure. The message is\n   * included in the defect when the predicate evaluates to `false`.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, E, R>(self: Effect<A, E, R>, predicate: Predicate<A>, message: string): Effect<A, E, R>\n} = effect.filterOrDieMessage\n\n/**\n * Filters an effect, providing an alternative effect if the predicate fails.\n *\n * **Details**\n *\n * This function applies a predicate to the result of an effect. If the\n * predicate evaluates to `false`, it executes the `orElse` effect instead. The\n * `orElse` effect can produce an alternative value or perform additional\n * computations.\n *\n * @since 2.0.0\n * @category Filtering\n */\nexport const filterOrElse: {\n  /**\n   * Filters an effect, providing an alternative effect if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, it executes the `orElse` effect instead. The\n   * `orElse` effect can produce an alternative value or perform additional\n   * computations.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, C, E2, R2, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orElse: (a: EqualsWith<A, B, NoInfer<A>, Exclude<NoInfer<A>, B>>) => Effect<C, E2, R2>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B | C, E2 | E, R2 | R>\n  /**\n   * Filters an effect, providing an alternative effect if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, it executes the `orElse` effect instead. The\n   * `orElse` effect can produce an alternative value or perform additional\n   * computations.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, C, E2, R2>(\n    predicate: Predicate<NoInfer<A>>,\n    orElse: (a: NoInfer<A>) => Effect<C, E2, R2>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<A | C, E2 | E, R2 | R>\n  /**\n   * Filters an effect, providing an alternative effect if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, it executes the `orElse` effect instead. The\n   * `orElse` effect can produce an alternative value or perform additional\n   * computations.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, E, R, C, E2, R2, B extends A>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<A, B>,\n    orElse: (a: EqualsWith<A, B, A, Exclude<A, B>>) => Effect<C, E2, R2>\n  ): Effect<B | C, E | E2, R | R2>\n  /**\n   * Filters an effect, providing an alternative effect if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, it executes the `orElse` effect instead. The\n   * `orElse` effect can produce an alternative value or perform additional\n   * computations.\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, E, R, C, E2, R2>(\n    self: Effect<A, E, R>,\n    predicate: Predicate<A>,\n    orElse: (a: A) => Effect<C, E2, R2>\n  ): Effect<A | C, E | E2, R | R2>\n} = effect.filterOrElse\n\n/**\n * Filters an effect, failing with a custom error if the predicate fails.\n *\n * **Details**\n *\n * This function applies a predicate to the result of an effect. If the\n * predicate evaluates to `false`, the effect fails with a custom error\n * generated by the `orFailWith` function.\n *\n * **When to Use**\n *\n * This is useful for enforcing constraints and treating violations as\n * recoverable errors.\n *\n * **Providing a Guard**\n *\n * In addition to the filtering capabilities discussed earlier, you have the\n * option to further refine and narrow down the type of the success channel by\n * providing a [user-defined type\n * guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n * Let's explore this concept through an example:\n *\n * **Example**\n *\n * ```ts\n * import { Effect, pipe } from \"effect\"\n *\n * // Define a user interface\n * interface User {\n *   readonly name: string\n * }\n *\n * // Simulate an asynchronous authentication function\n * declare const auth: () => Promise<User | null>\n *\n * const program = pipe(\n *   Effect.promise(() => auth()),\n *   // Use filterOrFail with a custom type guard to ensure user is not null\n *   Effect.filterOrFail(\n *     (user): user is User => user !== null, // Type guard\n *     () => new Error(\"Unauthorized\")\n *   ),\n *   // 'user' now has the type `User` (not `User | null`)\n *   Effect.andThen((user) => user.name)\n * )\n * ```\n *\n * @since 2.0.0\n * @category Filtering\n */\nexport const filterOrFail: {\n  /**\n   * Filters an effect, failing with a custom error if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect fails with a custom error\n   * generated by the `orFailWith` function.\n   *\n   * **When to Use**\n   *\n   * This is useful for enforcing constraints and treating violations as\n   * recoverable errors.\n   *\n   * **Providing a Guard**\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the\n   * option to further refine and narrow down the type of the success channel by\n   * providing a [user-defined type\n   * guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Simulate an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   // Use filterOrFail with a custom type guard to ensure user is not null\n   *   Effect.filterOrFail(\n   *     (user): user is User => user !== null, // Type guard\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   // 'user' now has the type `User` (not `User | null`)\n   *   Effect.andThen((user) => user.name)\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, E2, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orFailWith: (a: EqualsWith<A, B, NoInfer<A>, Exclude<NoInfer<A>, B>>) => E2\n  ): <E, R>(self: Effect<A, E, R>) => Effect<NoInfer<B>, E2 | E, R>\n  /**\n   * Filters an effect, failing with a custom error if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect fails with a custom error\n   * generated by the `orFailWith` function.\n   *\n   * **When to Use**\n   *\n   * This is useful for enforcing constraints and treating violations as\n   * recoverable errors.\n   *\n   * **Providing a Guard**\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the\n   * option to further refine and narrow down the type of the success channel by\n   * providing a [user-defined type\n   * guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Simulate an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   // Use filterOrFail with a custom type guard to ensure user is not null\n   *   Effect.filterOrFail(\n   *     (user): user is User => user !== null, // Type guard\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   // 'user' now has the type `User` (not `User | null`)\n   *   Effect.andThen((user) => user.name)\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, E2>(predicate: Predicate<NoInfer<A>>, orFailWith: (a: NoInfer<A>) => E2): <E, R>(self: Effect<A, E, R>) => Effect<A, E2 | E, R>\n  /**\n   * Filters an effect, failing with a custom error if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect fails with a custom error\n   * generated by the `orFailWith` function.\n   *\n   * **When to Use**\n   *\n   * This is useful for enforcing constraints and treating violations as\n   * recoverable errors.\n   *\n   * **Providing a Guard**\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the\n   * option to further refine and narrow down the type of the success channel by\n   * providing a [user-defined type\n   * guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Simulate an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   // Use filterOrFail with a custom type guard to ensure user is not null\n   *   Effect.filterOrFail(\n   *     (user): user is User => user !== null, // Type guard\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   // 'user' now has the type `User` (not `User | null`)\n   *   Effect.andThen((user) => user.name)\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, E, R, E2, B extends A>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<A, B>,\n    orFailWith: (a: EqualsWith<A, B, A, Exclude<A, B>>) => E2\n  ): Effect<NoInfer<B>, E2 | E, R>\n  /**\n   * Filters an effect, failing with a custom error if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect fails with a custom error\n   * generated by the `orFailWith` function.\n   *\n   * **When to Use**\n   *\n   * This is useful for enforcing constraints and treating violations as\n   * recoverable errors.\n   *\n   * **Providing a Guard**\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the\n   * option to further refine and narrow down the type of the success channel by\n   * providing a [user-defined type\n   * guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Simulate an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   // Use filterOrFail with a custom type guard to ensure user is not null\n   *   Effect.filterOrFail(\n   *     (user): user is User => user !== null, // Type guard\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   // 'user' now has the type `User` (not `User | null`)\n   *   Effect.andThen((user) => user.name)\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, E, R, E2>(self: Effect<A, E, R>, predicate: Predicate<A>, orFailWith: (a: A) => E2): Effect<A, E2 | E, R>\n  /**\n   * Filters an effect, failing with a custom error if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect fails with a custom error\n   * generated by the `orFailWith` function.\n   *\n   * **When to Use**\n   *\n   * This is useful for enforcing constraints and treating violations as\n   * recoverable errors.\n   *\n   * **Providing a Guard**\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the\n   * option to further refine and narrow down the type of the success channel by\n   * providing a [user-defined type\n   * guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Simulate an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   // Use filterOrFail with a custom type guard to ensure user is not null\n   *   Effect.filterOrFail(\n   *     (user): user is User => user !== null, // Type guard\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   // 'user' now has the type `User` (not `User | null`)\n   *   Effect.andThen((user) => user.name)\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): <E, R>(self: Effect<A, E, R>) => Effect<NoInfer<B>, Cause.NoSuchElementException | E, R>\n  /**\n   * Filters an effect, failing with a custom error if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect fails with a custom error\n   * generated by the `orFailWith` function.\n   *\n   * **When to Use**\n   *\n   * This is useful for enforcing constraints and treating violations as\n   * recoverable errors.\n   *\n   * **Providing a Guard**\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the\n   * option to further refine and narrow down the type of the success channel by\n   * providing a [user-defined type\n   * guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Simulate an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   // Use filterOrFail with a custom type guard to ensure user is not null\n   *   Effect.filterOrFail(\n   *     (user): user is User => user !== null, // Type guard\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   // 'user' now has the type `User` (not `User | null`)\n   *   Effect.andThen((user) => user.name)\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Effect<A, E, R>) => Effect<A, Cause.NoSuchElementException | E, R>\n  /**\n   * Filters an effect, failing with a custom error if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect fails with a custom error\n   * generated by the `orFailWith` function.\n   *\n   * **When to Use**\n   *\n   * This is useful for enforcing constraints and treating violations as\n   * recoverable errors.\n   *\n   * **Providing a Guard**\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the\n   * option to further refine and narrow down the type of the success channel by\n   * providing a [user-defined type\n   * guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Simulate an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   // Use filterOrFail with a custom type guard to ensure user is not null\n   *   Effect.filterOrFail(\n   *     (user): user is User => user !== null, // Type guard\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   // 'user' now has the type `User` (not `User | null`)\n   *   Effect.andThen((user) => user.name)\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, E, R, B extends A>(self: Effect<A, E, R>, refinement: Refinement<A, B>): Effect<NoInfer<B>, E | Cause.NoSuchElementException, R>\n  /**\n   * Filters an effect, failing with a custom error if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect fails with a custom error\n   * generated by the `orFailWith` function.\n   *\n   * **When to Use**\n   *\n   * This is useful for enforcing constraints and treating violations as\n   * recoverable errors.\n   *\n   * **Providing a Guard**\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the\n   * option to further refine and narrow down the type of the success channel by\n   * providing a [user-defined type\n   * guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Simulate an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   // Use filterOrFail with a custom type guard to ensure user is not null\n   *   Effect.filterOrFail(\n   *     (user): user is User => user !== null, // Type guard\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   // 'user' now has the type `User` (not `User | null`)\n   *   Effect.andThen((user) => user.name)\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Filtering\n   */\n  <A, E, R>(self: Effect<A, E, R>, predicate: Predicate<A>): Effect<A, E | Cause.NoSuchElementException, R>\n} = effect.filterOrFail\n\n/**\n * Filters an effect with an effectful predicate, falling back to an alternative\n * effect if the predicate fails.\n *\n * **Details**\n *\n * This function applies a predicate to the result of an effect. If the\n * predicate evaluates to `false`, the effect falls back to the `orElse`\n * effect. The `orElse` effect can produce an alternative value or perform\n * additional computations.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, pipe } from \"effect\"\n *\n * // Define a user interface\n * interface User {\n *   readonly name: string\n * }\n *\n * // Simulate an asynchronous authentication function\n * declare const auth: () => Promise<User | null>\n *\n * const program = pipe(\n *   Effect.promise(() => auth()),\n *   // Use filterEffectOrElse with an effectful predicate\n *   Effect.filterEffectOrElse({\n *     predicate: (user) => Effect.succeed(user !== null),\n *     orElse: (user) => Effect.fail(new Error(`Unauthorized user: ${user}`))\n *   }),\n * )\n * ```\n *\n * @since 3.13.0\n * @category Filtering\n */\nexport const filterEffectOrElse: {\n  /**\n   * Filters an effect with an effectful predicate, falling back to an alternative\n   * effect if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect falls back to the `orElse`\n   * effect. The `orElse` effect can produce an alternative value or perform\n   * additional computations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Simulate an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   // Use filterEffectOrElse with an effectful predicate\n   *   Effect.filterEffectOrElse({\n   *     predicate: (user) => Effect.succeed(user !== null),\n   *     orElse: (user) => Effect.fail(new Error(`Unauthorized user: ${user}`))\n   *   }),\n   * )\n   * ```\n   *\n   * @since 3.13.0\n   * @category Filtering\n   */\n  <A, E2, R2, A2, E3, R3>(\n    options: {\n      readonly predicate: (a: NoInfer<A>) => Effect<boolean, E2, R2>\n      readonly orElse: (a: NoInfer<A>) => Effect<A2, E3, R3>\n    }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<A | A2, E | E2 | E3, R | R2 | R3>\n  /**\n   * Filters an effect with an effectful predicate, falling back to an alternative\n   * effect if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect falls back to the `orElse`\n   * effect. The `orElse` effect can produce an alternative value or perform\n   * additional computations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Simulate an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   // Use filterEffectOrElse with an effectful predicate\n   *   Effect.filterEffectOrElse({\n   *     predicate: (user) => Effect.succeed(user !== null),\n   *     orElse: (user) => Effect.fail(new Error(`Unauthorized user: ${user}`))\n   *   }),\n   * )\n   * ```\n   *\n   * @since 3.13.0\n   * @category Filtering\n   */\n  <A, E, R, E2, R2, A2, E3, R3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly predicate: (a: A) => Effect<boolean, E2, R2>\n      readonly orElse: (a: A) => Effect<A2, E3, R3>\n    }\n  ): Effect<A | A2, E | E2 | E3, R | R2 | R3>\n} = core.filterEffectOrElse\n\n/**\n * Filters an effect with an effectful predicate, failing with a custom error if the predicate fails.\n *\n * **Details**\n *\n * This function applies a predicate to the result of an effect. If the\n * predicate evaluates to `false`, the effect fails with a custom error\n * generated by the `orFailWith` function.\n *\n * **When to Use**\n *\n * This is useful for enforcing constraints and treating violations as\n * recoverable errors.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, pipe } from \"effect\"\n *\n * // Define a user interface\n * interface User {\n *   readonly name: string\n * }\n *\n * // Simulate an asynchronous authentication function\n * declare const auth: () => Promise<User | null>\n *\n * const program = pipe(\n *   Effect.promise(() => auth()),\n *   // Use filterEffectOrFail with an effectful predicate\n *   Effect.filterEffectOrFail({\n *     predicate: (user) => Effect.succeed(user !== null),\n *     orFailWith: () => new Error(\"Unauthorized\")\n *   }),\n * )\n * ```\n *\n * @since 3.13.0\n * @category Filtering\n */\nexport const filterEffectOrFail: {\n  /**\n   * Filters an effect with an effectful predicate, failing with a custom error if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect fails with a custom error\n   * generated by the `orFailWith` function.\n   *\n   * **When to Use**\n   *\n   * This is useful for enforcing constraints and treating violations as\n   * recoverable errors.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Simulate an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   // Use filterEffectOrFail with an effectful predicate\n   *   Effect.filterEffectOrFail({\n   *     predicate: (user) => Effect.succeed(user !== null),\n   *     orFailWith: () => new Error(\"Unauthorized\")\n   *   }),\n   * )\n   * ```\n   *\n   * @since 3.13.0\n   * @category Filtering\n   */\n  <A, E2, R2, E3>(\n    options: {\n      readonly predicate: (a: NoInfer<A>) => Effect<boolean, E2, R2>\n      readonly orFailWith: (a: NoInfer<A>) => E3\n    }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<A, E | E2 | E3, R | R2>\n  /**\n   * Filters an effect with an effectful predicate, failing with a custom error if the predicate fails.\n   *\n   * **Details**\n   *\n   * This function applies a predicate to the result of an effect. If the\n   * predicate evaluates to `false`, the effect fails with a custom error\n   * generated by the `orFailWith` function.\n   *\n   * **When to Use**\n   *\n   * This is useful for enforcing constraints and treating violations as\n   * recoverable errors.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Simulate an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   // Use filterEffectOrFail with an effectful predicate\n   *   Effect.filterEffectOrFail({\n   *     predicate: (user) => Effect.succeed(user !== null),\n   *     orFailWith: () => new Error(\"Unauthorized\")\n   *   }),\n   * )\n   * ```\n   *\n   * @since 3.13.0\n   * @category Filtering\n   */\n  <A, E, R, E2, R2, E3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly predicate: (a: A) => Effect<boolean, E2, R2>\n      readonly orFailWith: (a: A) => E3\n    }\n  ): Effect<A, E | E2 | E3, R | R2>\n} = core.filterEffectOrFail\n\n/**\n * Executes an effect only if the condition is `false`.\n *\n * @see {@link unlessEffect} for a version that allows the condition to be an effect.\n * @see {@link when} for a version that executes the effect when the condition is `true`.\n *\n * @since 2.0.0\n * @category Conditional Operators\n */\nexport const unless: {\n  /**\n   * Executes an effect only if the condition is `false`.\n   *\n   * @see {@link unlessEffect} for a version that allows the condition to be an effect.\n   * @see {@link when} for a version that executes the effect when the condition is `true`.\n   *\n   * @since 2.0.0\n   * @category Conditional Operators\n   */\n  (condition: LazyArg<boolean>): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R>\n  /**\n   * Executes an effect only if the condition is `false`.\n   *\n   * @see {@link unlessEffect} for a version that allows the condition to be an effect.\n   * @see {@link when} for a version that executes the effect when the condition is `true`.\n   *\n   * @since 2.0.0\n   * @category Conditional Operators\n   */\n  <A, E, R>(self: Effect<A, E, R>, condition: LazyArg<boolean>): Effect<Option.Option<A>, E, R>\n} = effect.unless\n\n/**\n * Conditionally execute an effect based on the result of another effect.\n *\n * @see {@link unless} for a version that allows the condition to be a boolean.\n * @see {@link whenEffect} for a version that executes the effect when the condition is `true`.\n *\n * @since 2.0.0\n * @category Conditional Operators\n */\nexport const unlessEffect: {\n  /**\n   * Conditionally execute an effect based on the result of another effect.\n   *\n   * @see {@link unless} for a version that allows the condition to be a boolean.\n   * @see {@link whenEffect} for a version that executes the effect when the condition is `true`.\n   *\n   * @since 2.0.0\n   * @category Conditional Operators\n   */\n  <E2, R2>(condition: Effect<boolean, E2, R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E2 | E, R2 | R>\n  /**\n   * Conditionally execute an effect based on the result of another effect.\n   *\n   * @see {@link unless} for a version that allows the condition to be a boolean.\n   * @see {@link whenEffect} for a version that executes the effect when the condition is `true`.\n   *\n   * @since 2.0.0\n   * @category Conditional Operators\n   */\n  <A, E, R, E2, R2>(self: Effect<A, E, R>, condition: Effect<boolean, E2, R2>): Effect<Option.Option<A>, E | E2, R | R2>\n} = effect.unlessEffect\n\n/**\n * Conditionally executes an effect based on a boolean condition.\n *\n * **Details**\n *\n * This function allows you to run an effect only if a given condition evaluates\n * to `true`. If the condition is `true`, the effect is executed, and its result\n * is wrapped in an `Option.some`. If the condition is `false`, the effect is\n * skipped, and the result is `Option.none`.\n *\n * **When to Use**\n *\n * This function is useful for scenarios where you need to dynamically decide\n * whether to execute an effect based on runtime logic, while also representing\n * the skipped case explicitly.\n *\n * **Example** (Conditional Effect Execution)\n *\n * ```ts\n * import { Effect, Option } from \"effect\"\n *\n * const validateWeightOption = (\n *   weight: number\n * ): Effect.Effect<Option.Option<number>> =>\n *   // Conditionally execute the effect if the weight is non-negative\n *   Effect.succeed(weight).pipe(Effect.when(() => weight >= 0))\n *\n * // Run with a valid weight\n * Effect.runPromise(validateWeightOption(100)).then(console.log)\n * // Output:\n * // {\n * //   _id: \"Option\",\n * //   _tag: \"Some\",\n * //   value: 100\n * // }\n *\n * // Run with an invalid weight\n * Effect.runPromise(validateWeightOption(-5)).then(console.log)\n * // Output:\n * // {\n * //   _id: \"Option\",\n * //   _tag: \"None\"\n * // }\n * ```\n *\n * @see {@link whenEffect} for a version that allows the condition to be an effect.\n * @see {@link unless} for a version that executes the effect when the condition is `false`.\n *\n * @since 2.0.0\n * @category Conditional Operators\n */\nexport const when: {\n  /**\n   * Conditionally executes an effect based on a boolean condition.\n   *\n   * **Details**\n   *\n   * This function allows you to run an effect only if a given condition evaluates\n   * to `true`. If the condition is `true`, the effect is executed, and its result\n   * is wrapped in an `Option.some`. If the condition is `false`, the effect is\n   * skipped, and the result is `Option.none`.\n   *\n   * **When to Use**\n   *\n   * This function is useful for scenarios where you need to dynamically decide\n   * whether to execute an effect based on runtime logic, while also representing\n   * the skipped case explicitly.\n   *\n   * **Example** (Conditional Effect Execution)\n   *\n   * ```ts\n   * import { Effect, Option } from \"effect\"\n   *\n   * const validateWeightOption = (\n   *   weight: number\n   * ): Effect.Effect<Option.Option<number>> =>\n   *   // Conditionally execute the effect if the weight is non-negative\n   *   Effect.succeed(weight).pipe(Effect.when(() => weight >= 0))\n   *\n   * // Run with a valid weight\n   * Effect.runPromise(validateWeightOption(100)).then(console.log)\n   * // Output:\n   * // {\n   * //   _id: \"Option\",\n   * //   _tag: \"Some\",\n   * //   value: 100\n   * // }\n   *\n   * // Run with an invalid weight\n   * Effect.runPromise(validateWeightOption(-5)).then(console.log)\n   * // Output:\n   * // {\n   * //   _id: \"Option\",\n   * //   _tag: \"None\"\n   * // }\n   * ```\n   *\n   * @see {@link whenEffect} for a version that allows the condition to be an effect.\n   * @see {@link unless} for a version that executes the effect when the condition is `false`.\n   *\n   * @since 2.0.0\n   * @category Conditional Operators\n   */\n  (condition: LazyArg<boolean>): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R>\n  /**\n   * Conditionally executes an effect based on a boolean condition.\n   *\n   * **Details**\n   *\n   * This function allows you to run an effect only if a given condition evaluates\n   * to `true`. If the condition is `true`, the effect is executed, and its result\n   * is wrapped in an `Option.some`. If the condition is `false`, the effect is\n   * skipped, and the result is `Option.none`.\n   *\n   * **When to Use**\n   *\n   * This function is useful for scenarios where you need to dynamically decide\n   * whether to execute an effect based on runtime logic, while also representing\n   * the skipped case explicitly.\n   *\n   * **Example** (Conditional Effect Execution)\n   *\n   * ```ts\n   * import { Effect, Option } from \"effect\"\n   *\n   * const validateWeightOption = (\n   *   weight: number\n   * ): Effect.Effect<Option.Option<number>> =>\n   *   // Conditionally execute the effect if the weight is non-negative\n   *   Effect.succeed(weight).pipe(Effect.when(() => weight >= 0))\n   *\n   * // Run with a valid weight\n   * Effect.runPromise(validateWeightOption(100)).then(console.log)\n   * // Output:\n   * // {\n   * //   _id: \"Option\",\n   * //   _tag: \"Some\",\n   * //   value: 100\n   * // }\n   *\n   * // Run with an invalid weight\n   * Effect.runPromise(validateWeightOption(-5)).then(console.log)\n   * // Output:\n   * // {\n   * //   _id: \"Option\",\n   * //   _tag: \"None\"\n   * // }\n   * ```\n   *\n   * @see {@link whenEffect} for a version that allows the condition to be an effect.\n   * @see {@link unless} for a version that executes the effect when the condition is `false`.\n   *\n   * @since 2.0.0\n   * @category Conditional Operators\n   */\n  <A, E, R>(self: Effect<A, E, R>, condition: LazyArg<boolean>): Effect<Option.Option<A>, E, R>\n} = effect.when\n\n/**\n * Conditionally executes an effect based on the result of another effect.\n *\n * **Details**\n *\n * This function allows you to run an effect only if a conditional effect\n * evaluating to a boolean resolves to `true`. If the conditional effect\n * evaluates to `true`, the specified effect is executed, and its result is\n * wrapped in `Option.some`. If the conditional effect evaluates to `false`, the\n * effect is skipped, and the result is `Option.none`.\n *\n * **When to Use**\n *\n * This function is particularly useful when the decision to execute an effect\n * depends on the result of another effect, such as a random value, a\n * user-provided input, or a network request result.\n *\n * **Example** (Using an Effect as a Condition)\n *\n * ```ts\n * import { Effect, Random } from \"effect\"\n *\n * const randomIntOption = Random.nextInt.pipe(\n *   Effect.whenEffect(Random.nextBoolean)\n * )\n *\n * console.log(Effect.runSync(randomIntOption))\n * // Example Output:\n * // { _id: 'Option', _tag: 'Some', value: 8609104974198840 }\n * ```\n *\n * @see {@link when} for a version that allows the condition to be a boolean.\n * @see {@link unlessEffect} for a version that executes the effect when the condition is `false`.\n *\n * @since 2.0.0\n * @category Conditional Operators\n */\nexport const whenEffect: {\n  /**\n   * Conditionally executes an effect based on the result of another effect.\n   *\n   * **Details**\n   *\n   * This function allows you to run an effect only if a conditional effect\n   * evaluating to a boolean resolves to `true`. If the conditional effect\n   * evaluates to `true`, the specified effect is executed, and its result is\n   * wrapped in `Option.some`. If the conditional effect evaluates to `false`, the\n   * effect is skipped, and the result is `Option.none`.\n   *\n   * **When to Use**\n   *\n   * This function is particularly useful when the decision to execute an effect\n   * depends on the result of another effect, such as a random value, a\n   * user-provided input, or a network request result.\n   *\n   * **Example** (Using an Effect as a Condition)\n   *\n   * ```ts\n   * import { Effect, Random } from \"effect\"\n   *\n   * const randomIntOption = Random.nextInt.pipe(\n   *   Effect.whenEffect(Random.nextBoolean)\n   * )\n   *\n   * console.log(Effect.runSync(randomIntOption))\n   * // Example Output:\n   * // { _id: 'Option', _tag: 'Some', value: 8609104974198840 }\n   * ```\n   *\n   * @see {@link when} for a version that allows the condition to be a boolean.\n   * @see {@link unlessEffect} for a version that executes the effect when the condition is `false`.\n   *\n   * @since 2.0.0\n   * @category Conditional Operators\n   */\n  <E, R>(condition: Effect<boolean, E, R>): <A, E2, R2>(effect: Effect<A, E2, R2>) => Effect<Option.Option<A>, E | E2, R | R2>\n  /**\n   * Conditionally executes an effect based on the result of another effect.\n   *\n   * **Details**\n   *\n   * This function allows you to run an effect only if a conditional effect\n   * evaluating to a boolean resolves to `true`. If the conditional effect\n   * evaluates to `true`, the specified effect is executed, and its result is\n   * wrapped in `Option.some`. If the conditional effect evaluates to `false`, the\n   * effect is skipped, and the result is `Option.none`.\n   *\n   * **When to Use**\n   *\n   * This function is particularly useful when the decision to execute an effect\n   * depends on the result of another effect, such as a random value, a\n   * user-provided input, or a network request result.\n   *\n   * **Example** (Using an Effect as a Condition)\n   *\n   * ```ts\n   * import { Effect, Random } from \"effect\"\n   *\n   * const randomIntOption = Random.nextInt.pipe(\n   *   Effect.whenEffect(Random.nextBoolean)\n   * )\n   *\n   * console.log(Effect.runSync(randomIntOption))\n   * // Example Output:\n   * // { _id: 'Option', _tag: 'Some', value: 8609104974198840 }\n   * ```\n   *\n   * @see {@link when} for a version that allows the condition to be a boolean.\n   * @see {@link unlessEffect} for a version that executes the effect when the condition is `false`.\n   *\n   * @since 2.0.0\n   * @category Conditional Operators\n   */\n  <A, E2, R2, E, R>(self: Effect<A, E2, R2>, condition: Effect<boolean, E, R>): Effect<Option.Option<A>, E2 | E, R2 | R>\n} = core.whenEffect\n\n/**\n * Executes an effect conditionally based on the value of a `FiberRef` that\n * satisfies a predicate.\n *\n * **Details**\n *\n * This function enables you to execute an effect only when the value of a\n * specified `FiberRef` meets a certain condition defined by a predicate. If the\n * value satisfies the predicate, the effect is executed, and the result is\n * wrapped in an `Option.some`. If the predicate is not satisfied, the effect is\n * skipped, and the result is `Option.none`. In both cases, the current value of\n * the `FiberRef` is included in the result.\n *\n * @since 2.0.0\n * @category Conditional Operators\n */\nexport const whenFiberRef: {\n  /**\n   * Executes an effect conditionally based on the value of a `FiberRef` that\n   * satisfies a predicate.\n   *\n   * **Details**\n   *\n   * This function enables you to execute an effect only when the value of a\n   * specified `FiberRef` meets a certain condition defined by a predicate. If the\n   * value satisfies the predicate, the effect is executed, and the result is\n   * wrapped in an `Option.some`. If the predicate is not satisfied, the effect is\n   * skipped, and the result is `Option.none`. In both cases, the current value of\n   * the `FiberRef` is included in the result.\n   *\n   * @since 2.0.0\n   * @category Conditional Operators\n   */\n  <S>(fiberRef: FiberRef.FiberRef<S>, predicate: Predicate<S>): <A, E, R>(self: Effect<A, E, R>) => Effect<[S, Option.Option<A>], E, R>\n  /**\n   * Executes an effect conditionally based on the value of a `FiberRef` that\n   * satisfies a predicate.\n   *\n   * **Details**\n   *\n   * This function enables you to execute an effect only when the value of a\n   * specified `FiberRef` meets a certain condition defined by a predicate. If the\n   * value satisfies the predicate, the effect is executed, and the result is\n   * wrapped in an `Option.some`. If the predicate is not satisfied, the effect is\n   * skipped, and the result is `Option.none`. In both cases, the current value of\n   * the `FiberRef` is included in the result.\n   *\n   * @since 2.0.0\n   * @category Conditional Operators\n   */\n  <A, E, R, S>(\n    self: Effect<A, E, R>,\n    fiberRef: FiberRef.FiberRef<S>,\n    predicate: Predicate<S>\n  ): Effect<[S, Option.Option<A>], E, R>\n} = effect.whenFiberRef\n\n/**\n * Executes an effect conditionally based on the value of a `Ref` that satisfies\n * a predicate.\n *\n * **Details**\n *\n * This function allows you to execute an effect only when the value of a\n * specified `Ref` meets a condition defined by a predicate. If the value\n * satisfies the predicate, the effect is executed, and the result is wrapped in\n * an `Option.some`. If the predicate is not satisfied, the effect is skipped,\n * and the result is `Option.none`. In both cases, the current value of the\n * `Ref` is included in the result.\n *\n * @since 2.0.0\n * @category Conditional Operators\n */\nexport const whenRef: {\n  /**\n   * Executes an effect conditionally based on the value of a `Ref` that satisfies\n   * a predicate.\n   *\n   * **Details**\n   *\n   * This function allows you to execute an effect only when the value of a\n   * specified `Ref` meets a condition defined by a predicate. If the value\n   * satisfies the predicate, the effect is executed, and the result is wrapped in\n   * an `Option.some`. If the predicate is not satisfied, the effect is skipped,\n   * and the result is `Option.none`. In both cases, the current value of the\n   * `Ref` is included in the result.\n   *\n   * @since 2.0.0\n   * @category Conditional Operators\n   */\n  <S>(ref: Ref.Ref<S>, predicate: Predicate<S>): <A, E, R>(self: Effect<A, E, R>) => Effect<[S, Option.Option<A>], E, R>\n  /**\n   * Executes an effect conditionally based on the value of a `Ref` that satisfies\n   * a predicate.\n   *\n   * **Details**\n   *\n   * This function allows you to execute an effect only when the value of a\n   * specified `Ref` meets a condition defined by a predicate. If the value\n   * satisfies the predicate, the effect is executed, and the result is wrapped in\n   * an `Option.some`. If the predicate is not satisfied, the effect is skipped,\n   * and the result is `Option.none`. In both cases, the current value of the\n   * `Ref` is included in the result.\n   *\n   * @since 2.0.0\n   * @category Conditional Operators\n   */\n  <A, E, R, S>(self: Effect<A, E, R>, ref: Ref.Ref<S>, predicate: Predicate<S>): Effect<[S, Option.Option<A>], E, R>\n} = effect.whenRef\n\n/**\n * Chains effects to produce new `Effect` instances, useful for combining\n * operations that depend on previous results.\n *\n * **Syntax**\n *\n * ```ts skip-type-checking\n * const flatMappedEffect = pipe(myEffect, Effect.flatMap(transformation))\n * // or\n * const flatMappedEffect = Effect.flatMap(myEffect, transformation)\n * // or\n * const flatMappedEffect = myEffect.pipe(Effect.flatMap(transformation))\n * ```\n *\n * **Details**\n *\n * `flatMap` lets you sequence effects so that the result of one effect can be\n * used in the next step. It is similar to `flatMap` used with arrays but works\n * specifically with `Effect` instances, allowing you to avoid deeply nested\n * effect structures.\n *\n * Since effects are immutable, `flatMap` always returns a new effect instead of\n * changing the original one.\n *\n * **When to Use**\n *\n * Use `flatMap` when you need to chain multiple effects, ensuring that each\n * step produces a new `Effect` while flattening any nested effects that may\n * occur.\n *\n * **Example**\n *\n * ```ts\n * import { pipe, Effect } from \"effect\"\n *\n * // Function to apply a discount safely to a transaction amount\n * const applyDiscount = (\n *   total: number,\n *   discountRate: number\n * ): Effect.Effect<number, Error> =>\n *   discountRate === 0\n *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n *     : Effect.succeed(total - (total * discountRate) / 100)\n *\n * // Simulated asynchronous task to fetch a transaction amount from database\n * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n *\n * // Chaining the fetch and discount application using `flatMap`\n * const finalAmount = pipe(\n *   fetchTransactionAmount,\n *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n * )\n *\n * Effect.runPromise(finalAmount).then(console.log)\n * // Output: 95\n * ```\n *\n * @see {@link tap} for a version that ignores the result of the effect.\n *\n * @since 2.0.0\n * @category Sequencing\n */\nexport const flatMap: {\n  /**\n   * Chains effects to produce new `Effect` instances, useful for combining\n   * operations that depend on previous results.\n   *\n   * **Syntax**\n   *\n   * ```ts skip-type-checking\n   * const flatMappedEffect = pipe(myEffect, Effect.flatMap(transformation))\n   * // or\n   * const flatMappedEffect = Effect.flatMap(myEffect, transformation)\n   * // or\n   * const flatMappedEffect = myEffect.pipe(Effect.flatMap(transformation))\n   * ```\n   *\n   * **Details**\n   *\n   * `flatMap` lets you sequence effects so that the result of one effect can be\n   * used in the next step. It is similar to `flatMap` used with arrays but works\n   * specifically with `Effect` instances, allowing you to avoid deeply nested\n   * effect structures.\n   *\n   * Since effects are immutable, `flatMap` always returns a new effect instead of\n   * changing the original one.\n   *\n   * **When to Use**\n   *\n   * Use `flatMap` when you need to chain multiple effects, ensuring that each\n   * step produces a new `Effect` while flattening any nested effects that may\n   * occur.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { pipe, Effect } from \"effect\"\n   *\n   * // Function to apply a discount safely to a transaction amount\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * // Simulated asynchronous task to fetch a transaction amount from database\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * // Chaining the fetch and discount application using `flatMap`\n   * const finalAmount = pipe(\n   *   fetchTransactionAmount,\n   *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(finalAmount).then(console.log)\n   * // Output: 95\n   * ```\n   *\n   * @see {@link tap} for a version that ignores the result of the effect.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, B, E1, R1>(f: (a: A) => Effect<B, E1, R1>): <E, R>(self: Effect<A, E, R>) => Effect<B, E1 | E, R1 | R>\n  /**\n   * Chains effects to produce new `Effect` instances, useful for combining\n   * operations that depend on previous results.\n   *\n   * **Syntax**\n   *\n   * ```ts skip-type-checking\n   * const flatMappedEffect = pipe(myEffect, Effect.flatMap(transformation))\n   * // or\n   * const flatMappedEffect = Effect.flatMap(myEffect, transformation)\n   * // or\n   * const flatMappedEffect = myEffect.pipe(Effect.flatMap(transformation))\n   * ```\n   *\n   * **Details**\n   *\n   * `flatMap` lets you sequence effects so that the result of one effect can be\n   * used in the next step. It is similar to `flatMap` used with arrays but works\n   * specifically with `Effect` instances, allowing you to avoid deeply nested\n   * effect structures.\n   *\n   * Since effects are immutable, `flatMap` always returns a new effect instead of\n   * changing the original one.\n   *\n   * **When to Use**\n   *\n   * Use `flatMap` when you need to chain multiple effects, ensuring that each\n   * step produces a new `Effect` while flattening any nested effects that may\n   * occur.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { pipe, Effect } from \"effect\"\n   *\n   * // Function to apply a discount safely to a transaction amount\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * // Simulated asynchronous task to fetch a transaction amount from database\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * // Chaining the fetch and discount application using `flatMap`\n   * const finalAmount = pipe(\n   *   fetchTransactionAmount,\n   *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(finalAmount).then(console.log)\n   * // Output: 95\n   * ```\n   *\n   * @see {@link tap} for a version that ignores the result of the effect.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, E, R, B, E1, R1>(self: Effect<A, E, R>, f: (a: A) => Effect<B, E1, R1>): Effect<B, E | E1, R | R1>\n} = core.flatMap\n\n/**\n * Chains two actions, where the second action can depend on the result of the\n * first.\n *\n * **Syntax**\n *\n * ```ts skip-type-checking\n * const transformedEffect = pipe(myEffect, Effect.andThen(anotherEffect))\n * // or\n * const transformedEffect = Effect.andThen(myEffect, anotherEffect)\n * // or\n * const transformedEffect = myEffect.pipe(Effect.andThen(anotherEffect))\n * ```\n *\n * **When to Use**\n *\n * Use `andThen` when you need to run multiple actions in sequence, with the\n * second action depending on the result of the first. This is useful for\n * combining effects or handling computations that must happen in order.\n *\n * **Details**\n *\n * The second action can be:\n *\n * - A constant value (similar to {@link as})\n * - A function returning a value (similar to {@link map})\n * - A `Promise`\n * - A function returning a `Promise`\n * - An `Effect`\n * - A function returning an `Effect` (similar to {@link flatMap})\n *\n * **Note:** `andThen` works well with both `Option` and `Either` types,\n * treating them as effects.\n *\n * **Example** (Applying a Discount Based on Fetched Amount)\n *\n * ```ts\n * import { pipe, Effect } from \"effect\"\n *\n * // Function to apply a discount safely to a transaction amount\n * const applyDiscount = (\n *   total: number,\n *   discountRate: number\n * ): Effect.Effect<number, Error> =>\n *   discountRate === 0\n *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n *     : Effect.succeed(total - (total * discountRate) / 100)\n *\n * // Simulated asynchronous task to fetch a transaction amount from database\n * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n *\n * // Using Effect.map and Effect.flatMap\n * const result1 = pipe(\n *   fetchTransactionAmount,\n *   Effect.map((amount) => amount * 2),\n *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n * )\n *\n * Effect.runPromise(result1).then(console.log)\n * // Output: 190\n *\n * // Using Effect.andThen\n * const result2 = pipe(\n *   fetchTransactionAmount,\n *   Effect.andThen((amount) => amount * 2),\n *   Effect.andThen((amount) => applyDiscount(amount, 5))\n * )\n *\n * Effect.runPromise(result2).then(console.log)\n * // Output: 190\n * ```\n *\n * @since 2.0.0\n * @category Sequencing\n */\nexport const andThen: {\n  /**\n   * Chains two actions, where the second action can depend on the result of the\n   * first.\n   *\n   * **Syntax**\n   *\n   * ```ts skip-type-checking\n   * const transformedEffect = pipe(myEffect, Effect.andThen(anotherEffect))\n   * // or\n   * const transformedEffect = Effect.andThen(myEffect, anotherEffect)\n   * // or\n   * const transformedEffect = myEffect.pipe(Effect.andThen(anotherEffect))\n   * ```\n   *\n   * **When to Use**\n   *\n   * Use `andThen` when you need to run multiple actions in sequence, with the\n   * second action depending on the result of the first. This is useful for\n   * combining effects or handling computations that must happen in order.\n   *\n   * **Details**\n   *\n   * The second action can be:\n   *\n   * - A constant value (similar to {@link as})\n   * - A function returning a value (similar to {@link map})\n   * - A `Promise`\n   * - A function returning a `Promise`\n   * - An `Effect`\n   * - A function returning an `Effect` (similar to {@link flatMap})\n   *\n   * **Note:** `andThen` works well with both `Option` and `Either` types,\n   * treating them as effects.\n   *\n   * **Example** (Applying a Discount Based on Fetched Amount)\n   *\n   * ```ts\n   * import { pipe, Effect } from \"effect\"\n   *\n   * // Function to apply a discount safely to a transaction amount\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * // Simulated asynchronous task to fetch a transaction amount from database\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * // Using Effect.map and Effect.flatMap\n   * const result1 = pipe(\n   *   fetchTransactionAmount,\n   *   Effect.map((amount) => amount * 2),\n   *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(result1).then(console.log)\n   * // Output: 190\n   *\n   * // Using Effect.andThen\n   * const result2 = pipe(\n   *   fetchTransactionAmount,\n   *   Effect.andThen((amount) => amount * 2),\n   *   Effect.andThen((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(result2).then(console.log)\n   * // Output: 190\n   * ```\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, X>(f: (a: NoInfer<A>) => X): <E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n  /**\n   * Chains two actions, where the second action can depend on the result of the\n   * first.\n   *\n   * **Syntax**\n   *\n   * ```ts skip-type-checking\n   * const transformedEffect = pipe(myEffect, Effect.andThen(anotherEffect))\n   * // or\n   * const transformedEffect = Effect.andThen(myEffect, anotherEffect)\n   * // or\n   * const transformedEffect = myEffect.pipe(Effect.andThen(anotherEffect))\n   * ```\n   *\n   * **When to Use**\n   *\n   * Use `andThen` when you need to run multiple actions in sequence, with the\n   * second action depending on the result of the first. This is useful for\n   * combining effects or handling computations that must happen in order.\n   *\n   * **Details**\n   *\n   * The second action can be:\n   *\n   * - A constant value (similar to {@link as})\n   * - A function returning a value (similar to {@link map})\n   * - A `Promise`\n   * - A function returning a `Promise`\n   * - An `Effect`\n   * - A function returning an `Effect` (similar to {@link flatMap})\n   *\n   * **Note:** `andThen` works well with both `Option` and `Either` types,\n   * treating them as effects.\n   *\n   * **Example** (Applying a Discount Based on Fetched Amount)\n   *\n   * ```ts\n   * import { pipe, Effect } from \"effect\"\n   *\n   * // Function to apply a discount safely to a transaction amount\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * // Simulated asynchronous task to fetch a transaction amount from database\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * // Using Effect.map and Effect.flatMap\n   * const result1 = pipe(\n   *   fetchTransactionAmount,\n   *   Effect.map((amount) => amount * 2),\n   *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(result1).then(console.log)\n   * // Output: 190\n   *\n   * // Using Effect.andThen\n   * const result2 = pipe(\n   *   fetchTransactionAmount,\n   *   Effect.andThen((amount) => amount * 2),\n   *   Effect.andThen((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(result2).then(console.log)\n   * // Output: 190\n   * ```\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <X>(f: NotFunction<X>): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n  /**\n   * Chains two actions, where the second action can depend on the result of the\n   * first.\n   *\n   * **Syntax**\n   *\n   * ```ts skip-type-checking\n   * const transformedEffect = pipe(myEffect, Effect.andThen(anotherEffect))\n   * // or\n   * const transformedEffect = Effect.andThen(myEffect, anotherEffect)\n   * // or\n   * const transformedEffect = myEffect.pipe(Effect.andThen(anotherEffect))\n   * ```\n   *\n   * **When to Use**\n   *\n   * Use `andThen` when you need to run multiple actions in sequence, with the\n   * second action depending on the result of the first. This is useful for\n   * combining effects or handling computations that must happen in order.\n   *\n   * **Details**\n   *\n   * The second action can be:\n   *\n   * - A constant value (similar to {@link as})\n   * - A function returning a value (similar to {@link map})\n   * - A `Promise`\n   * - A function returning a `Promise`\n   * - An `Effect`\n   * - A function returning an `Effect` (similar to {@link flatMap})\n   *\n   * **Note:** `andThen` works well with both `Option` and `Either` types,\n   * treating them as effects.\n   *\n   * **Example** (Applying a Discount Based on Fetched Amount)\n   *\n   * ```ts\n   * import { pipe, Effect } from \"effect\"\n   *\n   * // Function to apply a discount safely to a transaction amount\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * // Simulated asynchronous task to fetch a transaction amount from database\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * // Using Effect.map and Effect.flatMap\n   * const result1 = pipe(\n   *   fetchTransactionAmount,\n   *   Effect.map((amount) => amount * 2),\n   *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(result1).then(console.log)\n   * // Output: 190\n   *\n   * // Using Effect.andThen\n   * const result2 = pipe(\n   *   fetchTransactionAmount,\n   *   Effect.andThen((amount) => amount * 2),\n   *   Effect.andThen((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(result2).then(console.log)\n   * // Output: 190\n   * ```\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, E, R, X>(self: Effect<A, E, R>, f: (a: NoInfer<A>) => X): [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n  /**\n   * Chains two actions, where the second action can depend on the result of the\n   * first.\n   *\n   * **Syntax**\n   *\n   * ```ts skip-type-checking\n   * const transformedEffect = pipe(myEffect, Effect.andThen(anotherEffect))\n   * // or\n   * const transformedEffect = Effect.andThen(myEffect, anotherEffect)\n   * // or\n   * const transformedEffect = myEffect.pipe(Effect.andThen(anotherEffect))\n   * ```\n   *\n   * **When to Use**\n   *\n   * Use `andThen` when you need to run multiple actions in sequence, with the\n   * second action depending on the result of the first. This is useful for\n   * combining effects or handling computations that must happen in order.\n   *\n   * **Details**\n   *\n   * The second action can be:\n   *\n   * - A constant value (similar to {@link as})\n   * - A function returning a value (similar to {@link map})\n   * - A `Promise`\n   * - A function returning a `Promise`\n   * - An `Effect`\n   * - A function returning an `Effect` (similar to {@link flatMap})\n   *\n   * **Note:** `andThen` works well with both `Option` and `Either` types,\n   * treating them as effects.\n   *\n   * **Example** (Applying a Discount Based on Fetched Amount)\n   *\n   * ```ts\n   * import { pipe, Effect } from \"effect\"\n   *\n   * // Function to apply a discount safely to a transaction amount\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * // Simulated asynchronous task to fetch a transaction amount from database\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * // Using Effect.map and Effect.flatMap\n   * const result1 = pipe(\n   *   fetchTransactionAmount,\n   *   Effect.map((amount) => amount * 2),\n   *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(result1).then(console.log)\n   * // Output: 190\n   *\n   * // Using Effect.andThen\n   * const result2 = pipe(\n   *   fetchTransactionAmount,\n   *   Effect.andThen((amount) => amount * 2),\n   *   Effect.andThen((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(result2).then(console.log)\n   * // Output: 190\n   * ```\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, E, R, X>(self: Effect<A, E, R>, f: NotFunction<X>): [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n} = core.andThen\n\n/**\n * @since 2.0.0\n * @category Sequencing\n */\nexport const flatten: <A, E1, R1, E, R>(self: Effect<Effect<A, E1, R1>, E, R>) => Effect<A, E | E1, R | R1> =\n  core.flatten\n\n/**\n * Races two effects and returns the result of the first successful one.\n *\n * **Details**\n *\n * This function takes two effects and runs them concurrently. The first effect\n * that successfully completes will determine the result of the race, and the\n * other effect will be interrupted.\n *\n * If neither effect succeeds, the function will fail with a `Cause`\n * containing all the errors.\n *\n * **When to Use**\n *\n * This is useful when you want to run two effects concurrently, but only care\n * about the first one to succeed. It is commonly used in cases like timeouts,\n * retries, or when you want to optimize for the faster response without\n * worrying about the other effect.\n *\n * **Handling Success or Failure with Either**\n *\n * If you want to handle the result of whichever task completes first, whether\n * it succeeds or fails, you can use the `Effect.either` function. This function\n * wraps the result in an `Either` type, allowing you to see if the result\n * was a success (`Right`) or a failure (`Left`).\n *\n * **Example** (Both Tasks Succeed)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const task1 = Effect.succeed(\"task1\").pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Console.log(\"task1 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task1 interrupted\"))\n * )\n * const task2 = Effect.succeed(\"task2\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Console.log(\"task2 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task2 interrupted\"))\n * )\n *\n * const program = Effect.race(task1, task2)\n *\n * Effect.runFork(program)\n * // Output:\n * // task1 done\n * // task2 interrupted\n * ```\n *\n * **Example** (One Task Fails, One Succeeds)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const task1 = Effect.fail(\"task1\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Console.log(\"task1 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task1 interrupted\"))\n * )\n * const task2 = Effect.succeed(\"task2\").pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Console.log(\"task2 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task2 interrupted\"))\n * )\n *\n * const program = Effect.race(task1, task2)\n *\n * Effect.runFork(program)\n * // Output:\n * // task2 done\n * ```\n *\n * **Example** (Both Tasks Fail)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const task1 = Effect.fail(\"task1\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Console.log(\"task1 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task1 interrupted\"))\n * )\n * const task2 = Effect.fail(\"task2\").pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Console.log(\"task2 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task2 interrupted\"))\n * )\n *\n * const program = Effect.race(task1, task2)\n *\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: {\n * //     _id: 'Cause',\n * //     _tag: 'Parallel',\n * //     left: { _id: 'Cause', _tag: 'Fail', failure: 'task1' },\n * //     right: { _id: 'Cause', _tag: 'Fail', failure: 'task2' }\n * //   }\n * // }\n * ```\n *\n * **Example** (Handling Success or Failure with Either)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const task1 = Effect.fail(\"task1\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Console.log(\"task1 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task1 interrupted\"))\n * )\n * const task2 = Effect.succeed(\"task2\").pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Console.log(\"task2 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task2 interrupted\"))\n * )\n *\n * // Run both tasks concurrently, wrapping the result\n * // in Either to capture success or failure\n * const program = Effect.race(Effect.either(task1), Effect.either(task2))\n *\n * Effect.runPromise(program).then(console.log)\n * // Output:\n * // task2 interrupted\n * // { _id: 'Either', _tag: 'Left', left: 'task1' }\n * ```\n *\n * @see {@link raceAll} for a version that handles multiple effects.\n * @see {@link raceFirst} for a version that returns the result of the first effect to complete.\n *\n * @since 2.0.0\n * @category Racing\n */\nexport const race: {\n  /**\n   * Races two effects and returns the result of the first successful one.\n   *\n   * **Details**\n   *\n   * This function takes two effects and runs them concurrently. The first effect\n   * that successfully completes will determine the result of the race, and the\n   * other effect will be interrupted.\n   *\n   * If neither effect succeeds, the function will fail with a `Cause`\n   * containing all the errors.\n   *\n   * **When to Use**\n   *\n   * This is useful when you want to run two effects concurrently, but only care\n   * about the first one to succeed. It is commonly used in cases like timeouts,\n   * retries, or when you want to optimize for the faster response without\n   * worrying about the other effect.\n   *\n   * **Handling Success or Failure with Either**\n   *\n   * If you want to handle the result of whichever task completes first, whether\n   * it succeeds or fails, you can use the `Effect.either` function. This function\n   * wraps the result in an `Either` type, allowing you to see if the result\n   * was a success (`Right`) or a failure (`Left`).\n   *\n   * **Example** (Both Tasks Succeed)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.succeed(\"task1\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task1 interrupted\"))\n   * )\n   * const task2 = Effect.succeed(\"task2\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task2 interrupted\"))\n   * )\n   *\n   * const program = Effect.race(task1, task2)\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // task1 done\n   * // task2 interrupted\n   * ```\n   *\n   * **Example** (One Task Fails, One Succeeds)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.fail(\"task1\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task1 interrupted\"))\n   * )\n   * const task2 = Effect.succeed(\"task2\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task2 interrupted\"))\n   * )\n   *\n   * const program = Effect.race(task1, task2)\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // task2 done\n   * ```\n   *\n   * **Example** (Both Tasks Fail)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.fail(\"task1\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task1 interrupted\"))\n   * )\n   * const task2 = Effect.fail(\"task2\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task2 interrupted\"))\n   * )\n   *\n   * const program = Effect.race(task1, task2)\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: {\n   * //     _id: 'Cause',\n   * //     _tag: 'Parallel',\n   * //     left: { _id: 'Cause', _tag: 'Fail', failure: 'task1' },\n   * //     right: { _id: 'Cause', _tag: 'Fail', failure: 'task2' }\n   * //   }\n   * // }\n   * ```\n   *\n   * **Example** (Handling Success or Failure with Either)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.fail(\"task1\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task1 interrupted\"))\n   * )\n   * const task2 = Effect.succeed(\"task2\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task2 interrupted\"))\n   * )\n   *\n   * // Run both tasks concurrently, wrapping the result\n   * // in Either to capture success or failure\n   * const program = Effect.race(Effect.either(task1), Effect.either(task2))\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // task2 interrupted\n   * // { _id: 'Either', _tag: 'Left', left: 'task1' }\n   * ```\n   *\n   * @see {@link raceAll} for a version that handles multiple effects.\n   * @see {@link raceFirst} for a version that returns the result of the first effect to complete.\n   *\n   * @since 2.0.0\n   * @category Racing\n   */\n  <A2, E2, R2>(that: Effect<A2, E2, R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  /**\n   * Races two effects and returns the result of the first successful one.\n   *\n   * **Details**\n   *\n   * This function takes two effects and runs them concurrently. The first effect\n   * that successfully completes will determine the result of the race, and the\n   * other effect will be interrupted.\n   *\n   * If neither effect succeeds, the function will fail with a `Cause`\n   * containing all the errors.\n   *\n   * **When to Use**\n   *\n   * This is useful when you want to run two effects concurrently, but only care\n   * about the first one to succeed. It is commonly used in cases like timeouts,\n   * retries, or when you want to optimize for the faster response without\n   * worrying about the other effect.\n   *\n   * **Handling Success or Failure with Either**\n   *\n   * If you want to handle the result of whichever task completes first, whether\n   * it succeeds or fails, you can use the `Effect.either` function. This function\n   * wraps the result in an `Either` type, allowing you to see if the result\n   * was a success (`Right`) or a failure (`Left`).\n   *\n   * **Example** (Both Tasks Succeed)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.succeed(\"task1\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task1 interrupted\"))\n   * )\n   * const task2 = Effect.succeed(\"task2\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task2 interrupted\"))\n   * )\n   *\n   * const program = Effect.race(task1, task2)\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // task1 done\n   * // task2 interrupted\n   * ```\n   *\n   * **Example** (One Task Fails, One Succeeds)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.fail(\"task1\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task1 interrupted\"))\n   * )\n   * const task2 = Effect.succeed(\"task2\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task2 interrupted\"))\n   * )\n   *\n   * const program = Effect.race(task1, task2)\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // task2 done\n   * ```\n   *\n   * **Example** (Both Tasks Fail)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.fail(\"task1\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task1 interrupted\"))\n   * )\n   * const task2 = Effect.fail(\"task2\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task2 interrupted\"))\n   * )\n   *\n   * const program = Effect.race(task1, task2)\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: {\n   * //     _id: 'Cause',\n   * //     _tag: 'Parallel',\n   * //     left: { _id: 'Cause', _tag: 'Fail', failure: 'task1' },\n   * //     right: { _id: 'Cause', _tag: 'Fail', failure: 'task2' }\n   * //   }\n   * // }\n   * ```\n   *\n   * **Example** (Handling Success or Failure with Either)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.fail(\"task1\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task1 interrupted\"))\n   * )\n   * const task2 = Effect.succeed(\"task2\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() => Console.log(\"task2 interrupted\"))\n   * )\n   *\n   * // Run both tasks concurrently, wrapping the result\n   * // in Either to capture success or failure\n   * const program = Effect.race(Effect.either(task1), Effect.either(task2))\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // task2 interrupted\n   * // { _id: 'Either', _tag: 'Left', left: 'task1' }\n   * ```\n   *\n   * @see {@link raceAll} for a version that handles multiple effects.\n   * @see {@link raceFirst} for a version that returns the result of the first effect to complete.\n   *\n   * @since 2.0.0\n   * @category Racing\n   */\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, that: Effect<A2, E2, R2>): Effect<A | A2, E | E2, R | R2>\n} = fiberRuntime.race\n\n/**\n * Races multiple effects and returns the first successful result.\n *\n * **Details**\n *\n * This function runs multiple effects concurrently and returns the result of\n * the first one to succeed. If one effect succeeds, the others will be\n * interrupted.\n *\n * If none of the effects succeed, the function will fail with the last error\n * encountered.\n *\n * **When to Use**\n *\n * This is useful when you want to race multiple effects, but only care about\n * the first one to succeed. It is commonly used in cases like timeouts,\n * retries, or when you want to optimize for the faster response without\n * worrying about the other effects.\n *\n * **Example** (All Tasks Succeed)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const task1 = Effect.succeed(\"task1\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Console.log(\"task1 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task1 interrupted\"))\n * )\n * const task2 = Effect.succeed(\"task2\").pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Console.log(\"task2 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task2 interrupted\"))\n * )\n *\n * const task3 = Effect.succeed(\"task3\").pipe(\n *   Effect.delay(\"150 millis\"),\n *   Effect.tap(Console.log(\"task3 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task3 interrupted\"))\n * )\n *\n * const program = Effect.raceAll([task1, task2, task3])\n *\n * Effect.runFork(program)\n * // Output:\n * // task1 done\n * // task2 interrupted\n * // task3 interrupted\n * ```\n *\n * **Example** (One Task Fails, Two Tasks Succeed)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const task1 = Effect.fail(\"task1\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Console.log(\"task1 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task1 interrupted\"))\n * )\n * const task2 = Effect.succeed(\"task2\").pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Console.log(\"task2 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task2 interrupted\"))\n * )\n *\n * const task3 = Effect.succeed(\"task3\").pipe(\n *   Effect.delay(\"150 millis\"),\n *   Effect.tap(Console.log(\"task3 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task3 interrupted\"))\n * )\n *\n * const program = Effect.raceAll([task1, task2, task3])\n *\n * Effect.runFork(program)\n * // Output:\n * // task3 done\n * // task2 interrupted\n * ```\n *\n * **Example** (All Tasks Fail)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const task1 = Effect.fail(\"task1\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Console.log(\"task1 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task1 interrupted\"))\n * )\n * const task2 = Effect.fail(\"task2\").pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Console.log(\"task2 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task2 interrupted\"))\n * )\n *\n * const task3 = Effect.fail(\"task3\").pipe(\n *   Effect.delay(\"150 millis\"),\n *   Effect.tap(Console.log(\"task3 done\")),\n *   Effect.onInterrupt(() => Console.log(\"task3 interrupted\"))\n * )\n *\n * const program = Effect.raceAll([task1, task2, task3])\n *\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: { _id: 'Cause', _tag: 'Fail', failure: 'task2' }\n * // }\n * ```\n *\n * @see {@link race} for a version that handles only two effects.\n *\n * @since 2.0.0\n * @category Racing\n */\nexport const raceAll: <Eff extends Effect<any, any, any>>(\n  all: Iterable<Eff>\n) => Effect<Effect.Success<Eff>, Effect.Error<Eff>, Effect.Context<Eff>> = fiberRuntime.raceAll\n\n/**\n * Races two effects and returns the result of the first one to complete.\n *\n * **Details**\n *\n * This function takes two effects and runs them concurrently, returning the\n * result of the first one that completes, regardless of whether it succeeds or\n * fails.\n *\n * **When to Use**\n *\n * This function is useful when you want to race two operations, and you want to\n * proceed with whichever one finishes first, regardless of whether it succeeds\n * or fails.\n *\n * **Disconnecting Effects**\n *\n * The `Effect.raceFirst` function safely interrupts the “loser” effect once the other completes, but it will not resume until the loser is cleanly terminated.\n *\n * If you want a quicker return, you can disconnect the interrupt signal for both effects. Instead of calling:\n *\n * ```ts skip-type-checking\n * Effect.raceFirst(task1, task2)\n * ```\n *\n * You can use:\n *\n * ```ts skip-type-checking\n * Effect.raceFirst(Effect.disconnect(task1), Effect.disconnect(task2))\n * ```\n *\n * This allows both effects to complete independently while still terminating the losing effect in the background.\n *\n * **Example** (Both Tasks Succeed)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const task1 = Effect.succeed(\"task1\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Console.log(\"task1 done\")),\n *   Effect.onInterrupt(() =>\n *     Console.log(\"task1 interrupted\").pipe(Effect.delay(\"100 millis\"))\n *   )\n * )\n * const task2 = Effect.succeed(\"task2\").pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Console.log(\"task2 done\")),\n *   Effect.onInterrupt(() =>\n *     Console.log(\"task2 interrupted\").pipe(Effect.delay(\"100 millis\"))\n *   )\n * )\n *\n * const program = Effect.raceFirst(task1, task2).pipe(\n *   Effect.tap(Console.log(\"more work...\"))\n * )\n *\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // task1 done\n * // task2 interrupted\n * // more work...\n * // { _id: 'Exit', _tag: 'Success', value: 'task1' }\n * ```\n *\n * **Example** (One Task Fails, One Succeeds)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const task1 = Effect.fail(\"task1\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Console.log(\"task1 done\")),\n *   Effect.onInterrupt(() =>\n *     Console.log(\"task1 interrupted\").pipe(Effect.delay(\"100 millis\"))\n *   )\n * )\n * const task2 = Effect.succeed(\"task2\").pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Console.log(\"task2 done\")),\n *   Effect.onInterrupt(() =>\n *     Console.log(\"task2 interrupted\").pipe(Effect.delay(\"100 millis\"))\n *   )\n * )\n *\n * const program = Effect.raceFirst(task1, task2).pipe(\n *   Effect.tap(Console.log(\"more work...\"))\n * )\n *\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // task2 interrupted\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: { _id: 'Cause', _tag: 'Fail', failure: 'task1' }\n * // }\n * ```\n *\n * **Example** (Using Effect.disconnect for Quicker Return)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const task1 = Effect.succeed(\"task1\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Console.log(\"task1 done\")),\n *   Effect.onInterrupt(() =>\n *     Console.log(\"task1 interrupted\").pipe(Effect.delay(\"100 millis\"))\n *   )\n * )\n * const task2 = Effect.succeed(\"task2\").pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Console.log(\"task2 done\")),\n *   Effect.onInterrupt(() =>\n *     Console.log(\"task2 interrupted\").pipe(Effect.delay(\"100 millis\"))\n *   )\n * )\n *\n * // Race the two tasks with disconnect to allow quicker return\n * const program = Effect.raceFirst(\n *   Effect.disconnect(task1),\n *   Effect.disconnect(task2)\n * ).pipe(Effect.tap(Console.log(\"more work...\")))\n *\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // task1 done\n * // more work...\n * // { _id: 'Exit', _tag: 'Success', value: 'task1' }\n * // task2 interrupted\n * ```\n *\n * @since 2.0.0\n * @category Racing\n */\nexport const raceFirst: {\n  /**\n   * Races two effects and returns the result of the first one to complete.\n   *\n   * **Details**\n   *\n   * This function takes two effects and runs them concurrently, returning the\n   * result of the first one that completes, regardless of whether it succeeds or\n   * fails.\n   *\n   * **When to Use**\n   *\n   * This function is useful when you want to race two operations, and you want to\n   * proceed with whichever one finishes first, regardless of whether it succeeds\n   * or fails.\n   *\n   * **Disconnecting Effects**\n   *\n   * The `Effect.raceFirst` function safely interrupts the “loser” effect once the other completes, but it will not resume until the loser is cleanly terminated.\n   *\n   * If you want a quicker return, you can disconnect the interrupt signal for both effects. Instead of calling:\n   *\n   * ```ts skip-type-checking\n   * Effect.raceFirst(task1, task2)\n   * ```\n   *\n   * You can use:\n   *\n   * ```ts skip-type-checking\n   * Effect.raceFirst(Effect.disconnect(task1), Effect.disconnect(task2))\n   * ```\n   *\n   * This allows both effects to complete independently while still terminating the losing effect in the background.\n   *\n   * **Example** (Both Tasks Succeed)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.succeed(\"task1\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task1 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   * const task2 = Effect.succeed(\"task2\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task2 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   *\n   * const program = Effect.raceFirst(task1, task2).pipe(\n   *   Effect.tap(Console.log(\"more work...\"))\n   * )\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // task1 done\n   * // task2 interrupted\n   * // more work...\n   * // { _id: 'Exit', _tag: 'Success', value: 'task1' }\n   * ```\n   *\n   * **Example** (One Task Fails, One Succeeds)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.fail(\"task1\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task1 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   * const task2 = Effect.succeed(\"task2\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task2 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   *\n   * const program = Effect.raceFirst(task1, task2).pipe(\n   *   Effect.tap(Console.log(\"more work...\"))\n   * )\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // task2 interrupted\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: { _id: 'Cause', _tag: 'Fail', failure: 'task1' }\n   * // }\n   * ```\n   *\n   * **Example** (Using Effect.disconnect for Quicker Return)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.succeed(\"task1\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task1 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   * const task2 = Effect.succeed(\"task2\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task2 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   *\n   * // Race the two tasks with disconnect to allow quicker return\n   * const program = Effect.raceFirst(\n   *   Effect.disconnect(task1),\n   *   Effect.disconnect(task2)\n   * ).pipe(Effect.tap(Console.log(\"more work...\")))\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // task1 done\n   * // more work...\n   * // { _id: 'Exit', _tag: 'Success', value: 'task1' }\n   * // task2 interrupted\n   * ```\n   *\n   * @since 2.0.0\n   * @category Racing\n   */\n  <A2, E2, R2>(that: Effect<A2, E2, R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  /**\n   * Races two effects and returns the result of the first one to complete.\n   *\n   * **Details**\n   *\n   * This function takes two effects and runs them concurrently, returning the\n   * result of the first one that completes, regardless of whether it succeeds or\n   * fails.\n   *\n   * **When to Use**\n   *\n   * This function is useful when you want to race two operations, and you want to\n   * proceed with whichever one finishes first, regardless of whether it succeeds\n   * or fails.\n   *\n   * **Disconnecting Effects**\n   *\n   * The `Effect.raceFirst` function safely interrupts the “loser” effect once the other completes, but it will not resume until the loser is cleanly terminated.\n   *\n   * If you want a quicker return, you can disconnect the interrupt signal for both effects. Instead of calling:\n   *\n   * ```ts skip-type-checking\n   * Effect.raceFirst(task1, task2)\n   * ```\n   *\n   * You can use:\n   *\n   * ```ts skip-type-checking\n   * Effect.raceFirst(Effect.disconnect(task1), Effect.disconnect(task2))\n   * ```\n   *\n   * This allows both effects to complete independently while still terminating the losing effect in the background.\n   *\n   * **Example** (Both Tasks Succeed)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.succeed(\"task1\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task1 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   * const task2 = Effect.succeed(\"task2\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task2 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   *\n   * const program = Effect.raceFirst(task1, task2).pipe(\n   *   Effect.tap(Console.log(\"more work...\"))\n   * )\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // task1 done\n   * // task2 interrupted\n   * // more work...\n   * // { _id: 'Exit', _tag: 'Success', value: 'task1' }\n   * ```\n   *\n   * **Example** (One Task Fails, One Succeeds)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.fail(\"task1\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task1 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   * const task2 = Effect.succeed(\"task2\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task2 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   *\n   * const program = Effect.raceFirst(task1, task2).pipe(\n   *   Effect.tap(Console.log(\"more work...\"))\n   * )\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // task2 interrupted\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: { _id: 'Cause', _tag: 'Fail', failure: 'task1' }\n   * // }\n   * ```\n   *\n   * **Example** (Using Effect.disconnect for Quicker Return)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.succeed(\"task1\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task1 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   * const task2 = Effect.succeed(\"task2\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task2 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   *\n   * // Race the two tasks with disconnect to allow quicker return\n   * const program = Effect.raceFirst(\n   *   Effect.disconnect(task1),\n   *   Effect.disconnect(task2)\n   * ).pipe(Effect.tap(Console.log(\"more work...\")))\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // task1 done\n   * // more work...\n   * // { _id: 'Exit', _tag: 'Success', value: 'task1' }\n   * // task2 interrupted\n   * ```\n   *\n   * @since 2.0.0\n   * @category Racing\n   */\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, that: Effect<A2, E2, R2>): Effect<A | A2, E | E2, R | R2>\n} = circular.raceFirst\n\n/**\n * Races two effects and calls a finisher when the first one completes.\n *\n * **Details**\n *\n * This function runs two effects concurrently and calls a specified “finisher”\n * function once one of the effects completes, regardless of whether it succeeds\n * or fails.\n *\n * The finisher functions for each effect allow you to handle the results of\n * each effect as soon as they complete.\n *\n * The function takes two finisher callbacks, one for each effect, and allows\n * you to specify how to handle the result of the race.\n *\n * **When to Use**\n *\n * This function is useful when you need to react to the completion of either\n * effect without waiting for both to finish. It can be used whenever you want\n * to take action based on the first available result.\n *\n * **Example** (Handling Results of Concurrent Tasks)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const task1 = Effect.succeed(\"task1\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Console.log(\"task1 done\")),\n *   Effect.onInterrupt(() =>\n *     Console.log(\"task1 interrupted\").pipe(Effect.delay(\"100 millis\"))\n *   )\n * )\n * const task2 = Effect.succeed(\"task2\").pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Console.log(\"task2 done\")),\n *   Effect.onInterrupt(() =>\n *     Console.log(\"task2 interrupted\").pipe(Effect.delay(\"100 millis\"))\n *   )\n * )\n *\n * const program = Effect.raceWith(task1, task2, {\n *   onSelfDone: (exit) => Console.log(`task1 exited with ${exit}`),\n *   onOtherDone: (exit) => Console.log(`task2 exited with ${exit}`)\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // task1 done\n * // task1 exited with {\n * //   \"_id\": \"Exit\",\n * //   \"_tag\": \"Success\",\n * //   \"value\": \"task1\"\n * // }\n * // task2 interrupted\n * ```\n *\n * @since 2.0.0\n * @category Racing\n */\nexport const raceWith: {\n  /**\n   * Races two effects and calls a finisher when the first one completes.\n   *\n   * **Details**\n   *\n   * This function runs two effects concurrently and calls a specified “finisher”\n   * function once one of the effects completes, regardless of whether it succeeds\n   * or fails.\n   *\n   * The finisher functions for each effect allow you to handle the results of\n   * each effect as soon as they complete.\n   *\n   * The function takes two finisher callbacks, one for each effect, and allows\n   * you to specify how to handle the result of the race.\n   *\n   * **When to Use**\n   *\n   * This function is useful when you need to react to the completion of either\n   * effect without waiting for both to finish. It can be used whenever you want\n   * to take action based on the first available result.\n   *\n   * **Example** (Handling Results of Concurrent Tasks)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.succeed(\"task1\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task1 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   * const task2 = Effect.succeed(\"task2\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task2 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   *\n   * const program = Effect.raceWith(task1, task2, {\n   *   onSelfDone: (exit) => Console.log(`task1 exited with ${exit}`),\n   *   onOtherDone: (exit) => Console.log(`task2 exited with ${exit}`)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // task1 done\n   * // task1 exited with {\n   * //   \"_id\": \"Exit\",\n   * //   \"_tag\": \"Success\",\n   * //   \"value\": \"task1\"\n   * // }\n   * // task2 interrupted\n   * ```\n   *\n   * @since 2.0.0\n   * @category Racing\n   */\n  <A1, E1, R1, E, A, A2, E2, R2, A3, E3, R3>(\n    other: Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, E2 | E3, R1 | R2 | R3 | R>\n  /**\n   * Races two effects and calls a finisher when the first one completes.\n   *\n   * **Details**\n   *\n   * This function runs two effects concurrently and calls a specified “finisher”\n   * function once one of the effects completes, regardless of whether it succeeds\n   * or fails.\n   *\n   * The finisher functions for each effect allow you to handle the results of\n   * each effect as soon as they complete.\n   *\n   * The function takes two finisher callbacks, one for each effect, and allows\n   * you to specify how to handle the result of the race.\n   *\n   * **When to Use**\n   *\n   * This function is useful when you need to react to the completion of either\n   * effect without waiting for both to finish. It can be used whenever you want\n   * to take action based on the first available result.\n   *\n   * **Example** (Handling Results of Concurrent Tasks)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Effect.succeed(\"task1\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Console.log(\"task1 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task1 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   * const task2 = Effect.succeed(\"task2\").pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Console.log(\"task2 done\")),\n   *   Effect.onInterrupt(() =>\n   *     Console.log(\"task2 interrupted\").pipe(Effect.delay(\"100 millis\"))\n   *   )\n   * )\n   *\n   * const program = Effect.raceWith(task1, task2, {\n   *   onSelfDone: (exit) => Console.log(`task1 exited with ${exit}`),\n   *   onOtherDone: (exit) => Console.log(`task2 exited with ${exit}`)\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // task1 done\n   * // task1 exited with {\n   * //   \"_id\": \"Exit\",\n   * //   \"_tag\": \"Success\",\n   * //   \"value\": \"task1\"\n   * // }\n   * // task2 interrupted\n   * ```\n   *\n   * @since 2.0.0\n   * @category Racing\n   */\n  <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n    self: Effect<A, E, R>,\n    other: Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect<A3, E3, R3>\n    }\n  ): Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>\n} = fiberRuntime.raceWith\n\n/**\n * Summarizes a effect by computing some value before and after execution, and\n * then combining the values to produce a summary, together with the result of\n * execution.\n *\n * @since 2.0.0\n * @category Sequencing\n */\nexport const summarized: {\n  /**\n   * Summarizes a effect by computing some value before and after execution, and\n   * then combining the values to produce a summary, together with the result of\n   * execution.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <B, E2, R2, C>(summary: Effect<B, E2, R2>, f: (start: B, end: B) => C): <A, E, R>(self: Effect<A, E, R>) => Effect<[C, A], E2 | E, R2 | R>\n  /**\n   * Summarizes a effect by computing some value before and after execution, and\n   * then combining the values to produce a summary, together with the result of\n   * execution.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, E, R, B, E2, R2, C>(\n    self: Effect<A, E, R>,\n    summary: Effect<B, E2, R2>,\n    f: (start: B, end: B) => C\n  ): Effect<[C, A], E2 | E, R2 | R>\n} = effect.summarized\n\n/**\n * Runs a side effect with the result of an effect without changing the original\n * value.\n *\n * **Details**\n *\n * This function works similarly to `flatMap`, but it ignores the result of the\n * function passed to it. The value from the previous effect remains available\n * for the next part of the chain. Note that if the side effect fails, the\n * entire chain will fail too.\n *\n * **When to Use**\n *\n * Use this function when you want to perform a side effect, like logging or\n * tracking, without modifying the main value. This is useful when you need to\n * observe or record an action but want the original value to be passed to the\n * next step.\n *\n * **Example** (Logging a step in a pipeline)\n *\n * ```ts\n * import { Console, Effect, pipe } from \"effect\"\n *\n * // Function to apply a discount safely to a transaction amount\n * const applyDiscount = (\n *   total: number,\n *   discountRate: number\n * ): Effect.Effect<number, Error> =>\n *   discountRate === 0\n *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n *     : Effect.succeed(total - (total * discountRate) / 100)\n *\n * // Simulated asynchronous task to fetch a transaction amount from database\n * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n *\n * const finalAmount = pipe(\n *   fetchTransactionAmount,\n *   // Log the fetched transaction amount\n *   Effect.tap((amount) => Console.log(`Apply a discount to: ${amount}`)),\n *   // `amount` is still available!\n *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n * )\n *\n * Effect.runPromise(finalAmount).then(console.log)\n * // Output:\n * // Apply a discount to: 100\n * // 95\n * ```\n *\n * @see {@link flatMap} for a version that allows you to change the value.\n *\n * @since 2.0.0\n * @category Sequencing\n */\nexport const tap: {\n  /**\n   * Runs a side effect with the result of an effect without changing the original\n   * value.\n   *\n   * **Details**\n   *\n   * This function works similarly to `flatMap`, but it ignores the result of the\n   * function passed to it. The value from the previous effect remains available\n   * for the next part of the chain. Note that if the side effect fails, the\n   * entire chain will fail too.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to perform a side effect, like logging or\n   * tracking, without modifying the main value. This is useful when you need to\n   * observe or record an action but want the original value to be passed to the\n   * next step.\n   *\n   * **Example** (Logging a step in a pipeline)\n   *\n   * ```ts\n   * import { Console, Effect, pipe } from \"effect\"\n   *\n   * // Function to apply a discount safely to a transaction amount\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * // Simulated asynchronous task to fetch a transaction amount from database\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * const finalAmount = pipe(\n   *   fetchTransactionAmount,\n   *   // Log the fetched transaction amount\n   *   Effect.tap((amount) => Console.log(`Apply a discount to: ${amount}`)),\n   *   // `amount` is still available!\n   *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(finalAmount).then(console.log)\n   * // Output:\n   * // Apply a discount to: 100\n   * // 95\n   * ```\n   *\n   * @see {@link flatMap} for a version that allows you to change the value.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, X>(f: (a: NoInfer<A>) => X): <E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  /**\n   * Runs a side effect with the result of an effect without changing the original\n   * value.\n   *\n   * **Details**\n   *\n   * This function works similarly to `flatMap`, but it ignores the result of the\n   * function passed to it. The value from the previous effect remains available\n   * for the next part of the chain. Note that if the side effect fails, the\n   * entire chain will fail too.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to perform a side effect, like logging or\n   * tracking, without modifying the main value. This is useful when you need to\n   * observe or record an action but want the original value to be passed to the\n   * next step.\n   *\n   * **Example** (Logging a step in a pipeline)\n   *\n   * ```ts\n   * import { Console, Effect, pipe } from \"effect\"\n   *\n   * // Function to apply a discount safely to a transaction amount\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * // Simulated asynchronous task to fetch a transaction amount from database\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * const finalAmount = pipe(\n   *   fetchTransactionAmount,\n   *   // Log the fetched transaction amount\n   *   Effect.tap((amount) => Console.log(`Apply a discount to: ${amount}`)),\n   *   // `amount` is still available!\n   *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(finalAmount).then(console.log)\n   * // Output:\n   * // Apply a discount to: 100\n   * // 95\n   * ```\n   *\n   * @see {@link flatMap} for a version that allows you to change the value.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, X, E1, R1>(f: (a: NoInfer<A>) => Effect<X, E1, R1>, options: { onlyEffect: true }): <E, R>(\n    self: Effect<A, E, R>\n  ) => Effect<A, E | E1, R | R1>\n  /**\n   * Runs a side effect with the result of an effect without changing the original\n   * value.\n   *\n   * **Details**\n   *\n   * This function works similarly to `flatMap`, but it ignores the result of the\n   * function passed to it. The value from the previous effect remains available\n   * for the next part of the chain. Note that if the side effect fails, the\n   * entire chain will fail too.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to perform a side effect, like logging or\n   * tracking, without modifying the main value. This is useful when you need to\n   * observe or record an action but want the original value to be passed to the\n   * next step.\n   *\n   * **Example** (Logging a step in a pipeline)\n   *\n   * ```ts\n   * import { Console, Effect, pipe } from \"effect\"\n   *\n   * // Function to apply a discount safely to a transaction amount\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * // Simulated asynchronous task to fetch a transaction amount from database\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * const finalAmount = pipe(\n   *   fetchTransactionAmount,\n   *   // Log the fetched transaction amount\n   *   Effect.tap((amount) => Console.log(`Apply a discount to: ${amount}`)),\n   *   // `amount` is still available!\n   *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(finalAmount).then(console.log)\n   * // Output:\n   * // Apply a discount to: 100\n   * // 95\n   * ```\n   *\n   * @see {@link flatMap} for a version that allows you to change the value.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <X>(f: NotFunction<X>): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  /**\n   * Runs a side effect with the result of an effect without changing the original\n   * value.\n   *\n   * **Details**\n   *\n   * This function works similarly to `flatMap`, but it ignores the result of the\n   * function passed to it. The value from the previous effect remains available\n   * for the next part of the chain. Note that if the side effect fails, the\n   * entire chain will fail too.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to perform a side effect, like logging or\n   * tracking, without modifying the main value. This is useful when you need to\n   * observe or record an action but want the original value to be passed to the\n   * next step.\n   *\n   * **Example** (Logging a step in a pipeline)\n   *\n   * ```ts\n   * import { Console, Effect, pipe } from \"effect\"\n   *\n   * // Function to apply a discount safely to a transaction amount\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * // Simulated asynchronous task to fetch a transaction amount from database\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * const finalAmount = pipe(\n   *   fetchTransactionAmount,\n   *   // Log the fetched transaction amount\n   *   Effect.tap((amount) => Console.log(`Apply a discount to: ${amount}`)),\n   *   // `amount` is still available!\n   *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(finalAmount).then(console.log)\n   * // Output:\n   * // Apply a discount to: 100\n   * // 95\n   * ```\n   *\n   * @see {@link flatMap} for a version that allows you to change the value.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <X, E1, R1>(f: Effect<X, E1, R1>, options: { onlyEffect: true }): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => Effect<A, E | E1, R | R1>\n  /**\n   * Runs a side effect with the result of an effect without changing the original\n   * value.\n   *\n   * **Details**\n   *\n   * This function works similarly to `flatMap`, but it ignores the result of the\n   * function passed to it. The value from the previous effect remains available\n   * for the next part of the chain. Note that if the side effect fails, the\n   * entire chain will fail too.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to perform a side effect, like logging or\n   * tracking, without modifying the main value. This is useful when you need to\n   * observe or record an action but want the original value to be passed to the\n   * next step.\n   *\n   * **Example** (Logging a step in a pipeline)\n   *\n   * ```ts\n   * import { Console, Effect, pipe } from \"effect\"\n   *\n   * // Function to apply a discount safely to a transaction amount\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * // Simulated asynchronous task to fetch a transaction amount from database\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * const finalAmount = pipe(\n   *   fetchTransactionAmount,\n   *   // Log the fetched transaction amount\n   *   Effect.tap((amount) => Console.log(`Apply a discount to: ${amount}`)),\n   *   // `amount` is still available!\n   *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(finalAmount).then(console.log)\n   * // Output:\n   * // Apply a discount to: 100\n   * // 95\n   * ```\n   *\n   * @see {@link flatMap} for a version that allows you to change the value.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, E, R, X>(self: Effect<A, E, R>, f: (a: NoInfer<A>) => X): [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  /**\n   * Runs a side effect with the result of an effect without changing the original\n   * value.\n   *\n   * **Details**\n   *\n   * This function works similarly to `flatMap`, but it ignores the result of the\n   * function passed to it. The value from the previous effect remains available\n   * for the next part of the chain. Note that if the side effect fails, the\n   * entire chain will fail too.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to perform a side effect, like logging or\n   * tracking, without modifying the main value. This is useful when you need to\n   * observe or record an action but want the original value to be passed to the\n   * next step.\n   *\n   * **Example** (Logging a step in a pipeline)\n   *\n   * ```ts\n   * import { Console, Effect, pipe } from \"effect\"\n   *\n   * // Function to apply a discount safely to a transaction amount\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * // Simulated asynchronous task to fetch a transaction amount from database\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * const finalAmount = pipe(\n   *   fetchTransactionAmount,\n   *   // Log the fetched transaction amount\n   *   Effect.tap((amount) => Console.log(`Apply a discount to: ${amount}`)),\n   *   // `amount` is still available!\n   *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(finalAmount).then(console.log)\n   * // Output:\n   * // Apply a discount to: 100\n   * // 95\n   * ```\n   *\n   * @see {@link flatMap} for a version that allows you to change the value.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, E, R, X, E1, R1>(\n    self: Effect<A, E, R>,\n    f: (a: NoInfer<A>) => Effect<X, E1, R1>,\n    options: { onlyEffect: true }\n  ): Effect<A, E | E1, R | R1>\n  /**\n   * Runs a side effect with the result of an effect without changing the original\n   * value.\n   *\n   * **Details**\n   *\n   * This function works similarly to `flatMap`, but it ignores the result of the\n   * function passed to it. The value from the previous effect remains available\n   * for the next part of the chain. Note that if the side effect fails, the\n   * entire chain will fail too.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to perform a side effect, like logging or\n   * tracking, without modifying the main value. This is useful when you need to\n   * observe or record an action but want the original value to be passed to the\n   * next step.\n   *\n   * **Example** (Logging a step in a pipeline)\n   *\n   * ```ts\n   * import { Console, Effect, pipe } from \"effect\"\n   *\n   * // Function to apply a discount safely to a transaction amount\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * // Simulated asynchronous task to fetch a transaction amount from database\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * const finalAmount = pipe(\n   *   fetchTransactionAmount,\n   *   // Log the fetched transaction amount\n   *   Effect.tap((amount) => Console.log(`Apply a discount to: ${amount}`)),\n   *   // `amount` is still available!\n   *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(finalAmount).then(console.log)\n   * // Output:\n   * // Apply a discount to: 100\n   * // 95\n   * ```\n   *\n   * @see {@link flatMap} for a version that allows you to change the value.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, E, R, X>(self: Effect<A, E, R>, f: NotFunction<X>): [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  /**\n   * Runs a side effect with the result of an effect without changing the original\n   * value.\n   *\n   * **Details**\n   *\n   * This function works similarly to `flatMap`, but it ignores the result of the\n   * function passed to it. The value from the previous effect remains available\n   * for the next part of the chain. Note that if the side effect fails, the\n   * entire chain will fail too.\n   *\n   * **When to Use**\n   *\n   * Use this function when you want to perform a side effect, like logging or\n   * tracking, without modifying the main value. This is useful when you need to\n   * observe or record an action but want the original value to be passed to the\n   * next step.\n   *\n   * **Example** (Logging a step in a pipeline)\n   *\n   * ```ts\n   * import { Console, Effect, pipe } from \"effect\"\n   *\n   * // Function to apply a discount safely to a transaction amount\n   * const applyDiscount = (\n   *   total: number,\n   *   discountRate: number\n   * ): Effect.Effect<number, Error> =>\n   *   discountRate === 0\n   *     ? Effect.fail(new Error(\"Discount rate cannot be zero\"))\n   *     : Effect.succeed(total - (total * discountRate) / 100)\n   *\n   * // Simulated asynchronous task to fetch a transaction amount from database\n   * const fetchTransactionAmount = Effect.promise(() => Promise.resolve(100))\n   *\n   * const finalAmount = pipe(\n   *   fetchTransactionAmount,\n   *   // Log the fetched transaction amount\n   *   Effect.tap((amount) => Console.log(`Apply a discount to: ${amount}`)),\n   *   // `amount` is still available!\n   *   Effect.flatMap((amount) => applyDiscount(amount, 5))\n   * )\n   *\n   * Effect.runPromise(finalAmount).then(console.log)\n   * // Output:\n   * // Apply a discount to: 100\n   * // 95\n   * ```\n   *\n   * @see {@link flatMap} for a version that allows you to change the value.\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, E, R, X, E1, R1>(self: Effect<A, E, R>, f: Effect<X, E1, R1>, options: { onlyEffect: true }): Effect<A, E | E1, R | R1>\n} = core.tap\n\n/**\n * Allows you to inspect both success and failure outcomes of an effect and\n * perform side effects for each.\n *\n * **Details**\n *\n * This function enables you to handle both success and failure cases\n * separately, without modifying the main effect's result. It is particularly\n * useful for scenarios where you need to log, monitor, or perform additional\n * actions depending on whether the effect succeeded or failed.\n *\n * When the effect succeeds, the `onSuccess` handler is executed with the\n * success value. When the effect fails, the `onFailure` handler is executed\n * with the failure value. Both handlers can include side effects such as\n * logging or analytics, and neither modifies the original effect's output.\n *\n * If either the success or failure handler fails, the overall effect will also\n * fail.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Random, Console } from \"effect\"\n *\n * // Simulate a task that might fail\n * const task = Effect.filterOrFail(\n *   Random.nextRange(-1, 1),\n *   (n) => n >= 0,\n *   () => \"random number is negative\"\n * )\n *\n * // Use tapBoth to log both success and failure outcomes\n * const tapping = Effect.tapBoth(task, {\n *   onFailure: (error) => Console.log(`failure: ${error}`),\n *   onSuccess: (randomNumber) =>\n *     Console.log(`random number: ${randomNumber}`)\n * })\n *\n * Effect.runFork(tapping)\n * // Example Output:\n * // failure: random number is negative\n * ```\n *\n * @since 2.0.0\n * @category Sequencing\n */\nexport const tapBoth: {\n  /**\n   * Allows you to inspect both success and failure outcomes of an effect and\n   * perform side effects for each.\n   *\n   * **Details**\n   *\n   * This function enables you to handle both success and failure cases\n   * separately, without modifying the main effect's result. It is particularly\n   * useful for scenarios where you need to log, monitor, or perform additional\n   * actions depending on whether the effect succeeded or failed.\n   *\n   * When the effect succeeds, the `onSuccess` handler is executed with the\n   * success value. When the effect fails, the `onFailure` handler is executed\n   * with the failure value. Both handlers can include side effects such as\n   * logging or analytics, and neither modifies the original effect's output.\n   *\n   * If either the success or failure handler fails, the overall effect will also\n   * fail.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Random, Console } from \"effect\"\n   *\n   * // Simulate a task that might fail\n   * const task = Effect.filterOrFail(\n   *   Random.nextRange(-1, 1),\n   *   (n) => n >= 0,\n   *   () => \"random number is negative\"\n   * )\n   *\n   * // Use tapBoth to log both success and failure outcomes\n   * const tapping = Effect.tapBoth(task, {\n   *   onFailure: (error) => Console.log(`failure: ${error}`),\n   *   onSuccess: (randomNumber) =>\n   *     Console.log(`random number: ${randomNumber}`)\n   * })\n   *\n   * Effect.runFork(tapping)\n   * // Example Output:\n   * // failure: random number is negative\n   * ```\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <E, X, E2, R2, A, X1, E3, R3>(\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect<X, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect<X1, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A, E | E2 | E3, R2 | R3 | R>\n  /**\n   * Allows you to inspect both success and failure outcomes of an effect and\n   * perform side effects for each.\n   *\n   * **Details**\n   *\n   * This function enables you to handle both success and failure cases\n   * separately, without modifying the main effect's result. It is particularly\n   * useful for scenarios where you need to log, monitor, or perform additional\n   * actions depending on whether the effect succeeded or failed.\n   *\n   * When the effect succeeds, the `onSuccess` handler is executed with the\n   * success value. When the effect fails, the `onFailure` handler is executed\n   * with the failure value. Both handlers can include side effects such as\n   * logging or analytics, and neither modifies the original effect's output.\n   *\n   * If either the success or failure handler fails, the overall effect will also\n   * fail.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Random, Console } from \"effect\"\n   *\n   * // Simulate a task that might fail\n   * const task = Effect.filterOrFail(\n   *   Random.nextRange(-1, 1),\n   *   (n) => n >= 0,\n   *   () => \"random number is negative\"\n   * )\n   *\n   * // Use tapBoth to log both success and failure outcomes\n   * const tapping = Effect.tapBoth(task, {\n   *   onFailure: (error) => Console.log(`failure: ${error}`),\n   *   onSuccess: (randomNumber) =>\n   *     Console.log(`random number: ${randomNumber}`)\n   * })\n   *\n   * Effect.runFork(tapping)\n   * // Example Output:\n   * // failure: random number is negative\n   * ```\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, E, R, X, E2, R2, X1, E3, R3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Effect<X, E2, R2>\n      readonly onSuccess: (a: A) => Effect<X1, E3, R3>\n    }\n  ): Effect<A, E | E2 | E3, R | R2 | R3>\n} = effect.tapBoth\n\n/**\n * Inspect severe errors or defects (non-recoverable failures) in an effect.\n *\n * **Details**\n *\n * This function is specifically designed to handle and inspect defects, which\n * are critical failures in your program, such as unexpected runtime exceptions\n * or system-level errors. Unlike normal recoverable errors, defects typically\n * indicate serious issues that cannot be addressed through standard error\n * handling.\n *\n * When a defect occurs in an effect, the function you provide to this function\n * will be executed, allowing you to log, monitor, or handle the defect in some\n * way. Importantly, this does not alter the main result of the effect. If no\n * defect occurs, the effect behaves as if this function was not used.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * // Simulate a task that fails with a recoverable error\n * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n *\n * // tapDefect won't log anything because NetworkError is not a defect\n * const tapping1 = Effect.tapDefect(task1, (cause) =>\n *   Console.log(`defect: ${cause}`)\n * )\n *\n * Effect.runFork(tapping1)\n * // No Output\n *\n * // Simulate a severe failure in the system\n * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n *   \"Something went wrong\"\n * )\n *\n * // Log the defect using tapDefect\n * const tapping2 = Effect.tapDefect(task2, (cause) =>\n *   Console.log(`defect: ${cause}`)\n * )\n *\n * Effect.runFork(tapping2)\n * // Output:\n * // defect: RuntimeException: Something went wrong\n * //   ... stack trace ...\n * ```\n *\n * @since 2.0.0\n * @category Sequencing\n */\nexport const tapDefect: {\n  /**\n   * Inspect severe errors or defects (non-recoverable failures) in an effect.\n   *\n   * **Details**\n   *\n   * This function is specifically designed to handle and inspect defects, which\n   * are critical failures in your program, such as unexpected runtime exceptions\n   * or system-level errors. Unlike normal recoverable errors, defects typically\n   * indicate serious issues that cannot be addressed through standard error\n   * handling.\n   *\n   * When a defect occurs in an effect, the function you provide to this function\n   * will be executed, allowing you to log, monitor, or handle the defect in some\n   * way. Importantly, this does not alter the main result of the effect. If no\n   * defect occurs, the effect behaves as if this function was not used.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Simulate a task that fails with a recoverable error\n   * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n   *\n   * // tapDefect won't log anything because NetworkError is not a defect\n   * const tapping1 = Effect.tapDefect(task1, (cause) =>\n   *   Console.log(`defect: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping1)\n   * // No Output\n   *\n   * // Simulate a severe failure in the system\n   * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n   *   \"Something went wrong\"\n   * )\n   *\n   * // Log the defect using tapDefect\n   * const tapping2 = Effect.tapDefect(task2, (cause) =>\n   *   Console.log(`defect: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping2)\n   * // Output:\n   * // defect: RuntimeException: Something went wrong\n   * //   ... stack trace ...\n   * ```\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <X, E2, R2>(f: (cause: Cause.Cause<never>) => Effect<X, E2, R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E2 | E, R2 | R>\n  /**\n   * Inspect severe errors or defects (non-recoverable failures) in an effect.\n   *\n   * **Details**\n   *\n   * This function is specifically designed to handle and inspect defects, which\n   * are critical failures in your program, such as unexpected runtime exceptions\n   * or system-level errors. Unlike normal recoverable errors, defects typically\n   * indicate serious issues that cannot be addressed through standard error\n   * handling.\n   *\n   * When a defect occurs in an effect, the function you provide to this function\n   * will be executed, allowing you to log, monitor, or handle the defect in some\n   * way. Importantly, this does not alter the main result of the effect. If no\n   * defect occurs, the effect behaves as if this function was not used.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Simulate a task that fails with a recoverable error\n   * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n   *\n   * // tapDefect won't log anything because NetworkError is not a defect\n   * const tapping1 = Effect.tapDefect(task1, (cause) =>\n   *   Console.log(`defect: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping1)\n   * // No Output\n   *\n   * // Simulate a severe failure in the system\n   * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n   *   \"Something went wrong\"\n   * )\n   *\n   * // Log the defect using tapDefect\n   * const tapping2 = Effect.tapDefect(task2, (cause) =>\n   *   Console.log(`defect: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping2)\n   * // Output:\n   * // defect: RuntimeException: Something went wrong\n   * //   ... stack trace ...\n   * ```\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, E, R, X, E2, R2>(self: Effect<A, E, R>, f: (cause: Cause.Cause<never>) => Effect<X, E2, R2>): Effect<A, E | E2, R | R2>\n} = effect.tapDefect\n\n/**\n * Execute a side effect on failure without modifying the original effect.\n *\n * **Details**\n *\n * This function allows you to inspect and react to the failure of an effect by\n * executing an additional effect. The failure value is passed to the provided\n * function, enabling you to log it, track it, or perform any other operation.\n * Importantly, the original failure remains intact and is re-propagated, so the\n * effect's behavior is unchanged.\n *\n * The side effect you provide is only executed when the effect fails. If the\n * effect succeeds, the function is ignored, and the success value is propagated\n * as usual.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * // Simulate a task that fails with an error\n * const task: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n *\n * // Use tapError to log the error message when the task fails\n * const tapping = Effect.tapError(task, (error) =>\n *   Console.log(`expected error: ${error}`)\n * )\n *\n * Effect.runFork(tapping)\n * // Output:\n * // expected error: NetworkError\n * ```\n *\n * @since 2.0.0\n * @category Sequencing\n */\nexport const tapError: {\n  /**\n   * Execute a side effect on failure without modifying the original effect.\n   *\n   * **Details**\n   *\n   * This function allows you to inspect and react to the failure of an effect by\n   * executing an additional effect. The failure value is passed to the provided\n   * function, enabling you to log it, track it, or perform any other operation.\n   * Importantly, the original failure remains intact and is re-propagated, so the\n   * effect's behavior is unchanged.\n   *\n   * The side effect you provide is only executed when the effect fails. If the\n   * effect succeeds, the function is ignored, and the success value is propagated\n   * as usual.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Simulate a task that fails with an error\n   * const task: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n   *\n   * // Use tapError to log the error message when the task fails\n   * const tapping = Effect.tapError(task, (error) =>\n   *   Console.log(`expected error: ${error}`)\n   * )\n   *\n   * Effect.runFork(tapping)\n   * // Output:\n   * // expected error: NetworkError\n   * ```\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <E, X, E2, R2>(f: (e: NoInfer<E>) => Effect<X, E2, R2>): <A, R>(self: Effect<A, E, R>) => Effect<A, E | E2, R2 | R>\n  /**\n   * Execute a side effect on failure without modifying the original effect.\n   *\n   * **Details**\n   *\n   * This function allows you to inspect and react to the failure of an effect by\n   * executing an additional effect. The failure value is passed to the provided\n   * function, enabling you to log it, track it, or perform any other operation.\n   * Importantly, the original failure remains intact and is re-propagated, so the\n   * effect's behavior is unchanged.\n   *\n   * The side effect you provide is only executed when the effect fails. If the\n   * effect succeeds, the function is ignored, and the success value is propagated\n   * as usual.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Simulate a task that fails with an error\n   * const task: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n   *\n   * // Use tapError to log the error message when the task fails\n   * const tapping = Effect.tapError(task, (error) =>\n   *   Console.log(`expected error: ${error}`)\n   * )\n   *\n   * Effect.runFork(tapping)\n   * // Output:\n   * // expected error: NetworkError\n   * ```\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, E, R, X, E2, R2>(self: Effect<A, E, R>, f: (e: E) => Effect<X, E2, R2>): Effect<A, E | E2, R | R2>\n} = effect.tapError\n\n/**\n * Inspect errors matching a specific tag without altering the original effect.\n *\n * **Details**\n *\n * This function allows you to inspect and handle specific error types based on\n * their `_tag` property. It is particularly useful in applications where errors\n * are modeled with tagged types (e.g., union types with discriminating tags).\n * By targeting errors with a specific `_tag`, you can log or perform actions on\n * them while leaving the error channel and overall effect unchanged.\n *\n * If the error doesn't match the specified tag, this function does nothing, and\n * the effect proceeds as usual.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * class NetworkError {\n *   readonly _tag = \"NetworkError\"\n *   constructor(readonly statusCode: number) {}\n * }\n *\n * class ValidationError {\n *   readonly _tag = \"ValidationError\"\n *   constructor(readonly field: string) {}\n * }\n *\n * // Create a task that fails with a NetworkError\n * const task: Effect.Effect<number, NetworkError | ValidationError> =\n *   Effect.fail(new NetworkError(504))\n *\n * // Use tapErrorTag to inspect only NetworkError types and log the status code\n * const tapping = Effect.tapErrorTag(task, \"NetworkError\", (error) =>\n *   Console.log(`expected error: ${error.statusCode}`)\n * )\n *\n * Effect.runFork(tapping)\n * // Output:\n * // expected error: 504\n * ```\n *\n * @since 2.0.0\n * @category Sequencing\n */\nexport const tapErrorTag: {\n  /**\n   * Inspect errors matching a specific tag without altering the original effect.\n   *\n   * **Details**\n   *\n   * This function allows you to inspect and handle specific error types based on\n   * their `_tag` property. It is particularly useful in applications where errors\n   * are modeled with tagged types (e.g., union types with discriminating tags).\n   * By targeting errors with a specific `_tag`, you can log or perform actions on\n   * them while leaving the error channel and overall effect unchanged.\n   *\n   * If the error doesn't match the specified tag, this function does nothing, and\n   * the effect proceeds as usual.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * class NetworkError {\n   *   readonly _tag = \"NetworkError\"\n   *   constructor(readonly statusCode: number) {}\n   * }\n   *\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   *   constructor(readonly field: string) {}\n   * }\n   *\n   * // Create a task that fails with a NetworkError\n   * const task: Effect.Effect<number, NetworkError | ValidationError> =\n   *   Effect.fail(new NetworkError(504))\n   *\n   * // Use tapErrorTag to inspect only NetworkError types and log the status code\n   * const tapping = Effect.tapErrorTag(task, \"NetworkError\", (error) =>\n   *   Console.log(`expected error: ${error.statusCode}`)\n   * )\n   *\n   * Effect.runFork(tapping)\n   * // Output:\n   * // expected error: 504\n   * ```\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <K extends E extends { _tag: string } ? E[\"_tag\"] : never, E, A1, E1, R1>(k: K, f: (e: NoInfer<Extract<E, { _tag: K }>>) => Effect<A1, E1, R1>): <A, R>(self: Effect<A, E, R>) => Effect<A, E | E1, R1 | R>\n  /**\n   * Inspect errors matching a specific tag without altering the original effect.\n   *\n   * **Details**\n   *\n   * This function allows you to inspect and handle specific error types based on\n   * their `_tag` property. It is particularly useful in applications where errors\n   * are modeled with tagged types (e.g., union types with discriminating tags).\n   * By targeting errors with a specific `_tag`, you can log or perform actions on\n   * them while leaving the error channel and overall effect unchanged.\n   *\n   * If the error doesn't match the specified tag, this function does nothing, and\n   * the effect proceeds as usual.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * class NetworkError {\n   *   readonly _tag = \"NetworkError\"\n   *   constructor(readonly statusCode: number) {}\n   * }\n   *\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   *   constructor(readonly field: string) {}\n   * }\n   *\n   * // Create a task that fails with a NetworkError\n   * const task: Effect.Effect<number, NetworkError | ValidationError> =\n   *   Effect.fail(new NetworkError(504))\n   *\n   * // Use tapErrorTag to inspect only NetworkError types and log the status code\n   * const tapping = Effect.tapErrorTag(task, \"NetworkError\", (error) =>\n   *   Console.log(`expected error: ${error.statusCode}`)\n   * )\n   *\n   * Effect.runFork(tapping)\n   * // Output:\n   * // expected error: 504\n   * ```\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, E, R, K extends E extends { _tag: string } ? E[\"_tag\"] : never, A1, E1, R1>(\n    self: Effect<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect<A1, E1, R1>\n  ): Effect<A, E | E1, R | R1>\n} = effect.tapErrorTag\n\n/**\n * Inspect the complete cause of an error, including failures and defects.\n *\n * **Details**\n *\n * This function provides access to the full cause of an error, including both\n * recoverable failures and irrecoverable defects. It allows you to handle, log,\n * or monitor specific error causes without modifying the result of the effect.\n * The full `Cause` object encapsulates the error and its contextual\n * information, making it useful for debugging and understanding failure\n * scenarios in complex workflows.\n *\n * The effect itself is not modified, and any errors or defects remain in the\n * error channel of the original effect.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * // Create a task that fails with a NetworkError\n * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n *\n * const tapping1 = Effect.tapErrorCause(task1, (cause) =>\n *   Console.log(`error cause: ${cause}`)\n * )\n *\n * Effect.runFork(tapping1)\n * // Output:\n * // error cause: Error: NetworkError\n *\n * // Simulate a severe failure in the system\n * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n *   \"Something went wrong\"\n * )\n *\n * const tapping2 = Effect.tapErrorCause(task2, (cause) =>\n *   Console.log(`error cause: ${cause}`)\n * )\n *\n * Effect.runFork(tapping2)\n * // Output:\n * // error cause: RuntimeException: Something went wrong\n * //   ... stack trace ...\n * ```\n *\n * @since 2.0.0\n * @category Sequencing\n */\nexport const tapErrorCause: {\n  /**\n   * Inspect the complete cause of an error, including failures and defects.\n   *\n   * **Details**\n   *\n   * This function provides access to the full cause of an error, including both\n   * recoverable failures and irrecoverable defects. It allows you to handle, log,\n   * or monitor specific error causes without modifying the result of the effect.\n   * The full `Cause` object encapsulates the error and its contextual\n   * information, making it useful for debugging and understanding failure\n   * scenarios in complex workflows.\n   *\n   * The effect itself is not modified, and any errors or defects remain in the\n   * error channel of the original effect.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Create a task that fails with a NetworkError\n   * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n   *\n   * const tapping1 = Effect.tapErrorCause(task1, (cause) =>\n   *   Console.log(`error cause: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping1)\n   * // Output:\n   * // error cause: Error: NetworkError\n   *\n   * // Simulate a severe failure in the system\n   * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n   *   \"Something went wrong\"\n   * )\n   *\n   * const tapping2 = Effect.tapErrorCause(task2, (cause) =>\n   *   Console.log(`error cause: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping2)\n   * // Output:\n   * // error cause: RuntimeException: Something went wrong\n   * //   ... stack trace ...\n   * ```\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <E, X, E2, R2>(f: (cause: Cause.Cause<NoInfer<E>>) => Effect<X, E2, R2>): <A, R>(self: Effect<A, E, R>) => Effect<A, E | E2, R2 | R>\n  /**\n   * Inspect the complete cause of an error, including failures and defects.\n   *\n   * **Details**\n   *\n   * This function provides access to the full cause of an error, including both\n   * recoverable failures and irrecoverable defects. It allows you to handle, log,\n   * or monitor specific error causes without modifying the result of the effect.\n   * The full `Cause` object encapsulates the error and its contextual\n   * information, making it useful for debugging and understanding failure\n   * scenarios in complex workflows.\n   *\n   * The effect itself is not modified, and any errors or defects remain in the\n   * error channel of the original effect.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Create a task that fails with a NetworkError\n   * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n   *\n   * const tapping1 = Effect.tapErrorCause(task1, (cause) =>\n   *   Console.log(`error cause: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping1)\n   * // Output:\n   * // error cause: Error: NetworkError\n   *\n   * // Simulate a severe failure in the system\n   * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n   *   \"Something went wrong\"\n   * )\n   *\n   * const tapping2 = Effect.tapErrorCause(task2, (cause) =>\n   *   Console.log(`error cause: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping2)\n   * // Output:\n   * // error cause: RuntimeException: Something went wrong\n   * //   ... stack trace ...\n   * ```\n   *\n   * @since 2.0.0\n   * @category Sequencing\n   */\n  <A, E, R, X, E2, R2>(self: Effect<A, E, R>, f: (cause: Cause.Cause<E>) => Effect<X, E2, R2>): Effect<A, E | E2, R | R2>\n} = effect.tapErrorCause\n\n/**\n * Repeats an effect indefinitely until an error occurs.\n *\n * **Details**\n *\n * This function executes an effect repeatedly in an infinite loop. Each\n * iteration is executed sequentially, and the loop continues until the first\n * error occurs. If the effect succeeds, it starts over from the beginning. If\n * the effect fails, the error is propagated, and the loop stops.\n *\n * Be cautious when using this function, as it will run indefinitely unless an\n * error interrupts it. This makes it suitable for long-running processes or\n * continuous polling tasks, but you should ensure proper error handling or\n * combine it with other operators like `timeout` or `schedule` to prevent\n * unintentional infinite loops.\n *\n * @since 2.0.0\n * @category Repetition / Recursion\n */\nexport const forever: <A, E, R>(self: Effect<A, E, R>) => Effect<never, E, R> = effect.forever\n\n/**\n * Repeatedly updates a state through an effectful operation until a condition\n * is no longer met.\n *\n * **Details**\n *\n * This function provides a way to implement effectful loops, similar to a\n * `while` loop in JavaScript.\n *\n * ```ts skip-type-checking\n * let result = initial\n *\n * while (options.while(result)) {\n *   result = options.body(result)\n * }\n *\n * return result\n * ```\n *\n * It starts with an initial state, checks a\n * condition (`while`), and executes a body operation to update the state if the\n * condition evaluates to `true`. The process repeats until the condition\n * returns `false`.\n *\n * The state is passed between iterations, allowing the body operation to modify\n * it dynamically. The final state after the loop ends is returned as the result\n * of the effect.\n *\n * **When to Use**\n *\n * This is particularly useful for scenarios where looping logic involves\n * asynchronous or side-effectful operations, such as polling or iterative\n * computations that depend on external factors.\n *\n * **Example** (Effectful Iteration)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const result = Effect.iterate(\n *   // Initial result\n *   1,\n *   {\n *     // Condition to continue iterating\n *     while: (result) => result <= 5,\n *     // Operation to change the result\n *     body: (result) => Effect.succeed(result + 1)\n *   }\n * )\n *\n * Effect.runPromise(result).then(console.log)\n * // Output: 6\n * ```\n *\n * @since 2.0.0\n * @category Looping\n */\nexport const iterate: {\n  /**\n   * Repeatedly updates a state through an effectful operation until a condition\n   * is no longer met.\n   *\n   * **Details**\n   *\n   * This function provides a way to implement effectful loops, similar to a\n   * `while` loop in JavaScript.\n   *\n   * ```ts skip-type-checking\n   * let result = initial\n   *\n   * while (options.while(result)) {\n   *   result = options.body(result)\n   * }\n   *\n   * return result\n   * ```\n   *\n   * It starts with an initial state, checks a\n   * condition (`while`), and executes a body operation to update the state if the\n   * condition evaluates to `true`. The process repeats until the condition\n   * returns `false`.\n   *\n   * The state is passed between iterations, allowing the body operation to modify\n   * it dynamically. The final state after the loop ends is returned as the result\n   * of the effect.\n   *\n   * **When to Use**\n   *\n   * This is particularly useful for scenarios where looping logic involves\n   * asynchronous or side-effectful operations, such as polling or iterative\n   * computations that depend on external factors.\n   *\n   * **Example** (Effectful Iteration)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const result = Effect.iterate(\n   *   // Initial result\n   *   1,\n   *   {\n   *     // Condition to continue iterating\n   *     while: (result) => result <= 5,\n   *     // Operation to change the result\n   *     body: (result) => Effect.succeed(result + 1)\n   *   }\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output: 6\n   * ```\n   *\n   * @since 2.0.0\n   * @category Looping\n   */\n  <A, B extends A, R, E>(\n    initial: A,\n    options: {\n      readonly while: Refinement<A, B>\n      readonly body: (b: B) => Effect<A, E, R>\n    }\n  ): Effect<A, E, R>\n  /**\n   * Repeatedly updates a state through an effectful operation until a condition\n   * is no longer met.\n   *\n   * **Details**\n   *\n   * This function provides a way to implement effectful loops, similar to a\n   * `while` loop in JavaScript.\n   *\n   * ```ts skip-type-checking\n   * let result = initial\n   *\n   * while (options.while(result)) {\n   *   result = options.body(result)\n   * }\n   *\n   * return result\n   * ```\n   *\n   * It starts with an initial state, checks a\n   * condition (`while`), and executes a body operation to update the state if the\n   * condition evaluates to `true`. The process repeats until the condition\n   * returns `false`.\n   *\n   * The state is passed between iterations, allowing the body operation to modify\n   * it dynamically. The final state after the loop ends is returned as the result\n   * of the effect.\n   *\n   * **When to Use**\n   *\n   * This is particularly useful for scenarios where looping logic involves\n   * asynchronous or side-effectful operations, such as polling or iterative\n   * computations that depend on external factors.\n   *\n   * **Example** (Effectful Iteration)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const result = Effect.iterate(\n   *   // Initial result\n   *   1,\n   *   {\n   *     // Condition to continue iterating\n   *     while: (result) => result <= 5,\n   *     // Operation to change the result\n   *     body: (result) => Effect.succeed(result + 1)\n   *   }\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output: 6\n   * ```\n   *\n   * @since 2.0.0\n   * @category Looping\n   */\n  <A, R, E>(\n    initial: A,\n    options: {\n      readonly while: Predicate<A>\n      readonly body: (a: A) => Effect<A, E, R>\n    }\n  ): Effect<A, E, R>\n} = effect.iterate\n\n/**\n * Repeatedly executes a loop with a state, collecting results or discarding\n * them based on configuration.\n *\n * **Details**\n *\n * This function performs an effectful loop, starting with an initial state and\n * iterating as long as the `while` condition evaluates to `true`, similar to a\n * `while` loop in JavaScript.\n *\n * ```ts skip-type-checking\n * let state = initial\n * const result = []\n *\n * while (options.while(state)) {\n *   result.push(options.body(state)) // Perform the effectful operation\n *   state = options.step(state) // Update the state\n * }\n *\n * return result\n * ```\n *\n * During each iteration, the `step` function updates the state, and the `body`\n * effect is executed.\n *\n * The results of the body effect can be collected in an array or discarded\n * based on the `discard` option.\n *\n * **Discarding Intermediate Results**\n *\n * - If `discard` is `false` or not provided, the intermediate results are\n *   collected into an array and returned as the final result.\n * - If `discard` is `true`, the intermediate results are ignored, and the\n *   effect returns `void`.\n *\n * **When to Use**\n *\n * This is useful for implementing loops where you need to perform effectful\n * computations repeatedly, such as processing items in a list, generating\n * values, or performing iterative updates.\n *\n * **Example** (Looping with Collected Results)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * // A loop that runs 5 times, collecting each iteration's result\n * const result = Effect.loop(\n *   // Initial state\n *   1,\n *   {\n *     // Condition to continue looping\n *     while: (state) => state <= 5,\n *     // State update function\n *     step: (state) => state + 1,\n *     // Effect to be performed on each iteration\n *     body: (state) => Effect.succeed(state)\n *   }\n * )\n *\n * Effect.runPromise(result).then(console.log)\n * // Output: [1, 2, 3, 4, 5]\n * ```\n *\n * **Example** (Loop with Discarded Results)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const result = Effect.loop(\n *   // Initial state\n *   1,\n *   {\n *     // Condition to continue looping\n *     while: (state) => state <= 5,\n *     // State update function\n *     step: (state) => state + 1,\n *     // Effect to be performed on each iteration\n *     body: (state) => Console.log(`Currently at state ${state}`),\n *     // Discard intermediate results\n *     discard: true\n *   }\n * )\n *\n * Effect.runPromise(result).then(console.log)\n * // Output:\n * // Currently at state 1\n * // Currently at state 2\n * // Currently at state 3\n * // Currently at state 4\n * // Currently at state 5\n * // undefined\n * ```\n *\n * @since 2.0.0\n * @category Looping\n */\nexport const loop: {\n  /**\n   * Repeatedly executes a loop with a state, collecting results or discarding\n   * them based on configuration.\n   *\n   * **Details**\n   *\n   * This function performs an effectful loop, starting with an initial state and\n   * iterating as long as the `while` condition evaluates to `true`, similar to a\n   * `while` loop in JavaScript.\n   *\n   * ```ts skip-type-checking\n   * let state = initial\n   * const result = []\n   *\n   * while (options.while(state)) {\n   *   result.push(options.body(state)) // Perform the effectful operation\n   *   state = options.step(state) // Update the state\n   * }\n   *\n   * return result\n   * ```\n   *\n   * During each iteration, the `step` function updates the state, and the `body`\n   * effect is executed.\n   *\n   * The results of the body effect can be collected in an array or discarded\n   * based on the `discard` option.\n   *\n   * **Discarding Intermediate Results**\n   *\n   * - If `discard` is `false` or not provided, the intermediate results are\n   *   collected into an array and returned as the final result.\n   * - If `discard` is `true`, the intermediate results are ignored, and the\n   *   effect returns `void`.\n   *\n   * **When to Use**\n   *\n   * This is useful for implementing loops where you need to perform effectful\n   * computations repeatedly, such as processing items in a list, generating\n   * values, or performing iterative updates.\n   *\n   * **Example** (Looping with Collected Results)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * // A loop that runs 5 times, collecting each iteration's result\n   * const result = Effect.loop(\n   *   // Initial state\n   *   1,\n   *   {\n   *     // Condition to continue looping\n   *     while: (state) => state <= 5,\n   *     // State update function\n   *     step: (state) => state + 1,\n   *     // Effect to be performed on each iteration\n   *     body: (state) => Effect.succeed(state)\n   *   }\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output: [1, 2, 3, 4, 5]\n   * ```\n   *\n   * **Example** (Loop with Discarded Results)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const result = Effect.loop(\n   *   // Initial state\n   *   1,\n   *   {\n   *     // Condition to continue looping\n   *     while: (state) => state <= 5,\n   *     // State update function\n   *     step: (state) => state + 1,\n   *     // Effect to be performed on each iteration\n   *     body: (state) => Console.log(`Currently at state ${state}`),\n   *     // Discard intermediate results\n   *     discard: true\n   *   }\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output:\n   * // Currently at state 1\n   * // Currently at state 2\n   * // Currently at state 3\n   * // Currently at state 4\n   * // Currently at state 5\n   * // undefined\n   * ```\n   *\n   * @since 2.0.0\n   * @category Looping\n   */\n  <A, B extends A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: Refinement<A, B>\n      readonly step: (b: B) => A\n      readonly body: (b: B) => Effect<C, E, R>\n      readonly discard?: false | undefined\n    }\n  ): Effect<Array<C>, E, R>\n  /**\n   * Repeatedly executes a loop with a state, collecting results or discarding\n   * them based on configuration.\n   *\n   * **Details**\n   *\n   * This function performs an effectful loop, starting with an initial state and\n   * iterating as long as the `while` condition evaluates to `true`, similar to a\n   * `while` loop in JavaScript.\n   *\n   * ```ts skip-type-checking\n   * let state = initial\n   * const result = []\n   *\n   * while (options.while(state)) {\n   *   result.push(options.body(state)) // Perform the effectful operation\n   *   state = options.step(state) // Update the state\n   * }\n   *\n   * return result\n   * ```\n   *\n   * During each iteration, the `step` function updates the state, and the `body`\n   * effect is executed.\n   *\n   * The results of the body effect can be collected in an array or discarded\n   * based on the `discard` option.\n   *\n   * **Discarding Intermediate Results**\n   *\n   * - If `discard` is `false` or not provided, the intermediate results are\n   *   collected into an array and returned as the final result.\n   * - If `discard` is `true`, the intermediate results are ignored, and the\n   *   effect returns `void`.\n   *\n   * **When to Use**\n   *\n   * This is useful for implementing loops where you need to perform effectful\n   * computations repeatedly, such as processing items in a list, generating\n   * values, or performing iterative updates.\n   *\n   * **Example** (Looping with Collected Results)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * // A loop that runs 5 times, collecting each iteration's result\n   * const result = Effect.loop(\n   *   // Initial state\n   *   1,\n   *   {\n   *     // Condition to continue looping\n   *     while: (state) => state <= 5,\n   *     // State update function\n   *     step: (state) => state + 1,\n   *     // Effect to be performed on each iteration\n   *     body: (state) => Effect.succeed(state)\n   *   }\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output: [1, 2, 3, 4, 5]\n   * ```\n   *\n   * **Example** (Loop with Discarded Results)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const result = Effect.loop(\n   *   // Initial state\n   *   1,\n   *   {\n   *     // Condition to continue looping\n   *     while: (state) => state <= 5,\n   *     // State update function\n   *     step: (state) => state + 1,\n   *     // Effect to be performed on each iteration\n   *     body: (state) => Console.log(`Currently at state ${state}`),\n   *     // Discard intermediate results\n   *     discard: true\n   *   }\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output:\n   * // Currently at state 1\n   * // Currently at state 2\n   * // Currently at state 3\n   * // Currently at state 4\n   * // Currently at state 5\n   * // undefined\n   * ```\n   *\n   * @since 2.0.0\n   * @category Looping\n   */\n  <A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: (a: A) => boolean\n      readonly step: (a: A) => A\n      readonly body: (a: A) => Effect<C, E, R>\n      readonly discard?: false | undefined\n    }\n  ): Effect<Array<C>, E, R>\n  /**\n   * Repeatedly executes a loop with a state, collecting results or discarding\n   * them based on configuration.\n   *\n   * **Details**\n   *\n   * This function performs an effectful loop, starting with an initial state and\n   * iterating as long as the `while` condition evaluates to `true`, similar to a\n   * `while` loop in JavaScript.\n   *\n   * ```ts skip-type-checking\n   * let state = initial\n   * const result = []\n   *\n   * while (options.while(state)) {\n   *   result.push(options.body(state)) // Perform the effectful operation\n   *   state = options.step(state) // Update the state\n   * }\n   *\n   * return result\n   * ```\n   *\n   * During each iteration, the `step` function updates the state, and the `body`\n   * effect is executed.\n   *\n   * The results of the body effect can be collected in an array or discarded\n   * based on the `discard` option.\n   *\n   * **Discarding Intermediate Results**\n   *\n   * - If `discard` is `false` or not provided, the intermediate results are\n   *   collected into an array and returned as the final result.\n   * - If `discard` is `true`, the intermediate results are ignored, and the\n   *   effect returns `void`.\n   *\n   * **When to Use**\n   *\n   * This is useful for implementing loops where you need to perform effectful\n   * computations repeatedly, such as processing items in a list, generating\n   * values, or performing iterative updates.\n   *\n   * **Example** (Looping with Collected Results)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * // A loop that runs 5 times, collecting each iteration's result\n   * const result = Effect.loop(\n   *   // Initial state\n   *   1,\n   *   {\n   *     // Condition to continue looping\n   *     while: (state) => state <= 5,\n   *     // State update function\n   *     step: (state) => state + 1,\n   *     // Effect to be performed on each iteration\n   *     body: (state) => Effect.succeed(state)\n   *   }\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output: [1, 2, 3, 4, 5]\n   * ```\n   *\n   * **Example** (Loop with Discarded Results)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const result = Effect.loop(\n   *   // Initial state\n   *   1,\n   *   {\n   *     // Condition to continue looping\n   *     while: (state) => state <= 5,\n   *     // State update function\n   *     step: (state) => state + 1,\n   *     // Effect to be performed on each iteration\n   *     body: (state) => Console.log(`Currently at state ${state}`),\n   *     // Discard intermediate results\n   *     discard: true\n   *   }\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output:\n   * // Currently at state 1\n   * // Currently at state 2\n   * // Currently at state 3\n   * // Currently at state 4\n   * // Currently at state 5\n   * // undefined\n   * ```\n   *\n   * @since 2.0.0\n   * @category Looping\n   */\n  <A, B extends A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: Refinement<A, B>\n      readonly step: (b: B) => A\n      readonly body: (b: B) => Effect<C, E, R>\n      readonly discard: true\n    }\n  ): Effect<void, E, R>\n  /**\n   * Repeatedly executes a loop with a state, collecting results or discarding\n   * them based on configuration.\n   *\n   * **Details**\n   *\n   * This function performs an effectful loop, starting with an initial state and\n   * iterating as long as the `while` condition evaluates to `true`, similar to a\n   * `while` loop in JavaScript.\n   *\n   * ```ts skip-type-checking\n   * let state = initial\n   * const result = []\n   *\n   * while (options.while(state)) {\n   *   result.push(options.body(state)) // Perform the effectful operation\n   *   state = options.step(state) // Update the state\n   * }\n   *\n   * return result\n   * ```\n   *\n   * During each iteration, the `step` function updates the state, and the `body`\n   * effect is executed.\n   *\n   * The results of the body effect can be collected in an array or discarded\n   * based on the `discard` option.\n   *\n   * **Discarding Intermediate Results**\n   *\n   * - If `discard` is `false` or not provided, the intermediate results are\n   *   collected into an array and returned as the final result.\n   * - If `discard` is `true`, the intermediate results are ignored, and the\n   *   effect returns `void`.\n   *\n   * **When to Use**\n   *\n   * This is useful for implementing loops where you need to perform effectful\n   * computations repeatedly, such as processing items in a list, generating\n   * values, or performing iterative updates.\n   *\n   * **Example** (Looping with Collected Results)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * // A loop that runs 5 times, collecting each iteration's result\n   * const result = Effect.loop(\n   *   // Initial state\n   *   1,\n   *   {\n   *     // Condition to continue looping\n   *     while: (state) => state <= 5,\n   *     // State update function\n   *     step: (state) => state + 1,\n   *     // Effect to be performed on each iteration\n   *     body: (state) => Effect.succeed(state)\n   *   }\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output: [1, 2, 3, 4, 5]\n   * ```\n   *\n   * **Example** (Loop with Discarded Results)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const result = Effect.loop(\n   *   // Initial state\n   *   1,\n   *   {\n   *     // Condition to continue looping\n   *     while: (state) => state <= 5,\n   *     // State update function\n   *     step: (state) => state + 1,\n   *     // Effect to be performed on each iteration\n   *     body: (state) => Console.log(`Currently at state ${state}`),\n   *     // Discard intermediate results\n   *     discard: true\n   *   }\n   * )\n   *\n   * Effect.runPromise(result).then(console.log)\n   * // Output:\n   * // Currently at state 1\n   * // Currently at state 2\n   * // Currently at state 3\n   * // Currently at state 4\n   * // Currently at state 5\n   * // undefined\n   * ```\n   *\n   * @since 2.0.0\n   * @category Looping\n   */\n  <A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: (a: A) => boolean\n      readonly step: (a: A) => A\n      readonly body: (a: A) => Effect<C, E, R>\n      readonly discard: true\n    }\n  ): Effect<void, E, R>\n} = effect.loop\n\n/**\n * @since 2.0.0\n * @category Repetition / Recursion\n */\nexport declare namespace Repeat {\n  /**\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  export type Return<R, E, A, O extends NoExcessProperties<Options<A>, O>> = Effect<\n    (O extends { schedule: Schedule.Schedule<infer Out, infer _I, infer _R> } ? Out\n      : O extends { until: Refinement<A, infer B> } ? B\n      : A),\n    | E\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never),\n    | R\n    | (O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer R> } ? R : never)\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n  > extends infer Z ? Z : never\n\n  /**\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  export interface Options<A> {\n    while?: ((_: A) => boolean | Effect<boolean, any, any>) | undefined\n    until?: ((_: A) => boolean | Effect<boolean, any, any>) | undefined\n    times?: number | undefined\n    schedule?: Schedule.Schedule<any, A, any> | undefined\n  }\n}\n\n/**\n * Repeats an effect based on a specified schedule or until the first failure.\n *\n * **Details**\n *\n * This function executes an effect repeatedly according to the given schedule.\n * Each repetition occurs after the initial execution of the effect, meaning\n * that the schedule determines the number of additional repetitions. For\n * example, using `Schedule.once` will result in the effect being executed twice\n * (once initially and once as part of the repetition).\n *\n * If the effect succeeds, it is repeated according to the schedule. If it\n * fails, the repetition stops immediately, and the failure is returned.\n *\n * The schedule can also specify delays between repetitions, making it useful\n * for tasks like retrying operations with backoff, periodic execution, or\n * performing a series of dependent actions.\n *\n * You can combine schedules for more advanced repetition logic, such as adding\n * delays, limiting recursions, or dynamically adjusting based on the outcome of\n * each execution.\n *\n * **Example** (Success Example)\n *\n * ```ts\n * import { Effect, Schedule, Console } from \"effect\"\n *\n * const action = Console.log(\"success\")\n * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n * const program = Effect.repeat(action, policy)\n *\n * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n * ```\n *\n * **Example** (Failure Example)\n *\n * ```ts\n * import { Effect, Schedule } from \"effect\"\n *\n * let count = 0\n *\n * // Define an async effect that simulates an action with possible failures\n * const action = Effect.async<string, string>((resume) => {\n *   if (count > 1) {\n *     console.log(\"failure\")\n *     resume(Effect.fail(\"Uh oh!\"))\n *   } else {\n *     count++\n *     console.log(\"success\")\n *     resume(Effect.succeed(\"yay!\"))\n *   }\n * })\n *\n * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n * const program = Effect.repeat(action, policy)\n *\n * Effect.runPromiseExit(program).then(console.log)\n * ```\n *\n * @since 2.0.0\n * @category Repetition / Recursion\n */\nexport const repeat: {\n  /**\n   * Repeats an effect based on a specified schedule or until the first failure.\n   *\n   * **Details**\n   *\n   * This function executes an effect repeatedly according to the given schedule.\n   * Each repetition occurs after the initial execution of the effect, meaning\n   * that the schedule determines the number of additional repetitions. For\n   * example, using `Schedule.once` will result in the effect being executed twice\n   * (once initially and once as part of the repetition).\n   *\n   * If the effect succeeds, it is repeated according to the schedule. If it\n   * fails, the repetition stops immediately, and the failure is returned.\n   *\n   * The schedule can also specify delays between repetitions, making it useful\n   * for tasks like retrying operations with backoff, periodic execution, or\n   * performing a series of dependent actions.\n   *\n   * You can combine schedules for more advanced repetition logic, such as adding\n   * delays, limiting recursions, or dynamically adjusting based on the outcome of\n   * each execution.\n   *\n   * **Example** (Success Example)\n   *\n   * ```ts\n   * import { Effect, Schedule, Console } from \"effect\"\n   *\n   * const action = Console.log(\"success\")\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n   * ```\n   *\n   * **Example** (Failure Example)\n   *\n   * ```ts\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an async effect that simulates an action with possible failures\n   * const action = Effect.async<string, string>((resume) => {\n   *   if (count > 1) {\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(\"Uh oh!\"))\n   *   } else {\n   *     count++\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * ```\n   *\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  <O extends NoExcessProperties<Repeat.Options<A>, O>, A>(options: O): <E, R>(\n    self: Effect<A, E, R>\n  ) => Repeat.Return<R, E, A, O>\n  /**\n   * Repeats an effect based on a specified schedule or until the first failure.\n   *\n   * **Details**\n   *\n   * This function executes an effect repeatedly according to the given schedule.\n   * Each repetition occurs after the initial execution of the effect, meaning\n   * that the schedule determines the number of additional repetitions. For\n   * example, using `Schedule.once` will result in the effect being executed twice\n   * (once initially and once as part of the repetition).\n   *\n   * If the effect succeeds, it is repeated according to the schedule. If it\n   * fails, the repetition stops immediately, and the failure is returned.\n   *\n   * The schedule can also specify delays between repetitions, making it useful\n   * for tasks like retrying operations with backoff, periodic execution, or\n   * performing a series of dependent actions.\n   *\n   * You can combine schedules for more advanced repetition logic, such as adding\n   * delays, limiting recursions, or dynamically adjusting based on the outcome of\n   * each execution.\n   *\n   * **Example** (Success Example)\n   *\n   * ```ts\n   * import { Effect, Schedule, Console } from \"effect\"\n   *\n   * const action = Console.log(\"success\")\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n   * ```\n   *\n   * **Example** (Failure Example)\n   *\n   * ```ts\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an async effect that simulates an action with possible failures\n   * const action = Effect.async<string, string>((resume) => {\n   *   if (count > 1) {\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(\"Uh oh!\"))\n   *   } else {\n   *     count++\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * ```\n   *\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  <B, A, R1>(schedule: Schedule.Schedule<B, A, R1>): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R1 | R>\n  /**\n   * Repeats an effect based on a specified schedule or until the first failure.\n   *\n   * **Details**\n   *\n   * This function executes an effect repeatedly according to the given schedule.\n   * Each repetition occurs after the initial execution of the effect, meaning\n   * that the schedule determines the number of additional repetitions. For\n   * example, using `Schedule.once` will result in the effect being executed twice\n   * (once initially and once as part of the repetition).\n   *\n   * If the effect succeeds, it is repeated according to the schedule. If it\n   * fails, the repetition stops immediately, and the failure is returned.\n   *\n   * The schedule can also specify delays between repetitions, making it useful\n   * for tasks like retrying operations with backoff, periodic execution, or\n   * performing a series of dependent actions.\n   *\n   * You can combine schedules for more advanced repetition logic, such as adding\n   * delays, limiting recursions, or dynamically adjusting based on the outcome of\n   * each execution.\n   *\n   * **Example** (Success Example)\n   *\n   * ```ts\n   * import { Effect, Schedule, Console } from \"effect\"\n   *\n   * const action = Console.log(\"success\")\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n   * ```\n   *\n   * **Example** (Failure Example)\n   *\n   * ```ts\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an async effect that simulates an action with possible failures\n   * const action = Effect.async<string, string>((resume) => {\n   *   if (count > 1) {\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(\"Uh oh!\"))\n   *   } else {\n   *     count++\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * ```\n   *\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  <A, E, R, O extends NoExcessProperties<Repeat.Options<A>, O>>(self: Effect<A, E, R>, options: O): Repeat.Return<R, E, A, O>\n  /**\n   * Repeats an effect based on a specified schedule or until the first failure.\n   *\n   * **Details**\n   *\n   * This function executes an effect repeatedly according to the given schedule.\n   * Each repetition occurs after the initial execution of the effect, meaning\n   * that the schedule determines the number of additional repetitions. For\n   * example, using `Schedule.once` will result in the effect being executed twice\n   * (once initially and once as part of the repetition).\n   *\n   * If the effect succeeds, it is repeated according to the schedule. If it\n   * fails, the repetition stops immediately, and the failure is returned.\n   *\n   * The schedule can also specify delays between repetitions, making it useful\n   * for tasks like retrying operations with backoff, periodic execution, or\n   * performing a series of dependent actions.\n   *\n   * You can combine schedules for more advanced repetition logic, such as adding\n   * delays, limiting recursions, or dynamically adjusting based on the outcome of\n   * each execution.\n   *\n   * **Example** (Success Example)\n   *\n   * ```ts\n   * import { Effect, Schedule, Console } from \"effect\"\n   *\n   * const action = Console.log(\"success\")\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n   * ```\n   *\n   * **Example** (Failure Example)\n   *\n   * ```ts\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an async effect that simulates an action with possible failures\n   * const action = Effect.async<string, string>((resume) => {\n   *   if (count > 1) {\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(\"Uh oh!\"))\n   *   } else {\n   *     count++\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * ```\n   *\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  <A, E, R, B, R1>(self: Effect<A, E, R>, schedule: Schedule.Schedule<B, A, R1>): Effect<B, E, R | R1>\n} = schedule_.repeat_combined\n\n/**\n * Repeats an effect a specified number of times or until the first failure.\n *\n * **Details**\n *\n * This function executes an effect initially and then repeats it the specified\n * number of times, as long as it succeeds. For example, calling\n * `repeatN(action, 2)` will execute `action` once initially and then repeat it\n * two additional times if there are no failures.\n *\n * If the effect fails during any repetition, the failure is returned, and no\n * further repetitions are attempted.\n *\n * **When to Use**\n *\n * This function is useful for tasks that need to be retried a fixed number of\n * times or for performing repeated actions without requiring a schedule.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const action = Console.log(\"success\")\n * const program = Effect.repeatN(action, 2)\n *\n * Effect.runPromise(program)\n * ```\n *\n * @since 2.0.0\n * @category Repetition / Recursion\n */\nexport const repeatN: {\n  /**\n   * Repeats an effect a specified number of times or until the first failure.\n   *\n   * **Details**\n   *\n   * This function executes an effect initially and then repeats it the specified\n   * number of times, as long as it succeeds. For example, calling\n   * `repeatN(action, 2)` will execute `action` once initially and then repeat it\n   * two additional times if there are no failures.\n   *\n   * If the effect fails during any repetition, the failure is returned, and no\n   * further repetitions are attempted.\n   *\n   * **When to Use**\n   *\n   * This function is useful for tasks that need to be retried a fixed number of\n   * times or for performing repeated actions without requiring a schedule.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const action = Console.log(\"success\")\n   * const program = Effect.repeatN(action, 2)\n   *\n   * Effect.runPromise(program)\n   * ```\n   *\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  (n: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Repeats an effect a specified number of times or until the first failure.\n   *\n   * **Details**\n   *\n   * This function executes an effect initially and then repeats it the specified\n   * number of times, as long as it succeeds. For example, calling\n   * `repeatN(action, 2)` will execute `action` once initially and then repeat it\n   * two additional times if there are no failures.\n   *\n   * If the effect fails during any repetition, the failure is returned, and no\n   * further repetitions are attempted.\n   *\n   * **When to Use**\n   *\n   * This function is useful for tasks that need to be retried a fixed number of\n   * times or for performing repeated actions without requiring a schedule.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const action = Console.log(\"success\")\n   * const program = Effect.repeatN(action, 2)\n   *\n   * Effect.runPromise(program)\n   * ```\n   *\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  <A, E, R>(self: Effect<A, E, R>, n: number): Effect<A, E, R>\n} = effect.repeatN\n\n/**\n * Repeats an effect with a schedule, handling failures using a custom handler.\n *\n * **Details**\n *\n * This function allows you to execute an effect repeatedly based on a specified\n * schedule. If the effect fails at any point, a custom failure handler is\n * invoked. The handler is provided with both the failure value and the output\n * of the schedule at the time of failure. This enables advanced error recovery\n * or alternative fallback logic while maintaining flexibility in how\n * repetitions are handled.\n *\n * For example, using a schedule with `recurs(2)` will allow for two additional\n * repetitions after the initial execution, provided the effect succeeds. If a\n * failure occurs during any iteration, the failure handler is invoked to handle\n * the situation.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Schedule } from \"effect\"\n *\n * let count = 0\n *\n * // Define an async effect that simulates an action with possible failures\n * const action = Effect.async<string, string>((resume) => {\n *   if (count > 1) {\n *     console.log(\"failure\")\n *     resume(Effect.fail(\"Uh oh!\"))\n *   } else {\n *     count++\n *     console.log(\"success\")\n *     resume(Effect.succeed(\"yay!\"))\n *   }\n * })\n *\n * const policy = Schedule.addDelay(\n *   Schedule.recurs(2), // Repeat for a maximum of 2 times\n *   () => \"100 millis\" // Add a delay of 100 milliseconds between repetitions\n * )\n *\n * const program = Effect.repeatOrElse(action, policy, () =>\n *   Effect.sync(() => {\n *     console.log(\"orElse\")\n *     return count - 1\n *   })\n * )\n *\n * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n * ```\n *\n * @since 2.0.0\n * @category Repetition / Recursion\n */\nexport const repeatOrElse: {\n  /**\n   * Repeats an effect with a schedule, handling failures using a custom handler.\n   *\n   * **Details**\n   *\n   * This function allows you to execute an effect repeatedly based on a specified\n   * schedule. If the effect fails at any point, a custom failure handler is\n   * invoked. The handler is provided with both the failure value and the output\n   * of the schedule at the time of failure. This enables advanced error recovery\n   * or alternative fallback logic while maintaining flexibility in how\n   * repetitions are handled.\n   *\n   * For example, using a schedule with `recurs(2)` will allow for two additional\n   * repetitions after the initial execution, provided the effect succeeds. If a\n   * failure occurs during any iteration, the failure handler is invoked to handle\n   * the situation.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an async effect that simulates an action with possible failures\n   * const action = Effect.async<string, string>((resume) => {\n   *   if (count > 1) {\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(\"Uh oh!\"))\n   *   } else {\n   *     count++\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * const policy = Schedule.addDelay(\n   *   Schedule.recurs(2), // Repeat for a maximum of 2 times\n   *   () => \"100 millis\" // Add a delay of 100 milliseconds between repetitions\n   * )\n   *\n   * const program = Effect.repeatOrElse(action, policy, () =>\n   *   Effect.sync(() => {\n   *     console.log(\"orElse\")\n   *     return count - 1\n   *   })\n   * )\n   *\n   * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n   * ```\n   *\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  <R2, A, B, E, E2, R3>(\n    schedule: Schedule.Schedule<B, A, R2>,\n    orElse: (error: E, option: Option.Option<B>) => Effect<B, E2, R3>\n  ): <R>(self: Effect<A, E, R>) => Effect<B, E2, R2 | R3 | R>\n  /**\n   * Repeats an effect with a schedule, handling failures using a custom handler.\n   *\n   * **Details**\n   *\n   * This function allows you to execute an effect repeatedly based on a specified\n   * schedule. If the effect fails at any point, a custom failure handler is\n   * invoked. The handler is provided with both the failure value and the output\n   * of the schedule at the time of failure. This enables advanced error recovery\n   * or alternative fallback logic while maintaining flexibility in how\n   * repetitions are handled.\n   *\n   * For example, using a schedule with `recurs(2)` will allow for two additional\n   * repetitions after the initial execution, provided the effect succeeds. If a\n   * failure occurs during any iteration, the failure handler is invoked to handle\n   * the situation.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an async effect that simulates an action with possible failures\n   * const action = Effect.async<string, string>((resume) => {\n   *   if (count > 1) {\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(\"Uh oh!\"))\n   *   } else {\n   *     count++\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * const policy = Schedule.addDelay(\n   *   Schedule.recurs(2), // Repeat for a maximum of 2 times\n   *   () => \"100 millis\" // Add a delay of 100 milliseconds between repetitions\n   * )\n   *\n   * const program = Effect.repeatOrElse(action, policy, () =>\n   *   Effect.sync(() => {\n   *     console.log(\"orElse\")\n   *     return count - 1\n   *   })\n   * )\n   *\n   * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n   * ```\n   *\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  <A, E, R, R2, B, E2, R3>(\n    self: Effect<A, E, R>,\n    schedule: Schedule.Schedule<B, A, R2>,\n    orElse: (error: E, option: Option.Option<B>) => Effect<B, E2, R3>\n  ): Effect<B, E2, R | R2 | R3>\n} = schedule_.repeatOrElse_Effect\n\n/**\n * Repeats an effect based on a specified schedule.\n *\n * **Details**\n *\n * This function allows you to execute an effect repeatedly according to a given\n * schedule. The schedule determines the timing and number of repetitions. Each\n * repetition can also depend on the decision of the schedule, providing\n * flexibility for complex workflows. This function does not modify the effect's\n * success or failure; it only controls its repetition.\n *\n * For example, you can use a schedule that recurs a specific number of times,\n * adds delays between repetitions, or customizes repetition behavior based on\n * external inputs. The effect runs initially and is repeated according to the\n * schedule.\n *\n * @see {@link scheduleFrom} for a variant that allows the schedule's decision\n * to depend on the result of this effect.\n *\n * @since 2.0.0\n * @category Repetition / Recursion\n */\nexport const schedule: {\n  /**\n   * Repeats an effect based on a specified schedule.\n   *\n   * **Details**\n   *\n   * This function allows you to execute an effect repeatedly according to a given\n   * schedule. The schedule determines the timing and number of repetitions. Each\n   * repetition can also depend on the decision of the schedule, providing\n   * flexibility for complex workflows. This function does not modify the effect's\n   * success or failure; it only controls its repetition.\n   *\n   * For example, you can use a schedule that recurs a specific number of times,\n   * adds delays between repetitions, or customizes repetition behavior based on\n   * external inputs. The effect runs initially and is repeated according to the\n   * schedule.\n   *\n   * @see {@link scheduleFrom} for a variant that allows the schedule's decision\n   * to depend on the result of this effect.\n   *\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  <A, R2, Out>(schedule: Schedule.Schedule<Out, NoInfer<A> | undefined, R2>): <E, R>(self: Effect<A, E, R>) => Effect<Out, E, R2 | R>\n  /**\n   * Repeats an effect based on a specified schedule.\n   *\n   * **Details**\n   *\n   * This function allows you to execute an effect repeatedly according to a given\n   * schedule. The schedule determines the timing and number of repetitions. Each\n   * repetition can also depend on the decision of the schedule, providing\n   * flexibility for complex workflows. This function does not modify the effect's\n   * success or failure; it only controls its repetition.\n   *\n   * For example, you can use a schedule that recurs a specific number of times,\n   * adds delays between repetitions, or customizes repetition behavior based on\n   * external inputs. The effect runs initially and is repeated according to the\n   * schedule.\n   *\n   * @see {@link scheduleFrom} for a variant that allows the schedule's decision\n   * to depend on the result of this effect.\n   *\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  <A, E, R, R2, Out>(self: Effect<A, E, R>, schedule: Schedule.Schedule<Out, A | undefined, R2>): Effect<Out, E, R | R2>\n} = schedule_.schedule_Effect\n\n/**\n * Runs an effect repeatedly on a new fiber according to a given schedule.\n *\n * **Details**\n *\n * This function starts the provided effect on a new fiber and runs it\n * repeatedly based on the specified schedule. The repetitions are managed by\n * the schedule's rules, which define the timing and number of iterations. The\n * fiber is attached to the current scope, meaning it is automatically managed\n * and cleaned up when the scope is closed.\n *\n * The function returns a `RuntimeFiber` that allows you to monitor or interact\n * with the running fiber.\n *\n * **When to Use**\n *\n * This is particularly useful for concurrent execution of scheduled tasks or\n * when you want to continue processing without waiting for the repetitions to\n * complete.\n *\n * @since 2.0.0\n * @category Repetition / Recursion\n */\nexport const scheduleForked: {\n  /**\n   * Runs an effect repeatedly on a new fiber according to a given schedule.\n   *\n   * **Details**\n   *\n   * This function starts the provided effect on a new fiber and runs it\n   * repeatedly based on the specified schedule. The repetitions are managed by\n   * the schedule's rules, which define the timing and number of iterations. The\n   * fiber is attached to the current scope, meaning it is automatically managed\n   * and cleaned up when the scope is closed.\n   *\n   * The function returns a `RuntimeFiber` that allows you to monitor or interact\n   * with the running fiber.\n   *\n   * **When to Use**\n   *\n   * This is particularly useful for concurrent execution of scheduled tasks or\n   * when you want to continue processing without waiting for the repetitions to\n   * complete.\n   *\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  <Out, R2>(schedule: Schedule.Schedule<Out, unknown, R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<Out, E>, never, Scope.Scope | R2 | R>\n  /**\n   * Runs an effect repeatedly on a new fiber according to a given schedule.\n   *\n   * **Details**\n   *\n   * This function starts the provided effect on a new fiber and runs it\n   * repeatedly based on the specified schedule. The repetitions are managed by\n   * the schedule's rules, which define the timing and number of iterations. The\n   * fiber is attached to the current scope, meaning it is automatically managed\n   * and cleaned up when the scope is closed.\n   *\n   * The function returns a `RuntimeFiber` that allows you to monitor or interact\n   * with the running fiber.\n   *\n   * **When to Use**\n   *\n   * This is particularly useful for concurrent execution of scheduled tasks or\n   * when you want to continue processing without waiting for the repetitions to\n   * complete.\n   *\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  <A, E, R, Out, R2>(self: Effect<A, E, R>, schedule: Schedule.Schedule<Out, unknown, R2>): Effect<Fiber.RuntimeFiber<Out, E>, never, Scope.Scope | R | R2>\n} = schedule_.scheduleForked\n\n/**\n * Runs an effect repeatedly according to a schedule, starting from a specified\n * input value.\n *\n * **Details**\n *\n * This function allows you to repeatedly execute an effect based on a schedule.\n * The schedule starts with the given `initial` input value, which is passed to\n * the first execution. Subsequent executions of the effect are controlled by\n * the schedule's rules, using the output of the previous iteration as the input\n * for the next one.\n *\n * The returned effect will complete when the schedule ends or the effect fails,\n * propagating the error.\n *\n * @since 2.0.0\n * @category Repetition / Recursion\n */\nexport const scheduleFrom: {\n  /**\n   * Runs an effect repeatedly according to a schedule, starting from a specified\n   * input value.\n   *\n   * **Details**\n   *\n   * This function allows you to repeatedly execute an effect based on a schedule.\n   * The schedule starts with the given `initial` input value, which is passed to\n   * the first execution. Subsequent executions of the effect are controlled by\n   * the schedule's rules, using the output of the previous iteration as the input\n   * for the next one.\n   *\n   * The returned effect will complete when the schedule ends or the effect fails,\n   * propagating the error.\n   *\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  <R2, In, Out>(initial: In, schedule: Schedule.Schedule<Out, In, R2>): <E, R>(self: Effect<In, E, R>) => Effect<Out, E, R2 | R>\n  /**\n   * Runs an effect repeatedly according to a schedule, starting from a specified\n   * input value.\n   *\n   * **Details**\n   *\n   * This function allows you to repeatedly execute an effect based on a schedule.\n   * The schedule starts with the given `initial` input value, which is passed to\n   * the first execution. Subsequent executions of the effect are controlled by\n   * the schedule's rules, using the output of the previous iteration as the input\n   * for the next one.\n   *\n   * The returned effect will complete when the schedule ends or the effect fails,\n   * propagating the error.\n   *\n   * @since 2.0.0\n   * @category Repetition / Recursion\n   */\n  <In, E, R, R2, Out>(\n    self: Effect<In, E, R>,\n    initial: In,\n    schedule: Schedule.Schedule<Out, In, R2>\n  ): Effect<Out, E, R | R2>\n} = schedule_.scheduleFrom_Effect\n\n/**\n * @since 2.0.0\n * @category Repetition / Recursion\n */\nexport const whileLoop: <A, E, R>(\n  options: {\n    readonly while: LazyArg<boolean>\n    readonly body: LazyArg<Effect<A, E, R>>\n    readonly step: (a: A) => void\n  }\n) => Effect<void, E, R> = core.whileLoop\n\n/**\n * Returns a collection of all `FiberRef` values for the fiber running this\n * effect.\n *\n * @since 2.0.0\n * @category Fiber Refs\n */\nexport const getFiberRefs: Effect<FiberRefs.FiberRefs> = effect.fiberRefs\n\n/**\n * Inherits values from all `FiberRef` instances into current fiber.\n *\n * @since 2.0.0\n * @category Fiber Refs\n */\nexport const inheritFiberRefs: (childFiberRefs: FiberRefs.FiberRefs) => Effect<void> = effect.inheritFiberRefs\n\n/**\n * @since 2.0.0\n * @category Fiber Refs\n */\nexport const locally: {\n  /**\n   * @since 2.0.0\n   * @category Fiber Refs\n   */\n  <A>(self: FiberRef.FiberRef<A>, value: A): <B, E, R>(use: Effect<B, E, R>) => Effect<B, E, R>\n  /**\n   * @since 2.0.0\n   * @category Fiber Refs\n   */\n  <B, E, R, A>(use: Effect<B, E, R>, self: FiberRef.FiberRef<A>, value: A): Effect<B, E, R>\n} = core.fiberRefLocally\n\n/**\n * @since 2.0.0\n * @category Fiber Refs\n */\nexport const locallyWith: {\n  /**\n   * @since 2.0.0\n   * @category Fiber Refs\n   */\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A): <B, E, R>(use: Effect<B, E, R>) => Effect<B, E, R>\n  /**\n   * @since 2.0.0\n   * @category Fiber Refs\n   */\n  <B, E, R, A>(use: Effect<B, E, R>, self: FiberRef.FiberRef<A>, f: (a: A) => A): Effect<B, E, R>\n} = core.fiberRefLocallyWith\n\n/**\n * @since 2.0.0\n * @category Fiber Refs\n */\nexport const locallyScoped: {\n  /**\n   * @since 2.0.0\n   * @category Fiber Refs\n   */\n  <A>(value: A): (self: FiberRef.FiberRef<A>) => Effect<void, never, Scope.Scope>\n  /**\n   * @since 2.0.0\n   * @category Fiber Refs\n   */\n  <A>(self: FiberRef.FiberRef<A>, value: A): Effect<void, never, Scope.Scope>\n} = fiberRuntime.fiberRefLocallyScoped\n\n/**\n * @since 2.0.0\n * @category Fiber Refs\n */\nexport const locallyScopedWith: {\n  /**\n   * @since 2.0.0\n   * @category Fiber Refs\n   */\n  <A>(f: (a: A) => A): (self: FiberRef.FiberRef<A>) => Effect<void, never, Scope.Scope>\n  /**\n   * @since 2.0.0\n   * @category Fiber Refs\n   */\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A): Effect<void, never, Scope.Scope>\n} = fiberRuntime.fiberRefLocallyScopedWith\n\n/**\n * Applies the specified changes to the `FiberRef` values for the fiber\n * running this workflow.\n *\n * @since 2.0.0\n * @category Fiber Refs\n */\nexport const patchFiberRefs: (patch: FiberRefsPatch.FiberRefsPatch) => Effect<void> = effect.patchFiberRefs\n\n/**\n * Sets the `FiberRef` values for the fiber running this effect to the values\n * in the specified collection of `FiberRef` values.\n *\n * @since 2.0.0\n * @category Fiber Refs\n */\nexport const setFiberRefs: (fiberRefs: FiberRefs.FiberRefs) => Effect<void> = effect.setFiberRefs\n\n/**\n * Updates the `FiberRef` values for the fiber running this effect using the\n * specified function.\n *\n * @since 2.0.0\n * @category Fiber Refs\n */\nexport const updateFiberRefs: (\n  f: (fiberId: FiberId.Runtime, fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs\n) => Effect<void> = effect.updateFiberRefs\n\n/**\n * Checks if an effect has failed.\n *\n * **Details**\n *\n * This function evaluates whether an effect has resulted in a failure. It\n * returns a boolean value wrapped in an effect, with `true` indicating the\n * effect failed and `false` otherwise.\n *\n * The resulting effect cannot fail (`never` in the error channel) but retains\n * the context of the original effect.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const failure = Effect.fail(\"Uh oh!\")\n *\n * console.log(Effect.runSync(Effect.isFailure(failure)))\n * // Output: true\n *\n * const defect = Effect.dieMessage(\"BOOM!\")\n *\n * Effect.runSync(Effect.isFailure(defect))\n * // throws: BOOM!\n * ```\n *\n * @since 2.0.0\n * @category Condition Checking\n */\nexport const isFailure: <A, E, R>(self: Effect<A, E, R>) => Effect<boolean, never, R> = effect.isFailure\n\n/**\n * Checks if an effect has succeeded.\n *\n * **Details**\n *\n * This function evaluates whether an effect has resulted in a success. It\n * returns a boolean value wrapped in an effect, with `true` indicating the\n * effect succeeded and `false` otherwise.\n *\n * The resulting effect cannot fail (`never` in the error channel) but retains\n * the context of the original effect.\n *\n * @since 2.0.0\n * @category Condition Checking\n */\nexport const isSuccess: <A, E, R>(self: Effect<A, E, R>) => Effect<boolean, never, R> = effect.isSuccess\n\n/**\n * Handles both success and failure cases of an effect without performing side\n * effects.\n *\n * **Details**\n *\n * `match` lets you define custom handlers for both success and failure\n * scenarios. You provide separate functions to handle each case, allowing you\n * to process the result if the effect succeeds, or handle the error if the\n * effect fails.\n *\n * **When to Use**\n *\n * This is useful for structuring your code to respond differently to success or\n * failure without triggering side effects.\n *\n * **Example** (Handling Both Success and Failure Cases)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const success: Effect.Effect<number, Error> = Effect.succeed(42)\n *\n * const program1 = Effect.match(success, {\n *   onFailure: (error) => `failure: ${error.message}`,\n *   onSuccess: (value) => `success: ${value}`\n * })\n *\n * // Run and log the result of the successful effect\n * Effect.runPromise(program1).then(console.log)\n * // Output: \"success: 42\"\n *\n * const failure: Effect.Effect<number, Error> = Effect.fail(\n *   new Error(\"Uh oh!\")\n * )\n *\n * const program2 = Effect.match(failure, {\n *   onFailure: (error) => `failure: ${error.message}`,\n *   onSuccess: (value) => `success: ${value}`\n * })\n *\n * // Run and log the result of the failed effect\n * Effect.runPromise(program2).then(console.log)\n * // Output: \"failure: Uh oh!\"\n * ```\n *\n * @see {@link matchEffect} if you need to perform side effects in the handlers.\n *\n * @since 2.0.0\n * @category Matching\n */\nexport const match: {\n  /**\n   * Handles both success and failure cases of an effect without performing side\n   * effects.\n   *\n   * **Details**\n   *\n   * `match` lets you define custom handlers for both success and failure\n   * scenarios. You provide separate functions to handle each case, allowing you\n   * to process the result if the effect succeeds, or handle the error if the\n   * effect fails.\n   *\n   * **When to Use**\n   *\n   * This is useful for structuring your code to respond differently to success or\n   * failure without triggering side effects.\n   *\n   * **Example** (Handling Both Success and Failure Cases)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const success: Effect.Effect<number, Error> = Effect.succeed(42)\n   *\n   * const program1 = Effect.match(success, {\n   *   onFailure: (error) => `failure: ${error.message}`,\n   *   onSuccess: (value) => `success: ${value}`\n   * })\n   *\n   * // Run and log the result of the successful effect\n   * Effect.runPromise(program1).then(console.log)\n   * // Output: \"success: 42\"\n   *\n   * const failure: Effect.Effect<number, Error> = Effect.fail(\n   *   new Error(\"Uh oh!\")\n   * )\n   *\n   * const program2 = Effect.match(failure, {\n   *   onFailure: (error) => `failure: ${error.message}`,\n   *   onSuccess: (value) => `success: ${value}`\n   * })\n   *\n   * // Run and log the result of the failed effect\n   * Effect.runPromise(program2).then(console.log)\n   * // Output: \"failure: Uh oh!\"\n   * ```\n   *\n   * @see {@link matchEffect} if you need to perform side effects in the handlers.\n   *\n   * @since 2.0.0\n   * @category Matching\n   */\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, never, R>\n  /**\n   * Handles both success and failure cases of an effect without performing side\n   * effects.\n   *\n   * **Details**\n   *\n   * `match` lets you define custom handlers for both success and failure\n   * scenarios. You provide separate functions to handle each case, allowing you\n   * to process the result if the effect succeeds, or handle the error if the\n   * effect fails.\n   *\n   * **When to Use**\n   *\n   * This is useful for structuring your code to respond differently to success or\n   * failure without triggering side effects.\n   *\n   * **Example** (Handling Both Success and Failure Cases)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const success: Effect.Effect<number, Error> = Effect.succeed(42)\n   *\n   * const program1 = Effect.match(success, {\n   *   onFailure: (error) => `failure: ${error.message}`,\n   *   onSuccess: (value) => `success: ${value}`\n   * })\n   *\n   * // Run and log the result of the successful effect\n   * Effect.runPromise(program1).then(console.log)\n   * // Output: \"success: 42\"\n   *\n   * const failure: Effect.Effect<number, Error> = Effect.fail(\n   *   new Error(\"Uh oh!\")\n   * )\n   *\n   * const program2 = Effect.match(failure, {\n   *   onFailure: (error) => `failure: ${error.message}`,\n   *   onSuccess: (value) => `success: ${value}`\n   * })\n   *\n   * // Run and log the result of the failed effect\n   * Effect.runPromise(program2).then(console.log)\n   * // Output: \"failure: Uh oh!\"\n   * ```\n   *\n   * @see {@link matchEffect} if you need to perform side effects in the handlers.\n   *\n   * @since 2.0.0\n   * @category Matching\n   */\n  <A, E, R, A2, A3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): Effect<A2 | A3, never, R>\n} = effect.match\n\n/**\n * Handles failures by matching the cause of failure.\n *\n * **Details**\n *\n * The `matchCause` function allows you to handle failures with access to the\n * full cause of the failure within a fiber.\n *\n * **When to Use**\n *\n * This is useful for differentiating between different types of errors, such as\n * regular failures, defects, or interruptions. You can provide specific\n * handling logic for each failure type based on the cause.\n *\n * **Example** (Handling Different Failure Causes)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const task: Effect.Effect<number, Error> = Effect.die(\"Uh oh!\")\n *\n * const program = Effect.matchCause(task, {\n *   onFailure: (cause) => {\n *     switch (cause._tag) {\n *       case \"Fail\":\n *         // Handle standard failure\n *         return `Fail: ${cause.error.message}`\n *       case \"Die\":\n *         // Handle defects (unexpected errors)\n *         return `Die: ${cause.defect}`\n *       case \"Interrupt\":\n *         // Handle interruption\n *         return `${cause.fiberId} interrupted!`\n *     }\n *     // Fallback for other causes\n *     return \"failed due to other causes\"\n *   },\n *   onSuccess: (value) =>\n *     // task completes successfully\n *     `succeeded with ${value} value`\n * })\n *\n * Effect.runPromise(program).then(console.log)\n * // Output: \"Die: Uh oh!\"\n * ```\n *\n * @see {@link matchCauseEffect} if you need to perform side effects in the\n * handlers.\n * @see {@link match} if you don't need to handle the cause of the failure.\n *\n * @since 2.0.0\n * @category Matching\n */\nexport const matchCause: {\n  /**\n   * Handles failures by matching the cause of failure.\n   *\n   * **Details**\n   *\n   * The `matchCause` function allows you to handle failures with access to the\n   * full cause of the failure within a fiber.\n   *\n   * **When to Use**\n   *\n   * This is useful for differentiating between different types of errors, such as\n   * regular failures, defects, or interruptions. You can provide specific\n   * handling logic for each failure type based on the cause.\n   *\n   * **Example** (Handling Different Failure Causes)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task: Effect.Effect<number, Error> = Effect.die(\"Uh oh!\")\n   *\n   * const program = Effect.matchCause(task, {\n   *   onFailure: (cause) => {\n   *     switch (cause._tag) {\n   *       case \"Fail\":\n   *         // Handle standard failure\n   *         return `Fail: ${cause.error.message}`\n   *       case \"Die\":\n   *         // Handle defects (unexpected errors)\n   *         return `Die: ${cause.defect}`\n   *       case \"Interrupt\":\n   *         // Handle interruption\n   *         return `${cause.fiberId} interrupted!`\n   *     }\n   *     // Fallback for other causes\n   *     return \"failed due to other causes\"\n   *   },\n   *   onSuccess: (value) =>\n   *     // task completes successfully\n   *     `succeeded with ${value} value`\n   * })\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output: \"Die: Uh oh!\"\n   * ```\n   *\n   * @see {@link matchCauseEffect} if you need to perform side effects in the\n   * handlers.\n   * @see {@link match} if you don't need to handle the cause of the failure.\n   *\n   * @since 2.0.0\n   * @category Matching\n   */\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, never, R>\n  /**\n   * Handles failures by matching the cause of failure.\n   *\n   * **Details**\n   *\n   * The `matchCause` function allows you to handle failures with access to the\n   * full cause of the failure within a fiber.\n   *\n   * **When to Use**\n   *\n   * This is useful for differentiating between different types of errors, such as\n   * regular failures, defects, or interruptions. You can provide specific\n   * handling logic for each failure type based on the cause.\n   *\n   * **Example** (Handling Different Failure Causes)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task: Effect.Effect<number, Error> = Effect.die(\"Uh oh!\")\n   *\n   * const program = Effect.matchCause(task, {\n   *   onFailure: (cause) => {\n   *     switch (cause._tag) {\n   *       case \"Fail\":\n   *         // Handle standard failure\n   *         return `Fail: ${cause.error.message}`\n   *       case \"Die\":\n   *         // Handle defects (unexpected errors)\n   *         return `Die: ${cause.defect}`\n   *       case \"Interrupt\":\n   *         // Handle interruption\n   *         return `${cause.fiberId} interrupted!`\n   *     }\n   *     // Fallback for other causes\n   *     return \"failed due to other causes\"\n   *   },\n   *   onSuccess: (value) =>\n   *     // task completes successfully\n   *     `succeeded with ${value} value`\n   * })\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output: \"Die: Uh oh!\"\n   * ```\n   *\n   * @see {@link matchCauseEffect} if you need to perform side effects in the\n   * handlers.\n   * @see {@link match} if you don't need to handle the cause of the failure.\n   *\n   * @since 2.0.0\n   * @category Matching\n   */\n  <A, E, R, A2, A3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): Effect<A2 | A3, never, R>\n} = core.matchCause\n\n/**\n * Handles failures with access to the cause and allows performing side effects.\n *\n * **Details**\n *\n * The `matchCauseEffect` function works similarly to {@link matchCause}, but it\n * also allows you to perform additional side effects based on the failure\n * cause. This function provides access to the complete cause of the failure,\n * making it possible to differentiate between various failure types, and allows\n * you to respond accordingly while performing side effects (like logging or\n * other operations).\n *\n * **Example** (Handling Different Failure Causes with Side Effects)\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const task: Effect.Effect<number, Error> = Effect.die(\"Uh oh!\")\n *\n * const program = Effect.matchCauseEffect(task, {\n *   onFailure: (cause) => {\n *     switch (cause._tag) {\n *       case \"Fail\":\n *         // Handle standard failure with a logged message\n *         return Console.log(`Fail: ${cause.error.message}`)\n *       case \"Die\":\n *         // Handle defects (unexpected errors) by logging the defect\n *         return Console.log(`Die: ${cause.defect}`)\n *       case \"Interrupt\":\n *         // Handle interruption and log the fiberId that was interrupted\n *         return Console.log(`${cause.fiberId} interrupted!`)\n *     }\n *     // Fallback for other causes\n *     return Console.log(\"failed due to other causes\")\n *   },\n *   onSuccess: (value) =>\n *     // Log success if the task completes successfully\n *     Console.log(`succeeded with ${value} value`)\n * })\n *\n * Effect.runPromise(program)\n * // Output: \"Die: Uh oh!\"\n * ```\n *\n * @see {@link matchCause} if you don't need side effects and only want to handle the result or failure.\n * @see {@link matchEffect} if you don't need to handle the cause of the failure.\n *\n * @since 2.0.0\n * @category Matching\n */\nexport const matchCauseEffect: {\n  /**\n   * Handles failures with access to the cause and allows performing side effects.\n   *\n   * **Details**\n   *\n   * The `matchCauseEffect` function works similarly to {@link matchCause}, but it\n   * also allows you to perform additional side effects based on the failure\n   * cause. This function provides access to the complete cause of the failure,\n   * making it possible to differentiate between various failure types, and allows\n   * you to respond accordingly while performing side effects (like logging or\n   * other operations).\n   *\n   * **Example** (Handling Different Failure Causes with Side Effects)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task: Effect.Effect<number, Error> = Effect.die(\"Uh oh!\")\n   *\n   * const program = Effect.matchCauseEffect(task, {\n   *   onFailure: (cause) => {\n   *     switch (cause._tag) {\n   *       case \"Fail\":\n   *         // Handle standard failure with a logged message\n   *         return Console.log(`Fail: ${cause.error.message}`)\n   *       case \"Die\":\n   *         // Handle defects (unexpected errors) by logging the defect\n   *         return Console.log(`Die: ${cause.defect}`)\n   *       case \"Interrupt\":\n   *         // Handle interruption and log the fiberId that was interrupted\n   *         return Console.log(`${cause.fiberId} interrupted!`)\n   *     }\n   *     // Fallback for other causes\n   *     return Console.log(\"failed due to other causes\")\n   *   },\n   *   onSuccess: (value) =>\n   *     // Log success if the task completes successfully\n   *     Console.log(`succeeded with ${value} value`)\n   * })\n   *\n   * Effect.runPromise(program)\n   * // Output: \"Die: Uh oh!\"\n   * ```\n   *\n   * @see {@link matchCause} if you don't need side effects and only want to handle the result or failure.\n   * @see {@link matchEffect} if you don't need to handle the cause of the failure.\n   *\n   * @since 2.0.0\n   * @category Matching\n   */\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n  /**\n   * Handles failures with access to the cause and allows performing side effects.\n   *\n   * **Details**\n   *\n   * The `matchCauseEffect` function works similarly to {@link matchCause}, but it\n   * also allows you to perform additional side effects based on the failure\n   * cause. This function provides access to the complete cause of the failure,\n   * making it possible to differentiate between various failure types, and allows\n   * you to respond accordingly while performing side effects (like logging or\n   * other operations).\n   *\n   * **Example** (Handling Different Failure Causes with Side Effects)\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task: Effect.Effect<number, Error> = Effect.die(\"Uh oh!\")\n   *\n   * const program = Effect.matchCauseEffect(task, {\n   *   onFailure: (cause) => {\n   *     switch (cause._tag) {\n   *       case \"Fail\":\n   *         // Handle standard failure with a logged message\n   *         return Console.log(`Fail: ${cause.error.message}`)\n   *       case \"Die\":\n   *         // Handle defects (unexpected errors) by logging the defect\n   *         return Console.log(`Die: ${cause.defect}`)\n   *       case \"Interrupt\":\n   *         // Handle interruption and log the fiberId that was interrupted\n   *         return Console.log(`${cause.fiberId} interrupted!`)\n   *     }\n   *     // Fallback for other causes\n   *     return Console.log(\"failed due to other causes\")\n   *   },\n   *   onSuccess: (value) =>\n   *     // Log success if the task completes successfully\n   *     Console.log(`succeeded with ${value} value`)\n   * })\n   *\n   * Effect.runPromise(program)\n   * // Output: \"Die: Uh oh!\"\n   * ```\n   *\n   * @see {@link matchCause} if you don't need side effects and only want to handle the result or failure.\n   * @see {@link matchEffect} if you don't need to handle the cause of the failure.\n   *\n   * @since 2.0.0\n   * @category Matching\n   */\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n} = core.matchCauseEffect\n\n/**\n * Handles both success and failure cases of an effect, allowing for additional\n * side effects.\n *\n * **Details**\n *\n * The `matchEffect` function is similar to {@link match}, but it enables you to\n * perform side effects in the handlers for both success and failure outcomes.\n *\n * **When to Use**\n *\n * This is useful when you need to execute additional actions, like logging or\n * notifying users, based on whether an effect succeeds or fails.\n *\n * **Example** (Handling Both Success and Failure Cases with Side Effects)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const success: Effect.Effect<number, Error> = Effect.succeed(42)\n * const failure: Effect.Effect<number, Error> = Effect.fail(\n *   new Error(\"Uh oh!\")\n * )\n *\n * const program1 = Effect.matchEffect(success, {\n *   onFailure: (error) =>\n *     Effect.succeed(`failure: ${error.message}`).pipe(\n *       Effect.tap(Effect.log)\n *     ),\n *   onSuccess: (value) =>\n *     Effect.succeed(`success: ${value}`).pipe(Effect.tap(Effect.log))\n * })\n *\n * console.log(Effect.runSync(program1))\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=\"success: 42\"\n * // success: 42\n *\n * const program2 = Effect.matchEffect(failure, {\n *   onFailure: (error) =>\n *     Effect.succeed(`failure: ${error.message}`).pipe(\n *       Effect.tap(Effect.log)\n *     ),\n *   onSuccess: (value) =>\n *     Effect.succeed(`success: ${value}`).pipe(Effect.tap(Effect.log))\n * })\n *\n * console.log(Effect.runSync(program2))\n * // Output:\n * // timestamp=... level=INFO fiber=#1 message=\"failure: Uh oh!\"\n * // failure: Uh oh!\n * ```\n *\n * @see {@link match} if you don't need side effects and only want to handle the\n * result or failure.\n *\n * @since 2.0.0\n * @category Matching\n */\nexport const matchEffect: {\n  /**\n   * Handles both success and failure cases of an effect, allowing for additional\n   * side effects.\n   *\n   * **Details**\n   *\n   * The `matchEffect` function is similar to {@link match}, but it enables you to\n   * perform side effects in the handlers for both success and failure outcomes.\n   *\n   * **When to Use**\n   *\n   * This is useful when you need to execute additional actions, like logging or\n   * notifying users, based on whether an effect succeeds or fails.\n   *\n   * **Example** (Handling Both Success and Failure Cases with Side Effects)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const success: Effect.Effect<number, Error> = Effect.succeed(42)\n   * const failure: Effect.Effect<number, Error> = Effect.fail(\n   *   new Error(\"Uh oh!\")\n   * )\n   *\n   * const program1 = Effect.matchEffect(success, {\n   *   onFailure: (error) =>\n   *     Effect.succeed(`failure: ${error.message}`).pipe(\n   *       Effect.tap(Effect.log)\n   *     ),\n   *   onSuccess: (value) =>\n   *     Effect.succeed(`success: ${value}`).pipe(Effect.tap(Effect.log))\n   * })\n   *\n   * console.log(Effect.runSync(program1))\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"success: 42\"\n   * // success: 42\n   *\n   * const program2 = Effect.matchEffect(failure, {\n   *   onFailure: (error) =>\n   *     Effect.succeed(`failure: ${error.message}`).pipe(\n   *       Effect.tap(Effect.log)\n   *     ),\n   *   onSuccess: (value) =>\n   *     Effect.succeed(`success: ${value}`).pipe(Effect.tap(Effect.log))\n   * })\n   *\n   * console.log(Effect.runSync(program2))\n   * // Output:\n   * // timestamp=... level=INFO fiber=#1 message=\"failure: Uh oh!\"\n   * // failure: Uh oh!\n   * ```\n   *\n   * @see {@link match} if you don't need side effects and only want to handle the\n   * result or failure.\n   *\n   * @since 2.0.0\n   * @category Matching\n   */\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (e: E) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n  /**\n   * Handles both success and failure cases of an effect, allowing for additional\n   * side effects.\n   *\n   * **Details**\n   *\n   * The `matchEffect` function is similar to {@link match}, but it enables you to\n   * perform side effects in the handlers for both success and failure outcomes.\n   *\n   * **When to Use**\n   *\n   * This is useful when you need to execute additional actions, like logging or\n   * notifying users, based on whether an effect succeeds or fails.\n   *\n   * **Example** (Handling Both Success and Failure Cases with Side Effects)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const success: Effect.Effect<number, Error> = Effect.succeed(42)\n   * const failure: Effect.Effect<number, Error> = Effect.fail(\n   *   new Error(\"Uh oh!\")\n   * )\n   *\n   * const program1 = Effect.matchEffect(success, {\n   *   onFailure: (error) =>\n   *     Effect.succeed(`failure: ${error.message}`).pipe(\n   *       Effect.tap(Effect.log)\n   *     ),\n   *   onSuccess: (value) =>\n   *     Effect.succeed(`success: ${value}`).pipe(Effect.tap(Effect.log))\n   * })\n   *\n   * console.log(Effect.runSync(program1))\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"success: 42\"\n   * // success: 42\n   *\n   * const program2 = Effect.matchEffect(failure, {\n   *   onFailure: (error) =>\n   *     Effect.succeed(`failure: ${error.message}`).pipe(\n   *       Effect.tap(Effect.log)\n   *     ),\n   *   onSuccess: (value) =>\n   *     Effect.succeed(`success: ${value}`).pipe(Effect.tap(Effect.log))\n   * })\n   *\n   * console.log(Effect.runSync(program2))\n   * // Output:\n   * // timestamp=... level=INFO fiber=#1 message=\"failure: Uh oh!\"\n   * // failure: Uh oh!\n   * ```\n   *\n   * @see {@link match} if you don't need side effects and only want to handle the\n   * result or failure.\n   *\n   * @since 2.0.0\n   * @category Matching\n   */\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n} = core.matchEffect\n\n/**\n * Logs one or more messages or error causes at the current log level.\n *\n * **Details**\n *\n * This function provides a simple way to log messages or error causes during\n * the execution of your effects. By default, logs are recorded at the `INFO`\n * level, but this can be adjusted using other logging utilities\n * (`Logger.withMinimumLogLevel`). Multiple items, including `Cause` instances,\n * can be logged in a single call. When logging `Cause` instances, detailed\n * error information is included in the log output.\n *\n * The log output includes useful metadata like the current timestamp, log\n * level, and fiber ID, making it suitable for debugging and tracking purposes.\n * This function does not interrupt or alter the effect's execution flow.\n *\n * **Example**\n *\n * ```ts\n * import { Cause, Effect } from \"effect\"\n *\n * const program = Effect.log(\n *   \"message1\",\n *   \"message2\",\n *   Cause.die(\"Oh no!\"),\n *   Cause.die(\"Oh uh!\")\n * )\n *\n * Effect.runFork(program)\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=message1 message=message2 cause=\"Error: Oh no!\n * // Error: Oh uh!\"\n * ```\n *\n * @since 2.0.0\n * @category Logging\n */\nexport const log: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.log\n\n/**\n * Logs messages or error causes at a specified log level.\n *\n * **Details**\n *\n * This function allows you to log one or more messages or error causes while\n * specifying the desired log level (e.g., DEBUG, INFO, ERROR). It provides\n * flexibility in categorizing logs based on their importance or severity,\n * making it easier to filter logs during debugging or production monitoring.\n *\n * **Example**\n *\n * ```ts\n * import { Cause, Effect, LogLevel } from \"effect\"\n *\n * const program = Effect.logWithLevel(\n *   LogLevel.Error,\n *   \"Critical error encountered\",\n *   Cause.die(\"System failure!\")\n * )\n *\n * Effect.runFork(program)\n * // Output:\n * // timestamp=... level=ERROR fiber=#0 message=Critical error encountered cause=\"Error: System failure!\"\n * ```\n *\n * @since 2.0.0\n * @category Logging\n */\nexport const logWithLevel = (\n  level: LogLevel.LogLevel,\n  ...message: ReadonlyArray<any>\n): Effect<void> => effect.logWithLevel(level)(...message)\n\n/**\n * Logs messages at the TRACE log level.\n *\n * **Details**\n *\n * This function logs the specified messages at the TRACE level. TRACE logs are\n * typically used for very detailed diagnostic information. These messages are\n * not displayed by default. To view them, you must adjust the logging\n * configuration by setting the minimum log level to `LogLevel.Trace` using\n * `Logger.withMinimumLogLevel`.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Logger, LogLevel } from \"effect\"\n *\n * const program = Effect.logTrace(\"message1\").pipe(Logger.withMinimumLogLevel(LogLevel.Trace))\n *\n * Effect.runFork(program)\n * // timestamp=... level=TRACE fiber=#0 message=message1\n * ```\n *\n * @since 2.0.0\n * @category Logging\n */\nexport const logTrace: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logTrace\n\n/**\n * Logs messages at the DEBUG log level.\n *\n * **Details**\n *\n * This function logs messages at the DEBUG level, which is typically used for\n * diagnosing application behavior during development. DEBUG messages provide\n * less detailed information than TRACE logs but are still not shown by default.\n * To view these logs, adjust the log level using `Logger.withMinimumLogLevel`.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Logger, LogLevel } from \"effect\"\n *\n * const program = Effect.logDebug(\"message1\").pipe(Logger.withMinimumLogLevel(LogLevel.Debug))\n *\n * Effect.runFork(program)\n * // timestamp=... level=DEBUG fiber=#0 message=message1\n * ```\n *\n * @since 2.0.0\n * @category Logging\n */\nexport const logDebug: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logDebug\n\n/**\n * Logs messages at the INFO log level.\n *\n * **Details**\n *\n * This function logs messages at the INFO level, suitable for general\n * application events or operational messages. INFO logs are shown by default\n * and are commonly used for highlighting normal, non-error operations.\n *\n * @since 2.0.0\n * @category Logging\n */\nexport const logInfo: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logInfo\n\n/**\n * Logs messages at the WARNING log level.\n *\n * **Details**\n *\n * This function logs messages at the WARNING level, suitable for highlighting\n * potential issues that are not errors but may require attention. These\n * messages indicate that something unexpected occurred or might lead to errors\n * in the future.\n *\n * @since 2.0.0\n * @category Logging\n */\nexport const logWarning: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logWarning\n\n/**\n * Logs messages at the ERROR log level.\n *\n * **Details**\n *\n * This function logs messages at the ERROR level, suitable for reporting\n * application errors or failures. These logs are typically used for unexpected\n * issues that need immediate attention.\n *\n * @since 2.0.0\n * @category Logging\n */\nexport const logError: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logError\n\n/**\n * Logs messages at the FATAL log level.\n *\n * **Details**\n *\n * This function logs messages at the FATAL level, suitable for reporting\n * critical errors that cause the application to terminate or stop functioning.\n * These logs are typically used for unrecoverable errors that require immediate\n * attention.\n *\n * @since 2.0.0\n * @category Logging\n */\nexport const logFatal: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logFatal\n\n/**\n * Adds a log span to an effect for tracking and logging its execution duration.\n *\n * **Details**\n *\n * This function wraps an effect with a log span, providing performance\n * monitoring and debugging capabilities. The log span tracks the duration of\n * the wrapped effect and logs it with the specified label. This is particularly\n * useful when analyzing time-sensitive operations or understanding the\n * execution time of specific tasks in your application.\n *\n * The logged output will include the label and the total time taken for the\n * operation. The span information is included in the log metadata, making it\n * easy to trace performance metrics in logs.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.sleep(\"1 second\")\n *   yield* Effect.log(\"The job is finished!\")\n * }).pipe(Effect.withLogSpan(\"myspan\"))\n *\n * Effect.runFork(program)\n * // timestamp=... level=INFO fiber=#0 message=\"The job is finished!\" myspan=1011ms\n * ```\n *\n * @since 2.0.0\n * @category Logging\n */\nexport const withLogSpan: {\n  /**\n   * Adds a log span to an effect for tracking and logging its execution duration.\n   *\n   * **Details**\n   *\n   * This function wraps an effect with a log span, providing performance\n   * monitoring and debugging capabilities. The log span tracks the duration of\n   * the wrapped effect and logs it with the specified label. This is particularly\n   * useful when analyzing time-sensitive operations or understanding the\n   * execution time of specific tasks in your application.\n   *\n   * The logged output will include the label and the total time taken for the\n   * operation. The span information is included in the log metadata, making it\n   * easy to trace performance metrics in logs.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.sleep(\"1 second\")\n   *   yield* Effect.log(\"The job is finished!\")\n   * }).pipe(Effect.withLogSpan(\"myspan\"))\n   *\n   * Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=\"The job is finished!\" myspan=1011ms\n   * ```\n   *\n   * @since 2.0.0\n   * @category Logging\n   */\n  (label: string): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Adds a log span to an effect for tracking and logging its execution duration.\n   *\n   * **Details**\n   *\n   * This function wraps an effect with a log span, providing performance\n   * monitoring and debugging capabilities. The log span tracks the duration of\n   * the wrapped effect and logs it with the specified label. This is particularly\n   * useful when analyzing time-sensitive operations or understanding the\n   * execution time of specific tasks in your application.\n   *\n   * The logged output will include the label and the total time taken for the\n   * operation. The span information is included in the log metadata, making it\n   * easy to trace performance metrics in logs.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.sleep(\"1 second\")\n   *   yield* Effect.log(\"The job is finished!\")\n   * }).pipe(Effect.withLogSpan(\"myspan\"))\n   *\n   * Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=\"The job is finished!\" myspan=1011ms\n   * ```\n   *\n   * @since 2.0.0\n   * @category Logging\n   */\n  <A, E, R>(effect: Effect<A, E, R>, label: string): Effect<A, E, R>\n} = effect.withLogSpan\n\n/**\n * Adds custom annotations to log entries generated within an effect.\n *\n * **Details**\n *\n * This function allows you to enhance log messages by appending additional\n * context in the form of key-value pairs. These annotations are included in\n * every log message created during the execution of the effect, making the logs\n * more informative and easier to trace.\n *\n * The annotations can be specified as a single key-value pair or as a record of\n * multiple key-value pairs. This is particularly useful for tracking\n * operations, debugging, or associating specific metadata with logs for better\n * observability.\n *\n * The annotated key-value pairs will appear alongside the log message in the\n * output.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.log(\"message1\")\n *   yield* Effect.log(\"message2\")\n * }).pipe(Effect.annotateLogs(\"taskId\", \"1234\")) // Annotation as key/value pair\n *\n * Effect.runFork(program)\n * // timestamp=... level=INFO fiber=#0 message=message1 taskId=1234\n * // timestamp=... level=INFO fiber=#0 message=message2 taskId=1234\n * ```\n *\n * @see {@link annotateLogsScoped} to add log annotations with a limited scope.\n *\n * @since 2.0.0\n * @category Logging\n */\nexport const annotateLogs: {\n  /**\n   * Adds custom annotations to log entries generated within an effect.\n   *\n   * **Details**\n   *\n   * This function allows you to enhance log messages by appending additional\n   * context in the form of key-value pairs. These annotations are included in\n   * every log message created during the execution of the effect, making the logs\n   * more informative and easier to trace.\n   *\n   * The annotations can be specified as a single key-value pair or as a record of\n   * multiple key-value pairs. This is particularly useful for tracking\n   * operations, debugging, or associating specific metadata with logs for better\n   * observability.\n   *\n   * The annotated key-value pairs will appear alongside the log message in the\n   * output.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"message1\")\n   *   yield* Effect.log(\"message2\")\n   * }).pipe(Effect.annotateLogs(\"taskId\", \"1234\")) // Annotation as key/value pair\n   *\n   * Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=message1 taskId=1234\n   * // timestamp=... level=INFO fiber=#0 message=message2 taskId=1234\n   * ```\n   *\n   * @see {@link annotateLogsScoped} to add log annotations with a limited scope.\n   *\n   * @since 2.0.0\n   * @category Logging\n   */\n  (key: string, value: unknown): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Adds custom annotations to log entries generated within an effect.\n   *\n   * **Details**\n   *\n   * This function allows you to enhance log messages by appending additional\n   * context in the form of key-value pairs. These annotations are included in\n   * every log message created during the execution of the effect, making the logs\n   * more informative and easier to trace.\n   *\n   * The annotations can be specified as a single key-value pair or as a record of\n   * multiple key-value pairs. This is particularly useful for tracking\n   * operations, debugging, or associating specific metadata with logs for better\n   * observability.\n   *\n   * The annotated key-value pairs will appear alongside the log message in the\n   * output.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"message1\")\n   *   yield* Effect.log(\"message2\")\n   * }).pipe(Effect.annotateLogs(\"taskId\", \"1234\")) // Annotation as key/value pair\n   *\n   * Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=message1 taskId=1234\n   * // timestamp=... level=INFO fiber=#0 message=message2 taskId=1234\n   * ```\n   *\n   * @see {@link annotateLogsScoped} to add log annotations with a limited scope.\n   *\n   * @since 2.0.0\n   * @category Logging\n   */\n  (values: Record<string, unknown>): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Adds custom annotations to log entries generated within an effect.\n   *\n   * **Details**\n   *\n   * This function allows you to enhance log messages by appending additional\n   * context in the form of key-value pairs. These annotations are included in\n   * every log message created during the execution of the effect, making the logs\n   * more informative and easier to trace.\n   *\n   * The annotations can be specified as a single key-value pair or as a record of\n   * multiple key-value pairs. This is particularly useful for tracking\n   * operations, debugging, or associating specific metadata with logs for better\n   * observability.\n   *\n   * The annotated key-value pairs will appear alongside the log message in the\n   * output.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"message1\")\n   *   yield* Effect.log(\"message2\")\n   * }).pipe(Effect.annotateLogs(\"taskId\", \"1234\")) // Annotation as key/value pair\n   *\n   * Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=message1 taskId=1234\n   * // timestamp=... level=INFO fiber=#0 message=message2 taskId=1234\n   * ```\n   *\n   * @see {@link annotateLogsScoped} to add log annotations with a limited scope.\n   *\n   * @since 2.0.0\n   * @category Logging\n   */\n  <A, E, R>(effect: Effect<A, E, R>, key: string, value: unknown): Effect<A, E, R>\n  /**\n   * Adds custom annotations to log entries generated within an effect.\n   *\n   * **Details**\n   *\n   * This function allows you to enhance log messages by appending additional\n   * context in the form of key-value pairs. These annotations are included in\n   * every log message created during the execution of the effect, making the logs\n   * more informative and easier to trace.\n   *\n   * The annotations can be specified as a single key-value pair or as a record of\n   * multiple key-value pairs. This is particularly useful for tracking\n   * operations, debugging, or associating specific metadata with logs for better\n   * observability.\n   *\n   * The annotated key-value pairs will appear alongside the log message in the\n   * output.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"message1\")\n   *   yield* Effect.log(\"message2\")\n   * }).pipe(Effect.annotateLogs(\"taskId\", \"1234\")) // Annotation as key/value pair\n   *\n   * Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=message1 taskId=1234\n   * // timestamp=... level=INFO fiber=#0 message=message2 taskId=1234\n   * ```\n   *\n   * @see {@link annotateLogsScoped} to add log annotations with a limited scope.\n   *\n   * @since 2.0.0\n   * @category Logging\n   */\n  <A, E, R>(effect: Effect<A, E, R>, values: Record<string, unknown>): Effect<A, E, R>\n} = effect.annotateLogs\n\n/**\n * Adds log annotations with a limited scope to enhance contextual logging.\n *\n * **Details**\n *\n * This function allows you to apply key-value annotations to log entries\n * generated within a specific scope of your effect computations. The\n * annotations are restricted to the defined `Scope`, ensuring that they are\n * only applied to logs produced during that scope. Once the scope ends, the\n * annotations are automatically removed, making it easier to manage\n * context-specific logging without affecting other parts of your application.\n *\n * The annotations can be provided as a single key-value pair or as a record of\n * multiple key-value pairs. This flexibility enables fine-grained control over\n * the additional metadata included in logs for specific tasks or operations.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.log(\"no annotations\")\n *   yield* Effect.annotateLogsScoped({ key: \"value\" })\n *   yield* Effect.log(\"message1\") // Annotation is applied to this log\n *   yield* Effect.log(\"message2\") // Annotation is applied to this log\n * }).pipe(Effect.scoped, Effect.andThen(Effect.log(\"no annotations again\")))\n *\n * Effect.runFork(program)\n * // timestamp=... level=INFO fiber=#0 message=\"no annotations\"\n * // timestamp=... level=INFO fiber=#0 message=message1 key=value\n * // timestamp=... level=INFO fiber=#0 message=message2 key=value\n * // timestamp=... level=INFO fiber=#0 message=\"no annotations again\"\n * ```\n *\n * @see {@link annotateLogs} to add custom annotations to log entries generated within an effect.\n *\n * @since 3.1.0\n * @category Logging\n */\nexport const annotateLogsScoped: {\n  /**\n   * Adds log annotations with a limited scope to enhance contextual logging.\n   *\n   * **Details**\n   *\n   * This function allows you to apply key-value annotations to log entries\n   * generated within a specific scope of your effect computations. The\n   * annotations are restricted to the defined `Scope`, ensuring that they are\n   * only applied to logs produced during that scope. Once the scope ends, the\n   * annotations are automatically removed, making it easier to manage\n   * context-specific logging without affecting other parts of your application.\n   *\n   * The annotations can be provided as a single key-value pair or as a record of\n   * multiple key-value pairs. This flexibility enables fine-grained control over\n   * the additional metadata included in logs for specific tasks or operations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"no annotations\")\n   *   yield* Effect.annotateLogsScoped({ key: \"value\" })\n   *   yield* Effect.log(\"message1\") // Annotation is applied to this log\n   *   yield* Effect.log(\"message2\") // Annotation is applied to this log\n   * }).pipe(Effect.scoped, Effect.andThen(Effect.log(\"no annotations again\")))\n   *\n   * Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=\"no annotations\"\n   * // timestamp=... level=INFO fiber=#0 message=message1 key=value\n   * // timestamp=... level=INFO fiber=#0 message=message2 key=value\n   * // timestamp=... level=INFO fiber=#0 message=\"no annotations again\"\n   * ```\n   *\n   * @see {@link annotateLogs} to add custom annotations to log entries generated within an effect.\n   *\n   * @since 3.1.0\n   * @category Logging\n   */\n  (key: string, value: unknown): Effect<void, never, Scope.Scope>\n  /**\n   * Adds log annotations with a limited scope to enhance contextual logging.\n   *\n   * **Details**\n   *\n   * This function allows you to apply key-value annotations to log entries\n   * generated within a specific scope of your effect computations. The\n   * annotations are restricted to the defined `Scope`, ensuring that they are\n   * only applied to logs produced during that scope. Once the scope ends, the\n   * annotations are automatically removed, making it easier to manage\n   * context-specific logging without affecting other parts of your application.\n   *\n   * The annotations can be provided as a single key-value pair or as a record of\n   * multiple key-value pairs. This flexibility enables fine-grained control over\n   * the additional metadata included in logs for specific tasks or operations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"no annotations\")\n   *   yield* Effect.annotateLogsScoped({ key: \"value\" })\n   *   yield* Effect.log(\"message1\") // Annotation is applied to this log\n   *   yield* Effect.log(\"message2\") // Annotation is applied to this log\n   * }).pipe(Effect.scoped, Effect.andThen(Effect.log(\"no annotations again\")))\n   *\n   * Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=\"no annotations\"\n   * // timestamp=... level=INFO fiber=#0 message=message1 key=value\n   * // timestamp=... level=INFO fiber=#0 message=message2 key=value\n   * // timestamp=... level=INFO fiber=#0 message=\"no annotations again\"\n   * ```\n   *\n   * @see {@link annotateLogs} to add custom annotations to log entries generated within an effect.\n   *\n   * @since 3.1.0\n   * @category Logging\n   */\n  (values: Record<string, unknown>): Effect<void, never, Scope.Scope>\n} = fiberRuntime.annotateLogsScoped\n\n/**\n * Retrieves the current log annotations for the current scope.\n *\n * **Details**\n *\n * This function provides access to the log annotations associated with the\n * current scope. Log annotations are key-value pairs that provide additional\n * context to log entries. They are often used to add metadata such as tags,\n * identifiers, or extra debugging information to logs.\n *\n * By using this function, you can inspect or utilize the annotations applied to\n * the current scope, making it easier to trace and debug specific sections of\n * your application.\n *\n * @see {@link annotateLogs} to add custom annotations to log entries generated within an effect.\n * @see {@link annotateLogsScoped} to add log annotations with a limited scope.\n *\n * @since 2.0.0\n * @category Logging\n */\nexport const logAnnotations: Effect<HashMap.HashMap<string, unknown>> = effect.logAnnotations\n\n/**\n * Configures whether child fibers will log unhandled errors and at what log\n * level.\n *\n * **Details**\n *\n * This function allows you to control whether unhandled errors from child\n * fibers are logged and to specify the log level for these errors. By default,\n * unhandled errors are reported via the logger. However, using this function,\n * you can choose to suppress these logs by passing `Option.none` or adjust the\n * log level to a specific severity, such as `Error`, `Warning`, or `Info`.\n *\n * This configuration is scoped to the effect it is applied to, meaning the\n * changes only apply to the child fibers created within that effect's context.\n * It is especially useful when you want to reduce noise in logs or prioritize\n * certain types of errors.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Fiber, LogLevel, Option } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   const fiber = yield* Effect.fork(Effect.fail(\"Unhandled error!\"))\n *   yield* Fiber.join(fiber)\n * })\n *\n * Effect.runFork(program.pipe(Effect.withUnhandledErrorLogLevel(Option.some(LogLevel.Error))))\n * // Output:\n * // timestamp=... level=ERROR fiber=#1 message=\"Fiber terminated with an unhandled error\" cause=\"Error: Unhandled error!\"\n * ```\n *\n * @since 2.0.0\n * @category Logging\n */\nexport const withUnhandledErrorLogLevel: {\n  /**\n   * Configures whether child fibers will log unhandled errors and at what log\n   * level.\n   *\n   * **Details**\n   *\n   * This function allows you to control whether unhandled errors from child\n   * fibers are logged and to specify the log level for these errors. By default,\n   * unhandled errors are reported via the logger. However, using this function,\n   * you can choose to suppress these logs by passing `Option.none` or adjust the\n   * log level to a specific severity, such as `Error`, `Warning`, or `Info`.\n   *\n   * This configuration is scoped to the effect it is applied to, meaning the\n   * changes only apply to the child fibers created within that effect's context.\n   * It is especially useful when you want to reduce noise in logs or prioritize\n   * certain types of errors.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Fiber, LogLevel, Option } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   const fiber = yield* Effect.fork(Effect.fail(\"Unhandled error!\"))\n   *   yield* Fiber.join(fiber)\n   * })\n   *\n   * Effect.runFork(program.pipe(Effect.withUnhandledErrorLogLevel(Option.some(LogLevel.Error))))\n   * // Output:\n   * // timestamp=... level=ERROR fiber=#1 message=\"Fiber terminated with an unhandled error\" cause=\"Error: Unhandled error!\"\n   * ```\n   *\n   * @since 2.0.0\n   * @category Logging\n   */\n  (level: Option.Option<LogLevel.LogLevel>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Configures whether child fibers will log unhandled errors and at what log\n   * level.\n   *\n   * **Details**\n   *\n   * This function allows you to control whether unhandled errors from child\n   * fibers are logged and to specify the log level for these errors. By default,\n   * unhandled errors are reported via the logger. However, using this function,\n   * you can choose to suppress these logs by passing `Option.none` or adjust the\n   * log level to a specific severity, such as `Error`, `Warning`, or `Info`.\n   *\n   * This configuration is scoped to the effect it is applied to, meaning the\n   * changes only apply to the child fibers created within that effect's context.\n   * It is especially useful when you want to reduce noise in logs or prioritize\n   * certain types of errors.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Fiber, LogLevel, Option } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   const fiber = yield* Effect.fork(Effect.fail(\"Unhandled error!\"))\n   *   yield* Fiber.join(fiber)\n   * })\n   *\n   * Effect.runFork(program.pipe(Effect.withUnhandledErrorLogLevel(Option.some(LogLevel.Error))))\n   * // Output:\n   * // timestamp=... level=ERROR fiber=#1 message=\"Fiber terminated with an unhandled error\" cause=\"Error: Unhandled error!\"\n   * ```\n   *\n   * @since 2.0.0\n   * @category Logging\n   */\n  <A, E, R>(self: Effect<A, E, R>, level: Option.Option<LogLevel.LogLevel>): Effect<A, E, R>\n} = core.withUnhandledErrorLogLevel\n\n/**\n * Conditionally executes an effect based on the specified log level and currently enabled log level.\n *\n * **Details**\n *\n * This function runs the provided effect only if the specified log level is\n * enabled. If the log level is enabled, the effect is executed and its result\n * is wrapped in `Some`. If the log level is not enabled, the effect is not\n * executed and `None` is returned.\n *\n * This function is useful for conditionally executing logging-related effects\n * or other operations that depend on the current log level configuration.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Logger, LogLevel } from \"effect\"\n *\n * const program = Effect.gen(function* () {\n *   yield* Effect.whenLogLevel(Effect.logTrace(\"message1\"), LogLevel.Trace); // returns `None`\n *   yield* Effect.whenLogLevel(Effect.logDebug(\"message2\"), LogLevel.Debug); // returns `Some`\n * }).pipe(Logger.withMinimumLogLevel(LogLevel.Debug));\n *\n * Effect.runFork(program)\n * // timestamp=... level=DEBUG fiber=#0 message=message2\n * ```\n *\n * @see {@link FiberRef.currentMinimumLogLevel} to retrieve the current minimum log level.\n *\n * @since 3.13.0\n * @category Logging\n */\nexport const whenLogLevel: {\n  /**\n   * Conditionally executes an effect based on the specified log level and currently enabled log level.\n   *\n   * **Details**\n   *\n   * This function runs the provided effect only if the specified log level is\n   * enabled. If the log level is enabled, the effect is executed and its result\n   * is wrapped in `Some`. If the log level is not enabled, the effect is not\n   * executed and `None` is returned.\n   *\n   * This function is useful for conditionally executing logging-related effects\n   * or other operations that depend on the current log level configuration.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Logger, LogLevel } from \"effect\"\n   *\n   * const program = Effect.gen(function* () {\n   *   yield* Effect.whenLogLevel(Effect.logTrace(\"message1\"), LogLevel.Trace); // returns `None`\n   *   yield* Effect.whenLogLevel(Effect.logDebug(\"message2\"), LogLevel.Debug); // returns `Some`\n   * }).pipe(Logger.withMinimumLogLevel(LogLevel.Debug));\n   *\n   * Effect.runFork(program)\n   * // timestamp=... level=DEBUG fiber=#0 message=message2\n   * ```\n   *\n   * @see {@link FiberRef.currentMinimumLogLevel} to retrieve the current minimum log level.\n   *\n   * @since 3.13.0\n   * @category Logging\n   */\n  (level: LogLevel.LogLevel | LogLevel.Literal): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R>\n  /**\n   * Conditionally executes an effect based on the specified log level and currently enabled log level.\n   *\n   * **Details**\n   *\n   * This function runs the provided effect only if the specified log level is\n   * enabled. If the log level is enabled, the effect is executed and its result\n   * is wrapped in `Some`. If the log level is not enabled, the effect is not\n   * executed and `None` is returned.\n   *\n   * This function is useful for conditionally executing logging-related effects\n   * or other operations that depend on the current log level configuration.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Logger, LogLevel } from \"effect\"\n   *\n   * const program = Effect.gen(function* () {\n   *   yield* Effect.whenLogLevel(Effect.logTrace(\"message1\"), LogLevel.Trace); // returns `None`\n   *   yield* Effect.whenLogLevel(Effect.logDebug(\"message2\"), LogLevel.Debug); // returns `Some`\n   * }).pipe(Logger.withMinimumLogLevel(LogLevel.Debug));\n   *\n   * Effect.runFork(program)\n   * // timestamp=... level=DEBUG fiber=#0 message=message2\n   * ```\n   *\n   * @see {@link FiberRef.currentMinimumLogLevel} to retrieve the current minimum log level.\n   *\n   * @since 3.13.0\n   * @category Logging\n   */\n  <A, E, R>(self: Effect<A, E, R>, level: LogLevel.LogLevel | LogLevel.Literal): Effect<Option.Option<A>, E, R>\n} = fiberRuntime.whenLogLevel\n\n/**\n * Converts an effect's failure into a fiber termination, removing the error\n * from the effect's type.\n *\n * **Details**\n *\n * The `orDie` function is used when you encounter errors that you do not want\n * to handle or recover from. It removes the error type from the effect and\n * ensures that any failure will terminate the fiber. This is useful for\n * propagating failures as defects, signaling that they should not be handled\n * within the effect.\n *\n * **When to Use*\n *\n * Use `orDie` when failures should be treated as unrecoverable defects and no\n * error handling is required.\n *\n * **Example** (Propagating an Error as a Defect)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const divide = (a: number, b: number) =>\n *   b === 0\n *     ? Effect.fail(new Error(\"Cannot divide by zero\"))\n *     : Effect.succeed(a / b)\n *\n * //      ┌─── Effect<number, never, never>\n * //      ▼\n * const program = Effect.orDie(divide(1, 0))\n *\n * Effect.runPromise(program).catch(console.error)\n * // Output:\n * // (FiberFailure) Error: Cannot divide by zero\n * //   ...stack trace...\n * ```\n *\n * @see {@link orDieWith} if you need to customize the error.\n *\n * @since 2.0.0\n * @category Converting Failures to Defects\n */\nexport const orDie: <A, E, R>(self: Effect<A, E, R>) => Effect<A, never, R> = core.orDie\n\n/**\n * Converts an effect's failure into a fiber termination with a custom error.\n *\n * **Details**\n *\n * The `orDieWith` function behaves like {@link orDie}, but it allows you to provide a mapping\n * function to transform the error before terminating the fiber. This is useful for cases where\n * you want to include a more detailed or user-friendly error when the failure is propagated\n * as a defect.\n *\n * **When to Use**\n *\n * Use `orDieWith` when failures should terminate the fiber as defects, and you want to customize\n * the error for clarity or debugging purposes.\n *\n * **Example** (Customizing Defect)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const divide = (a: number, b: number) =>\n *   b === 0\n *     ? Effect.fail(new Error(\"Cannot divide by zero\"))\n *     : Effect.succeed(a / b)\n *\n * //      ┌─── Effect<number, never, never>\n * //      ▼\n * const program = Effect.orDieWith(\n *   divide(1, 0),\n *   (error) => new Error(`defect: ${error.message}`)\n * )\n *\n * Effect.runPromise(program).catch(console.error)\n * // Output:\n * // (FiberFailure) Error: defect: Cannot divide by zero\n * //   ...stack trace...\n * ```\n *\n * @see {@link orDie} if you don't need to customize the error.\n *\n * @since 2.0.0\n * @category Converting Failures to Defects\n */\nexport const orDieWith: {\n  /**\n   * Converts an effect's failure into a fiber termination with a custom error.\n   *\n   * **Details**\n   *\n   * The `orDieWith` function behaves like {@link orDie}, but it allows you to provide a mapping\n   * function to transform the error before terminating the fiber. This is useful for cases where\n   * you want to include a more detailed or user-friendly error when the failure is propagated\n   * as a defect.\n   *\n   * **When to Use**\n   *\n   * Use `orDieWith` when failures should terminate the fiber as defects, and you want to customize\n   * the error for clarity or debugging purposes.\n   *\n   * **Example** (Customizing Defect)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const divide = (a: number, b: number) =>\n   *   b === 0\n   *     ? Effect.fail(new Error(\"Cannot divide by zero\"))\n   *     : Effect.succeed(a / b)\n   *\n   * //      ┌─── Effect<number, never, never>\n   * //      ▼\n   * const program = Effect.orDieWith(\n   *   divide(1, 0),\n   *   (error) => new Error(`defect: ${error.message}`)\n   * )\n   *\n   * Effect.runPromise(program).catch(console.error)\n   * // Output:\n   * // (FiberFailure) Error: defect: Cannot divide by zero\n   * //   ...stack trace...\n   * ```\n   *\n   * @see {@link orDie} if you don't need to customize the error.\n   *\n   * @since 2.0.0\n   * @category Converting Failures to Defects\n   */\n  <E>(f: (error: E) => unknown): <A, R>(self: Effect<A, E, R>) => Effect<A, never, R>\n  /**\n   * Converts an effect's failure into a fiber termination with a custom error.\n   *\n   * **Details**\n   *\n   * The `orDieWith` function behaves like {@link orDie}, but it allows you to provide a mapping\n   * function to transform the error before terminating the fiber. This is useful for cases where\n   * you want to include a more detailed or user-friendly error when the failure is propagated\n   * as a defect.\n   *\n   * **When to Use**\n   *\n   * Use `orDieWith` when failures should terminate the fiber as defects, and you want to customize\n   * the error for clarity or debugging purposes.\n   *\n   * **Example** (Customizing Defect)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const divide = (a: number, b: number) =>\n   *   b === 0\n   *     ? Effect.fail(new Error(\"Cannot divide by zero\"))\n   *     : Effect.succeed(a / b)\n   *\n   * //      ┌─── Effect<number, never, never>\n   * //      ▼\n   * const program = Effect.orDieWith(\n   *   divide(1, 0),\n   *   (error) => new Error(`defect: ${error.message}`)\n   * )\n   *\n   * Effect.runPromise(program).catch(console.error)\n   * // Output:\n   * // (FiberFailure) Error: defect: Cannot divide by zero\n   * //   ...stack trace...\n   * ```\n   *\n   * @see {@link orDie} if you don't need to customize the error.\n   *\n   * @since 2.0.0\n   * @category Converting Failures to Defects\n   */\n  <A, E, R>(self: Effect<A, E, R>, f: (error: E) => unknown): Effect<A, never, R>\n} = core.orDieWith\n\n/**\n * Attempts one effect, and if it fails, falls back to another effect.\n *\n * **Details**\n *\n * This function allows you to try executing an effect, and if it fails\n * (produces an error), a fallback effect is executed instead. The fallback\n * effect is defined as a lazy argument, meaning it will only be evaluated if\n * the first effect fails. This provides a way to recover from errors by\n * specifying an alternative path of execution.\n *\n * The error type of the resulting effect will be that of the fallback effect,\n * as the first effect's error is replaced when the fallback is executed.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const success = Effect.succeed(\"success\")\n * const failure = Effect.fail(\"failure\")\n * const fallback = Effect.succeed(\"fallback\")\n *\n * // Try the success effect first, fallback is not used\n * const program1 = Effect.orElse(success, () => fallback)\n * console.log(Effect.runSync(program1))\n * // Output: \"success\"\n *\n * // Try the failure effect first, fallback is used\n * const program2 = Effect.orElse(failure, () => fallback)\n * console.log(Effect.runSync(program2))\n * // Output: \"fallback\"\n * ```\n *\n * @see {@link catchAll} if you need to access the error in the fallback effect.\n *\n * @since 2.0.0\n * @category Fallback\n */\nexport const orElse: {\n  /**\n   * Attempts one effect, and if it fails, falls back to another effect.\n   *\n   * **Details**\n   *\n   * This function allows you to try executing an effect, and if it fails\n   * (produces an error), a fallback effect is executed instead. The fallback\n   * effect is defined as a lazy argument, meaning it will only be evaluated if\n   * the first effect fails. This provides a way to recover from errors by\n   * specifying an alternative path of execution.\n   *\n   * The error type of the resulting effect will be that of the fallback effect,\n   * as the first effect's error is replaced when the fallback is executed.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const success = Effect.succeed(\"success\")\n   * const failure = Effect.fail(\"failure\")\n   * const fallback = Effect.succeed(\"fallback\")\n   *\n   * // Try the success effect first, fallback is not used\n   * const program1 = Effect.orElse(success, () => fallback)\n   * console.log(Effect.runSync(program1))\n   * // Output: \"success\"\n   *\n   * // Try the failure effect first, fallback is used\n   * const program2 = Effect.orElse(failure, () => fallback)\n   * console.log(Effect.runSync(program2))\n   * // Output: \"fallback\"\n   * ```\n   *\n   * @see {@link catchAll} if you need to access the error in the fallback effect.\n   *\n   * @since 2.0.0\n   * @category Fallback\n   */\n  <A2, E2, R2>(that: LazyArg<Effect<A2, E2, R2>>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R2 | R>\n  /**\n   * Attempts one effect, and if it fails, falls back to another effect.\n   *\n   * **Details**\n   *\n   * This function allows you to try executing an effect, and if it fails\n   * (produces an error), a fallback effect is executed instead. The fallback\n   * effect is defined as a lazy argument, meaning it will only be evaluated if\n   * the first effect fails. This provides a way to recover from errors by\n   * specifying an alternative path of execution.\n   *\n   * The error type of the resulting effect will be that of the fallback effect,\n   * as the first effect's error is replaced when the fallback is executed.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const success = Effect.succeed(\"success\")\n   * const failure = Effect.fail(\"failure\")\n   * const fallback = Effect.succeed(\"fallback\")\n   *\n   * // Try the success effect first, fallback is not used\n   * const program1 = Effect.orElse(success, () => fallback)\n   * console.log(Effect.runSync(program1))\n   * // Output: \"success\"\n   *\n   * // Try the failure effect first, fallback is used\n   * const program2 = Effect.orElse(failure, () => fallback)\n   * console.log(Effect.runSync(program2))\n   * // Output: \"fallback\"\n   * ```\n   *\n   * @see {@link catchAll} if you need to access the error in the fallback effect.\n   *\n   * @since 2.0.0\n   * @category Fallback\n   */\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, that: LazyArg<Effect<A2, E2, R2>>): Effect<A2 | A, E2, R2 | R>\n} = core.orElse\n\n/**\n * Replaces the failure of an effect with a custom failure value.\n *\n * **Details**\n *\n * This function allows you to handle the failure of an effect by replacing it\n * with a predefined failure value. If the effect fails, the new failure value\n * provided by the `evaluate` function will be returned instead of the original\n * failure. If the effect succeeds, the original success value is returned\n * unchanged.\n *\n * **When to Use**\n *\n * This is particularly useful when you want to standardize error handling or\n * provide a consistent failure value for specific operations. It simplifies\n * error management by ensuring that all failures are replaced with a controlled\n * alternative.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const validate = (age: number): Effect.Effect<number, string> => {\n *   if (age < 0) {\n *     return Effect.fail(\"NegativeAgeError\")\n *   } else if (age < 18) {\n *     return Effect.fail(\"IllegalAgeError\")\n *   } else {\n *     return Effect.succeed(age)\n *   }\n * }\n *\n * const program = Effect.orElseFail(validate(-1), () => \"invalid age\")\n *\n * console.log(Effect.runSyncExit(program))\n * // Output:\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: { _id: 'Cause', _tag: 'Fail', failure: 'invalid age' }\n * // }\n * ```\n *\n * @see {@link mapError} if you need to access the error to transform it.\n *\n * @since 2.0.0\n * @category Fallback\n */\nexport const orElseFail: {\n  /**\n   * Replaces the failure of an effect with a custom failure value.\n   *\n   * **Details**\n   *\n   * This function allows you to handle the failure of an effect by replacing it\n   * with a predefined failure value. If the effect fails, the new failure value\n   * provided by the `evaluate` function will be returned instead of the original\n   * failure. If the effect succeeds, the original success value is returned\n   * unchanged.\n   *\n   * **When to Use**\n   *\n   * This is particularly useful when you want to standardize error handling or\n   * provide a consistent failure value for specific operations. It simplifies\n   * error management by ensuring that all failures are replaced with a controlled\n   * alternative.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const validate = (age: number): Effect.Effect<number, string> => {\n   *   if (age < 0) {\n   *     return Effect.fail(\"NegativeAgeError\")\n   *   } else if (age < 18) {\n   *     return Effect.fail(\"IllegalAgeError\")\n   *   } else {\n   *     return Effect.succeed(age)\n   *   }\n   * }\n   *\n   * const program = Effect.orElseFail(validate(-1), () => \"invalid age\")\n   *\n   * console.log(Effect.runSyncExit(program))\n   * // Output:\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: { _id: 'Cause', _tag: 'Fail', failure: 'invalid age' }\n   * // }\n   * ```\n   *\n   * @see {@link mapError} if you need to access the error to transform it.\n   *\n   * @since 2.0.0\n   * @category Fallback\n   */\n  <E2>(evaluate: LazyArg<E2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E2, R>\n  /**\n   * Replaces the failure of an effect with a custom failure value.\n   *\n   * **Details**\n   *\n   * This function allows you to handle the failure of an effect by replacing it\n   * with a predefined failure value. If the effect fails, the new failure value\n   * provided by the `evaluate` function will be returned instead of the original\n   * failure. If the effect succeeds, the original success value is returned\n   * unchanged.\n   *\n   * **When to Use**\n   *\n   * This is particularly useful when you want to standardize error handling or\n   * provide a consistent failure value for specific operations. It simplifies\n   * error management by ensuring that all failures are replaced with a controlled\n   * alternative.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const validate = (age: number): Effect.Effect<number, string> => {\n   *   if (age < 0) {\n   *     return Effect.fail(\"NegativeAgeError\")\n   *   } else if (age < 18) {\n   *     return Effect.fail(\"IllegalAgeError\")\n   *   } else {\n   *     return Effect.succeed(age)\n   *   }\n   * }\n   *\n   * const program = Effect.orElseFail(validate(-1), () => \"invalid age\")\n   *\n   * console.log(Effect.runSyncExit(program))\n   * // Output:\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: { _id: 'Cause', _tag: 'Fail', failure: 'invalid age' }\n   * // }\n   * ```\n   *\n   * @see {@link mapError} if you need to access the error to transform it.\n   *\n   * @since 2.0.0\n   * @category Fallback\n   */\n  <A, E, R, E2>(self: Effect<A, E, R>, evaluate: LazyArg<E2>): Effect<A, E2, R>\n} = effect.orElseFail\n\n/**\n * Ensures the effect always succeeds by replacing failures with a default\n * success value.\n *\n * **Details**\n *\n * This function transforms an effect that may fail into one that cannot fail by\n * replacing any failure with a provided success value. If the original effect\n * fails, the failure is \"swallowed,\" and the specified success value is\n * returned instead. If the original effect succeeds, its value remains\n * unchanged.\n *\n * **When to Use**\n *\n * This is especially useful for providing default values in case of failure,\n * ensuring that an effect always completes successfully. By using this\n * function, you can avoid the need for complex error handling and guarantee a\n * fallback result.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const validate = (age: number): Effect.Effect<number, string> => {\n *   if (age < 0) {\n *     return Effect.fail(\"NegativeAgeError\")\n *   } else if (age < 18) {\n *     return Effect.fail(\"IllegalAgeError\")\n *   } else {\n *     return Effect.succeed(age)\n *   }\n * }\n *\n * const program = Effect.orElseSucceed(validate(-1), () => 18)\n *\n * console.log(Effect.runSyncExit(program))\n * // Output:\n * // { _id: 'Exit', _tag: 'Success', value: 18 }\n * ```\n *\n * @since 2.0.0\n * @category Fallback\n */\nexport const orElseSucceed: {\n  /**\n   * Ensures the effect always succeeds by replacing failures with a default\n   * success value.\n   *\n   * **Details**\n   *\n   * This function transforms an effect that may fail into one that cannot fail by\n   * replacing any failure with a provided success value. If the original effect\n   * fails, the failure is \"swallowed,\" and the specified success value is\n   * returned instead. If the original effect succeeds, its value remains\n   * unchanged.\n   *\n   * **When to Use**\n   *\n   * This is especially useful for providing default values in case of failure,\n   * ensuring that an effect always completes successfully. By using this\n   * function, you can avoid the need for complex error handling and guarantee a\n   * fallback result.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const validate = (age: number): Effect.Effect<number, string> => {\n   *   if (age < 0) {\n   *     return Effect.fail(\"NegativeAgeError\")\n   *   } else if (age < 18) {\n   *     return Effect.fail(\"IllegalAgeError\")\n   *   } else {\n   *     return Effect.succeed(age)\n   *   }\n   * }\n   *\n   * const program = Effect.orElseSucceed(validate(-1), () => 18)\n   *\n   * console.log(Effect.runSyncExit(program))\n   * // Output:\n   * // { _id: 'Exit', _tag: 'Success', value: 18 }\n   * ```\n   *\n   * @since 2.0.0\n   * @category Fallback\n   */\n  <A2>(evaluate: LazyArg<A2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, never, R>\n  /**\n   * Ensures the effect always succeeds by replacing failures with a default\n   * success value.\n   *\n   * **Details**\n   *\n   * This function transforms an effect that may fail into one that cannot fail by\n   * replacing any failure with a provided success value. If the original effect\n   * fails, the failure is \"swallowed,\" and the specified success value is\n   * returned instead. If the original effect succeeds, its value remains\n   * unchanged.\n   *\n   * **When to Use**\n   *\n   * This is especially useful for providing default values in case of failure,\n   * ensuring that an effect always completes successfully. By using this\n   * function, you can avoid the need for complex error handling and guarantee a\n   * fallback result.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const validate = (age: number): Effect.Effect<number, string> => {\n   *   if (age < 0) {\n   *     return Effect.fail(\"NegativeAgeError\")\n   *   } else if (age < 18) {\n   *     return Effect.fail(\"IllegalAgeError\")\n   *   } else {\n   *     return Effect.succeed(age)\n   *   }\n   * }\n   *\n   * const program = Effect.orElseSucceed(validate(-1), () => 18)\n   *\n   * console.log(Effect.runSyncExit(program))\n   * // Output:\n   * // { _id: 'Exit', _tag: 'Success', value: 18 }\n   * ```\n   *\n   * @since 2.0.0\n   * @category Fallback\n   */\n  <A, E, R, A2>(self: Effect<A, E, R>, evaluate: LazyArg<A2>): Effect<A | A2, never, R>\n} = effect.orElseSucceed\n\n/**\n * Runs a sequence of effects and returns the result of the first successful\n * one.\n *\n * **Details**\n *\n * This function allows you to execute a collection of effects in sequence,\n * stopping at the first success. If an effect succeeds, its result is\n * immediately returned, and no further effects in the sequence are executed.\n * However, if all the effects fail, the function will return the error of the\n * last effect.\n *\n * The execution is sequential, meaning that effects are evaluated one at a time\n * in the order they are provided. This ensures predictable behavior and avoids\n * unnecessary computations.\n *\n * If the collection of effects is empty, an `IllegalArgumentException` is\n * thrown, indicating that the operation is invalid without any effects to try.\n *\n * **When to Use**\n *\n * This is particularly useful when you have multiple fallback strategies or\n * alternative sources to obtain a result, such as attempting multiple APIs,\n * retrieving configurations, or accessing resources in a prioritized manner.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * interface Config {\n *   host: string\n *   port: number\n *   apiKey: string\n * }\n *\n * // Create a configuration object with sample values\n * const makeConfig = (name: string): Config => ({\n *   host: `${name}.example.com`,\n *   port: 8080,\n *   apiKey: \"12345-abcde\"\n * })\n *\n * // Simulate retrieving configuration from a remote node\n * const remoteConfig = (name: string): Effect.Effect<Config, Error> =>\n *   Effect.gen(function* () {\n *     // Simulate node3 being the only one with available config\n *     if (name === \"node3\") {\n *       yield* Console.log(`Config for ${name} found`)\n *       return makeConfig(name)\n *     } else {\n *       yield* Console.log(`Unavailable config for ${name}`)\n *       return yield* Effect.fail(new Error(`Config not found for ${name}`))\n *     }\n *   })\n *\n * // Define the master configuration and potential fallback nodes\n * const masterConfig = remoteConfig(\"master\")\n * const nodeConfigs = [\"node1\", \"node2\", \"node3\", \"node4\"].map(remoteConfig)\n *\n * // Attempt to find a working configuration,\n * // starting with the master and then falling back to other nodes\n * const config = Effect.firstSuccessOf([masterConfig, ...nodeConfigs])\n *\n * // Run the effect to retrieve the configuration\n * const result = Effect.runSync(config)\n *\n * console.log(result)\n * // Output:\n * // Unavailable config for master\n * // Unavailable config for node1\n * // Unavailable config for node2\n * // Config for node3 found\n * // { host: 'node3.example.com', port: 8080, apiKey: '12345-abcde' }\n * ```\n *\n * @since 2.0.0\n * @category Fallback\n */\nexport const firstSuccessOf: <Eff extends Effect<any, any, any>>(\n  effects: Iterable<Eff>\n) => Effect<Effect.Success<Eff>, Effect.Error<Eff>, Effect.Context<Eff>> = effect.firstSuccessOf\n\n/**\n * Retrieves the `Random` service from the context.\n *\n * @since 2.0.0\n * @category Random\n */\nexport const random: Effect<Random.Random> = effect.random\n\n/**\n * Retrieves the `Random` service from the context and uses it to run the\n * specified effect.\n *\n * @since 2.0.0\n * @category Random\n */\nexport const randomWith: <A, E, R>(f: (random: Random.Random) => Effect<A, E, R>) => Effect<A, E, R> =\n  defaultServices.randomWith\n\n/**\n * Executes the specified effect with the specified implementation of the\n * `Random` service.\n *\n * @since 2.0.0\n * @category Random\n */\nexport const withRandom: {\n  /**\n   * Executes the specified effect with the specified implementation of the\n   * `Random` service.\n   *\n   * @since 2.0.0\n   * @category Random\n   */\n  <X extends Random.Random>(value: X): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Executes the specified effect with the specified implementation of the\n   * `Random` service.\n   *\n   * @since 2.0.0\n   * @category Random\n   */\n  <X extends Random.Random, A, E, R>(effect: Effect<A, E, R>, value: X): Effect<A, E, R>\n} = defaultServices.withRandom\n\n/**\n * Executes the specified effect with a `Random` service that cycles through\n * a provided array of values.\n *\n * @example\n * ```ts\n * import { Effect, Random } from \"effect\"\n *\n * Effect.gen(function*() {\n *   console.log(yield* Random.next) // 0.2\n *   console.log(yield* Random.next) // 0.5\n *   console.log(yield* Random.next) // 0.8\n * }).pipe(Effect.withRandomFixed([0.2, 0.5, 0.8]))\n * ```\n *\n * @since 3.11.0\n * @category Random\n */\nexport const withRandomFixed: {\n  /**\n   * Executes the specified effect with a `Random` service that cycles through\n   * a provided array of values.\n   *\n   * @example\n   * ```ts\n   * import { Effect, Random } from \"effect\"\n   *\n   * Effect.gen(function*() {\n   *   console.log(yield* Random.next) // 0.2\n   *   console.log(yield* Random.next) // 0.5\n   *   console.log(yield* Random.next) // 0.8\n   * }).pipe(Effect.withRandomFixed([0.2, 0.5, 0.8]))\n   * ```\n   *\n   * @since 3.11.0\n   * @category Random\n   */\n  <T extends RA.NonEmptyArray<any>>(values: T): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Executes the specified effect with a `Random` service that cycles through\n   * a provided array of values.\n   *\n   * @example\n   * ```ts\n   * import { Effect, Random } from \"effect\"\n   *\n   * Effect.gen(function*() {\n   *   console.log(yield* Random.next) // 0.2\n   *   console.log(yield* Random.next) // 0.5\n   *   console.log(yield* Random.next) // 0.8\n   * }).pipe(Effect.withRandomFixed([0.2, 0.5, 0.8]))\n   * ```\n   *\n   * @since 3.11.0\n   * @category Random\n   */\n  <T extends RA.NonEmptyArray<any>, A, E, R>(effect: Effect<A, E, R>, values: T): Effect<A, E, R>\n} = dual(\n  2,\n  <T extends RA.NonEmptyArray<any>, A, E, R>(effect: Effect<A, E, R>, values: T): Effect<A, E, R> =>\n    withRandom(effect, Random.fixed(values))\n)\n\n/**\n * Sets the implementation of the `Random` service to the specified value and\n * restores it to its original value when the scope is closed.\n *\n * @since 2.0.0\n * @category Random\n */\nexport const withRandomScoped: <A extends Random.Random>(value: A) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withRandomScoped\n\n/**\n * Returns an effect that accesses the runtime, which can be used to (unsafely)\n * execute tasks.\n *\n * **When to Use**\n *\n * This is useful for integration with legacy code that must call back into\n * Effect code.\n *\n * @since 2.0.0\n * @category Runtime\n */\nexport const runtime: <R = never>() => Effect<Runtime.Runtime<R>, never, R> = runtime_.runtime\n\n/**\n * Retrieves an effect that succeeds with the current runtime flags, which\n * govern behavior and features of the runtime system.\n *\n * @since 2.0.0\n * @category Runtime\n */\nexport const getRuntimeFlags: Effect<RuntimeFlags.RuntimeFlags> = core.runtimeFlags\n\n/**\n * @since 2.0.0\n * @category Runtime\n */\nexport const patchRuntimeFlags: (patch: RuntimeFlagsPatch.RuntimeFlagsPatch) => Effect<void> = core.updateRuntimeFlags\n\n/**\n * @since 2.0.0\n * @category Runtime\n */\nexport const withRuntimeFlagsPatch: {\n  /**\n   * @since 2.0.0\n   * @category Runtime\n   */\n  (update: RuntimeFlagsPatch.RuntimeFlagsPatch): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category Runtime\n   */\n  <A, E, R>(self: Effect<A, E, R>, update: RuntimeFlagsPatch.RuntimeFlagsPatch): Effect<A, E, R>\n} = core.withRuntimeFlags\n\n/**\n * @since 2.0.0\n * @category Runtime\n */\nexport const withRuntimeFlagsPatchScoped: (\n  update: RuntimeFlagsPatch.RuntimeFlagsPatch\n) => Effect<void, never, Scope.Scope> = fiberRuntime.withRuntimeFlagsScoped\n\n/**\n * Tags each metric in an effect with specific key-value pairs.\n *\n * **Details**\n *\n * This function allows you to tag all metrics in an effect with a set of\n * key-value pairs or a single key-value pair. Tags help you add metadata to\n * metrics, making it easier to filter and categorize them in monitoring\n * systems. The provided tags will apply to all metrics generated within the\n * effect's scope.\n *\n * @since 2.0.0\n * @category Metrics\n */\nexport const tagMetrics: {\n  /**\n   * Tags each metric in an effect with specific key-value pairs.\n   *\n   * **Details**\n   *\n   * This function allows you to tag all metrics in an effect with a set of\n   * key-value pairs or a single key-value pair. Tags help you add metadata to\n   * metrics, making it easier to filter and categorize them in monitoring\n   * systems. The provided tags will apply to all metrics generated within the\n   * effect's scope.\n   *\n   * @since 2.0.0\n   * @category Metrics\n   */\n  (key: string, value: string): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Tags each metric in an effect with specific key-value pairs.\n   *\n   * **Details**\n   *\n   * This function allows you to tag all metrics in an effect with a set of\n   * key-value pairs or a single key-value pair. Tags help you add metadata to\n   * metrics, making it easier to filter and categorize them in monitoring\n   * systems. The provided tags will apply to all metrics generated within the\n   * effect's scope.\n   *\n   * @since 2.0.0\n   * @category Metrics\n   */\n  (values: Record<string, string>): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Tags each metric in an effect with specific key-value pairs.\n   *\n   * **Details**\n   *\n   * This function allows you to tag all metrics in an effect with a set of\n   * key-value pairs or a single key-value pair. Tags help you add metadata to\n   * metrics, making it easier to filter and categorize them in monitoring\n   * systems. The provided tags will apply to all metrics generated within the\n   * effect's scope.\n   *\n   * @since 2.0.0\n   * @category Metrics\n   */\n  <A, E, R>(effect: Effect<A, E, R>, key: string, value: string): Effect<A, E, R>\n  /**\n   * Tags each metric in an effect with specific key-value pairs.\n   *\n   * **Details**\n   *\n   * This function allows you to tag all metrics in an effect with a set of\n   * key-value pairs or a single key-value pair. Tags help you add metadata to\n   * metrics, making it easier to filter and categorize them in monitoring\n   * systems. The provided tags will apply to all metrics generated within the\n   * effect's scope.\n   *\n   * @since 2.0.0\n   * @category Metrics\n   */\n  <A, E, R>(effect: Effect<A, E, R>, values: Record<string, string>): Effect<A, E, R>\n} = effect.tagMetrics\n\n/**\n * Adds labels to metrics within an effect using `MetricLabel` objects.\n *\n * **Details**\n *\n * This function allows you to label metrics using `MetricLabel` objects. Labels\n * help add structured metadata to metrics for categorization and filtering in\n * monitoring systems. The provided labels will apply to all metrics within the\n * effect's execution.\n *\n * @since 2.0.0\n * @category Metrics\n */\nexport const labelMetrics: {\n  /**\n   * Adds labels to metrics within an effect using `MetricLabel` objects.\n   *\n   * **Details**\n   *\n   * This function allows you to label metrics using `MetricLabel` objects. Labels\n   * help add structured metadata to metrics for categorization and filtering in\n   * monitoring systems. The provided labels will apply to all metrics within the\n   * effect's execution.\n   *\n   * @since 2.0.0\n   * @category Metrics\n   */\n  (labels: Iterable<MetricLabel.MetricLabel>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Adds labels to metrics within an effect using `MetricLabel` objects.\n   *\n   * **Details**\n   *\n   * This function allows you to label metrics using `MetricLabel` objects. Labels\n   * help add structured metadata to metrics for categorization and filtering in\n   * monitoring systems. The provided labels will apply to all metrics within the\n   * effect's execution.\n   *\n   * @since 2.0.0\n   * @category Metrics\n   */\n  <A, E, R>(self: Effect<A, E, R>, labels: Iterable<MetricLabel.MetricLabel>): Effect<A, E, R>\n} = effect.labelMetrics\n\n/**\n * Tags metrics within a scope with a specific key-value pair.\n *\n * **Details**\n *\n * This function tags all metrics within a scope with the provided key-value\n * pair. Once the scope is closed, the tag is automatically removed. This is\n * useful for applying temporary context-specific tags to metrics during scoped\n * operations.\n *\n * @since 2.0.0\n * @category Metrics\n */\nexport const tagMetricsScoped: (key: string, value: string) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.tagMetricsScoped\n\n/**\n * Adds labels to metrics within a scope using `MetricLabel` objects.\n *\n * **Details**\n *\n * This function allows you to apply labels to all metrics generated within a\n * specific scope using an array of `MetricLabel` objects. These labels provide\n * additional metadata to metrics, which can be used for categorization,\n * filtering, or monitoring purposes. The labels are scoped and will be removed\n * automatically once the scope is closed, ensuring they are only applied\n * temporarily within the defined context.\n *\n * @since 2.0.0\n * @category Metrics\n */\nexport const labelMetricsScoped: (\n  labels: ReadonlyArray<MetricLabel.MetricLabel>\n) => Effect<void, never, Scope.Scope> = fiberRuntime.labelMetricsScoped\n\n/**\n * Retrieves the metric labels associated with the current scope.\n *\n * @since 2.0.0\n * @category Metrics\n */\nexport const metricLabels: Effect<ReadonlyArray<MetricLabel.MetricLabel>> = core.metricLabels\n\n/**\n * Associates a metric with the current effect, updating it as the effect progresses.\n *\n * @since 2.0.0\n * @category Metrics\n */\nexport const withMetric: {\n  /**\n   * Associates a metric with the current effect, updating it as the effect progresses.\n   *\n   * @since 2.0.0\n   * @category Metrics\n   */\n  <Type, In, Out>(metric: Metric.Metric<Type, In, Out>): <A extends In, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Associates a metric with the current effect, updating it as the effect progresses.\n   *\n   * @since 2.0.0\n   * @category Metrics\n   */\n  <A extends In, E, R, Type, In, Out>(self: Effect<A, E, R>, metric: Metric.Metric<Type, In, Out>): Effect<A, E, R>\n} = effect.withMetric\n\n/**\n * @category Semaphore\n * @since 2.0.0\n */\nexport interface Permit {\n  readonly index: number\n}\n\n/**\n * A semaphore is a synchronization mechanism used to manage access to a shared\n * resource. In Effect, semaphores help control resource access or coordinate\n * tasks within asynchronous, concurrent operations.\n *\n * A semaphore acts as a generalized mutex, allowing a set number of permits to\n * be held and released concurrently. Permits act like tickets, giving tasks or\n * fibers controlled access to a shared resource. When no permits are available,\n * tasks trying to acquire one will wait until a permit is released.\n *\n * @category Semaphore\n * @since 2.0.0\n */\nexport interface Semaphore {\n  /**\n   * Adjusts the number of permits available in the semaphore.\n   */\n  resize(permits: number): Effect<void>\n\n  /**\n   * Runs an effect with the given number of permits and releases the permits\n   * when the effect completes.\n   *\n   * **Details**\n   *\n   * This function acquires the specified number of permits before executing\n   * the provided effect. Once the effect finishes, the permits are released.\n   * If insufficient permits are available, the function will wait until they\n   * are released by other tasks.\n   */\n  withPermits(permits: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n\n  /**\n   * Runs an effect only if the specified number of permits are immediately\n   * available.\n   *\n   * **Details**\n   *\n   * This function attempts to acquire the specified number of permits. If they\n   * are available, it runs the effect and releases the permits after the effect\n   * completes. If permits are not available, the effect does not execute, and\n   * the result is `Option.none`.\n   */\n  withPermitsIfAvailable(permits: number): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R>\n\n  /**\n   * Acquires the specified number of permits and returns the resulting\n   * available permits, suspending the task if they are not yet available.\n   * Concurrent pending `take` calls are processed in a first-in, first-out manner.\n   */\n  take(permits: number): Effect<number>\n\n  /**\n   * Releases the specified number of permits and returns the resulting\n   * available permits.\n   */\n  release(permits: number): Effect<number>\n\n  /**\n   * Releases all permits held by this semaphore and returns the resulting available permits.\n   */\n  releaseAll: Effect<number>\n}\n\n/**\n * Unsafely creates a new Semaphore.\n *\n * @since 2.0.0\n * @category Semaphore\n */\nexport const unsafeMakeSemaphore: (permits: number) => Semaphore = circular.unsafeMakeSemaphore\n\n/**\n * Creates a new semaphore with the specified number of permits.\n *\n * **Details**\n *\n * This function initializes a semaphore that controls concurrent access to a\n * shared resource. The number of permits determines how many tasks can access\n * the resource concurrently.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * // Create a semaphore with 3 permits\n * const mutex = Effect.makeSemaphore(3)\n * ```\n *\n * @since 2.0.0\n * @category Semaphore\n */\nexport const makeSemaphore: (permits: number) => Effect<Semaphore> = circular.makeSemaphore\n\n/**\n * A `Latch` is a synchronization primitive that allows you to control the\n * execution of fibers based on an open or closed state. It acts as a gate,\n * where fibers can wait for the latch to open before proceeding.\n *\n * **Details**\n *\n * A `Latch` can be in one of two states: open or closed. Fibers can:\n * - Wait for the latch to open using `await`.\n * - Proceed only when the latch is open using `whenOpen`.\n * - Open the latch to release all waiting fibers using `open`.\n * - Close the latch to block fibers using `close`.\n *\n * Additionally, fibers can be released without changing the state of the latch\n * using `release`.\n *\n * @category Latch\n * @since 3.8.0\n */\nexport interface Latch extends Effect<void> {\n  /**\n   * Opens the latch, releasing all fibers waiting on it.\n   *\n   * **Details**\n   *\n   * Once the latch is opened, it remains open. Any fibers waiting on `await`\n   * will be released and can continue execution.\n   */\n  readonly open: Effect<void>\n\n  /**\n   * Opens the latch, releasing all fibers waiting on it.\n   *\n   * **Details**\n   *\n   * Once the latch is opened, it remains open. Any fibers waiting on `await`\n   * will be released and can continue execution.\n   */\n  readonly unsafeOpen: () => void\n\n  /**\n   * Releases all fibers waiting on the latch without opening it.\n   *\n   * **Details**\n   *\n   * This function lets waiting fibers proceed without permanently changing the\n   * state of the latch.\n   */\n  readonly release: Effect<void>\n\n  /**\n   * Waits for the latch to be opened.\n   *\n   * **Details**\n   *\n   * If the latch is already open, this effect completes immediately. Otherwise,\n   * it suspends the fiber until the latch is opened.\n   */\n  readonly await: Effect<void>\n\n  /**\n   * Closes the latch, blocking fibers from proceeding.\n   *\n   * **Details**\n   *\n   * This operation puts the latch into a closed state, requiring it to be\n   * reopened before waiting fibers can proceed.\n   */\n  readonly close: Effect<void>\n\n  /**\n   * Unsafely closes the latch, blocking fibers without effect guarantees.\n   *\n   * **Details**\n   *\n   * Use this operation cautiously, as it does not run within an effect context\n   * and bypasses runtime guarantees.\n   */\n  readonly unsafeClose: () => void\n\n  /**\n   * Runs the given effect only when the latch is open.\n   *\n   * **Details**\n   *\n   * This function ensures that the provided effect executes only if the latch\n   * is open. If the latch is closed, the fiber will wait until it opens.\n   */\n  readonly whenOpen: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n\n  readonly [Unify.typeSymbol]?: unknown\n  readonly [Unify.unifySymbol]?: LatchUnify<this>\n  readonly [Unify.ignoreSymbol]?: LatchUnifyIgnore\n}\n\n/**\n * @category Models\n * @since 3.8.0\n */\nexport interface LatchUnify<A extends { [Unify.typeSymbol]?: any }> extends EffectUnify<A> {\n  Latch?: () => Latch\n}\n\n/**\n * @category Models\n * @since 3.8.0\n */\nexport interface LatchUnifyIgnore extends EffectUnifyIgnore {\n  Effect?: true\n}\n\n/**\n * @category Latch\n * @since 3.8.0\n */\nexport const unsafeMakeLatch: (open?: boolean | undefined) => Latch = circular.unsafeMakeLatch\n\n/**\n * Creates a new `Latch`, starting in the specified state.\n *\n * **Details**\n *\n * This function initializes a `Latch` safely, ensuring proper runtime\n * guarantees. By default, the latch starts in the closed state.\n *\n * **Example**\n *\n * ```ts\n * import { Console, Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   // Create a latch, starting in the closed state\n *   const latch = yield* Effect.makeLatch(false)\n *\n *   // Fork a fiber that logs \"open sesame\" when the latch is opened\n *   const fiber = yield* Console.log(\"open sesame\").pipe(\n *     latch.whenOpen,\n *     Effect.fork\n *   )\n *\n *   yield* Effect.sleep(\"1 second\")\n *\n *   // Open the latch\n *   yield* latch.open\n *   yield* fiber.await\n * })\n *\n * Effect.runFork(program)\n * // Output: open sesame (after 1 second)\n * ```\n *\n * @category Latch\n * @since 3.8.0\n */\nexport const makeLatch: (open?: boolean | undefined) => Effect<Latch, never, never> = circular.makeLatch\n\n/**\n * Runs an effect in the background, returning a fiber that can be observed or\n * interrupted.\n *\n * Unless you specifically need a `Promise` or synchronous operation, `runFork`\n * is a good default choice.\n *\n * **Details**\n *\n * This function is the foundational way to execute an effect in the background.\n * It creates a \"fiber,\" a lightweight, cooperative thread of execution that can\n * be observed (to access its result), interrupted, or joined. Fibers are useful\n * for concurrent programming and allow effects to run independently of the main\n * program flow.\n *\n * Once the effect is running in a fiber, you can monitor its progress, cancel\n * it if necessary, or retrieve its result when it completes. If the effect\n * fails, the fiber will propagate the failure, which you can observe and\n * handle.\n *\n * **When to Use**\n *\n * Use this function when you need to run an effect in the background,\n * especially if the effect is long-running or performs periodic tasks. It's\n * suitable for tasks that need to run independently but might still need\n * observation or management, like logging, monitoring, or scheduled tasks.\n *\n * This function is ideal if you don't need the result immediately or if the\n * effect is part of a larger concurrent workflow.\n *\n * **Example** (Running an Effect in the Background)\n *\n * ```ts\n * import { Effect, Console, Schedule, Fiber } from \"effect\"\n *\n * //      ┌─── Effect<number, never, never>\n * //      ▼\n * const program = Effect.repeat(\n *   Console.log(\"running...\"),\n *   Schedule.spaced(\"200 millis\")\n * )\n *\n * //      ┌─── RuntimeFiber<number, never>\n * //      ▼\n * const fiber = Effect.runFork(program)\n *\n * setTimeout(() => {\n *   Effect.runFork(Fiber.interrupt(fiber))\n * }, 500)\n * ```\n *\n * @since 2.0.0\n * @category Running Effects\n */\nexport const runFork: <A, E>(\n  effect: Effect<A, E>,\n  options?: Runtime.RunForkOptions\n) => Fiber.RuntimeFiber<A, E> = runtime_.unsafeForkEffect\n\n/**\n * Executes an effect asynchronously and handles the result using a callback.\n *\n * **Details**\n *\n * This function runs an effect asynchronously and passes the result (`Exit`) to\n * a specified callback. The callback is invoked with the outcome of the effect:\n * - On success, the callback receives the successful result.\n * - On failure, the callback receives the failure information.\n *\n * **When to Use**\n *\n * This function is effectful and should only be invoked at the edges of your\n * program.\n *\n * @since 2.0.0\n * @category Running Effects\n */\nexport const runCallback: <A, E>(\n  effect: Effect<A, E>,\n  options?: Runtime.RunCallbackOptions<A, E> | undefined\n) => Runtime.Cancel<A, E> = runtime_.unsafeRunEffect\n\n/**\n * Executes an effect and returns the result as a `Promise`.\n *\n * **Details**\n *\n * This function runs an effect and converts its result into a `Promise`. If the\n * effect succeeds, the `Promise` will resolve with the successful result. If\n * the effect fails, the `Promise` will reject with an error, which includes the\n * failure details of the effect.\n *\n * The optional `options` parameter allows you to pass an `AbortSignal` for\n * cancellation, enabling more fine-grained control over asynchronous tasks.\n *\n * **When to Use**\n *\n * Use this function when you need to execute an effect and work with its result\n * in a promise-based system, such as when integrating with third-party\n * libraries that expect `Promise` results.\n *\n * **Example** (Running a Successful Effect as a Promise)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * Effect.runPromise(Effect.succeed(1)).then(console.log)\n * // Output: 1\n * ```\n *\n * **Example** (Handling a Failing Effect as a Rejected Promise)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * Effect.runPromise(Effect.fail(\"my error\")).catch(console.error)\n * // Output:\n * // (FiberFailure) Error: my error\n * ```\n *\n * @see {@link runPromiseExit} for a version that returns an `Exit` type instead\n * of rejecting.\n *\n * @since 2.0.0\n * @category Running Effects\n */\nexport const runPromise: <A, E>(\n  effect: Effect<A, E, never>,\n  options?: { readonly signal?: AbortSignal | undefined } | undefined\n) => Promise<A> = runtime_.unsafeRunPromiseEffect\n\n/**\n * Runs an effect and returns a `Promise` that resolves to an `Exit`,\n * representing the outcome.\n *\n * **Details**\n *\n * This function executes an effect and resolves to an `Exit` object. The `Exit`\n * type provides detailed information about the result of the effect:\n * - If the effect succeeds, the `Exit` will be of type `Success` and include\n *   the value produced by the effect.\n * - If the effect fails, the `Exit` will be of type `Failure` and contain a\n *   `Cause` object, detailing the failure.\n *\n * Using this function allows you to examine both successful results and failure\n * cases in a unified way, while still leveraging `Promise` for handling the\n * asynchronous behavior of the effect.\n *\n * **When to Use**\n *\n * Use this function when you need to understand the outcome of an effect,\n * whether it succeeded or failed, and want to work with this result using\n * `Promise` syntax. This is particularly useful when integrating with systems\n * that rely on promises but need more detailed error handling than a simple\n * rejection.\n *\n * **Example** (Handling Results as Exit)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * // Execute a successful effect and get the Exit result as a Promise\n * Effect.runPromiseExit(Effect.succeed(1)).then(console.log)\n * // Output:\n * // {\n * //   _id: \"Exit\",\n * //   _tag: \"Success\",\n * //   value: 1\n * // }\n *\n * // Execute a failing effect and get the Exit result as a Promise\n * Effect.runPromiseExit(Effect.fail(\"my error\")).then(console.log)\n * // Output:\n * // {\n * //   _id: \"Exit\",\n * //   _tag: \"Failure\",\n * //   cause: {\n * //     _id: \"Cause\",\n * //     _tag: \"Fail\",\n * //     failure: \"my error\"\n * //   }\n * // }\n * ```\n *\n * @since 2.0.0\n * @category Running Effects\n */\nexport const runPromiseExit: <A, E>(\n  effect: Effect<A, E, never>,\n  options?: { readonly signal?: AbortSignal } | undefined\n) => Promise<Exit.Exit<A, E>> = runtime_.unsafeRunPromiseExitEffect\n\n/**\n * Executes an effect synchronously, running it immediately and returning the\n * result.\n *\n * **Details**\n *\n * This function evaluates the provided effect synchronously, returning its\n * result directly. It is ideal for effects that do not fail or include\n * asynchronous operations. If the effect does fail or involves async tasks, it\n * will throw an error. Execution stops at the point of failure or asynchronous\n * operation, making it unsuitable for effects that require asynchronous\n * handling.\n *\n * **Important**: Attempting to run effects that involve asynchronous operations\n * or failures will result in exceptions being thrown, so use this function with\n * care for purely synchronous and error-free effects.\n *\n * **When to Use**\n *\n * Use this function when:\n * - You are sure that the effect will not fail or involve asynchronous\n *   operations.\n * - You need a direct, synchronous result from the effect.\n * - You are working within a context where asynchronous effects are not\n *   allowed.\n *\n * Avoid using this function for effects that can fail or require asynchronous\n * handling. For such cases, consider using {@link runPromise} or\n * {@link runSyncExit}.\n *\n * **Example** (Synchronous Logging)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const program = Effect.sync(() => {\n *   console.log(\"Hello, World!\")\n *   return 1\n * })\n *\n * const result = Effect.runSync(program)\n * // Output: Hello, World!\n *\n * console.log(result)\n * // Output: 1\n * ```\n *\n * **Example** (Incorrect Usage with Failing or Async Effects)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * try {\n *   // Attempt to run an effect that fails\n *   Effect.runSync(Effect.fail(\"my error\"))\n * } catch (e) {\n *   console.error(e)\n * }\n * // Output:\n * // (FiberFailure) Error: my error\n *\n * try {\n *   // Attempt to run an effect that involves async work\n *   Effect.runSync(Effect.promise(() => Promise.resolve(1)))\n * } catch (e) {\n *   console.error(e)\n * }\n * // Output:\n * // (FiberFailure) AsyncFiberException: Fiber #0 cannot be resolved synchronously. This is caused by using runSync on an effect that performs async work\n * ```\n *\n * @see {@link runSyncExit} for a version that returns an `Exit` type instead of\n * throwing an error.\n *\n * @since 2.0.0\n * @category Running Effects\n */\nexport const runSync: <A, E>(effect: Effect<A, E>) => A = runtime_.unsafeRunSyncEffect\n\n/**\n * Runs an effect synchronously and returns the result as an `Exit` type.\n *\n * **Details**\n *\n * This function executes the provided effect synchronously and returns an `Exit`\n * type that encapsulates the outcome of the effect:\n * - If the effect succeeds, the result is wrapped in a `Success`.\n * - If the effect fails, it returns a `Failure` containing a `Cause` that explains\n *   the failure.\n *\n * If the effect involves asynchronous operations, this function will return a `Failure`\n * with a `Die` cause, indicating that it cannot resolve the effect synchronously.\n * This makes the function suitable for use only with effects that are synchronous\n * in nature.\n *\n * **When to Use**\n *\n * Use this function when:\n * - You want to handle both success and failure outcomes in a structured way using the `Exit` type.\n * - You are working with effects that are purely synchronous and do not involve asynchronous operations.\n * - You need to debug or inspect failures, including their causes, in a detailed manner.\n *\n * Avoid using this function for effects that involve asynchronous operations, as it will fail with a `Die` cause.\n *\n * **Example** (Handling Results as Exit)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * console.log(Effect.runSyncExit(Effect.succeed(1)))\n * // Output:\n * // {\n * //   _id: \"Exit\",\n * //   _tag: \"Success\",\n * //   value: 1\n * // }\n *\n * console.log(Effect.runSyncExit(Effect.fail(\"my error\")))\n * // Output:\n * // {\n * //   _id: \"Exit\",\n * //   _tag: \"Failure\",\n * //   cause: {\n * //     _id: \"Cause\",\n * //     _tag: \"Fail\",\n * //     failure: \"my error\"\n * //   }\n * // }\n * ```\n *\n * **Example** (Asynchronous Operation Resulting in Die)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * console.log(Effect.runSyncExit(Effect.promise(() => Promise.resolve(1))))\n * // Output:\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: {\n * //     _id: 'Cause',\n * //     _tag: 'Die',\n * //     defect: [Fiber #0 cannot be resolved synchronously. This is caused by using runSync on an effect that performs async work] {\n * //       fiber: [FiberRuntime],\n * //       _tag: 'AsyncFiberException',\n * //       name: 'AsyncFiberException'\n * //     }\n * //   }\n * // }\n * ```\n *\n * @since 2.0.0\n * @category Running Effects\n */\nexport const runSyncExit: <A, E>(effect: Effect<A, E>) => Exit.Exit<A, E> = runtime_.unsafeRunSyncExitEffect\n\n/**\n * Combines multiple effects and accumulates both successes and failures.\n *\n * **Details**\n *\n * This function allows you to combine multiple effects, continuing through all\n * effects even if some of them fail. Unlike other functions that stop execution\n * upon encountering an error, this function collects all errors into a `Cause`.\n * The final result includes all successes and the accumulated failures.\n *\n * By default, effects are executed sequentially, but you can control\n * concurrency and batching behavior using the `options` parameter. This\n * provides flexibility in scenarios where you want to maximize performance or\n * ensure specific ordering.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Console } from \"effect\"\n *\n * const task1 = Console.log(\"task1\").pipe(Effect.as(1))\n * const task2 = Effect.fail(\"Oh uh!\").pipe(Effect.as(2))\n * const task3 = Console.log(\"task2\").pipe(Effect.as(3))\n * const task4 = Effect.fail(\"Oh no!\").pipe(Effect.as(4))\n *\n * const program = task1.pipe(\n *   Effect.validate(task2),\n *   Effect.validate(task3),\n *   Effect.validate(task4)\n * )\n *\n * Effect.runPromiseExit(program).then(console.log)\n * // Output:\n * // task1\n * // task2\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: {\n * //     _id: 'Cause',\n * //     _tag: 'Sequential',\n * //     left: { _id: 'Cause', _tag: 'Fail', failure: 'Oh uh!' },\n * //     right: { _id: 'Cause', _tag: 'Fail', failure: 'Oh no!' }\n * //   }\n * // }\n * ```\n *\n * @see {@link zip} for a version that stops at the first error.\n *\n * @since 2.0.0\n * @category Error Accumulation\n */\nexport const validate: {\n  /**\n   * Combines multiple effects and accumulates both successes and failures.\n   *\n   * **Details**\n   *\n   * This function allows you to combine multiple effects, continuing through all\n   * effects even if some of them fail. Unlike other functions that stop execution\n   * upon encountering an error, this function collects all errors into a `Cause`.\n   * The final result includes all successes and the accumulated failures.\n   *\n   * By default, effects are executed sequentially, but you can control\n   * concurrency and batching behavior using the `options` parameter. This\n   * provides flexibility in scenarios where you want to maximize performance or\n   * ensure specific ordering.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Console.log(\"task1\").pipe(Effect.as(1))\n   * const task2 = Effect.fail(\"Oh uh!\").pipe(Effect.as(2))\n   * const task3 = Console.log(\"task2\").pipe(Effect.as(3))\n   * const task4 = Effect.fail(\"Oh no!\").pipe(Effect.as(4))\n   *\n   * const program = task1.pipe(\n   *   Effect.validate(task2),\n   *   Effect.validate(task3),\n   *   Effect.validate(task4)\n   * )\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // task1\n   * // task2\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: {\n   * //     _id: 'Cause',\n   * //     _tag: 'Sequential',\n   * //     left: { _id: 'Cause', _tag: 'Fail', failure: 'Oh uh!' },\n   * //     right: { _id: 'Cause', _tag: 'Fail', failure: 'Oh no!' }\n   * //   }\n   * // }\n   * ```\n   *\n   * @see {@link zip} for a version that stops at the first error.\n   *\n   * @since 2.0.0\n   * @category Error Accumulation\n   */\n  <B, E1, R1>(\n    that: Effect<B, E1, R1>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[A, B], E1 | E, R1 | R>\n  /**\n   * Combines multiple effects and accumulates both successes and failures.\n   *\n   * **Details**\n   *\n   * This function allows you to combine multiple effects, continuing through all\n   * effects even if some of them fail. Unlike other functions that stop execution\n   * upon encountering an error, this function collects all errors into a `Cause`.\n   * The final result includes all successes and the accumulated failures.\n   *\n   * By default, effects are executed sequentially, but you can control\n   * concurrency and batching behavior using the `options` parameter. This\n   * provides flexibility in scenarios where you want to maximize performance or\n   * ensure specific ordering.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect, Console } from \"effect\"\n   *\n   * const task1 = Console.log(\"task1\").pipe(Effect.as(1))\n   * const task2 = Effect.fail(\"Oh uh!\").pipe(Effect.as(2))\n   * const task3 = Console.log(\"task2\").pipe(Effect.as(3))\n   * const task4 = Effect.fail(\"Oh no!\").pipe(Effect.as(4))\n   *\n   * const program = task1.pipe(\n   *   Effect.validate(task2),\n   *   Effect.validate(task3),\n   *   Effect.validate(task4)\n   * )\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   * // Output:\n   * // task1\n   * // task2\n   * // {\n   * //   _id: 'Exit',\n   * //   _tag: 'Failure',\n   * //   cause: {\n   * //     _id: 'Cause',\n   * //     _tag: 'Sequential',\n   * //     left: { _id: 'Cause', _tag: 'Fail', failure: 'Oh uh!' },\n   * //     right: { _id: 'Cause', _tag: 'Fail', failure: 'Oh no!' }\n   * //   }\n   * // }\n   * ```\n   *\n   * @see {@link zip} for a version that stops at the first error.\n   *\n   * @since 2.0.0\n   * @category Error Accumulation\n   */\n  <A, E, R, B, E1, R1>(\n    self: Effect<A, E, R>,\n    that: Effect<B, E1, R1>,\n    options?:\n      | {\n        readonly concurrent?: boolean | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<[A, B], E | E1, R | R1>\n} = fiberRuntime.validate\n\n/**\n * Sequentially combines two effects using a specified combiner function while\n * accumulating errors.\n *\n * **Details**\n *\n * This function combines two effects, `self` and `that`, into a single effect\n * by applying the provided combiner function to their results. If both effects\n * succeed, the combiner function is applied to their results to produce the\n * final value. If either effect fails, the failures are accumulated into a\n * combined `Cause`.\n *\n * By default, effects are executed sequentially. However, the execution mode\n * can be controlled using the `options` parameter to enable concurrency,\n * batching, or customized finalizer behavior.\n *\n * @since 2.0.0\n * @category Error Accumulation\n */\nexport const validateWith: {\n  /**\n   * Sequentially combines two effects using a specified combiner function while\n   * accumulating errors.\n   *\n   * **Details**\n   *\n   * This function combines two effects, `self` and `that`, into a single effect\n   * by applying the provided combiner function to their results. If both effects\n   * succeed, the combiner function is applied to their results to produce the\n   * final value. If either effect fails, the failures are accumulated into a\n   * combined `Cause`.\n   *\n   * By default, effects are executed sequentially. However, the execution mode\n   * can be controlled using the `options` parameter to enable concurrency,\n   * batching, or customized finalizer behavior.\n   *\n   * @since 2.0.0\n   * @category Error Accumulation\n   */\n  <B, E1, R1, A, C>(\n    that: Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?:\n      | {\n        readonly concurrent?: boolean | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): <E, R>(self: Effect<A, E, R>) => Effect<C, E1 | E, R1 | R>\n  /**\n   * Sequentially combines two effects using a specified combiner function while\n   * accumulating errors.\n   *\n   * **Details**\n   *\n   * This function combines two effects, `self` and `that`, into a single effect\n   * by applying the provided combiner function to their results. If both effects\n   * succeed, the combiner function is applied to their results to produce the\n   * final value. If either effect fails, the failures are accumulated into a\n   * combined `Cause`.\n   *\n   * By default, effects are executed sequentially. However, the execution mode\n   * can be controlled using the `options` parameter to enable concurrency,\n   * batching, or customized finalizer behavior.\n   *\n   * @since 2.0.0\n   * @category Error Accumulation\n   */\n  <A, E, R, B, E1, R1, C>(\n    self: Effect<A, E, R>,\n    that: Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?:\n      | {\n        readonly concurrent?: boolean | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<C, E | E1, R | R1>\n} = fiberRuntime.validateWith\n\n/**\n * Combines two effects into a single effect, producing a tuple of their\n * results.\n *\n * **Details**\n *\n * This function combines two effects, `self` and `that`, into one. It executes\n * the first effect (`self`) and then the second effect (`that`), collecting\n * their results into a tuple. Both effects must succeed for the resulting\n * effect to succeed. If either effect fails, the entire operation fails.\n *\n * By default, the effects are executed sequentially. If the `concurrent` option\n * is set to `true`, the effects will run concurrently, potentially improving\n * performance for independent operations.\n *\n * **Example** (Combining Two Effects Sequentially)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const task1 = Effect.succeed(1).pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Effect.log(\"task1 done\"))\n * )\n * const task2 = Effect.succeed(\"hello\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Effect.log(\"task2 done\"))\n * )\n *\n * // Combine the two effects together\n * //\n * //      ┌─── Effect<[number, string], never, never>\n * //      ▼\n * const program = Effect.zip(task1, task2)\n *\n * Effect.runPromise(program).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n * // [ 1, 'hello' ]\n * ```\n *\n * **Example** (Combining Two Effects Concurrently)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const task1 = Effect.succeed(1).pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Effect.log(\"task1 done\"))\n * )\n * const task2 = Effect.succeed(\"hello\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Effect.log(\"task2 done\"))\n * )\n *\n * // Run both effects concurrently using the concurrent option\n * const program = Effect.zip(task1, task2, { concurrent: true })\n *\n * Effect.runPromise(program).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n * // [ 1, 'hello' ]\n * ```\n *\n * @see {@link zipWith} for a version that combines the results with a custom\n * function.\n * @see {@link validate} for a version that accumulates errors.\n *\n * @since 2.0.0\n * @category Zipping\n */\nexport const zip: {\n  /**\n   * Combines two effects into a single effect, producing a tuple of their\n   * results.\n   *\n   * **Details**\n   *\n   * This function combines two effects, `self` and `that`, into one. It executes\n   * the first effect (`self`) and then the second effect (`that`), collecting\n   * their results into a tuple. Both effects must succeed for the resulting\n   * effect to succeed. If either effect fails, the entire operation fails.\n   *\n   * By default, the effects are executed sequentially. If the `concurrent` option\n   * is set to `true`, the effects will run concurrently, potentially improving\n   * performance for independent operations.\n   *\n   * **Example** (Combining Two Effects Sequentially)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * // Combine the two effects together\n   * //\n   * //      ┌─── Effect<[number, string], never, never>\n   * //      ▼\n   * const program = Effect.zip(task1, task2)\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n   * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n   * // [ 1, 'hello' ]\n   * ```\n   *\n   * **Example** (Combining Two Effects Concurrently)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * // Run both effects concurrently using the concurrent option\n   * const program = Effect.zip(task1, task2, { concurrent: true })\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n   * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n   * // [ 1, 'hello' ]\n   * ```\n   *\n   * @see {@link zipWith} for a version that combines the results with a custom\n   * function.\n   * @see {@link validate} for a version that accumulates errors.\n   *\n   * @since 2.0.0\n   * @category Zipping\n   */\n  <A2, E2, R2>(\n    that: Effect<A2, E2, R2>,\n    options?:\n      | {\n        readonly concurrent?: boolean | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[A, A2], E2 | E, R2 | R>\n  /**\n   * Combines two effects into a single effect, producing a tuple of their\n   * results.\n   *\n   * **Details**\n   *\n   * This function combines two effects, `self` and `that`, into one. It executes\n   * the first effect (`self`) and then the second effect (`that`), collecting\n   * their results into a tuple. Both effects must succeed for the resulting\n   * effect to succeed. If either effect fails, the entire operation fails.\n   *\n   * By default, the effects are executed sequentially. If the `concurrent` option\n   * is set to `true`, the effects will run concurrently, potentially improving\n   * performance for independent operations.\n   *\n   * **Example** (Combining Two Effects Sequentially)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * // Combine the two effects together\n   * //\n   * //      ┌─── Effect<[number, string], never, never>\n   * //      ▼\n   * const program = Effect.zip(task1, task2)\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n   * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n   * // [ 1, 'hello' ]\n   * ```\n   *\n   * **Example** (Combining Two Effects Concurrently)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * // Run both effects concurrently using the concurrent option\n   * const program = Effect.zip(task1, task2, { concurrent: true })\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n   * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n   * // [ 1, 'hello' ]\n   * ```\n   *\n   * @see {@link zipWith} for a version that combines the results with a custom\n   * function.\n   * @see {@link validate} for a version that accumulates errors.\n   *\n   * @since 2.0.0\n   * @category Zipping\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    options?:\n      | {\n        readonly concurrent?: boolean | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<[A, A2], E | E2, R | R2>\n} = fiberRuntime.zipOptions\n\n/**\n * Executes two effects sequentially, returning the result of the first effect\n * and ignoring the result of the second.\n *\n * **Details**\n *\n * This function allows you to run two effects in sequence, where the result of\n * the first effect is preserved, and the result of the second effect is\n * discarded. By default, the two effects are executed sequentially. If you need\n * them to run concurrently, you can pass the `{ concurrent: true }` option.\n *\n * The second effect will always be executed, even though its result is ignored.\n * This makes it useful for cases where you want to execute an effect for its\n * side effects while keeping the result of another effect.\n *\n * **When to Use**\n *\n * Use this function when you are only interested in the result of the first\n * effect but still need to run the second effect for its side effects, such as\n * logging or performing a cleanup action.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const task1 = Effect.succeed(1).pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Effect.log(\"task1 done\"))\n * )\n * const task2 = Effect.succeed(\"hello\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Effect.log(\"task2 done\"))\n * )\n *\n * const program = Effect.zipLeft(task1, task2)\n *\n * Effect.runPromise(program).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n * // 1\n * ```\n *\n * @see {@link zipRight} for a version that returns the result of the second\n * effect.\n *\n * @since 2.0.0\n * @category Zipping\n */\nexport const zipLeft: {\n  /**\n   * Executes two effects sequentially, returning the result of the first effect\n   * and ignoring the result of the second.\n   *\n   * **Details**\n   *\n   * This function allows you to run two effects in sequence, where the result of\n   * the first effect is preserved, and the result of the second effect is\n   * discarded. By default, the two effects are executed sequentially. If you need\n   * them to run concurrently, you can pass the `{ concurrent: true }` option.\n   *\n   * The second effect will always be executed, even though its result is ignored.\n   * This makes it useful for cases where you want to execute an effect for its\n   * side effects while keeping the result of another effect.\n   *\n   * **When to Use**\n   *\n   * Use this function when you are only interested in the result of the first\n   * effect but still need to run the second effect for its side effects, such as\n   * logging or performing a cleanup action.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * const program = Effect.zipLeft(task1, task2)\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n   * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n   * // 1\n   * ```\n   *\n   * @see {@link zipRight} for a version that returns the result of the second\n   * effect.\n   *\n   * @since 2.0.0\n   * @category Zipping\n   */\n  <A2, E2, R2>(\n    that: Effect<A2, E2, R2>,\n    options?:\n      | {\n        readonly concurrent?: boolean | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E2 | E, R2 | R>\n  /**\n   * Executes two effects sequentially, returning the result of the first effect\n   * and ignoring the result of the second.\n   *\n   * **Details**\n   *\n   * This function allows you to run two effects in sequence, where the result of\n   * the first effect is preserved, and the result of the second effect is\n   * discarded. By default, the two effects are executed sequentially. If you need\n   * them to run concurrently, you can pass the `{ concurrent: true }` option.\n   *\n   * The second effect will always be executed, even though its result is ignored.\n   * This makes it useful for cases where you want to execute an effect for its\n   * side effects while keeping the result of another effect.\n   *\n   * **When to Use**\n   *\n   * Use this function when you are only interested in the result of the first\n   * effect but still need to run the second effect for its side effects, such as\n   * logging or performing a cleanup action.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * const program = Effect.zipLeft(task1, task2)\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n   * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n   * // 1\n   * ```\n   *\n   * @see {@link zipRight} for a version that returns the result of the second\n   * effect.\n   *\n   * @since 2.0.0\n   * @category Zipping\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    options?:\n      | {\n        readonly concurrent?: boolean | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<A, E | E2, R | R2>\n} = fiberRuntime.zipLeftOptions\n\n/**\n * Executes two effects sequentially, returning the result of the second effect\n * while ignoring the result of the first.\n *\n * **Details**\n *\n * This function allows you to run two effects in sequence, keeping the result\n * of the second effect and discarding the result of the first. By default, the\n * two effects are executed sequentially. If you need them to run concurrently,\n * you can pass the `{ concurrent: true }` option.\n *\n * The first effect will always be executed, even though its result is ignored.\n * This makes it useful for scenarios where the first effect is needed for its\n * side effects, but only the result of the second effect is important.\n *\n * **When to Use**\n *\n * Use this function when you are only interested in the result of the second\n * effect but still need to run the first effect for its side effects, such as\n * initialization or setup tasks.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const task1 = Effect.succeed(1).pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Effect.log(\"task1 done\"))\n * )\n * const task2 = Effect.succeed(\"hello\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Effect.log(\"task2 done\"))\n * )\n *\n * const program = Effect.zipRight(task1, task2)\n *\n * Effect.runPromise(program).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n * // hello\n * ```\n *\n * @see {@link zipLeft} for a version that returns the result of the first\n * effect.\n *\n * @since 2.0.0\n * @category Zipping\n */\nexport const zipRight: {\n  /**\n   * Executes two effects sequentially, returning the result of the second effect\n   * while ignoring the result of the first.\n   *\n   * **Details**\n   *\n   * This function allows you to run two effects in sequence, keeping the result\n   * of the second effect and discarding the result of the first. By default, the\n   * two effects are executed sequentially. If you need them to run concurrently,\n   * you can pass the `{ concurrent: true }` option.\n   *\n   * The first effect will always be executed, even though its result is ignored.\n   * This makes it useful for scenarios where the first effect is needed for its\n   * side effects, but only the result of the second effect is important.\n   *\n   * **When to Use**\n   *\n   * Use this function when you are only interested in the result of the second\n   * effect but still need to run the first effect for its side effects, such as\n   * initialization or setup tasks.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * const program = Effect.zipRight(task1, task2)\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n   * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n   * // hello\n   * ```\n   *\n   * @see {@link zipLeft} for a version that returns the result of the first\n   * effect.\n   *\n   * @since 2.0.0\n   * @category Zipping\n   */\n  <A2, E2, R2>(\n    that: Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A2, E2 | E, R2 | R>\n  /**\n   * Executes two effects sequentially, returning the result of the second effect\n   * while ignoring the result of the first.\n   *\n   * **Details**\n   *\n   * This function allows you to run two effects in sequence, keeping the result\n   * of the second effect and discarding the result of the first. By default, the\n   * two effects are executed sequentially. If you need them to run concurrently,\n   * you can pass the `{ concurrent: true }` option.\n   *\n   * The first effect will always be executed, even though its result is ignored.\n   * This makes it useful for scenarios where the first effect is needed for its\n   * side effects, but only the result of the second effect is important.\n   *\n   * **When to Use**\n   *\n   * Use this function when you are only interested in the result of the second\n   * effect but still need to run the first effect for its side effects, such as\n   * initialization or setup tasks.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * const program = Effect.zipRight(task1, task2)\n   *\n   * Effect.runPromise(program).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n   * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n   * // hello\n   * ```\n   *\n   * @see {@link zipLeft} for a version that returns the result of the first\n   * effect.\n   *\n   * @since 2.0.0\n   * @category Zipping\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect<A2, E2 | E, R2 | R>\n} = fiberRuntime.zipRightOptions\n\n/**\n * Combines two effects sequentially and applies a function to their results to\n * produce a single value.\n *\n * **Details**\n *\n * This function runs two effects in sequence (or concurrently, if the `{\n * concurrent: true }` option is provided) and combines their results using a\n * provided function. Unlike {@link zip}, which returns a tuple of the results,\n * this function processes the results with a custom function to produce a\n * single output.\n *\n * **Example** (Combining Effects with a Custom Function)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const task1 = Effect.succeed(1).pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Effect.log(\"task1 done\"))\n * )\n * const task2 = Effect.succeed(\"hello\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Effect.log(\"task2 done\"))\n * )\n *\n * const task3 = Effect.zipWith(\n *   task1,\n *   task2,\n *   // Combines results into a single value\n *   (number, string) => number + string.length\n * )\n *\n * Effect.runPromise(task3).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#3 message=\"task1 done\"\n * // timestamp=... level=INFO fiber=#2 message=\"task2 done\"\n * // 6\n * ```\n *\n * @since 2.0.0\n * @category Zipping\n */\nexport const zipWith: {\n  /**\n   * Combines two effects sequentially and applies a function to their results to\n   * produce a single value.\n   *\n   * **Details**\n   *\n   * This function runs two effects in sequence (or concurrently, if the `{\n   * concurrent: true }` option is provided) and combines their results using a\n   * provided function. Unlike {@link zip}, which returns a tuple of the results,\n   * this function processes the results with a custom function to produce a\n   * single output.\n   *\n   * **Example** (Combining Effects with a Custom Function)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * const task3 = Effect.zipWith(\n   *   task1,\n   *   task2,\n   *   // Combines results into a single value\n   *   (number, string) => number + string.length\n   * )\n   *\n   * Effect.runPromise(task3).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#3 message=\"task1 done\"\n   * // timestamp=... level=INFO fiber=#2 message=\"task2 done\"\n   * // 6\n   * ```\n   *\n   * @since 2.0.0\n   * @category Zipping\n   */\n  <A2, E2, R2, A, B>(\n    that: Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E2 | E, R2 | R>\n  /**\n   * Combines two effects sequentially and applies a function to their results to\n   * produce a single value.\n   *\n   * **Details**\n   *\n   * This function runs two effects in sequence (or concurrently, if the `{\n   * concurrent: true }` option is provided) and combines their results using a\n   * provided function. Unlike {@link zip}, which returns a tuple of the results,\n   * this function processes the results with a custom function to produce a\n   * single output.\n   *\n   * **Example** (Combining Effects with a Custom Function)\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * const task3 = Effect.zipWith(\n   *   task1,\n   *   task2,\n   *   // Combines results into a single value\n   *   (number, string) => number + string.length\n   * )\n   *\n   * Effect.runPromise(task3).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#3 message=\"task1 done\"\n   * // timestamp=... level=INFO fiber=#2 message=\"task2 done\"\n   * // 6\n   * ```\n   *\n   * @since 2.0.0\n   * @category Zipping\n   */\n  <A, E, R, A2, E2, R2, B>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect<B, E2 | E, R2 | R>\n} = fiberRuntime.zipWithOptions\n\n/**\n * Applies the function produced by one effect to the value produced by another effect.\n *\n * **Details**\n *\n * This function combines two effects:\n * - The first effect produces a function of type `(a: A) => B`.\n * - The second effect produces a value of type `A`.\n *\n * Once both effects complete successfully, the function is applied to the value, resulting in an effect that produces a value of type `B`.\n *\n * @since 2.0.0\n */\nexport const ap: {\n  /**\n   * Applies the function produced by one effect to the value produced by another effect.\n   *\n   * **Details**\n   *\n   * This function combines two effects:\n   * - The first effect produces a function of type `(a: A) => B`.\n   * - The second effect produces a value of type `A`.\n   *\n   * Once both effects complete successfully, the function is applied to the value, resulting in an effect that produces a value of type `B`.\n   *\n   * @since 2.0.0\n   */\n  <A, E2, R2>(that: Effect<A, E2, R2>): <B, R, E>(self: Effect<(a: A) => B, E, R>) => Effect<B, E | E2, R | R2>\n  /**\n   * Applies the function produced by one effect to the value produced by another effect.\n   *\n   * **Details**\n   *\n   * This function combines two effects:\n   * - The first effect produces a function of type `(a: A) => B`.\n   * - The second effect produces a value of type `A`.\n   *\n   * Once both effects complete successfully, the function is applied to the value, resulting in an effect that produces a value of type `B`.\n   *\n   * @since 2.0.0\n   */\n  <A, B, E, R, E2, R2>(self: Effect<(a: A) => B, E, R>, that: Effect<A, E2, R2>): Effect<B, E | E2, R | R2>\n} = dual(\n  2,\n  <A, B, E, R, E2, R2>(self: Effect<(a: A) => B, E, R>, that: Effect<A, E2, R2>): Effect<B, E | E2, R | R2> =>\n    zipWith(self, that, (f, a) => f(a))\n)\n\n/**\n * @category Requests & Batching\n * @since 2.0.0\n */\nexport const blocked: <A, E>(blockedRequests: RequestBlock, _continue: Effect<A, E>) => Blocked<A, E> = core.blocked\n\n/**\n * @category Requests & Batching\n * @since 2.0.0\n */\nexport const runRequestBlock: (blockedRequests: RequestBlock) => Effect<void> = core.runRequestBlock\n\n/**\n * @category Requests & Batching\n * @since 2.0.0\n */\nexport const step: <A, E, R>(self: Effect<A, E, R>) => Effect<Exit.Exit<A, E> | Blocked<A, E>, never, R> = core.step\n\n/**\n * @since 2.0.0\n * @category Requests & Batching\n */\nexport const request: {\n  /**\n   * @since 2.0.0\n   * @category Requests & Batching\n   */\n  <A extends Request.Request<any, any>, Ds extends RequestResolver<A> | Effect<RequestResolver<A>, any, any>>(dataSource: Ds): (\n    self: A\n  ) => Effect<\n    Request.Request.Success<A>,\n    Request.Request.Error<A>,\n    [Ds] extends [Effect<any, any, any>] ? Effect.Context<Ds> : never\n  >\n  /**\n   * @since 2.0.0\n   * @category Requests & Batching\n   */\n  <\n    Ds extends RequestResolver<A> | Effect<RequestResolver<A>, any, any>,\n    A extends Request.Request<any, any>\n  >(self: A, dataSource: Ds): Effect<\n    Request.Request.Success<A>,\n    Request.Request.Error<A>,\n    [Ds] extends [Effect<any, any, any>] ? Effect.Context<Ds> : never\n  >\n} = dual((args) => Request.isRequest(args[0]), query.fromRequest)\n\n/**\n * @since 2.0.0\n * @category Requests & Batching\n */\nexport const cacheRequestResult: <A extends Request.Request<any, any>>(\n  request: A,\n  result: Request.Request.Result<A>\n) => Effect<void> = query.cacheRequest\n\n/**\n * @since 2.0.0\n * @category Requests & Batching\n */\nexport const withRequestBatching: {\n  /**\n   * @since 2.0.0\n   * @category Requests & Batching\n   */\n  (requestBatching: boolean): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category Requests & Batching\n   */\n  <A, E, R>(self: Effect<A, E, R>, requestBatching: boolean): Effect<A, E, R>\n} = core.withRequestBatching\n\n/**\n * @since 2.0.0\n * @category Requests & Batching\n */\nexport const withRequestCaching: {\n  /**\n   * @since 2.0.0\n   * @category Requests & Batching\n   */\n  (strategy: boolean): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category Requests & Batching\n   */\n  <A, E, R>(self: Effect<A, E, R>, strategy: boolean): Effect<A, E, R>\n} = query.withRequestCaching\n\n/**\n * @since 2.0.0\n * @category Requests & Batching\n */\nexport const withRequestCache: {\n  /**\n   * @since 2.0.0\n   * @category Requests & Batching\n   */\n  (cache: Request.Cache): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category Requests & Batching\n   */\n  <A, E, R>(self: Effect<A, E, R>, cache: Request.Cache): Effect<A, E, R>\n} = query.withRequestCache\n\n/**\n * @since 2.0.0\n * @category Tracing\n */\nexport const tracer: Effect<Tracer.Tracer> = effect.tracer\n\n/**\n * @since 2.0.0\n * @category Tracing\n */\nexport const tracerWith: <A, E, R>(f: (tracer: Tracer.Tracer) => Effect<A, E, R>) => Effect<A, E, R> =\n  defaultServices.tracerWith\n\n/**\n * @since 2.0.0\n * @category Tracing\n */\nexport const withTracer: {\n  /**\n   * @since 2.0.0\n   * @category Tracing\n   */\n  (value: Tracer.Tracer): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category Tracing\n   */\n  <A, E, R>(effect: Effect<A, E, R>, value: Tracer.Tracer): Effect<A, E, R>\n} = defaultServices.withTracer\n\n/**\n * @since 2.0.0\n * @category Tracing\n */\nexport const withTracerScoped: (value: Tracer.Tracer) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withTracerScoped\n\n/**\n * Disable the tracer for the given Effect.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * Effect.succeed(42).pipe(\n *   Effect.withSpan(\"my-span\"),\n *   // the span will not be registered with the tracer\n *   Effect.withTracerEnabled(false)\n * )\n * ```\n *\n * @since 2.0.0\n * @category Tracing\n */\nexport const withTracerEnabled: {\n  /**\n   * Disable the tracer for the given Effect.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * Effect.succeed(42).pipe(\n   *   Effect.withSpan(\"my-span\"),\n   *   // the span will not be registered with the tracer\n   *   Effect.withTracerEnabled(false)\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  (enabled: boolean): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Disable the tracer for the given Effect.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Effect } from \"effect\"\n   *\n   * Effect.succeed(42).pipe(\n   *   Effect.withSpan(\"my-span\"),\n   *   // the span will not be registered with the tracer\n   *   Effect.withTracerEnabled(false)\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  <A, E, R>(effect: Effect<A, E, R>, enabled: boolean): Effect<A, E, R>\n} = core.withTracerEnabled\n\n/**\n * @since 2.0.0\n * @category Tracing\n */\nexport const withTracerTiming: {\n  /**\n   * @since 2.0.0\n   * @category Tracing\n   */\n  (enabled: boolean): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category Tracing\n   */\n  <A, E, R>(effect: Effect<A, E, R>, enabled: boolean): Effect<A, E, R>\n} = core.withTracerTiming\n\n/**\n * Adds annotations to each span in the effect for enhanced traceability.\n *\n * **Details**\n *\n * This function lets you attach key-value annotations to all spans generated\n * during the execution of an effect. Annotations provide additional context,\n * such as metadata or labels, which can help you understand and debug\n * asynchronous workflows more effectively.\n *\n * You can either pass a single key-value pair or a record of key-value pairs to\n * annotate the spans. These annotations can then be visualized in tracing tools\n * that support span annotations.\n *\n * @since 2.0.0\n * @category Tracing\n */\nexport const annotateSpans: {\n  /**\n   * Adds annotations to each span in the effect for enhanced traceability.\n   *\n   * **Details**\n   *\n   * This function lets you attach key-value annotations to all spans generated\n   * during the execution of an effect. Annotations provide additional context,\n   * such as metadata or labels, which can help you understand and debug\n   * asynchronous workflows more effectively.\n   *\n   * You can either pass a single key-value pair or a record of key-value pairs to\n   * annotate the spans. These annotations can then be visualized in tracing tools\n   * that support span annotations.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  (key: string, value: unknown): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Adds annotations to each span in the effect for enhanced traceability.\n   *\n   * **Details**\n   *\n   * This function lets you attach key-value annotations to all spans generated\n   * during the execution of an effect. Annotations provide additional context,\n   * such as metadata or labels, which can help you understand and debug\n   * asynchronous workflows more effectively.\n   *\n   * You can either pass a single key-value pair or a record of key-value pairs to\n   * annotate the spans. These annotations can then be visualized in tracing tools\n   * that support span annotations.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  (values: Record<string, unknown>): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Adds annotations to each span in the effect for enhanced traceability.\n   *\n   * **Details**\n   *\n   * This function lets you attach key-value annotations to all spans generated\n   * during the execution of an effect. Annotations provide additional context,\n   * such as metadata or labels, which can help you understand and debug\n   * asynchronous workflows more effectively.\n   *\n   * You can either pass a single key-value pair or a record of key-value pairs to\n   * annotate the spans. These annotations can then be visualized in tracing tools\n   * that support span annotations.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  <A, E, R>(effect: Effect<A, E, R>, key: string, value: unknown): Effect<A, E, R>\n  /**\n   * Adds annotations to each span in the effect for enhanced traceability.\n   *\n   * **Details**\n   *\n   * This function lets you attach key-value annotations to all spans generated\n   * during the execution of an effect. Annotations provide additional context,\n   * such as metadata or labels, which can help you understand and debug\n   * asynchronous workflows more effectively.\n   *\n   * You can either pass a single key-value pair or a record of key-value pairs to\n   * annotate the spans. These annotations can then be visualized in tracing tools\n   * that support span annotations.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  <A, E, R>(effect: Effect<A, E, R>, values: Record<string, unknown>): Effect<A, E, R>\n} = effect.annotateSpans\n\n/**\n * Adds annotations to the currently active span for traceability.\n *\n * **Details**\n *\n * This function adds key-value annotations to the currently active span in the\n * effect's trace. These annotations help provide more context about the\n * operation being executed at a specific point in time. Unlike\n * {@link annotateSpans}, which applies to all spans in an effect, this function\n * focuses solely on the active span.\n *\n * You can either pass a single key-value pair or a record of key-value pairs to\n * annotate the span. These annotations are useful for adding metadata to\n * operations, especially in systems with detailed observability requirements.\n *\n * @since 2.0.0\n * @category Tracing\n */\nexport const annotateCurrentSpan: {\n  /**\n   * Adds annotations to the currently active span for traceability.\n   *\n   * **Details**\n   *\n   * This function adds key-value annotations to the currently active span in the\n   * effect's trace. These annotations help provide more context about the\n   * operation being executed at a specific point in time. Unlike\n   * {@link annotateSpans}, which applies to all spans in an effect, this function\n   * focuses solely on the active span.\n   *\n   * You can either pass a single key-value pair or a record of key-value pairs to\n   * annotate the span. These annotations are useful for adding metadata to\n   * operations, especially in systems with detailed observability requirements.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  (key: string, value: unknown): Effect<void>\n  /**\n   * Adds annotations to the currently active span for traceability.\n   *\n   * **Details**\n   *\n   * This function adds key-value annotations to the currently active span in the\n   * effect's trace. These annotations help provide more context about the\n   * operation being executed at a specific point in time. Unlike\n   * {@link annotateSpans}, which applies to all spans in an effect, this function\n   * focuses solely on the active span.\n   *\n   * You can either pass a single key-value pair or a record of key-value pairs to\n   * annotate the span. These annotations are useful for adding metadata to\n   * operations, especially in systems with detailed observability requirements.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  (values: Record<string, unknown>): Effect<void>\n} = effect.annotateCurrentSpan\n\n/**\n * @since 2.0.0\n * @category Tracing\n */\nexport const currentSpan: Effect<Tracer.Span, Cause.NoSuchElementException> = effect.currentSpan\n\n/**\n * @since 2.0.0\n * @category Tracing\n */\nexport const currentParentSpan: Effect<Tracer.AnySpan, Cause.NoSuchElementException> = effect.currentParentSpan\n\n/**\n * @since 2.0.0\n * @category Tracing\n */\nexport const spanAnnotations: Effect<HashMap.HashMap<string, unknown>> = effect.spanAnnotations\n\n/**\n * @since 2.0.0\n * @category Tracing\n */\nexport const spanLinks: Effect<Chunk.Chunk<Tracer.SpanLink>> = effect.spanLinks\n\n/**\n * For all spans in this effect, add a link with the provided span.\n *\n * @since 2.0.0\n * @category Tracing\n */\nexport const linkSpans: {\n  /**\n   * For all spans in this effect, add a link with the provided span.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  (span: Tracer.AnySpan, attributes?: Record<string, unknown>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * For all spans in this effect, add a link with the provided span.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    span: Tracer.AnySpan,\n    attributes?: Record<string, unknown>\n  ): Effect<A, E, R>\n} = effect.linkSpans\n\n/**\n * Add span links to the current span.\n *\n * @since 3.14.0\n * @category Tracing\n */\nexport const linkSpanCurrent: {\n  /**\n   * Add span links to the current span.\n   *\n   * @since 3.14.0\n   * @category Tracing\n   */\n  (\n    span: Tracer.AnySpan,\n    attributes?: Readonly<Record<string, unknown>> | undefined\n  ): Effect<void>\n  /**\n   * Add span links to the current span.\n   *\n   * @since 3.14.0\n   * @category Tracing\n   */\n  (links: ReadonlyArray<Tracer.SpanLink>): Effect<void>\n} = effect.linkSpanCurrent\n\n/**\n * Create a new span for tracing.\n *\n * @since 2.0.0\n * @category Tracing\n */\nexport const makeSpan: (\n  name: string,\n  options?: Tracer.SpanOptions\n) => Effect<Tracer.Span> = effect.makeSpan\n\n/**\n * Create a new span for tracing, and automatically close it when the Scope\n * finalizes.\n *\n * The span is not added to the current span stack, so no child spans will be\n * created for it.\n *\n * @since 2.0.0\n * @category Tracing\n */\nexport const makeSpanScoped: (\n  name: string,\n  options?: Tracer.SpanOptions | undefined\n) => Effect<Tracer.Span, never, Scope.Scope> = fiberRuntime.makeSpanScoped\n\n/**\n * Create a new span for tracing, and automatically close it when the effect\n * completes.\n *\n * The span is not added to the current span stack, so no child spans will be\n * created for it.\n *\n * @since 2.0.0\n * @category Tracing\n */\nexport const useSpan: {\n  /**\n   * Create a new span for tracing, and automatically close it when the effect\n   * completes.\n   *\n   * The span is not added to the current span stack, so no child spans will be\n   * created for it.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  <A, E, R>(name: string, evaluate: (span: Tracer.Span) => Effect<A, E, R>): Effect<A, E, R>\n  /**\n   * Create a new span for tracing, and automatically close it when the effect\n   * completes.\n   *\n   * The span is not added to the current span stack, so no child spans will be\n   * created for it.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  <A, E, R>(\n    name: string,\n    options: Tracer.SpanOptions,\n    evaluate: (span: Tracer.Span) => Effect<A, E, R>\n  ): Effect<A, E, R>\n} = effect.useSpan\n\n/**\n * Wraps the effect with a new span for tracing.\n *\n * @since 2.0.0\n * @category Tracing\n */\nexport const withSpan: {\n  /**\n   * Wraps the effect with a new span for tracing.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  (name: string, options?: Tracer.SpanOptions | undefined): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n  /**\n   * Wraps the effect with a new span for tracing.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions | undefined\n  ): Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n} = effect.withSpan\n\n/**\n * Wraps a function that returns an effect with a new span for tracing.\n *\n * @since 3.2.0\n * @category Models\n */\nexport interface FunctionWithSpanOptions {\n  readonly name: string\n  readonly attributes?: Record<string, unknown> | undefined\n  readonly links?: ReadonlyArray<Tracer.SpanLink> | undefined\n  readonly parent?: Tracer.AnySpan | undefined\n  readonly root?: boolean | undefined\n  readonly context?: Context.Context<never> | undefined\n  readonly kind?: Tracer.SpanKind | undefined\n}\n\n/**\n * Wraps a function that returns an effect with a new span for tracing.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const getTodo = Effect.functionWithSpan({\n *   body: (id: number) => Effect.succeed(`Got todo ${id}!`),\n *   options: (id) => ({\n *     name: `getTodo-${id}`,\n *     attributes: { id }\n *   })\n * })\n * ```\n *\n * @since 3.2.0\n * @category Tracing\n */\nexport const functionWithSpan: <Args extends Array<any>, Ret extends Effect<any, any, any>>(\n  options: {\n    readonly body: (...args: Args) => Ret\n    readonly options: FunctionWithSpanOptions | ((...args: Args) => FunctionWithSpanOptions)\n    readonly captureStackTrace?: boolean | undefined\n  }\n) => (...args: Args) => Unify.Unify<Ret> = effect.functionWithSpan\n\n/**\n * Wraps the effect with a new span for tracing.\n *\n * The span is ended when the Scope is finalized.\n *\n * @since 2.0.0\n * @category Tracing\n */\nexport const withSpanScoped: {\n  /**\n   * Wraps the effect with a new span for tracing.\n   *\n   * The span is ended when the Scope is finalized.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  (name: string, options?: Tracer.SpanOptions): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, Tracer.ParentSpan> | Scope.Scope>\n  /**\n   * Wraps the effect with a new span for tracing.\n   *\n   * The span is ended when the Scope is finalized.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  <A, E, R>(self: Effect<A, E, R>, name: string, options?: Tracer.SpanOptions): Effect<A, E, Exclude<R, Tracer.ParentSpan> | Scope.Scope>\n} = fiberRuntime.withSpanScoped\n\n/**\n * Adds the provided span to the current span stack.\n *\n * @since 2.0.0\n * @category Tracing\n */\nexport const withParentSpan: {\n  /**\n   * Adds the provided span to the current span stack.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  (span: Tracer.AnySpan): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n  /**\n   * Adds the provided span to the current span stack.\n   *\n   * @since 2.0.0\n   * @category Tracing\n   */\n  <A, E, R>(self: Effect<A, E, R>, span: Tracer.AnySpan): Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n} = effect.withParentSpan\n\n/**\n * Safely handles nullable values by creating an effect that fails for `null` or\n * `undefined`.\n *\n * **Details**\n *\n * This function ensures that an input value is non-null and non-undefined\n * before processing it. If the value is valid, the effect succeeds with the\n * value. If the value is `null` or `undefined`, the effect fails with a\n * `NoSuchElementException`. This is particularly useful for avoiding\n * null-related errors by clearly separating valid values from invalid ones in\n * effectful computations.\n *\n * The failure with `NoSuchElementException` allows you to explicitly handle\n * cases where a value is expected but not provided, leading to safer and more\n * predictable code.\n *\n * **When to Use**\n *\n * Use this function when working with values that may be `null` or `undefined`\n * and you want to ensure that only non-null values are processed. It helps\n * enforce null-safety and makes error handling more explicit.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * //      ┌─── Effect<number, NoSuchElementException, never>\n * //      ▼\n * const maybe1 = Effect.fromNullable(1)\n *\n * Effect.runPromiseExit(maybe1).then(console.log)\n * // Output:\n * // { _id: 'Exit', _tag: 'Success', value: 1 }\n *\n * //      ┌─── Effect<number, NoSuchElementException, never>\n * //      ▼\n * const maybe2 = Effect.fromNullable(null as number | null)\n *\n * Effect.runPromiseExit(maybe2).then(console.log)\n * // Output:\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: {\n * //     _id: 'Cause',\n * //     _tag: 'Fail',\n * //     failure: { _tag: 'NoSuchElementException' }\n * //   }\n * // }\n * ```\n *\n * @since 2.0.0\n * @category Optional Wrapping & Unwrapping\n */\nexport const fromNullable: <A>(value: A) => Effect<NonNullable<A>, Cause.NoSuchElementException> = effect.fromNullable\n\n/**\n * Converts an effect that may fail with a `NoSuchElementException` into an\n * effect that succeeds with an `Option`.\n *\n * **Details**\n *\n * This function transforms an effect that might fail with\n * `Cause.NoSuchElementException` into an effect that succeeds with an `Option`\n * type. If the original effect succeeds, its value is wrapped in `Option.some`.\n * If it fails specifically due to a `NoSuchElementException`, the failure is\n * mapped to `Option.none`. Other types of failures remain unchanged and are\n * passed through as they are.\n *\n * This is useful when working with effects where you want to gracefully handle\n * the absence of a value while preserving other potential failures.\n *\n * **When to Use**\n *\n * Use this function when you need to handle missing values as `Option.none`\n * rather than throwing or propagating errors like `NoSuchElementException`.\n * It’s ideal for scenarios where you want to explicitly represent optionality\n * in a type-safe way while retaining other failure information.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * //      ┌─── Effect<number, NoSuchElementException, never>\n * //      ▼\n * const maybe1 = Effect.fromNullable(1)\n *\n * //      ┌─── Effect<Option<number>, never, never>\n * //      ▼\n * const option1 = Effect.optionFromOptional(maybe1)\n *\n * Effect.runPromise(option1).then(console.log)\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * //      ┌─── Effect<number, NoSuchElementException, never>\n * //      ▼\n * const maybe2 = Effect.fromNullable(null as number | null)\n *\n * //      ┌─── Effect<Option<number>, never, never>\n * //      ▼\n * const option2 = Effect.optionFromOptional(maybe2)\n *\n * Effect.runPromise(option2).then(console.log)\n * // Output: { _tag: 'None' }\n * ```\n *\n * @since 2.0.0\n * @category Optional Wrapping & Unwrapping\n */\nexport const optionFromOptional: <A, E, R>(\n  self: Effect<A, E, R>\n) => Effect<Option.Option<A>, Exclude<E, Cause.NoSuchElementException>, R> = effect.optionFromOptional\n\n/**\n * Converts an `Option` of an `Effect` into an `Effect` of an `Option`.\n *\n * **Details**\n *\n * This function transforms an `Option<Effect<A, E, R>>` into an\n * `Effect<Option<A>, E, R>`. If the `Option` is `None`, the resulting `Effect`\n * will immediately succeed with a `None` value. If the `Option` is `Some`, the\n * inner `Effect` will be executed, and its result wrapped in a `Some`.\n *\n * **Example**\n *\n * ```ts\n * import { Effect, Option } from \"effect\"\n *\n * //      ┌─── Option<Effect<number, never, never>>\n * //      ▼\n * const maybe = Option.some(Effect.succeed(42))\n *\n * //      ┌─── Effect<Option<number>, never, never>\n * //      ▼\n * const result = Effect.transposeOption(maybe)\n *\n * console.log(Effect.runSync(result))\n * // Output: { _id: 'Option', _tag: 'Some', value: 42 }\n * ```\n *\n * @since 3.13.0\n * @category Optional Wrapping & Unwrapping\n */\nexport const transposeOption = <A = never, E = never, R = never>(\n  self: Option.Option<Effect<A, E, R>>\n): Effect<Option.Option<A>, E, R> => {\n  return option_.isNone(self) ? succeedNone : map(self.value, option_.some)\n}\n\n/**\n * Applies an `Effect` on an `Option` and transposes the result.\n *\n * **Details**\n *\n * If the `Option` is `None`, the resulting `Effect` will immediately succeed with a `None` value.\n * If the `Option` is `Some`, the effectful operation will be executed on the inner value, and its result wrapped in a `Some`.\n *\n * @example\n * ```ts\n * import { Effect, Option, pipe } from \"effect\"\n *\n * //          ┌─── Effect<Option<number>, never, never>>\n * //          ▼\n * const noneResult = pipe(\n *   Option.none(),\n *   Effect.transposeMapOption(() => Effect.succeed(42)) // will not be executed\n * )\n * console.log(Effect.runSync(noneResult))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * //          ┌─── Effect<Option<number>, never, never>>\n * //          ▼\n * const someSuccessResult = pipe(\n *   Option.some(42),\n *   Effect.transposeMapOption((value) => Effect.succeed(value * 2))\n * )\n * console.log(Effect.runSync(someSuccessResult))\n * // Output: { _id: 'Option', _tag: 'Some', value: 84 }\n * ```\n *\n * @since 3.14.0\n * @category Optional Wrapping & Unwrapping\n */\nexport const transposeMapOption = dual<\n  /**\n   * Applies an `Effect` on an `Option` and transposes the result.\n   *\n   * **Details**\n   *\n   * If the `Option` is `None`, the resulting `Effect` will immediately succeed with a `None` value.\n   * If the `Option` is `Some`, the effectful operation will be executed on the inner value, and its result wrapped in a `Some`.\n   *\n   * @example\n   * ```ts\n   * import { Effect, Option, pipe } from \"effect\"\n   *\n   * //          ┌─── Effect<Option<number>, never, never>>\n   * //          ▼\n   * const noneResult = pipe(\n   *   Option.none(),\n   *   Effect.transposeMapOption(() => Effect.succeed(42)) // will not be executed\n   * )\n   * console.log(Effect.runSync(noneResult))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * //          ┌─── Effect<Option<number>, never, never>>\n   * //          ▼\n   * const someSuccessResult = pipe(\n   *   Option.some(42),\n   *   Effect.transposeMapOption((value) => Effect.succeed(value * 2))\n   * )\n   * console.log(Effect.runSync(someSuccessResult))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 84 }\n   * ```\n   *\n   * @since 3.14.0\n   * @category Optional Wrapping & Unwrapping\n   */\n  <A, B, E = never, R = never>(f: (self: A) => Effect<B, E, R>) => (self: Option.Option<A>) => Effect<Option.Option<B>, E, R>,\n  /**\n   * Applies an `Effect` on an `Option` and transposes the result.\n   *\n   * **Details**\n   *\n   * If the `Option` is `None`, the resulting `Effect` will immediately succeed with a `None` value.\n   * If the `Option` is `Some`, the effectful operation will be executed on the inner value, and its result wrapped in a `Some`.\n   *\n   * @example\n   * ```ts\n   * import { Effect, Option, pipe } from \"effect\"\n   *\n   * //          ┌─── Effect<Option<number>, never, never>>\n   * //          ▼\n   * const noneResult = pipe(\n   *   Option.none(),\n   *   Effect.transposeMapOption(() => Effect.succeed(42)) // will not be executed\n   * )\n   * console.log(Effect.runSync(noneResult))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * //          ┌─── Effect<Option<number>, never, never>>\n   * //          ▼\n   * const someSuccessResult = pipe(\n   *   Option.some(42),\n   *   Effect.transposeMapOption((value) => Effect.succeed(value * 2))\n   * )\n   * console.log(Effect.runSync(someSuccessResult))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 84 }\n   * ```\n   *\n   * @since 3.14.0\n   * @category Optional Wrapping & Unwrapping\n   */\n  <A, B, E = never, R = never>(self: Option.Option<A>, f: (self: A) => Effect<B, E, R>) => Effect<Option.Option<B>, E, R>\n>(2, (self, f) => option_.isNone(self) ? succeedNone : map(f(self.value), option_.some))\n\n/**\n * @since 2.0.0\n * @category Models\n */\nexport declare namespace Tag {\n  /**\n   * @since 2.0.0\n   * @category Models\n   */\n  export interface ProhibitedType {\n    Service?: `property \"Service\" is forbidden`\n    Identifier?: `property \"Identifier\" is forbidden`\n    _op?: `property \"_op\" is forbidden`\n    of?: `property \"of\" is forbidden`\n    context?: `property \"context\" is forbidden`\n    key?: `property \"key\" is forbidden`\n    stack?: `property \"stack\" is forbidden`\n    name?: `property \"name\" is forbidden`\n    pipe?: `property \"pipe\" is forbidden`\n    use?: `property \"use\" is forbidden`\n  }\n\n  /**\n   * @since 2.0.0\n   * @category Models\n   */\n  export type AllowedType = (Record<PropertyKey, any> & ProhibitedType) | string | number | symbol\n\n  /**\n   * @since 3.9.0\n   * @category Models\n   */\n  export type Proxy<Self, Type> = {\n    [\n      k in keyof Type as Type[k] extends ((...args: infer Args extends ReadonlyArray<any>) => infer Ret) ?\n        ((...args: Readonly<Args>) => Ret) extends Type[k] ? k : never\n        : k\n    ]: Type[k] extends (...args: infer Args extends ReadonlyArray<any>) => Effect<infer A, infer E, infer R> ?\n      (...args: Readonly<Args>) => Effect<A, E, Self | R>\n      : Type[k] extends (...args: infer Args extends ReadonlyArray<any>) => Promise<infer A> ?\n        (...args: Readonly<Args>) => Effect<A, Cause.UnknownException, Self>\n      : Type[k] extends (...args: infer Args extends ReadonlyArray<any>) => infer A ?\n        (...args: Readonly<Args>) => Effect<A, never, Self>\n      : Type[k] extends Effect<infer A, infer E, infer R> ? Effect<A, E, Self | R>\n      : Effect<Type[k], never, Self>\n  }\n}\n\nconst makeTagProxy = (TagClass: Context.Tag<any, any> & Record<PropertyKey, any>) => {\n  const cache = new Map()\n  return new Proxy(TagClass, {\n    get(target: any, prop: any, receiver) {\n      if (prop in target) {\n        return Reflect.get(target, prop, receiver)\n      }\n      if (cache.has(prop)) {\n        return cache.get(prop)\n      }\n      const fn = (...args: Array<any>) =>\n        core.andThen(target, (s: any) => {\n          if (typeof s[prop] === \"function\") {\n            cache.set(prop, (...args: Array<any>) => core.andThen(target, (s: any) => s[prop](...args)))\n            return s[prop](...args)\n          }\n          cache.set(prop, core.andThen(target, (s: any) => s[prop]))\n          return s[prop]\n        })\n      const cn = core.andThen(target, (s: any) => s[prop])\n      // @effect-diagnostics-next-line floatingEffect:off\n      Object.assign(fn, cn)\n      const apply = fn.apply\n      const bind = fn.bind\n      const call = fn.call\n      const proto = Object.setPrototypeOf({}, Object.getPrototypeOf(cn))\n      proto.apply = apply\n      proto.bind = bind\n      proto.call = call\n      Object.setPrototypeOf(fn, proto)\n      cache.set(prop, fn)\n      return fn\n    }\n  })\n}\n\n/**\n * Creates a unique tag for a dependency, embedding the service's methods as\n * static properties.\n *\n * **Details**\n *\n * This function allows you to define a `Tag` for a service or dependency in\n * your application. The `Tag` not only acts as an identifier but also provides\n * direct access to the service's methods via static properties. This makes it\n * easier to access and use the service in your code without manually managing\n * contexts.\n *\n * In the example below, the fields of the service (in this case, the `notify`\n * method) are turned into static properties of the Notifications class, making\n * it easier to access them.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * class Notifications extends Effect.Tag(\"Notifications\")<\n *   Notifications,\n *   { readonly notify: (message: string) => Effect.Effect<void> }\n * >() {}\n *\n * // Create an effect that depends on the Notifications service\n * const action = Notifications.notify(\"Hello, world!\")\n * ```\n *\n * @since 2.0.0\n * @category Context\n */\nexport const Tag: <const Id extends string>(id: Id) => <\n  Self,\n  Type extends Tag.AllowedType\n>() =>\n  & Context.TagClass<Self, Id, Type>\n  & (Type extends Record<PropertyKey, any> ? Tag.Proxy<Self, Type> : {})\n  & {\n    use: <X>(\n      body: (_: Type) => X\n    ) => [X] extends [Effect<infer A, infer E, infer R>] ? Effect<A, E, R | Self>\n      : [X] extends [PromiseLike<infer A>] ? Effect<A, Cause.UnknownException, Self>\n      : Effect<X, never, Self>\n  } = (id) => () => {\n    const limit = Error.stackTraceLimit\n    Error.stackTraceLimit = 2\n    const creationError = new Error()\n    Error.stackTraceLimit = limit\n    function TagClass() {}\n    Object.setPrototypeOf(TagClass, TagProto)\n    TagClass.key = id\n    Object.defineProperty(TagClass, \"use\", {\n      get() {\n        return (body: (_: any) => any) => core.andThen(this, body)\n      }\n    })\n    Object.defineProperty(TagClass, \"stack\", {\n      get() {\n        return creationError.stack\n      }\n    })\n    return makeTagProxy(TagClass as any)\n  }\n\ntype MissingSelfGeneric = `Missing \\`Self\\` generic - use \\`class Self extends Effect.Service<Self>()...\\``\n\n/**\n * Simplifies the creation and management of services in Effect by defining both\n * a `Tag` and a `Layer`.\n *\n * **Details**\n *\n * This function allows you to streamline the creation of services by combining\n * the definition of a `Context.Tag` and a `Layer` in a single step. It supports\n * various ways of providing the service implementation:\n * - Using an `effect` to define the service dynamically.\n * - Using `sync` or `succeed` to define the service statically.\n * - Using `scoped` to create services with lifecycle management.\n *\n * It also allows you to specify dependencies for the service, which will be\n * provided automatically when the service is used. Accessors can be optionally\n * generated for the service, making it more convenient to use.\n *\n * **Example**\n *\n * ```ts\n * import { Effect } from 'effect';\n *\n * class Prefix extends Effect.Service<Prefix>()(\"Prefix\", {\n *  sync: () => ({ prefix: \"PRE\" })\n * }) {}\n *\n * class Logger extends Effect.Service<Logger>()(\"Logger\", {\n *  accessors: true,\n *  effect: Effect.gen(function* () {\n *    const { prefix } = yield* Prefix\n *    return {\n *      info: (message: string) =>\n *        Effect.sync(() => {\n *          console.log(`[${prefix}][${message}]`)\n *        })\n *    }\n *  }),\n *  dependencies: [Prefix.Default]\n * }) {}\n * ```\n *\n * @since 3.9.0\n * @category Context\n * @experimental might be up for breaking changes\n */\nexport const Service: <Self = never>() => [Self] extends [never] ? MissingSelfGeneric : {\n  <\n    const Key extends string,\n    const Make extends\n      | {\n        readonly scoped:\n          | Effect<Service.AllowedType<Key, Make>, any, any>\n          | ((...args: any) => Effect<Service.AllowedType<Key, Make>, any, any>)\n        readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n        readonly accessors?: boolean\n        /** @deprecated */\n        readonly ಠ_ಠ: never\n      }\n      | {\n        readonly effect:\n          | Effect<Service.AllowedType<Key, Make>, any, any>\n          | ((...args: any) => Effect<Service.AllowedType<Key, Make>, any, any>)\n        readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n        readonly accessors?: boolean\n        /** @deprecated */\n        readonly ಠ_ಠ: never\n      }\n      | {\n        readonly sync: LazyArg<Service.AllowedType<Key, Make>>\n        readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n        readonly accessors?: boolean\n        /** @deprecated */\n        readonly ಠ_ಠ: never\n      }\n      | {\n        readonly succeed: Service.AllowedType<Key, Make>\n        readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n        readonly accessors?: boolean\n        /** @deprecated */\n        readonly ಠ_ಠ: never\n      }\n  >(\n    key: Key,\n    make: Make\n  ): Service.Class<Self, Key, Make>\n  <\n    const Key extends string,\n    const Make extends NoExcessProperties<{\n      readonly scoped:\n        | Effect<Service.AllowedType<Key, Make>, any, any>\n        | ((...args: any) => Effect<Service.AllowedType<Key, Make>, any, any>)\n      readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n      readonly accessors?: boolean\n    }, Make>\n  >(\n    key: Key,\n    make: Make\n  ): Service.Class<Self, Key, Make>\n  <\n    const Key extends string,\n    const Make extends NoExcessProperties<{\n      readonly effect:\n        | Effect<Service.AllowedType<Key, Make>, any, any>\n        | ((...args: any) => Effect<Service.AllowedType<Key, Make>, any, any>)\n      readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n      readonly accessors?: boolean\n    }, Make>\n  >(\n    key: Key,\n    make: Make\n  ): Service.Class<Self, Key, Make>\n  <\n    const Key extends string,\n    const Make extends NoExcessProperties<{\n      readonly sync: LazyArg<Service.AllowedType<Key, Make>>\n      readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n      readonly accessors?: boolean\n    }, Make>\n  >(\n    key: Key,\n    make: Make\n  ): Service.Class<Self, Key, Make>\n  <\n    const Key extends string,\n    const Make extends NoExcessProperties<{\n      readonly succeed: Service.AllowedType<Key, Make>\n      readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n      readonly accessors?: boolean\n    }, Make>\n  >(\n    key: Key,\n    make: Make\n  ): Service.Class<Self, Key, Make>\n} = function() {\n  return function() {\n    const [id, maker] = arguments\n    const proxy = \"accessors\" in maker ? maker[\"accessors\"] : false\n    const limit = Error.stackTraceLimit\n    Error.stackTraceLimit = 2\n    const creationError = new Error()\n    Error.stackTraceLimit = limit\n\n    let patchState: \"unchecked\" | \"plain\" | \"patched\" = \"unchecked\"\n    const TagClass: any = function(this: any, service: any) {\n      if (patchState === \"unchecked\") {\n        const proto = Object.getPrototypeOf(service)\n        if (proto === Object.prototype || proto === null) {\n          patchState = \"plain\"\n        } else {\n          const selfProto = Object.getPrototypeOf(this)\n          Object.setPrototypeOf(selfProto, proto)\n          patchState = \"patched\"\n        }\n      }\n      if (patchState === \"plain\") {\n        Object.assign(this, service)\n      } else if (patchState === \"patched\") {\n        Object.setPrototypeOf(service, Object.getPrototypeOf(this))\n        return service\n      }\n    }\n\n    TagClass.prototype._tag = id\n    Object.defineProperty(TagClass, \"make\", {\n      get() {\n        return (service: any) => new this(service)\n      }\n    })\n    Object.defineProperty(TagClass, \"use\", {\n      get() {\n        return (body: any) => core.andThen(this, body)\n      }\n    })\n    TagClass.key = id\n\n    Object.assign(TagClass, TagProto)\n\n    Object.defineProperty(TagClass, \"stack\", {\n      get() {\n        return creationError.stack\n      }\n    })\n\n    const hasDeps = \"dependencies\" in maker && maker.dependencies.length > 0\n    const layerName = hasDeps ? \"DefaultWithoutDependencies\" : \"Default\"\n    let layerCache: Layer.Layer.Any | undefined\n    let isFunction = false\n    if (\"effect\" in maker) {\n      isFunction = typeof maker.effect === \"function\"\n      Object.defineProperty(TagClass, layerName, {\n        get(this: any) {\n          if (isFunction) {\n            return function(this: typeof TagClass) {\n              return layer.fromEffect(TagClass, map(maker.effect.apply(null, arguments), (_) => new this(_)))\n            }.bind(this)\n          }\n          return layerCache ??= layer.fromEffect(TagClass, map(maker.effect, (_) => new this(_)))\n        }\n      })\n    } else if (\"scoped\" in maker) {\n      isFunction = typeof maker.scoped === \"function\"\n      Object.defineProperty(TagClass, layerName, {\n        get(this: any) {\n          if (isFunction) {\n            return function(this: typeof TagClass) {\n              return layer.scoped(TagClass, map(maker.scoped.apply(null, arguments), (_) => new this(_)))\n            }.bind(this)\n          }\n          return layerCache ??= layer.scoped(TagClass, map(maker.scoped, (_) => new this(_)))\n        }\n      })\n    } else if (\"sync\" in maker) {\n      Object.defineProperty(TagClass, layerName, {\n        get(this: any) {\n          return layerCache ??= layer.sync(TagClass, () => new this(maker.sync()))\n        }\n      })\n    } else {\n      Object.defineProperty(TagClass, layerName, {\n        get(this: any) {\n          return layerCache ??= layer.succeed(TagClass, new this(maker.succeed))\n        }\n      })\n    }\n\n    if (hasDeps) {\n      let layerWithDepsCache: Layer.Layer.Any | undefined\n      Object.defineProperty(TagClass, \"Default\", {\n        get(this: any) {\n          if (isFunction) {\n            return function(this: typeof TagClass) {\n              return layer.provide(\n                this.DefaultWithoutDependencies.apply(null, arguments),\n                maker.dependencies\n              )\n            }\n          }\n          return layerWithDepsCache ??= layer.provide(\n            this.DefaultWithoutDependencies,\n            maker.dependencies\n          )\n        }\n      })\n    }\n\n    return proxy === true ? makeTagProxy(TagClass) : TagClass\n  }\n} as any\n\n/**\n * @since 3.9.0\n * @category Context\n */\nexport declare namespace Service {\n  /**\n   * @since 3.9.0\n   */\n  export interface ProhibitedType {\n    Service?: `property \"Service\" is forbidden`\n    Identifier?: `property \"Identifier\" is forbidden`\n    Default?: `property \"Default\" is forbidden`\n    DefaultWithoutDependencies?: `property \"DefaultWithoutDependencies\" is forbidden`\n    _op_layer?: `property \"_op_layer\" is forbidden`\n    _op?: `property \"_op\" is forbidden`\n    of?: `property \"of\" is forbidden`\n    make?: `property \"make\" is forbidden`\n    context?: `property \"context\" is forbidden`\n    key?: `property \"key\" is forbidden`\n    stack?: `property \"stack\" is forbidden`\n    name?: `property \"name\" is forbidden`\n    pipe?: `property \"pipe\" is forbidden`\n    use?: `property \"use\" is forbidden`\n    _tag?: `property \"_tag\" is forbidden`\n  }\n\n  /**\n   * @since 3.9.0\n   */\n  export type AllowedType<Key extends string, Make> = MakeAccessors<Make> extends true ?\n      & Record<PropertyKey, any>\n      & {\n        readonly [K in Extract<keyof MakeService<Make>, keyof ProhibitedType>]: K extends \"_tag\" ? Key\n          : ProhibitedType[K]\n      }\n    : Record<PropertyKey, any> & { readonly _tag?: Key }\n\n  /**\n   * @since 3.9.0\n   */\n  export type Class<\n    Self,\n    Key extends string,\n    Make\n  > =\n    & {\n      new(_: MakeService<Make>): MakeService<Make> & {\n        readonly _tag: Key\n      }\n      readonly use: <X>(\n        body: (_: Self) => X\n      ) => [X] extends [Effect<infer A, infer E, infer R>] ? Effect<A, E, R | Self>\n        : [X] extends [PromiseLike<infer A>] ? Effect<A, Cause.UnknownException, Self>\n        : Effect<X, never, Self>\n      readonly make: (_: MakeService<Make>) => Self\n    }\n    & Context.Tag<Self, Self>\n    & { key: Key }\n    & (MakeAccessors<Make> extends true ? Tag.Proxy<Self, MakeService<Make>> : {})\n    & (MakeDeps<Make> extends never ? {\n        readonly Default: HasArguments<Make> extends true ?\n          (...args: MakeArguments<Make>) => Layer.Layer<Self, MakeError<Make>, MakeContext<Make>>\n          : Layer.Layer<Self, MakeError<Make>, MakeContext<Make>>\n      } :\n      {\n        readonly DefaultWithoutDependencies: HasArguments<Make> extends true\n          ? (...args: MakeArguments<Make>) => Layer.Layer<Self, MakeError<Make>, MakeContext<Make>>\n          : Layer.Layer<Self, MakeError<Make>, MakeContext<Make>>\n\n        readonly Default: HasArguments<Make> extends true ? (...args: MakeArguments<Make>) => Layer.Layer<\n            Self,\n            MakeError<Make> | MakeDepsE<Make>,\n            | Exclude<MakeContext<Make>, MakeDepsOut<Make>>\n            | MakeDepsIn<Make>\n          > :\n          Layer.Layer<\n            Self,\n            MakeError<Make> | MakeDepsE<Make>,\n            | Exclude<MakeContext<Make>, MakeDepsOut<Make>>\n            | MakeDepsIn<Make>\n          >\n      })\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeService<Make> = Make extends { readonly effect: Effect<infer _A, infer _E, infer _R> } ? _A\n    : Make extends { readonly scoped: Effect<infer _A, infer _E, infer _R> } ? _A\n    : Make extends { readonly effect: (...args: infer _Args) => Effect<infer _A, infer _E, infer _R> } ? _A\n    : Make extends { readonly scoped: (...args: infer _Args) => Effect<infer _A, infer _E, infer _R> } ? _A\n    : Make extends { readonly sync: LazyArg<infer A> } ? A\n    : Make extends { readonly succeed: infer A } ? A\n    : never\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeError<Make> = Make extends { readonly effect: Effect<infer _A, infer _E, infer _R> } ? _E\n    : Make extends { readonly scoped: Effect<infer _A, infer _E, infer _R> } ? _E\n    : Make extends { readonly effect: (...args: infer _Args) => Effect<infer _A, infer _E, infer _R> } ? _E\n    : Make extends { readonly scoped: (...args: infer _Args) => Effect<infer _A, infer _E, infer _R> } ? _E\n    : never\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeContext<Make> = Make extends { readonly effect: Effect<infer _A, infer _E, infer _R> } ? _R\n    : Make extends { readonly scoped: Effect<infer _A, infer _E, infer _R> } ? Exclude<_R, Scope.Scope>\n    : Make extends { readonly effect: (...args: infer _Args) => Effect<infer _A, infer _E, infer _R> } ? _R\n    : Make extends { readonly scoped: (...args: infer _Args) => Effect<infer _A, infer _E, infer _R> } ?\n      Exclude<_R, Scope.Scope>\n    : never\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeDeps<Make> = Make extends { readonly dependencies: ReadonlyArray<Layer.Layer.Any> }\n    ? Make[\"dependencies\"][number]\n    : never\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeDepsOut<Make> = Contravariant.Type<MakeDeps<Make>[Layer.LayerTypeId][\"_ROut\"]>\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeDepsE<Make> = Covariant.Type<MakeDeps<Make>[Layer.LayerTypeId][\"_E\"]>\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeDepsIn<Make> = Covariant.Type<MakeDeps<Make>[Layer.LayerTypeId][\"_RIn\"]>\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeAccessors<Make> = Make extends { readonly accessors: true } ? true\n    : false\n\n  /**\n   * @since 3.16.0\n   */\n  export type MakeArguments<Make> = Make extends\n    { readonly effect: (...args: infer Args) => Effect<infer _A, infer _E, infer _R> } ? Args\n    : Make extends { readonly scoped: (...args: infer Args) => Effect<infer _A, infer _E, infer _R> } ? Args\n    : never\n\n  /**\n   * @since 3.16.0\n   */\n  export type HasArguments<Make> = Make extends {\n    readonly scoped: (...args: ReadonlyArray<any>) => Effect<infer _A, infer _E, infer _R>\n  } ? true :\n    Make extends {\n      readonly effect: (...args: ReadonlyArray<any>) => Effect<infer _A, infer _E, infer _R>\n    } ? true :\n    false\n}\n\n/**\n * @since 3.11.0\n * @category Models\n */\nexport namespace fn {\n  /**\n   * @since 3.11.0\n   * @category Models\n   */\n  export type Gen = {\n    <Eff extends YieldWrap<Effect<any, any, any>>, AEff, Args extends Array<any>>(\n      body: (...args: Args) => Generator<Eff, AEff, never>\n    ): (...args: Args) => Effect<\n      AEff,\n      [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n      [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n    >\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A extends Effect<any, any, any>\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A\n    ): (...args: Args) => Effect.AsEffect<A>\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A,\n      B extends Effect<any, any, any>\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B\n    ): (...args: Args) => Effect.AsEffect<B>\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A,\n      B,\n      C extends Effect<any, any, any>\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B,\n      c: (_: B, ...args: NoInfer<Args>) => C\n    ): (...args: Args) => Effect.AsEffect<C>\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A,\n      B,\n      C,\n      D extends Effect<any, any, any>\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B,\n      c: (_: B, ...args: NoInfer<Args>) => C,\n      d: (_: C, ...args: NoInfer<Args>) => D\n    ): (...args: Args) => Effect.AsEffect<D>\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A,\n      B,\n      C,\n      D,\n      E extends Effect<any, any, any>\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B,\n      c: (_: B, ...args: NoInfer<Args>) => C,\n      d: (_: C, ...args: NoInfer<Args>) => D,\n      e: (_: D, ...args: NoInfer<Args>) => E\n    ): (...args: Args) => Effect.AsEffect<E>\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A,\n      B,\n      C,\n      D,\n      E,\n      F extends Effect<any, any, any>\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B,\n      c: (_: B, ...args: NoInfer<Args>) => C,\n      d: (_: C, ...args: NoInfer<Args>) => D,\n      e: (_: D, ...args: NoInfer<Args>) => E,\n      f: (_: E, ...args: NoInfer<Args>) => F\n    ): (...args: Args) => Effect.AsEffect<F>\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G extends Effect<any, any, any>\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B,\n      c: (_: B, ...args: NoInfer<Args>) => C,\n      d: (_: C, ...args: NoInfer<Args>) => D,\n      e: (_: D, ...args: NoInfer<Args>) => E,\n      f: (_: E, ...args: NoInfer<Args>) => F,\n      g: (_: F, ...args: NoInfer<Args>) => G\n    ): (...args: Args) => Effect.AsEffect<G>\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H extends Effect<any, any, any>\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B,\n      c: (_: B, ...args: NoInfer<Args>) => C,\n      d: (_: C, ...args: NoInfer<Args>) => D,\n      e: (_: D, ...args: NoInfer<Args>) => E,\n      f: (_: E, ...args: NoInfer<Args>) => F,\n      g: (_: F, ...args: NoInfer<Args>) => G,\n      h: (_: G, ...args: NoInfer<Args>) => H\n    ): (...args: Args) => Effect.AsEffect<H>\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H,\n      I extends Effect<any, any, any>\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B,\n      c: (_: B, ...args: NoInfer<Args>) => C,\n      d: (_: C, ...args: NoInfer<Args>) => D,\n      e: (_: D, ...args: NoInfer<Args>) => E,\n      f: (_: E, ...args: NoInfer<Args>) => F,\n      g: (_: F, ...args: NoInfer<Args>) => G,\n      h: (_: G, ...args: NoInfer<Args>) => H,\n      i: (_: H, ...args: NoInfer<Args>) => I\n    ): (...args: Args) => Effect.AsEffect<I>\n  }\n\n  /**\n   * @since 3.11.0\n   * @category Models\n   */\n  export type NonGen = {\n    <Eff extends Effect<any, any, any>, Args extends Array<any>>(\n      body: (...args: Args) => Eff\n    ): (...args: Args) => Effect.AsEffect<Eff>\n    <Eff extends Effect<any, any, any>, A, Args extends Array<any>>(\n      body: (...args: Args) => A,\n      a: (_: A, ...args: NoInfer<Args>) => Eff\n    ): (...args: Args) => Effect.AsEffect<Eff>\n    <Eff extends Effect<any, any, any>, A, B, Args extends Array<any>>(\n      body: (...args: Args) => A,\n      a: (_: A, ...args: NoInfer<Args>) => B,\n      b: (_: B, ...args: NoInfer<Args>) => Eff\n    ): (...args: Args) => Effect.AsEffect<Eff>\n    <Eff extends Effect<any, any, any>, A, B, C, Args extends Array<any>>(\n      body: (...args: Args) => A,\n      a: (_: A, ...args: NoInfer<Args>) => B,\n      b: (_: B, ...args: NoInfer<Args>) => C,\n      c: (_: C, ...args: NoInfer<Args>) => Eff\n    ): (...args: Args) => Effect.AsEffect<Eff>\n    <Eff extends Effect<any, any, any>, A, B, C, D, Args extends Array<any>>(\n      body: (...args: Args) => A,\n      a: (_: A, ...args: NoInfer<Args>) => B,\n      b: (_: B, ...args: NoInfer<Args>) => C,\n      c: (_: C, ...args: NoInfer<Args>) => D,\n      d: (_: D, ...args: NoInfer<Args>) => Eff\n    ): (...args: Args) => Effect.AsEffect<Eff>\n    <Eff extends Effect<any, any, any>, A, B, C, D, E, Args extends Array<any>>(\n      body: (...args: Args) => A,\n      a: (_: A, ...args: NoInfer<Args>) => B,\n      b: (_: B, ...args: NoInfer<Args>) => C,\n      c: (_: C, ...args: NoInfer<Args>) => D,\n      d: (_: D, ...args: NoInfer<Args>) => E,\n      e: (_: E, ...args: NoInfer<Args>) => Eff\n    ): (...args: Args) => Effect.AsEffect<Eff>\n    <Eff extends Effect<any, any, any>, A, B, C, D, E, F, Args extends Array<any>>(\n      body: (...args: Args) => A,\n      a: (_: A, ...args: NoInfer<Args>) => B,\n      b: (_: B, ...args: NoInfer<Args>) => C,\n      c: (_: C, ...args: NoInfer<Args>) => D,\n      d: (_: D, ...args: NoInfer<Args>) => E,\n      e: (_: E, ...args: NoInfer<Args>) => F,\n      f: (_: F, ...args: NoInfer<Args>) => Eff\n    ): (...args: Args) => Effect.AsEffect<Eff>\n    <Eff extends Effect<any, any, any>, A, B, C, D, E, F, G, Args extends Array<any>>(\n      body: (...args: Args) => A,\n      a: (_: A, ...args: NoInfer<Args>) => B,\n      b: (_: B, ...args: NoInfer<Args>) => C,\n      c: (_: C, ...args: NoInfer<Args>) => D,\n      d: (_: D, ...args: NoInfer<Args>) => E,\n      e: (_: E, ...args: NoInfer<Args>) => F,\n      f: (_: F, ...args: NoInfer<Args>) => G,\n      g: (_: G, ...args: NoInfer<Args>) => Eff\n    ): (...args: Args) => Effect.AsEffect<Eff>\n    <Eff extends Effect<any, any, any>, A, B, C, D, E, F, G, H, Args extends Array<any>>(\n      body: (...args: Args) => A,\n      a: (_: A, ...args: NoInfer<Args>) => B,\n      b: (_: B, ...args: NoInfer<Args>) => C,\n      c: (_: C, ...args: NoInfer<Args>) => D,\n      d: (_: D, ...args: NoInfer<Args>) => E,\n      e: (_: E, ...args: NoInfer<Args>) => F,\n      f: (_: F, ...args: NoInfer<Args>) => G,\n      g: (_: G, ...args: NoInfer<Args>) => H,\n      h: (_: H, ...args: NoInfer<Args>) => Eff\n    ): (...args: Args) => Effect.AsEffect<Eff>\n    <Eff extends Effect<any, any, any>, A, B, C, D, E, F, G, H, I, Args extends Array<any>>(\n      body: (...args: Args) => A,\n      a: (_: A, ...args: NoInfer<Args>) => B,\n      b: (_: B, ...args: NoInfer<Args>) => C,\n      c: (_: C, ...args: NoInfer<Args>) => D,\n      d: (_: D, ...args: NoInfer<Args>) => E,\n      e: (_: E, ...args: NoInfer<Args>) => F,\n      f: (_: F, ...args: NoInfer<Args>) => G,\n      g: (_: G, ...args: NoInfer<Args>) => H,\n      h: (_: H, ...args: NoInfer<Args>) => I,\n      i: (_: H, ...args: NoInfer<Args>) => Eff\n    ): (...args: Args) => Effect.AsEffect<Eff>\n  }\n\n  /**\n   * @since 3.11.0\n   * @category Models\n   */\n  export type Untraced = {\n    <Eff extends YieldWrap<Effect<any, any, any>>, AEff, Args extends Array<any>>(\n      body: (...args: Args) => Generator<Eff, AEff, never>\n    ): (...args: Args) => Effect<\n      AEff,\n      [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n      [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n    >\n    <Eff extends YieldWrap<Effect<any, any, any>>, AEff, Args extends Array<any>, A>(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A\n    ): (...args: Args) => A\n    <Eff extends YieldWrap<Effect<any, any, any>>, AEff, Args extends Array<any>, A, B>(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B\n    ): (...args: Args) => B\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A,\n      B,\n      C\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B,\n      c: (_: B, ...args: NoInfer<Args>) => C\n    ): (...args: Args) => C\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A,\n      B,\n      C,\n      D\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B,\n      c: (_: B, ...args: NoInfer<Args>) => C,\n      d: (_: C, ...args: NoInfer<Args>) => D\n    ): (...args: Args) => D\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A,\n      B,\n      C,\n      D,\n      E\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B,\n      c: (_: B, ...args: NoInfer<Args>) => C,\n      d: (_: C, ...args: NoInfer<Args>) => D,\n      e: (_: D, ...args: NoInfer<Args>) => E\n    ): (...args: Args) => E\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A,\n      B,\n      C,\n      D,\n      E,\n      F\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B,\n      c: (_: B, ...args: NoInfer<Args>) => C,\n      d: (_: C, ...args: NoInfer<Args>) => D,\n      e: (_: D, ...args: NoInfer<Args>) => E,\n      f: (_: E, ...args: NoInfer<Args>) => F\n    ): (...args: Args) => F\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B,\n      c: (_: B, ...args: NoInfer<Args>) => C,\n      d: (_: C, ...args: NoInfer<Args>) => D,\n      e: (_: D, ...args: NoInfer<Args>) => E,\n      f: (_: E, ...args: NoInfer<Args>) => F,\n      g: (_: F, ...args: NoInfer<Args>) => G\n    ): (...args: Args) => G\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B,\n      c: (_: B, ...args: NoInfer<Args>) => C,\n      d: (_: C, ...args: NoInfer<Args>) => D,\n      e: (_: D, ...args: NoInfer<Args>) => E,\n      f: (_: E, ...args: NoInfer<Args>) => F,\n      g: (_: F, ...args: NoInfer<Args>) => G,\n      h: (_: G, ...args: NoInfer<Args>) => H\n    ): (...args: Args) => H\n    <\n      Eff extends YieldWrap<Effect<any, any, any>>,\n      AEff,\n      Args extends Array<any>,\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H,\n      I\n    >(\n      body: (...args: Args) => Generator<Eff, AEff, never>,\n      a: (\n        _: Effect<\n          AEff,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n          [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n        >,\n        ...args: NoInfer<Args>\n      ) => A,\n      b: (_: A, ...args: NoInfer<Args>) => B,\n      c: (_: B, ...args: NoInfer<Args>) => C,\n      d: (_: C, ...args: NoInfer<Args>) => D,\n      e: (_: D, ...args: NoInfer<Args>) => E,\n      f: (_: E, ...args: NoInfer<Args>) => F,\n      g: (_: F, ...args: NoInfer<Args>) => G,\n      h: (_: G, ...args: NoInfer<Args>) => H,\n      i: (_: H, ...args: NoInfer<Args>) => I\n    ): (...args: Args) => I\n  }\n}\n\n/**\n * The `Effect.fn` function allows you to create traced functions that return an\n * effect. It provides two key features:\n *\n * - **Stack traces with location details** if an error occurs.\n * - **Automatic span creation** for tracing when a span name is provided.\n *\n * If a span name is passed as the first argument, the function's execution is\n * tracked using that name. If no name is provided, stack tracing still works,\n * but spans are not created.\n *\n * A function can be defined using either:\n *\n * - A generator function, allowing the use of `yield*` for effect composition.\n * - A regular function that returns an `Effect`.\n *\n * **Example** (Creating a Traced Function with a Span Name)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const myfunc = Effect.fn(\"myspan\")(function* <N extends number>(n: N) {\n *   yield* Effect.annotateCurrentSpan(\"n\", n) // Attach metadata to the span\n *   console.log(`got: ${n}`)\n *   yield* Effect.fail(new Error(\"Boom!\")) // Simulate failure\n * })\n *\n * Effect.runFork(myfunc(100).pipe(Effect.catchAllCause(Effect.logError)))\n * // Output:\n * // got: 100\n * // timestamp=... level=ERROR fiber=#0 cause=\"Error: Boom!\n * //     at <anonymous> (/.../index.ts:6:22) <= Raise location\n * //     at myspan (/.../index.ts:3:23)  <= Definition location\n * //     at myspan (/.../index.ts:9:16)\" <= Call location\n * ```\n *\n * `Effect.fn` automatically creates spans. The spans capture information about\n * the function execution, including metadata and error details.\n *\n * **Example** (Exporting Spans to the Console)\n *\n * ```ts skip-type-checking\n * import { Effect } from \"effect\"\n * import { NodeSdk } from \"@effect/opentelemetry\"\n * import {\n *   ConsoleSpanExporter,\n *   BatchSpanProcessor\n * } from \"@opentelemetry/sdk-trace-base\"\n *\n * const myfunc = Effect.fn(\"myspan\")(function* <N extends number>(n: N) {\n *   yield* Effect.annotateCurrentSpan(\"n\", n)\n *   console.log(`got: ${n}`)\n *   yield* Effect.fail(new Error(\"Boom!\"))\n * })\n *\n * const program = myfunc(100)\n *\n * const NodeSdkLive = NodeSdk.layer(() => ({\n *   resource: { serviceName: \"example\" },\n *   // Export span data to the console\n *   spanProcessor: new BatchSpanProcessor(new ConsoleSpanExporter())\n * }))\n *\n * Effect.runFork(program.pipe(Effect.provide(NodeSdkLive)))\n * // Output:\n * // got: 100\n * // {\n * //   resource: {\n * //     attributes: {\n * //       'service.name': 'example',\n * //       'telemetry.sdk.language': 'nodejs',\n * //       'telemetry.sdk.name': '@effect/opentelemetry',\n * //       'telemetry.sdk.version': '1.30.1'\n * //     }\n * //   },\n * //   instrumentationScope: { name: 'example', version: undefined, schemaUrl: undefined },\n * //   traceId: '22801570119e57a6e2aacda3dec9665b',\n * //   parentId: undefined,\n * //   traceState: undefined,\n * //   name: 'myspan',\n * //   id: '7af530c1e01bc0cb',\n * //   kind: 0,\n * //   timestamp: 1741182277518402.2,\n * //   duration: 4300.416,\n * //   attributes: {\n * //     n: 100,\n * //     'code.stacktrace': 'at <anonymous> (/.../index.ts:8:23)\\n' +\n * //       'at <anonymous> (/.../index.ts:14:17)'\n * //   },\n * //   status: { code: 2, message: 'Boom!' },\n * //   events: [\n * //     {\n * //       name: 'exception',\n * //       attributes: {\n * //         'exception.type': 'Error',\n * //         'exception.message': 'Boom!',\n * //         'exception.stacktrace': 'Error: Boom!\\n' +\n * //           '    at <anonymous> (/.../index.ts:11:22)\\n' +\n * //           '    at myspan (/.../index.ts:8:23)\\n' +\n * //           '    at myspan (/.../index.ts:14:17)'\n * //       },\n * //       time: [ 1741182277, 522702583 ],\n * //       droppedAttributesCount: 0\n * //     }\n * //   ],\n * //   links: []\n * // }\n * ```\n *\n * `Effect.fn` also acts as a pipe function, allowing you to create a pipeline\n * after the function definition using the effect returned by the generator\n * function as the starting value of the pipeline.\n *\n * **Example** (Creating a Traced Function with a Delay)\n *\n * ```ts\n * import { Effect } from \"effect\"\n *\n * const myfunc = Effect.fn(\n *   function* (n: number) {\n *     console.log(`got: ${n}`)\n *     yield* Effect.fail(new Error(\"Boom!\"))\n *   },\n *   // You can access both the created effect and the original arguments\n *   (effect, n) => Effect.delay(effect, `${n / 100} seconds`)\n * )\n *\n * Effect.runFork(myfunc(100).pipe(Effect.catchAllCause(Effect.logError)))\n * // Output:\n * // got: 100\n * // timestamp=... level=ERROR fiber=#0 cause=\"Error: Boom! (<= after 1 second)\n * ```\n *\n * @see {@link fnUntraced} for a version of this function that doesn't add a span.\n *\n * @since 3.11.0\n * @category Tracing\n */\nexport const fn:\n  & fn.Gen\n  & fn.NonGen\n  & ((\n    name: string,\n    options?: Tracer.SpanOptions\n  ) => fn.Gen & fn.NonGen) = function(nameOrBody: Function | string, ...pipeables: Array<any>) {\n    const limit = Error.stackTraceLimit\n    Error.stackTraceLimit = 2\n    const errorDef = new Error()\n    Error.stackTraceLimit = limit\n    if (typeof nameOrBody !== \"string\") {\n      return defineLength(nameOrBody.length, function(this: any, ...args: Array<any>) {\n        const limit = Error.stackTraceLimit\n        Error.stackTraceLimit = 2\n        const errorCall = new Error()\n        Error.stackTraceLimit = limit\n        return fnApply({\n          self: this,\n          body: nameOrBody,\n          args,\n          pipeables,\n          spanName: \"<anonymous>\",\n          spanOptions: {\n            context: internalTracer.DisablePropagation.context(true)\n          },\n          errorDef,\n          errorCall\n        })\n      }) as any\n    }\n    const name = nameOrBody\n    const options = pipeables[0]\n    return (body: Function, ...pipeables: Array<any>) =>\n      defineLength(\n        body.length,\n        ({\n          [name](this: any, ...args: Array<any>) {\n            const limit = Error.stackTraceLimit\n            Error.stackTraceLimit = 2\n            const errorCall = new Error()\n            Error.stackTraceLimit = limit\n            return fnApply({\n              self: this,\n              body,\n              args,\n              pipeables,\n              spanName: name,\n              spanOptions: options,\n              errorDef,\n              errorCall\n            })\n          }\n        })[name]\n      )\n  }\n\nfunction defineLength<F extends Function>(length: number, fn: F) {\n  return Object.defineProperty(fn, \"length\", {\n    value: length,\n    configurable: true\n  })\n}\n\nfunction fnApply(options: {\n  readonly self: any\n  readonly body: Function\n  readonly args: Array<any>\n  readonly pipeables: Array<any>\n  readonly spanName: string\n  readonly spanOptions: Tracer.SpanOptions\n  readonly errorDef: Error\n  readonly errorCall: Error\n}) {\n  let effect: Effect<any, any, any>\n  let fnError: any = undefined\n  if (isGeneratorFunction(options.body)) {\n    effect = core.fromIterator(() => options.body.apply(options.self, options.args))\n  } else {\n    try {\n      effect = options.body.apply(options.self, options.args)\n    } catch (error) {\n      fnError = error\n      effect = die(error)\n    }\n  }\n  if (options.pipeables.length > 0) {\n    try {\n      for (const x of options.pipeables) {\n        effect = x(effect, ...options.args)\n      }\n    } catch (error) {\n      effect = fnError\n        ? failCause(internalCause.sequential(\n          internalCause.die(fnError),\n          internalCause.die(error)\n        ))\n        : die(error)\n    }\n  }\n\n  let cache: false | string = false\n  const captureStackTrace = () => {\n    if (cache !== false) {\n      return cache\n    }\n    if (options.errorCall.stack) {\n      const stackDef = options.errorDef.stack!.trim().split(\"\\n\")\n      const stackCall = options.errorCall.stack.trim().split(\"\\n\")\n      let endStackDef = stackDef.slice(2).join(\"\\n\").trim()\n      if (!endStackDef.includes(`(`)) {\n        endStackDef = endStackDef.replace(/at (.*)/, \"at ($1)\")\n      }\n      let endStackCall = stackCall.slice(2).join(\"\\n\").trim()\n      if (!endStackCall.includes(`(`)) {\n        endStackCall = endStackCall.replace(/at (.*)/, \"at ($1)\")\n      }\n      cache = `${endStackDef}\\n${endStackCall}`\n      return cache\n    }\n  }\n  const opts: any = (options.spanOptions && \"captureStackTrace\" in options.spanOptions)\n    ? options.spanOptions\n    : { captureStackTrace, ...options.spanOptions }\n  return withSpan(effect, options.spanName, opts)\n}\n\n/**\n * Same as {@link fn}, but allows you to create a function that is not traced, for when performance is critical.\n *\n * @see {@link fn} for a version that includes tracing.\n *\n * @since 3.12.0\n * @category Tracing\n */\nexport const fnUntraced: fn.Untraced = core.fnUntraced\n\n// -----------------------------------------------------------------------------\n// Type constraints\n// -----------------------------------------------------------------------------\n\n/**\n * A no-op type constraint that enforces the success channel of an Effect conforms to\n * the specified success type `A`.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * // Ensure that the program does not expose any unhandled errors.\n * const program = Effect.succeed(42).pipe(Effect.ensureSuccessType<number>())\n *\n * @since 3.17.0\n * @category Type constraints\n */\nexport const ensureSuccessType = <A>() => <A2 extends A, E, R>(effect: Effect<A2, E, R>): Effect<A2, E, R> => effect\n\n/**\n * A no-op type constraint that enforces the error channel of an Effect conforms to\n * the specified error type `E`.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * // Ensure that the program does not expose any unhandled errors.\n * const program = Effect.succeed(42).pipe(Effect.ensureErrorType<never>())\n *\n * @since 3.17.0\n * @category Type constraints\n */\nexport const ensureErrorType = <E>() => <A, E2 extends E, R>(effect: Effect<A, E2, R>): Effect<A, E2, R> => effect\n\n/**\n * A no-op type constraint that enforces the requirements channel of an Effect conforms to\n * the specified requirements type `R`.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * // Ensure that the program does not have any requirements.\n * const program = Effect.succeed(42).pipe(Effect.ensureRequirementsType<never>())\n *\n * @since 3.17.0\n * @category Type constraints\n */\nexport const ensureRequirementsType = <R>() => <A, E, R2 extends R>(effect: Effect<A, E, R2>): Effect<A, E, R2> =>\n  effect\n", "/**\n * @since 2.0.0\n */\n\nimport type * as Context from \"./Context.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as ExecutionStrategy from \"./ExecutionStrategy.js\"\nimport type * as Exit from \"./Exit.js\"\nimport * as core from \"./internal/core.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\n\n/**\n * A unique identifier for the `Scope` type.\n *\n * @since 2.0.0\n * @category symbols\n */\nexport const ScopeTypeId: unique symbol = core.ScopeTypeId\n\n/**\n * The type of the unique identifier for `Scope`.\n *\n * @since 2.0.0\n * @category symbols\n */\nexport type ScopeTypeId = typeof ScopeTypeId\n\n/**\n * A unique identifier for the `CloseableScope` type.\n *\n * @since 2.0.0\n * @category symbols\n */\nexport const CloseableScopeTypeId: unique symbol = core.CloseableScopeTypeId\n\n/**\n * The type of the unique identifier for `CloseableScope`.\n *\n * @since 2.0.0\n * @category symbols\n */\nexport type CloseableScopeTypeId = typeof CloseableScopeTypeId\n\n/**\n * Represents a scope that manages finalizers and can fork child scopes.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Scope extends Pipeable {\n  readonly [ScopeTypeId]: ScopeTypeId\n  /**\n   * The execution strategy for running finalizers in this scope.\n   */\n  readonly strategy: ExecutionStrategy.ExecutionStrategy\n  /**\n   * Forks a new child scope with the specified execution strategy. The child scope\n   * will automatically be closed when this scope is closed.\n   *\n   * @internal\n   */\n  fork(strategy: ExecutionStrategy.ExecutionStrategy): Effect.Effect<Scope.Closeable>\n  /**\n   * Adds a finalizer to this scope. The finalizer will be run when the scope is closed.\n   *\n   * @internal\n   */\n  addFinalizer(finalizer: Scope.Finalizer): Effect.Effect<void>\n}\n\n/**\n * A scope that can be explicitly closed with a specified exit value.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface CloseableScope extends Scope, Pipeable {\n  readonly [CloseableScopeTypeId]: CloseableScopeTypeId\n\n  /**\n   * Closes this scope with the given exit value, running all finalizers.\n   *\n   * @internal\n   */\n  close(exit: Exit.Exit<unknown, unknown>): Effect.Effect<void>\n}\n\n/**\n * A tag representing the current `Scope` in the environment.\n *\n * @since 2.0.0\n * @category context\n */\nexport const Scope: Context.Tag<Scope, Scope> = fiberRuntime.scopeTag\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Scope {\n  /**\n   * A finalizer function that takes an `Exit` value and returns an `Effect`.\n   *\n   * @since 2.0.0\n   * @category model\n   */\n  export type Finalizer = (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>\n  /**\n   * A closeable scope that can be explicitly closed.\n   *\n   * @since 2.0.0\n   * @category model\n   */\n  export type Closeable = CloseableScope\n}\n\n/**\n * Adds a finalizer to this scope. The finalizer is guaranteed to be run when\n * the scope is closed. Use this when the finalizer does not need to know the\n * `Exit` value that the scope is closed with.\n *\n * @see {@link addFinalizerExit}\n *\n * @since 2.0.0\n * @category utils\n */\nexport const addFinalizer: (\n  self: Scope,\n  finalizer: Effect.Effect<unknown>\n) => Effect.Effect<void> = core.scopeAddFinalizer\n\n/**\n * Adds a finalizer to this scope. The finalizer receives the `Exit` value\n * when the scope is closed, allowing it to perform different actions based\n * on the exit status.\n *\n * @see {@link addFinalizer}\n *\n * @since 2.0.0\n * @category utils\n */\nexport const addFinalizerExit: (self: Scope, finalizer: Scope.Finalizer) => Effect.Effect<void> =\n  core.scopeAddFinalizerExit\n\n/**\n * Closes this scope with the specified exit value, running all finalizers that\n * have been added to the scope.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const close: (self: CloseableScope, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void> = core.scopeClose\n\n/**\n * Extends the scope of an `Effect` that requires a scope into this scope.\n * It provides this scope to the effect but does not close the scope when the\n * effect completes execution. This allows extending a scoped value into a\n * larger scope.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const extend: {\n  /**\n   * Extends the scope of an `Effect` that requires a scope into this scope.\n   * It provides this scope to the effect but does not close the scope when the\n   * effect completes execution. This allows extending a scoped value into a\n   * larger scope.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (scope: Scope): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope>>\n  /**\n   * Extends the scope of an `Effect` that requires a scope into this scope.\n   * It provides this scope to the effect but does not close the scope when the\n   * effect completes execution. This allows extending a scoped value into a\n   * larger scope.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: Scope): Effect.Effect<A, E, Exclude<R, Scope>>\n} = fiberRuntime.scopeExtend\n\n/**\n * Forks a new child scope with the specified execution strategy. The child scope\n * will automatically be closed when this scope is closed.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const fork: (\n  self: Scope,\n  strategy: ExecutionStrategy.ExecutionStrategy\n) => Effect.Effect<CloseableScope> = core.scopeFork\n\n/**\n * Provides this closeable scope to an `Effect` that requires a scope,\n * guaranteeing that the scope is closed with the result of that effect as\n * soon as the effect completes execution, whether by success, failure, or\n * interruption.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const use: {\n  /**\n   * Provides this closeable scope to an `Effect` that requires a scope,\n   * guaranteeing that the scope is closed with the result of that effect as\n   * soon as the effect completes execution, whether by success, failure, or\n   * interruption.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  (scope: CloseableScope): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope>>\n  /**\n   * Provides this closeable scope to an `Effect` that requires a scope,\n   * guaranteeing that the scope is closed with the result of that effect as\n   * soon as the effect completes execution, whether by success, failure, or\n   * interruption.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: CloseableScope): Effect.Effect<A, E, Exclude<R, Scope>>\n} = fiberRuntime.scopeUse\n\n/**\n * Creates a new closeable scope where finalizers will run according to the\n * specified `ExecutionStrategy`. If no execution strategy is provided, `sequential`\n * will be used by default.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (\n  executionStrategy?: ExecutionStrategy.ExecutionStrategy\n) => Effect.Effect<CloseableScope> = fiberRuntime.scopeMake\n", "import type * as ReadonlyArray from \"../Array.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Context from \"../Context.js\"\nimport type * as Effect from \"../Effect.js\"\nimport { equals } from \"../Equal.js\"\nimport * as Exit from \"../Exit.js\"\nimport * as Fiber from \"../Fiber.js\"\nimport * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport * as FiberRefs from \"../FiberRefs.js\"\nimport { dual, pipe } from \"../Function.js\"\nimport * as Inspectable from \"../Inspectable.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Predicate from \"../Predicate.js\"\nimport type * as Runtime from \"../Runtime.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport * as scheduler_ from \"../Scheduler.js\"\nimport * as scope_ from \"../Scope.js\"\nimport * as InternalCause from \"./cause.js\"\nimport * as core from \"./core.js\"\nimport * as executionStrategy from \"./executionStrategy.js\"\nimport * as FiberRuntime from \"./fiberRuntime.js\"\nimport * as fiberScope from \"./fiberScope.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport * as runtimeFlags from \"./runtimeFlags.js\"\nimport * as supervisor_ from \"./supervisor.js\"\n\nconst makeDual = <Args extends Array<any>, Return>(\n  f: (runtime: Runtime.Runtime<never>, effect: Effect.Effect<any, any>, ...args: Args) => Return\n): {\n  <R>(runtime: Runtime.Runtime<R>): <A, E>(effect: Effect.Effect<A, E, R>, ...args: Args) => Return\n  <R, A, E>(runtime: Runtime.Runtime<R>, effect: Effect.Effect<A, E, R>, ...args: Args): Return\n} =>\n  function(this: any) {\n    if (arguments.length === 1) {\n      const runtime = arguments[0]\n      return (effect: any, ...args: Args) => f(runtime, effect, ...args)\n    }\n    return f.apply(this, arguments as any)\n  } as any\n\n/** @internal */\nexport const unsafeFork: {\n  <R>(runtime: Runtime.Runtime<R>): <A, E>(\n    effect: Effect.Effect<A, E, R>,\n    options?: Runtime.RunForkOptions | undefined\n  ) => Fiber.RuntimeFiber<A, E>\n  <R, A, E>(\n    runtime: Runtime.Runtime<R>,\n    effect: Effect.Effect<A, E, R>,\n    options?: Runtime.RunForkOptions | undefined\n  ): Fiber.RuntimeFiber<A, E>\n} = makeDual(<R, A, E>(\n  runtime: Runtime.Runtime<R>,\n  self: Effect.Effect<A, E, R>,\n  options?: Runtime.RunForkOptions\n): Fiber.RuntimeFiber<A, E> => {\n  const fiberId = FiberId.unsafeMake()\n  const fiberRefUpdates: ReadonlyArray.NonEmptyArray<\n    readonly [FiberRef.FiberRef<any>, ReadonlyArray.NonEmptyReadonlyArray<readonly [FiberId.Runtime, any]>]\n  > = [[core.currentContext, [[fiberId, runtime.context]]]]\n\n  if (options?.scheduler) {\n    fiberRefUpdates.push([scheduler_.currentScheduler, [[fiberId, options.scheduler]]])\n  }\n\n  let fiberRefs = FiberRefs.updateManyAs(runtime.fiberRefs, {\n    entries: fiberRefUpdates,\n    forkAs: fiberId\n  })\n\n  if (options?.updateRefs) {\n    fiberRefs = options.updateRefs(fiberRefs, fiberId)\n  }\n\n  const fiberRuntime: FiberRuntime.FiberRuntime<A, E> = new FiberRuntime.FiberRuntime<A, E>(\n    fiberId,\n    fiberRefs,\n    runtime.runtimeFlags\n  )\n\n  let effect: Effect.Effect<A, E, R> = self\n\n  if (options?.scope) {\n    effect = core.flatMap(\n      scope_.fork(options.scope, executionStrategy.sequential),\n      (closeableScope) =>\n        core.zipRight(\n          core.scopeAddFinalizer(\n            closeableScope,\n            core.fiberIdWith((id) =>\n              equals(id, fiberRuntime.id()) ? core.void : core.interruptAsFiber(fiberRuntime, id)\n            )\n          ),\n          core.onExit(self, (exit) => scope_.close(closeableScope, exit))\n        )\n    )\n  }\n\n  const supervisor = fiberRuntime.currentSupervisor\n\n  // we can compare by reference here as _supervisor.none is wrapped with globalValue\n  if (supervisor !== supervisor_.none) {\n    supervisor.onStart(runtime.context, effect, Option.none(), fiberRuntime)\n\n    fiberRuntime.addObserver((exit) => supervisor.onEnd(exit, fiberRuntime))\n  }\n\n  fiberScope.globalScope.add(runtime.runtimeFlags, fiberRuntime)\n\n  // Only an explicit false will prevent immediate execution\n  if (options?.immediate === false) {\n    fiberRuntime.resume(effect)\n  } else {\n    fiberRuntime.start(effect)\n  }\n\n  return fiberRuntime\n})\n\n/** @internal */\nexport const unsafeRunCallback: {\n  <R>(runtime: Runtime.Runtime<R>): <A, E>(\n    effect: Effect.Effect<A, E, R>,\n    options?: Runtime.RunCallbackOptions<A, E> | undefined\n  ) => (fiberId?: FiberId.FiberId, options?: Runtime.RunCallbackOptions<A, E> | undefined) => void\n  <R, A, E>(\n    runtime: Runtime.Runtime<R>,\n    effect: Effect.Effect<A, E, R>,\n    options?: Runtime.RunCallbackOptions<A, E> | undefined\n  ): (fiberId?: FiberId.FiberId, options?: Runtime.RunCallbackOptions<A, E> | undefined) => void\n} = makeDual((\n  runtime,\n  effect,\n  options: Runtime.RunCallbackOptions<any, any> = {}\n): (fiberId?: FiberId.FiberId, options?: Runtime.RunCallbackOptions<any, any> | undefined) => void => {\n  const fiberRuntime = unsafeFork(runtime, effect, options)\n\n  if (options.onExit) {\n    fiberRuntime.addObserver((exit) => {\n      options.onExit!(exit)\n    })\n  }\n\n  return (id, cancelOptions) =>\n    unsafeRunCallback(runtime)(\n      pipe(fiberRuntime, Fiber.interruptAs(id ?? FiberId.none)),\n      {\n        ...cancelOptions,\n        onExit: cancelOptions?.onExit\n          ? (exit) => cancelOptions.onExit!(Exit.flatten(exit))\n          : undefined\n      }\n    )\n})\n\n/** @internal */\nexport const unsafeRunSync: {\n  <A, E, R>(runtime: Runtime.Runtime<R>, effect: Effect.Effect<A, E, R>): A\n  <R>(runtime: Runtime.Runtime<R>): <A, E>(effect: Effect.Effect<A, E, R>) => A\n} = makeDual((runtime, effect) => {\n  const result = unsafeRunSyncExit(runtime)(effect)\n  if (result._tag === \"Failure\") {\n    throw fiberFailure(result.effect_instruction_i0)\n  }\n  return result.effect_instruction_i0\n})\n\nclass AsyncFiberExceptionImpl<A, E = never> extends Error implements Runtime.AsyncFiberException<A, E> {\n  readonly _tag = \"AsyncFiberException\"\n  constructor(readonly fiber: Fiber.RuntimeFiber<A, E>) {\n    super(\n      `Fiber #${fiber.id().id} cannot be resolved synchronously. This is caused by using runSync on an effect that performs async work`\n    )\n    this.name = this._tag\n    this.stack = this.message\n  }\n}\n\nconst asyncFiberException = <A, E>(fiber: Fiber.RuntimeFiber<A, E>): Runtime.AsyncFiberException<A, E> => {\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 0\n  const error = new AsyncFiberExceptionImpl(fiber)\n  Error.stackTraceLimit = limit\n  return error\n}\n\n/** @internal */\nexport const isAsyncFiberException = (u: unknown): u is Runtime.AsyncFiberException<unknown, unknown> =>\n  Predicate.isTagged(u, \"AsyncFiberException\") && \"fiber\" in u\n\n/** @internal */\nexport const FiberFailureId: Runtime.FiberFailureId = Symbol.for(\"effect/Runtime/FiberFailure\") as any\n/** @internal */\nexport const FiberFailureCauseId: Runtime.FiberFailureCauseId = Symbol.for(\n  \"effect/Runtime/FiberFailure/Cause\"\n) as any\n\nclass FiberFailureImpl extends Error implements Runtime.FiberFailure {\n  readonly [FiberFailureId]: Runtime.FiberFailureId\n  readonly [FiberFailureCauseId]: Cause.Cause<unknown>\n  constructor(cause: Cause.Cause<unknown>) {\n    const head = InternalCause.prettyErrors(cause)[0]\n\n    super(head?.message || \"An error has occurred\")\n    this[FiberFailureId] = FiberFailureId\n    this[FiberFailureCauseId] = cause\n\n    this.name = head ? `(FiberFailure) ${head.name}` : \"FiberFailure\"\n    if (head?.stack) {\n      this.stack = head.stack\n    }\n  }\n\n  toJSON(): unknown {\n    return {\n      _id: \"FiberFailure\",\n      cause: this[FiberFailureCauseId].toJSON()\n    }\n  }\n\n  toString(): string {\n    return \"(FiberFailure) \" + InternalCause.pretty(this[FiberFailureCauseId], { renderErrorCause: true })\n  }\n  [Inspectable.NodeInspectSymbol](): unknown {\n    return this.toString()\n  }\n}\n\n/** @internal */\nexport const fiberFailure = <E>(cause: Cause.Cause<E>): Runtime.FiberFailure => {\n  const limit = Error.stackTraceLimit\n  Error.stackTraceLimit = 0\n  const error = new FiberFailureImpl(cause)\n  Error.stackTraceLimit = limit\n  return error\n}\n\n/** @internal */\nexport const isFiberFailure = (u: unknown): u is Runtime.FiberFailure => Predicate.hasProperty(u, FiberFailureId)\n\nconst fastPath = <A, E, R>(effect: Effect.Effect<A, E, R>): Exit.Exit<A, E> | undefined => {\n  const op = effect as core.Primitive\n  switch (op._op) {\n    case \"Failure\":\n    case \"Success\": {\n      // @ts-expect-error\n      return op\n    }\n    case \"Left\": {\n      return core.exitFail(op.left)\n    }\n    case \"Right\": {\n      return core.exitSucceed(op.right)\n    }\n    case \"Some\": {\n      return core.exitSucceed(op.value)\n    }\n    case \"None\": {\n      // @ts-expect-error\n      return core.exitFail(core.NoSuchElementException())\n    }\n  }\n}\n\n/** @internal */\nexport const unsafeRunSyncExit: {\n  <A, E, R>(runtime: Runtime.Runtime<R>, effect: Effect.Effect<A, E, R>): Exit.Exit<A, E>\n  <R>(runtime: Runtime.Runtime<R>): <A, E>(effect: Effect.Effect<A, E, R>) => Exit.Exit<A, E>\n} = makeDual((runtime, effect) => {\n  const op = fastPath(effect)\n  if (op) {\n    return op\n  }\n  const scheduler = new scheduler_.SyncScheduler()\n  const fiberRuntime = unsafeFork(runtime)(effect, { scheduler })\n  scheduler.flush()\n  const result = fiberRuntime.unsafePoll()\n  if (result) {\n    return result\n  }\n  return core.exitDie(core.capture(asyncFiberException(fiberRuntime), core.currentSpanFromFiber(fiberRuntime)))\n})\n\n/** @internal */\nexport const unsafeRunPromise: {\n  <R>(runtime: Runtime.Runtime<R>): <A, E>(\n    effect: Effect.Effect<A, E, R>,\n    options?: {\n      readonly signal?: AbortSignal | undefined\n    } | undefined\n  ) => Promise<A>\n  <R, A, E>(\n    runtime: Runtime.Runtime<R>,\n    effect: Effect.Effect<A, E, R>,\n    options?: {\n      readonly signal?: AbortSignal | undefined\n    } | undefined\n  ): Promise<A>\n} = makeDual((\n  runtime,\n  effect,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n  } | undefined\n) =>\n  unsafeRunPromiseExit(runtime, effect, options).then((result) => {\n    switch (result._tag) {\n      case OpCodes.OP_SUCCESS: {\n        return result.effect_instruction_i0\n      }\n      case OpCodes.OP_FAILURE: {\n        throw fiberFailure(result.effect_instruction_i0)\n      }\n    }\n  })\n)\n\n/** @internal */\nexport const unsafeRunPromiseExit: {\n  <R>(\n    runtime: Runtime.Runtime<R>\n  ): <A, E>(\n    effect: Effect.Effect<A, E, R>,\n    options?: { readonly signal?: AbortSignal | undefined } | undefined\n  ) => Promise<Exit.Exit<A, E>>\n  <R, A, E>(\n    runtime: Runtime.Runtime<R>,\n    effect: Effect.Effect<A, E, R>,\n    options?: { readonly signal?: AbortSignal | undefined } | undefined\n  ): Promise<Exit.Exit<A, E>>\n} = makeDual((\n  runtime,\n  effect,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n  } | undefined\n) =>\n  new Promise<Exit.Exit<any, any>>((resolve) => {\n    const op = fastPath(effect)\n    if (op) {\n      resolve(op)\n    }\n    const fiber = unsafeFork(runtime)(effect)\n    fiber.addObserver((exit) => {\n      resolve(exit)\n    })\n    if (options?.signal !== undefined) {\n      if (options.signal.aborted) {\n        fiber.unsafeInterruptAsFork(fiber.id())\n      } else {\n        options.signal.addEventListener(\"abort\", () => {\n          fiber.unsafeInterruptAsFork(fiber.id())\n        }, { once: true })\n      }\n    }\n  })\n)\n\n/** @internal */\nexport class RuntimeImpl<in R> implements Runtime.Runtime<R> {\n  constructor(\n    readonly context: Context.Context<R>,\n    readonly runtimeFlags: RuntimeFlags.RuntimeFlags,\n    readonly fiberRefs: FiberRefs.FiberRefs\n  ) {}\n\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const make = <R>(\n  options: {\n    readonly context: Context.Context<R>\n    readonly runtimeFlags: RuntimeFlags.RuntimeFlags\n    readonly fiberRefs: FiberRefs.FiberRefs\n  }\n): Runtime.Runtime<R> => new RuntimeImpl(options.context, options.runtimeFlags, options.fiberRefs)\n\n/** @internal */\nexport const runtime = <R>(): Effect.Effect<Runtime.Runtime<R>, never, R> =>\n  core.withFiberRuntime((state, status) =>\n    core.succeed(\n      new RuntimeImpl<R>(\n        state.getFiberRef(core.currentContext as unknown as FiberRef.FiberRef<Context.Context<R>>),\n        status.runtimeFlags,\n        state.getFiberRefs()\n      )\n    )\n  )\n\n/** @internal */\nexport const defaultRuntimeFlags: RuntimeFlags.RuntimeFlags = runtimeFlags.make(\n  runtimeFlags.Interruption,\n  runtimeFlags.CooperativeYielding,\n  runtimeFlags.RuntimeMetrics\n)\n\n/** @internal */\nexport const defaultRuntime = make({\n  context: Context.empty(),\n  runtimeFlags: defaultRuntimeFlags,\n  fiberRefs: FiberRefs.empty()\n})\n\n/** @internal */\nexport const updateRuntimeFlags: {\n  (\n    f: (flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags\n  ): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R>(self: Runtime.Runtime<R>, f: (flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags): Runtime.Runtime<R>\n} = dual(\n  2,\n  <R>(self: Runtime.Runtime<R>, f: (flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags) =>\n    make({\n      context: self.context,\n      runtimeFlags: f(self.runtimeFlags),\n      fiberRefs: self.fiberRefs\n    })\n)\n\n/** @internal */\nexport const disableRuntimeFlag: {\n  (flag: RuntimeFlags.RuntimeFlag): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R>(self: Runtime.Runtime<R>, flag: RuntimeFlags.RuntimeFlag): Runtime.Runtime<R>\n} = dual(\n  2,\n  <R>(self: Runtime.Runtime<R>, flag: RuntimeFlags.RuntimeFlag) => updateRuntimeFlags(self, runtimeFlags.disable(flag))\n)\n\n/** @internal */\nexport const enableRuntimeFlag: {\n  (flag: RuntimeFlags.RuntimeFlag): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R>(self: Runtime.Runtime<R>, flag: RuntimeFlags.RuntimeFlag): Runtime.Runtime<R>\n} = dual(\n  2,\n  <R>(self: Runtime.Runtime<R>, flag: RuntimeFlags.RuntimeFlag) => updateRuntimeFlags(self, runtimeFlags.enable(flag))\n)\n\n/** @internal */\nexport const updateContext: {\n  <R, R2>(f: (context: Context.Context<R>) => Context.Context<R2>): (self: Runtime.Runtime<R>) => Runtime.Runtime<R2>\n  <R, R2>(self: Runtime.Runtime<R>, f: (context: Context.Context<R>) => Context.Context<R2>): Runtime.Runtime<R2>\n} = dual(\n  2,\n  <R, R2>(self: Runtime.Runtime<R>, f: (context: Context.Context<R>) => Context.Context<R2>) =>\n    make({\n      context: f(self.context),\n      runtimeFlags: self.runtimeFlags,\n      fiberRefs: self.fiberRefs\n    })\n)\n\n/** @internal */\nexport const provideService: {\n  <I, S>(tag: Context.Tag<I, S>, service: S): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R | I>\n  <R, I, S>(self: Runtime.Runtime<R>, tag: Context.Tag<I, S>, service: S): Runtime.Runtime<R | I>\n} = dual(\n  3,\n  <R, I, S>(self: Runtime.Runtime<R>, tag: Context.Tag<I, S>, service: S) =>\n    updateContext(self, Context.add(tag, service))\n)\n\n/** @internal */\nexport const updateFiberRefs: {\n  (f: (fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R>(self: Runtime.Runtime<R>, f: (fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs): Runtime.Runtime<R>\n} = dual(\n  2,\n  <R>(self: Runtime.Runtime<R>, f: (fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs): Runtime.Runtime<R> =>\n    make({\n      context: self.context,\n      runtimeFlags: self.runtimeFlags,\n      fiberRefs: f(self.fiberRefs)\n    })\n)\n\n/** @internal */\nexport const setFiberRef: {\n  <A>(fiberRef: FiberRef.FiberRef<A>, value: A): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R, A>(self: Runtime.Runtime<R>, fiberRef: FiberRef.FiberRef<A>, value: A): Runtime.Runtime<R>\n} = dual(\n  3,\n  <R, A>(self: Runtime.Runtime<R>, fiberRef: FiberRef.FiberRef<A>, value: A): Runtime.Runtime<R> =>\n    updateFiberRefs(\n      self,\n      FiberRefs.updateAs({\n        fiberId: FiberId.none,\n        fiberRef,\n        value\n      })\n    )\n)\n\n/** @internal */\nexport const deleteFiberRef: {\n  <A>(fiberRef: FiberRef.FiberRef<A>): <R>(self: Runtime.Runtime<R>) => Runtime.Runtime<R>\n  <R, A>(self: Runtime.Runtime<R>, fiberRef: FiberRef.FiberRef<A>): Runtime.Runtime<R>\n} = dual(\n  2,\n  <R, A>(self: Runtime.Runtime<R>, fiberRef: FiberRef.FiberRef<A>): Runtime.Runtime<R> =>\n    updateFiberRefs(self, FiberRefs.delete(fiberRef))\n)\n\n/** @internal */\nexport const unsafeRunEffect = unsafeRunCallback(defaultRuntime)\n\n/** @internal */\nexport const unsafeForkEffect = unsafeFork(defaultRuntime)\n\n/** @internal */\nexport const unsafeRunPromiseEffect = unsafeRunPromise(defaultRuntime)\n\n/** @internal */\nexport const unsafeRunPromiseExitEffect = unsafeRunPromiseExit(defaultRuntime)\n\n/** @internal */\nexport const unsafeRunSyncEffect = unsafeRunSync(defaultRuntime)\n\n/** @internal */\nexport const unsafeRunSyncExitEffect = unsafeRunSyncExit(defaultRuntime)\n\n// circular with Effect\n\n/** @internal */\nexport const asyncEffect = <A, E, R, R3, E2, R2>(\n  register: (\n    callback: (_: Effect.Effect<A, E, R>) => void\n  ) => Effect.Effect<Effect.Effect<void, never, R3> | void, E2, R2>\n): Effect.Effect<A, E | E2, R | R2 | R3> =>\n  core.suspend(() => {\n    let cleanup: Effect.Effect<void, never, R3> | void = undefined\n    return core.flatMap(\n      core.deferredMake<A, E | E2>(),\n      (deferred) =>\n        core.flatMap(runtime<R | R2 | R3>(), (runtime) =>\n          core.uninterruptibleMask((restore) =>\n            core.zipRight(\n              FiberRuntime.fork(restore(\n                core.matchCauseEffect(\n                  register((cb) => unsafeRunCallback(runtime)(core.intoDeferred(cb, deferred))),\n                  {\n                    onFailure: (cause) => core.deferredFailCause(deferred, cause),\n                    onSuccess: (cleanup_) => {\n                      cleanup = cleanup_\n                      return core.void\n                    }\n                  }\n                )\n              )),\n              restore(core.onInterrupt(core.deferredAwait(deferred), () => cleanup ?? core.void))\n            )\n          ))\n    )\n  })\n", "/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport * as core from \"./internal/core.js\"\nimport * as internal from \"./internal/data.js\"\nimport { StructuralPrototype } from \"./internal/effectable.js\"\nimport * as Predicate from \"./Predicate.js\"\nimport type * as Types from \"./Types.js\"\nimport type { Unify } from \"./Unify.js\"\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Case {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Constructor<A, Tag extends keyof A = never> {\n    (\n      args: Types.Equals<Omit<A, Tag>, {}> extends true ? void\n        : { readonly [P in keyof A as P extends Tag ? never : P]: A[P] }\n    ): A\n  }\n}\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Data, Equal } from \"effect\"\n *\n * const alice = Data.struct({ name: \"Alice\", age: 30 })\n *\n * const bob = Data.struct({ name: \"Bob\", age: 40 })\n *\n * assert.deepStrictEqual(Equal.equals(alice, alice), true)\n * assert.deepStrictEqual(Equal.equals(alice, Data.struct({ name: \"Alice\", age: 30 })), true)\n *\n * assert.deepStrictEqual(Equal.equals(alice, { name: \"Alice\", age: 30 }), false)\n * assert.deepStrictEqual(Equal.equals(alice, bob), false)\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const struct: <A extends Record<string, any>>(a: A) => { readonly [P in keyof A]: A[P] } = internal.struct\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const unsafeStruct = <A extends Record<string, any>>(as: A): { readonly [P in keyof A]: A[P] } =>\n  Object.setPrototypeOf(as, StructuralPrototype)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Data, Equal } from \"effect\"\n *\n * const alice = Data.tuple(\"Alice\", 30)\n *\n * const bob = Data.tuple(\"Bob\", 40)\n *\n * assert.deepStrictEqual(Equal.equals(alice, alice), true)\n * assert.deepStrictEqual(Equal.equals(alice, Data.tuple(\"Alice\", 30)), true)\n *\n * assert.deepStrictEqual(Equal.equals(alice, [\"Alice\", 30]), false)\n * assert.deepStrictEqual(Equal.equals(alice, bob), false)\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const tuple = <As extends ReadonlyArray<any>>(...as: As): Readonly<As> => unsafeArray(as)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Data, Equal } from \"effect\"\n *\n * const alice = Data.struct({ name: \"Alice\", age: 30 })\n * const bob = Data.struct({ name: \"Bob\", age: 40 })\n *\n * const persons = Data.array([alice, bob])\n *\n * assert.deepStrictEqual(\n *   Equal.equals(\n *     persons,\n *     Data.array([\n *       Data.struct({ name: \"Alice\", age: 30 }),\n *       Data.struct({ name: \"Bob\", age: 40 })\n *     ])\n *   ),\n *   true\n * )\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const array = <As extends ReadonlyArray<any>>(as: As): Readonly<As> => unsafeArray(as.slice(0) as unknown as As)\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const unsafeArray = <As extends ReadonlyArray<any>>(as: As): Readonly<As> =>\n  Object.setPrototypeOf(as, internal.ArrayProto)\n\nconst _case = <A>(): Case.Constructor<A> => (args) =>\n  (args === undefined ? Object.create(StructuralPrototype) : struct(args)) as any\n\nexport {\n  /**\n   * Provides a constructor for the specified `Case`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Data, Equal } from \"effect\"\n   *\n   * interface Person {\n   *   readonly name: string\n   * }\n   *\n   * // Creating a constructor for the specified Case\n   * const Person = Data.case<Person>()\n   *\n   * // Creating instances of Person\n   * const mike1 = Person({ name: \"Mike\" })\n   * const mike2 = Person({ name: \"Mike\" })\n   * const john = Person({ name: \"John\" })\n   *\n   * // Checking equality\n   * assert.deepStrictEqual(Equal.equals(mike1, mike2), true)\n   * assert.deepStrictEqual(Equal.equals(mike1, john), false)\n   *\n   * ```\n   * @since 2.0.0\n   * @category constructors\n   */\n  _case as case\n}\n\n/**\n * Provides a tagged constructor for the specified `Case`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Data } from \"effect\"\n *\n * interface Person {\n *   readonly _tag: \"Person\" // the tag\n *   readonly name: string\n * }\n *\n * const Person = Data.tagged<Person>(\"Person\")\n *\n * const mike = Person({ name: \"Mike\" })\n *\n * assert.deepEqual(mike, { _tag: \"Person\", name: \"Mike\" })\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const tagged = <A extends { readonly _tag: string }>(\n  tag: A[\"_tag\"]\n): Case.Constructor<A, \"_tag\"> =>\n(args) => {\n  const value = args === undefined ? Object.create(StructuralPrototype) : struct(args)\n  value._tag = tag\n  return value\n}\n\n/**\n * Provides a constructor for a Case Class.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Data, Equal } from \"effect\"\n *\n * class Person extends Data.Class<{ readonly name: string }> {}\n *\n * // Creating instances of Person\n * const mike1 = new Person({ name: \"Mike\" })\n * const mike2 = new Person({ name: \"Mike\" })\n * const john = new Person({ name: \"John\" })\n *\n * // Checking equality\n * assert.deepStrictEqual(Equal.equals(mike1, mike2), true)\n * assert.deepStrictEqual(Equal.equals(mike1, john), false)\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const Class: new<A extends Record<string, any> = {}>(\n  args: Types.Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A]: A[P] }\n) => Readonly<A> = internal.Structural as any\n\n/**\n * Provides a Tagged constructor for a Case Class.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Data, Equal } from \"effect\"\n *\n * class Person extends Data.TaggedClass(\"Person\")<{ readonly name: string }> {}\n *\n * // Creating instances of Person\n * const mike1 = new Person({ name: \"Mike\" })\n * const mike2 = new Person({ name: \"Mike\" })\n * const john = new Person({ name: \"John\" })\n *\n * // Checking equality\n * assert.deepStrictEqual(Equal.equals(mike1, mike2), true)\n * assert.deepStrictEqual(Equal.equals(mike1, john), false)\n *\n * assert.deepStrictEqual(mike1._tag, \"Person\")\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const TaggedClass = <Tag extends string>(\n  tag: Tag\n): new<A extends Record<string, any> = {}>(\n  args: Types.Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" ? never : P]: A[P] }\n) => Readonly<A> & { readonly _tag: Tag } => {\n  class Base extends Class<any> {\n    readonly _tag = tag\n  }\n  return Base as any\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Structural: new<A>(\n  args: Types.Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A]: A[P] }\n) => {} = internal.Structural as any\n\n/**\n * Create a tagged enum data type, which is a union of `Data` structs.\n *\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Data } from \"effect\"\n *\n * type HttpError = Data.TaggedEnum<{\n *   BadRequest: { readonly status: 400, readonly message: string }\n *   NotFound: { readonly status: 404, readonly message: string }\n * }>\n *\n * // Equivalent to:\n * type HttpErrorPlain =\n *   | {\n *     readonly _tag: \"BadRequest\"\n *     readonly status: 400\n *     readonly message: string\n *   }\n *   | {\n *     readonly _tag: \"NotFound\"\n *     readonly status: 404\n *     readonly message: string\n *   }\n * ```\n *\n * @since 2.0.0\n * @category models\n */\nexport type TaggedEnum<\n  A extends Record<string, Record<string, any>> & UntaggedChildren<A>\n> = keyof A extends infer Tag ?\n  Tag extends keyof A ? Types.Simplify<{ readonly _tag: Tag } & { readonly [K in keyof A[Tag]]: A[Tag][K] }>\n  : never\n  : never\n\ntype ChildrenAreTagged<A> = keyof A extends infer K ? K extends keyof A ? \"_tag\" extends keyof A[K] ? true\n    : false\n  : never\n  : never\n\ntype UntaggedChildren<A> = true extends ChildrenAreTagged<A>\n  ? \"It looks like you're trying to create a tagged enum, but one or more of its members already has a `_tag` property.\"\n  : unknown\n\n/**\n * @since 2.0.0\n */\nexport declare namespace TaggedEnum {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface WithGenerics<Count extends number> {\n    readonly taggedEnum: { readonly _tag: string }\n    readonly numberOfGenerics: Count\n\n    readonly A: unknown\n    readonly B: unknown\n    readonly C: unknown\n    readonly D: unknown\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export type Kind<\n    Z extends WithGenerics<number>,\n    A = unknown,\n    B = unknown,\n    C = unknown,\n    D = unknown\n  > = (Z & {\n    readonly A: A\n    readonly B: B\n    readonly C: C\n    readonly D: D\n  })[\"taggedEnum\"]\n\n  /**\n   * @since 2.0.0\n   */\n  export type Args<\n    A extends { readonly _tag: string },\n    K extends A[\"_tag\"],\n    E = Extract<A, { readonly _tag: K }>\n  > = { readonly [K in keyof E as K extends \"_tag\" ? never : K]: E[K] } extends infer T ? {} extends T ? void : T\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type Value<\n    A extends { readonly _tag: string },\n    K extends A[\"_tag\"]\n  > = Extract<A, { readonly _tag: K }>\n\n  /**\n   * @since 3.1.0\n   */\n  export type Constructor<A extends { readonly _tag: string }> = Types.Simplify<\n    & {\n      readonly [Tag in A[\"_tag\"]]: Case.Constructor<Extract<A, { readonly _tag: Tag }>, \"_tag\">\n    }\n    & {\n      readonly $is: <Tag extends A[\"_tag\"]>(tag: Tag) => (u: unknown) => u is Extract<A, { readonly _tag: Tag }>\n      readonly $match: {\n        <\n          const Cases extends {\n            readonly [Tag in A[\"_tag\"]]: (args: Extract<A, { readonly _tag: Tag }>) => any\n          }\n        >(\n          cases: Cases & { [K in Exclude<keyof Cases, A[\"_tag\"]>]: never }\n        ): (value: A) => Unify<ReturnType<Cases[A[\"_tag\"]]>>\n        <\n          const Cases extends {\n            readonly [Tag in A[\"_tag\"]]: (args: Extract<A, { readonly _tag: Tag }>) => any\n          }\n        >(\n          value: A,\n          cases: Cases & { [K in Exclude<keyof Cases, A[\"_tag\"]>]: never }\n        ): Unify<ReturnType<Cases[A[\"_tag\"]]>>\n      }\n    }\n  >\n\n  /**\n   * @since 3.2.0\n   */\n  export interface GenericMatchers<Z extends WithGenerics<number>> {\n    readonly $is: <Tag extends Z[\"taggedEnum\"][\"_tag\"]>(\n      tag: Tag\n    ) => {\n      <T extends TaggedEnum.Kind<Z, any, any, any, any>>(\n        u: T\n      ): u is T & { readonly _tag: Tag }\n      (u: unknown): u is Extract<TaggedEnum.Kind<Z>, { readonly _tag: Tag }>\n    }\n    readonly $match: {\n      <\n        A,\n        B,\n        C,\n        D,\n        Cases extends {\n          readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: (\n            args: Extract<TaggedEnum.Kind<Z, A, B, C, D>, { readonly _tag: Tag }>\n          ) => any\n        }\n      >(\n        cases: Cases & { [K in Exclude<keyof Cases, Z[\"taggedEnum\"][\"_tag\"]>]: never }\n      ): (self: TaggedEnum.Kind<Z, A, B, C, D>) => Unify<ReturnType<Cases[Z[\"taggedEnum\"][\"_tag\"]]>>\n      <\n        A,\n        B,\n        C,\n        D,\n        Cases extends {\n          readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: (\n            args: Extract<TaggedEnum.Kind<Z, A, B, C, D>, { readonly _tag: Tag }>\n          ) => any\n        }\n      >(\n        self: TaggedEnum.Kind<Z, A, B, C, D>,\n        cases: Cases & { [K in Exclude<keyof Cases, Z[\"taggedEnum\"][\"_tag\"]>]: never }\n      ): Unify<ReturnType<Cases[Z[\"taggedEnum\"][\"_tag\"]]>>\n    }\n  }\n}\n\n/**\n * Create a constructor for a tagged union of `Data` structs.\n *\n * You can also pass a `TaggedEnum.WithGenerics` if you want to add generics to\n * the constructor.\n *\n * @example\n * ```ts\n * import { Data } from \"effect\"\n *\n * const { BadRequest, NotFound } = Data.taggedEnum<\n *   | { readonly _tag: \"BadRequest\"; readonly status: 400; readonly message: string }\n *   | { readonly _tag: \"NotFound\"; readonly status: 404; readonly message: string }\n * >()\n *\n * const notFound = NotFound({ status: 404, message: \"Not Found\" })\n * ```\n *\n * @example\n * import { Data } from \"effect\"\n *\n * type MyResult<E, A> = Data.TaggedEnum<{\n *   Failure: { readonly error: E }\n *   Success: { readonly value: A }\n * }>\n * interface MyResultDefinition extends Data.TaggedEnum.WithGenerics<2> {\n *   readonly taggedEnum: MyResult<this[\"A\"], this[\"B\"]>\n * }\n * const { Failure, Success } = Data.taggedEnum<MyResultDefinition>()\n *\n * const success = Success({ value: 1 })\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const taggedEnum: {\n  /**\n   * Create a constructor for a tagged union of `Data` structs.\n   *\n   * You can also pass a `TaggedEnum.WithGenerics` if you want to add generics to\n   * the constructor.\n   *\n   * @example\n   * ```ts\n   * import { Data } from \"effect\"\n   *\n   * const { BadRequest, NotFound } = Data.taggedEnum<\n   *   | { readonly _tag: \"BadRequest\"; readonly status: 400; readonly message: string }\n   *   | { readonly _tag: \"NotFound\"; readonly status: 404; readonly message: string }\n   * >()\n   *\n   * const notFound = NotFound({ status: 404, message: \"Not Found\" })\n   * ```\n   *\n   * @example\n   * import { Data } from \"effect\"\n   *\n   * type MyResult<E, A> = Data.TaggedEnum<{\n   *   Failure: { readonly error: E }\n   *   Success: { readonly value: A }\n   * }>\n   * interface MyResultDefinition extends Data.TaggedEnum.WithGenerics<2> {\n   *   readonly taggedEnum: MyResult<this[\"A\"], this[\"B\"]>\n   * }\n   * const { Failure, Success } = Data.taggedEnum<MyResultDefinition>()\n   *\n   * const success = Success({ value: 1 })\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <Z extends TaggedEnum.WithGenerics<1>>(): Types.Simplify<\n    {\n      readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: <A>(\n        args: TaggedEnum.Args<\n          TaggedEnum.Kind<Z, A>,\n          Tag,\n          Extract<TaggedEnum.Kind<Z, A>, { readonly _tag: Tag }>\n        >\n      ) => TaggedEnum.Value<TaggedEnum.Kind<Z, A>, Tag>\n    } & TaggedEnum.GenericMatchers<Z>\n  >\n\n  /**\n   * Create a constructor for a tagged union of `Data` structs.\n   *\n   * You can also pass a `TaggedEnum.WithGenerics` if you want to add generics to\n   * the constructor.\n   *\n   * @example\n   * ```ts\n   * import { Data } from \"effect\"\n   *\n   * const { BadRequest, NotFound } = Data.taggedEnum<\n   *   | { readonly _tag: \"BadRequest\"; readonly status: 400; readonly message: string }\n   *   | { readonly _tag: \"NotFound\"; readonly status: 404; readonly message: string }\n   * >()\n   *\n   * const notFound = NotFound({ status: 404, message: \"Not Found\" })\n   * ```\n   *\n   * @example\n   * import { Data } from \"effect\"\n   *\n   * type MyResult<E, A> = Data.TaggedEnum<{\n   *   Failure: { readonly error: E }\n   *   Success: { readonly value: A }\n   * }>\n   * interface MyResultDefinition extends Data.TaggedEnum.WithGenerics<2> {\n   *   readonly taggedEnum: MyResult<this[\"A\"], this[\"B\"]>\n   * }\n   * const { Failure, Success } = Data.taggedEnum<MyResultDefinition>()\n   *\n   * const success = Success({ value: 1 })\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <Z extends TaggedEnum.WithGenerics<2>>(): Types.Simplify<\n    {\n      readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: <A, B>(\n        args: TaggedEnum.Args<\n          TaggedEnum.Kind<Z, A, B>,\n          Tag,\n          Extract<TaggedEnum.Kind<Z, A, B>, { readonly _tag: Tag }>\n        >\n      ) => TaggedEnum.Value<TaggedEnum.Kind<Z, A, B>, Tag>\n    } & TaggedEnum.GenericMatchers<Z>\n  >\n\n  /**\n   * Create a constructor for a tagged union of `Data` structs.\n   *\n   * You can also pass a `TaggedEnum.WithGenerics` if you want to add generics to\n   * the constructor.\n   *\n   * @example\n   * ```ts\n   * import { Data } from \"effect\"\n   *\n   * const { BadRequest, NotFound } = Data.taggedEnum<\n   *   | { readonly _tag: \"BadRequest\"; readonly status: 400; readonly message: string }\n   *   | { readonly _tag: \"NotFound\"; readonly status: 404; readonly message: string }\n   * >()\n   *\n   * const notFound = NotFound({ status: 404, message: \"Not Found\" })\n   * ```\n   *\n   * @example\n   * import { Data } from \"effect\"\n   *\n   * type MyResult<E, A> = Data.TaggedEnum<{\n   *   Failure: { readonly error: E }\n   *   Success: { readonly value: A }\n   * }>\n   * interface MyResultDefinition extends Data.TaggedEnum.WithGenerics<2> {\n   *   readonly taggedEnum: MyResult<this[\"A\"], this[\"B\"]>\n   * }\n   * const { Failure, Success } = Data.taggedEnum<MyResultDefinition>()\n   *\n   * const success = Success({ value: 1 })\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <Z extends TaggedEnum.WithGenerics<3>>(): Types.Simplify<\n    {\n      readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: <A, B, C>(\n        args: TaggedEnum.Args<\n          TaggedEnum.Kind<Z, A, B, C>,\n          Tag,\n          Extract<TaggedEnum.Kind<Z, A, B, C>, { readonly _tag: Tag }>\n        >\n      ) => TaggedEnum.Value<TaggedEnum.Kind<Z, A, B, C>, Tag>\n    } & TaggedEnum.GenericMatchers<Z>\n  >\n\n  /**\n   * Create a constructor for a tagged union of `Data` structs.\n   *\n   * You can also pass a `TaggedEnum.WithGenerics` if you want to add generics to\n   * the constructor.\n   *\n   * @example\n   * ```ts\n   * import { Data } from \"effect\"\n   *\n   * const { BadRequest, NotFound } = Data.taggedEnum<\n   *   | { readonly _tag: \"BadRequest\"; readonly status: 400; readonly message: string }\n   *   | { readonly _tag: \"NotFound\"; readonly status: 404; readonly message: string }\n   * >()\n   *\n   * const notFound = NotFound({ status: 404, message: \"Not Found\" })\n   * ```\n   *\n   * @example\n   * import { Data } from \"effect\"\n   *\n   * type MyResult<E, A> = Data.TaggedEnum<{\n   *   Failure: { readonly error: E }\n   *   Success: { readonly value: A }\n   * }>\n   * interface MyResultDefinition extends Data.TaggedEnum.WithGenerics<2> {\n   *   readonly taggedEnum: MyResult<this[\"A\"], this[\"B\"]>\n   * }\n   * const { Failure, Success } = Data.taggedEnum<MyResultDefinition>()\n   *\n   * const success = Success({ value: 1 })\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <Z extends TaggedEnum.WithGenerics<4>>(): Types.Simplify<\n    {\n      readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: <A, B, C, D>(\n        args: TaggedEnum.Args<\n          TaggedEnum.Kind<Z, A, B, C, D>,\n          Tag,\n          Extract<TaggedEnum.Kind<Z, A, B, C, D>, { readonly _tag: Tag }>\n        >\n      ) => TaggedEnum.Value<TaggedEnum.Kind<Z, A, B, C, D>, Tag>\n    } & TaggedEnum.GenericMatchers<Z>\n  >\n\n  /**\n   * Create a constructor for a tagged union of `Data` structs.\n   *\n   * You can also pass a `TaggedEnum.WithGenerics` if you want to add generics to\n   * the constructor.\n   *\n   * @example\n   * ```ts\n   * import { Data } from \"effect\"\n   *\n   * const { BadRequest, NotFound } = Data.taggedEnum<\n   *   | { readonly _tag: \"BadRequest\"; readonly status: 400; readonly message: string }\n   *   | { readonly _tag: \"NotFound\"; readonly status: 404; readonly message: string }\n   * >()\n   *\n   * const notFound = NotFound({ status: 404, message: \"Not Found\" })\n   * ```\n   *\n   * @example\n   * import { Data } from \"effect\"\n   *\n   * type MyResult<E, A> = Data.TaggedEnum<{\n   *   Failure: { readonly error: E }\n   *   Success: { readonly value: A }\n   * }>\n   * interface MyResultDefinition extends Data.TaggedEnum.WithGenerics<2> {\n   *   readonly taggedEnum: MyResult<this[\"A\"], this[\"B\"]>\n   * }\n   * const { Failure, Success } = Data.taggedEnum<MyResultDefinition>()\n   *\n   * const success = Success({ value: 1 })\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A extends { readonly _tag: string }>(): TaggedEnum.Constructor<A>\n} = () =>\n  new Proxy({}, {\n    get(_target, tag, _receiver) {\n      if (tag === \"$is\") {\n        return Predicate.isTagged\n      } else if (tag === \"$match\") {\n        return taggedMatch\n      }\n      return tagged(tag as string)\n    }\n  }) as any\n\nfunction taggedMatch<\n  A extends { readonly _tag: string },\n  Cases extends {\n    readonly [K in A[\"_tag\"]]: (args: Extract<A, { readonly _tag: K }>) => any\n  }\n>(self: A, cases: Cases): ReturnType<Cases[A[\"_tag\"]]>\nfunction taggedMatch<\n  A extends { readonly _tag: string },\n  Cases extends {\n    readonly [K in A[\"_tag\"]]: (args: Extract<A, { readonly _tag: K }>) => any\n  }\n>(cases: Cases): (value: A) => ReturnType<Cases[A[\"_tag\"]]>\nfunction taggedMatch<\n  A extends { readonly _tag: string },\n  Cases extends {\n    readonly [K in A[\"_tag\"]]: (args: Extract<A, { readonly _tag: K }>) => any\n  }\n>(): any {\n  if (arguments.length === 1) {\n    const cases = arguments[0] as Cases\n    return function(value: A): ReturnType<Cases[A[\"_tag\"]]> {\n      return cases[value._tag as A[\"_tag\"]](value as any)\n    }\n  }\n  const value = arguments[0] as A\n  const cases = arguments[1] as Cases\n  return cases[value._tag as A[\"_tag\"]](value as any)\n}\n\n/**\n * Provides a constructor for a Case Class.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const Error: new<A extends Record<string, any> = {}>(\n  args: Types.Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A]: A[P] }\n) => Cause.YieldableError & Readonly<A> = (function() {\n  const plainArgsSymbol = Symbol.for(\"effect/Data/Error/plainArgs\")\n  const O = {\n    BaseEffectError: class extends core.YieldableError {\n      constructor(args: any) {\n        super(args?.message, args?.cause ? { cause: args.cause } : undefined)\n        if (args) {\n          Object.assign(this, args)\n          // @effect-diagnostics-next-line floatingEffect:off\n          Object.defineProperty(this, plainArgsSymbol, { value: args, enumerable: false })\n        }\n      }\n      toJSON() {\n        return { ...(this as any)[plainArgsSymbol], ...this }\n      }\n    } as any\n  }\n  return O.BaseEffectError\n})()\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const TaggedError = <Tag extends string>(tag: Tag): new<A extends Record<string, any> = {}>(\n  args: Types.Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" ? never : P]: A[P] }\n) => Cause.YieldableError & { readonly _tag: Tag } & Readonly<A> => {\n  const O = {\n    BaseEffectError: class extends Error<{}> {\n      readonly _tag = tag\n    }\n  }\n  ;(O.BaseEffectError.prototype as any).name = tag\n  return O.BaseEffectError as any\n}\n", "/**\n * @since 3.10.0\n */\n\nimport * as Arr from \"./Array.js\"\nimport * as errors_ from \"./internal/schema/errors.js\"\nimport * as schemaId_ from \"./internal/schema/schemaId.js\"\nimport * as Option from \"./Option.js\"\nimport * as ParseResult from \"./ParseResult.js\"\nimport * as Predicate from \"./Predicate.js\"\nimport * as Record from \"./Record.js\"\nimport type * as Schema from \"./Schema.js\"\nimport * as AST from \"./SchemaAST.js\"\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchemaAnnotations {\n  title?: string\n  description?: string\n  default?: unknown\n  examples?: Array<unknown>\n}\n\n/**\n * @category model\n * @since 3.11.5\n */\nexport interface JsonSchema7Never extends JsonSchemaAnnotations {\n  $id: \"/schemas/never\"\n  not: {}\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7Any extends JsonSchemaAnnotations {\n  $id: \"/schemas/any\"\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7Unknown extends JsonSchemaAnnotations {\n  $id: \"/schemas/unknown\"\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7Void extends JsonSchemaAnnotations {\n  $id: \"/schemas/void\"\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7object extends JsonSchemaAnnotations {\n  $id: \"/schemas/object\"\n  anyOf: [\n    { type: \"object\" },\n    { type: \"array\" }\n  ]\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7empty extends JsonSchemaAnnotations {\n  $id: \"/schemas/%7B%7D\"\n  anyOf: [\n    { type: \"object\" },\n    { type: \"array\" }\n  ]\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7Ref extends JsonSchemaAnnotations {\n  $ref: string\n}\n\n/**\n * @category model\n * @since 3.11.7\n */\nexport interface JsonSchema7Null extends JsonSchemaAnnotations {\n  type: \"null\"\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7String extends JsonSchemaAnnotations {\n  type: \"string\"\n  minLength?: number\n  maxLength?: number\n  pattern?: string\n  format?: string\n  contentMediaType?: string\n  allOf?: Array<{\n    minLength?: number\n    maxLength?: number\n    pattern?: string\n  }>\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7Numeric extends JsonSchemaAnnotations {\n  minimum?: number\n  exclusiveMinimum?: number\n  maximum?: number\n  exclusiveMaximum?: number\n  multipleOf?: number\n  allOf?: Array<{\n    minimum?: number\n    exclusiveMinimum?: number\n    maximum?: number\n    exclusiveMaximum?: number\n    multipleOf?: number\n  }>\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7Number extends JsonSchema7Numeric {\n  type: \"number\"\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7Integer extends JsonSchema7Numeric {\n  type: \"integer\"\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7Boolean extends JsonSchemaAnnotations {\n  type: \"boolean\"\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7Array extends JsonSchemaAnnotations {\n  type: \"array\"\n  items?: JsonSchema7 | Array<JsonSchema7>\n  minItems?: number\n  maxItems?: number\n  additionalItems?: JsonSchema7 | boolean\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7Enum extends JsonSchemaAnnotations {\n  type?: \"string\" | \"number\" | \"boolean\"\n  enum: Array<string | number | boolean>\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7Enums extends JsonSchemaAnnotations {\n  $comment: \"/schemas/enums\"\n  anyOf: Array<{\n    type: \"string\" | \"number\"\n    title: string\n    enum: [string | number]\n  }>\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7AnyOf extends JsonSchemaAnnotations {\n  anyOf: Array<JsonSchema7>\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface JsonSchema7Object extends JsonSchemaAnnotations {\n  type: \"object\"\n  required: Array<string>\n  properties: Record<string, JsonSchema7>\n  additionalProperties?: boolean | JsonSchema7\n  patternProperties?: Record<string, JsonSchema7>\n  propertyNames?: JsonSchema7\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport type JsonSchema7 =\n  | JsonSchema7Never\n  | JsonSchema7Any\n  | JsonSchema7Unknown\n  | JsonSchema7Void\n  | JsonSchema7object\n  | JsonSchema7empty\n  | JsonSchema7Ref\n  | JsonSchema7Null\n  | JsonSchema7String\n  | JsonSchema7Number\n  | JsonSchema7Integer\n  | JsonSchema7Boolean\n  | JsonSchema7Array\n  | JsonSchema7Enum\n  | JsonSchema7Enums\n  | JsonSchema7AnyOf\n  | JsonSchema7Object\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport type JsonSchema7Root = JsonSchema7 & {\n  $schema?: string\n  $defs?: Record<string, JsonSchema7>\n}\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const make = <A, I, R>(schema: Schema.Schema<A, I, R>): JsonSchema7Root => {\n  const definitions: Record<string, any> = {}\n  const ast = AST.isTransformation(schema.ast) && isParseJsonTransformation(schema.ast.from)\n    // Special case top level `parseJson` transformations\n    ? schema.ast.to\n    : schema.ast\n  const jsonSchema = fromAST(ast, {\n    definitions\n  })\n  const out: JsonSchema7Root = {\n    $schema,\n    $defs: {},\n    ...jsonSchema\n  }\n  if (Record.isEmptyRecord(definitions)) {\n    delete out.$defs\n  } else {\n    out.$defs = definitions\n  }\n  return out\n}\n\ntype Target = \"jsonSchema7\" | \"jsonSchema2019-09\" | \"openApi3.1\"\n\ntype TopLevelReferenceStrategy = \"skip\" | \"keep\"\n\ntype AdditionalPropertiesStrategy = \"allow\" | \"strict\"\n\n/**\n * Returns a JSON Schema with additional options and definitions.\n *\n * **Warning**\n *\n * This function is experimental and subject to change.\n *\n * **Options**\n *\n * - `definitions`: A record of definitions that are included in the schema.\n * - `definitionPath`: The path to the definitions within the schema (defaults\n *   to \"#/$defs/\").\n * - `target`: Which spec to target. Possible values are:\n *   - `'jsonSchema7'`: JSON Schema draft-07 (default behavior).\n *   - `'jsonSchema2019-09'`: JSON Schema draft-2019-09.\n *   - `'openApi3.1'`: OpenAPI 3.1.\n * - `topLevelReferenceStrategy`: Controls the handling of the top-level\n *   reference. Possible values are:\n *   - `\"keep\"`: Keep the top-level reference (default behavior).\n *   - `\"skip\"`: Skip the top-level reference.\n * - `additionalPropertiesStrategy`: Controls the handling of additional properties. Possible values are:\n *   - `\"strict\"`: Disallow additional properties (default behavior).\n *   - `\"allow\"`: Allow additional properties.\n *\n * @category encoding\n * @since 3.11.5\n * @experimental\n */\nexport const fromAST = (ast: AST.AST, options: {\n  readonly definitions: Record<string, JsonSchema7>\n  readonly definitionPath?: string | undefined\n  readonly target?: Target | undefined\n  readonly topLevelReferenceStrategy?: TopLevelReferenceStrategy | undefined\n  readonly additionalPropertiesStrategy?: AdditionalPropertiesStrategy | undefined\n}): JsonSchema7 => {\n  const definitionPath = options.definitionPath ?? \"#/$defs/\"\n  const getRef = (id: string) => definitionPath + id\n  const target = options.target ?? \"jsonSchema7\"\n  const topLevelReferenceStrategy = options.topLevelReferenceStrategy ?? \"keep\"\n  const additionalPropertiesStrategy = options.additionalPropertiesStrategy ?? \"strict\"\n  return go(\n    ast,\n    options.definitions,\n    \"handle-identifier\",\n    [],\n    {\n      getRef,\n      target,\n      topLevelReferenceStrategy,\n      additionalPropertiesStrategy\n    },\n    \"handle-annotation\",\n    \"handle-errors\"\n  )\n}\n\nconst constNever: JsonSchema7Never = {\n  $id: \"/schemas/never\",\n  not: {}\n}\n\nconst constAny: JsonSchema7Any = {\n  $id: \"/schemas/any\"\n}\n\nconst constUnknown: JsonSchema7Unknown = {\n  $id: \"/schemas/unknown\"\n}\n\nconst constVoid: JsonSchema7Void = {\n  $id: \"/schemas/void\"\n}\n\nconst constObject: JsonSchema7object = {\n  $id: \"/schemas/object\",\n  \"anyOf\": [\n    { \"type\": \"object\" },\n    { \"type\": \"array\" }\n  ]\n}\n\nconst constEmptyStruct: JsonSchema7empty = {\n  $id: \"/schemas/%7B%7D\",\n  \"anyOf\": [\n    { \"type\": \"object\" },\n    { \"type\": \"array\" }\n  ]\n}\n\nconst $schema = \"http://json-schema.org/draft-07/schema#\"\n\nfunction getRawDescription(annotated: AST.Annotated | undefined): string | undefined {\n  if (annotated !== undefined) return Option.getOrUndefined(AST.getDescriptionAnnotation(annotated))\n}\n\nfunction getRawTitle(annotated: AST.Annotated | undefined): string | undefined {\n  if (annotated !== undefined) return Option.getOrUndefined(AST.getTitleAnnotation(annotated))\n}\n\nfunction getRawDefault(annotated: AST.Annotated | undefined): Option.Option<unknown> {\n  if (annotated !== undefined) return AST.getDefaultAnnotation(annotated)\n  return Option.none()\n}\n\nfunction encodeDefault(ast: AST.AST, def: unknown): Option.Option<unknown> {\n  const getOption = ParseResult.getOption(ast, false)\n  return getOption(def)\n}\n\nfunction getRawExamples(annotated: AST.Annotated | undefined): ReadonlyArray<unknown> | undefined {\n  if (annotated !== undefined) return Option.getOrUndefined(AST.getExamplesAnnotation(annotated))\n}\n\nfunction encodeExamples(ast: AST.AST, examples: ReadonlyArray<unknown>): Array<unknown> | undefined {\n  const getOption = ParseResult.getOption(ast, false)\n  const out = Arr.filterMap(examples, (e) => getOption(e))\n  return out.length > 0 ? out : undefined\n}\n\nfunction filterBuiltIn(ast: AST.AST, annotation: string | undefined, key: symbol): string | undefined {\n  if (annotation !== undefined) {\n    switch (ast._tag) {\n      case \"StringKeyword\":\n        return annotation !== AST.stringKeyword.annotations[key] ? annotation : undefined\n      case \"NumberKeyword\":\n        return annotation !== AST.numberKeyword.annotations[key] ? annotation : undefined\n      case \"BooleanKeyword\":\n        return annotation !== AST.booleanKeyword.annotations[key] ? annotation : undefined\n    }\n  }\n  return annotation\n}\n\nfunction pruneJsonSchemaAnnotations(\n  ast: AST.AST,\n  description: string | undefined,\n  title: string | undefined,\n  def: Option.Option<unknown>,\n  examples: ReadonlyArray<unknown> | undefined\n): JsonSchemaAnnotations | undefined {\n  const out: JsonSchemaAnnotations = {}\n  if (description !== undefined) out.description = description\n  if (title !== undefined) out.title = title\n  if (Option.isSome(def)) {\n    const o = encodeDefault(ast, def.value)\n    if (Option.isSome(o)) {\n      out.default = o.value\n    }\n  }\n  if (examples !== undefined) {\n    const encodedExamples = encodeExamples(ast, examples)\n    if (encodedExamples !== undefined) {\n      out.examples = encodedExamples\n    }\n  }\n  if (Object.keys(out).length === 0) {\n    return undefined\n  }\n  return out\n}\n\nfunction getContextJsonSchemaAnnotations(ast: AST.AST, annotated: AST.Annotated): JsonSchemaAnnotations | undefined {\n  return pruneJsonSchemaAnnotations(\n    ast,\n    getRawDescription(annotated),\n    getRawTitle(annotated),\n    getRawDefault(annotated),\n    getRawExamples(annotated)\n  )\n}\n\nfunction getJsonSchemaAnnotations(ast: AST.AST): JsonSchemaAnnotations | undefined {\n  return pruneJsonSchemaAnnotations(\n    ast,\n    filterBuiltIn(ast, getRawDescription(ast), AST.DescriptionAnnotationId),\n    filterBuiltIn(ast, getRawTitle(ast), AST.TitleAnnotationId),\n    getRawDefault(ast),\n    getRawExamples(ast)\n  )\n}\n\nfunction mergeJsonSchemaAnnotations(\n  jsonSchema: JsonSchema7,\n  jsonSchemaAnnotations: JsonSchemaAnnotations | undefined\n): JsonSchema7 {\n  if (jsonSchemaAnnotations) {\n    if (\"$ref\" in jsonSchema) {\n      return { allOf: [jsonSchema], ...jsonSchemaAnnotations } as any\n    }\n    return { ...jsonSchema, ...jsonSchemaAnnotations }\n  }\n  return jsonSchema\n}\n\nconst pruneUndefined = (ast: AST.AST): AST.AST | undefined => {\n  if (Option.isNone(AST.getJSONSchemaAnnotation(ast))) {\n    return AST.pruneUndefined(ast, pruneUndefined, (ast) => pruneUndefined(ast.from))\n  }\n}\n\nconst isParseJsonTransformation = (ast: AST.AST): boolean =>\n  ast.annotations[AST.SchemaIdAnnotationId] === AST.ParseJsonSchemaId\n\nconst isOverrideAnnotation = (ast: AST.AST, jsonSchema: JsonSchema7): boolean => {\n  if (AST.isRefinement(ast)) {\n    const schemaId = ast.annotations[AST.SchemaIdAnnotationId]\n    if (schemaId === schemaId_.IntSchemaId) {\n      return \"type\" in jsonSchema && jsonSchema.type !== \"integer\"\n    }\n  }\n  return (\"type\" in jsonSchema) || (\"oneOf\" in jsonSchema) || (\"anyOf\" in jsonSchema) || (\"$ref\" in jsonSchema)\n}\n\nconst mergeRefinements = (from: any, jsonSchema: any, ast: AST.AST): any => {\n  const out: any = { ...from, ...getJsonSchemaAnnotations(ast), ...jsonSchema }\n  out.allOf ??= []\n\n  const handle = (name: string, filter: (i: any) => boolean) => {\n    if (name in jsonSchema && name in from) {\n      out.allOf.unshift({ [name]: from[name] })\n      out.allOf = out.allOf.filter(filter)\n    }\n  }\n\n  handle(\"minLength\", (i) => i.minLength > jsonSchema.minLength)\n  handle(\"maxLength\", (i) => i.maxLength < jsonSchema.maxLength)\n  handle(\"pattern\", (i) => i.pattern !== jsonSchema.pattern)\n  handle(\"minItems\", (i) => i.minItems > jsonSchema.minItems)\n  handle(\"maxItems\", (i) => i.maxItems < jsonSchema.maxItems)\n  handle(\"minimum\", (i) => i.minimum > jsonSchema.minimum)\n  handle(\"maximum\", (i) => i.maximum < jsonSchema.maximum)\n  handle(\"exclusiveMinimum\", (i) => i.exclusiveMinimum > jsonSchema.exclusiveMinimum)\n  handle(\"exclusiveMaximum\", (i) => i.exclusiveMaximum < jsonSchema.exclusiveMaximum)\n  handle(\"multipleOf\", (i) => i.multipleOf !== jsonSchema.multipleOf)\n\n  if (out.allOf.length === 0) {\n    delete out.allOf\n  }\n  return out\n}\n\ntype GoOptions = {\n  readonly getRef: (id: string) => string\n  readonly target: Target\n  readonly topLevelReferenceStrategy: TopLevelReferenceStrategy\n  readonly additionalPropertiesStrategy: AdditionalPropertiesStrategy\n}\n\nfunction isContentSchemaSupported(options: GoOptions): boolean {\n  switch (options.target) {\n    case \"jsonSchema7\":\n      return false\n    case \"jsonSchema2019-09\":\n    case \"openApi3.1\":\n      return true\n  }\n}\n\nfunction getAdditionalProperties(options: GoOptions): boolean {\n  switch (options.additionalPropertiesStrategy) {\n    case \"allow\":\n      return true\n    case \"strict\":\n      return false\n  }\n}\n\nfunction addASTAnnotations(jsonSchema: JsonSchema7, ast: AST.AST): JsonSchema7 {\n  return addAnnotations(jsonSchema, getJsonSchemaAnnotations(ast))\n}\n\nfunction addAnnotations(jsonSchema: JsonSchema7, annotations: JsonSchemaAnnotations | undefined): JsonSchema7 {\n  if (annotations === undefined || Object.keys(annotations).length === 0) {\n    return jsonSchema\n  }\n  if (\"$ref\" in jsonSchema) {\n    return { allOf: [jsonSchema], ...annotations } as any\n  }\n  return { ...jsonSchema, ...annotations }\n}\n\nfunction getIdentifierAnnotation(ast: AST.AST): string | undefined {\n  const identifier = Option.getOrUndefined(AST.getJSONIdentifier(ast))\n  if (identifier === undefined) {\n    if (AST.isSuspend(ast)) {\n      return getIdentifierAnnotation(ast.f())\n    }\n    if (AST.isTransformation(ast) && AST.isTypeLiteral(ast.from) && AST.isDeclaration(ast.to)) {\n      const to = ast.to\n      const surrogate = AST.getSurrogateAnnotation(to)\n      if (Option.isSome(surrogate)) {\n        return getIdentifierAnnotation(to)\n      }\n    }\n  }\n  return identifier\n}\n\nfunction go(\n  ast: AST.AST,\n  $defs: Record<string, JsonSchema7>,\n  identifier: \"handle-identifier\" | \"ignore-identifier\",\n  path: ReadonlyArray<PropertyKey>,\n  options: GoOptions,\n  annotation: \"handle-annotation\" | \"ignore-annotation\",\n  errors: \"handle-errors\" | \"ignore-errors\"\n): JsonSchema7 {\n  if (\n    identifier === \"handle-identifier\" &&\n    (options.topLevelReferenceStrategy !== \"skip\" || AST.isSuspend(ast))\n  ) {\n    const id = getIdentifierAnnotation(ast)\n    if (id !== undefined) {\n      const escapedId = id.replace(/~/ig, \"~0\").replace(/\\//ig, \"~1\")\n      const out = { $ref: options.getRef(escapedId) }\n      if (!Record.has($defs, id)) {\n        $defs[id] = out\n        $defs[id] = go(ast, $defs, \"ignore-identifier\", path, options, \"handle-annotation\", errors)\n      }\n      return out\n    }\n  }\n  if (annotation === \"handle-annotation\") {\n    const hook = AST.getJSONSchemaAnnotation(ast)\n    if (Option.isSome(hook)) {\n      const handler = hook.value as JsonSchema7\n      if (isOverrideAnnotation(ast, handler)) {\n        switch (ast._tag) {\n          case \"Declaration\":\n            return addASTAnnotations(handler, ast)\n          default:\n            return handler\n        }\n      } else {\n        switch (ast._tag) {\n          case \"Refinement\": {\n            const t = AST.getTransformationFrom(ast)\n            if (t === undefined) {\n              return mergeRefinements(\n                go(ast.from, $defs, identifier, path, options, \"handle-annotation\", errors),\n                handler,\n                ast\n              )\n            } else {\n              return go(t, $defs, identifier, path, options, \"handle-annotation\", errors)\n            }\n          }\n          default:\n            return {\n              ...go(ast, $defs, identifier, path, options, \"ignore-annotation\", errors),\n              ...handler\n            } as any\n        }\n      }\n    }\n  }\n  const surrogate = AST.getSurrogateAnnotation(ast)\n  if (Option.isSome(surrogate)) {\n    return go(surrogate.value, $defs, identifier, path, options, \"handle-annotation\", errors)\n  }\n  switch (ast._tag) {\n    // Unsupported\n    case \"Declaration\":\n    case \"UndefinedKeyword\":\n    case \"BigIntKeyword\":\n    case \"UniqueSymbol\":\n    case \"SymbolKeyword\": {\n      if (errors === \"ignore-errors\") return addASTAnnotations(constAny, ast)\n      throw new Error(errors_.getJSONSchemaMissingAnnotationErrorMessage(path, ast))\n    }\n    case \"Suspend\": {\n      if (identifier === \"handle-identifier\") {\n        if (errors === \"ignore-errors\") return addASTAnnotations(constAny, ast)\n        throw new Error(errors_.getJSONSchemaMissingIdentifierAnnotationErrorMessage(path, ast))\n      }\n      return go(ast.f(), $defs, \"ignore-identifier\", path, options, \"handle-annotation\", errors)\n    }\n    // Primitives\n    case \"NeverKeyword\":\n      return addASTAnnotations(constNever, ast)\n    case \"VoidKeyword\":\n      return addASTAnnotations(constVoid, ast)\n    case \"UnknownKeyword\":\n      return addASTAnnotations(constUnknown, ast)\n    case \"AnyKeyword\":\n      return addASTAnnotations(constAny, ast)\n    case \"ObjectKeyword\":\n      return addASTAnnotations(constObject, ast)\n    case \"StringKeyword\":\n      return addASTAnnotations({ type: \"string\" }, ast)\n    case \"NumberKeyword\":\n      return addASTAnnotations({ type: \"number\" }, ast)\n    case \"BooleanKeyword\":\n      return addASTAnnotations({ type: \"boolean\" }, ast)\n    case \"Literal\": {\n      const literal = ast.literal\n      if (literal === null) {\n        return addASTAnnotations({ type: \"null\" }, ast)\n      } else if (Predicate.isString(literal)) {\n        return addASTAnnotations({ type: \"string\", enum: [literal] }, ast)\n      } else if (Predicate.isNumber(literal)) {\n        return addASTAnnotations({ type: \"number\", enum: [literal] }, ast)\n      } else if (Predicate.isBoolean(literal)) {\n        return addASTAnnotations({ type: \"boolean\", enum: [literal] }, ast)\n      }\n      if (errors === \"ignore-errors\") return addASTAnnotations(constAny, ast)\n      throw new Error(errors_.getJSONSchemaMissingAnnotationErrorMessage(path, ast))\n    }\n    case \"Enums\": {\n      const anyOf = ast.enums.map((e) => {\n        const type: \"string\" | \"number\" = Predicate.isNumber(e[1]) ? \"number\" : \"string\"\n        return { type, title: e[0], enum: [e[1]] }\n      })\n      return anyOf.length >= 1 ?\n        addASTAnnotations({\n          $comment: \"/schemas/enums\",\n          anyOf\n        }, ast) :\n        addASTAnnotations(constNever, ast)\n    }\n    case \"TupleType\": {\n      const elements = ast.elements.map((e, i) =>\n        mergeJsonSchemaAnnotations(\n          go(e.type, $defs, \"handle-identifier\", path.concat(i), options, \"handle-annotation\", errors),\n          getContextJsonSchemaAnnotations(e.type, e)\n        )\n      )\n      const rest = ast.rest.map((type) =>\n        mergeJsonSchemaAnnotations(\n          go(type.type, $defs, \"handle-identifier\", path, options, \"handle-annotation\", errors),\n          getContextJsonSchemaAnnotations(type.type, type)\n        )\n      )\n      const output: JsonSchema7Array = { type: \"array\" }\n      // ---------------------------------------------\n      // handle elements\n      // ---------------------------------------------\n      const len = ast.elements.length\n      if (len > 0) {\n        output.minItems = len - ast.elements.filter((element) => element.isOptional).length\n        output.items = elements\n      }\n      // ---------------------------------------------\n      // handle rest element\n      // ---------------------------------------------\n      const restLength = rest.length\n      if (restLength > 0) {\n        const head = rest[0]\n        const isHomogeneous = restLength === 1 && ast.elements.every((e) => e.type === ast.rest[0].type)\n        if (isHomogeneous) {\n          output.items = head\n        } else {\n          output.additionalItems = head\n        }\n\n        // ---------------------------------------------\n        // handle post rest elements\n        // ---------------------------------------------\n        if (restLength > 1) {\n          if (errors === \"ignore-errors\") return addASTAnnotations(constAny, ast)\n          throw new Error(errors_.getJSONSchemaUnsupportedPostRestElementsErrorMessage(path))\n        }\n      } else {\n        if (len > 0) {\n          output.additionalItems = false\n        } else {\n          output.maxItems = 0\n        }\n      }\n\n      return addASTAnnotations(output, ast)\n    }\n    case \"TypeLiteral\": {\n      if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {\n        return addASTAnnotations(constEmptyStruct, ast)\n      }\n      const output: JsonSchema7Object = {\n        type: \"object\",\n        required: [],\n        properties: {},\n        additionalProperties: getAdditionalProperties(options)\n      }\n      let patternProperties: JsonSchema7 | undefined = undefined\n      let propertyNames: JsonSchema7 | undefined = undefined\n      for (const is of ast.indexSignatures) {\n        const pruned = pruneUndefined(is.type) ?? is.type\n        const parameter = is.parameter\n        switch (parameter._tag) {\n          case \"StringKeyword\": {\n            output.additionalProperties = go(\n              pruned,\n              $defs,\n              \"handle-identifier\",\n              path,\n              options,\n              \"handle-annotation\",\n              errors\n            )\n            break\n          }\n          case \"TemplateLiteral\": {\n            patternProperties = go(pruned, $defs, \"handle-identifier\", path, options, \"handle-annotation\", errors)\n            propertyNames = {\n              type: \"string\",\n              pattern: AST.getTemplateLiteralRegExp(parameter).source\n            }\n            break\n          }\n          case \"Refinement\": {\n            patternProperties = go(pruned, $defs, \"handle-identifier\", path, options, \"handle-annotation\", errors)\n            propertyNames = go(parameter, $defs, \"handle-identifier\", path, options, \"handle-annotation\", errors)\n            break\n          }\n          case \"SymbolKeyword\": {\n            const indexSignaturePath = path.concat(\"[symbol]\")\n            output.additionalProperties = go(\n              pruned,\n              $defs,\n              \"handle-identifier\",\n              indexSignaturePath,\n              options,\n              \"handle-annotation\",\n              errors\n            )\n            propertyNames = go(\n              parameter,\n              $defs,\n              \"handle-identifier\",\n              indexSignaturePath,\n              options,\n              \"handle-annotation\",\n              errors\n            )\n            break\n          }\n        }\n      }\n      // ---------------------------------------------\n      // handle property signatures\n      // ---------------------------------------------\n      for (let i = 0; i < ast.propertySignatures.length; i++) {\n        const ps = ast.propertySignatures[i]\n        const name = ps.name\n        if (Predicate.isString(name)) {\n          const pruned = pruneUndefined(ps.type)\n          const type = pruned ?? ps.type\n          output.properties[name] = mergeJsonSchemaAnnotations(\n            go(type, $defs, \"handle-identifier\", path.concat(ps.name), options, \"handle-annotation\", errors),\n            getContextJsonSchemaAnnotations(type, ps)\n          )\n          // ---------------------------------------------\n          // handle optional property signatures\n          // ---------------------------------------------\n          if (!ps.isOptional && pruned === undefined) {\n            output.required.push(name)\n          }\n        } else {\n          if (errors === \"ignore-errors\") return addASTAnnotations(constAny, ast)\n          throw new Error(errors_.getJSONSchemaUnsupportedKeyErrorMessage(name, path))\n        }\n      }\n      // ---------------------------------------------\n      // handle index signatures\n      // ---------------------------------------------\n      if (patternProperties !== undefined) {\n        delete output.additionalProperties\n        output.patternProperties = { \"\": patternProperties }\n      }\n      if (propertyNames !== undefined) {\n        output.propertyNames = propertyNames\n      }\n\n      return addASTAnnotations(output, ast)\n    }\n    case \"Union\": {\n      const members: Array<JsonSchema7> = ast.types.map((t) =>\n        go(t, $defs, \"handle-identifier\", path, options, \"handle-annotation\", errors)\n      )\n      const anyOf = compactUnion(members)\n      switch (anyOf.length) {\n        case 0:\n          return constNever\n        case 1:\n          return addASTAnnotations(anyOf[0], ast)\n        default:\n          return addASTAnnotations({ anyOf }, ast)\n      }\n    }\n    case \"Refinement\":\n      return go(ast.from, $defs, identifier, path, options, \"handle-annotation\", errors)\n    case \"TemplateLiteral\": {\n      const regex = AST.getTemplateLiteralRegExp(ast)\n      return addASTAnnotations({\n        type: \"string\",\n        title: String(ast),\n        description: \"a template literal\",\n        pattern: regex.source\n      }, ast)\n    }\n    case \"Transformation\": {\n      if (isParseJsonTransformation(ast.from)) {\n        const out: JsonSchema7String & { contentSchema?: JsonSchema7 } = {\n          \"type\": \"string\",\n          \"contentMediaType\": \"application/json\"\n        }\n        if (isContentSchemaSupported(options)) {\n          out[\"contentSchema\"] = go(ast.to, $defs, identifier, path, options, \"handle-annotation\", errors)\n        }\n        return out\n      }\n      const from = go(ast.from, $defs, identifier, path, options, \"handle-annotation\", errors)\n      if (\n        ast.transformation._tag === \"TypeLiteralTransformation\" &&\n        isJsonSchema7Object(from)\n      ) {\n        const to = go(ast.to, {}, \"ignore-identifier\", path, options, \"handle-annotation\", \"ignore-errors\")\n        if (isJsonSchema7Object(to)) {\n          for (const t of ast.transformation.propertySignatureTransformations) {\n            const toKey = t.to\n            const fromKey = t.from\n            if (Predicate.isString(toKey) && Predicate.isString(fromKey)) {\n              const toProperty = to.properties[toKey]\n              if (Predicate.isRecord(toProperty)) {\n                const fromProperty = from.properties[fromKey]\n                if (Predicate.isRecord(fromProperty)) {\n                  const annotations: JsonSchemaAnnotations = {}\n                  if (Predicate.isString(toProperty.title)) annotations.title = toProperty.title\n                  if (Predicate.isString(toProperty.description)) annotations.description = toProperty.description\n                  if (Array.isArray(toProperty.examples)) annotations.examples = toProperty.examples\n                  if (Object.hasOwn(toProperty, \"default\")) annotations.default = toProperty.default\n                  from.properties[fromKey] = addAnnotations(fromProperty, annotations)\n                }\n              }\n            }\n          }\n        }\n      }\n      return addASTAnnotations(from, ast)\n    }\n  }\n}\n\nfunction isJsonSchema7Object(jsonSchema: unknown): jsonSchema is JsonSchema7Object {\n  return Predicate.isRecord(jsonSchema) && jsonSchema.type === \"object\" && Predicate.isRecord(jsonSchema.properties)\n}\n\nfunction isNeverWithoutCustomAnnotations(jsonSchema: JsonSchema7): boolean {\n  return jsonSchema === constNever || (Predicate.hasProperty(jsonSchema, \"$id\") && jsonSchema.$id === constNever.$id &&\n    Object.keys(jsonSchema).length === 3 && jsonSchema.title === AST.neverKeyword.annotations[AST.TitleAnnotationId])\n}\n\nfunction isAny(jsonSchema: JsonSchema7): jsonSchema is JsonSchema7Any {\n  return \"$id\" in jsonSchema && jsonSchema.$id === constAny.$id\n}\n\nfunction isUnknown(jsonSchema: JsonSchema7): jsonSchema is JsonSchema7Unknown {\n  return \"$id\" in jsonSchema && jsonSchema.$id === constUnknown.$id\n}\n\nfunction isVoid(jsonSchema: JsonSchema7): jsonSchema is JsonSchema7Void {\n  return \"$id\" in jsonSchema && jsonSchema.$id === constVoid.$id\n}\n\nfunction isCompactableLiteral(jsonSchema: JsonSchema7 | undefined): jsonSchema is JsonSchema7Enum {\n  return Predicate.hasProperty(jsonSchema, \"enum\") && \"type\" in jsonSchema && Object.keys(jsonSchema).length === 2\n}\n\nfunction compactUnion(members: Array<JsonSchema7>): Array<JsonSchema7> {\n  const out: Array<JsonSchema7> = []\n  for (const m of members) {\n    if (isNeverWithoutCustomAnnotations(m)) continue\n    if (isAny(m) || isUnknown(m) || isVoid(m)) return [m]\n    if (isCompactableLiteral(m) && out.length > 0) {\n      const last = out[out.length - 1]\n      if (isCompactableLiteral(last) && last.type === m.type) {\n        out[out.length - 1] = {\n          type: last.type,\n          enum: [...last.enum, ...m.enum]\n        } as JsonSchema7Enum\n        continue\n      }\n    }\n    out.push(m)\n  }\n  return out\n}\n", "/**\n * @since 3.10.0\n */\n\nimport * as Arr from \"./Array.js\"\nimport * as Cause from \"./Cause.js\"\nimport { TaggedError } from \"./Data.js\"\nimport * as Effect from \"./Effect.js\"\nimport * as Either from \"./Either.js\"\nimport * as Exit from \"./Exit.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { dual } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport * as Inspectable from \"./Inspectable.js\"\nimport * as util_ from \"./internal/schema/util.js\"\nimport * as Option from \"./Option.js\"\nimport * as Predicate from \"./Predicate.js\"\nimport * as Scheduler from \"./Scheduler.js\"\nimport type * as Schema from \"./Schema.js\"\nimport * as AST from \"./SchemaAST.js\"\nimport type { Concurrency } from \"./Types.js\"\n\n/**\n * `ParseIssue` is a type that represents the different types of errors that can occur when decoding/encoding a value.\n *\n * @category model\n * @since 3.10.0\n */\nexport type ParseIssue =\n  // leaf\n  | Type\n  | Missing\n  | Unexpected\n  | Forbidden\n  // composite\n  | Pointer\n  | Refinement\n  | Transformation\n  | Composite\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport type SingleOrNonEmpty<A> = A | Arr.NonEmptyReadonlyArray<A>\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport type Path = SingleOrNonEmpty<PropertyKey>\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Pointer {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Pointer\"\n  constructor(\n    readonly path: Path,\n    readonly actual: unknown,\n    readonly issue: ParseIssue\n  ) {}\n}\n\n/**\n * Error that occurs when an unexpected key or index is present.\n *\n * @category model\n * @since 3.10.0\n */\nexport class Unexpected {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Unexpected\"\n  constructor(\n    readonly actual: unknown,\n    /**\n     * @since 3.10.0\n     */\n    readonly message?: string\n  ) {}\n}\n\n/**\n * Error that occurs when a required key or index is missing.\n *\n * @category model\n * @since 3.10.0\n */\nexport class Missing {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Missing\"\n  /**\n   * @since 3.10.0\n   */\n  readonly actual = undefined\n  constructor(\n    /**\n     * @since 3.10.0\n     */\n    readonly ast: AST.Type,\n    /**\n     * @since 3.10.0\n     */\n    readonly message?: string\n  ) {}\n}\n\n/**\n * Error that contains multiple issues.\n *\n * @category model\n * @since 3.10.0\n */\nexport class Composite {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Composite\"\n  constructor(\n    readonly ast: AST.AST,\n    readonly actual: unknown,\n    readonly issues: SingleOrNonEmpty<ParseIssue>,\n    readonly output?: unknown\n  ) {}\n}\n\n/**\n * Error that occurs when a refinement has an error.\n *\n * @category model\n * @since 3.10.0\n */\nexport class Refinement {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Refinement\"\n  constructor(\n    readonly ast: AST.Refinement,\n    readonly actual: unknown,\n    readonly kind: \"From\" | \"Predicate\",\n    readonly issue: ParseIssue\n  ) {}\n}\n\n/**\n * Error that occurs when a transformation has an error.\n *\n * @category model\n * @since 3.10.0\n */\nexport class Transformation {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Transformation\"\n  constructor(\n    readonly ast: AST.Transformation,\n    readonly actual: unknown,\n    readonly kind: \"Encoded\" | \"Transformation\" | \"Type\",\n    readonly issue: ParseIssue\n  ) {}\n}\n\n/**\n * The `Type` variant of the `ParseIssue` type represents an error that occurs when the `actual` value is not of the expected type.\n * The `ast` field specifies the expected type, and the `actual` field contains the value that caused the error.\n *\n * @category model\n * @since 3.10.0\n */\nexport class Type {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Type\"\n  constructor(\n    readonly ast: AST.AST,\n    readonly actual: unknown,\n    readonly message?: string\n  ) {}\n}\n\n/**\n * The `Forbidden` variant of the `ParseIssue` type represents a forbidden operation, such as when encountering an Effect that is not allowed to execute (e.g., using `runSync`).\n *\n * @category model\n * @since 3.10.0\n */\nexport class Forbidden {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Forbidden\"\n  constructor(\n    readonly ast: AST.AST,\n    readonly actual: unknown,\n    readonly message?: string\n  ) {}\n}\n\n/**\n * @category type id\n * @since 3.10.0\n */\nexport const ParseErrorTypeId: unique symbol = Symbol.for(\"effect/Schema/ParseErrorTypeId\")\n\n/**\n * @category type id\n * @since 3.10.0\n */\nexport type ParseErrorTypeId = typeof ParseErrorTypeId\n\n/**\n * @since 3.10.0\n */\nexport const isParseError = (u: unknown): u is ParseError => Predicate.hasProperty(u, ParseErrorTypeId)\n\n/**\n * @since 3.10.0\n */\nexport class ParseError extends TaggedError(\"ParseError\")<{ readonly issue: ParseIssue }> {\n  /**\n   * @since 3.10.0\n   */\n  readonly [ParseErrorTypeId] = ParseErrorTypeId\n\n  get message() {\n    return this.toString()\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return TreeFormatter.formatIssueSync(this.issue)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON() {\n    return {\n      _id: \"ParseError\",\n      message: this.toString()\n    }\n  }\n  /**\n   * @since 3.10.0\n   */\n  [Inspectable.NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const parseError = (issue: ParseIssue): ParseError => new ParseError({ issue })\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const succeed: <A>(a: A) => Either.Either<A, ParseIssue> = Either.right\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const fail: (issue: ParseIssue) => Either.Either<never, ParseIssue> = Either.left\n\nconst _try: <A>(options: {\n  try: LazyArg<A>\n  catch: (e: unknown) => ParseIssue\n}) => Either.Either<A, ParseIssue> = Either.try\n\nexport {\n  /**\n   * @category constructors\n   * @since 3.10.0\n   */\n  _try as try\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const fromOption: {\n  /**\n   * @category constructors\n   * @since 3.10.0\n   */\n  (onNone: () => ParseIssue): <A>(self: Option.Option<A>) => Either.Either<A, ParseIssue>\n  /**\n   * @category constructors\n   * @since 3.10.0\n   */\n  <A>(self: Option.Option<A>, onNone: () => ParseIssue): Either.Either<A, ParseIssue>\n} = Either.fromOption\n\nconst isEither: <A, E, R>(self: Effect.Effect<A, E, R>) => self is Either.Either<A, E> = Either.isEither as any\n\n/**\n * @category optimisation\n * @since 3.10.0\n */\nexport const flatMap: {\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <A, B, E1, R1>(f: (a: A) => Effect.Effect<B, E1, R1>): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E1 | E, R1 | R>\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <A, E, R, B, E1, R1>(self: Effect.Effect<A, E, R>, f: (a: A) => Effect.Effect<B, E1, R1>): Effect.Effect<B, E | E1, R | R1>\n} = dual(2, <A, E, R, B, E1, R1>(\n  self: Effect.Effect<A, E, R>,\n  f: (a: A) => Effect.Effect<B, E1, R1>\n): Effect.Effect<B, E | E1, R | R1> => {\n  return isEither(self) ?\n    Either.match(self, { onLeft: Either.left, onRight: f }) :\n    Effect.flatMap(self, f)\n})\n\n/**\n * @category optimisation\n * @since 3.10.0\n */\nexport const map: {\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <A, B>(f: (a: A) => B): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R>\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <A, E, R, B>(self: Effect.Effect<A, E, R>, f: (a: A) => B): Effect.Effect<B, E, R>\n} = dual(2, <A, E, R, B>(self: Effect.Effect<A, E, R>, f: (a: A) => B): Effect.Effect<B, E, R> => {\n  return isEither(self) ?\n    Either.map(self, f) :\n    Effect.map(self, f)\n})\n\n/**\n * @category optimisation\n * @since 3.10.0\n */\nexport const mapError: {\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <E, E2>(f: (e: E) => E2): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E2, R>\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <A, E, R, E2>(self: Effect.Effect<A, E, R>, f: (e: E) => E2): Effect.Effect<A, E2, R>\n} = dual(2, <A, E, R, E2>(self: Effect.Effect<A, E, R>, f: (e: E) => E2): Effect.Effect<A, E2, R> => {\n  return isEither(self) ?\n    Either.mapLeft(self, f) :\n    Effect.mapError(self, f)\n})\n\n// TODO(4.0): remove\n/**\n * @category optimisation\n * @since 3.10.0\n */\nexport const eitherOrUndefined = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Either.Either<A, E> | undefined => {\n  if (isEither(self)) {\n    return self\n  }\n}\n\n/**\n * @category optimisation\n * @since 3.10.0\n */\nexport const mapBoth: {\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <E, E2, A, A2>(\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E2, R>\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <A, E, R, E2, A2>(\n    self: Effect.Effect<A, E, R>,\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): Effect.Effect<A2, E2, R>\n} = dual(2, <A, E, R, E2, A2>(\n  self: Effect.Effect<A, E, R>,\n  options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n): Effect.Effect<A2, E2, R> => {\n  return isEither(self) ?\n    Either.mapBoth(self, { onLeft: options.onFailure, onRight: options.onSuccess }) :\n    Effect.mapBoth(self, options)\n})\n\n/**\n * @category optimisation\n * @since 3.10.0\n */\nexport const orElse: {\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <E, A2, E2, R2>(f: (e: E) => Effect.Effect<A2, E2, R2>): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E2, R2 | R>\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <A, E, R, A2, E2, R2>(self: Effect.Effect<A, E, R>, f: (e: E) => Effect.Effect<A2, E2, R2>): Effect.Effect<A2 | A, E2, R2 | R>\n} = dual(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  f: (e: E) => Effect.Effect<A2, E2, R2>\n): Effect.Effect<A2 | A, E2, R2 | R> => {\n  return isEither(self) ?\n    Either.match(self, { onLeft: f, onRight: Either.right }) :\n    Effect.catchAll(self, f)\n})\n\n/**\n * @since 3.10.0\n */\nexport type DecodeUnknown<Out, R> = (u: unknown, options?: AST.ParseOptions) => Effect.Effect<Out, ParseIssue, R>\n\n/**\n * @since 3.10.0\n */\nexport type DeclarationDecodeUnknown<Out, R> = (\n  u: unknown,\n  options: AST.ParseOptions,\n  ast: AST.Declaration\n) => Effect.Effect<Out, ParseIssue, R>\n\n/** @internal */\nexport const mergeInternalOptions = (\n  options: InternalOptions | undefined,\n  overrideOptions: InternalOptions | number | undefined\n): InternalOptions | undefined => {\n  if (overrideOptions === undefined || Predicate.isNumber(overrideOptions)) {\n    return options\n  }\n  if (options === undefined) {\n    return overrideOptions\n  }\n  return { ...options, ...overrideOptions }\n}\n\nconst getEither = (ast: AST.AST, isDecoding: boolean, options?: AST.ParseOptions) => {\n  const parser = goMemo(ast, isDecoding)\n  return (u: unknown, overrideOptions?: AST.ParseOptions): Either.Either<any, ParseIssue> =>\n    parser(u, mergeInternalOptions(options, overrideOptions)) as any\n}\n\nconst getSync = (ast: AST.AST, isDecoding: boolean, options?: AST.ParseOptions) => {\n  const parser = getEither(ast, isDecoding, options)\n  return (input: unknown, overrideOptions?: AST.ParseOptions) =>\n    Either.getOrThrowWith(parser(input, overrideOptions), parseError)\n}\n\n/** @internal */\nexport const getOption = (ast: AST.AST, isDecoding: boolean, options?: AST.ParseOptions) => {\n  const parser = getEither(ast, isDecoding, options)\n  return (input: unknown, overrideOptions?: AST.ParseOptions): Option.Option<any> =>\n    Option.getRight(parser(input, overrideOptions))\n}\n\nconst getEffect = <R>(ast: AST.AST, isDecoding: boolean, options?: AST.ParseOptions) => {\n  const parser = goMemo(ast, isDecoding)\n  return (input: unknown, overrideOptions?: AST.ParseOptions): Effect.Effect<any, ParseIssue, R> =>\n    parser(input, { ...mergeInternalOptions(options, overrideOptions), isEffectAllowed: true })\n}\n\n/**\n * @throws `ParseError`\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeUnknownSync = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => A => getSync(schema.ast, true, options)\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeUnknownOption = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Option.Option<A> => getOption(schema.ast, true, options)\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeUnknownEither = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Either.Either<A, ParseIssue> =>\n  getEither(schema.ast, true, options)\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeUnknownPromise = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => {\n  const parser = decodeUnknown(schema, options)\n  return (u: unknown, overrideOptions?: AST.ParseOptions): Promise<A> => Effect.runPromise(parser(u, overrideOptions))\n}\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeUnknown = <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Effect.Effect<A, ParseIssue, R> =>\n  getEffect(schema.ast, true, options)\n\n/**\n * @throws `ParseError`\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeUnknownSync = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => I => getSync(schema.ast, false, options)\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeUnknownOption = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Option.Option<I> => getOption(schema.ast, false, options)\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeUnknownEither = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Either.Either<I, ParseIssue> =>\n  getEither(schema.ast, false, options)\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeUnknownPromise = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => {\n  const parser = encodeUnknown(schema, options)\n  return (u: unknown, overrideOptions?: AST.ParseOptions): Promise<I> => Effect.runPromise(parser(u, overrideOptions))\n}\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeUnknown = <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Effect.Effect<I, ParseIssue, R> =>\n  getEffect(schema.ast, false, options)\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeSync: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (i: I, overrideOptions?: AST.ParseOptions) => A = decodeUnknownSync\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeOption: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (i: I, overrideOptions?: AST.ParseOptions) => Option.Option<A> = decodeUnknownOption\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeEither: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (i: I, overrideOptions?: AST.ParseOptions) => Either.Either<A, ParseIssue> = decodeUnknownEither\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodePromise: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (i: I, overrideOptions?: AST.ParseOptions) => Promise<A> = decodeUnknownPromise\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decode: <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n) => (i: I, overrideOptions?: AST.ParseOptions) => Effect.Effect<A, ParseIssue, R> = decodeUnknown\n\n/**\n * @throws `ParseError`\n * @category validation\n * @since 3.10.0\n */\nexport const validateSync = <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => A => getSync(AST.typeAST(schema.ast), true, options)\n\n/**\n * @category validation\n * @since 3.10.0\n */\nexport const validateOption = <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Option.Option<A> =>\n  getOption(AST.typeAST(schema.ast), true, options)\n\n/**\n * @category validation\n * @since 3.10.0\n */\nexport const validateEither = <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Either.Either<A, ParseIssue> =>\n  getEither(AST.typeAST(schema.ast), true, options)\n\n/**\n * @category validation\n * @since 3.10.0\n */\nexport const validatePromise = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => {\n  const parser = validate(schema, options)\n  return (u: unknown, overrideOptions?: AST.ParseOptions): Promise<A> => Effect.runPromise(parser(u, overrideOptions))\n}\n\n/**\n * @category validation\n * @since 3.10.0\n */\nexport const validate = <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n): (a: unknown, overrideOptions?: AST.ParseOptions) => Effect.Effect<A, ParseIssue, R> =>\n  getEffect(AST.typeAST(schema.ast), true, options)\n\n/**\n * By default the option `exact` is set to `true`.\n *\n * @category validation\n * @since 3.10.0\n */\nexport const is = <A, I, R>(schema: Schema.Schema<A, I, R>, options?: AST.ParseOptions) => {\n  const parser = goMemo(AST.typeAST(schema.ast), true)\n  return (u: unknown, overrideOptions?: AST.ParseOptions | number): u is A =>\n    Either.isRight(parser(u, { exact: true, ...mergeInternalOptions(options, overrideOptions) }) as any)\n}\n\n/**\n * By default the option `exact` is set to `true`.\n *\n * @throws `ParseError`\n * @category validation\n * @since 3.10.0\n */\nexport const asserts = <A, I, R>(schema: Schema.Schema<A, I, R>, options?: AST.ParseOptions) => {\n  const parser = goMemo(AST.typeAST(schema.ast), true)\n  return (u: unknown, overrideOptions?: AST.ParseOptions): asserts u is A => {\n    const result: Either.Either<any, ParseIssue> = parser(u, {\n      exact: true,\n      ...mergeInternalOptions(options, overrideOptions)\n    }) as any\n    if (Either.isLeft(result)) {\n      throw parseError(result.left)\n    }\n  }\n}\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeSync: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (a: A, overrideOptions?: AST.ParseOptions) => I = encodeUnknownSync\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeOption: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (input: A, overrideOptions?: AST.ParseOptions) => Option.Option<I> = encodeUnknownOption\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeEither: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (a: A, overrideOptions?: AST.ParseOptions) => Either.Either<I, ParseIssue> = encodeUnknownEither\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodePromise: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (a: A, overrideOptions?: AST.ParseOptions) => Promise<I> = encodeUnknownPromise\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encode: <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n) => (a: A, overrideOptions?: AST.ParseOptions) => Effect.Effect<I, ParseIssue, R> = encodeUnknown\n\ninterface InternalOptions extends AST.ParseOptions {\n  readonly isEffectAllowed?: boolean\n}\n\ninterface Parser {\n  (i: any, options?: InternalOptions): Effect.Effect<any, ParseIssue, any>\n}\n\nconst decodeMemoMap = globalValue(\n  Symbol.for(\"effect/ParseResult/decodeMemoMap\"),\n  () => new WeakMap<AST.AST, Parser>()\n)\nconst encodeMemoMap = globalValue(\n  Symbol.for(\"effect/ParseResult/encodeMemoMap\"),\n  () => new WeakMap<AST.AST, Parser>()\n)\n\nconst goMemo = (ast: AST.AST, isDecoding: boolean): Parser => {\n  const memoMap = isDecoding ? decodeMemoMap : encodeMemoMap\n  const memo = memoMap.get(ast)\n  if (memo) {\n    return memo\n  }\n  const raw = go(ast, isDecoding)\n  const parseOptionsAnnotation = AST.getParseOptionsAnnotation(ast)\n  const parserWithOptions: Parser = Option.isSome(parseOptionsAnnotation)\n    ? (i, options) => raw(i, mergeInternalOptions(options, parseOptionsAnnotation.value))\n    : raw\n  const decodingFallbackAnnotation = AST.getDecodingFallbackAnnotation(ast)\n  const parser: Parser = isDecoding && Option.isSome(decodingFallbackAnnotation)\n    ? (i, options) =>\n      handleForbidden(orElse(parserWithOptions(i, options), decodingFallbackAnnotation.value), ast, i, options)\n    : parserWithOptions\n  memoMap.set(ast, parser)\n  return parser\n}\n\nconst getConcurrency = (ast: AST.AST): Concurrency | undefined =>\n  Option.getOrUndefined(AST.getConcurrencyAnnotation(ast))\n\nconst getBatching = (ast: AST.AST): boolean | \"inherit\" | undefined =>\n  Option.getOrUndefined(AST.getBatchingAnnotation(ast))\n\nconst go = (ast: AST.AST, isDecoding: boolean): Parser => {\n  switch (ast._tag) {\n    case \"Refinement\": {\n      if (isDecoding) {\n        const from = goMemo(ast.from, true)\n        return (i, options) => {\n          options = options ?? AST.defaultParseOption\n          const allErrors = options?.errors === \"all\"\n          const result = flatMap(\n            orElse(from(i, options), (ef) => {\n              const issue = new Refinement(ast, i, \"From\", ef)\n              if (allErrors && AST.hasStableFilter(ast) && isComposite(ef)) {\n                return Option.match(\n                  ast.filter(i, options, ast),\n                  {\n                    onNone: () => Either.left<ParseIssue>(issue),\n                    onSome: (ep) => Either.left(new Composite(ast, i, [issue, new Refinement(ast, i, \"Predicate\", ep)]))\n                  }\n                )\n              }\n              return Either.left(issue)\n            }),\n            (a) =>\n              Option.match(\n                ast.filter(a, options, ast),\n                {\n                  onNone: () => Either.right(a),\n                  onSome: (ep) => Either.left(new Refinement(ast, i, \"Predicate\", ep))\n                }\n              )\n          )\n          return handleForbidden(result, ast, i, options)\n        }\n      } else {\n        const from = goMemo(AST.typeAST(ast), true)\n        const to = goMemo(dropRightRefinement(ast.from), false)\n        return (i, options) => handleForbidden(flatMap(from(i, options), (a) => to(a, options)), ast, i, options)\n      }\n    }\n    case \"Transformation\": {\n      const transform = getFinalTransformation(ast.transformation, isDecoding)\n      const from = isDecoding ? goMemo(ast.from, true) : goMemo(ast.to, false)\n      const to = isDecoding ? goMemo(ast.to, true) : goMemo(ast.from, false)\n      return (i, options) =>\n        handleForbidden(\n          flatMap(\n            mapError(\n              from(i, options),\n              (e) => new Transformation(ast, i, isDecoding ? \"Encoded\" : \"Type\", e)\n            ),\n            (a) =>\n              flatMap(\n                mapError(\n                  transform(a, options ?? AST.defaultParseOption, ast, i),\n                  (e) => new Transformation(ast, i, \"Transformation\", e)\n                ),\n                (i2) =>\n                  mapError(\n                    to(i2, options),\n                    (e) => new Transformation(ast, i, isDecoding ? \"Type\" : \"Encoded\", e)\n                  )\n              )\n          ),\n          ast,\n          i,\n          options\n        )\n    }\n    case \"Declaration\": {\n      const parse = isDecoding\n        ? ast.decodeUnknown(...ast.typeParameters)\n        : ast.encodeUnknown(...ast.typeParameters)\n      return (i, options) => handleForbidden(parse(i, options ?? AST.defaultParseOption, ast), ast, i, options)\n    }\n    case \"Literal\":\n      return fromRefinement(ast, (u): u is typeof ast.literal => u === ast.literal)\n    case \"UniqueSymbol\":\n      return fromRefinement(ast, (u): u is typeof ast.symbol => u === ast.symbol)\n    case \"UndefinedKeyword\":\n      return fromRefinement(ast, Predicate.isUndefined)\n    case \"NeverKeyword\":\n      return fromRefinement(ast, Predicate.isNever)\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n    case \"VoidKeyword\":\n      return Either.right\n    case \"StringKeyword\":\n      return fromRefinement(ast, Predicate.isString)\n    case \"NumberKeyword\":\n      return fromRefinement(ast, Predicate.isNumber)\n    case \"BooleanKeyword\":\n      return fromRefinement(ast, Predicate.isBoolean)\n    case \"BigIntKeyword\":\n      return fromRefinement(ast, Predicate.isBigInt)\n    case \"SymbolKeyword\":\n      return fromRefinement(ast, Predicate.isSymbol)\n    case \"ObjectKeyword\":\n      return fromRefinement(ast, Predicate.isObject)\n    case \"Enums\":\n      return fromRefinement(ast, (u): u is any => ast.enums.some(([_, value]) => value === u))\n    case \"TemplateLiteral\": {\n      const regex = AST.getTemplateLiteralRegExp(ast)\n      return fromRefinement(ast, (u): u is any => Predicate.isString(u) && regex.test(u))\n    }\n    case \"TupleType\": {\n      const elements = ast.elements.map((e) => goMemo(e.type, isDecoding))\n      const rest = ast.rest.map((annotatedAST) => goMemo(annotatedAST.type, isDecoding))\n      let requiredTypes: Array<AST.Type> = ast.elements.filter((e) => !e.isOptional)\n      if (ast.rest.length > 0) {\n        requiredTypes = requiredTypes.concat(ast.rest.slice(1))\n      }\n      const requiredLen = requiredTypes.length\n      const expectedIndexes = ast.elements.length > 0 ? ast.elements.map((_, i) => i).join(\" | \") : \"never\"\n      const concurrency = getConcurrency(ast)\n      const batching = getBatching(ast)\n      return (input: unknown, options) => {\n        if (!Arr.isArray(input)) {\n          return Either.left(new Type(ast, input))\n        }\n        const allErrors = options?.errors === \"all\"\n        const es: Array<[number, ParseIssue]> = []\n        let stepKey = 0\n        const output: Array<[number, any]> = []\n        // ---------------------------------------------\n        // handle missing indexes\n        // ---------------------------------------------\n        const len = input.length\n        for (let i = len; i <= requiredLen - 1; i++) {\n          const e = new Pointer(i, input, new Missing(requiredTypes[i - len]))\n          if (allErrors) {\n            es.push([stepKey++, e])\n            continue\n          } else {\n            return Either.left(new Composite(ast, input, e, output))\n          }\n        }\n\n        // ---------------------------------------------\n        // handle excess indexes\n        // ---------------------------------------------\n        if (ast.rest.length === 0) {\n          for (let i = ast.elements.length; i <= len - 1; i++) {\n            const e = new Pointer(i, input, new Unexpected(input[i], `is unexpected, expected: ${expectedIndexes}`))\n            if (allErrors) {\n              es.push([stepKey++, e])\n              continue\n            } else {\n              return Either.left(new Composite(ast, input, e, output))\n            }\n          }\n        }\n\n        let i = 0\n        type State = {\n          es: typeof es\n          output: typeof output\n        }\n        let queue:\n          | Array<(_: State) => Effect.Effect<void, ParseIssue, any>>\n          | undefined = undefined\n\n        // ---------------------------------------------\n        // handle elements\n        // ---------------------------------------------\n        for (; i < elements.length; i++) {\n          if (len < i + 1) {\n            if (ast.elements[i].isOptional) {\n              // the input element is missing\n              continue\n            }\n          } else {\n            const parser = elements[i]\n            const te = parser(input[i], options)\n            if (isEither(te)) {\n              if (Either.isLeft(te)) {\n                // the input element is present but is not valid\n                const e = new Pointer(i, input, te.left)\n                if (allErrors) {\n                  es.push([stepKey++, e])\n                  continue\n                } else {\n                  return Either.left(new Composite(ast, input, e, sortByIndex(output)))\n                }\n              }\n              output.push([stepKey++, te.right])\n            } else {\n              const nk = stepKey++\n              const index = i\n              if (!queue) {\n                queue = []\n              }\n              queue.push(({ es, output }: State) =>\n                Effect.flatMap(Effect.either(te), (t) => {\n                  if (Either.isLeft(t)) {\n                    // the input element is present but is not valid\n                    const e = new Pointer(index, input, t.left)\n                    if (allErrors) {\n                      es.push([nk, e])\n                      return Effect.void\n                    } else {\n                      return Either.left(new Composite(ast, input, e, sortByIndex(output)))\n                    }\n                  }\n                  output.push([nk, t.right])\n                  return Effect.void\n                })\n              )\n            }\n          }\n        }\n        // ---------------------------------------------\n        // handle rest element\n        // ---------------------------------------------\n        if (Arr.isNonEmptyReadonlyArray(rest)) {\n          const [head, ...tail] = rest\n          for (; i < len - tail.length; i++) {\n            const te = head(input[i], options)\n            if (isEither(te)) {\n              if (Either.isLeft(te)) {\n                const e = new Pointer(i, input, te.left)\n                if (allErrors) {\n                  es.push([stepKey++, e])\n                  continue\n                } else {\n                  return Either.left(new Composite(ast, input, e, sortByIndex(output)))\n                }\n              } else {\n                output.push([stepKey++, te.right])\n              }\n            } else {\n              const nk = stepKey++\n              const index = i\n              if (!queue) {\n                queue = []\n              }\n              queue.push(\n                ({ es, output }: State) =>\n                  Effect.flatMap(Effect.either(te), (t) => {\n                    if (Either.isLeft(t)) {\n                      const e = new Pointer(index, input, t.left)\n                      if (allErrors) {\n                        es.push([nk, e])\n                        return Effect.void\n                      } else {\n                        return Either.left(new Composite(ast, input, e, sortByIndex(output)))\n                      }\n                    } else {\n                      output.push([nk, t.right])\n                      return Effect.void\n                    }\n                  })\n              )\n            }\n          }\n          // ---------------------------------------------\n          // handle post rest elements\n          // ---------------------------------------------\n          for (let j = 0; j < tail.length; j++) {\n            i += j\n            if (len < i + 1) {\n              continue\n            } else {\n              const te = tail[j](input[i], options)\n              if (isEither(te)) {\n                if (Either.isLeft(te)) {\n                  // the input element is present but is not valid\n                  const e = new Pointer(i, input, te.left)\n                  if (allErrors) {\n                    es.push([stepKey++, e])\n                    continue\n                  } else {\n                    return Either.left(new Composite(ast, input, e, sortByIndex(output)))\n                  }\n                }\n                output.push([stepKey++, te.right])\n              } else {\n                const nk = stepKey++\n                const index = i\n                if (!queue) {\n                  queue = []\n                }\n                queue.push(\n                  ({ es, output }: State) =>\n                    Effect.flatMap(Effect.either(te), (t) => {\n                      if (Either.isLeft(t)) {\n                        // the input element is present but is not valid\n                        const e = new Pointer(index, input, t.left)\n                        if (allErrors) {\n                          es.push([nk, e])\n                          return Effect.void\n                        } else {\n                          return Either.left(new Composite(ast, input, e, sortByIndex(output)))\n                        }\n                      }\n                      output.push([nk, t.right])\n                      return Effect.void\n                    })\n                )\n              }\n            }\n          }\n        }\n\n        // ---------------------------------------------\n        // compute result\n        // ---------------------------------------------\n        const computeResult = ({ es, output }: State) =>\n          Arr.isNonEmptyArray(es) ?\n            Either.left(new Composite(ast, input, sortByIndex(es), sortByIndex(output))) :\n            Either.right(sortByIndex(output))\n        if (queue && queue.length > 0) {\n          const cqueue = queue\n          return Effect.suspend(() => {\n            const state: State = {\n              es: Arr.copy(es),\n              output: Arr.copy(output)\n            }\n            return Effect.flatMap(\n              Effect.forEach(cqueue, (f) => f(state), { concurrency, batching, discard: true }),\n              () => computeResult(state)\n            )\n          })\n        }\n        return computeResult({ output, es })\n      }\n    }\n    case \"TypeLiteral\": {\n      if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {\n        return fromRefinement(ast, Predicate.isNotNullable)\n      }\n\n      const propertySignatures: Array<readonly [Parser, AST.PropertySignature]> = []\n      const expectedKeysMap: Record<PropertyKey, null> = {}\n      const expectedKeys: Array<PropertyKey> = []\n      for (const ps of ast.propertySignatures) {\n        propertySignatures.push([goMemo(ps.type, isDecoding), ps])\n        expectedKeysMap[ps.name] = null\n        expectedKeys.push(ps.name)\n      }\n\n      const indexSignatures = ast.indexSignatures.map((is) =>\n        [\n          goMemo(is.parameter, isDecoding),\n          goMemo(is.type, isDecoding),\n          is.parameter\n        ] as const\n      )\n      const expectedAST = AST.Union.make(\n        ast.indexSignatures.map((is): AST.AST => is.parameter).concat(\n          expectedKeys.map((key) => Predicate.isSymbol(key) ? new AST.UniqueSymbol(key) : new AST.Literal(key))\n        )\n      )\n      const expected = goMemo(expectedAST, isDecoding)\n      const concurrency = getConcurrency(ast)\n      const batching = getBatching(ast)\n      return (input: unknown, options) => {\n        if (!Predicate.isRecord(input)) {\n          return Either.left(new Type(ast, input))\n        }\n        const allErrors = options?.errors === \"all\"\n        const es: Array<[number, ParseIssue]> = []\n        let stepKey = 0\n\n        // ---------------------------------------------\n        // handle excess properties\n        // ---------------------------------------------\n        const onExcessPropertyError = options?.onExcessProperty === \"error\"\n        const onExcessPropertyPreserve = options?.onExcessProperty === \"preserve\"\n        const output: Record<PropertyKey, unknown> = {}\n        let inputKeys: Array<PropertyKey> | undefined\n        if (onExcessPropertyError || onExcessPropertyPreserve) {\n          inputKeys = Reflect.ownKeys(input)\n          for (const key of inputKeys) {\n            const te = expected(key, options)\n            if (isEither(te) && Either.isLeft(te)) {\n              // key is unexpected\n              if (onExcessPropertyError) {\n                const e = new Pointer(\n                  key,\n                  input,\n                  new Unexpected(input[key], `is unexpected, expected: ${String(expectedAST)}`)\n                )\n                if (allErrors) {\n                  es.push([stepKey++, e])\n                  continue\n                } else {\n                  return Either.left(new Composite(ast, input, e, output))\n                }\n              } else {\n                // preserve key\n                output[key] = input[key]\n              }\n            }\n          }\n        }\n\n        // ---------------------------------------------\n        // handle property signatures\n        // ---------------------------------------------\n        type State = {\n          es: typeof es\n          output: typeof output\n        }\n        let queue:\n          | Array<(state: State) => Effect.Effect<void, ParseIssue, any>>\n          | undefined = undefined\n\n        const isExact = options?.exact === true\n        for (let i = 0; i < propertySignatures.length; i++) {\n          const ps = propertySignatures[i][1]\n          const name = ps.name\n          const hasKey = Object.prototype.hasOwnProperty.call(input, name)\n          if (!hasKey) {\n            if (ps.isOptional) {\n              continue\n            } else if (isExact) {\n              const e = new Pointer(name, input, new Missing(ps))\n              if (allErrors) {\n                es.push([stepKey++, e])\n                continue\n              } else {\n                return Either.left(new Composite(ast, input, e, output))\n              }\n            }\n          }\n          const parser = propertySignatures[i][0]\n          const te = parser(input[name], options)\n          if (isEither(te)) {\n            if (Either.isLeft(te)) {\n              const e = new Pointer(name, input, hasKey ? te.left : new Missing(ps))\n              if (allErrors) {\n                es.push([stepKey++, e])\n                continue\n              } else {\n                return Either.left(new Composite(ast, input, e, output))\n              }\n            }\n            output[name] = te.right\n          } else {\n            const nk = stepKey++\n            const index = name\n            if (!queue) {\n              queue = []\n            }\n            queue.push(\n              ({ es, output }: State) =>\n                Effect.flatMap(Effect.either(te), (t) => {\n                  if (Either.isLeft(t)) {\n                    const e = new Pointer(index, input, hasKey ? t.left : new Missing(ps))\n                    if (allErrors) {\n                      es.push([nk, e])\n                      return Effect.void\n                    } else {\n                      return Either.left(new Composite(ast, input, e, output))\n                    }\n                  }\n                  output[index] = t.right\n                  return Effect.void\n                })\n            )\n          }\n        }\n\n        // ---------------------------------------------\n        // handle index signatures\n        // ---------------------------------------------\n        for (let i = 0; i < indexSignatures.length; i++) {\n          const indexSignature = indexSignatures[i]\n          const parameter = indexSignature[0]\n          const type = indexSignature[1]\n          const keys = util_.getKeysForIndexSignature(input, indexSignature[2])\n          for (const key of keys) {\n            // ---------------------------------------------\n            // handle keys\n            // ---------------------------------------------\n            const keu = parameter(key, options)\n            if (isEither(keu) && Either.isRight(keu)) {\n              // ---------------------------------------------\n              // handle values\n              // ---------------------------------------------\n              const vpr = type(input[key], options)\n              if (isEither(vpr)) {\n                if (Either.isLeft(vpr)) {\n                  const e = new Pointer(key, input, vpr.left)\n                  if (allErrors) {\n                    es.push([stepKey++, e])\n                    continue\n                  } else {\n                    return Either.left(new Composite(ast, input, e, output))\n                  }\n                } else {\n                  if (!Object.prototype.hasOwnProperty.call(expectedKeysMap, key)) {\n                    output[key] = vpr.right\n                  }\n                }\n              } else {\n                const nk = stepKey++\n                const index = key\n                if (!queue) {\n                  queue = []\n                }\n                queue.push(\n                  ({ es, output }: State) =>\n                    Effect.flatMap(\n                      Effect.either(vpr),\n                      (tv) => {\n                        if (Either.isLeft(tv)) {\n                          const e = new Pointer(index, input, tv.left)\n                          if (allErrors) {\n                            es.push([nk, e])\n                            return Effect.void\n                          } else {\n                            return Either.left(new Composite(ast, input, e, output))\n                          }\n                        } else {\n                          if (!Object.prototype.hasOwnProperty.call(expectedKeysMap, key)) {\n                            output[key] = tv.right\n                          }\n                          return Effect.void\n                        }\n                      }\n                    )\n                )\n              }\n            }\n          }\n        }\n        // ---------------------------------------------\n        // compute result\n        // ---------------------------------------------\n        const computeResult = ({ es, output }: State) => {\n          if (Arr.isNonEmptyArray(es)) {\n            return Either.left(new Composite(ast, input, sortByIndex(es), output))\n          }\n          if (options?.propertyOrder === \"original\") {\n            // preserve input keys order\n            const keys = inputKeys || Reflect.ownKeys(input)\n            for (const name of expectedKeys) {\n              if (keys.indexOf(name) === -1) {\n                keys.push(name)\n              }\n            }\n            const out: any = {}\n            for (const key of keys) {\n              if (Object.prototype.hasOwnProperty.call(output, key)) {\n                out[key] = output[key]\n              }\n            }\n            return Either.right(out)\n          }\n          return Either.right(output)\n        }\n        if (queue && queue.length > 0) {\n          const cqueue = queue\n          return Effect.suspend(() => {\n            const state: State = {\n              es: Arr.copy(es),\n              output: Object.assign({}, output)\n            }\n            return Effect.flatMap(\n              Effect.forEach(cqueue, (f) => f(state), { concurrency, batching, discard: true }),\n              () => computeResult(state)\n            )\n          })\n        }\n        return computeResult({ es, output })\n      }\n    }\n    case \"Union\": {\n      const searchTree = getSearchTree(ast.types, isDecoding)\n      const ownKeys = Reflect.ownKeys(searchTree.keys)\n      const ownKeysLen = ownKeys.length\n      const astTypesLen = ast.types.length\n      const map = new Map<any, Parser>()\n      for (let i = 0; i < astTypesLen; i++) {\n        map.set(ast.types[i], goMemo(ast.types[i], isDecoding))\n      }\n      const concurrency = getConcurrency(ast) ?? 1\n      const batching = getBatching(ast)\n      return (input, options) => {\n        const es: Array<[number, ParseIssue]> = []\n        let stepKey = 0\n        let candidates: Array<AST.AST> = []\n        if (ownKeysLen > 0) {\n          if (Predicate.isRecordOrArray(input)) {\n            for (let i = 0; i < ownKeysLen; i++) {\n              const name = ownKeys[i]\n              const buckets = searchTree.keys[name].buckets\n              // for each property that should contain a literal, check if the input contains that property\n              if (Object.prototype.hasOwnProperty.call(input, name)) {\n                const literal = String(input[name])\n                // check that the value obtained from the input for the property corresponds to an existing bucket\n                if (Object.prototype.hasOwnProperty.call(buckets, literal)) {\n                  // retrive the minimal set of candidates for decoding\n                  candidates = candidates.concat(buckets[literal])\n                } else {\n                  const { candidates, literals } = searchTree.keys[name]\n                  const literalsUnion = AST.Union.make(literals)\n                  const errorAst = candidates.length === astTypesLen\n                    ? new AST.TypeLiteral([new AST.PropertySignature(name, literalsUnion, false, true)], [])\n                    : AST.Union.make(candidates)\n                  es.push([\n                    stepKey++,\n                    new Composite(errorAst, input, new Pointer(name, input, new Type(literalsUnion, input[name])))\n                  ])\n                }\n              } else {\n                const { candidates, literals } = searchTree.keys[name]\n                const fakePropertySignature = new AST.PropertySignature(name, AST.Union.make(literals), false, true)\n                const errorAst = candidates.length === astTypesLen\n                  ? new AST.TypeLiteral([fakePropertySignature], [])\n                  : AST.Union.make(candidates)\n                es.push([\n                  stepKey++,\n                  new Composite(errorAst, input, new Pointer(name, input, new Missing(fakePropertySignature)))\n                ])\n              }\n            }\n          } else {\n            const errorAst = searchTree.candidates.length === astTypesLen\n              ? ast\n              : AST.Union.make(searchTree.candidates)\n            es.push([stepKey++, new Type(errorAst, input)])\n          }\n        }\n        if (searchTree.otherwise.length > 0) {\n          candidates = candidates.concat(searchTree.otherwise)\n        }\n\n        let queue:\n          | Array<(state: State) => Effect.Effect<unknown, ParseIssue, any>>\n          | undefined = undefined\n\n        type State = {\n          finalResult?: any\n          es: typeof es\n        }\n\n        for (let i = 0; i < candidates.length; i++) {\n          const candidate = candidates[i]\n          const pr = map.get(candidate)!(input, options)\n          // the members of a union are ordered based on which one should be decoded first,\n          // therefore if one member has added a task, all subsequent members must\n          // also add a task to the queue even if they are synchronous\n          if (isEither(pr) && (!queue || queue.length === 0)) {\n            if (Either.isRight(pr)) {\n              return pr\n            } else {\n              es.push([stepKey++, pr.left])\n            }\n          } else {\n            const nk = stepKey++\n            if (!queue) {\n              queue = []\n            }\n            queue.push(\n              (state) =>\n                Effect.suspend(() => {\n                  if (\"finalResult\" in state) {\n                    return Effect.void\n                  } else {\n                    return Effect.flatMap(Effect.either(pr), (t) => {\n                      if (Either.isRight(t)) {\n                        state.finalResult = t\n                      } else {\n                        state.es.push([nk, t.left])\n                      }\n                      return Effect.void\n                    })\n                  }\n                })\n            )\n          }\n        }\n\n        // ---------------------------------------------\n        // compute result\n        // ---------------------------------------------\n        const computeResult = (es: State[\"es\"]) =>\n          Arr.isNonEmptyArray(es) ?\n            es.length === 1 && es[0][1]._tag === \"Type\" ?\n              Either.left(es[0][1]) :\n              Either.left(new Composite(ast, input, sortByIndex(es))) :\n            // this should never happen\n            Either.left(new Type(ast, input))\n\n        if (queue && queue.length > 0) {\n          const cqueue = queue\n          return Effect.suspend(() => {\n            const state: State = { es: Arr.copy(es) }\n            return Effect.flatMap(\n              Effect.forEach(cqueue, (f) => f(state), { concurrency, batching, discard: true }),\n              () => {\n                if (\"finalResult\" in state) {\n                  return state.finalResult\n                }\n                return computeResult(state.es)\n              }\n            )\n          })\n        }\n        return computeResult(es)\n      }\n    }\n    case \"Suspend\": {\n      const get = util_.memoizeThunk(() => goMemo(ast.f(), isDecoding))\n      return (a, options) => get()(a, options)\n    }\n  }\n}\n\nconst fromRefinement = <A>(ast: AST.AST, refinement: (u: unknown) => u is A): Parser => (u) =>\n  refinement(u) ? Either.right(u) : Either.left(new Type(ast, u))\n\n/** @internal */\nexport const getLiterals = (\n  ast: AST.AST,\n  isDecoding: boolean\n): ReadonlyArray<[PropertyKey, AST.Literal]> => {\n  switch (ast._tag) {\n    case \"Declaration\": {\n      const annotation = AST.getSurrogateAnnotation(ast)\n      if (Option.isSome(annotation)) {\n        return getLiterals(annotation.value, isDecoding)\n      }\n      break\n    }\n    case \"TypeLiteral\": {\n      const out: Array<[PropertyKey, AST.Literal]> = []\n      for (let i = 0; i < ast.propertySignatures.length; i++) {\n        const propertySignature = ast.propertySignatures[i]\n        const type = isDecoding ? AST.encodedAST(propertySignature.type) : AST.typeAST(propertySignature.type)\n        if (AST.isLiteral(type) && !propertySignature.isOptional) {\n          out.push([propertySignature.name, type])\n        }\n      }\n      return out\n    }\n    case \"TupleType\": {\n      const out: Array<[PropertyKey, AST.Literal]> = []\n      for (let i = 0; i < ast.elements.length; i++) {\n        const element = ast.elements[i]\n        const type = isDecoding ? AST.encodedAST(element.type) : AST.typeAST(element.type)\n        if (AST.isLiteral(type) && !element.isOptional) {\n          out.push([i, type])\n        }\n      }\n      return out\n    }\n    case \"Refinement\":\n      return getLiterals(ast.from, isDecoding)\n    case \"Suspend\":\n      return getLiterals(ast.f(), isDecoding)\n    case \"Transformation\":\n      return getLiterals(isDecoding ? ast.from : ast.to, isDecoding)\n  }\n  return []\n}\n\n/**\n * The purpose of the algorithm is to narrow down the pool of possible\n * candidates for decoding as much as possible.\n *\n * This function separates the schemas into two groups, `keys` and `otherwise`:\n *\n * - `keys`: the schema has at least one property with a literal value\n * - `otherwise`: the schema has no properties with a literal value\n *\n * If a schema has at least one property with a literal value, so it ends up in\n * `keys`, first a namespace is created for the name of the property containing\n * the literal, and then within this namespace a \"bucket\" is created for the\n * literal value in which to store all the schemas that have the same property\n * and literal value.\n *\n * @internal\n */\nexport const getSearchTree = (\n  members: ReadonlyArray<AST.AST>,\n  isDecoding: boolean\n): {\n  keys: {\n    readonly [key: PropertyKey]: {\n      buckets: { [literal: string]: ReadonlyArray<AST.AST> }\n      literals: ReadonlyArray<AST.Literal> // this is for error messages\n      candidates: ReadonlyArray<AST.AST>\n    }\n  }\n  otherwise: ReadonlyArray<AST.AST>\n  candidates: ReadonlyArray<AST.AST>\n} => {\n  const keys: {\n    [key: PropertyKey]: {\n      buckets: { [literal: string]: Array<AST.AST> }\n      literals: Array<AST.Literal>\n      candidates: Array<AST.AST>\n    }\n  } = {}\n  const otherwise: Array<AST.AST> = []\n  const candidates: Array<AST.AST> = []\n  for (let i = 0; i < members.length; i++) {\n    const member = members[i]\n    const tags = getLiterals(member, isDecoding)\n    if (tags.length > 0) {\n      candidates.push(member)\n      for (let j = 0; j < tags.length; j++) {\n        const [key, literal] = tags[j]\n        const hash = String(literal.literal)\n        keys[key] = keys[key] || { buckets: {}, literals: [], candidates: [] }\n        const buckets = keys[key].buckets\n        if (Object.prototype.hasOwnProperty.call(buckets, hash)) {\n          if (j < tags.length - 1) {\n            continue\n          }\n          buckets[hash].push(member)\n          keys[key].literals.push(literal)\n          keys[key].candidates.push(member)\n        } else {\n          buckets[hash] = [member]\n          keys[key].literals.push(literal)\n          keys[key].candidates.push(member)\n          break\n        }\n      }\n    } else {\n      otherwise.push(member)\n    }\n  }\n  return { keys, otherwise, candidates }\n}\n\nconst dropRightRefinement = (ast: AST.AST): AST.AST => AST.isRefinement(ast) ? dropRightRefinement(ast.from) : ast\n\nconst handleForbidden = <A, R>(\n  effect: Effect.Effect<A, ParseIssue, R>,\n  ast: AST.AST,\n  actual: unknown,\n  options: InternalOptions | undefined\n): Effect.Effect<A, ParseIssue, R> => {\n  // If effects are allowed, return the original effect\n  if (options?.isEffectAllowed === true) {\n    return effect\n  }\n\n  // If the effect is already an Either, return it directly\n  if (isEither(effect)) {\n    return effect\n  }\n\n  // Otherwise, attempt to execute the effect synchronously\n  const scheduler = new Scheduler.SyncScheduler()\n  const fiber = Effect.runFork(effect as Effect.Effect<A, ParseIssue>, { scheduler })\n  scheduler.flush()\n  const exit = fiber.unsafePoll()\n\n  if (exit) {\n    if (Exit.isSuccess(exit)) {\n      // If the effect successfully resolves, wrap the value in a Right\n      return Either.right(exit.value)\n    }\n    const cause = exit.cause\n    if (Cause.isFailType(cause)) {\n      // The effect executed synchronously but failed due to a ParseIssue\n      return Either.left(cause.error)\n    }\n    // The effect executed synchronously but failed due to a defect (e.g., a missing dependency)\n    return Either.left(new Forbidden(ast, actual, Cause.pretty(cause)))\n  }\n\n  // The effect could not be resolved synchronously, meaning it performs async work\n  return Either.left(\n    new Forbidden(\n      ast,\n      actual,\n      \"cannot be be resolved synchronously, this is caused by using runSync on an effect that performs async work\"\n    )\n  )\n}\n\nconst compare = ([a]: [number, ...Array<unknown>], [b]: [number, ...Array<unknown>]) => a > b ? 1 : a < b ? -1 : 0\n\nfunction sortByIndex<T>(\n  es: Arr.NonEmptyArray<[number, T]>\n): Arr.NonEmptyArray<T>\nfunction sortByIndex<T>(es: Array<[number, T]>): Array<T>\nfunction sortByIndex(es: Array<[number, any]>) {\n  return es.sort(compare).map((t) => t[1])\n}\n\n// -------------------------------------------------------------------------------------\n// transformations interpreter\n// -------------------------------------------------------------------------------------\n\n/** @internal */\nexport const getFinalTransformation = (\n  transformation: AST.TransformationKind,\n  isDecoding: boolean\n): (\n  fromA: any,\n  options: AST.ParseOptions,\n  self: AST.Transformation,\n  fromI: any\n) => Effect.Effect<any, ParseIssue, any> => {\n  switch (transformation._tag) {\n    case \"FinalTransformation\":\n      return isDecoding ? transformation.decode : transformation.encode\n    case \"ComposeTransformation\":\n      return Either.right\n    case \"TypeLiteralTransformation\":\n      return (input) => {\n        let out: Effect.Effect<any, ParseIssue, any> = Either.right(input)\n\n        // ---------------------------------------------\n        // handle property signature transformations\n        // ---------------------------------------------\n        for (const pst of transformation.propertySignatureTransformations) {\n          const [from, to] = isDecoding ?\n            [pst.from, pst.to] :\n            [pst.to, pst.from]\n          const transformation = isDecoding ? pst.decode : pst.encode\n          const f = (input: any) => {\n            const o = transformation(\n              Object.prototype.hasOwnProperty.call(input, from) ?\n                Option.some(input[from]) :\n                Option.none()\n            )\n            delete input[from]\n            if (Option.isSome(o)) {\n              input[to] = o.value\n            }\n            return input\n          }\n          out = map(out, f)\n        }\n        return out\n      }\n  }\n}\n\n// ----------------\n// Formatters\n// ----------------\n\ninterface Forest<A> extends ReadonlyArray<Tree<A>> {}\n\ninterface Tree<A> {\n  readonly value: A\n  readonly forest: Forest<A>\n}\n\nconst makeTree = <A>(value: A, forest: Forest<A> = []): Tree<A> => ({\n  value,\n  forest\n})\n\n/**\n * @category formatting\n * @since 3.10.0\n */\nexport interface ParseResultFormatter<A> {\n  readonly formatIssue: (issue: ParseIssue) => Effect.Effect<A>\n  readonly formatIssueSync: (issue: ParseIssue) => A\n  readonly formatError: (error: ParseError) => Effect.Effect<A>\n  readonly formatErrorSync: (error: ParseError) => A\n}\n\n/**\n * @category formatting\n * @since 3.10.0\n */\nexport const TreeFormatter: ParseResultFormatter<string> = {\n  formatIssue: (issue) => map(formatTree(issue), drawTree),\n  formatIssueSync: (issue) => {\n    const e = TreeFormatter.formatIssue(issue)\n    return isEither(e) ? Either.getOrThrow(e) : Effect.runSync(e)\n  },\n  formatError: (error) => TreeFormatter.formatIssue(error.issue),\n  formatErrorSync: (error) => TreeFormatter.formatIssueSync(error.issue)\n}\n\nconst drawTree = (tree: Tree<string>): string => tree.value + draw(\"\\n\", tree.forest)\n\nconst draw = (indentation: string, forest: Forest<string>): string => {\n  let r = \"\"\n  const len = forest.length\n  let tree: Tree<string>\n  for (let i = 0; i < len; i++) {\n    tree = forest[i]\n    const isLast = i === len - 1\n    r += indentation + (isLast ? \"└\" : \"├\") + \"─ \" + tree.value\n    r += draw(indentation + (len > 1 && !isLast ? \"│  \" : \"   \"), tree.forest)\n  }\n  return r\n}\n\nconst formatTransformationKind = (kind: Transformation[\"kind\"]): string => {\n  switch (kind) {\n    case \"Encoded\":\n      return \"Encoded side transformation failure\"\n    case \"Transformation\":\n      return \"Transformation process failure\"\n    case \"Type\":\n      return \"Type side transformation failure\"\n  }\n}\n\nconst formatRefinementKind = (kind: Refinement[\"kind\"]): string => {\n  switch (kind) {\n    case \"From\":\n      return \"From side refinement failure\"\n    case \"Predicate\":\n      return \"Predicate refinement failure\"\n  }\n}\n\nconst getAnnotated = (issue: ParseIssue): Option.Option<AST.Annotated> =>\n  \"ast\" in issue ? Option.some(issue.ast) : Option.none()\n\ninterface CurrentMessage {\n  readonly message: string\n  readonly override: boolean\n}\n\n// TODO: replace with Either.void when 3.13 lands\nconst Either_void = Either.right(undefined)\n\nconst getCurrentMessage = (issue: ParseIssue): Effect.Effect<CurrentMessage | undefined> =>\n  getAnnotated(issue).pipe(\n    Option.flatMap(AST.getMessageAnnotation),\n    Option.match({\n      onNone: () => Either_void,\n      onSome: (messageAnnotation) => {\n        const union = messageAnnotation(issue)\n        if (Predicate.isString(union)) {\n          return Either.right({ message: union, override: false })\n        }\n        if (Effect.isEffect(union)) {\n          return Effect.map(union, (message) => ({ message, override: false }))\n        }\n        if (Predicate.isString(union.message)) {\n          return Either.right({ message: union.message, override: union.override })\n        }\n        return Effect.map(union.message, (message) => ({ message, override: union.override }))\n      }\n    })\n  )\n\nconst createParseIssueGuard =\n  <T extends ParseIssue[\"_tag\"]>(tag: T) => (issue: ParseIssue): issue is Extract<ParseIssue, { _tag: T }> =>\n    issue._tag === tag\n\n/**\n * Returns `true` if the value is a `Composite`.\n *\n * @category guards\n * @since 3.10.0\n */\nexport const isComposite = createParseIssueGuard(\"Composite\")\n\nconst isRefinement = createParseIssueGuard(\"Refinement\")\nconst isTransformation = createParseIssueGuard(\"Transformation\")\n\nconst getMessage = (issue: ParseIssue): Effect.Effect<string | undefined> =>\n  flatMap(getCurrentMessage(issue), (currentMessage) => {\n    if (currentMessage !== undefined) {\n      const useInnerMessage = !currentMessage.override && (\n        isComposite(issue) ||\n        (isRefinement(issue) && issue.kind === \"From\") ||\n        (isTransformation(issue) && issue.kind !== \"Transformation\")\n      )\n      return useInnerMessage\n        ? isTransformation(issue) || isRefinement(issue) ? getMessage(issue.issue) : Either_void\n        : Either.right(currentMessage.message)\n    }\n    return Either_void\n  })\n\nconst getParseIssueTitleAnnotation = (issue: ParseIssue): string | undefined =>\n  getAnnotated(issue).pipe(\n    Option.flatMap(AST.getParseIssueTitleAnnotation),\n    Option.flatMapNullable((annotation) => annotation(issue)),\n    Option.getOrUndefined\n  )\n\n/** @internal */\nexport function getRefinementExpected(ast: AST.Refinement): string {\n  return AST.getDescriptionAnnotation(ast).pipe(\n    Option.orElse(() => AST.getTitleAnnotation(ast)),\n    Option.orElse(() => AST.getAutoTitleAnnotation(ast)),\n    Option.orElse(() => AST.getIdentifierAnnotation(ast)),\n    Option.getOrElse(() => `{ ${ast.from} | filter }`)\n  )\n}\n\nfunction getDefaultTypeMessage(issue: Type): string {\n  if (issue.message !== undefined) {\n    return issue.message\n  }\n  const expected = AST.isRefinement(issue.ast) ? getRefinementExpected(issue.ast) : String(issue.ast)\n  return `Expected ${expected}, actual ${util_.formatUnknown(issue.actual)}`\n}\n\nconst formatTypeMessage = (issue: Type): Effect.Effect<string> =>\n  map(\n    getMessage(issue),\n    (message) => message ?? getParseIssueTitleAnnotation(issue) ?? getDefaultTypeMessage(issue)\n  )\n\nconst getParseIssueTitle = (\n  issue: Forbidden | Transformation | Refinement | Composite\n): string => getParseIssueTitleAnnotation(issue) ?? String(issue.ast)\n\nconst formatForbiddenMessage = (issue: Forbidden): string => issue.message ?? \"is forbidden\"\n\nconst formatUnexpectedMessage = (issue: Unexpected): string => issue.message ?? \"is unexpected\"\n\nconst formatMissingMessage = (issue: Missing): Effect.Effect<string> => {\n  const missingMessageAnnotation = AST.getMissingMessageAnnotation(issue.ast)\n  if (Option.isSome(missingMessageAnnotation)) {\n    const annotation = missingMessageAnnotation.value()\n    return Predicate.isString(annotation) ? Either.right(annotation) : annotation\n  }\n  return Either.right(issue.message ?? \"is missing\")\n}\n\nconst formatTree = (issue: ParseIssue): Effect.Effect<Tree<string>> => {\n  switch (issue._tag) {\n    case \"Type\":\n      return map(formatTypeMessage(issue), makeTree)\n    case \"Forbidden\":\n      return Either.right(makeTree(getParseIssueTitle(issue), [makeTree(formatForbiddenMessage(issue))]))\n    case \"Unexpected\":\n      return Either.right(makeTree(formatUnexpectedMessage(issue)))\n    case \"Missing\":\n      return map(formatMissingMessage(issue), makeTree)\n    case \"Transformation\":\n      return flatMap(getMessage(issue), (message) => {\n        if (message !== undefined) {\n          return Either.right(makeTree(message))\n        }\n        return map(\n          formatTree(issue.issue),\n          (tree) => makeTree(getParseIssueTitle(issue), [makeTree(formatTransformationKind(issue.kind), [tree])])\n        )\n      })\n    case \"Refinement\":\n      return flatMap(getMessage(issue), (message) => {\n        if (message !== undefined) {\n          return Either.right(makeTree(message))\n        }\n        return map(\n          formatTree(issue.issue),\n          (tree) => makeTree(getParseIssueTitle(issue), [makeTree(formatRefinementKind(issue.kind), [tree])])\n        )\n      })\n    case \"Pointer\":\n      return map(formatTree(issue.issue), (tree) => makeTree(util_.formatPath(issue.path), [tree]))\n    case \"Composite\":\n      return flatMap(getMessage(issue), (message) => {\n        if (message !== undefined) {\n          return Either.right(makeTree(message))\n        }\n        const parseIssueTitle = getParseIssueTitle(issue)\n        return util_.isNonEmpty(issue.issues)\n          ? map(Effect.forEach(issue.issues, formatTree), (forest) => makeTree(parseIssueTitle, forest))\n          : map(formatTree(issue.issues), (tree) => makeTree(parseIssueTitle, [tree]))\n      })\n  }\n}\n\n/**\n * Represents an issue returned by the {@link ArrayFormatter} formatter.\n *\n * @category model\n * @since 3.10.0\n */\nexport interface ArrayFormatterIssue {\n  /**\n   * The tag identifying the type of parse issue.\n   */\n  readonly _tag: ParseIssue[\"_tag\"]\n\n  /**\n   * The path to the property where the issue occurred.\n   */\n  readonly path: ReadonlyArray<PropertyKey>\n\n  /**\n   * A descriptive message explaining the issue.\n   */\n  readonly message: string\n}\n\nconst makeArrayFormatterIssue = (\n  _tag: ArrayFormatterIssue[\"_tag\"],\n  path: ArrayFormatterIssue[\"path\"],\n  message: ArrayFormatterIssue[\"message\"]\n): ArrayFormatterIssue => ({ _tag, path, message })\n\n/**\n * @category formatting\n * @since 3.10.0\n */\nexport const ArrayFormatter: ParseResultFormatter<Array<ArrayFormatterIssue>> = {\n  formatIssue: (issue) => getArrayFormatterIssues(issue, undefined, []),\n  formatIssueSync: (issue) => {\n    const e = ArrayFormatter.formatIssue(issue)\n    return isEither(e) ? Either.getOrThrow(e) : Effect.runSync(e)\n  },\n  formatError: (error) => ArrayFormatter.formatIssue(error.issue),\n  formatErrorSync: (error) => ArrayFormatter.formatIssueSync(error.issue)\n}\n\nconst getArrayFormatterIssues = (\n  issue: ParseIssue,\n  parentTag: ArrayFormatterIssue[\"_tag\"] | undefined,\n  path: ReadonlyArray<PropertyKey>\n): Effect.Effect<Array<ArrayFormatterIssue>> => {\n  const _tag = issue._tag\n  switch (_tag) {\n    case \"Type\":\n      return map(formatTypeMessage(issue), (message) => [makeArrayFormatterIssue(parentTag ?? _tag, path, message)])\n    case \"Forbidden\":\n      return Either.right([makeArrayFormatterIssue(_tag, path, formatForbiddenMessage(issue))])\n    case \"Unexpected\":\n      return Either.right([makeArrayFormatterIssue(_tag, path, formatUnexpectedMessage(issue))])\n    case \"Missing\":\n      return map(formatMissingMessage(issue), (message) => [makeArrayFormatterIssue(_tag, path, message)])\n    case \"Pointer\":\n      return getArrayFormatterIssues(issue.issue, undefined, path.concat(issue.path))\n    case \"Composite\":\n      return flatMap(getMessage(issue), (message) => {\n        if (message !== undefined) {\n          return Either.right([makeArrayFormatterIssue(_tag, path, message)])\n        }\n        return util_.isNonEmpty(issue.issues)\n          ? map(Effect.forEach(issue.issues, (issue) => getArrayFormatterIssues(issue, undefined, path)), Arr.flatten)\n          : getArrayFormatterIssues(issue.issues, undefined, path)\n      })\n    case \"Refinement\":\n      return flatMap(getMessage(issue), (message) => {\n        if (message !== undefined) {\n          return Either.right([makeArrayFormatterIssue(_tag, path, message)])\n        }\n        return getArrayFormatterIssues(issue.issue, issue.kind === \"Predicate\" ? _tag : undefined, path)\n      })\n    case \"Transformation\":\n      return flatMap(getMessage(issue), (message) => {\n        if (message !== undefined) {\n          return Either.right([makeArrayFormatterIssue(_tag, path, message)])\n        }\n        return getArrayFormatterIssues(issue.issue, issue.kind === \"Transformation\" ? _tag : undefined, path)\n      })\n  }\n}\n"],
  "mappings": "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",
  "names": ["description", "convertSchema", "buildManifest", "importErrors", "timings", "error", "parsedType", "keys", "values", "values", "types", "x", "base", "name", "schema", "entries", "values", "array", "set", "format", "values", "id", "schema", "params", "gen", "isFunction", "input", "dual", "arity", "body", "arguments", "apply", "self", "RangeError", "a", "b", "length", "c", "d", "e", "args", "identity", "a", "constant", "value", "constTrue", "constFalse", "constUndefined", "constant", "undefined", "constVoid", "pipe", "a", "ab", "bc", "cd", "de", "ef", "fg", "gh", "hi", "arguments", "length", "ret", "i", "make", "isEquivalent", "self", "that", "mapInput", "dual", "self", "f", "make", "x", "y", "array", "item", "make", "self", "that", "length", "i", "isEq", "globalStoreId", "globalStore", "globalValue", "id", "compute", "globalThis", "Map", "has", "set", "get", "isString", "input", "isNumber", "isBoolean", "isBigInt", "isSymbol", "isFunction", "isFunction_", "isUndefined", "input", "undefined", "isNever", "_", "isRecordOrArray", "input", "isObject", "isFunction", "hasProperty", "dual", "self", "property", "isTagged", "tag", "isNullable", "undefined", "isNotNullable", "isDate", "input", "Date", "isIterable", "hasProperty", "Symbol", "iterator", "isRecord", "isRecordOrArray", "Array", "isArray", "isPromiseLike", "input", "hasProperty", "isFunction", "then", "getBugErrorMessage", "message", "GenKindTypeId", "Symbol", "for", "GenKindImpl", "value", "constructor", "_F", "identity", "_R", "_", "_O", "_E", "GenKindTypeId", "Symbol", "iterator", "SingleShotGen", "self", "called", "next", "a", "done", "return", "throw", "e", "defaultIncHi", "defaultIncLo", "MUL_HI", "MUL_LO", "BIT_53", "BIT_27", "PCGRandom", "_state", "constructor", "seedHi", "seedLo", "incHi", "incLo", "isNullable", "Math", "random", "Int32Array", "_next", "add64", "getState", "setState", "state", "integer", "max", "round", "number", "Number", "MAX_SAFE_INTEGER", "hi", "lo", "oldHi", "oldLo", "mul64", "xsHi", "xsLo", "xorshifted", "rot", "rot2", "out", "aHi", "aLo", "bHi", "bLo", "c1", "c0", "imul", "YieldWrapTypeId", "Symbol", "for", "YieldWrap", "value", "yieldWrapGet", "self", "Error", "getBugErrorMessage", "structuralRegionState", "globalValue", "enabled", "tester", "undefined", "standard", "effect_internal_function", "body", "forced", "isNotOptimizedAway", "Error", "stack", "includes", "internalCall", "genConstructor", "constructor", "randomHashCache", "globalValue", "Symbol", "for", "WeakMap", "symbol", "hash", "self", "structuralRegionState", "enabled", "number", "string", "toString", "String", "Date", "toISOString", "URL", "href", "isHash", "random", "Error", "has", "set", "Math", "floor", "Number", "MAX_SAFE_INTEGER", "get", "combine", "b", "optimize", "n", "u", "hasProperty", "Infinity", "h", "str", "i", "length", "charCodeAt", "structureKeys", "o", "keys", "pipe", "structure", "Object", "array", "arr", "cached", "arguments", "defineProperty", "value", "enumerable", "symbol", "Symbol", "for", "equals", "arguments", "length", "self", "compareBoth", "that", "selfType", "isEqual", "hash", "structuralRegionState", "enabled", "tester", "Date", "toISOString", "URL", "href", "Array", "isArray", "every", "v", "i", "Object", "getPrototypeOf", "prototype", "keysSelf", "keys", "keysThat", "key", "u", "hasProperty", "equivalence", "NodeInspectSymbol", "Symbol", "for", "toJSON", "x", "hasProperty", "isFunction", "length", "Array", "isArray", "map", "redact", "format", "JSON", "stringify", "BaseProto", "toString", "Class", "toStringUnknown", "u", "whitespace", "stringifyCircular", "String", "obj", "cache", "retVal", "_key", "value", "includes", "undefined", "push", "redactableState", "fiberRefs", "isRedactable", "symbolRedactable", "globalValue", "withRedactableContext", "context", "f", "prev", "pipeArguments", "self", "args", "length", "ret", "i", "len", "OP_ASYNC", "OP_COMMIT", "OP_FAILURE", "OP_ON_FAILURE", "OP_ON_SUCCESS", "OP_ON_SUCCESS_AND_FAILURE", "OP_SUCCESS", "OP_SYNC", "OP_TAG", "OP_UPDATE_RUNTIME_FLAGS", "OP_WHILE", "OP_ITERATOR", "OP_WITH_RUNTIME", "OP_YIELD", "OP_REVERT_FLAGS", "moduleVersion", "getCurrentVersion", "EffectTypeId", "Symbol", "for", "StreamTypeId", "SinkTypeId", "ChannelTypeId", "effectVariance", "_R", "_", "_E", "_A", "_V", "version", "getCurrentVersion", "sinkVariance", "_In", "_L", "channelVariance", "_Env", "_InErr", "_InElem", "_InDone", "_OutErr", "_OutElem", "_OutDone", "EffectPrototype", "symbol", "that", "cached", "random", "iterator", "SingleShotGen", "YieldWrap", "pipe", "pipeArguments", "arguments", "StructuralPrototype", "structure", "selfKeys", "Object", "keys", "thatKeys", "length", "key", "equals", "CommitPrototype", "_op", "OP_COMMIT", "StructuralCommitPrototype", "Base", "prototype", "TypeId", "Symbol", "for", "CommonProto", "EffectPrototype", "_A", "_", "NodeInspectSymbol", "toJSON", "toString", "format", "SomeProto", "Object", "assign", "create", "_tag", "_op", "symbol", "that", "isOption", "isSome", "equals", "value", "cached", "combine", "hash", "_id", "NoneHash", "Hash", "NoneProto", "isNone", "input", "hasProperty", "fa", "none", "some", "a", "TypeId", "Symbol", "for", "CommonProto", "EffectPrototype", "_R", "_", "NodeInspectSymbol", "toJSON", "toString", "format", "RightProto", "Object", "assign", "create", "_tag", "_op", "symbol", "that", "isEither", "isRight", "equals", "right", "combine", "hash", "_id", "LeftProto", "isLeft", "left", "input", "hasProperty", "ma", "a", "getRight", "self", "isLeft", "none", "some", "right", "right", "left", "isEither", "isLeft", "isRight", "mapLeft", "dual", "self", "f", "isLeft", "left", "right", "map", "isRight", "match", "onLeft", "onRight", "merge", "match", "onLeft", "identity", "onRight", "getOrThrowWith", "dual", "self", "onLeft", "isRight", "right", "left", "getOrThrow", "Error", "isNonEmptyArray", "self", "length", "make", "compare", "self", "that", "number", "make", "self", "that", "mapInput", "dual", "self", "f", "make", "b1", "b2", "greaterThan", "O", "dual", "self", "that", "none", "some", "isNone", "isSome", "match", "dual", "self", "onNone", "onSome", "value", "getRight", "getOrElse", "dual", "self", "onNone", "isNone", "value", "orElse", "that", "orElseSome", "some", "fromNullable", "nullableValue", "none", "some", "getOrUndefined", "getOrElse", "constUndefined", "liftThrowable", "f", "a", "some", "none", "map", "dual", "self", "f", "isNone", "none", "some", "value", "flatMap", "dual", "self", "f", "isNone", "none", "value", "flatMapNullable", "dual", "self", "f", "isNone", "none", "fromNullable", "value", "containsWith", "isEquivalent", "dual", "self", "a", "isNone", "value", "_equivalence", "Equal", "equivalence", "contains", "exists", "refinement", "make", "elements", "isEmptyRecord", "self", "keys", "length", "has", "dual", "self", "key", "Object", "prototype", "hasOwnProperty", "call", "keys", "self", "Object", "allocate", "n", "Array", "makeBy", "dual", "f", "max", "Math", "floor", "out", "i", "fromIterable", "collection", "Array", "isArray", "from", "ensure", "self", "matchLeft", "dual", "self", "onEmpty", "onNonEmpty", "isNonEmptyReadonlyArray", "headNonEmpty", "tailNonEmpty", "prepend", "dual", "self", "head", "append", "dual", "self", "last", "appendAll", "that", "fromIterable", "concat", "isArray", "Array", "isEmptyArray", "self", "length", "isEmptyReadonlyArray", "isNonEmptyArray", "isNonEmptyReadonlyArray", "isOutOfBounds", "i", "as", "length", "clamp", "Math", "floor", "min", "max", "get", "dual", "self", "index", "none", "some", "unsafeGet", "Error", "head", "get", "headNonEmpty", "unsafeGet", "last", "self", "isNonEmptyReadonlyArray", "some", "lastNonEmpty", "none", "length", "tailNonEmpty", "self", "slice", "spanIndex", "self", "predicate", "i", "a", "span", "dual", "splitAt", "drop", "n", "input", "fromIterable", "slice", "clamp", "length", "reverse", "self", "Array", "from", "sort", "dual", "O", "out", "zip", "dual", "self", "that", "zipWith", "make", "f", "as", "fromIterable", "bs", "isNonEmptyReadonlyArray", "out", "headNonEmpty", "len", "Math", "min", "length", "i", "_equivalence", "Equal", "equivalence", "splitAt", "dual", "self", "n", "input", "Array", "from", "_n", "Math", "floor", "isNonEmptyReadonlyArray", "splitNonEmptyAt", "max", "length", "copy", "prepend", "slice", "headNonEmpty", "copy", "self", "slice", "unionWith", "dual", "self", "that", "isEquivalent", "a", "fromIterable", "b", "isNonEmptyReadonlyArray", "dedupe", "dedupeWith", "appendAll", "union", "_equivalence", "empty", "of", "a", "map", "dual", "self", "f", "flatMap", "isEmptyReadonlyArray", "out", "i", "length", "inner", "j", "push", "flatten", "identity", "filterMap", "as", "fromIterable", "o", "isSome", "value", "reduce", "dual", "self", "b", "f", "fromIterable", "a", "i", "unfold", "b", "f", "out", "next", "o", "isSome", "a", "value", "push", "getEquivalence", "array", "dedupeWith", "dual", "self", "isEquivalent", "input", "fromIterable", "isNonEmptyReadonlyArray", "out", "headNonEmpty", "rest", "tailNonEmpty", "r", "every", "a", "push", "dedupe", "equivalence", "join", "dual", "self", "sep", "fromIterable", "getKeysForIndexSignature", "input", "parameter", "_tag", "Object", "keys", "getOwnPropertySymbols", "from", "memoizeThunk", "f", "done", "a", "formatDate", "date", "toISOString", "String", "CIRCULAR", "formatUnknown", "whitespace", "seen", "WeakSet", "gap", "repeat", "ind", "d", "safeToString", "x", "s", "toString", "wrap", "v", "body", "ctor", "constructor", "prototype", "name", "ownKeys", "o", "Reflect", "go", "Array", "isArray", "has", "add", "length", "map", "join", "inner", "isDate", "hasProperty", "isFunction", "isString", "JSON", "stringify", "isNumber", "isBoolean", "isSymbol", "isBigInt", "Set", "Map", "isObject", "k", "formatPropertyKey", "isNonEmpty", "formatPathKey", "key", "formatPropertyKey", "formatPath", "path", "isNonEmpty", "map", "join", "getErrorMessage", "reason", "details", "path", "ast", "out", "isNonEmptyReadonlyArray", "formatPath", "undefined", "_tag", "getMissingAnnotationErrorMessage", "details", "path", "ast", "getErrorMessage", "getJSONSchemaMissingAnnotationErrorMessage", "path", "ast", "getMissingAnnotationErrorMessage", "getJSONSchemaMissingIdentifierAnnotationErrorMessage", "getJSONSchemaUnsupportedPostRestElementsErrorMessage", "getErrorMessage", "undefined", "getJSONSchemaUnsupportedKeyErrorMessage", "key", "formatPropertyKey", "getASTDuplicateIndexSignatureErrorMessage", "type", "getErrorMessage", "getASTIndexSignatureParameterErrorMessage", "getASTRequiredElementFollowinAnOptionalElementErrorMessage", "getASTDuplicatePropertySignatureErrorMessage", "key", "getErrorMessage", "formatUnknown", "IntSchemaId", "Symbol", "for", "Order", "number", "escape", "string", "replace", "BrandAnnotationId", "Symbol", "for", "SchemaIdAnnotationId", "MessageAnnotationId", "MissingMessageAnnotationId", "IdentifierAnnotationId", "TitleAnnotationId", "AutoTitleAnnotationId", "DescriptionAnnotationId", "ExamplesAnnotationId", "DefaultAnnotationId", "JSONSchemaAnnotationId", "ArbitraryAnnotationId", "PrettyAnnotationId", "EquivalenceAnnotationId", "ConcurrencyAnnotationId", "Symbol", "for", "BatchingAnnotationId", "ParseIssueTitleAnnotationId", "ParseOptionsAnnotationId", "DecodingFallbackAnnotationId", "SurrogateAnnotationId", "StableFilterAnnotationId", "getAnnotation", "dual", "annotated", "key", "Object", "prototype", "hasOwnProperty", "call", "annotations", "some", "none", "getBrandAnnotation", "BrandAnnotationId", "getMessageAnnotation", "getAnnotation", "MessageAnnotationId", "getMissingMessageAnnotation", "MissingMessageAnnotationId", "getTitleAnnotation", "TitleAnnotationId", "getAutoTitleAnnotation", "AutoTitleAnnotationId", "getIdentifierAnnotation", "IdentifierAnnotationId", "getDescriptionAnnotation", "DescriptionAnnotationId", "getExamplesAnnotation", "ExamplesAnnotationId", "getDefaultAnnotation", "DefaultAnnotationId", "getJSONSchemaAnnotation", "JSONSchemaAnnotationId", "getConcurrencyAnnotation", "getAnnotation", "ConcurrencyAnnotationId", "getBatchingAnnotation", "BatchingAnnotationId", "getParseIssueTitleAnnotation", "ParseIssueTitleAnnotationId", "getParseOptionsAnnotation", "ParseOptionsAnnotationId", "getDecodingFallbackAnnotation", "DecodingFallbackAnnotationId", "getSurrogateAnnotation", "SurrogateAnnotationId", "getStableFilterAnnotation", "StableFilterAnnotationId", "hasStableFilter", "annotated", "exists", "b", "JSONIdentifierAnnotationId", "Symbol", "for", "getJSONIdentifierAnnotation", "getJSONIdentifier", "orElse", "getIdentifierAnnotation", "ParseJsonSchemaId", "Declaration", "typeParameters", "decodeUnknown", "encodeUnknown", "annotations", "_tag", "constructor", "toString", "getOrElse", "getExpected", "toJSON", "map", "ast", "toJSONAnnotations", "createASTGuard", "tag", "isDeclaration", "Literal", "literal", "formatUnknown", "isBigInt", "String", "isLiteral", "UniqueSymbol", "symbol", "annotations", "_tag", "constructor", "toString", "getOrElse", "getExpected", "formatUnknown", "toJSON", "String", "toJSONAnnotations", "UndefinedKeyword", "annotations", "_tag", "constructor", "toString", "formatKeyword", "toJSON", "toJSONAnnotations", "undefinedKeyword", "TitleAnnotationId", "VoidKeyword", "annotations", "_tag", "constructor", "toString", "formatKeyword", "toJSON", "toJSONAnnotations", "voidKeyword", "TitleAnnotationId", "NeverKeyword", "annotations", "_tag", "constructor", "toString", "formatKeyword", "toJSON", "toJSONAnnotations", "neverKeyword", "TitleAnnotationId", "isNeverKeyword", "createASTGuard", "UnknownKeyword", "unknownKeyword", "AnyKeyword", "annotations", "_tag", "constructor", "toString", "formatKeyword", "toJSON", "toJSONAnnotations", "anyKeyword", "TitleAnnotationId", "StringKeyword", "annotations", "_tag", "constructor", "toString", "formatKeyword", "toJSON", "toJSONAnnotations", "stringKeyword", "TitleAnnotationId", "DescriptionAnnotationId", "isStringKeyword", "createASTGuard", "NumberKeyword", "numberKeyword", "BooleanKeyword", "annotations", "_tag", "constructor", "toString", "formatKeyword", "toJSON", "toJSONAnnotations", "booleanKeyword", "TitleAnnotationId", "DescriptionAnnotationId", "BigIntKeyword", "annotations", "_tag", "constructor", "toString", "formatKeyword", "toJSON", "toJSONAnnotations", "bigIntKeyword", "TitleAnnotationId", "DescriptionAnnotationId", "SymbolKeyword", "annotations", "_tag", "constructor", "toString", "formatKeyword", "toJSON", "toJSONAnnotations", "symbolKeyword", "TitleAnnotationId", "DescriptionAnnotationId", "isSymbolKeyword", "createASTGuard", "ObjectKeyword", "objectKeyword", "Type", "type", "annotations", "constructor", "toJSON", "toJSONAnnotations", "toString", "String", "OptionalType", "isOptional", "getRestASTs", "rest", "map", "annotatedAST", "TupleType", "elements", "isReadonly", "_tag", "hasOptionalElement", "hasIllegalRequiredElement", "e", "length", "Error", "getASTRequiredElementFollowinAnOptionalElementErrorMessage", "getOrElse", "getExpected", "formatTuple", "ast", "formattedElements", "join", "matchLeft", "onEmpty", "onNonEmpty", "head", "tail", "formattedHead", "wrappedHead", "includes", "formattedTail", "PropertySignature", "OptionalType", "name", "isReadonly", "constructor", "type", "isOptional", "annotations", "toString", "String", "toJSON", "toJSONAnnotations", "isParameter", "ast", "_tag", "from", "IndexSignature", "parameter", "Error", "getASTIndexSignatureParameterErrorMessage", "TypeLiteral", "propertySignatures", "indexSignatures", "keys", "i", "length", "Object", "prototype", "hasOwnProperty", "call", "getASTDuplicatePropertySignatureErrorMessage", "parameters", "string", "symbol", "encodedParameter", "getEncodedParameter", "isStringKeyword", "getASTDuplicateIndexSignatureErrorMessage", "isSymbolKeyword", "getOrElse", "getExpected", "formatTypeLiteral", "map", "ps", "formatIndexSignatures", "iss", "join", "pss", "isTypeLiteral", "createASTGuard", "sortCandidates", "Arr", "sort", "Order", "mapInput", "literalMap", "number", "boolean", "bigint", "flatten", "candidates", "flatMap", "isUnion", "types", "unify", "cs", "out", "uniques", "literals", "anyKeyword", "unknownKeyword", "push", "literal", "includes", "Union", "make", "isMembers", "neverKeyword", "isMembers", "as", "length", "isUnion", "createASTGuard", "toJSONMemoMap", "globalValue", "Symbol", "for", "WeakMap", "Suspend", "f", "annotations", "_tag", "constructor", "memoizeThunk", "toString", "getExpected", "pipe", "orElse", "flatMap", "liftThrowable", "ast", "getOrElse", "toJSON", "out", "get", "set", "toJSONAnnotations", "isSuspend", "Refinement", "from", "filter", "getIdentifierAnnotation", "match", "getOrElseExpected", "onNone", "onSome", "expected", "isRefinement", "String", "defaultParseOption", "isTransformation", "createASTGuard", "annotations", "ast", "overrides", "d", "Object", "getOwnPropertyDescriptors", "base", "IdentifierAnnotationId", "value", "surrogate", "getSurrogateAnnotation", "isSome", "SurrogateAnnotationId", "create", "getPrototypeOf", "STRING_KEYWORD_PATTERN", "NUMBER_KEYWORD_PATTERN", "getTemplateLiteralSpanTypePattern", "type", "capture", "_tag", "escape", "String", "literal", "getTemplateLiteralPattern", "types", "map", "join", "handleTemplateLiteralSpanTypeParens", "s", "top", "isUnion", "ast", "pattern", "head", "span", "spans", "spanPattern", "getTemplateLiteralRegExp", "RegExp", "pickAnnotations", "annotationIds", "annotated", "out", "undefined", "id", "Object", "prototype", "hasOwnProperty", "call", "annotations", "preserveTransformationAnnotations", "pickAnnotations", "ExamplesAnnotationId", "DefaultAnnotationId", "JSONSchemaAnnotationId", "ArbitraryAnnotationId", "PrettyAnnotationId", "EquivalenceAnnotationId", "typeAST", "ast", "_tag", "typeParameters", "changeMap", "Declaration", "decodeUnknown", "encodeUnknown", "annotations", "elements", "e", "type", "OptionalType", "isOptional", "restASTs", "getRestASTs", "rest", "TupleType", "map", "Type", "isReadonly", "propertySignatures", "p", "PropertySignature", "name", "indexSignatures", "is", "IndexSignature", "parameter", "TypeLiteral", "types", "Union", "make", "Suspend", "f", "from", "Refinement", "filter", "preserve", "undefined", "to", "as", "changed", "out", "allocate", "length", "i", "a", "fa", "getTransformationFrom", "encodedAST_", "isBound", "ps", "borrowedAnnotations", "identifier", "getJSONIdentifier", "isSome", "suffix", "JSONIdentifierAnnotationId", "value", "hasStableFilter", "encodedAST", "toJSONAnnotations", "annotations", "out", "k", "Object", "getOwnPropertySymbols", "String", "getEncodedParameter", "ast", "_tag", "from", "formatKeyword", "ast", "getOrElse", "getExpected", "_tag", "getBrands", "match", "getBrandAnnotation", "onNone", "onSome", "brands", "map", "brand", "formatUnknown", "join", "getOrElseExpected", "getTitleAnnotation", "pipe", "orElse", "getDescriptionAnnotation", "getAutoTitleAnnotation", "s", "getIdentifierAnnotation", "pruneUndefined", "self", "onTransformation", "neverKeyword", "types", "hasUndefined", "type", "pruned", "isNeverKeyword", "push", "Union", "make", "f", "TagTypeId", "Symbol", "for", "ReferenceTypeId", "STMSymbolKey", "STMTypeId", "TagProto", "EffectPrototype", "_op", "effectVariance", "_Service", "_", "_Identifier", "toString", "format", "toJSON", "_id", "key", "stack", "NodeInspectSymbol", "of", "self", "context", "make", "ReferenceProto", "makeGenericTag", "limit", "Error", "stackTraceLimit", "creationError", "tag", "Object", "create", "defineProperty", "get", "Reference", "id", "options", "limit", "Error", "stackTraceLimit", "creationError", "ReferenceClass", "Object", "setPrototypeOf", "ReferenceProto", "key", "defaultValue", "defineProperty", "get", "stack", "TypeId", "Symbol", "for", "ContextProto", "_Services", "_", "symbol", "that", "isContext", "unsafeMap", "size", "k", "keys", "has", "equals", "cached", "number", "pipe", "pipeArguments", "arguments", "toString", "format", "toJSON", "_id", "services", "Array", "from", "map", "NodeInspectSymbol", "makeContext", "context", "create", "serviceNotFoundError", "tag", "error", "String", "lines", "split", "length", "afterAt", "match", "message", "splice", "join", "u", "hasProperty", "isReference", "u", "hasProperty", "ReferenceTypeId", "_empty", "makeContext", "Map", "empty", "make", "tag", "service", "key", "add", "dual", "self", "map", "unsafeMap", "set", "defaultValueCache", "globalValue", "getDefaultValue", "has", "get", "value", "defaultValue", "unsafeGetReference", "unsafeGet", "serviceNotFoundError", "getOption", "dual", "self", "tag", "unsafeMap", "has", "key", "isReference", "some", "getDefaultValue", "none", "get", "merge", "that", "map", "Map", "s", "set", "makeContext", "GenericTag", "makeGenericTag", "empty", "make", "add", "get", "unsafeGet", "getOption", "merge", "Reference", "TypeId", "Symbol", "for", "copy", "src", "srcPos", "dest", "destPos", "len", "i", "Math", "min", "length", "emptyArray", "getEquivalence", "isEquivalent", "make", "self", "that", "toReadonlyArray", "every", "value", "unsafeGet", "_equivalence", "equals", "ChunkProto", "_A", "_", "toString", "format", "toJSON", "_id", "values", "map", "NodeInspectSymbol", "symbol", "isChunk", "cached", "array", "iterator", "backing", "_tag", "pipe", "pipeArguments", "arguments", "makeChunk", "chunk", "Object", "create", "depth", "left", "right", "max", "_empty", "u", "hasProperty", "empty", "as", "unsafeFromNonEmptyArray", "of", "a", "fromIterable", "unsafeFromArray", "copyToArray", "initial", "j", "toReadonlyArray_", "self", "backing", "_tag", "emptyArray", "array", "arr", "Array", "length", "copyToArray", "left", "_empty", "right", "depth", "toReadonlyArray", "reverseChunk", "makeChunk", "reverse", "unsafeFromArray", "unsafeFromArray", "self", "length", "empty", "of", "makeChunk", "_tag", "array", "unsafeFromNonEmptyArray", "unsafeGet", "dual", "index", "backing", "Error", "a", "left", "right", "chunk", "offset", "append", "appendAll", "prepend", "elem", "drop", "dual", "self", "n", "length", "_empty", "backing", "_tag", "makeChunk", "chunk", "offset", "left", "right", "appendAll", "dual", "self", "that", "backing", "_tag", "diff", "depth", "Math", "abs", "makeChunk", "left", "right", "nr", "nrr", "nl", "nll", "isEmpty", "self", "length", "isNonEmpty", "unsafeHead", "self", "unsafeGet", "headNonEmpty", "tailNonEmpty", "self", "drop", "TypeId", "Symbol", "for", "bigint0", "BigInt", "bigint24", "bigint60", "bigint1e3", "bigint1e6", "bigint1e9", "DURATION_REGEX", "decode", "input", "isDuration", "isNumber", "millis", "isBigInt", "nanos", "Array", "isArray", "length", "every", "Number", "isNaN", "zero", "Infinity", "infinity", "Math", "round", "isString", "match", "exec", "_", "valueStr", "unit", "value", "micros", "seconds", "minutes", "hours", "days", "weeks", "Error", "zeroValue", "_tag", "millis", "infinityValue", "DurationProto", "TypeId", "symbol", "cached", "structure", "value", "that", "isDuration", "equals", "toString", "format", "toJSON", "_id", "hrtime", "toHrTime", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "make", "input", "duration", "Object", "create", "isNumber", "isNaN", "Number", "isFinite", "isInteger", "nanos", "BigInt", "Math", "round", "bigint0", "u", "hasProperty", "isZero", "self", "value", "_tag", "millis", "nanos", "bigint0", "zero", "make", "infinity", "Infinity", "micros", "bigint1e3", "seconds", "minutes", "hours", "days", "weeks", "toMillis", "match", "onMillis", "onNanos", "Number", "unsafeToNanos", "self", "_self", "decode", "value", "_tag", "Error", "nanos", "BigInt", "Math", "round", "millis", "toHrTime", "Infinity", "Number", "bigint1e9", "floor", "match", "dual", "options", "onNanos", "onMillis", "matchWith", "that", "_that", "toMillis", "selfNanos", "thatNanos", "Equivalence", "self", "that", "matchWith", "onMillis", "onNanos", "lessThanOrEqualTo", "dual", "self", "that", "matchWith", "onMillis", "onNanos", "greaterThanOrEqualTo", "dual", "self", "that", "matchWith", "onMillis", "onNanos", "equals", "Equivalence", "decode", "parts", "duration", "value", "_tag", "days", "Infinity", "hours", "minutes", "seconds", "millis", "nanos", "unsafeToNanos", "ms", "bigint1e6", "sec", "bigint1e3", "min", "bigint60", "hr", "bigint24", "Number", "format", "isZero", "fragments", "pieces", "push", "join", "SIZE", "BUCKET_SIZE", "Math", "pow", "MASK", "MAX_INDEX_NODE", "MIN_ARRAY_NODE", "popcount", "x", "hashFragment", "shift", "h", "MASK", "toBitmap", "fromBitmap", "bitmap", "bit", "make", "value", "previous", "arrayUpdate", "mutate", "at", "v", "arr", "out", "len", "length", "Array", "i", "arraySpliceOut", "newLen", "g", "arraySpliceIn", "EmptyNode", "_tag", "modify", "edit", "_shift", "f", "hash", "key", "size", "v", "none", "isNone", "value", "LeafNode", "isEmptyNode", "a", "isTagged", "isLeafNode", "node", "canEditNode", "constructor", "shift", "equals", "mergeLeaves", "CollisionNode", "children", "canEdit", "list", "updateCollisionList", "length", "mutate", "len", "i", "child", "newValue", "arraySpliceOut", "arrayUpdate", "IndexedNode", "mask", "frag", "hashFragment", "bit", "toBitmap", "indx", "fromBitmap", "exists", "_newChild", "SIZE", "MAX_INDEX_NODE", "expand", "arraySpliceIn", "current", "bitmap", "newChildren", "ArrayNode", "count", "newChild", "MIN_ARRAY_NODE", "pack", "removed", "elements", "Array", "g", "elem", "subNodes", "arr", "mergeLeavesInner", "h1", "n1", "h2", "n2", "subH1", "subH2", "stack", "undefined", "currentShift", "res", "make", "final", "previous", "HashMapSymbolKey", "HashMapTypeId", "Symbol", "for", "HashMapProto", "iterator", "HashMapIterator", "k", "v", "symbol", "hash", "item", "pipe", "combine", "cached", "that", "isHashMap", "_size", "elem", "getHash", "isNone", "equals", "value", "toString", "format", "toJSON", "_id", "values", "Array", "from", "map", "NodeInspectSymbol", "pipeArguments", "arguments", "makeImpl", "editable", "edit", "root", "size", "Object", "create", "_editable", "_edit", "_root", "f", "constructor", "visitLazy", "undefined", "next", "done", "v0", "applyCont", "cont", "visitLazyChildren", "none", "node", "_tag", "isSome", "some", "key", "children", "length", "len", "i", "child", "isEmptyNode", "_empty", "EmptyNode", "empty", "fromIterable", "entries", "map", "beginMutation", "empty", "entry", "set", "endMutation", "isHashMap", "u", "hasProperty", "HashMapTypeId", "isEmpty", "self", "isEmptyNode", "_root", "get", "Dual", "dual", "key", "getHash", "hash", "node", "shift", "_tag", "equals", "value", "none", "children", "i", "len", "length", "child", "frag", "hashFragment", "bit", "toBitmap", "mask", "fromBitmap", "SIZE", "has", "Dual", "dual", "self", "key", "isSome", "getHash", "hash", "set", "Dual", "dual", "self", "key", "value", "modifyAt", "some", "setTree", "newRoot", "newSize", "_editable", "_root", "_size", "makeImpl", "_edit", "keys", "HashMapIterator", "size", "self", "_size", "beginMutation", "self", "makeImpl", "_edit", "_root", "_size", "endMutation", "_editable", "modifyAt", "Dual", "dual", "self", "key", "f", "modifyHash", "hash", "size", "value", "_size", "newRoot", "_root", "modify", "_editable", "_edit", "NaN", "pipe", "setTree", "remove", "Dual", "dual", "self", "key", "modifyAt", "none", "map", "Dual", "dual", "self", "f", "reduce", "empty", "value", "key", "set", "forEach", "Dual", "dual", "self", "f", "reduce", "_", "value", "key", "zero", "root", "_root", "_tag", "isSome", "toVisit", "children", "pop", "i", "len", "length", "child", "isEmptyNode", "push", "HashSetSymbolKey", "HashSetTypeId", "Symbol", "for", "HashSetProto", "iterator", "keys", "_keyMap", "symbol", "cached", "combine", "hash", "that", "isHashSet", "size", "equals", "toString", "format", "toJSON", "_id", "values", "Array", "from", "map", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "makeImpl", "keyMap", "set", "Object", "create", "u", "hasProperty", "_empty", "HM", "empty", "fromIterable", "elements", "beginMutation", "value", "add", "endMutation", "make", "has", "dual", "self", "size", "self", "_keyMap", "beginMutation", "makeImpl", "endMutation", "_editable", "mutate", "dual", "f", "transient", "add", "value", "set", "remove", "difference", "that", "union", "dual", "self", "that", "mutate", "empty", "set", "forEach", "value", "add", "forEach", "dual", "self", "f", "_keyMap", "_", "k", "reduce", "zero", "z", "a", "empty", "fromIterable", "make", "has", "size", "add", "remove", "difference", "union", "reduce", "TypeId", "Symbol", "for", "MutableRefProto", "toString", "format", "toJSON", "_id", "current", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "make", "value", "ref", "Object", "create", "get", "self", "current", "set", "Dual", "dual", "self", "value", "current", "FiberIdSymbolKey", "FiberIdTypeId", "Symbol", "for", "OP_NONE", "OP_RUNTIME", "OP_COMPOSITE", "emptyHash", "Hash", "string", "None", "_tag", "id", "startTimeMillis", "symbol", "that", "isFiberId", "toString", "format", "toJSON", "_id", "NodeInspectSymbol", "Runtime", "constructor", "cached", "Composite", "left", "right", "_hash", "pipe", "combine", "hash", "equals", "none", "isFiberId", "self", "hasProperty", "FiberIdTypeId", "ids", "self", "_tag", "OP_NONE", "empty", "OP_RUNTIME", "make", "id", "OP_COMPOSITE", "pipe", "left", "union", "right", "_fiberCounter", "globalValue", "Symbol", "for", "threadName", "self", "identifiers", "Array", "from", "ids", "map", "n", "join", "unsafeMake", "id", "get", "_fiberCounter", "pipe", "set", "Runtime", "Date", "now", "none", "threadName", "unsafeMake", "empty", "fromIterable", "isEmpty", "get", "set", "keys", "modifyAt", "map", "reduce", "TypeId", "Symbol", "for", "toArray", "self", "fromIterable", "getEquivalence", "isEquivalent", "mapInput", "_equivalence", "equals", "ConsProto", "_tag", "toString", "format", "toJSON", "_id", "values", "map", "NodeInspectSymbol", "symbol", "that", "isList", "cached", "array", "iterator", "done", "next", "return", "value", "head", "tail", "pipe", "pipeArguments", "arguments", "makeCons", "cons", "Object", "create", "NilHash", "Hash", "string", "NilProto", "undefined", "_Nil", "u", "hasProperty", "isNil", "isCons", "nil", "_Nil", "cons", "head", "tail", "makeCons", "empty", "of", "value", "appendAll", "dual", "self", "that", "prependAll", "prepend", "element", "cons", "prefix", "isNil", "result", "makeCons", "head", "curr", "tail", "temp", "reduce", "dual", "self", "zero", "f", "acc", "these", "isNil", "head", "tail", "reverse", "self", "result", "empty", "these", "isNil", "prepend", "head", "tail", "ArrayProto", "Object", "assign", "create", "Array", "prototype", "symbol", "cached", "array", "that", "isArray", "length", "every", "v", "i", "equals", "Structural", "args", "StructuralPrototype", "ContextPatchTypeId", "Symbol", "for", "variance", "a", "PatchProto", "Structural", "prototype", "_Value", "_Patch", "EmptyProto", "Object", "assign", "create", "_tag", "_empty", "empty", "AndThenProto", "makeAndThen", "first", "second", "o", "AddServiceProto", "makeAddService", "key", "service", "RemoveServiceProto", "makeRemoveService", "UpdateServiceProto", "makeUpdateService", "update", "diff", "oldValue", "newValue", "missingServices", "Map", "unsafeMap", "patch", "tag", "newService", "entries", "has", "old", "get", "delete", "equals", "combine", "Dual", "dual", "self", "that", "context", "wasServiceUpdated", "patches", "of", "updatedContext", "isNonEmpty", "head", "headNonEmpty", "tail", "tailNonEmpty", "set", "prepend", "makeContext", "map", "s", "HashSetPatchTypeId", "Symbol", "for", "variance", "a", "PatchProto", "Structural", "prototype", "_Value", "_Key", "_Patch", "EmptyProto", "Object", "assign", "create", "_tag", "_empty", "empty", "AndThenProto", "makeAndThen", "first", "second", "o", "AddProto", "makeAdd", "value", "RemoveProto", "makeRemove", "diff", "oldValue", "newValue", "removed", "patch", "reduce", "set", "has", "remove", "combine", "Dual", "dual", "self", "that", "patches", "of", "isNonEmpty", "head", "headNonEmpty", "tail", "tailNonEmpty", "prepend", "add", "ReadonlyArrayPatchTypeId", "Symbol", "for", "variance", "a", "PatchProto", "Structural", "prototype", "_Value", "_Patch", "EmptyProto", "Object", "assign", "create", "_tag", "_empty", "empty", "AndThenProto", "makeAndThen", "first", "second", "o", "AppendProto", "makeAppend", "values", "SliceProto", "makeSlice", "from", "until", "UpdateProto", "makeUpdate", "index", "patch", "diff", "options", "i", "oldValue", "length", "newValue", "oldElement", "newElement", "valuePatch", "differ", "equals", "combine", "drop", "Dual", "dual", "self", "that", "readonlyArray", "slice", "patches", "of", "isNonEmptyArray", "head", "headNonEmpty", "tail", "tailNonEmpty", "unshift", "value", "push", "DifferTypeId", "Symbol", "for", "DifferProto", "_P", "identity", "_V", "pipe", "pipeArguments", "arguments", "make", "params", "differ", "Object", "create", "empty", "diff", "combine", "patch", "environment", "first", "second", "oldValue", "newValue", "hashSet", "make", "empty", "combine", "first", "second", "diff", "oldValue", "newValue", "patch", "readonlyArray", "differ", "make", "empty", "combine", "first", "second", "diff", "oldValue", "newValue", "patch", "update", "updateWith", "_", "a", "f", "make", "empty", "identity", "combine", "first", "second", "diff", "oldValue", "newValue", "equals", "constant", "patch", "BIT_MASK", "BIT_SHIFT", "active", "patch", "enabled", "make", "empty", "enable", "flag", "disable", "exclude", "dual", "self", "flag", "make", "active", "enabled", "andThen", "dual", "self", "that", "invert", "n", "BIT_MASK", "None", "Interruption", "OpSupervision", "RuntimeMetrics", "WindDown", "CooperativeYielding", "cooperativeYielding", "self", "isEnabled", "CooperativeYielding", "enable", "dual", "self", "flag", "interruptible", "self", "interruption", "windDown", "isEnabled", "Interruption", "isEnabled", "dual", "self", "flag", "make", "flags", "reduce", "a", "b", "none", "None", "runtimeMetrics", "self", "isEnabled", "RuntimeMetrics", "windDown", "self", "isEnabled", "WindDown", "diff", "dual", "self", "that", "make", "patch", "invert", "active", "enabled", "differ", "internalDiffer", "make", "empty", "diff", "oldValue", "newValue", "combine", "first", "second", "andThen", "patch", "_patch", "enable", "disable", "exclude", "par", "self", "that", "_tag", "left", "right", "seq", "flatten", "self", "current", "of", "updated", "empty", "parallel", "sequential", "reduce", "parallelCollectionEmpty", "blockedRequest", "par", "seq", "step", "parallelCollectionCombine", "appendAll", "merge", "isNil", "reverse", "Error", "requests", "stack", "_tag", "head", "tail", "cons", "right", "left", "l", "r", "parallelCollectionAdd", "parallelCollectionToSequentialCollection", "parallelCollectionIsEmpty", "seqHeadKeys", "sequentialCollectionKeys", "parKeys", "parallelCollectionKeys", "length", "equals", "sequentialCollectionCombine", "EntryTypeId", "Symbol", "for", "EntryImpl", "request", "result", "listeners", "ownerId", "state", "blockedRequestVariance", "constructor", "_R", "_", "RequestBlockParallelTypeId", "Symbol", "for", "parallelVariance", "_R", "_", "ParallelImpl", "map", "constructor", "parallelCollectionEmpty", "empty", "parallelCollectionAdd", "self", "blockedRequest", "ParallelImpl", "modifyAt", "map", "dataSource", "_", "orElseSome", "append", "of", "parallelCollectionCombine", "that", "reduce", "value", "key", "set", "match", "get", "onNone", "onSome", "other", "appendAll", "parallelCollectionIsEmpty", "isEmpty", "parallelCollectionKeys", "Array", "from", "keys", "parallelCollectionToSequentialCollection", "sequentialCollectionMake", "x", "SequentialCollectionTypeId", "Symbol", "for", "sequentialVariance", "_R", "SequentialImpl", "constructor", "sequentialCollectionCombine", "empty", "a", "sequentialCollectionKeys", "self", "Array", "from", "keys", "map", "sequentialCollectionToChunk", "OP_DIE", "OP_EMPTY", "OP_FAIL", "OP_INTERRUPT", "OP_PARALLEL", "OP_SEQUENTIAL", "CauseSymbolKey", "CauseTypeId", "Symbol", "for", "variance", "_E", "_", "proto", "symbol", "pipe", "hash", "combine", "flattenCause", "cached", "that", "isCause", "causeEquals", "pipeArguments", "arguments", "toJSON", "_tag", "_id", "defect", "fiberId", "failure", "error", "left", "right", "toString", "pretty", "NodeInspectSymbol", "empty", "o", "Object", "create", "OP_EMPTY", "fail", "OP_FAIL", "die", "OP_DIE", "interrupt", "OP_INTERRUPT", "parallel", "OP_PARALLEL", "sequential", "OP_SEQUENTIAL", "u", "hasProperty", "isEmptyType", "self", "isFailType", "isEmpty", "self", "_tag", "OP_EMPTY", "reduce", "acc", "cause", "some", "OP_DIE", "OP_FAIL", "OP_INTERRUPT", "none", "isInterrupted", "self", "isSome", "interruptOption", "isInterruptedOnly", "reduceWithContext", "undefined", "IsInterruptedOnlyCauseReducer", "failures", "reverse", "reduce", "empty", "list", "cause", "_tag", "OP_FAIL", "some", "pipe", "prepend", "error", "none", "defects", "OP_DIE", "defect", "interruptors", "set", "OP_INTERRUPT", "add", "fiberId", "failureOption", "find", "failureOrCause", "option", "right", "left", "value", "interruptOption", "self", "find", "cause", "_tag", "OP_INTERRUPT", "some", "fiberId", "none", "stripFailures", "self", "match", "onEmpty", "empty", "onFail", "onDie", "die", "onInterrupt", "interrupt", "onSequential", "sequential", "onParallel", "parallel", "electFailures", "causeEquals", "left", "right", "leftStack", "of", "rightStack", "isNonEmpty", "leftParallel", "leftSequential", "pipe", "headNonEmpty", "reduce", "empty", "parallel", "sequential", "cause", "par", "seq", "evaluateCause", "some", "union", "appendAll", "rightParallel", "rightSequential", "equals", "flattenCause", "flattenCauseLoop", "causes", "flattened", "updated", "size", "prepend", "isEmpty", "reverse", "Error", "getBugErrorMessage", "find", "dual", "self", "pf", "stack", "length", "item", "pop", "option", "_tag", "OP_SEQUENTIAL", "OP_PARALLEL", "push", "none", "evaluateCause", "self", "cause", "stack", "_parallel", "empty", "_sequential", "undefined", "_tag", "OP_EMPTY", "length", "pop", "OP_FAIL", "add", "make", "error", "OP_DIE", "defect", "OP_INTERRUPT", "fiberId", "OP_SEQUENTIAL", "left", "right", "sequential", "OP_PARALLEL", "parallel", "prepend", "push", "Error", "getBugErrorMessage", "IsInterruptedOnlyCauseReducer", "emptyCase", "constTrue", "failCase", "constFalse", "dieCase", "interruptCase", "sequentialCase", "_", "left", "right", "parallelCase", "OP_SEQUENTIAL_CASE", "OP_PARALLEL_CASE", "match", "dual", "self", "onDie", "onEmpty", "onFail", "onInterrupt", "onParallel", "onSequential", "reduceWithContext", "emptyCase", "failCase", "_", "error", "dieCase", "defect", "interruptCase", "fiberId", "sequentialCase", "left", "right", "parallelCase", "reduce", "zero", "pf", "accumulator", "cause", "causes", "undefined", "option", "isSome", "value", "_tag", "OP_SEQUENTIAL", "push", "OP_PARALLEL", "length", "pop", "context", "reducer", "input", "output", "OP_EMPTY", "OP_FAIL", "OP_DIE", "OP_INTERRUPT", "either", "Error", "pretty", "options", "isInterruptedOnly", "prettyErrors", "map", "e", "renderErrorCause", "stack", "join", "prefix", "lines", "split", "i", "len", "PrettyError", "globalThis", "span", "constructor", "originalError", "originalErrorIsObject", "prevLimit", "stackTraceLimit", "prettyErrorMessage", "message", "name", "spanSymbol", "Object", "keys", "forEach", "key", "prettyErrorStack", "u", "hasProperty", "isFunction", "prototype", "toString", "Array", "stringifyCircular", "locationRegex", "spanToTrace", "globalValue", "WeakMap", "out", "startsWith", "slice", "includes", "replace", "current", "stackFn", "get", "locationMatchAll", "matchAll", "location", "getOrUndefined", "parent", "Symbol", "for", "unknownError", "l", "r", "OP_STATE_PENDING", "OP_STATE_DONE", "DeferredSymbolKey", "DeferredTypeId", "Symbol", "for", "deferredVariance", "_E", "_", "_A", "pending", "joiners", "_tag", "OP_STATE_PENDING", "done", "effect", "OP_STATE_DONE", "SingleShotGen", "self", "called", "constructor", "next", "a", "value", "done", "return", "throw", "e", "Symbol", "iterator", "blocked", "blockedRequests", "_continue", "effect", "EffectPrimitive", "effect_instruction_i0", "effect_instruction_i1", "runRequestBlock", "EffectTypeId", "Symbol", "for", "RevertFlags", "patch", "op", "_op", "OP_REVERT_FLAGS", "constructor", "undefined", "effect_instruction_i2", "trace", "effectVariance", "symbol", "that", "cached", "random", "pipe", "pipeArguments", "arguments", "toJSON", "_id", "toString", "format", "NodeInspectSymbol", "iterator", "SingleShotGen", "YieldWrap", "EffectPrimitiveFailure", "_tag", "exitIsExit", "equals", "string", "combine", "hash", "cause", "EffectPrimitiveSuccess", "value", "isEffect", "u", "hasProperty", "withFiberRuntime", "withRuntime", "OP_WITH_RUNTIME", "acquireUseRelease", "dual", "acquire", "use", "release", "uninterruptibleMask", "restore", "flatMap", "a", "exit", "suspend", "matchCauseEffect", "onFailure", "OP_FAILURE", "failCause", "sequential", "OP_SUCCESS", "onSuccess", "as", "self", "succeed", "asVoid", "custom", "wrapper", "OP_COMMIT", "length", "commit", "Error", "getBugErrorMessage", "unsafeAsync", "register", "blockingOn", "none", "OP_ASYNC", "cancelerRef", "resume", "onInterrupt", "_", "void_", "asyncInterrupt", "async_", "backingResume", "pendingEffect", "proxyResume", "controllerRef", "AbortController", "internalCall", "signal", "abort", "catchAll", "dual", "self", "f", "matchEffect", "onFailure", "onSuccess", "succeed", "originalSymbol", "Symbol", "for", "capture", "obj", "span", "isSome", "Proxy", "has", "target", "p", "spanSymbol", "originalSymbol", "get", "value", "die", "defect", "isObject", "withFiberRuntime", "fiber", "failCause", "currentSpanFromFiber", "dieMessage", "message", "failCauseSync", "RuntimeException", "either", "self", "matchEffect", "onFailure", "e", "succeed", "left", "onSuccess", "a", "right", "exit", "matchCause", "exitFailCause", "exitSucceed", "fail", "error", "isObject", "spanSymbol", "withFiberRuntime", "fiber", "failCause", "capture", "currentSpanFromFiber", "failSync", "evaluate", "flatMap", "sync", "cause", "effect", "EffectPrimitiveFailure", "OP_FAILURE", "effect_instruction_i0", "failCauseSync", "fiberId", "state", "id", "fiberIdWith", "f", "dual", "EffectPrimitive", "OP_ON_SUCCESS", "effect_instruction_i1", "step", "self", "effect", "EffectPrimitive", "effect_instruction_i0", "flatten", "flatMap", "identity", "matchCause", "dual", "self", "options", "matchCauseEffect", "onFailure", "cause", "succeed", "onSuccess", "a", "effect", "EffectPrimitive", "OP_ON_SUCCESS_AND_FAILURE", "effect_instruction_i0", "effect_instruction_i1", "effect_instruction_i2", "matchEffect", "defects", "length", "failCause", "electFailures", "failures", "unsafeHead", "forEachSequential", "f", "suspend", "arr", "fromIterable", "ret", "allocate", "i", "as", "whileLoop", "while", "body", "step", "b", "forEachSequentialDiscard", "interruptible", "self", "effect", "EffectPrimitive", "OP_UPDATE_RUNTIME_FLAGS", "effect_instruction_i0", "enable", "Interruption", "effect_instruction_i1", "map", "dual", "self", "f", "flatMap", "a", "sync", "mapBoth", "options", "matchEffect", "onFailure", "e", "failSync", "onSuccess", "mapError", "matchCauseEffect", "cause", "either", "failureOrCause", "_tag", "left", "failCause", "right", "succeed", "onExit", "dual", "self", "cleanup", "uninterruptibleMask", "restore", "matchCauseEffect", "onFailure", "cause1", "result", "exitFailCause", "cause2", "sequential", "onSuccess", "success", "exitSucceed", "zipRight", "onInterrupt", "exitMatch", "cause", "isInterruptedOnly", "asVoid", "interruptors", "void_", "succeed", "value", "effect", "EffectPrimitiveSuccess", "OP_SUCCESS", "effect_instruction_i0", "suspend", "evaluate", "EffectPrimitive", "OP_COMMIT", "commit", "sync", "thunk", "OP_SYNC", "tap", "dual", "args", "length", "isObject", "self", "f", "flatMap", "a", "b", "isEffect", "as", "isPromiseLike", "unsafeAsync", "resume", "then", "_", "e", "fail", "UnknownException", "transplant", "withFiberRuntime", "state", "scopeOverride", "getFiberRef", "currentForkScopeOverride", "scope", "pipe", "getOrElse", "fiberRefLocally", "some", "uninterruptible", "self", "effect", "EffectPrimitive", "OP_UPDATE_RUNTIME_FLAGS", "effect_instruction_i0", "disable", "Interruption", "effect_instruction_i1", "uninterruptibleMask", "f", "custom", "oldFlags", "interruption", "internalCall", "interruptible", "void_", "succeed", "updateRuntimeFlags", "patch", "effect", "EffectPrimitive", "OP_UPDATE_RUNTIME_FLAGS", "effect_instruction_i0", "effect_instruction_i1", "whileLoop", "options", "effect", "EffectPrimitive", "OP_WHILE", "effect_instruction_i0", "while", "effect_instruction_i1", "body", "effect_instruction_i2", "step", "yieldNow", "options", "effect", "EffectPrimitive", "OP_YIELD", "priority", "withSchedulingPriority", "zip", "dual", "self", "that", "flatMap", "a", "map", "b", "zipLeft", "dual", "self", "that", "flatMap", "a", "as", "zipRight", "never", "asyncInterrupt", "interval", "setInterval", "sync", "clearInterval", "interruptFiber", "self", "flatMap", "fiberId", "pipe", "interruptAsFiber", "dual", "interruptAsFork", "await", "logLevelAll", "_tag", "syslog", "label", "ordinal", "Number", "MIN_SAFE_INTEGER", "pipeArguments", "arguments", "logLevelFatal", "logLevelError", "logLevelWarning", "logLevelInfo", "logLevelDebug", "logLevelTrace", "logLevelNone", "MAX_SAFE_INTEGER", "FiberRefSymbolKey", "FiberRefTypeId", "Symbol", "for", "fiberRefVariance", "_A", "_", "fiberRefGet", "self", "withFiberRuntime", "fiber", "exitSucceed", "getFiberRef", "fiberRefGetWith", "dual", "self", "f", "flatMap", "fiberRefGet", "fiberRefSet", "value", "fiberRefModify", "fiberRefModify", "dual", "self", "f", "withFiberRuntime", "state", "b", "a", "getFiberRef", "setFiberRef", "succeed", "RequestResolverSymbolKey", "RequestResolverTypeId", "Symbol", "for", "requestResolverVariance", "_A", "_", "_R", "RequestResolverImpl", "runAll", "target", "constructor", "symbol", "cached", "hash", "random", "that", "isRequestResolver", "equals", "identified", "ids", "fromIterable", "pipe", "pipeArguments", "arguments", "u", "hasProperty", "fiberRefLocally", "dual", "use", "self", "value", "acquireUseRelease", "zipLeft", "fiberRefGet", "fiberRefSet", "oldValue", "fiberRefUnsafeMake", "initial", "options", "fiberRefUnsafeMakePatch", "differ", "update", "fork", "identity", "join", "fiberRefUnsafeMakeHashSet", "hashSet", "empty", "fiberRefUnsafeMakeReadonlyArray", "readonlyArray", "fiberRefUnsafeMakeContext", "environment", "_fiberRef", "CommitPrototype", "FiberRefTypeId", "fiberRefVariance", "commit", "fiberRefGet", "diff", "oldValue", "newValue", "combine", "first", "second", "patch", "_", "n", "fiberRefUnsafeMakeRuntimeFlags", "currentContext", "globalValue", "Symbol", "for", "currentSchedulingPriority", "currentMaxOpsBeforeYield", "currentLogAnnotations", "currentLogLevel", "logLevelInfo", "currentLogSpan", "withSchedulingPriority", "dual", "self", "scheduler", "fiberRefLocally", "currentConcurrency", "globalValue", "Symbol", "for", "fiberRefUnsafeMake", "currentRequestBatching", "currentUnhandledErrorLogLevel", "some", "logLevelDebug", "currentVersionMismatchErrorLogLevel", "logLevelWarning", "currentMetricLabels", "globalValue", "Symbol", "for", "fiberRefUnsafeMakeReadonlyArray", "empty", "currentForkScopeOverride", "globalValue", "Symbol", "for", "fiberRefUnsafeMake", "none", "fork", "join", "parent", "_", "currentInterruptedCause", "empty", "ScopeTypeId", "Symbol", "for", "CloseableScopeTypeId", "scopeAddFinalizer", "self", "finalizer", "addFinalizer", "asVoid", "scopeClose", "self", "exit", "close", "scopeFork", "strategy", "fork", "YieldableError", "globalThis", "Error", "commit", "fail", "toJSON", "obj", "message", "cause", "NodeInspectSymbol", "toString", "prototype", "stack", "split", "slice", "join", "pretty", "renderErrorCause", "Object", "assign", "StructuralCommitPrototype", "makeException", "proto", "tag", "Base", "_tag", "name", "RuntimeExceptionTypeId", "Symbol", "for", "RuntimeException", "InterruptedExceptionTypeId", "Symbol", "for", "InterruptedException", "makeException", "isInterruptedException", "u", "hasProperty", "IllegalArgumentExceptionTypeId", "IllegalArgumentException", "NoSuchElementExceptionTypeId", "Symbol", "for", "NoSuchElementException", "makeException", "InvalidPubSubCapacityExceptionTypeId", "Symbol", "for", "InvalidPubSubCapacityException", "makeException", "ExceededCapacityExceptionTypeId", "ExceededCapacityException", "TimeoutExceptionTypeId", "Symbol", "for", "TimeoutException", "makeException", "UnknownExceptionTypeId", "Symbol", "for", "UnknownException", "YieldableError", "_tag", "error", "constructor", "cause", "message", "Object", "assign", "prototype", "name", "exitIsExit", "u", "isEffect", "_tag", "exitIsSuccess", "self", "_tag", "exitAs", "dual", "self", "value", "_tag", "OP_FAILURE", "exitFailCause", "effect_instruction_i0", "OP_SUCCESS", "exitSucceed", "exitAsVoid", "exitCollectAll", "exits", "options", "exitCollectAllInternal", "parallel", "sequential", "exitDie", "defect", "exitFailCause", "die", "exitFail", "error", "exitFailCause", "fail", "cause", "effect", "EffectPrimitiveFailure", "OP_FAILURE", "effect_instruction_i0", "exitInterrupt", "fiberId", "exitFailCause", "interrupt", "exitMap", "dual", "self", "f", "_tag", "OP_FAILURE", "effect_instruction_i0", "OP_SUCCESS", "exitSucceed", "exitMatch", "dual", "self", "onFailure", "onSuccess", "_tag", "OP_FAILURE", "effect_instruction_i0", "OP_SUCCESS", "exitSucceed", "value", "effect", "EffectPrimitiveSuccess", "OP_SUCCESS", "effect_instruction_i0", "exitVoid", "exitZipWith", "dual", "self", "that", "onFailure", "onSuccess", "_tag", "OP_FAILURE", "OP_SUCCESS", "exitFailCause", "effect_instruction_i0", "exitSucceed", "exitCollectAllInternal", "exits", "combineCauses", "list", "fromIterable", "isNonEmpty", "none", "pipe", "tailNonEmpty", "reduce", "headNonEmpty", "exitMap", "of", "accumulator", "current", "value", "prepend", "reverse", "chunk", "toReadonlyArray", "some", "deferredUnsafeMake", "fiberId", "_deferred", "CommitPrototype", "DeferredTypeId", "deferredVariance", "state", "make", "pending", "commit", "deferredAwait", "blockingOn", "deferredAwait", "self", "asyncInterrupt", "resume", "state", "get", "_tag", "OP_STATE_DONE", "effect", "OP_STATE_PENDING", "joiners", "push", "deferredInterruptJoiner", "blockingOn", "deferredUnsafeDone", "self", "effect", "state", "get", "_tag", "OP_STATE_PENDING", "MutableRef", "set", "done", "i", "len", "joiners", "length", "deferredInterruptJoiner", "joiner", "sync", "index", "indexOf", "splice", "constContext", "withFiberRuntime", "fiber", "exitSucceed", "currentContext", "context", "contextWithEffect", "f", "flatMap", "context", "provideContext", "dual", "self", "fiberRefLocally", "currentContext", "mapInputContext", "dual", "self", "f", "contextWithEffect", "context", "provideContext", "currentSpanFromFiber", "fiber", "span", "currentSpan", "undefined", "_tag", "some", "none", "isSuccess", "exitIsSuccess", "TypeId", "Symbol", "for", "MutableHashMapProto", "iterator", "MutableHashMapIterator", "toString", "format", "toJSON", "_id", "values", "Array", "from", "map", "NodeInspectSymbol", "pipe", "pipeArguments", "arguments", "self", "referentialIterator", "bucketIterator", "constructor", "referential", "next", "undefined", "result", "done", "BucketIterator", "buckets", "backing", "currentBucket", "value", "empty", "Object", "create", "Map", "bucketsSize", "get", "dual", "self", "key", "isEqual", "referential", "has", "some", "none", "hash", "symbol", "bucket", "buckets", "undefined", "getFromBucket", "getFromBucket", "self", "bucket", "key", "remove", "i", "len", "length", "symbol", "value", "splice", "bucketsSize", "some", "none", "has", "dual", "isSome", "get", "set", "isEqual", "referential", "hash", "buckets", "undefined", "removeFromBucket", "push", "ClockSymbolKey", "ClockTypeId", "Symbol", "for", "clockTag", "Context", "GenericTag", "MAX_TIMER_MILLIS", "globalClockScheduler", "unsafeSchedule", "task", "duration", "millis", "toMillis", "constFalse", "completed", "handle", "setTimeout", "clearTimeout", "performanceNowNanos", "bigint1e6", "BigInt", "performance", "Date", "now", "origin", "undefined", "Math", "round", "processOrPerformanceNow", "processHrtime", "process", "hrtime", "bigint", "ClockImpl", "unsafeCurrentTimeMillis", "unsafeCurrentTimeNanos", "currentTimeMillis", "core", "sync", "currentTimeNanos", "scheduler", "succeed", "sleep", "async", "resume", "canceler", "void", "asVoid", "make", "OP_AND", "OP_OR", "OP_INVALID_DATA", "OP_MISSING_DATA", "OP_SOURCE_UNAVAILABLE", "OP_UNSUPPORTED", "ConfigErrorSymbolKey", "ConfigErrorTypeId", "Symbol", "for", "proto", "_tag", "And", "self", "that", "error", "Object", "create", "_op", "OP_AND", "left", "right", "defineProperty", "enumerable", "value", "get", "toString", "Or", "OP_OR", "InvalidData", "path", "message", "options", "pathDelim", "OP_INVALID_DATA", "pipe", "join", "MissingData", "OP_MISSING_DATA", "SourceUnavailable", "cause", "OP_SOURCE_UNAVAILABLE", "Unsupported", "OP_UNSUPPORTED", "prefixed", "dual", "self", "prefix", "_op", "OP_AND", "And", "left", "right", "OP_OR", "Or", "OP_INVALID_DATA", "InvalidData", "path", "message", "OP_MISSING_DATA", "MissingData", "OP_SOURCE_UNAVAILABLE", "SourceUnavailable", "cause", "OP_UNSUPPORTED", "Unsupported", "empty", "_tag", "patch", "dual", "path", "input", "of", "output", "isCons", "head", "_tag", "tail", "cons", "first", "second", "map", "f", "prepend", "name", "containsName", "pipe", "contains", "tailNonEmpty", "left", "MissingData", "right", "OP_CONSTANT", "OP_FAIL", "OP_FALLBACK", "OP_DESCRIBED", "OP_LAZY", "OP_MAP_OR_FAIL", "OP_NESTED", "OP_PRIMITIVE", "OP_SEQUENCE", "OP_HASHMAP", "OP_ZIP_WITH", "concat", "l", "r", "ConfigProviderSymbolKey", "ConfigProviderTypeId", "Symbol", "for", "configProviderTag", "Context", "GenericTag", "FlatConfigProviderSymbolKey", "FlatConfigProviderTypeId", "make", "options", "pipe", "pipeArguments", "arguments", "makeFlat", "patch", "load", "path", "config", "split", "enumerateChildren", "fromFlat", "flat", "flatMap", "fromFlatLoop", "empty", "chunk", "match", "head", "onNone", "fail", "MissingData", "onSome", "succeed", "flattened", "fromEnv", "pathDelim", "seqDelim", "Object", "assign", "makePathString", "join", "unmakePathString", "pathString", "getEnv", "process", "env", "primitive", "current", "valueOpt", "some", "none", "mapError", "value", "parsePrimitive", "sync", "keys", "keyPaths", "map", "toUpperCase", "filteredKeyPaths", "filter", "keyPath", "i", "length", "pathComponent", "unsafeGet", "currentElement", "undefined", "slice", "fromIterable", "extend", "leftDef", "rightDef", "left", "right", "leftPad", "unfold", "length", "index", "none", "some", "rightPad", "leftExtension", "concat", "rightExtension", "appendConfigPath", "path", "config", "op", "_tag", "out", "slice", "push", "name", "fromFlatLoop", "flat", "prefix", "split", "OP_CONSTANT", "succeed", "of", "value", "OP_DESCRIBED", "suspend", "OP_FAIL", "fail", "MissingData", "message", "OP_FALLBACK", "pipe", "first", "catchAll", "error1", "condition", "second", "error2", "Or", "OP_LAZY", "OP_MAP_OR_FAIL", "original", "flatMap", "forEachSequential", "a", "mapOrFail", "mapError", "prefixed", "OP_NESTED", "OP_PRIMITIVE", "patch", "load", "values", "last", "getOrElse", "description", "OP_SEQUENCE", "patchedPrefix", "enumerateChildren", "indicesFrom", "indices", "map", "append", "chunkChunk", "flattened", "flatten", "empty", "OP_HASHMAP", "keys", "key", "valueConfig", "matrix", "transpose", "fromIterable", "zip", "OP_ZIP_WITH", "either", "isLeft", "And", "isRight", "join", "fromFlatLoopFail", "lefts", "rights", "Error", "splitPathString", "text", "delim", "split", "RegExp", "escape", "parsePrimitive", "path", "primitive", "delimiter", "pipe", "parse", "mapBoth", "onFailure", "prefixed", "onSuccess", "of", "forEachSequential", "char", "trim", "mapError", "transpose", "array", "Object", "keys", "map", "column", "row", "indicesFrom", "quotedIndices", "parseQuotedIndex", "empty", "sort", "Order", "either", "merge", "QUOTED_INDEX_REGEX", "parseQuotedIndex", "str", "match", "matchedIndex", "pipe", "undefined", "length", "some", "none", "flatMap", "parseInteger", "parseInteger", "str", "parsedIndex", "Number", "parseInt", "isNaN", "none", "some", "TypeId", "Symbol", "for", "consoleTag", "Context", "GenericTag", "defaultConsole", "assert", "condition", "args", "sync", "console", "clear", "core", "count", "label", "countReset", "debug", "dir", "item", "options", "dirxml", "error", "group", "collapsed", "groupCollapsed", "groupEnd", "info", "log", "table", "tabularData", "properties", "time", "timeEnd", "timeLog", "trace", "warn", "unsafe", "RandomSymbolKey", "RandomTypeId", "Symbol", "for", "randomTag", "Context", "GenericTag", "RandomImpl", "seed", "PRNG", "constructor", "PCGRandom", "next", "sync", "number", "nextBoolean", "map", "n", "nextInt", "integer", "Number", "MAX_SAFE_INTEGER", "nextRange", "min", "max", "nextIntBetween", "shuffle", "elements", "shuffleWith", "nextIntBounded", "suspend", "pipe", "Array", "from", "flatMap", "buffer", "numbers", "i", "length", "push", "forEachSequentialDiscard", "k", "swap", "as", "fromIterable", "index1", "index2", "tmp", "make", "hash", "FixedRandomImpl", "values", "index", "Error", "getNextValue", "value", "Math", "isFinite", "round", "abs", "TracerTypeId", "Symbol", "for", "make", "options", "tracerTag", "Context", "GenericTag", "spanTag", "randomHexString", "characters", "charactersLength", "length", "result", "i", "charAt", "Math", "floor", "random", "NativeSpan", "name", "parent", "context", "startTime", "kind", "_tag", "spanId", "traceId", "sampled", "status", "attributes", "events", "links", "constructor", "Map", "value", "Array", "from", "end", "endTime", "exit", "attribute", "key", "set", "event", "push", "addLinks", "nativeTracer", "span", "f", "liveServices", "pipe", "Context", "empty", "add", "clockTag", "clock", "make", "consoleTag", "defaultConsole", "randomTag", "random", "Math", "configProviderTag", "configProvider", "fromEnv", "tracerTag", "nativeTracer", "currentServices", "globalValue", "Symbol", "for", "fiberRefUnsafeMakeContext", "unsafeMake", "fiberRefLocals", "FiberRefsImpl", "empty", "Map", "FiberRefsSym", "Symbol", "for", "locals", "constructor", "pipe", "pipeArguments", "arguments", "findAncestor", "_ref", "_parentStack", "_childStack", "_childModified", "ref", "parentStack", "childStack", "childModified", "ret", "undefined", "isNonEmptyReadonlyArray", "parentFiberId", "headNonEmpty", "parentAncestors", "tailNonEmpty", "childFiberId", "childRefValue", "childAncestors", "startTimeMillis", "id", "initial", "joinAs", "dual", "self", "fiberId", "that", "parentFiberRefs", "forEach", "fiberRef", "childValue", "symbol", "has", "equals", "set", "join", "get", "ancestor", "wasModified", "patch", "diff", "oldValue", "newValue", "newStack", "slice", "forkAs", "childId", "map", "unsafeForkAs", "stack", "fork", "delete_", "dual", "self", "fiberRef", "locals", "Map", "delete", "FiberRefsImpl", "get", "has", "none", "some", "headNonEmpty", "getOrDefault", "pipe", "getOrElse", "initial", "updateAs", "fiberId", "value", "size", "unsafeUpdateAs", "oldStack", "newStack", "isNonEmptyReadonlyArray", "currentId", "currentValue", "symbol", "equals", "slice", "set", "updateManyAs", "entries", "forkAs", "undefined", "unsafeForkAs", "forEach", "values", "length", "getOrDefault", "updateManyAs", "empty", "All", "logLevelAll", "Fatal", "logLevelFatal", "Error", "logLevelError", "Warning", "logLevelWarning", "Info", "logLevelInfo", "Debug", "logLevelDebug", "Trace", "logLevelTrace", "None", "logLevelNone", "Order", "pipe", "order", "mapInput", "level", "ordinal", "greaterThan", "order", "Order", "fromLiteral", "literal", "All", "Debug", "Error", "Fatal", "Info", "Trace", "None", "Warning", "formatLabel", "key", "replace", "render", "now", "self", "label", "startTime", "EffectPrototype", "Base", "Class", "Base", "OP_EMPTY", "OP_ADD", "OP_REMOVE", "OP_UPDATE", "OP_AND_THEN", "empty", "_tag", "diff", "oldValue", "newValue", "missingLocals", "Map", "locals", "patch", "fiberRef", "pairs", "entries", "headNonEmpty", "old", "get", "undefined", "equals", "combine", "value", "delete", "dual", "self", "that", "first", "second", "fiberId", "fiberRefs", "patches", "of", "isNonEmptyReadonlyArray", "head", "tail", "tailNonEmpty", "updateAs", "delete_", "getOrDefault", "prepend", "MetricLabelSymbolKey", "MetricLabelTypeId", "Symbol", "for", "MetricLabelImpl", "key", "value", "_hash", "constructor", "string", "symbol", "that", "isMetricLabel", "pipe", "pipeArguments", "arguments", "make", "u", "hasProperty", "OP_SEQUENTIAL", "OP_PARALLEL", "OP_PARALLEL_N", "sequential", "_tag", "parallel", "parallelN", "parallelism", "isSequential", "self", "isParallel", "sequential", "parallel", "parallelN", "diff", "patch", "FiberStatusSymbolKey", "FiberStatusTypeId", "Symbol", "for", "OP_DONE", "OP_RUNNING", "OP_SUSPENDED", "DoneHash", "Hash", "string", "Done", "_tag", "symbol", "that", "isFiberStatus", "Running", "runtimeFlags", "constructor", "pipe", "hash", "combine", "cached", "Suspended", "blockingOn", "equals", "done", "running", "suspended", "u", "hasProperty", "isDone", "self", "done", "running", "suspended", "isDone", "TypeId", "Symbol", "for", "MicroExitTypeId", "MicroCauseTypeId", "Symbol", "for", "microCauseVariance", "_E", "identity", "MicroCauseImpl", "globalThis", "Error", "_tag", "traces", "MicroCauseTypeId", "constructor", "originalError", "causeName", "name", "message", "stack", "messageLines", "split", "length", "slice", "join", "toStringUnknown", "pipe", "pipeArguments", "arguments", "toString", "NodeInspectSymbol", "Die", "MicroCauseImpl", "defect", "constructor", "traces", "causeDie", "Interrupt", "causeInterrupt", "causeIsInterrupt", "self", "_tag", "MicroFiberTypeId", "Symbol", "for", "fiberVariance", "_A", "identity", "_E", "MicroFiberImpl", "context", "interruptible", "_stack", "_observers", "_exit", "_children", "currentOpCount", "constructor", "getRef", "ref", "unsafeGetReference", "addObserver", "cb", "constVoid", "push", "index", "indexOf", "splice", "_interrupted", "unsafeInterrupt", "evaluate", "exitInterrupt", "unsafePoll", "effect", "_yielded", "undefined", "yielded", "exit", "runLoop", "Yield", "interruptChildren", "fiberMiddleware", "flatMap", "i", "length", "yielding", "current", "CurrentScheduler", "shouldYield", "prev", "yieldNow", "MicroExitTypeId", "error", "hasProperty", "exitDie", "String", "getCont", "symbol", "op", "pop", "cont", "ensureCont", "yieldWith", "value", "children", "Set", "globalValue", "fiberInterruptAll", "fibers", "suspend", "fiber", "unsafeInterrupt", "iter", "Symbol", "iterator", "wait", "result", "next", "done", "value", "unsafePoll", "async", "resume", "addObserver", "_", "exitVoid", "identifier", "for", "args", "evaluate", "successCont", "failureCont", "ensureCont", "Yield", "microVariance", "_A", "identity", "_E", "_R", "MicroProto", "EffectPrototype", "_op", "TypeId", "pipe", "pipeArguments", "arguments", "SingleShotGen", "YieldWrap", "toJSON", "_id", "op", "undefined", "toString", "format", "NodeInspectSymbol", "defaultEvaluate", "_fiber", "exitDie", "makePrimitiveProto", "options", "eval", "contA", "contE", "ensure", "makePrimitive", "Proto", "self", "Object", "create", "single", "makeExit", "MicroExitTypeId", "_tag", "prop", "symbol", "that", "isMicroExit", "equals", "cached", "combine", "string", "hash", "succeed", "cont", "getCont", "yieldWith", "failCause", "causeIsInterrupt", "interruptible", "sync", "makePrimitive", "op", "eval", "fiber", "value", "args", "cont", "getCont", "successCont", "yieldWith", "exitSucceed", "suspend", "_fiber", "yieldNowWith", "resumed", "getRef", "CurrentScheduler", "scheduleTask", "evaluate", "exitVoid", "yieldNow", "void_", "succeed", "withMicroFiber", "makePrimitive", "op", "eval", "fiber", "args", "asyncOptions", "makePrimitive", "op", "single", "eval", "fiber", "register", "args", "resumed", "yielded", "controller", "AbortController", "undefined", "onCancel", "effect", "evaluate", "signal", "_yielded", "Yield", "_stack", "push", "asyncFinalizer", "abort", "exitVoid", "ensure", "interruptible", "setInterruptible", "contE", "cause", "_fiber", "causeIsInterrupt", "flatMap", "failCause", "async", "length", "as", "dual", "self", "value", "map", "_", "exit", "self", "matchCause", "onFailure", "exitFailCause", "onSuccess", "exitSucceed", "flatMap", "dual", "self", "f", "onSuccess", "Object", "create", "OnSuccessProto", "args", "successCont", "makePrimitiveProto", "op", "eval", "fiber", "_stack", "push", "map", "dual", "self", "f", "flatMap", "a", "succeed", "isMicroExit", "u", "hasProperty", "MicroExitTypeId", "exitSucceed", "exitFailCause", "failCause", "exitInterrupt", "causeInterrupt", "exitDie", "defect", "exitFailCause", "causeDie", "exitVoid", "exitSucceed", "exitVoidAll", "exits", "exit", "_tag", "setImmediate", "globalThis", "f", "setTimeout", "MicroSchedulerDefault", "tasks", "running", "scheduleTask", "task", "_priority", "push", "afterScheduled", "runTasks", "i", "len", "length", "shouldYield", "fiber", "currentOpCount", "getRef", "MaxOpsBeforeYield", "flush", "updateContext", "dual", "self", "f", "withMicroFiber", "fiber", "prev", "context", "onExit", "void_", "provideContext", "dual", "self", "provided", "updateContext", "merge", "MaxOpsBeforeYield", "Context", "Reference", "defaultValue", "CurrentConcurrency", "CurrentScheduler", "MicroSchedulerDefault", "matchCauseEffect", "dual", "self", "options", "primitive", "Object", "create", "OnSuccessAndFailureProto", "args", "successCont", "onSuccess", "failureCont", "onFailure", "makePrimitiveProto", "op", "eval", "fiber", "_stack", "push", "matchCause", "cause", "sync", "value", "MicroScopeTypeId", "Symbol", "for", "MicroScopeImpl", "MicroScopeTypeId", "state", "_tag", "finalizers", "Set", "constructor", "unsafeAddFinalizer", "finalizer", "add", "addFinalizer", "suspend", "void_", "exit", "unsafeRemoveFinalizer", "delete", "close", "microExit", "Array", "from", "reverse", "flatMap", "forEach", "exitVoidAll", "fork", "sync", "newScope", "fin", "_", "onExit", "dual", "self", "f", "uninterruptibleMask", "restore", "matchCauseEffect", "onFailure", "cause", "flatMap", "exitFailCause", "failCause", "onSuccess", "a", "exitSucceed", "succeed", "setInterruptible", "makePrimitive", "op", "ensure", "fiber", "interruptible", "args", "_interrupted", "exitInterrupt", "self", "withMicroFiber", "_stack", "push", "uninterruptibleMask", "f", "identity", "whileLoop", "makePrimitive", "op", "contA", "value", "fiber", "args", "step", "while", "_stack", "push", "body", "exitVoid", "eval", "forEach", "iterable", "f", "options", "withMicroFiber", "parent", "concurrencyOption", "concurrency", "getRef", "CurrentConcurrency", "Number", "POSITIVE_INFINITY", "Math", "max", "items", "fromIterable", "length", "discard", "void_", "succeed", "out", "undefined", "Array", "index", "as", "b", "_", "async", "resume", "fibers", "Set", "result", "inProgress", "doneCount", "pumping", "interrupted", "pump", "currentIndex", "item", "child", "unsafeFork", "add", "addObserver", "exit", "delete", "_tag", "unsafeInterrupt", "err", "exitDie", "suspend", "fiberInterruptAll", "unsafeFork", "parent", "effect", "immediate", "daemon", "child", "MicroFiberImpl", "context", "interruptible", "children", "add", "addObserver", "delete", "evaluate", "getRef", "CurrentScheduler", "scheduleTask", "runFork", "effect", "options", "fiber", "MicroFiberImpl", "CurrentScheduler", "context", "scheduler", "MicroSchedulerDefault", "evaluate", "signal", "aborted", "unsafeInterrupt", "abort", "addEventListener", "once", "addObserver", "removeEventListener", "PriorityBuckets", "buckets", "scheduleTask", "task", "priority", "length", "bucket", "undefined", "index", "push", "splice", "MixedScheduler", "maxNextTickBeforeTimer", "running", "tasks", "constructor", "starveInternal", "depth", "_", "toRun", "i", "starve", "setTimeout", "Promise", "resolve", "then", "shouldYield", "fiber", "currentOpCount", "getFiberRef", "currentMaxOpsBeforeYield", "currentSchedulingPriority", "defaultScheduler", "globalValue", "Symbol", "for", "SyncScheduler", "deferred", "flush", "currentScheduler", "globalValue", "Symbol", "for", "fiberRefUnsafeMake", "defaultScheduler", "currentRequestMap", "globalValue", "Symbol", "for", "fiberRefUnsafeMake", "Map", "match", "concurrency", "sequential", "unbounded", "bounded", "undefined", "fiberRefGetWith", "currentConcurrency", "OP_INTERRUPT_SIGNAL", "OP_STATEFUL", "OP_RESUME", "OP_YIELD_NOW", "interruptSignal", "cause", "_tag", "stateful", "onFiber", "resume", "effect", "yieldNow", "FiberScopeSymbolKey", "FiberScopeTypeId", "Symbol", "for", "Global", "fiberId", "none", "roots", "Set", "add", "_runtimeFlags", "child", "addObserver", "delete", "Local", "parent", "constructor", "tell", "stateful", "parentFiber", "addChild", "removeChild", "unsafeMake", "fiber", "id", "globalScope", "globalValue", "FiberSymbolKey", "FiberTypeId", "Symbol", "for", "fiberVariance", "_E", "_", "_A", "fiberProto", "pipe", "pipeArguments", "arguments", "RuntimeFiberSymbolKey", "RuntimeFiberTypeId", "join", "self", "zipLeft", "flatten", "await", "inheritAll", "_never", "CommitPrototype", "commit", "join", "fiberProto", "id", "none", "await", "never", "children", "core", "succeed", "inheritAll", "poll", "Option", "interruptAsFork", "currentFiberURI", "LoggerSymbolKey", "LoggerTypeId", "Symbol", "for", "loggerVariance", "_Message", "_", "_Output", "makeLogger", "log", "pipe", "pipeArguments", "arguments", "none", "LoggerTypeId", "loggerVariance", "log", "constVoid", "pipe", "pipeArguments", "arguments", "textOnly", "format", "quoteValue", "whitespace", "annotations", "cause", "date", "fiberId", "logLevel", "message", "spans", "formatValue", "value", "match", "label", "formatLabel", "append", "out", "toISOString", "threadName", "messages", "ensure", "i", "length", "toStringUnknown", "isEmptyType", "pretty", "renderErrorCause", "span", "render", "getTime", "escapeDoubleQuotes", "s", "replace", "stringLogger", "makeLogger", "colors", "bold", "red", "green", "yellow", "blue", "cyan", "white", "gray", "black", "bgBrightRed", "logLevelColors", "None", "All", "Trace", "Debug", "Info", "Warning", "Error", "Fatal", "hasProcessStdout", "process", "stdout", "processStdoutIsTTY", "isTTY", "hasProcessStdoutOrDeno", "globalThis", "MetricBoundariesSymbolKey", "MetricBoundariesTypeId", "Symbol", "for", "MetricBoundariesImpl", "values", "constructor", "_hash", "pipe", "string", "combine", "array", "symbol", "u", "isMetricBoundaries", "equals", "pipeArguments", "arguments", "hasProperty", "fromIterable", "iterable", "appendAll", "of", "Number", "POSITIVE_INFINITY", "dedupe", "exponential", "options", "pipe", "makeBy", "count", "i", "start", "Math", "pow", "factor", "unsafeFromArray", "fromIterable", "MetricKeyTypeSymbolKey", "MetricKeyTypeTypeId", "Symbol", "for", "CounterKeyTypeSymbolKey", "CounterKeyTypeTypeId", "FrequencyKeyTypeSymbolKey", "FrequencyKeyTypeTypeId", "GaugeKeyTypeSymbolKey", "GaugeKeyTypeTypeId", "HistogramKeyTypeSymbolKey", "HistogramKeyTypeTypeId", "SummaryKeyTypeSymbolKey", "SummaryKeyTypeTypeId", "metricKeyTypeVariance", "_In", "_", "_Out", "CounterKeyType", "incremental", "bigint", "constructor", "_hash", "string", "symbol", "that", "isCounterKey", "pipe", "pipeArguments", "arguments", "FrequencyKeyTypeHash", "Hash", "FrequencyKeyType", "preregisteredWords", "isFrequencyKey", "GaugeKeyTypeHash", "GaugeKeyType", "isGaugeKey", "HistogramKeyType", "boundaries", "combine", "hash", "isHistogramKey", "equals", "SummaryKeyType", "maxAge", "maxSize", "error", "quantiles", "array", "isSummaryKey", "counter", "options", "histogram", "boundaries", "HistogramKeyType", "isCounterKey", "u", "hasProperty", "CounterKeyTypeTypeId", "isFrequencyKey", "FrequencyKeyTypeTypeId", "isGaugeKey", "GaugeKeyTypeTypeId", "isHistogramKey", "HistogramKeyTypeTypeId", "isSummaryKey", "SummaryKeyTypeTypeId", "MetricKeySymbolKey", "MetricKeyTypeId", "Symbol", "for", "metricKeyVariance", "_Type", "_", "arrayEquivilence", "Arr", "getEquivalence", "equals", "MetricKeyImpl", "name", "keyType", "description", "tags", "constructor", "_hash", "pipe", "string", "combine", "hash", "array", "symbol", "u", "isMetricKey", "pipeArguments", "arguments", "hasProperty", "counter", "options", "fromNullable", "histogram", "name", "boundaries", "description", "MetricKeyImpl", "fromNullable", "taggedWithLabels", "dual", "self", "extraTags", "length", "MetricKeyImpl", "name", "keyType", "description", "union", "tags", "MetricStateSymbolKey", "MetricStateTypeId", "Symbol", "for", "CounterStateSymbolKey", "CounterStateTypeId", "FrequencyStateSymbolKey", "FrequencyStateTypeId", "GaugeStateSymbolKey", "GaugeStateTypeId", "HistogramStateSymbolKey", "HistogramStateTypeId", "SummaryStateSymbolKey", "SummaryStateTypeId", "metricStateVariance", "_A", "_", "CounterState", "count", "constructor", "symbol", "pipe", "hash", "combine", "cached", "that", "isCounterState", "pipeArguments", "arguments", "arrayEquals", "Arr", "getEquivalence", "equals", "FrequencyState", "occurrences", "_hash", "string", "array", "fromIterable", "entries", "isFrequencyState", "GaugeState", "value", "u", "isGaugeState", "HistogramState", "buckets", "min", "max", "sum", "isHistogramState", "SummaryState", "error", "quantiles", "isSummaryState", "counter", "frequency", "gauge", "histogram", "options", "summary", "isCounterState", "u", "hasProperty", "CounterStateTypeId", "isFrequencyState", "FrequencyStateTypeId", "isGaugeState", "GaugeStateTypeId", "isHistogramState", "HistogramStateTypeId", "isSummaryState", "SummaryStateTypeId", "MetricHookSymbolKey", "MetricHookTypeId", "Symbol", "for", "metricHookVariance", "_In", "_", "_Out", "make", "options", "pipe", "pipeArguments", "arguments", "bigint0", "BigInt", "counter", "key", "sum", "keyType", "bigint", "canUpdate", "incremental", "value", "_value", "update", "make", "get", "modify", "frequency", "values", "Map", "word", "preregisteredWords", "set", "slotCount", "gauge", "_key", "startAt", "v", "histogram", "bounds", "boundaries", "size", "length", "Uint32Array", "Float64Array", "count", "min", "Number", "MAX_VALUE", "max", "MIN_VALUE", "pipe", "sort", "Order", "map", "n", "i", "from", "to", "mid", "Math", "floor", "boundary", "getBuckets", "builder", "allocate", "cumulated", "buckets", "summary", "error", "maxAge", "maxSize", "quantiles", "sortedQuantiles", "head", "snapshot", "now", "item", "t", "age", "millis", "greaterThanOrEqualTo", "zero", "lessThanOrEqualTo", "push", "calculateQuantiles", "observe", "timestamp", "target", "Date", "sortedSamples", "sampleCount", "isNonEmptyReadonlyArray", "empty", "tail", "slice", "resolvedHead", "resolveQuantile", "none", "resolved", "of", "forEach", "quantile", "consumed", "rest", "rq", "current", "error_1", "sampleCount_1", "current_1", "consumed_1", "quantile_1", "rest_1", "error_2", "sampleCount_2", "current_2", "consumed_2", "quantile_2", "rest_2", "some", "lastNonEmpty", "headValue", "headNonEmpty", "sameHead", "span", "desired", "allowedError", "candConsumed", "candError", "abs", "valueToReturn", "isNone", "_tag", "prevError", "Error", "MetricPairSymbolKey", "MetricPairTypeId", "Symbol", "for", "metricPairVariance", "_Type", "_", "unsafeMake", "metricKey", "metricState", "MetricPairTypeId", "metricPairVariance", "pipe", "pipeArguments", "arguments", "MetricRegistrySymbolKey", "MetricRegistryTypeId", "Symbol", "for", "MetricRegistryImpl", "map", "MutableHashMap", "empty", "snapshot", "result", "key", "hook", "push", "unsafeMake", "get", "pipe", "getOrUndefined", "isCounterKey", "keyType", "getCounter", "isGaugeKey", "getGauge", "isFrequencyKey", "getFrequency", "isHistogramKey", "getHistogram", "isSummaryKey", "getSummary", "Error", "value", "counter", "has", "set", "frequency", "gauge", "bigint", "BigInt", "histogram", "summary", "make", "MetricSymbolKey", "MetricTypeId", "Symbol", "for", "metricVariance", "_Type", "_", "_In", "_Out", "globalMetricRegistry", "globalValue", "make", "keyType", "unsafeUpdate", "unsafeValue", "unsafeModify", "metric", "Object", "assign", "effect", "tap", "a", "update", "register", "pipe", "pipeArguments", "arguments", "counter", "name", "options", "fromMetricKey", "fromMetricKey", "key", "untaggedHook", "hookCache", "WeakMap", "hook", "extraTags", "length", "undefined", "globalMetricRegistry", "get", "taggedWithLabels", "set", "make", "keyType", "input", "update", "modify", "histogram", "name", "boundaries", "description", "fromMetricKey", "tagged", "dual", "self", "key", "value", "taggedWithLabels", "make", "taggedWithLabels", "dual", "self", "extraTags", "make", "keyType", "input", "extraTags1", "unsafeUpdate", "union", "unsafeValue", "unsafeModify", "update", "dual", "self", "input", "fiberRefGetWith", "currentMetricLabels", "tags", "sync", "unsafeUpdate", "RequestSymbolKey", "RequestTypeId", "Symbol", "for", "requestVariance", "_E", "_", "_A", "RequestPrototype", "StructuralPrototype", "complete", "dual", "self", "result", "fiberRefGetWith", "currentRequestMap", "map", "sync", "has", "entry", "get", "state", "completed", "core", "deferredUnsafeDone", "Direction", "Forward", "Backward", "RedBlackTreeIterator", "self", "stack", "direction", "count", "constructor", "clone", "slice", "reversed", "next", "entry", "moveNext", "movePrev", "_tag", "done", "value", "key", "length", "some", "none", "map", "last", "node", "index", "idx", "r", "_root", "left", "s", "right", "n", "push", "pop", "hasNext", "hasPrev", "Color", "Red", "Black", "clone", "color", "count", "key", "left", "right", "value", "swap", "n", "v", "repaint", "recount", "node", "RedBlackTreeSymbolKey", "RedBlackTreeTypeId", "Symbol", "for", "redBlackTreeVariance", "_Key", "_", "_Value", "RedBlackTreeProto", "symbol", "hash", "item", "pipe", "combine", "cached", "that", "isRedBlackTree", "_root", "count", "entries", "Array", "from", "every", "itemSelf", "i", "itemThat", "equals", "iterator", "stack", "n", "push", "left", "RedBlackTreeIterator", "Direction", "Forward", "toString", "format", "toJSON", "_id", "values", "map", "NodeInspectSymbol", "pipeArguments", "arguments", "makeImpl", "ord", "root", "tree", "Object", "create", "_ord", "u", "hasProperty", "findFirst", "dual", "self", "key", "cmp", "_ord", "node", "_root", "undefined", "d", "equals", "some", "value", "left", "right", "none", "has", "dual", "self", "key", "isSome", "findFirst", "insert", "value", "cmp", "_ord", "n", "_root", "n_stack", "d_stack", "d", "push", "left", "right", "color", "Color", "Red", "undefined", "count", "s", "length", "n2", "p", "n3", "Black", "pp", "y", "repaint", "Node", "recount", "ppp", "makeImpl", "keysForward", "keys", "Direction", "Forward", "keys", "self", "direction", "begin", "Symbol", "iterator", "count", "next", "entry", "key", "Direction", "Forward", "moveNext", "movePrev", "_tag", "done", "value", "removeFirst", "dual", "self", "key", "has", "ord", "_ord", "cmp", "node", "_root", "stack", "undefined", "d", "push", "equals", "left", "right", "length", "cstack", "Array", "n", "color", "value", "count", "i", "split", "v", "Color", "Red", "p", "pop", "makeImpl", "Node", "swap", "Black", "parent", "fixDoubleBlack", "fixDoubleBlack", "stack", "n", "p", "s", "z", "i", "length", "color", "Color", "Black", "left", "right", "undefined", "Red", "clone", "Node", "recount", "pp", "repaint", "push", "has", "insert", "keys", "keysForward", "removeFirst", "TypeId", "Symbol", "for", "SortedSetProto", "_A", "_", "symbol", "pipe", "hash", "keyTree", "combine", "cached", "that", "isSortedSet", "equals", "iterator", "keys", "toString", "format", "toJSON", "_id", "values", "Array", "from", "map", "NodeInspectSymbol", "pipeArguments", "arguments", "fromTree", "a", "Object", "create", "u", "hasProperty", "add", "Dual", "dual", "self", "value", "has", "keyTree", "fromTree", "insert", "remove", "Dual", "dual", "self", "value", "fromTree", "removeFirst", "keyTree", "SupervisorSymbolKey", "SupervisorTypeId", "Symbol", "for", "supervisorVariance", "_T", "_", "ProxySupervisor", "underlying", "value0", "constructor", "value", "onStart", "context", "effect", "parent", "fiber", "onEnd", "onEffect", "onSuspend", "onResume", "map", "f", "pipe", "zip", "right", "Zip", "left", "_tag", "isZip", "self", "hasProperty", "isTagged", "Track", "fibers", "Set", "sync", "Array", "from", "_context", "_effect", "_parent", "add", "_value", "delete", "_fiber", "onRun", "execution", "Const", "FibersIn", "ref", "get", "set", "remove", "fromEffect", "effect", "Const", "none", "globalValue", "void", "make", "OP_EMPTY", "OP_ADD_SUPERVISOR", "OP_REMOVE_SUPERVISOR", "OP_AND_THEN", "empty", "_tag", "combine", "self", "that", "first", "second", "patch", "supervisor", "patchLoop", "of", "_supervisor", "_patches", "patches", "isNonEmpty", "head", "headNonEmpty", "tailNonEmpty", "zip", "removeSupervisor", "prepend", "equals", "none", "isZip", "left", "right", "toSet", "pipe", "union", "make", "diff", "oldValue", "newValue", "oldSupervisors", "newSupervisors", "added", "difference", "reduce", "removed", "differ", "Differ", "fiberStarted", "metric", "counter", "incremental", "fiberActive", "fiberSuccesses", "fiberFailures", "fiberLifetimes", "tagged", "histogram", "metricBoundaries", "exponential", "start", "factor", "count", "EvaluationSignalContinue", "EvaluationSignalDone", "EvaluationSignalYieldNow", "runtimeFiberVariance", "_E", "_", "_A", "absurd", "Error", "toStringUnknown", "YieldedOp", "Symbol", "for", "yieldedOpChannel", "globalValue", "currentOp", "contOpSuccess", "OP_ON_SUCCESS", "cont", "value", "internalCall", "effect_instruction_i1", "OnStep", "_cont", "exitSucceed", "OP_ON_SUCCESS_AND_FAILURE", "effect_instruction_i2", "OP_REVERT_FLAGS", "self", "patchRuntimeFlags", "currentRuntimeFlags", "patch", "interruptible", "isInterrupted", "exitFailCause", "getInterruptedCause", "OP_WHILE", "effect_instruction_i0", "pushStack", "void", "OP_ITERATOR", "state", "next", "done", "yieldWrapGet", "drainQueueWhileRunningTable", "OP_INTERRUPT_SIGNAL", "runtimeFlags", "cur", "message", "processNewInterruptSignal", "cause", "OP_RESUME", "_self", "_runtimeFlags", "_cur", "_message", "OP_STATEFUL", "onFiber", "running", "OP_YIELD_NOW", "flatMap", "yieldNow", "runBlockedRequests", "forEachSequentialDiscard", "flatten", "requestsByRequestResolver", "forEachConcurrentDiscard", "sequentialCollectionToChunk", "dataSource", "sequential", "map", "Map", "arr", "block", "push", "toReadonlyArray", "entry", "set", "request", "flat", "fiberRefLocally", "invokeWithInterrupt", "runAll", "forEach", "listeners", "interrupted", "currentRequestMap", "_version", "version", "getCurrentVersion", "FiberRuntime", "Class", "FiberTypeId", "fiberVariance", "RuntimeFiberTypeId", "_fiberRefs", "_fiberId", "_queue", "Array", "_children", "_observers", "_running", "_stack", "_asyncInterruptor", "_asyncBlockingOn", "_exitValue", "_steps", "_isYielding", "currentOpCount", "currentSupervisor", "currentScheduler", "currentTracer", "currentSpan", "currentContext", "currentDefaultServices", "constructor", "fiberId", "fiberRefs0", "runtimeFlags0", "runtimeMetrics", "tags", "getFiberRef", "currentMetricLabels", "unsafeUpdate", "refreshRefCache", "commit", "join", "id", "resume", "effect", "tell", "status", "ask", "isDone", "scope", "unsafeMake", "children", "fiber", "from", "getChildren", "Set", "currentInterruptedCause", "fiberRefs", "getFiberRefs", "f", "suspend", "deferred", "deferredUnsafeMake", "stateful", "core", "deferredUnsafeDone", "sync", "deferredAwait", "drainQueueLaterOnExecutor", "await", "async", "cb", "exit", "succeed", "addObserver", "removeObserver", "inheritAll", "withFiberRuntime", "parentFiber", "parentStatus", "parentFiberId", "parentFiberRefs", "parentRuntimeFlags", "childFiberRefs", "updatedFiberRefs", "joinAs", "setFiberRefs", "updatedRuntimeFlags", "pipe", "diff", "exclude", "Interruption", "WindDown", "updateRuntimeFlags", "poll", "fromNullable", "unsafePoll", "interruptAsFork", "interruptSignal", "interrupt", "unsafeInterruptAsFork", "observer", "filter", "o", "setFiberRef", "unsafeDeleteFiberRef", "fiberRef", "delete_", "locals", "has", "get", "initial", "updateAs", "currentServices", "unsafeMap", "tracerTag", "key", "spanTag", "addChild", "child", "add", "removeChild", "delete", "transferChildren", "size", "drainQueueOnCurrentThread", "recurse", "evaluationSignal", "prev", "globalThis", "currentFiberURI", "length", "evaluateMessageWhileSuspended", "splice", "scheduleTask", "run", "currentSchedulingPriority", "drainQueueWhileRunning", "cur0", "_tag", "isEmpty", "addInterruptedCause", "oldSC", "sendInterruptSignalToAllChildren", "told", "interruptAllChildren", "it", "values", "body", "asVoid", "whileLoop", "while", "step", "reportExitValue", "startTimeMillis", "endTimeMillis", "Date", "now", "OP_SUCCESS", "OP_FAILURE", "level", "currentUnhandledErrorLogLevel", "isInterruptedOnly", "log", "setExitValue", "i", "getLoggers", "currentLoggers", "overrideLogLevel", "logLevel", "isSome", "currentLogLevel", "minimumLogLevel", "currentMinimumLogLevel", "greaterThan", "spans", "currentLogSpan", "annotations", "currentLogAnnotations", "loggers", "contextMap", "clockService", "clockTag", "date", "unsafeCurrentTimeMillis", "Inspectable", "withRedactableContext", "logger", "context", "evaluateEffect", "suspended", "effect0", "onResume", "eff", "runLoop", "op", "_op", "OP_YIELD", "cooperativeYielding", "exitVoid", "OP_ASYNC", "enable", "interruption", "onSuspend", "startFork", "oldRuntimeFlags", "newRuntimeFlags", "initiateAsync", "asyncRegister", "alreadyCalled", "callback", "e", "failCause", "die", "refs", "flags", "popStack", "item", "pop", "getNextSuccessCont", "frame", "OP_ON_FAILURE", "getNextFailCont", "OP_TAG", "unsafeGet", "fail", "left", "NoSuchElementException", "right", "unsafeAsync", "microResume", "runFork", "provideContext", "none", "error", "defect", "abortResume", "unsafeInterrupt", "OP_SYNC", "undefined", "oldCur", "stripFailures", "OP_WITH_RUNTIME", "frames", "snap", "patchRefs", "patchFlags", "blocked", "newFiber", "uninterruptibleMask", "restore", "forkDaemon", "runRequestBlock", "OP_UPDATE_RUNTIME_FLAGS", "updateFlags", "revertFlags", "RevertFlags", "check", "OP_COMMIT", "OpSupervision", "onEffect", "shouldYield", "priority", "EffectTypeId", "_V", "currentVersionMismatchErrorLogLevel", "effectVersion", "empty", "hasProperty", "dieMessage", "isInterruptedException", "fiberRefUnsafeMake", "fromLiteral", "loggerWithConsoleLog", "makeLogger", "opts", "services", "getOrDefault", "Context", "consoleTag", "unsafe", "defaultLogger", "globalValue", "Symbol", "for", "loggerWithConsoleLog", "stringLogger", "tracerLogger", "globalValue", "Symbol", "for", "makeLogger", "annotations", "cause", "context", "fiberId", "logLevel", "message", "span", "getOption", "getOrDefault", "currentContext", "spanTag", "_tag", "value", "clockService", "unsafeGet", "currentServices", "clockTag", "attributes", "key", "threadName", "label", "pretty", "renderErrorCause", "event", "toStringUnknown", "Array", "isArray", "length", "unsafeCurrentTimeNanos", "currentLoggers", "globalValue", "Symbol", "for", "fiberRefUnsafeMakeHashSet", "make", "defaultLogger", "tracerLogger", "forEach", "dual", "args", "isIterable", "self", "f", "options", "withFiberRuntime", "r", "isRequestBatchingEnabled", "batching", "getFiberRef", "currentRequestBatching", "discard", "match", "concurrency", "finalizersMaskInternal", "sequential", "concurrentFinalizers", "restore", "forEachConcurrentDiscard", "a", "i", "forEachSequentialDiscard", "parallel", "n", "parallelN", "forEachParN", "forEachSequential", "forEachParUnbounded", "suspend", "as", "fromIterable", "array", "Array", "length", "fn", "flatMap", "b", "sync", "zipRight", "succeed", "processAll", "uninterruptibleMask", "transplant", "graft", "parent", "todos", "from", "reverse", "target", "void", "counter", "interrupted", "fibersCount", "Math", "min", "fibers", "Set", "results", "interruptAll", "fiber", "currentScheduler", "scheduleTask", "unsafeInterruptAsFork", "id", "startOrder", "joinOrder", "residual", "collectExits", "exits", "filter", "exit", "_tag", "sort", "index", "map", "push", "exitVoid", "runFiber", "eff", "interruptImmediately", "runnable", "uninterruptible", "unsafeForkUnstarted", "currentRuntimeFlags", "globalScope", "resume", "onInterruptSignal", "stepOrExit", "step", "processingFiber", "async", "pushResult", "res", "_op", "next", "pop", "returnNextElement", "yieldNow", "onRes", "todo", "add", "addObserver", "wrapped", "effect_instruction_i0", "delete", "getOrElse", "exitCollectAll", "requests", "blocked", "reduce", "par", "effect_instruction_i1", "asVoid", "onExit", "flatten", "join", "exitMatch", "onFailure", "cause", "toPop", "cb", "count", "check", "hitNext", "exitSucceed", "exitFailCause", "onSuccess", "inheritAll", "forkDaemon", "self", "forkWithScopeOverride", "globalScope", "unsafeFork", "effect", "parentFiber", "parentRuntimeFlags", "overrideScope", "childFiber", "unsafeMakeChildFiber", "resume", "unsafeForkUnstarted", "childId", "unsafeMake", "parentFiberRefs", "getFiberRefs", "childFiberRefs", "forkAs", "FiberRuntime", "childContext", "getOrDefault", "currentContext", "supervisor", "currentSupervisor", "onStart", "some", "addObserver", "exit", "onEnd", "parentScope", "pipe", "getFiberRef", "currentForkScopeOverride", "getOrElse", "scope", "add", "forkWithScopeOverride", "self", "scopeOverride", "withFiberRuntime", "parentStatus", "succeed", "runtimeFlags", "parallelFinalizers", "self", "contextWithEffect", "context", "match", "getOption", "scopeTag", "onNone", "onSome", "scope", "strategy", "_tag", "flatMap", "scopeFork", "parallel", "inner", "scopeExtend", "parallelNFinalizers", "parallelism", "parallelN", "finalizersMaskInternal", "strategy", "concurrentFinalizers", "self", "contextWithEffect", "context", "match", "getOption", "scopeTag", "onNone", "identity", "onSome", "scope", "patch", "_tag", "parallelFinalizers", "sequentialFinalizers", "parallelNFinalizers", "parallelism", "sequentialFinalizers", "self", "contextWithEffect", "context", "match", "getOption", "scopeTag", "onNone", "onSome", "scope", "strategy", "_tag", "flatMap", "scopeFork", "sequential", "inner", "scopeExtend", "scopeTag", "Context", "GenericTag", "scopeUnsafeAddFinalizer", "scope", "fin", "state", "_tag", "finalizers", "set", "ScopeImplProto", "ScopeTypeId", "CloseableScopeTypeId", "pipe", "pipeArguments", "arguments", "fork", "strategy", "sync", "newScope", "scopeUnsafeMake", "key", "exit", "close", "_", "delete", "suspend", "void", "Array", "from", "values", "reverse", "length", "isSequential", "forEachSequential", "flatMap", "results", "exitCollectAll", "map", "exitAsVoid", "getOrElse", "exitVoid", "isParallel", "forEachParUnbounded", "parallel", "forEachParN", "parallelism", "addFinalizer", "sequential", "Object", "create", "Map", "scopeExtend", "dual", "effect", "scope", "mapInputContext", "merge", "make", "scopeTag", "fiberRefUnsafeMakeSupervisor", "initial", "fiberRefUnsafeMakePatch", "differ", "fork", "empty", "currentRuntimeFlags", "core", "fiberRefUnsafeMakeRuntimeFlags", "none", "currentSupervisor", "fiberRefUnsafeMakeSupervisor", "invokeWithInterrupt", "self", "entries", "onInterrupt", "fiberIdWith", "id", "flatMap", "forkDaemon", "interruptible", "processing", "async", "cb", "counts", "map", "_", "listeners", "count", "checkDone", "every", "result", "state", "current", "_tag", "exitIsExit", "effect", "isInterrupted", "cause", "cleanup", "forEach", "f", "interruptFiber", "addObserver", "exit", "r", "i", "observer", "removeObserver", "sync", "suspend", "residual", "entry", "completed", "forEachSequentialDiscard", "complete", "request", "exitInterrupt", "isFailType", "pretty", "close", "scopeClose", "fork", "scopeFork", "makeDual", "f", "arguments", "length", "runtime", "effect", "args", "apply", "unsafeFork", "self", "options", "fiberId", "unsafeMake", "fiberRefUpdates", "currentContext", "context", "scheduler", "push", "currentScheduler", "fiberRefs", "updateManyAs", "entries", "forkAs", "updateRefs", "fiberRuntime", "FiberRuntime", "runtimeFlags", "scope", "flatMap", "fork", "sequential", "closeableScope", "zipRight", "scopeAddFinalizer", "fiberIdWith", "id", "equals", "void", "interruptAsFiber", "onExit", "exit", "close", "supervisor", "currentSupervisor", "none", "onStart", "addObserver", "onEnd", "fiberScope", "globalScope", "add", "immediate", "resume", "start", "unsafeRunSync", "makeDual", "runtime", "effect", "result", "unsafeRunSyncExit", "_tag", "fiberFailure", "effect_instruction_i0", "AsyncFiberExceptionImpl", "Error", "fiber", "constructor", "id", "name", "stack", "message", "asyncFiberException", "limit", "stackTraceLimit", "error", "FiberFailureId", "Symbol", "for", "FiberFailureCauseId", "FiberFailureImpl", "Error", "constructor", "cause", "head", "prettyErrors", "message", "name", "stack", "toJSON", "_id", "toString", "pretty", "renderErrorCause", "NodeInspectSymbol", "fiberFailure", "limit", "stackTraceLimit", "error", "fastPath", "effect", "op", "_op", "exitFail", "left", "exitSucceed", "right", "value", "NoSuchElementException", "unsafeRunSyncExit", "makeDual", "runtime", "scheduler", "SyncScheduler", "fiberRuntime", "unsafeFork", "flush", "result", "unsafePoll", "exitDie", "capture", "asyncFiberException", "currentSpanFromFiber", "RuntimeImpl", "context", "runtimeFlags", "fiberRefs", "constructor", "pipe", "pipeArguments", "arguments", "make", "options", "defaultRuntimeFlags", "runtimeFlags", "make", "Interruption", "CooperativeYielding", "RuntimeMetrics", "defaultRuntime", "context", "Context", "empty", "fiberRefs", "FiberRefs", "unsafeForkEffect", "unsafeFork", "defaultRuntime", "unsafeRunSyncEffect", "unsafeRunSync", "defaultRuntime", "Error", "plainArgsSymbol", "Symbol", "for", "O", "BaseEffectError", "YieldableError", "constructor", "args", "message", "cause", "undefined", "Object", "assign", "defineProperty", "value", "enumerable", "toJSON", "TaggedError", "tag", "_tag", "prototype", "name", "isEffect", "forEach", "suspend", "_void", "void", "catchAll", "map", "mapError", "either", "flatMap", "runFork", "unsafeForkEffect", "runSync", "unsafeRunSyncEffect", "make", "Pointer", "path", "actual", "issue", "_tag", "constructor", "Unexpected", "message", "Missing", "ast", "undefined", "Composite", "issues", "output", "Refinement", "kind", "Transformation", "Type", "Forbidden", "ParseErrorTypeId", "Symbol", "for", "ParseError", "TaggedError", "ParseErrorTypeId", "message", "toString", "TreeFormatter", "formatIssueSync", "issue", "toJSON", "_id", "NodeInspectSymbol", "isEither", "flatMap", "dual", "self", "f", "match", "onLeft", "left", "onRight", "map", "mapError", "mapLeft", "orElse", "dual", "self", "f", "isEither", "match", "onLeft", "onRight", "right", "catchAll", "mergeInternalOptions", "options", "overrideOptions", "undefined", "isNumber", "getEither", "ast", "isDecoding", "parser", "goMemo", "u", "getOption", "ast", "isDecoding", "options", "parser", "getEither", "input", "overrideOptions", "getRight", "decodeMemoMap", "globalValue", "Symbol", "for", "WeakMap", "encodeMemoMap", "goMemo", "ast", "isDecoding", "memoMap", "memo", "get", "raw", "go", "parseOptionsAnnotation", "getParseOptionsAnnotation", "parserWithOptions", "isSome", "i", "options", "mergeInternalOptions", "value", "decodingFallbackAnnotation", "getDecodingFallbackAnnotation", "parser", "handleForbidden", "orElse", "set", "getConcurrency", "getOrUndefined", "getConcurrencyAnnotation", "getBatching", "getBatchingAnnotation", "_tag", "from", "defaultParseOption", "allErrors", "errors", "result", "flatMap", "ef", "issue", "Refinement", "hasStableFilter", "isComposite", "match", "filter", "onNone", "left", "onSome", "ep", "Composite", "a", "right", "typeAST", "to", "dropRightRefinement", "transform", "getFinalTransformation", "transformation", "mapError", "e", "Transformation", "i2", "parse", "decodeUnknown", "typeParameters", "encodeUnknown", "fromRefinement", "u", "literal", "symbol", "isUndefined", "isNever", "isString", "isNumber", "isBoolean", "isBigInt", "isSymbol", "isObject", "enums", "some", "_", "regex", "getTemplateLiteralRegExp", "test", "elements", "map", "type", "rest", "annotatedAST", "requiredTypes", "isOptional", "length", "concat", "slice", "requiredLen", "expectedIndexes", "join", "concurrency", "batching", "input", "isArray", "Type", "es", "stepKey", "output", "len", "Pointer", "Missing", "push", "Unexpected", "queue", "undefined", "te", "isEither", "isLeft", "sortByIndex", "nk", "index", "either", "t", "void", "isNonEmptyReadonlyArray", "head", "tail", "j", "computeResult", "isNonEmptyArray", "cqueue", "suspend", "state", "copy", "forEach", "f", "discard", "propertySignatures", "indexSignatures", "isNotNullable", "expectedKeysMap", "expectedKeys", "ps", "name", "is", "parameter", "expectedAST", "Union", "make", "key", "UniqueSymbol", "Literal", "expected", "isRecord", "onExcessPropertyError", "onExcessProperty", "onExcessPropertyPreserve", "inputKeys", "Reflect", "ownKeys", "String", "isExact", "exact", "hasKey", "Object", "prototype", "hasOwnProperty", "call", "indexSignature", "keys", "getKeysForIndexSignature", "keu", "isRight", "vpr", "tv", "propertyOrder", "indexOf", "out", "assign", "searchTree", "getSearchTree", "types", "ownKeysLen", "astTypesLen", "Map", "candidates", "isRecordOrArray", "buckets", "literals", "literalsUnion", "errorAst", "TypeLiteral", "PropertySignature", "fakePropertySignature", "otherwise", "candidate", "pr", "finalResult", "memoizeThunk", "refinement", "getLiterals", "annotation", "getSurrogateAnnotation", "propertySignature", "encodedAST", "isLiteral", "element", "members", "member", "tags", "hash", "isRefinement", "effect", "actual", "isEffectAllowed", "scheduler", "SyncScheduler", "fiber", "runFork", "flush", "exit", "unsafePoll", "isSuccess", "cause", "isFailType", "error", "Forbidden", "pretty", "compare", "b", "sort", "decode", "encode", "pst", "propertySignatureTransformations", "o", "none", "makeTree", "forest", "TreeFormatter", "formatIssue", "formatTree", "drawTree", "formatIssueSync", "getOrThrow", "runSync", "formatError", "formatErrorSync", "tree", "draw", "indentation", "r", "isLast", "formatTransformationKind", "kind", "formatRefinementKind", "getAnnotated", "Either_void", "Either", "getCurrentMessage", "pipe", "getMessageAnnotation", "messageAnnotation", "union", "message", "override", "isEffect", "createParseIssueGuard", "tag", "isTransformation", "getMessage", "currentMessage", "useInnerMessage", "getParseIssueTitleAnnotation", "flatMapNullable", "getRefinementExpected", "getDescriptionAnnotation", "getTitleAnnotation", "getAutoTitleAnnotation", "getIdentifierAnnotation", "getOrElse", "getDefaultTypeMessage", "formatUnknown", "formatTypeMessage", "getParseIssueTitle", "formatForbiddenMessage", "formatUnexpectedMessage", "formatMissingMessage", "missingMessageAnnotation", "getMissingMessageAnnotation", "formatPath", "path", "parseIssueTitle", "isNonEmpty", "issues", "make", "schema", "definitions", "ast", "isTransformation", "isParseJsonTransformation", "from", "to", "jsonSchema", "fromAST", "out", "$schema", "$defs", "isEmptyRecord", "options", "definitionPath", "getRef", "id", "target", "topLevelReferenceStrategy", "additionalPropertiesStrategy", "go", "constNever", "$id", "not", "constAny", "constUnknown", "constVoid", "constObject", "constEmptyStruct", "getRawDescription", "annotated", "undefined", "getOrUndefined", "getDescriptionAnnotation", "getRawTitle", "getTitleAnnotation", "getRawDefault", "getDefaultAnnotation", "none", "encodeDefault", "def", "getOption", "getRawExamples", "getExamplesAnnotation", "encodeExamples", "examples", "filterMap", "e", "length", "filterBuiltIn", "annotation", "key", "_tag", "stringKeyword", "annotations", "numberKeyword", "booleanKeyword", "pruneJsonSchemaAnnotations", "description", "title", "isSome", "o", "value", "default", "encodedExamples", "Object", "keys", "getContextJsonSchemaAnnotations", "getJsonSchemaAnnotations", "DescriptionAnnotationId", "TitleAnnotationId", "mergeJsonSchemaAnnotations", "jsonSchemaAnnotations", "allOf", "pruneUndefined", "isNone", "getJSONSchemaAnnotation", "SchemaIdAnnotationId", "ParseJsonSchemaId", "isOverrideAnnotation", "isRefinement", "schemaId", "IntSchemaId", "type", "mergeRefinements", "handle", "name", "filter", "unshift", "i", "minLength", "maxLength", "pattern", "minItems", "maxItems", "minimum", "maximum", "exclusiveMinimum", "exclusiveMaximum", "multipleOf", "isContentSchemaSupported", "getAdditionalProperties", "addASTAnnotations", "addAnnotations", "getIdentifierAnnotation", "identifier", "getJSONIdentifier", "isSuspend", "f", "isTypeLiteral", "isDeclaration", "surrogate", "getSurrogateAnnotation", "path", "errors", "escapedId", "replace", "$ref", "has", "hook", "handler", "t", "getTransformationFrom", "Error", "getJSONSchemaMissingAnnotationErrorMessage", "getJSONSchemaMissingIdentifierAnnotationErrorMessage", "literal", "isString", "enum", "isNumber", "isBoolean", "anyOf", "enums", "map", "$comment", "elements", "concat", "rest", "output", "len", "element", "isOptional", "items", "restLength", "head", "isHomogeneous", "every", "additionalItems", "getJSONSchemaUnsupportedPostRestElementsErrorMessage", "propertySignatures", "indexSignatures", "required", "properties", "additionalProperties", "patternProperties", "propertyNames", "is", "pruned", "parameter", "getTemplateLiteralRegExp", "source", "indexSignaturePath", "ps", "push", "getJSONSchemaUnsupportedKeyErrorMessage", "members", "types", "compactUnion", "regex", "String", "transformation", "isJsonSchema7Object", "propertySignatureTransformations", "toKey", "fromKey", "toProperty", "isRecord", "fromProperty", "Array", "isArray", "hasOwn", "isNeverWithoutCustomAnnotations", "hasProperty", "neverKeyword", "isAny", "isUnknown", "isVoid", "isCompactableLiteral", "m", "last", "error", "sourceMapSupport", "error", "config", "buildManifest", "importErrors", "timings", "tasks"]
}
